begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.patch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|FileHeader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|DiffCacheEntryFactory
specifier|final
class|class
name|DiffCacheEntryFactory
block|{
DECL|field|server
specifier|private
specifier|final
name|GerritServer
name|server
decl_stmt|;
DECL|method|DiffCacheEntryFactory (final GerritServer gs)
name|DiffCacheEntryFactory
parameter_list|(
specifier|final
name|GerritServer
name|gs
parameter_list|)
block|{
name|server
operator|=
name|gs
expr_stmt|;
block|}
DECL|method|createEntry (final DiffCacheKey key)
name|DiffCacheContent
name|createEntry
parameter_list|(
specifier|final
name|DiffCacheKey
name|key
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Repository
name|db
init|=
name|server
operator|.
name|openRepository
argument_list|(
name|key
operator|.
name|getProjectKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|createEntry
argument_list|(
name|key
argument_list|,
name|db
argument_list|)
return|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createEntry (final DiffCacheKey key, final Repository db)
specifier|private
name|DiffCacheContent
name|createEntry
parameter_list|(
specifier|final
name|DiffCacheKey
name|key
parameter_list|,
specifier|final
name|Repository
name|db
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ObjectId
name|newId
init|=
name|key
operator|.
name|getNewId
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"git"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"--git-dir=."
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"diff-tree"
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|getSourceFileName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"-M"
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|key
operator|.
name|getWhitespace
argument_list|()
condition|)
block|{
case|case
name|IGNORE_NONE
case|:
break|break;
case|case
name|IGNORE_SPACE_AT_EOL
case|:
name|args
operator|.
name|add
argument_list|(
literal|"--ignore-space-at-eol"
argument_list|)
expr_stmt|;
break|break;
case|case
name|IGNORE_SPACE_CHANGE
case|:
name|args
operator|.
name|add
argument_list|(
literal|"--ignore-space-change"
argument_list|)
expr_stmt|;
break|break;
case|case
name|IGNORE_ALL_SPACE
case|:
name|args
operator|.
name|add
argument_list|(
literal|"--ignore-all-space"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unsupported whitespace "
operator|+
name|key
operator|.
name|getWhitespace
argument_list|()
argument_list|)
throw|;
block|}
name|args
operator|.
name|add
argument_list|(
literal|"--full-index"
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|getOldId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"--cc"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|args
operator|.
name|add
argument_list|(
literal|"--unified=1"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|key
operator|.
name|getOldId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|args
operator|.
name|add
argument_list|(
name|newId
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"--"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|key
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|getSourceFileName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
name|key
operator|.
name|getSourceFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Process
name|proc
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|args
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|null
argument_list|,
name|db
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileHeader
name|file
decl_stmt|;
try|try
block|{
specifier|final
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|Patch
name|p
init|=
operator|new
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|Patch
argument_list|()
decl_stmt|;
name|proc
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|proc
operator|.
name|getErrorStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|p
operator|.
name|parse
argument_list|(
name|proc
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|.
name|getInputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getFiles
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|DiffCacheContent
operator|.
name|createEmpty
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"unexpected file count: "
operator|+
name|key
argument_list|)
throw|;
block|}
name|file
operator|=
name|p
operator|.
name|getFiles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|proc
operator|.
name|waitFor
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"git diff-tree exited abnormally: "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{       }
block|}
return|return
name|DiffCacheContent
operator|.
name|create
argument_list|(
name|file
argument_list|)
return|;
block|}
block|}
end_class

end_unit

