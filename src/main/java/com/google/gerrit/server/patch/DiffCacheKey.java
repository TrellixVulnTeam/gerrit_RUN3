begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.patch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|PatchScriptSettings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|PatchScriptSettings
operator|.
name|Whitespace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AnyObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectIdSerialization
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_class
DECL|class|DiffCacheKey
specifier|public
specifier|final
class|class
name|DiffCacheKey
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|4L
decl_stmt|;
DECL|field|projectKey
specifier|private
specifier|transient
name|Project
operator|.
name|NameKey
name|projectKey
decl_stmt|;
DECL|field|oldId
specifier|private
specifier|transient
name|ObjectId
name|oldId
decl_stmt|;
DECL|field|newId
specifier|private
specifier|transient
name|ObjectId
name|newId
decl_stmt|;
DECL|field|fileName
specifier|private
specifier|transient
name|String
name|fileName
decl_stmt|;
DECL|field|sourceFileName
specifier|private
specifier|transient
name|String
name|sourceFileName
decl_stmt|;
DECL|field|whitespace
specifier|private
specifier|transient
name|Whitespace
name|whitespace
decl_stmt|;
DECL|method|DiffCacheKey (final Project.NameKey pnk, final AnyObjectId a, final AnyObjectId b, final Patch p, final PatchScriptSettings s)
specifier|public
name|DiffCacheKey
parameter_list|(
specifier|final
name|Project
operator|.
name|NameKey
name|pnk
parameter_list|,
specifier|final
name|AnyObjectId
name|a
parameter_list|,
specifier|final
name|AnyObjectId
name|b
parameter_list|,
specifier|final
name|Patch
name|p
parameter_list|,
specifier|final
name|PatchScriptSettings
name|s
parameter_list|)
block|{
name|this
argument_list|(
name|pnk
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|p
operator|.
name|getFileName
argument_list|()
argument_list|,
name|p
operator|.
name|getSourceFileName
argument_list|()
argument_list|,
name|s
operator|.
name|getWhitespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|DiffCacheKey (final Project.NameKey p, final AnyObjectId a, final AnyObjectId b, final String dname, final String sname, final Whitespace ws)
specifier|public
name|DiffCacheKey
parameter_list|(
specifier|final
name|Project
operator|.
name|NameKey
name|p
parameter_list|,
specifier|final
name|AnyObjectId
name|a
parameter_list|,
specifier|final
name|AnyObjectId
name|b
parameter_list|,
specifier|final
name|String
name|dname
parameter_list|,
specifier|final
name|String
name|sname
parameter_list|,
specifier|final
name|Whitespace
name|ws
parameter_list|)
block|{
name|projectKey
operator|=
name|p
expr_stmt|;
name|oldId
operator|=
name|a
operator|!=
literal|null
condition|?
name|a
operator|.
name|copy
argument_list|()
else|:
literal|null
expr_stmt|;
name|newId
operator|=
name|b
operator|.
name|copy
argument_list|()
expr_stmt|;
name|fileName
operator|=
name|dname
expr_stmt|;
name|sourceFileName
operator|=
name|sname
expr_stmt|;
name|whitespace
operator|=
name|ws
expr_stmt|;
block|}
DECL|method|getProjectKey ()
specifier|public
name|Project
operator|.
name|NameKey
name|getProjectKey
parameter_list|()
block|{
return|return
name|projectKey
return|;
block|}
DECL|method|getOldId ()
specifier|public
name|ObjectId
name|getOldId
parameter_list|()
block|{
return|return
name|oldId
return|;
block|}
DECL|method|getNewId ()
specifier|public
name|ObjectId
name|getNewId
parameter_list|()
block|{
return|return
name|newId
return|;
block|}
DECL|method|getFileName ()
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|fileName
return|;
block|}
DECL|method|getSourceFileName ()
specifier|public
name|String
name|getSourceFileName
parameter_list|()
block|{
return|return
name|sourceFileName
return|;
block|}
DECL|method|getWhitespace ()
specifier|public
name|Whitespace
name|getWhitespace
parameter_list|()
block|{
return|return
name|whitespace
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|projectKey
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldId
operator|!=
literal|null
condition|)
block|{
name|h
operator|*=
literal|31
expr_stmt|;
name|h
operator|+=
name|oldId
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
name|h
operator|*=
literal|31
expr_stmt|;
name|h
operator|+=
name|newId
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|h
operator|*=
literal|31
expr_stmt|;
name|h
operator|+=
name|fileName
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|sourceFileName
operator|!=
literal|null
condition|)
block|{
name|h
operator|*=
literal|31
expr_stmt|;
name|h
operator|+=
name|sourceFileName
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
name|h
operator|*=
literal|31
expr_stmt|;
name|h
operator|+=
name|whitespace
operator|.
name|ordinal
argument_list|()
expr_stmt|;
return|return
name|h
return|;
block|}
annotation|@
name|Override
DECL|method|equals (final Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|DiffCacheKey
condition|)
block|{
specifier|final
name|DiffCacheKey
name|k
init|=
operator|(
name|DiffCacheKey
operator|)
name|o
decl_stmt|;
return|return
name|projectKey
operator|.
name|equals
argument_list|(
name|k
operator|.
name|projectKey
argument_list|)
operator|&&
name|eq
argument_list|(
name|oldId
argument_list|,
name|k
operator|.
name|oldId
argument_list|)
operator|&&
name|eq
argument_list|(
name|newId
argument_list|,
name|k
operator|.
name|newId
argument_list|)
operator|&&
name|eq
argument_list|(
name|fileName
argument_list|,
name|k
operator|.
name|fileName
argument_list|)
operator|&&
name|eq
argument_list|(
name|sourceFileName
argument_list|,
name|k
operator|.
name|sourceFileName
argument_list|)
operator|&&
name|whitespace
operator|==
name|k
operator|.
name|whitespace
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|eq (final ObjectId a, final ObjectId b)
specifier|private
specifier|static
name|boolean
name|eq
parameter_list|(
specifier|final
name|ObjectId
name|a
parameter_list|,
specifier|final
name|ObjectId
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
operator|&&
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|a
operator|!=
literal|null
operator|&&
name|b
operator|!=
literal|null
operator|&&
name|AnyObjectId
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|method|eq (final String a, final String b)
specifier|private
specifier|static
name|boolean
name|eq
parameter_list|(
specifier|final
name|String
name|a
parameter_list|,
specifier|final
name|String
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
operator|&&
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|a
operator|!=
literal|null
operator|&&
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|"DiffCache["
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
name|whitespace
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
name|projectKey
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldId
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
name|oldId
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|append
argument_list|(
name|newId
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|" -- "
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourceFileName
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
name|sourceFileName
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|writeObject (final ObjectOutputStream out)
specifier|private
name|void
name|writeObject
parameter_list|(
specifier|final
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|projectKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectIdSerialization
operator|.
name|write
argument_list|(
name|out
argument_list|,
name|oldId
argument_list|)
expr_stmt|;
name|ObjectIdSerialization
operator|.
name|write
argument_list|(
name|out
argument_list|,
name|newId
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
name|out
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
name|out
argument_list|,
name|sourceFileName
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
name|out
argument_list|,
name|whitespace
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|readObject (final ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
specifier|final
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|projectKey
operator|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|in
operator|.
name|readUTF
argument_list|()
argument_list|)
expr_stmt|;
name|oldId
operator|=
name|ObjectIdSerialization
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|newId
operator|=
name|ObjectIdSerialization
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|sourceFileName
operator|=
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|whitespace
operator|=
name|Whitespace
operator|.
name|valueOf
argument_list|(
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeString (final ObjectOutputStream out, final String s)
specifier|private
specifier|static
name|void
name|writeString
parameter_list|(
specifier|final
name|ObjectOutputStream
name|out
parameter_list|,
specifier|final
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|s
operator|!=
literal|null
condition|?
name|s
else|:
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|readString (final ObjectInputStream in)
specifier|private
specifier|static
name|String
name|readString
parameter_list|(
specifier|final
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|s
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
return|return
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|s
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

