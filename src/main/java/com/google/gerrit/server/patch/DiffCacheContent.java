begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.patch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|diff
operator|.
name|Edit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|FileMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|CombinedFileHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|FileHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|DiffCacheContent
specifier|public
specifier|final
class|class
name|DiffCacheContent
implements|implements
name|Serializable
block|{
comment|// Note: If we modify our version, also modify DiffCacheKey, so
comment|// the on disk cache is fully destroyed and recreated when the
comment|// schema has changed.
comment|//
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
name|DiffCacheKey
operator|.
name|serialVersionUID
decl_stmt|;
DECL|method|create (final FileHeader file)
specifier|public
specifier|static
name|DiffCacheContent
name|create
parameter_list|(
specifier|final
name|FileHeader
name|file
parameter_list|)
block|{
return|return
operator|new
name|DiffCacheContent
argument_list|(
name|file
argument_list|)
return|;
block|}
DECL|method|createEmpty ()
specifier|public
specifier|static
name|DiffCacheContent
name|createEmpty
parameter_list|()
block|{
return|return
operator|new
name|DiffCacheContent
argument_list|()
return|;
block|}
DECL|field|header
specifier|private
specifier|transient
name|FileHeader
name|header
decl_stmt|;
DECL|field|edits
specifier|private
specifier|transient
name|List
argument_list|<
name|Edit
argument_list|>
name|edits
decl_stmt|;
DECL|method|DiffCacheContent ()
specifier|private
name|DiffCacheContent
parameter_list|()
block|{
name|header
operator|=
literal|null
expr_stmt|;
name|edits
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
DECL|method|DiffCacheContent (final FileHeader h)
specifier|private
name|DiffCacheContent
parameter_list|(
specifier|final
name|FileHeader
name|h
parameter_list|)
block|{
name|header
operator|=
name|compact
argument_list|(
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
name|h
operator|==
literal|null
operator|||
name|h
operator|instanceof
name|CombinedFileHeader
operator|||
name|h
operator|.
name|getHunks
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|h
operator|.
name|getOldMode
argument_list|()
operator|==
name|FileMode
operator|.
name|GITLINK
operator|||
name|h
operator|.
name|getNewMode
argument_list|()
operator|==
name|FileMode
operator|.
name|GITLINK
condition|)
block|{
name|edits
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|edits
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|h
operator|.
name|toEditList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFileHeader ()
specifier|public
name|FileHeader
name|getFileHeader
parameter_list|()
block|{
return|return
name|header
return|;
block|}
DECL|method|getEdits ()
specifier|public
name|List
argument_list|<
name|Edit
argument_list|>
name|getEdits
parameter_list|()
block|{
return|return
name|edits
return|;
block|}
DECL|method|writeObject (final ObjectOutputStream out)
specifier|private
name|void
name|writeObject
parameter_list|(
specifier|final
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|hdrLen
init|=
name|end
argument_list|(
name|header
argument_list|)
operator|-
name|header
operator|.
name|getStartOffset
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|hdrLen
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|header
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|header
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|hdrLen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|edits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Edit
name|e
range|:
name|edits
control|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|e
operator|.
name|getBeginA
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|e
operator|.
name|getEndA
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|e
operator|.
name|getBeginB
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|e
operator|.
name|getEndB
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readObject (final ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
specifier|final
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|hdrLen
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|hdrLen
operator|>
literal|0
condition|)
block|{
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|hdrLen
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|header
operator|=
name|parse
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|header
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|int
name|editCount
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|editCount
operator|>
literal|0
condition|)
block|{
specifier|final
name|Edit
index|[]
name|editArray
init|=
operator|new
name|Edit
index|[
name|editCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|editCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|beginA
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
specifier|final
name|int
name|endA
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
specifier|final
name|int
name|beginB
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
specifier|final
name|int
name|endB
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|editArray
index|[
name|i
index|]
operator|=
operator|new
name|Edit
argument_list|(
name|beginA
argument_list|,
name|endA
argument_list|,
name|beginB
argument_list|,
name|endB
argument_list|)
expr_stmt|;
block|}
name|edits
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|editArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|edits
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|parse (final byte[] buf)
specifier|private
specifier|static
name|FileHeader
name|parse
parameter_list|(
specifier|final
name|byte
index|[]
name|buf
parameter_list|)
block|{
specifier|final
name|Patch
name|p
init|=
operator|new
name|Patch
argument_list|()
decl_stmt|;
name|p
operator|.
name|parse
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|p
operator|.
name|getFiles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|compact (final FileHeader h)
specifier|private
specifier|static
name|FileHeader
name|compact
parameter_list|(
specifier|final
name|FileHeader
name|h
parameter_list|)
block|{
specifier|final
name|int
name|end
init|=
name|end
argument_list|(
name|h
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|getStartOffset
argument_list|()
operator|==
literal|0
operator|&&
name|end
operator|==
name|h
operator|.
name|getBuffer
argument_list|()
operator|.
name|length
condition|)
block|{
return|return
name|h
return|;
block|}
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|end
operator|-
name|h
operator|.
name|getStartOffset
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|h
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|h
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|parse
argument_list|(
name|buf
argument_list|)
return|;
block|}
DECL|method|end (final FileHeader h)
specifier|private
specifier|static
name|int
name|end
parameter_list|(
specifier|final
name|FileHeader
name|h
parameter_list|)
block|{
if|if
condition|(
name|h
operator|instanceof
name|CombinedFileHeader
condition|)
block|{
return|return
name|h
operator|.
name|getEndOffset
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|h
operator|.
name|getHunks
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|h
operator|.
name|getHunks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStartOffset
argument_list|()
return|;
block|}
return|return
name|h
operator|.
name|getEndOffset
argument_list|()
return|;
block|}
block|}
end_class

end_unit

