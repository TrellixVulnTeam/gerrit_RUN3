begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.patch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchContent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|CorruptEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NoDifferencesException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NoSuchEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|InvalidRepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|RepositoryCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AbbreviatedObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AnyObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|CombinedFileHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|FileHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|FormatError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|util
operator|.
name|IntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|util
operator|.
name|RawParseUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** State supporting processing of a single {@link Patch} instance. */
end_comment

begin_class
DECL|class|PatchFile
specifier|public
class|class
name|PatchFile
block|{
DECL|field|EMPTY_FILE
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_FILE
init|=
block|{}
decl_stmt|;
DECL|field|repo
specifier|private
specifier|final
name|Repository
name|repo
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|ReviewDb
name|db
decl_stmt|;
DECL|field|patch
specifier|private
specifier|final
name|Patch
name|patch
decl_stmt|;
DECL|field|requestedVersions
specifier|private
name|List
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|requestedVersions
decl_stmt|;
DECL|field|patchContent
specifier|private
name|String
name|patchContent
decl_stmt|;
DECL|field|fileHeader
specifier|private
name|FileHeader
name|fileHeader
decl_stmt|;
DECL|field|fileContents
specifier|private
name|byte
index|[]
index|[]
name|fileContents
decl_stmt|;
DECL|field|fileLines
specifier|private
name|IntList
index|[]
name|fileLines
decl_stmt|;
DECL|method|PatchFile (final RepositoryCache rc, final Change chg, final ReviewDb db, final Patch patch)
specifier|public
name|PatchFile
parameter_list|(
specifier|final
name|RepositoryCache
name|rc
parameter_list|,
specifier|final
name|Change
name|chg
parameter_list|,
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|Patch
name|patch
parameter_list|)
throws|throws
name|InvalidRepositoryException
block|{
name|this
argument_list|(
name|openRepository
argument_list|(
name|rc
argument_list|,
name|chg
argument_list|)
argument_list|,
name|db
argument_list|,
name|patch
argument_list|)
expr_stmt|;
block|}
DECL|method|openRepository (final RepositoryCache rc, final Change chg)
specifier|private
specifier|static
name|Repository
name|openRepository
parameter_list|(
specifier|final
name|RepositoryCache
name|rc
parameter_list|,
specifier|final
name|Change
name|chg
parameter_list|)
throws|throws
name|InvalidRepositoryException
block|{
return|return
name|rc
operator|.
name|get
argument_list|(
name|chg
operator|.
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|PatchFile (final Repository repo, final ReviewDb db, final Patch patch)
specifier|public
name|PatchFile
parameter_list|(
specifier|final
name|Repository
name|repo
parameter_list|,
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|Patch
name|patch
parameter_list|)
block|{
name|this
operator|.
name|repo
operator|=
name|repo
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|patch
operator|=
name|patch
expr_stmt|;
block|}
DECL|method|setRequestedVersions (final List<PatchSet.Id> rv)
name|void
name|setRequestedVersions
parameter_list|(
specifier|final
name|List
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|rv
parameter_list|)
block|{
if|if
condition|(
name|fileHeader
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"setRequestedVersions before fileHeader"
argument_list|)
throw|;
block|}
name|requestedVersions
operator|=
name|rv
expr_stmt|;
block|}
comment|/** @return the source repository where the full data is stored. */
DECL|method|getRepository ()
specifier|public
name|Repository
name|getRepository
parameter_list|()
block|{
return|return
name|repo
return|;
block|}
comment|/** @return the raw patch represented by the delta. */
DECL|method|getPatchContent ()
specifier|public
name|String
name|getPatchContent
parameter_list|()
throws|throws
name|CorruptEntityException
throws|,
name|OrmException
block|{
if|if
condition|(
name|patchContent
operator|==
literal|null
condition|)
block|{
specifier|final
name|PatchContent
operator|.
name|Key
name|key
init|=
name|patch
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CorruptEntityException
argument_list|(
name|patch
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|PatchContent
name|pc
init|=
name|db
operator|.
name|patchContents
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|pc
operator|==
literal|null
operator|||
name|pc
operator|.
name|getContent
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CorruptEntityException
argument_list|(
name|patch
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
name|patchContent
operator|=
name|pc
operator|.
name|getContent
argument_list|()
expr_stmt|;
block|}
return|return
name|patchContent
return|;
block|}
comment|/**    * @return the parsed patch header, with its hunk information.    * @throws NoDifferencesException    * @throws IOException    * @throws NoSuchEntityException    */
DECL|method|getFileHeader ()
specifier|public
name|FileHeader
name|getFileHeader
parameter_list|()
throws|throws
name|CorruptEntityException
throws|,
name|OrmException
throws|,
name|NoSuchEntityException
throws|,
name|IOException
throws|,
name|NoDifferencesException
block|{
if|if
condition|(
name|fileHeader
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|requestedVersions
operator|==
literal|null
condition|)
block|{
name|fileHeader
operator|=
name|parseCached
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fileHeader
operator|=
name|parseExecute
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|fileHeader
return|;
block|}
comment|/**    * @return the total number of files/sides in this patch.    * @throws NoDifferencesException    * @throws IOException    * @throws NoSuchEntityException    */
DECL|method|getFileCount ()
specifier|public
name|int
name|getFileCount
parameter_list|()
throws|throws
name|CorruptEntityException
throws|,
name|OrmException
throws|,
name|NoSuchEntityException
throws|,
name|IOException
throws|,
name|NoDifferencesException
block|{
specifier|final
name|FileHeader
name|fh
init|=
name|getFileHeader
argument_list|()
decl_stmt|;
if|if
condition|(
name|fh
operator|instanceof
name|CombinedFileHeader
condition|)
block|{
return|return
operator|(
operator|(
name|CombinedFileHeader
operator|)
name|fh
operator|)
operator|.
name|getParentCount
argument_list|()
operator|+
literal|1
return|;
block|}
return|return
literal|2
return|;
block|}
comment|/**    * Get the raw file content of a single side of the patch.    *     * @param file file number; 0..{@link #getFileCount()}-1.    * @return the raw binary content of the new file.    * @throws CorruptEntityException the patch cannot be read.    * @throws OrmException the patch cannot be read.    * @throws IOException the patch or complete file content cannot be read.    * @throws NoDifferencesException    * @throws NoSuchEntityException    */
DECL|method|getFileContent (final int file)
specifier|public
name|byte
index|[]
name|getFileContent
parameter_list|(
specifier|final
name|int
name|file
parameter_list|)
throws|throws
name|CorruptEntityException
throws|,
name|OrmException
throws|,
name|IOException
throws|,
name|NoSuchEntityException
throws|,
name|NoDifferencesException
block|{
if|if
condition|(
name|fileContents
operator|==
literal|null
condition|)
block|{
name|fileContents
operator|=
operator|new
name|byte
index|[
name|getFileCount
argument_list|()
index|]
index|[]
expr_stmt|;
block|}
if|if
condition|(
name|fileContents
index|[
name|file
index|]
operator|==
literal|null
condition|)
block|{
specifier|final
name|FileHeader
name|fh
init|=
name|getFileHeader
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|==
name|fileContents
operator|.
name|length
operator|-
literal|1
condition|)
block|{
comment|// Request for the last file is always the new image.
comment|//
if|if
condition|(
name|fh
operator|.
name|getNewId
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|fh
operator|.
name|getNewId
argument_list|()
operator|.
name|isComplete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CorruptEntityException
argument_list|(
name|patch
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
name|fileContents
index|[
name|file
index|]
operator|=
name|read
argument_list|(
name|fh
operator|.
name|getNewId
argument_list|()
operator|.
name|toObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// All other file ids are some sort of old image.
comment|//
if|if
condition|(
name|fh
operator|instanceof
name|CombinedFileHeader
condition|)
block|{
specifier|final
name|CombinedFileHeader
name|ch
init|=
operator|(
name|CombinedFileHeader
operator|)
name|fh
decl_stmt|;
specifier|final
name|AbbreviatedObjectId
name|old
init|=
name|ch
operator|.
name|getOldId
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
operator|||
operator|!
name|old
operator|.
name|isComplete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CorruptEntityException
argument_list|(
name|patch
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
name|fileContents
index|[
name|file
index|]
operator|=
name|read
argument_list|(
name|old
operator|.
name|toObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|fh
operator|.
name|getOldId
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|fh
operator|.
name|getOldId
argument_list|()
operator|.
name|isComplete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CorruptEntityException
argument_list|(
name|patch
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
name|fileContents
index|[
name|file
index|]
operator|=
name|read
argument_list|(
name|fh
operator|.
name|getOldId
argument_list|()
operator|.
name|toObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|fileContents
index|[
name|file
index|]
return|;
block|}
comment|/**    * Get the table of line numbers to byte positions in the file content.    *     * @param file file number; 0..{@link #getFileCount()}-1.    * @return the raw binary content of the new file.    * @throws CorruptEntityException the patch cannot be read.    * @throws OrmException the patch cannot be read.    * @throws IOException the patch or complete file content cannot be read.    * @throws NoDifferencesException    * @throws NoSuchEntityException    */
DECL|method|getLineMap (final int file)
specifier|public
name|IntList
name|getLineMap
parameter_list|(
specifier|final
name|int
name|file
parameter_list|)
throws|throws
name|CorruptEntityException
throws|,
name|OrmException
throws|,
name|IOException
throws|,
name|NoSuchEntityException
throws|,
name|NoDifferencesException
block|{
if|if
condition|(
name|fileLines
operator|==
literal|null
condition|)
block|{
name|fileLines
operator|=
operator|new
name|IntList
index|[
name|getFileCount
argument_list|()
index|]
expr_stmt|;
block|}
if|if
condition|(
name|fileLines
index|[
name|file
index|]
operator|==
literal|null
condition|)
block|{
specifier|final
name|byte
index|[]
name|c
init|=
name|getFileContent
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|fileLines
index|[
name|file
index|]
operator|=
name|RawParseUtils
operator|.
name|lineMap
argument_list|(
name|c
argument_list|,
literal|0
argument_list|,
name|c
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|fileLines
index|[
name|file
index|]
return|;
block|}
comment|/**    * Get the number of lines in the file.    *     * @param file the file to examine    * @return total number of lines in the file    * @throws CorruptEntityException the patch cannot be read.    * @throws OrmException the patch cannot be read.    * @throws IOException the patch or complete file content cannot be read.    * @throws NoDifferencesException    * @throws NoSuchEntityException    */
DECL|method|getLineCount (final int file)
specifier|public
name|int
name|getLineCount
parameter_list|(
specifier|final
name|int
name|file
parameter_list|)
throws|throws
name|CorruptEntityException
throws|,
name|OrmException
throws|,
name|IOException
throws|,
name|NoSuchEntityException
throws|,
name|NoDifferencesException
block|{
specifier|final
name|byte
index|[]
name|c
init|=
name|getFileContent
argument_list|(
name|file
argument_list|)
decl_stmt|;
specifier|final
name|IntList
name|m
init|=
name|getLineMap
argument_list|(
name|file
argument_list|)
decl_stmt|;
specifier|final
name|int
name|n
init|=
name|m
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
operator|&&
name|m
operator|.
name|get
argument_list|(
name|n
operator|-
literal|1
argument_list|)
operator|==
name|c
operator|.
name|length
condition|)
block|{
return|return
name|n
operator|-
literal|1
return|;
block|}
return|return
name|n
return|;
block|}
comment|/**    * Extract a line from the file, as a string.    *     * @param file the file index to extract.    * @param line the line number to extract (1 based; 1 is the first line).    * @return the string version of the file line.    * @throws CorruptEntityException the patch cannot be read.    * @throws OrmException the patch cannot be read.    * @throws IOException the patch or complete file content cannot be read.    * @throws NoDifferencesException    * @throws NoSuchEntityException    * @throws CharacterCodingException the file is not a known character set.    */
DECL|method|getLine (final int file, final int line)
specifier|public
name|String
name|getLine
parameter_list|(
specifier|final
name|int
name|file
parameter_list|,
specifier|final
name|int
name|line
parameter_list|)
throws|throws
name|CorruptEntityException
throws|,
name|OrmException
throws|,
name|IOException
throws|,
name|NoSuchEntityException
throws|,
name|NoDifferencesException
block|{
specifier|final
name|byte
index|[]
name|c
init|=
name|getFileContent
argument_list|(
name|file
argument_list|)
decl_stmt|;
specifier|final
name|IntList
name|m
init|=
name|getLineMap
argument_list|(
name|file
argument_list|)
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|m
operator|.
name|get
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|int
name|e
init|=
name|m
operator|.
name|get
argument_list|(
name|line
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|<=
name|e
operator|-
literal|1
operator|&&
name|e
operator|-
literal|1
operator|<
name|c
operator|.
name|length
operator|&&
name|c
index|[
name|e
operator|-
literal|1
index|]
operator|==
literal|'\n'
condition|)
block|{
name|e
operator|--
expr_stmt|;
block|}
return|return
name|RawParseUtils
operator|.
name|decodeNoFallback
argument_list|(
name|Constants
operator|.
name|CHARSET
argument_list|,
name|c
argument_list|,
name|b
argument_list|,
name|e
argument_list|)
return|;
block|}
DECL|method|read (final AnyObjectId id)
specifier|private
name|byte
index|[]
name|read
parameter_list|(
specifier|final
name|AnyObjectId
name|id
parameter_list|)
throws|throws
name|CorruptEntityException
throws|,
name|IOException
block|{
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|ObjectId
operator|.
name|zeroId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|EMPTY_FILE
return|;
block|}
specifier|final
name|ObjectLoader
name|ldr
init|=
name|repo
operator|.
name|openObject
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ldr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CorruptEntityException
argument_list|(
name|patch
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|byte
index|[]
name|content
init|=
name|ldr
operator|.
name|getCachedBytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|ldr
operator|.
name|getType
argument_list|()
operator|!=
name|Constants
operator|.
name|OBJ_BLOB
condition|)
block|{
throw|throw
operator|new
name|IncorrectObjectTypeException
argument_list|(
name|id
operator|.
name|toObjectId
argument_list|()
argument_list|,
name|Constants
operator|.
name|TYPE_BLOB
argument_list|)
throw|;
block|}
return|return
name|content
return|;
block|}
DECL|method|parseCached ()
specifier|private
name|FileHeader
name|parseCached
parameter_list|()
throws|throws
name|CorruptEntityException
throws|,
name|OrmException
block|{
specifier|final
name|byte
index|[]
name|buf
init|=
name|Constants
operator|.
name|encode
argument_list|(
name|getPatchContent
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|Patch
name|p
init|=
operator|new
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|Patch
argument_list|()
decl_stmt|;
name|p
operator|.
name|parse
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|FormatError
name|err
range|:
name|p
operator|.
name|getErrors
argument_list|()
control|)
block|{
if|if
condition|(
name|err
operator|.
name|getSeverity
argument_list|()
operator|==
name|FormatError
operator|.
name|Severity
operator|.
name|ERROR
condition|)
block|{
throw|throw
operator|new
name|CorruptEntityException
argument_list|(
name|patch
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|p
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|CorruptEntityException
argument_list|(
name|patch
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|p
operator|.
name|getFiles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|parseExecute ()
specifier|private
name|FileHeader
name|parseExecute
parameter_list|()
throws|throws
name|NoSuchEntityException
throws|,
name|OrmException
throws|,
name|IOException
throws|,
name|NoDifferencesException
block|{
comment|// TODO Fix this gross hack so we aren't running git diff-tree for
comment|// an interdiff file side by side view.
comment|//
specifier|final
name|PatchSet
operator|.
name|Id
name|psk
init|=
name|patch
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|psMap
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|toMap
argument_list|(
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|byChange
argument_list|(
name|psk
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"git"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"--git-dir=."
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"diff-tree"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"--full-index"
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestedVersions
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"--cc"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|args
operator|.
name|add
argument_list|(
literal|"--unified=5"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requestedVersions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|psi
init|=
name|requestedVersions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|psi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchEntityException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|psi
operator|.
name|equals
argument_list|(
name|PatchSet
operator|.
name|BASE
argument_list|)
condition|)
block|{
specifier|final
name|PatchSet
name|p
init|=
name|psMap
operator|.
name|get
argument_list|(
name|psk
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
operator|||
name|p
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|ObjectId
operator|.
name|isId
argument_list|(
name|p
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoSuchEntityException
argument_list|()
throw|;
block|}
name|args
operator|.
name|add
argument_list|(
name|p
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"^"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|PatchSet
name|p
init|=
name|psMap
operator|.
name|get
argument_list|(
name|psi
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
operator|||
name|p
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|ObjectId
operator|.
name|isId
argument_list|(
name|p
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoSuchEntityException
argument_list|()
throw|;
block|}
name|args
operator|.
name|add
argument_list|(
name|p
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|args
operator|.
name|add
argument_list|(
literal|"--"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|patch
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Process
name|proc
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|args
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|null
argument_list|,
name|repo
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|Patch
name|p
init|=
operator|new
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|Patch
argument_list|()
decl_stmt|;
name|proc
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|proc
operator|.
name|getErrorStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|p
operator|.
name|parse
argument_list|(
name|proc
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|.
name|getInputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getFiles
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoDifferencesException
argument_list|()
throw|;
block|}
if|if
condition|(
name|p
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"unexpected file count back"
argument_list|)
throw|;
return|return
name|p
operator|.
name|getFiles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|proc
operator|.
name|waitFor
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"git diff-tree exited abnormally"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{       }
block|}
block|}
block|}
end_class

end_unit

