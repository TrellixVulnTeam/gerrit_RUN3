begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.patch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|AccountInfoCacheFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|LineWithComments
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchContent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|BaseServiceImplementation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|CorruptEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NoDifferencesException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NoSuchEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|BaseServiceImplementation
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|BaseServiceImplementation
operator|.
name|Failure
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|InvalidRepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|RepositoryCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AnyObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|CombinedFileHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|FileHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|FormatError
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|PatchDetailAction
specifier|abstract
class|class
name|PatchDetailAction
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Action
argument_list|<
name|T
argument_list|>
block|{
DECL|field|EMPTY_FILE
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_FILE
init|=
block|{}
decl_stmt|;
DECL|field|patchKey
specifier|protected
specifier|final
name|Patch
operator|.
name|Key
name|patchKey
decl_stmt|;
DECL|field|requestedVersions
specifier|protected
specifier|final
name|List
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|requestedVersions
decl_stmt|;
DECL|field|direct
specifier|protected
specifier|final
name|boolean
name|direct
decl_stmt|;
DECL|field|repoCache
specifier|private
specifier|final
name|RepositoryCache
name|repoCache
decl_stmt|;
DECL|field|repo
specifier|private
name|Repository
name|repo
decl_stmt|;
DECL|field|change
specifier|protected
name|Change
name|change
decl_stmt|;
DECL|field|patch
specifier|protected
name|Patch
name|patch
decl_stmt|;
DECL|field|file
specifier|protected
name|FileHeader
name|file
decl_stmt|;
DECL|field|fileCnt
specifier|protected
name|int
name|fileCnt
decl_stmt|;
DECL|field|accountInfo
specifier|protected
name|AccountInfoCacheFactory
name|accountInfo
decl_stmt|;
DECL|field|me
specifier|protected
name|Account
operator|.
name|Id
name|me
decl_stmt|;
DECL|field|published
specifier|protected
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|PatchLineComment
argument_list|>
argument_list|>
name|published
index|[]
decl_stmt|;
DECL|field|drafted
specifier|protected
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|PatchLineComment
argument_list|>
argument_list|>
name|drafted
index|[]
decl_stmt|;
DECL|method|PatchDetailAction (final RepositoryCache rc, final Patch.Key key, final List<PatchSet.Id> fileVersions)
name|PatchDetailAction
parameter_list|(
specifier|final
name|RepositoryCache
name|rc
parameter_list|,
specifier|final
name|Patch
operator|.
name|Key
name|key
parameter_list|,
specifier|final
name|List
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|fileVersions
parameter_list|)
block|{
name|this
operator|.
name|repoCache
operator|=
name|rc
expr_stmt|;
name|this
operator|.
name|patchKey
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|requestedVersions
operator|=
name|fileVersions
expr_stmt|;
name|this
operator|.
name|direct
operator|=
name|isBaseAndPatchOnly
argument_list|(
name|key
argument_list|,
name|fileVersions
argument_list|)
expr_stmt|;
block|}
DECL|method|isBaseAndPatchOnly (final Patch.Key key, final List<PatchSet.Id> v)
specifier|private
specifier|static
name|boolean
name|isBaseAndPatchOnly
parameter_list|(
specifier|final
name|Patch
operator|.
name|Key
name|key
parameter_list|,
specifier|final
name|List
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
literal|null
operator|||
name|v
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|PatchSet
operator|.
name|BASE
operator|.
name|equals
argument_list|(
name|v
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|v
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getParentKey
argument_list|()
argument_list|)
return|;
block|}
DECL|method|init (final ReviewDb db)
specifier|protected
name|void
name|init
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
throws|,
name|Failure
block|{
name|patch
operator|=
name|db
operator|.
name|patches
argument_list|()
operator|.
name|get
argument_list|(
name|patchKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|patch
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|patch
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
expr_stmt|;
name|BaseServiceImplementation
operator|.
name|assertCanRead
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|file
operator|=
name|readFileHeader
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|instanceof
name|CombinedFileHeader
condition|)
block|{
name|fileCnt
operator|=
operator|(
operator|(
name|CombinedFileHeader
operator|)
name|file
operator|)
operator|.
name|getParentCount
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|fileCnt
operator|=
literal|2
expr_stmt|;
block|}
name|accountInfo
operator|=
operator|new
name|AccountInfoCacheFactory
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|me
operator|=
name|Common
operator|.
name|getAccountId
argument_list|()
expr_stmt|;
name|published
operator|=
operator|new
name|HashMap
index|[
name|fileCnt
index|]
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|fileCnt
condition|;
name|n
operator|++
control|)
block|{
name|published
index|[
name|n
index|]
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|PatchLineComment
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|indexComments
argument_list|(
name|published
argument_list|,
name|direct
condition|?
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|published
argument_list|(
name|patchKey
argument_list|)
else|:
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|published
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|patchKey
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|me
operator|!=
literal|null
condition|)
block|{
name|drafted
operator|=
operator|new
name|HashMap
index|[
name|fileCnt
index|]
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|fileCnt
condition|;
name|n
operator|++
control|)
block|{
name|drafted
index|[
name|n
index|]
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|PatchLineComment
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|indexComments
argument_list|(
name|drafted
argument_list|,
name|direct
condition|?
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|draft
argument_list|(
name|patchKey
argument_list|,
name|me
argument_list|)
else|:
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|draft
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|patchKey
operator|.
name|get
argument_list|()
argument_list|,
name|me
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readFileHeader (final ReviewDb db)
specifier|protected
name|FileHeader
name|readFileHeader
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|Failure
throws|,
name|OrmException
block|{
if|if
condition|(
name|direct
condition|)
block|{
return|return
name|readCachedFileHeader
argument_list|(
name|db
argument_list|)
return|;
block|}
comment|// TODO Fix this gross hack so we aren't running git diff-tree for
comment|// an interdiff file side by side view.
comment|//
specifier|final
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|psMap
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|toMap
argument_list|(
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|byChange
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Repository
name|repo
init|=
name|openRepository
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"git"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"--git-dir=."
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"diff-tree"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"--full-index"
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestedVersions
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"--cc"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|args
operator|.
name|add
argument_list|(
literal|"--unified=5"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requestedVersions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|psi
init|=
name|requestedVersions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|psi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|psi
operator|.
name|equals
argument_list|(
name|PatchSet
operator|.
name|BASE
argument_list|)
condition|)
block|{
specifier|final
name|PatchSet
name|p
init|=
name|psMap
operator|.
name|get
argument_list|(
name|patchKey
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
operator|||
name|p
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|ObjectId
operator|.
name|isId
argument_list|(
name|p
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
name|args
operator|.
name|add
argument_list|(
name|p
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"^"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|PatchSet
name|p
init|=
name|psMap
operator|.
name|get
argument_list|(
name|psi
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
operator|||
name|p
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|ObjectId
operator|.
name|isId
argument_list|(
name|p
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
name|args
operator|.
name|add
argument_list|(
name|p
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|args
operator|.
name|add
argument_list|(
literal|"--"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|patch
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Process
name|proc
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|args
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|null
argument_list|,
name|repo
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|Patch
name|p
init|=
operator|new
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|Patch
argument_list|()
decl_stmt|;
name|proc
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|proc
operator|.
name|getErrorStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|p
operator|.
name|parse
argument_list|(
name|proc
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|.
name|getInputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getFiles
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoDifferencesException
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|p
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"unexpected file count back"
argument_list|)
throw|;
return|return
name|p
operator|.
name|getFiles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|proc
operator|.
name|waitFor
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"git diff-tree exited abnormally"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{         }
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|readCachedFileHeader (final ReviewDb db)
specifier|protected
name|FileHeader
name|readCachedFileHeader
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|Failure
throws|,
name|OrmException
block|{
return|return
name|parse
argument_list|(
name|patch
argument_list|,
name|read
argument_list|(
name|db
argument_list|,
name|patch
argument_list|)
argument_list|)
return|;
block|}
DECL|method|history (final ReviewDb db)
specifier|protected
name|List
argument_list|<
name|Patch
argument_list|>
name|history
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|db
operator|.
name|patches
argument_list|()
operator|.
name|history
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|patch
operator|.
name|getFileName
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
return|;
block|}
DECL|method|indexComments ( final HashMap<Integer, List<PatchLineComment>>[] out, final ResultSet<PatchLineComment> comments)
specifier|protected
name|void
name|indexComments
parameter_list|(
specifier|final
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|PatchLineComment
argument_list|>
argument_list|>
index|[]
name|out
parameter_list|,
specifier|final
name|ResultSet
argument_list|<
name|PatchLineComment
argument_list|>
name|comments
parameter_list|)
block|{
for|for
control|(
specifier|final
name|PatchLineComment
name|c
range|:
name|comments
control|)
block|{
name|short
name|fileId
decl_stmt|;
if|if
condition|(
name|direct
condition|)
block|{
name|fileId
operator|=
name|c
operator|.
name|getSide
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|fileId
operator|=
literal|0
init|;
name|fileId
operator|<
name|requestedVersions
operator|.
name|size
argument_list|()
condition|;
name|fileId
operator|++
control|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|i
init|=
name|requestedVersions
operator|.
name|get
argument_list|(
name|fileId
argument_list|)
decl_stmt|;
if|if
condition|(
name|PatchSet
operator|.
name|BASE
operator|.
name|equals
argument_list|(
name|i
argument_list|)
operator|&&
name|c
operator|.
name|getSide
argument_list|()
operator|==
name|fileId
operator|&&
name|patchKey
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|c
operator|.
name|getSide
argument_list|()
operator|==
name|requestedVersions
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
name|i
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
literal|0
operator|<=
name|fileId
operator|&&
name|fileId
operator|<
name|out
operator|.
name|length
condition|)
block|{
specifier|final
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|PatchLineComment
argument_list|>
argument_list|>
name|m
init|=
name|out
index|[
name|fileId
index|]
decl_stmt|;
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|l
init|=
name|m
operator|.
name|get
argument_list|(
name|c
operator|.
name|getLine
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
block|{
name|l
operator|=
operator|new
name|ArrayList
argument_list|<
name|PatchLineComment
argument_list|>
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|c
operator|.
name|getLine
argument_list|()
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addComments (final LineWithComments pLine, final HashMap<Integer, List<PatchLineComment>>[] cache, final int side, final int line)
specifier|protected
name|void
name|addComments
parameter_list|(
specifier|final
name|LineWithComments
name|pLine
parameter_list|,
specifier|final
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|PatchLineComment
argument_list|>
argument_list|>
index|[]
name|cache
parameter_list|,
specifier|final
name|int
name|side
parameter_list|,
specifier|final
name|int
name|line
parameter_list|)
block|{
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|l
init|=
name|cache
index|[
name|side
index|]
operator|.
name|remove
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|PatchLineComment
name|c
range|:
name|l
control|)
block|{
name|pLine
operator|.
name|addComment
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|accountInfo
operator|.
name|want
argument_list|(
name|c
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|openRepository ()
specifier|protected
name|Repository
name|openRepository
parameter_list|()
throws|throws
name|Failure
block|{
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|change
operator|.
name|getDest
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|CorruptEntityException
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
name|repo
operator|=
name|repoCache
operator|.
name|get
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRepositoryException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
return|return
name|repo
return|;
block|}
DECL|method|read (final Repository repo, final AnyObjectId id)
specifier|protected
name|byte
index|[]
name|read
parameter_list|(
specifier|final
name|Repository
name|repo
parameter_list|,
specifier|final
name|AnyObjectId
name|id
parameter_list|)
throws|throws
name|Failure
block|{
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|ObjectId
operator|.
name|zeroId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|EMPTY_FILE
return|;
block|}
try|try
block|{
specifier|final
name|ObjectLoader
name|ldr
init|=
name|repo
operator|.
name|openObject
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ldr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|CorruptEntityException
argument_list|(
name|patch
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|byte
index|[]
name|content
init|=
name|ldr
operator|.
name|getCachedBytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|ldr
operator|.
name|getType
argument_list|()
operator|!=
name|Constants
operator|.
name|OBJ_BLOB
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|IncorrectObjectTypeException
argument_list|(
name|id
operator|.
name|toObjectId
argument_list|()
argument_list|,
name|Constants
operator|.
name|TYPE_BLOB
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|content
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
DECL|method|read (final ReviewDb db, final Patch patch)
specifier|protected
specifier|static
name|String
name|read
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|Patch
name|patch
parameter_list|)
throws|throws
name|Failure
throws|,
name|OrmException
block|{
specifier|final
name|PatchContent
operator|.
name|Key
name|key
init|=
name|patch
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|CorruptEntityException
argument_list|(
name|patch
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|PatchContent
name|pc
init|=
name|db
operator|.
name|patchContents
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|pc
operator|==
literal|null
operator|||
name|pc
operator|.
name|getContent
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|CorruptEntityException
argument_list|(
name|patch
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|pc
operator|.
name|getContent
argument_list|()
return|;
block|}
DECL|method|parse (final Patch patch, final String content)
specifier|protected
specifier|static
name|FileHeader
name|parse
parameter_list|(
specifier|final
name|Patch
name|patch
parameter_list|,
specifier|final
name|String
name|content
parameter_list|)
throws|throws
name|Failure
block|{
specifier|final
name|byte
index|[]
name|buf
init|=
name|Constants
operator|.
name|encode
argument_list|(
name|content
argument_list|)
decl_stmt|;
specifier|final
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|Patch
name|p
init|=
operator|new
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|patch
operator|.
name|Patch
argument_list|()
decl_stmt|;
name|p
operator|.
name|parse
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|FormatError
name|err
range|:
name|p
operator|.
name|getErrors
argument_list|()
control|)
block|{
if|if
condition|(
name|err
operator|.
name|getSeverity
argument_list|()
operator|==
name|FormatError
operator|.
name|Severity
operator|.
name|ERROR
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|CorruptEntityException
argument_list|(
name|patch
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|p
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|CorruptEntityException
argument_list|(
name|patch
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|p
operator|.
name|getFiles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
end_class

end_unit

