begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.rpc
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|PatchSetDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountPatchReview
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NoSuchEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|BaseServiceImplementation
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|BaseServiceImplementation
operator|.
name|Failure
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Creates a {@link PatchSetDetail} from a {@link PatchSet}. */
end_comment

begin_class
DECL|class|PatchSetDetailFactory
class|class
name|PatchSetDetailFactory
implements|implements
name|Action
argument_list|<
name|PatchSetDetail
argument_list|>
block|{
DECL|interface|Factory
interface|interface
name|Factory
block|{
DECL|method|create (PatchSet.Id id)
name|PatchSetDetailFactory
name|create
parameter_list|(
name|PatchSet
operator|.
name|Id
name|id
parameter_list|)
function_decl|;
block|}
DECL|field|infoFactory
specifier|private
specifier|final
name|PatchSetInfoFactory
name|infoFactory
decl_stmt|;
DECL|field|psId
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
decl_stmt|;
DECL|field|detail
specifier|private
name|PatchSetDetail
name|detail
decl_stmt|;
DECL|field|patchSet
name|PatchSet
name|patchSet
decl_stmt|;
annotation|@
name|Inject
DECL|method|PatchSetDetailFactory (final PatchSetInfoFactory psif, @Assisted final PatchSet.Id id)
name|PatchSetDetailFactory
parameter_list|(
specifier|final
name|PatchSetInfoFactory
name|psif
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|PatchSet
operator|.
name|Id
name|id
parameter_list|)
block|{
name|this
operator|.
name|infoFactory
operator|=
name|psif
expr_stmt|;
name|this
operator|.
name|psId
operator|=
name|id
expr_stmt|;
block|}
DECL|method|run (final ReviewDb db)
specifier|public
name|PatchSetDetail
name|run
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
throws|,
name|Failure
block|{
if|if
condition|(
name|patchSet
operator|==
literal|null
condition|)
block|{
name|patchSet
operator|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psId
argument_list|)
expr_stmt|;
if|if
condition|(
name|patchSet
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|detail
operator|=
operator|new
name|PatchSetDetail
argument_list|()
expr_stmt|;
name|detail
operator|.
name|setPatchSet
argument_list|(
name|patchSet
argument_list|)
expr_stmt|;
try|try
block|{
name|detail
operator|.
name|setInfo
argument_list|(
name|infoFactory
operator|.
name|get
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatchSetInfoNotAvailableException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|detail
operator|.
name|setPatches
argument_list|(
name|db
operator|.
name|patches
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|psId
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Account
operator|.
name|Id
name|me
init|=
name|Common
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
if|if
condition|(
name|me
operator|!=
literal|null
condition|)
block|{
comment|// If we are signed in, compute the number of draft comments by the
comment|// current user on each of these patch files. This way they can more
comment|// quickly locate where they have pending drafts, and review them.
comment|//
specifier|final
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|comments
init|=
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|draft
argument_list|(
name|psId
argument_list|,
name|me
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|comments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|Patch
operator|.
name|Key
argument_list|,
name|Patch
argument_list|>
name|byKey
init|=
name|db
operator|.
name|patches
argument_list|()
operator|.
name|toMap
argument_list|(
name|detail
operator|.
name|getPatches
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|PatchLineComment
name|c
range|:
name|comments
control|)
block|{
specifier|final
name|Patch
name|p
init|=
name|byKey
operator|.
name|get
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setDraftCount
argument_list|(
name|p
operator|.
name|getDraftCount
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Get all the reviewed patches in one query
name|ResultSet
argument_list|<
name|AccountPatchReview
argument_list|>
name|reviews
init|=
name|db
operator|.
name|accountPatchReviews
argument_list|()
operator|.
name|byReviewer
argument_list|(
name|me
argument_list|,
name|psId
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|Patch
operator|.
name|Key
argument_list|>
name|reviewedPatches
init|=
operator|new
name|HashSet
argument_list|<
name|Patch
operator|.
name|Key
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountPatchReview
name|review
range|:
name|reviews
control|)
block|{
name|reviewedPatches
operator|.
name|add
argument_list|(
name|review
operator|.
name|getKey
argument_list|()
operator|.
name|getPatchKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Initialize the reviewed status of each patch
for|for
control|(
name|Patch
name|p
range|:
name|detail
operator|.
name|getPatches
argument_list|()
control|)
block|{
if|if
condition|(
name|reviewedPatches
operator|.
name|contains
argument_list|(
name|p
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|p
operator|.
name|setReviewedByCurrentUser
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|detail
return|;
block|}
block|}
end_class

end_unit

