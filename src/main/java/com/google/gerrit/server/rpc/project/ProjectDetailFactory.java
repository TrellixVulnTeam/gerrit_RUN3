begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.rpc.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|rpc
operator|.
name|project
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|ProjectDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ProjectRight
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NoSuchEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|rpc
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ProjectDetailFactory
class|class
name|ProjectDetailFactory
extends|extends
name|Handler
argument_list|<
name|ProjectDetail
argument_list|>
block|{
DECL|interface|Factory
interface|interface
name|Factory
block|{
DECL|method|create (Project.Id id)
name|ProjectDetailFactory
name|create
parameter_list|(
name|Project
operator|.
name|Id
name|id
parameter_list|)
function_decl|;
block|}
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|ReviewDb
name|db
decl_stmt|;
DECL|field|projectId
specifier|private
specifier|final
name|Project
operator|.
name|Id
name|projectId
decl_stmt|;
DECL|field|detail
specifier|private
name|ProjectDetail
name|detail
decl_stmt|;
DECL|field|groups
specifier|private
name|Map
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|,
name|AccountGroup
argument_list|>
name|groups
decl_stmt|;
annotation|@
name|Inject
DECL|method|ProjectDetailFactory (final ProjectCache projectCache, final ReviewDb db, @Assisted final Project.Id id)
name|ProjectDetailFactory
parameter_list|(
specifier|final
name|ProjectCache
name|projectCache
parameter_list|,
specifier|final
name|ReviewDb
name|db
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|Project
operator|.
name|Id
name|id
parameter_list|)
block|{
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|projectId
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|ProjectDetail
name|call
parameter_list|()
throws|throws
name|OrmException
throws|,
name|NoSuchEntityException
block|{
specifier|final
name|ProjectState
name|e
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|projectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchEntityException
argument_list|()
throw|;
block|}
name|detail
operator|=
operator|new
name|ProjectDetail
argument_list|()
expr_stmt|;
name|detail
operator|.
name|setProject
argument_list|(
name|e
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
name|groups
operator|=
operator|new
name|HashMap
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|,
name|AccountGroup
argument_list|>
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ProjectRight
argument_list|>
name|rights
init|=
operator|new
name|ArrayList
argument_list|<
name|ProjectRight
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|ProjectRight
name|p
range|:
name|e
operator|.
name|getRights
argument_list|()
control|)
block|{
name|rights
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|wantGroup
argument_list|(
name|p
operator|.
name|getAccountGroupId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ProjectRight
operator|.
name|WILD_PROJECT
operator|.
name|equals
argument_list|(
name|projectId
argument_list|)
condition|)
block|{
for|for
control|(
specifier|final
name|ProjectRight
name|p
range|:
name|projectCache
operator|.
name|getWildcardRights
argument_list|()
control|)
block|{
name|rights
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|wantGroup
argument_list|(
name|p
operator|.
name|getAccountGroupId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|loadGroups
argument_list|()
expr_stmt|;
name|detail
operator|.
name|setRights
argument_list|(
name|rights
argument_list|)
expr_stmt|;
name|detail
operator|.
name|setGroups
argument_list|(
name|groups
argument_list|)
expr_stmt|;
return|return
name|detail
return|;
block|}
DECL|method|wantGroup (final AccountGroup.Id id)
specifier|private
name|void
name|wantGroup
parameter_list|(
specifier|final
name|AccountGroup
operator|.
name|Id
name|id
parameter_list|)
block|{
name|groups
operator|.
name|put
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|loadGroups ()
specifier|private
name|void
name|loadGroups
parameter_list|()
throws|throws
name|OrmException
block|{
specifier|final
name|ResultSet
argument_list|<
name|AccountGroup
argument_list|>
name|r
init|=
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|get
argument_list|(
name|groups
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|groups
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|AccountGroup
name|g
range|:
name|r
control|)
block|{
name|groups
operator|.
name|put
argument_list|(
name|g
operator|.
name|getId
argument_list|()
argument_list|,
name|g
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

