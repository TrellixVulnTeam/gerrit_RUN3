begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.config
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|equalsIgnoreCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|ConfigUtil
specifier|public
class|class
name|ConfigUtil
block|{
comment|/**    * Parse a numerical time unit, such as "1 minute", from the configuration.    *    * @param config the configuration file to read.    * @param section section the key is in.    * @param subsection subsection the key is in, or null if not in a subsection.    * @param setting name of the setting to read.    * @param defaultValue default value to return if no value was set in the    *        configuration file.    * @param wantUnit the units of {@code defaultValue} and the return value, as    *        well as the units to assume if the value does not contain an    *        indication of the units.    * @return the setting, or {@code defaultValue} if not set, expressed in    *         {@code units}.    */
DECL|method|getTimeUnit (final Config config, final String section, final String subsection, final String setting, final long defaultValue, final TimeUnit wantUnit)
specifier|public
specifier|static
name|long
name|getTimeUnit
parameter_list|(
specifier|final
name|Config
name|config
parameter_list|,
specifier|final
name|String
name|section
parameter_list|,
specifier|final
name|String
name|subsection
parameter_list|,
specifier|final
name|String
name|setting
parameter_list|,
specifier|final
name|long
name|defaultValue
parameter_list|,
specifier|final
name|TimeUnit
name|wantUnit
parameter_list|)
block|{
specifier|final
name|String
name|valueString
init|=
name|config
operator|.
name|getString
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|setting
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueString
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
name|String
name|s
init|=
name|valueString
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
specifier|final
name|String
name|unitName
decl_stmt|;
specifier|final
name|int
name|sp
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|sp
operator|>
literal|0
condition|)
block|{
name|unitName
operator|=
name|s
operator|.
name|substring
argument_list|(
name|sp
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|char
name|last
init|=
name|s
operator|.
name|charAt
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
literal|'0'
operator|<=
name|last
operator|&&
name|last
operator|<=
literal|'9'
condition|)
block|{
name|unitName
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|unitName
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|last
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
name|TimeUnit
name|inputUnit
decl_stmt|;
name|int
name|inputMul
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|unitName
argument_list|)
condition|)
block|{
name|inputUnit
operator|=
name|wantUnit
expr_stmt|;
name|inputMul
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|match
argument_list|(
name|unitName
argument_list|,
literal|"s"
argument_list|,
literal|"sec"
argument_list|,
literal|"second"
argument_list|,
literal|"seconds"
argument_list|)
condition|)
block|{
name|inputUnit
operator|=
name|TimeUnit
operator|.
name|SECONDS
expr_stmt|;
name|inputMul
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|match
argument_list|(
name|unitName
argument_list|,
literal|"m"
argument_list|,
literal|"min"
argument_list|,
literal|"minute"
argument_list|,
literal|"minutes"
argument_list|)
condition|)
block|{
name|inputUnit
operator|=
name|TimeUnit
operator|.
name|MINUTES
expr_stmt|;
name|inputMul
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|match
argument_list|(
name|unitName
argument_list|,
literal|"h"
argument_list|,
literal|"hr"
argument_list|,
literal|"hour"
argument_list|,
literal|"hours"
argument_list|)
condition|)
block|{
name|inputUnit
operator|=
name|TimeUnit
operator|.
name|HOURS
expr_stmt|;
name|inputMul
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|match
argument_list|(
name|unitName
argument_list|,
literal|"d"
argument_list|,
literal|"day"
argument_list|,
literal|"days"
argument_list|)
condition|)
block|{
name|inputUnit
operator|=
name|TimeUnit
operator|.
name|DAYS
expr_stmt|;
name|inputMul
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|match
argument_list|(
name|unitName
argument_list|,
literal|"w"
argument_list|,
literal|"week"
argument_list|,
literal|"weeks"
argument_list|)
condition|)
block|{
name|inputUnit
operator|=
name|TimeUnit
operator|.
name|DAYS
expr_stmt|;
name|inputMul
operator|=
literal|7
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|match
argument_list|(
name|unitName
argument_list|,
literal|"mon"
argument_list|,
literal|"month"
argument_list|,
literal|"months"
argument_list|)
condition|)
block|{
name|inputUnit
operator|=
name|TimeUnit
operator|.
name|DAYS
expr_stmt|;
name|inputMul
operator|=
literal|30
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|match
argument_list|(
name|unitName
argument_list|,
literal|"y"
argument_list|,
literal|"year"
argument_list|,
literal|"years"
argument_list|)
condition|)
block|{
name|inputUnit
operator|=
name|TimeUnit
operator|.
name|DAYS
expr_stmt|;
name|inputMul
operator|=
literal|365
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|notTimeUnit
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|setting
argument_list|,
name|valueString
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|wantUnit
operator|.
name|convert
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|s
argument_list|)
operator|*
name|inputMul
argument_list|,
name|inputUnit
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
name|notTimeUnit
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|setting
argument_list|,
name|valueString
argument_list|)
throw|;
block|}
block|}
DECL|method|match (final String a, final String... cases)
specifier|private
specifier|static
name|boolean
name|match
parameter_list|(
specifier|final
name|String
name|a
parameter_list|,
specifier|final
name|String
modifier|...
name|cases
parameter_list|)
block|{
for|for
control|(
specifier|final
name|String
name|b
range|:
name|cases
control|)
block|{
if|if
condition|(
name|equalsIgnoreCase
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|notTimeUnit (final String section, final String subsection, final String setting, final String valueString)
specifier|private
specifier|static
name|IllegalArgumentException
name|notTimeUnit
parameter_list|(
specifier|final
name|String
name|section
parameter_list|,
specifier|final
name|String
name|subsection
parameter_list|,
specifier|final
name|String
name|setting
parameter_list|,
specifier|final
name|String
name|valueString
parameter_list|)
block|{
return|return
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid time unit value: "
operator|+
name|section
operator|+
operator|(
name|subsection
operator|!=
literal|null
condition|?
literal|"."
operator|+
name|subsection
else|:
literal|""
operator|)
operator|+
literal|"."
operator|+
name|setting
operator|+
literal|" = "
operator|+
name|valueString
argument_list|)
return|;
block|}
DECL|method|ConfigUtil ()
specifier|private
name|ConfigUtil
parameter_list|()
block|{   }
block|}
end_class

end_unit

