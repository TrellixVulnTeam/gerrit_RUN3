begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.config
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|SystemConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|SystemConfig
operator|.
name|LoginType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|SignedToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|XsrfException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_comment
comment|/** Authentication related settings from {@code gerrit.config}. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|AuthConfig
specifier|public
class|class
name|AuthConfig
block|{
DECL|field|sessionAge
specifier|private
specifier|final
name|int
name|sessionAge
decl_stmt|;
DECL|field|loginType
specifier|private
specifier|final
name|LoginType
name|loginType
decl_stmt|;
DECL|field|httpHeader
specifier|private
specifier|final
name|String
name|httpHeader
decl_stmt|;
DECL|field|emailFormat
specifier|private
specifier|final
name|String
name|emailFormat
decl_stmt|;
DECL|field|xsrfToken
specifier|private
specifier|final
name|SignedToken
name|xsrfToken
decl_stmt|;
DECL|field|accountToken
specifier|private
specifier|final
name|SignedToken
name|accountToken
decl_stmt|;
DECL|field|emailReg
specifier|private
specifier|final
name|SignedToken
name|emailReg
decl_stmt|;
DECL|field|allowGoogleAccountUpgrade
specifier|private
specifier|final
name|boolean
name|allowGoogleAccountUpgrade
decl_stmt|;
annotation|@
name|Inject
DECL|method|AuthConfig (@erritServerConfig final Config cfg, final SystemConfig s)
name|AuthConfig
parameter_list|(
annotation|@
name|GerritServerConfig
specifier|final
name|Config
name|cfg
parameter_list|,
specifier|final
name|SystemConfig
name|s
parameter_list|)
throws|throws
name|XsrfException
block|{
name|sessionAge
operator|=
name|cfg
operator|.
name|getInt
argument_list|(
literal|"auth"
argument_list|,
literal|"maxsessionage"
argument_list|,
literal|12
operator|*
literal|60
argument_list|)
operator|*
literal|60
expr_stmt|;
name|loginType
operator|=
name|toType
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|httpHeader
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"httpheader"
argument_list|)
expr_stmt|;
name|emailFormat
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"emailformat"
argument_list|)
expr_stmt|;
name|xsrfToken
operator|=
operator|new
name|SignedToken
argument_list|(
name|getSessionAge
argument_list|()
argument_list|,
name|s
operator|.
name|xsrfPrivateKey
argument_list|)
expr_stmt|;
specifier|final
name|int
name|accountCookieAge
decl_stmt|;
switch|switch
condition|(
name|getLoginType
argument_list|()
condition|)
block|{
case|case
name|HTTP
case|:
name|accountCookieAge
operator|=
operator|-
literal|1
expr_stmt|;
comment|// expire when the browser closes
break|break;
case|case
name|OPENID
case|:
default|default:
name|accountCookieAge
operator|=
name|getSessionAge
argument_list|()
expr_stmt|;
break|break;
block|}
name|accountToken
operator|=
operator|new
name|SignedToken
argument_list|(
name|accountCookieAge
argument_list|,
name|s
operator|.
name|accountPrivateKey
argument_list|)
expr_stmt|;
name|emailReg
operator|=
operator|new
name|SignedToken
argument_list|(
literal|5
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
argument_list|,
name|s
operator|.
name|accountPrivateKey
argument_list|)
expr_stmt|;
name|allowGoogleAccountUpgrade
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"auth"
argument_list|,
literal|"allowgoogleaccountupgrade"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|toType (final Config cfg)
specifier|private
specifier|static
name|LoginType
name|toType
parameter_list|(
specifier|final
name|Config
name|cfg
parameter_list|)
block|{
name|String
name|type
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
name|LoginType
operator|.
name|OPENID
return|;
block|}
for|for
control|(
name|LoginType
name|t
range|:
name|LoginType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported auth.type: "
operator|+
name|type
argument_list|)
throw|;
block|}
comment|/** Type of user authentication used by this Gerrit server. */
DECL|method|getLoginType ()
specifier|public
name|LoginType
name|getLoginType
parameter_list|()
block|{
return|return
name|loginType
return|;
block|}
DECL|method|getLoginHttpHeader ()
specifier|public
name|String
name|getLoginHttpHeader
parameter_list|()
block|{
return|return
name|httpHeader
return|;
block|}
DECL|method|getEmailFormat ()
specifier|public
name|String
name|getEmailFormat
parameter_list|()
block|{
return|return
name|emailFormat
return|;
block|}
comment|/** Time (in seconds) that user sessions stay "signed in". */
DECL|method|getSessionAge ()
specifier|public
name|int
name|getSessionAge
parameter_list|()
block|{
return|return
name|sessionAge
return|;
block|}
DECL|method|getXsrfToken ()
specifier|public
name|SignedToken
name|getXsrfToken
parameter_list|()
block|{
return|return
name|xsrfToken
return|;
block|}
DECL|method|getAccountToken ()
specifier|public
name|SignedToken
name|getAccountToken
parameter_list|()
block|{
return|return
name|accountToken
return|;
block|}
DECL|method|getEmailRegistrationToken ()
specifier|public
name|SignedToken
name|getEmailRegistrationToken
parameter_list|()
block|{
return|return
name|emailReg
return|;
block|}
DECL|method|isAllowGoogleAccountUpgrade ()
specifier|public
name|boolean
name|isAllowGoogleAccountUpgrade
parameter_list|()
block|{
return|return
name|allowGoogleAccountUpgrade
return|;
block|}
block|}
end_class

end_unit

