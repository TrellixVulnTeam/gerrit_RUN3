begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Performs replacements on strings such as<code>Hello ${user}</code>. */
end_comment

begin_class
DECL|class|ParamertizedString
specifier|public
class|class
name|ParamertizedString
block|{
comment|/** Obtain a string which has no parameters and always produces the value. */
DECL|method|asis (final String constant)
specifier|public
specifier|static
name|ParamertizedString
name|asis
parameter_list|(
specifier|final
name|String
name|constant
parameter_list|)
block|{
return|return
operator|new
name|ParamertizedString
argument_list|(
operator|new
name|Constant
argument_list|(
name|constant
argument_list|)
argument_list|)
return|;
block|}
DECL|field|pattern
specifier|private
specifier|final
name|String
name|pattern
decl_stmt|;
DECL|field|rawPattern
specifier|private
specifier|final
name|String
name|rawPattern
decl_stmt|;
DECL|field|patternOps
specifier|private
specifier|final
name|List
argument_list|<
name|Format
argument_list|>
name|patternOps
decl_stmt|;
DECL|field|patternArgs
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|patternArgs
decl_stmt|;
DECL|method|ParamertizedString (final Constant c)
specifier|private
name|ParamertizedString
parameter_list|(
specifier|final
name|Constant
name|c
parameter_list|)
block|{
name|pattern
operator|=
name|c
operator|.
name|text
expr_stmt|;
name|rawPattern
operator|=
name|c
operator|.
name|text
expr_stmt|;
name|patternOps
operator|=
name|Collections
operator|.
expr|<
name|Format
operator|>
name|singletonList
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|patternArgs
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
DECL|method|ParamertizedString (final String pattern)
specifier|public
name|ParamertizedString
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|raw
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Format
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<
name|Format
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|pattern
operator|.
name|length
argument_list|()
condition|)
block|{
specifier|final
name|int
name|b
init|=
name|pattern
operator|.
name|indexOf
argument_list|(
literal|"${"
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|<
literal|0
condition|)
block|{
break|break;
block|}
specifier|final
name|int
name|e
init|=
name|pattern
operator|.
name|indexOf
argument_list|(
literal|"}"
argument_list|,
name|b
operator|+
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|raw
operator|.
name|append
argument_list|(
name|pattern
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
operator|new
name|Constant
argument_list|(
name|pattern
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|b
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|raw
operator|.
name|append
argument_list|(
literal|"{"
operator|+
name|args
operator|.
name|size
argument_list|()
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|pattern
operator|.
name|substring
argument_list|(
name|b
operator|+
literal|2
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
operator|new
name|Parameter
argument_list|(
name|pattern
operator|.
name|substring
argument_list|(
name|b
operator|+
literal|2
argument_list|,
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|=
name|e
operator|+
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|pattern
operator|.
name|length
argument_list|()
condition|)
block|{
name|raw
operator|.
name|append
argument_list|(
name|pattern
operator|.
name|substring
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
operator|new
name|Constant
argument_list|(
name|pattern
operator|.
name|substring
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|this
operator|.
name|rawPattern
operator|=
name|raw
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|patternOps
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|ops
argument_list|)
expr_stmt|;
name|this
operator|.
name|patternArgs
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
comment|/** Get the original pattern given to the constructor. */
DECL|method|getPattern ()
specifier|public
name|String
name|getPattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
comment|/** Get the pattern with variables replaced with {0}, {1}, ... */
DECL|method|getRawPattern ()
specifier|public
name|String
name|getRawPattern
parameter_list|()
block|{
return|return
name|rawPattern
return|;
block|}
comment|/** Get the list of parameter names, ordered by appearance in the pattern. */
DECL|method|getParameterNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getParameterNames
parameter_list|()
block|{
return|return
name|patternArgs
return|;
block|}
comment|/** Convert a map of parameters into a value array for binding. */
DECL|method|bind (final Map<String, String> params)
specifier|public
name|String
index|[]
name|bind
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|r
init|=
operator|new
name|String
index|[
name|patternArgs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|r
index|[
name|i
index|]
operator|=
name|params
operator|.
name|get
argument_list|(
name|patternArgs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|r
index|[
name|i
index|]
operator|=
literal|""
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
comment|/** Format this string by performing the variable replacements. */
DECL|method|replace (final Map<String, String> params)
specifier|public
name|String
name|replace
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Format
name|f
range|:
name|patternOps
control|)
block|{
name|f
operator|.
name|format
argument_list|(
name|r
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|replace (final String name, final String value)
specifier|public
name|Builder
name|replace
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|()
operator|.
name|replace
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|replace ()
specifier|public
name|Builder
name|replace
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getPattern
argument_list|()
return|;
block|}
DECL|class|Builder
specifier|public
specifier|final
class|class
name|Builder
block|{
DECL|field|params
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|replace (final String name, final String value)
specifier|public
name|Builder
name|replace
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
name|params
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|ParamertizedString
operator|.
name|this
operator|.
name|replace
argument_list|(
name|params
argument_list|)
return|;
block|}
block|}
DECL|class|Format
specifier|private
specifier|static
specifier|abstract
class|class
name|Format
block|{
DECL|method|format (StringBuilder b, Map<String, String> p)
specifier|abstract
name|void
name|format
parameter_list|(
name|StringBuilder
name|b
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
parameter_list|)
function_decl|;
block|}
DECL|class|Constant
specifier|private
specifier|static
class|class
name|Constant
extends|extends
name|Format
block|{
DECL|field|text
specifier|private
specifier|final
name|String
name|text
decl_stmt|;
DECL|method|Constant (final String text)
name|Constant
parameter_list|(
specifier|final
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|format (StringBuilder b, Map<String, String> p)
name|void
name|format
parameter_list|(
name|StringBuilder
name|b
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
parameter_list|)
block|{
name|b
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Parameter
specifier|private
specifier|static
class|class
name|Parameter
extends|extends
name|Format
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|Parameter (final String name)
name|Parameter
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|format (StringBuilder b, Map<String, String> p)
name|void
name|format
parameter_list|(
name|StringBuilder
name|b
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
parameter_list|)
block|{
name|String
name|v
init|=
name|p
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

