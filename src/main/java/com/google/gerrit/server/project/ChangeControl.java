begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_comment
comment|/** Access control management for a user accessing a single change. */
end_comment

begin_class
DECL|class|ChangeControl
specifier|public
class|class
name|ChangeControl
block|{
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|field|projectControl
specifier|private
specifier|final
name|ProjectControl
operator|.
name|Factory
name|projectControl
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
annotation|@
name|Inject
DECL|method|Factory (final ProjectControl.Factory p, final Provider<ReviewDb> d)
name|Factory
parameter_list|(
specifier|final
name|ProjectControl
operator|.
name|Factory
name|p
parameter_list|,
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|d
parameter_list|)
block|{
name|projectControl
operator|=
name|p
expr_stmt|;
name|db
operator|=
name|d
expr_stmt|;
block|}
DECL|method|controlFor (final Change.Id id)
specifier|public
name|ChangeControl
name|controlFor
parameter_list|(
specifier|final
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|NoSuchChangeException
block|{
specifier|final
name|Change
name|change
decl_stmt|;
try|try
block|{
name|change
operator|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|id
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|controlFor
argument_list|(
name|change
argument_list|)
return|;
block|}
DECL|method|controlFor (final Change change)
specifier|public
name|ChangeControl
name|controlFor
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|)
throws|throws
name|NoSuchChangeException
block|{
try|try
block|{
specifier|final
name|Project
operator|.
name|NameKey
name|projectKey
init|=
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
return|return
name|projectControl
operator|.
name|validateFor
argument_list|(
name|projectKey
argument_list|)
operator|.
name|controlFor
argument_list|(
name|change
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|validateFor (final Change.Id id)
specifier|public
name|ChangeControl
name|validateFor
parameter_list|(
specifier|final
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|NoSuchChangeException
block|{
return|return
name|validate
argument_list|(
name|controlFor
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
DECL|method|validateFor (final Change change)
specifier|public
name|ChangeControl
name|validateFor
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|)
throws|throws
name|NoSuchChangeException
block|{
return|return
name|validate
argument_list|(
name|controlFor
argument_list|(
name|change
argument_list|)
argument_list|)
return|;
block|}
DECL|method|validate (final ChangeControl c)
specifier|private
specifier|static
name|ChangeControl
name|validate
parameter_list|(
specifier|final
name|ChangeControl
name|c
parameter_list|)
throws|throws
name|NoSuchChangeException
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|isVisible
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|c
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|c
return|;
block|}
block|}
DECL|field|projectControl
specifier|private
specifier|final
name|ProjectControl
name|projectControl
decl_stmt|;
DECL|field|change
specifier|private
specifier|final
name|Change
name|change
decl_stmt|;
DECL|method|ChangeControl (final ProjectControl p, final Change c)
name|ChangeControl
parameter_list|(
specifier|final
name|ProjectControl
name|p
parameter_list|,
specifier|final
name|Change
name|c
parameter_list|)
block|{
name|this
operator|.
name|projectControl
operator|=
name|p
expr_stmt|;
name|this
operator|.
name|change
operator|=
name|c
expr_stmt|;
block|}
DECL|method|forAnonymousUser ()
specifier|public
name|ChangeControl
name|forAnonymousUser
parameter_list|()
block|{
return|return
operator|new
name|ChangeControl
argument_list|(
name|projectControl
operator|.
name|forAnonymousUser
argument_list|()
argument_list|,
name|change
argument_list|)
return|;
block|}
DECL|method|getCurrentUser ()
specifier|public
name|CurrentUser
name|getCurrentUser
parameter_list|()
block|{
return|return
name|getProjectControl
argument_list|()
operator|.
name|getCurrentUser
argument_list|()
return|;
block|}
DECL|method|getProjectControl ()
specifier|public
name|ProjectControl
name|getProjectControl
parameter_list|()
block|{
return|return
name|projectControl
return|;
block|}
DECL|method|getProject ()
specifier|public
name|Project
name|getProject
parameter_list|()
block|{
return|return
name|getProjectControl
argument_list|()
operator|.
name|getProject
argument_list|()
return|;
block|}
DECL|method|getChange ()
specifier|public
name|Change
name|getChange
parameter_list|()
block|{
return|return
name|change
return|;
block|}
comment|/** Can this user see this change? */
DECL|method|isVisible ()
specifier|public
name|boolean
name|isVisible
parameter_list|()
block|{
return|return
name|getProjectControl
argument_list|()
operator|.
name|isVisible
argument_list|()
return|;
block|}
comment|/** Can this user abandon this change? */
DECL|method|canAbandon ()
specifier|public
name|boolean
name|canAbandon
parameter_list|()
block|{
return|return
name|isOwner
argument_list|()
comment|// owner (aka creator) of the change can abandon
operator|||
name|getProjectControl
argument_list|()
operator|.
name|isOwner
argument_list|()
comment|// project owner can abandon
operator|||
name|getCurrentUser
argument_list|()
operator|.
name|isAdministrator
argument_list|()
comment|// site administers are god
return|;
block|}
comment|/** Is this user the owner of the change? */
DECL|method|isOwner ()
specifier|public
name|boolean
name|isOwner
parameter_list|()
block|{
if|if
condition|(
name|getCurrentUser
argument_list|()
operator|instanceof
name|IdentifiedUser
condition|)
block|{
specifier|final
name|IdentifiedUser
name|i
init|=
operator|(
name|IdentifiedUser
operator|)
name|getCurrentUser
argument_list|()
decl_stmt|;
return|return
name|i
operator|.
name|getAccountId
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getOwner
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

