begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|ApprovalType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|GitwebLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|GroupCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ApprovalCategoryValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ProjectRight
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|SchemaVersion
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|SystemConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|TrustedExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|SystemConfig
operator|.
name|LoginType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|workflow
operator|.
name|NoOpFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|workflow
operator|.
name|SubmitFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|MergeQueue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|PushAllProjectsOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|PushQueue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|RepositoryCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|WorkQueue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|DiffCacheEntryFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|SshKeyCacheEntryFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|SignedToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|XsrfException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|jdbc
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|jdbc
operator|.
name|SimpleDataSource
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Ehcache
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|config
operator|.
name|CacheConfiguration
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|config
operator|.
name|DiskStoreConfiguration
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|constructs
operator|.
name|blocking
operator|.
name|SelfPopulatingCache
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|store
operator|.
name|MemoryStoreEvictionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RepositoryConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|WindowCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|WindowCacheConfig
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_comment
comment|/** Global server-side state for Gerrit. */
end_comment

begin_class
DECL|class|GerritServer
specifier|public
class|class
name|GerritServer
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GerritServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|datasource
specifier|private
specifier|static
name|DataSource
name|datasource
decl_stmt|;
DECL|field|impl
specifier|private
specifier|static
name|GerritServer
name|impl
decl_stmt|;
DECL|field|cacheMgr
specifier|private
specifier|static
name|CacheManager
name|cacheMgr
decl_stmt|;
DECL|method|closeDataSource ()
specifier|static
name|void
name|closeDataSource
parameter_list|()
block|{
if|if
condition|(
name|datasource
operator|!=
literal|null
condition|)
block|{
try|try
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"com.mchange.v2.c3p0.DataSources"
argument_list|)
operator|.
name|getMethod
argument_list|(
literal|"destroy"
argument_list|,
name|DataSource
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|datasource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|bad
parameter_list|)
block|{
comment|// Oh well, its not a c3p0 pooled connection. Too bad its
comment|// not standardized how "good applications cleanup".
block|}
block|}
finally|finally
block|{
name|datasource
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cacheMgr
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|cacheMgr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|bad
parameter_list|)
block|{       }
finally|finally
block|{
name|cacheMgr
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Obtain the singleton server instance for this web application.    *     * @return the server instance. Never null.    * @throws OrmException the database could not be configured. There is    *         something wrong with the schema configuration in {@link ReviewDb}    *         that must be addressed by a developer.    * @throws XsrfException the XSRF support could not be correctly configured to    *         protect the application against cross-site request forgery. The JVM    *         is most likely lacking critical security algorithms.    */
DECL|method|getInstance ()
specifier|public
specifier|static
specifier|synchronized
name|GerritServer
name|getInstance
parameter_list|()
throws|throws
name|OrmException
throws|,
name|XsrfException
block|{
if|if
condition|(
name|impl
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|impl
operator|=
operator|new
name|GerritServer
argument_list|()
expr_stmt|;
name|impl
operator|.
name|reloadSubmitQueue
argument_list|()
expr_stmt|;
if|if
condition|(
name|PushQueue
operator|.
name|isReplicationEnabled
argument_list|()
condition|)
block|{
name|WorkQueue
operator|.
name|schedule
argument_list|(
operator|new
name|PushAllProjectsOp
argument_list|()
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|closeDataSource
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"GerritServer ORM is unavailable"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|XsrfException
name|e
parameter_list|)
block|{
name|closeDataSource
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"GerritServer XSRF support failed to initailize"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
return|return
name|impl
return|;
block|}
DECL|method|serverUrl (final HttpServletRequest req)
specifier|public
specifier|static
name|String
name|serverUrl
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|)
block|{
comment|// Assume this servlet is in the context with a simple name like "login"
comment|// and we were accessed without any path info. Clipping the last part of
comment|// the name from the URL should generate the web application's root path.
comment|//
name|String
name|uri
init|=
name|req
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|int
name|s
init|=
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|>=
literal|0
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|sfx
init|=
literal|"/gerrit/rpc/"
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|endsWith
argument_list|(
name|sfx
argument_list|)
condition|)
block|{
comment|// Nope, it was one of our RPC servlets. Drop the rpc too.
comment|//
name|uri
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uri
operator|.
name|length
argument_list|()
operator|-
operator|(
name|sfx
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
DECL|field|db
specifier|private
specifier|final
name|Database
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|gerritConfigFile
specifier|private
specifier|final
name|RepositoryConfig
name|gerritConfigFile
decl_stmt|;
DECL|field|sConfig
specifier|private
name|SystemConfig
name|sConfig
decl_stmt|;
DECL|field|gerritPersonIdentTemplate
specifier|private
specifier|final
name|PersonIdent
name|gerritPersonIdentTemplate
decl_stmt|;
DECL|field|xsrf
specifier|private
specifier|final
name|SignedToken
name|xsrf
decl_stmt|;
DECL|field|account
specifier|private
specifier|final
name|SignedToken
name|account
decl_stmt|;
DECL|field|emailReg
specifier|private
specifier|final
name|SignedToken
name|emailReg
decl_stmt|;
DECL|field|repositories
specifier|private
specifier|final
name|RepositoryCache
name|repositories
decl_stmt|;
DECL|field|outgoingMail
specifier|private
specifier|final
name|javax
operator|.
name|mail
operator|.
name|Session
name|outgoingMail
decl_stmt|;
DECL|field|diffCache
specifier|private
specifier|final
name|SelfPopulatingCache
name|diffCache
decl_stmt|;
DECL|field|sshKeysCache
specifier|private
specifier|final
name|SelfPopulatingCache
name|sshKeysCache
decl_stmt|;
DECL|method|GerritServer ()
specifier|private
name|GerritServer
parameter_list|()
throws|throws
name|OrmException
throws|,
name|XsrfException
block|{
name|db
operator|=
name|createDatabase
argument_list|()
expr_stmt|;
name|loadSystemConfig
argument_list|()
expr_stmt|;
if|if
condition|(
name|sConfig
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"No "
operator|+
name|SystemConfig
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" found"
argument_list|)
throw|;
block|}
specifier|final
name|File
name|cfgLoc
init|=
operator|new
name|File
argument_list|(
name|getSitePath
argument_list|()
argument_list|,
literal|"gerrit.config"
argument_list|)
decl_stmt|;
name|gerritConfigFile
operator|=
operator|new
name|RepositoryConfig
argument_list|(
literal|null
argument_list|,
name|cfgLoc
argument_list|)
expr_stmt|;
try|try
block|{
name|gerritConfigFile
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No "
operator|+
name|cfgLoc
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"; assuming defaults"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Cannot read "
operator|+
name|cfgLoc
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|reconfigureWindowCache
argument_list|()
expr_stmt|;
name|xsrf
operator|=
operator|new
name|SignedToken
argument_list|(
name|sConfig
operator|.
name|maxSessionAge
argument_list|,
name|sConfig
operator|.
name|xsrfPrivateKey
argument_list|)
expr_stmt|;
specifier|final
name|int
name|accountCookieAge
decl_stmt|;
switch|switch
condition|(
name|sConfig
operator|.
name|getLoginType
argument_list|()
condition|)
block|{
case|case
name|HTTP
case|:
name|accountCookieAge
operator|=
operator|-
literal|1
expr_stmt|;
comment|// expire when the browser closes
break|break;
case|case
name|OPENID
case|:
default|default:
name|accountCookieAge
operator|=
name|sConfig
operator|.
name|maxSessionAge
expr_stmt|;
break|break;
block|}
name|account
operator|=
operator|new
name|SignedToken
argument_list|(
name|accountCookieAge
argument_list|,
name|sConfig
operator|.
name|accountPrivateKey
argument_list|)
expr_stmt|;
name|emailReg
operator|=
operator|new
name|SignedToken
argument_list|(
literal|5
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
argument_list|,
name|sConfig
operator|.
name|accountPrivateKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|sConfig
operator|.
name|gitBasePath
operator|!=
literal|null
condition|)
block|{
name|repositories
operator|=
operator|new
name|RepositoryCache
argument_list|(
operator|new
name|File
argument_list|(
name|sConfig
operator|.
name|gitBasePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repositories
operator|=
literal|null
expr_stmt|;
block|}
name|String
name|email
init|=
name|sConfig
operator|.
name|gerritGitEmail
decl_stmt|;
if|if
condition|(
name|email
operator|==
literal|null
operator|||
name|email
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|email
operator|=
literal|"gerrit@"
operator|+
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|email
operator|=
literal|"gerrit@localhost"
expr_stmt|;
block|}
block|}
name|gerritPersonIdentTemplate
operator|=
operator|new
name|PersonIdent
argument_list|(
name|sConfig
operator|.
name|gerritGitName
argument_list|,
name|email
argument_list|)
expr_stmt|;
name|outgoingMail
operator|=
name|createOutgoingMail
argument_list|()
expr_stmt|;
name|Common
operator|.
name|setSchemaFactory
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Common
operator|.
name|setProjectCache
argument_list|(
operator|new
name|ProjectCache
argument_list|()
argument_list|)
expr_stmt|;
name|Common
operator|.
name|setAccountCache
argument_list|(
operator|new
name|AccountCache
argument_list|()
argument_list|)
expr_stmt|;
name|Common
operator|.
name|setGroupCache
argument_list|(
operator|new
name|GroupCache
argument_list|(
name|sConfig
argument_list|)
argument_list|)
expr_stmt|;
name|cacheMgr
operator|=
operator|new
name|CacheManager
argument_list|(
name|createCacheConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|diffCache
operator|=
name|startCacheDiff
argument_list|()
expr_stmt|;
name|sshKeysCache
operator|=
name|startCacheSshKeys
argument_list|()
expr_stmt|;
block|}
DECL|method|createCacheConfiguration ()
specifier|private
name|Configuration
name|createCacheConfiguration
parameter_list|()
block|{
specifier|final
name|Configuration
name|mgrCfg
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configureDiskStore
argument_list|(
name|mgrCfg
argument_list|)
expr_stmt|;
name|configureDefaultCache
argument_list|(
name|mgrCfg
argument_list|)
expr_stmt|;
if|if
condition|(
name|sConfig
operator|.
name|getLoginType
argument_list|()
operator|==
name|LoginType
operator|.
name|OPENID
condition|)
block|{
specifier|final
name|CacheConfiguration
name|c
decl_stmt|;
name|c
operator|=
name|configureNamedCache
argument_list|(
name|mgrCfg
argument_list|,
literal|"openid"
argument_list|,
literal|false
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|c
operator|.
name|setTimeToLiveSeconds
argument_list|(
name|c
operator|.
name|getTimeToIdleSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|mgrCfg
operator|.
name|addCache
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|mgrCfg
operator|.
name|addCache
argument_list|(
name|configureNamedCache
argument_list|(
name|mgrCfg
argument_list|,
literal|"diff"
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mgrCfg
operator|.
name|addCache
argument_list|(
name|configureNamedCache
argument_list|(
name|mgrCfg
argument_list|,
literal|"sshkeys"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mgrCfg
return|;
block|}
DECL|method|configureDiskStore (final Configuration mgrCfg)
specifier|private
name|void
name|configureDiskStore
parameter_list|(
specifier|final
name|Configuration
name|mgrCfg
parameter_list|)
block|{
name|String
name|path
init|=
name|gerritConfigFile
operator|.
name|getString
argument_list|(
literal|"cache"
argument_list|,
literal|null
argument_list|,
literal|"directory"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|path
operator|=
literal|"disk_cache"
expr_stmt|;
block|}
specifier|final
name|File
name|loc
init|=
operator|new
name|File
argument_list|(
name|getSitePath
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|.
name|exists
argument_list|()
operator|||
name|loc
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
if|if
condition|(
name|loc
operator|.
name|canWrite
argument_list|()
condition|)
block|{
specifier|final
name|DiskStoreConfiguration
name|c
init|=
operator|new
name|DiskStoreConfiguration
argument_list|()
decl_stmt|;
name|c
operator|.
name|setPath
argument_list|(
name|loc
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|mgrCfg
operator|.
name|addDiskStore
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Enabling disk cache "
operator|+
name|loc
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Can't write to disk cache: "
operator|+
name|loc
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Can't create disk cache: "
operator|+
name|loc
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|configureDefaultCache (final Configuration mgrCfg)
specifier|private
name|void
name|configureDefaultCache
parameter_list|(
specifier|final
name|Configuration
name|mgrCfg
parameter_list|)
block|{
specifier|final
name|RepositoryConfig
name|i
init|=
name|gerritConfigFile
decl_stmt|;
specifier|final
name|CacheConfiguration
name|c
init|=
operator|new
name|CacheConfiguration
argument_list|()
decl_stmt|;
name|c
operator|.
name|setMaxElementsInMemory
argument_list|(
name|i
operator|.
name|getInt
argument_list|(
literal|"cache"
argument_list|,
literal|"memorylimit"
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setMemoryStoreEvictionPolicyFromObject
argument_list|(
name|MemoryStoreEvictionPolicy
operator|.
name|LFU
argument_list|)
expr_stmt|;
name|c
operator|.
name|setTimeToLiveSeconds
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|int
name|oneday
init|=
literal|24
operator|*
literal|60
decl_stmt|;
name|c
operator|.
name|setTimeToIdleSeconds
argument_list|(
name|i
operator|.
name|getInt
argument_list|(
literal|"cache"
argument_list|,
literal|"maxage"
argument_list|,
literal|3
operator|*
literal|30
operator|*
name|oneday
argument_list|)
operator|*
literal|60
argument_list|)
expr_stmt|;
name|c
operator|.
name|setEternal
argument_list|(
name|c
operator|.
name|getTimeToIdleSeconds
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|mgrCfg
operator|.
name|getDiskStoreConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|setMaxElementsOnDisk
argument_list|(
name|i
operator|.
name|getInt
argument_list|(
literal|"cache"
argument_list|,
literal|"disklimit"
argument_list|,
literal|16384
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setOverflowToDisk
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|c
operator|.
name|setDiskPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|diskbuffer
init|=
name|i
operator|.
name|getInt
argument_list|(
literal|"cache"
argument_list|,
literal|"diskbuffer"
argument_list|,
literal|5
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|diskbuffer
operator|/=
literal|1024
operator|*
literal|1024
expr_stmt|;
name|c
operator|.
name|setDiskSpoolBufferSizeMB
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|diskbuffer
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setDiskExpiryThreadIntervalSeconds
argument_list|(
literal|60
operator|*
literal|60
argument_list|)
expr_stmt|;
block|}
name|mgrCfg
operator|.
name|setDefaultCacheConfiguration
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|configureNamedCache (final Configuration mgrCfg, final String name, final boolean disk, final int defaultAge)
specifier|private
name|CacheConfiguration
name|configureNamedCache
parameter_list|(
specifier|final
name|Configuration
name|mgrCfg
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|disk
parameter_list|,
specifier|final
name|int
name|defaultAge
parameter_list|)
block|{
specifier|final
name|RepositoryConfig
name|i
init|=
name|gerritConfigFile
decl_stmt|;
specifier|final
name|CacheConfiguration
name|def
init|=
name|mgrCfg
operator|.
name|getDefaultCacheConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|CacheConfiguration
name|cfg
decl_stmt|;
try|try
block|{
name|cfg
operator|=
name|def
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot configure cache "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|cfg
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setMaxElementsInMemory
argument_list|(
name|i
operator|.
name|getInt
argument_list|(
literal|"cache"
argument_list|,
name|name
argument_list|,
literal|"memorylimit"
argument_list|,
name|def
operator|.
name|getMaxElementsInMemory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setTimeToIdleSeconds
argument_list|(
name|i
operator|.
name|getInt
argument_list|(
literal|"cache"
argument_list|,
name|name
argument_list|,
literal|"maxage"
argument_list|,
name|defaultAge
operator|>
literal|0
condition|?
name|defaultAge
else|:
call|(
name|int
call|)
argument_list|(
name|def
operator|.
name|getTimeToIdleSeconds
argument_list|()
operator|/
literal|60
argument_list|)
argument_list|)
operator|*
literal|60
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setEternal
argument_list|(
name|cfg
operator|.
name|getTimeToIdleSeconds
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|disk
operator|&&
name|mgrCfg
operator|.
name|getDiskStoreConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cfg
operator|.
name|setMaxElementsOnDisk
argument_list|(
name|i
operator|.
name|getInt
argument_list|(
literal|"cache"
argument_list|,
name|name
argument_list|,
literal|"disklimit"
argument_list|,
name|def
operator|.
name|getMaxElementsOnDisk
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|m
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|diskbuffer
init|=
name|i
operator|.
name|getInt
argument_list|(
literal|"cache"
argument_list|,
name|name
argument_list|,
literal|"diskbuffer"
argument_list|,
name|def
operator|.
name|getDiskSpoolBufferSizeMB
argument_list|()
operator|*
name|m
argument_list|)
operator|/
name|m
decl_stmt|;
name|cfg
operator|.
name|setDiskSpoolBufferSizeMB
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|diskbuffer
argument_list|)
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setOverflowToDisk
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setDiskPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|cfg
return|;
block|}
DECL|method|startCacheDiff ()
specifier|private
name|SelfPopulatingCache
name|startCacheDiff
parameter_list|()
block|{
specifier|final
name|Cache
name|dc
init|=
name|cacheMgr
operator|.
name|getCache
argument_list|(
literal|"diff"
argument_list|)
decl_stmt|;
specifier|final
name|SelfPopulatingCache
name|r
decl_stmt|;
name|r
operator|=
operator|new
name|SelfPopulatingCache
argument_list|(
name|dc
argument_list|,
operator|new
name|DiffCacheEntryFactory
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|cacheMgr
operator|.
name|replaceCacheWithDecoratedCache
argument_list|(
name|dc
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|startCacheSshKeys ()
specifier|private
name|SelfPopulatingCache
name|startCacheSshKeys
parameter_list|()
block|{
specifier|final
name|Cache
name|dc
init|=
name|cacheMgr
operator|.
name|getCache
argument_list|(
literal|"sshkeys"
argument_list|)
decl_stmt|;
specifier|final
name|SelfPopulatingCache
name|r
decl_stmt|;
name|r
operator|=
operator|new
name|SelfPopulatingCache
argument_list|(
name|dc
argument_list|,
operator|new
name|SshKeyCacheEntryFactory
argument_list|()
argument_list|)
expr_stmt|;
name|cacheMgr
operator|.
name|replaceCacheWithDecoratedCache
argument_list|(
name|dc
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|createDatabase ()
specifier|private
name|Database
argument_list|<
name|ReviewDb
argument_list|>
name|createDatabase
parameter_list|()
throws|throws
name|OrmException
block|{
specifier|final
name|String
name|dsName
init|=
literal|"java:comp/env/jdbc/ReviewDb"
decl_stmt|;
try|try
block|{
name|datasource
operator|=
operator|(
name|DataSource
operator|)
operator|new
name|InitialContext
argument_list|()
operator|.
name|lookup
argument_list|(
name|dsName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|namingErr
parameter_list|)
block|{
specifier|final
name|Properties
name|p
init|=
name|readGerritDataSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Initialization error:\n"
operator|+
literal|"  * No DataSource "
operator|+
name|dsName
operator|+
literal|"\n"
operator|+
literal|"  * No -DGerritServer=GerritServer.properties"
operator|+
literal|" on Java command line"
argument_list|,
name|namingErr
argument_list|)
throw|;
block|}
try|try
block|{
name|datasource
operator|=
operator|new
name|SimpleDataSource
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Database unavailable"
argument_list|,
name|se
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|Database
argument_list|<
name|ReviewDb
argument_list|>
argument_list|(
name|datasource
argument_list|,
name|ReviewDb
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|readGerritDataSource ()
specifier|private
name|Properties
name|readGerritDataSource
parameter_list|()
throws|throws
name|OrmException
block|{
specifier|final
name|Properties
name|srvprop
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"GerritServer"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
literal|"GerritServer.properties"
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
name|srvprop
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Cannot read "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|Properties
name|dbprop
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|srvprop
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"database."
argument_list|)
condition|)
block|{
name|dbprop
operator|.
name|put
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|"database."
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dbprop
return|;
block|}
DECL|method|initSystemConfig (final ReviewDb c)
specifier|private
name|void
name|initSystemConfig
parameter_list|(
specifier|final
name|ReviewDb
name|c
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|AccountGroup
name|admin
init|=
operator|new
name|AccountGroup
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Administrators"
argument_list|)
argument_list|,
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|c
operator|.
name|nextAccountGroupId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setDescription
argument_list|(
literal|"Gerrit Site Administrators"
argument_list|)
expr_stmt|;
name|c
operator|.
name|accountGroups
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AccountGroup
name|anonymous
init|=
operator|new
name|AccountGroup
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Anonymous Users"
argument_list|)
argument_list|,
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|c
operator|.
name|nextAccountGroupId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|anonymous
operator|.
name|setDescription
argument_list|(
literal|"Any user, signed-in or not"
argument_list|)
expr_stmt|;
name|anonymous
operator|.
name|setOwnerGroupId
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|accountGroups
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|anonymous
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AccountGroup
name|registered
init|=
operator|new
name|AccountGroup
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Registered Users"
argument_list|)
argument_list|,
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|c
operator|.
name|nextAccountGroupId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|registered
operator|.
name|setDescription
argument_list|(
literal|"Any signed-in user"
argument_list|)
expr_stmt|;
name|registered
operator|.
name|setOwnerGroupId
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|accountGroups
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|registered
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|SystemConfig
name|s
init|=
name|SystemConfig
operator|.
name|create
argument_list|()
decl_stmt|;
name|s
operator|.
name|maxSessionAge
operator|=
literal|12
operator|*
literal|60
operator|*
literal|60
comment|/* seconds */
expr_stmt|;
name|s
operator|.
name|xsrfPrivateKey
operator|=
name|SignedToken
operator|.
name|generateRandomKey
argument_list|()
expr_stmt|;
name|s
operator|.
name|accountPrivateKey
operator|=
name|SignedToken
operator|.
name|generateRandomKey
argument_list|()
expr_stmt|;
name|s
operator|.
name|sshdPort
operator|=
literal|29418
expr_stmt|;
name|s
operator|.
name|adminGroupId
operator|=
name|admin
operator|.
name|getId
argument_list|()
expr_stmt|;
name|s
operator|.
name|anonymousGroupId
operator|=
name|anonymous
operator|.
name|getId
argument_list|()
expr_stmt|;
name|s
operator|.
name|registeredGroupId
operator|=
name|registered
operator|.
name|getId
argument_list|()
expr_stmt|;
name|s
operator|.
name|gerritGitName
operator|=
literal|"Gerrit Code Review"
expr_stmt|;
name|s
operator|.
name|setLoginType
argument_list|(
name|SystemConfig
operator|.
name|LoginType
operator|.
name|OPENID
argument_list|)
expr_stmt|;
name|c
operator|.
name|systemConfig
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
comment|// By default with OpenID trust any http:// or https:// provider
comment|//
name|initTrustedExternalId
argument_list|(
name|c
argument_list|,
literal|"http://"
argument_list|)
expr_stmt|;
name|initTrustedExternalId
argument_list|(
name|c
argument_list|,
literal|"https://"
argument_list|)
expr_stmt|;
name|initTrustedExternalId
argument_list|(
name|c
argument_list|,
literal|"https://www.google.com/accounts/o8/id?id="
argument_list|)
expr_stmt|;
block|}
DECL|method|initTrustedExternalId (final ReviewDb c, final String re)
specifier|private
name|void
name|initTrustedExternalId
parameter_list|(
specifier|final
name|ReviewDb
name|c
parameter_list|,
specifier|final
name|String
name|re
parameter_list|)
throws|throws
name|OrmException
block|{
name|c
operator|.
name|trustedExternalIds
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|TrustedExternalId
argument_list|(
operator|new
name|TrustedExternalId
operator|.
name|Key
argument_list|(
name|re
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|initWildCardProject (final ReviewDb c)
specifier|private
name|void
name|initWildCardProject
parameter_list|(
specifier|final
name|ReviewDb
name|c
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|Project
name|proj
decl_stmt|;
name|proj
operator|=
operator|new
name|Project
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"-- All Projects --"
argument_list|)
argument_list|,
name|ProjectRight
operator|.
name|WILD_PROJECT
argument_list|)
expr_stmt|;
name|proj
operator|.
name|setDescription
argument_list|(
literal|"Rights inherited by all other projects"
argument_list|)
expr_stmt|;
name|proj
operator|.
name|setOwnerGroupId
argument_list|(
name|sConfig
operator|.
name|adminGroupId
argument_list|)
expr_stmt|;
name|proj
operator|.
name|setUseContributorAgreements
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|c
operator|.
name|projects
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|proj
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|initVerifiedCategory (final ReviewDb c)
specifier|private
name|void
name|initVerifiedCategory
parameter_list|(
specifier|final
name|ReviewDb
name|c
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|Transaction
name|txn
init|=
name|c
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
specifier|final
name|ApprovalCategory
name|cat
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ApprovalCategoryValue
argument_list|>
name|vals
decl_stmt|;
name|cat
operator|=
operator|new
name|ApprovalCategory
argument_list|(
operator|new
name|ApprovalCategory
operator|.
name|Id
argument_list|(
literal|"VRIF"
argument_list|)
argument_list|,
literal|"Verified"
argument_list|)
expr_stmt|;
name|cat
operator|.
name|setPosition
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|ApprovalCategoryValue
argument_list|>
argument_list|()
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
literal|1
argument_list|,
literal|"Verified"
argument_list|)
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
operator|-
literal|1
argument_list|,
literal|"Fails"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|approvalCategories
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|cat
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|c
operator|.
name|approvalCategoryValues
argument_list|()
operator|.
name|insert
argument_list|(
name|vals
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|txn
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|initCodeReviewCategory (final ReviewDb c)
specifier|private
name|void
name|initCodeReviewCategory
parameter_list|(
specifier|final
name|ReviewDb
name|c
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|Transaction
name|txn
init|=
name|c
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
specifier|final
name|ApprovalCategory
name|cat
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ApprovalCategoryValue
argument_list|>
name|vals
decl_stmt|;
name|cat
operator|=
operator|new
name|ApprovalCategory
argument_list|(
operator|new
name|ApprovalCategory
operator|.
name|Id
argument_list|(
literal|"CRVW"
argument_list|)
argument_list|,
literal|"Code Review"
argument_list|)
expr_stmt|;
name|cat
operator|.
name|setPosition
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|ApprovalCategoryValue
argument_list|>
argument_list|()
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
literal|2
argument_list|,
literal|"Looks good to me, approved"
argument_list|)
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
literal|1
argument_list|,
literal|"Looks good to me, but someone else must approve"
argument_list|)
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
operator|-
literal|1
argument_list|,
literal|"I would prefer that you didn't submit this"
argument_list|)
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
operator|-
literal|2
argument_list|,
literal|"Do not submit"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|approvalCategories
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|cat
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|c
operator|.
name|approvalCategoryValues
argument_list|()
operator|.
name|insert
argument_list|(
name|vals
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|txn
operator|.
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|ProjectRight
name|approve
init|=
operator|new
name|ProjectRight
argument_list|(
operator|new
name|ProjectRight
operator|.
name|Key
argument_list|(
name|ProjectRight
operator|.
name|WILD_PROJECT
argument_list|,
name|cat
operator|.
name|getId
argument_list|()
argument_list|,
name|sConfig
operator|.
name|registeredGroupId
argument_list|)
argument_list|)
decl_stmt|;
name|approve
operator|.
name|setMaxValue
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|approve
operator|.
name|setMinValue
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|c
operator|.
name|projectRights
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|approve
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|initReadCategory (final ReviewDb c)
specifier|private
name|void
name|initReadCategory
parameter_list|(
specifier|final
name|ReviewDb
name|c
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|Transaction
name|txn
init|=
name|c
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
specifier|final
name|ApprovalCategory
name|cat
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ApprovalCategoryValue
argument_list|>
name|vals
decl_stmt|;
name|cat
operator|=
operator|new
name|ApprovalCategory
argument_list|(
name|ApprovalCategory
operator|.
name|READ
argument_list|,
literal|"Read Access"
argument_list|)
expr_stmt|;
name|cat
operator|.
name|setPosition
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cat
operator|.
name|setFunctionName
argument_list|(
name|NoOpFunction
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|ApprovalCategoryValue
argument_list|>
argument_list|()
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
literal|1
argument_list|,
literal|"Read access"
argument_list|)
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
operator|-
literal|1
argument_list|,
literal|"No access"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|approvalCategories
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|cat
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|c
operator|.
name|approvalCategoryValues
argument_list|()
operator|.
name|insert
argument_list|(
name|vals
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|txn
operator|.
name|commit
argument_list|()
expr_stmt|;
block|{
specifier|final
name|ProjectRight
name|read
init|=
operator|new
name|ProjectRight
argument_list|(
operator|new
name|ProjectRight
operator|.
name|Key
argument_list|(
name|ProjectRight
operator|.
name|WILD_PROJECT
argument_list|,
name|cat
operator|.
name|getId
argument_list|()
argument_list|,
name|sConfig
operator|.
name|anonymousGroupId
argument_list|)
argument_list|)
decl_stmt|;
name|read
operator|.
name|setMaxValue
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|read
operator|.
name|setMinValue
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|c
operator|.
name|projectRights
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|read
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|ProjectRight
name|read
init|=
operator|new
name|ProjectRight
argument_list|(
operator|new
name|ProjectRight
operator|.
name|Key
argument_list|(
name|ProjectRight
operator|.
name|WILD_PROJECT
argument_list|,
name|cat
operator|.
name|getId
argument_list|()
argument_list|,
name|sConfig
operator|.
name|adminGroupId
argument_list|)
argument_list|)
decl_stmt|;
name|read
operator|.
name|setMaxValue
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|read
operator|.
name|setMinValue
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|c
operator|.
name|projectRights
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|read
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initSubmitCategory (final ReviewDb c)
specifier|private
name|void
name|initSubmitCategory
parameter_list|(
specifier|final
name|ReviewDb
name|c
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|Transaction
name|txn
init|=
name|c
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
specifier|final
name|ApprovalCategory
name|cat
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ApprovalCategoryValue
argument_list|>
name|vals
decl_stmt|;
name|cat
operator|=
operator|new
name|ApprovalCategory
argument_list|(
name|ApprovalCategory
operator|.
name|SUBMIT
argument_list|,
literal|"Submit"
argument_list|)
expr_stmt|;
name|cat
operator|.
name|setPosition
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cat
operator|.
name|setFunctionName
argument_list|(
name|SubmitFunction
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|ApprovalCategoryValue
argument_list|>
argument_list|()
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
literal|1
argument_list|,
literal|"Submit"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|approvalCategories
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|cat
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|c
operator|.
name|approvalCategoryValues
argument_list|()
operator|.
name|insert
argument_list|(
name|vals
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|txn
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|initPushTagCategory (final ReviewDb c)
specifier|private
name|void
name|initPushTagCategory
parameter_list|(
specifier|final
name|ReviewDb
name|c
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|Transaction
name|txn
init|=
name|c
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
specifier|final
name|ApprovalCategory
name|cat
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ApprovalCategoryValue
argument_list|>
name|vals
decl_stmt|;
name|cat
operator|=
operator|new
name|ApprovalCategory
argument_list|(
name|ApprovalCategory
operator|.
name|PUSH_TAG
argument_list|,
literal|"Push Annotated Tag"
argument_list|)
expr_stmt|;
name|cat
operator|.
name|setPosition
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cat
operator|.
name|setFunctionName
argument_list|(
name|NoOpFunction
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|ApprovalCategoryValue
argument_list|>
argument_list|()
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
name|ApprovalCategory
operator|.
name|PUSH_TAG_SIGNED
argument_list|,
literal|"Create Signed Tag"
argument_list|)
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
name|ApprovalCategory
operator|.
name|PUSH_TAG_ANNOTATED
argument_list|,
literal|"Create Annotated Tag"
argument_list|)
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
name|ApprovalCategory
operator|.
name|PUSH_TAG_ANY
argument_list|,
literal|"Create Any Tag"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|approvalCategories
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|cat
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|c
operator|.
name|approvalCategoryValues
argument_list|()
operator|.
name|insert
argument_list|(
name|vals
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|txn
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|initPushUpdateBranchCategory (final ReviewDb c)
specifier|private
name|void
name|initPushUpdateBranchCategory
parameter_list|(
specifier|final
name|ReviewDb
name|c
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|Transaction
name|txn
init|=
name|c
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
specifier|final
name|ApprovalCategory
name|cat
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ApprovalCategoryValue
argument_list|>
name|vals
decl_stmt|;
name|cat
operator|=
operator|new
name|ApprovalCategory
argument_list|(
name|ApprovalCategory
operator|.
name|PUSH_HEAD
argument_list|,
literal|"Push Branch"
argument_list|)
expr_stmt|;
name|cat
operator|.
name|setPosition
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cat
operator|.
name|setFunctionName
argument_list|(
name|NoOpFunction
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|ApprovalCategoryValue
argument_list|>
argument_list|()
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
name|ApprovalCategory
operator|.
name|PUSH_HEAD_UPDATE
argument_list|,
literal|"Update Branch"
argument_list|)
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
name|ApprovalCategory
operator|.
name|PUSH_HEAD_CREATE
argument_list|,
literal|"Create Branch"
argument_list|)
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
name|ApprovalCategory
operator|.
name|PUSH_HEAD_REPLACE
argument_list|,
literal|"Force Push Branch; Delete Branch"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|approvalCategories
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|cat
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|c
operator|.
name|approvalCategoryValues
argument_list|()
operator|.
name|insert
argument_list|(
name|vals
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|txn
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|value (final ApprovalCategory cat, final int value, final String name)
specifier|private
specifier|static
name|ApprovalCategoryValue
name|value
parameter_list|(
specifier|final
name|ApprovalCategory
name|cat
parameter_list|,
specifier|final
name|int
name|value
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|ApprovalCategoryValue
argument_list|(
operator|new
name|ApprovalCategoryValue
operator|.
name|Id
argument_list|(
name|cat
operator|.
name|getId
argument_list|()
argument_list|,
operator|(
name|short
operator|)
name|value
argument_list|)
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|method|loadSystemConfig ()
specifier|private
name|void
name|loadSystemConfig
parameter_list|()
throws|throws
name|OrmException
block|{
specifier|final
name|ReviewDb
name|c
init|=
name|db
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
name|SchemaVersion
name|sVer
decl_stmt|;
try|try
block|{
name|sVer
operator|=
name|c
operator|.
name|schemaVersion
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|SchemaVersion
operator|.
name|Key
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
comment|// Assume the schema doesn't exist.
comment|//
name|sVer
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|sVer
operator|==
literal|null
condition|)
block|{
comment|// Assume the schema is empty and populate it.
comment|//
name|c
operator|.
name|createSchema
argument_list|()
expr_stmt|;
name|sVer
operator|=
name|SchemaVersion
operator|.
name|create
argument_list|()
expr_stmt|;
name|sVer
operator|.
name|versionNbr
operator|=
name|ReviewDb
operator|.
name|VERSION
expr_stmt|;
name|c
operator|.
name|schemaVersion
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|sVer
argument_list|)
argument_list|)
expr_stmt|;
name|initSystemConfig
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|sConfig
operator|=
name|c
operator|.
name|systemConfig
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|SystemConfig
operator|.
name|Key
argument_list|()
argument_list|)
expr_stmt|;
name|initWildCardProject
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|initReadCategory
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|initVerifiedCategory
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|initCodeReviewCategory
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|initSubmitCategory
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|initPushTagCategory
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|initPushUpdateBranchCategory
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sVer
operator|.
name|versionNbr
operator|==
literal|2
condition|)
block|{
name|initPushTagCategory
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|initPushUpdateBranchCategory
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|sVer
operator|.
name|versionNbr
operator|=
literal|3
expr_stmt|;
name|c
operator|.
name|schemaVersion
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|sVer
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sVer
operator|.
name|versionNbr
operator|==
name|ReviewDb
operator|.
name|VERSION
condition|)
block|{
specifier|final
name|List
argument_list|<
name|SystemConfig
argument_list|>
name|all
init|=
name|c
operator|.
name|systemConfig
argument_list|()
operator|.
name|all
argument_list|()
operator|.
name|toList
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|all
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"system_config table is empty"
argument_list|)
throw|;
case|case
literal|1
case|:
name|sConfig
operator|=
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"system_config must have exactly 1 row;"
operator|+
literal|" found "
operator|+
name|all
operator|.
name|size
argument_list|()
operator|+
literal|" rows instead"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Unsupported schema version "
operator|+
name|sVer
operator|.
name|versionNbr
operator|+
literal|"; expected schema version "
operator|+
name|ReviewDb
operator|.
name|VERSION
argument_list|)
throw|;
block|}
name|loadGerritConfig
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|loadGerritConfig (final ReviewDb db)
specifier|private
name|void
name|loadGerritConfig
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|GerritConfig
name|r
init|=
operator|new
name|GerritConfig
argument_list|()
decl_stmt|;
name|r
operator|.
name|setCanonicalUrl
argument_list|(
name|getCanonicalURL
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSshdPort
argument_list|(
name|sConfig
operator|.
name|sshdPort
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUseContributorAgreements
argument_list|(
name|sConfig
operator|.
name|useContributorAgreements
argument_list|)
expr_stmt|;
name|r
operator|.
name|setGitDaemonUrl
argument_list|(
name|sConfig
operator|.
name|gitDaemonUrl
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUseRepoDownload
argument_list|(
name|sConfig
operator|.
name|useRepoDownload
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUseContactInfo
argument_list|(
name|sConfig
operator|.
name|contactStoreURL
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|r
operator|.
name|setLoginType
argument_list|(
name|sConfig
operator|.
name|getLoginType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sConfig
operator|.
name|gitwebUrl
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|setGitwebLink
argument_list|(
operator|new
name|GitwebLink
argument_list|(
name|sConfig
operator|.
name|gitwebUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|ApprovalCategory
name|c
range|:
name|db
operator|.
name|approvalCategories
argument_list|()
operator|.
name|all
argument_list|()
control|)
block|{
name|r
operator|.
name|add
argument_list|(
operator|new
name|ApprovalType
argument_list|(
name|c
argument_list|,
name|db
operator|.
name|approvalCategoryValues
argument_list|()
operator|.
name|byCategory
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Common
operator|.
name|setGerritConfig
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
DECL|method|createOutgoingMail ()
specifier|private
name|javax
operator|.
name|mail
operator|.
name|Session
name|createOutgoingMail
parameter_list|()
block|{
specifier|final
name|String
name|dsName
init|=
literal|"java:comp/env/mail/Outgoing"
decl_stmt|;
try|try
block|{
return|return
operator|(
name|javax
operator|.
name|mail
operator|.
name|Session
operator|)
operator|new
name|InitialContext
argument_list|()
operator|.
name|lookup
argument_list|(
name|dsName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|namingErr
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|reconfigureWindowCache ()
specifier|private
name|void
name|reconfigureWindowCache
parameter_list|()
block|{
specifier|final
name|WindowCacheConfig
name|c
init|=
operator|new
name|WindowCacheConfig
argument_list|()
decl_stmt|;
name|c
operator|.
name|fromConfig
argument_list|(
name|gerritConfigFile
argument_list|)
expr_stmt|;
name|WindowCache
operator|.
name|reconfigure
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|reloadSubmitQueue ()
specifier|private
name|void
name|reloadSubmitQueue
parameter_list|()
block|{
name|WorkQueue
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|HashSet
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|pending
init|=
operator|new
name|HashSet
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|ReviewDb
name|c
init|=
name|db
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
specifier|final
name|Change
name|change
range|:
name|c
operator|.
name|changes
argument_list|()
operator|.
name|allSubmitted
argument_list|()
control|)
block|{
name|pending
operator|.
name|add
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot reload MergeQueue"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Branch
operator|.
name|NameKey
name|branch
range|:
name|pending
control|)
block|{
name|MergeQueue
operator|.
name|schedule
argument_list|(
name|branch
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Reload Submit Queue"
return|;
block|}
block|}
argument_list|,
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
comment|/** Time (in seconds) that user sessions stay "signed in". */
DECL|method|getSessionAge ()
specifier|public
name|int
name|getSessionAge
parameter_list|()
block|{
return|return
name|sConfig
operator|.
name|maxSessionAge
return|;
block|}
comment|/** Get the signature support used to protect against XSRF attacks. */
DECL|method|getXsrfToken ()
specifier|public
name|SignedToken
name|getXsrfToken
parameter_list|()
block|{
return|return
name|xsrf
return|;
block|}
comment|/** Get the signature support used to protect user identity cookies. */
DECL|method|getAccountToken ()
specifier|public
name|SignedToken
name|getAccountToken
parameter_list|()
block|{
return|return
name|account
return|;
block|}
comment|/** Get the signature used for email registration/validation links. */
DECL|method|getEmailRegistrationToken ()
specifier|public
name|SignedToken
name|getEmailRegistrationToken
parameter_list|()
block|{
return|return
name|emailReg
return|;
block|}
DECL|method|getLoginHttpHeader ()
specifier|public
name|String
name|getLoginHttpHeader
parameter_list|()
block|{
return|return
name|sConfig
operator|.
name|loginHttpHeader
return|;
block|}
DECL|method|getEmailFormat ()
specifier|public
name|String
name|getEmailFormat
parameter_list|()
block|{
return|return
name|sConfig
operator|.
name|emailFormat
return|;
block|}
DECL|method|getContactStoreURL ()
specifier|public
name|String
name|getContactStoreURL
parameter_list|()
block|{
return|return
name|sConfig
operator|.
name|contactStoreURL
return|;
block|}
DECL|method|getContactStoreAPPSEC ()
specifier|public
name|String
name|getContactStoreAPPSEC
parameter_list|()
block|{
return|return
name|sConfig
operator|.
name|contactStoreAPPSEC
return|;
block|}
comment|/** A binary string key to encrypt cookies related to account data. */
DECL|method|getAccountCookieKey ()
specifier|public
name|String
name|getAccountCookieKey
parameter_list|()
block|{
name|byte
index|[]
name|r
init|=
operator|new
name|byte
index|[
name|sConfig
operator|.
name|accountPrivateKey
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|r
operator|.
name|length
operator|-
literal|1
init|;
name|k
operator|>=
literal|0
condition|;
name|k
operator|--
control|)
block|{
name|r
index|[
name|k
index|]
operator|=
operator|(
name|byte
operator|)
name|sConfig
operator|.
name|accountPrivateKey
operator|.
name|charAt
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|r
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|r
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Local filesystem location of header/footer/CSS configuration files. */
DECL|method|getSitePath ()
specifier|public
name|File
name|getSitePath
parameter_list|()
block|{
return|return
name|sConfig
operator|.
name|sitePath
operator|!=
literal|null
condition|?
operator|new
name|File
argument_list|(
name|sConfig
operator|.
name|sitePath
argument_list|)
else|:
literal|null
return|;
block|}
comment|/** Optional canonical URL for this application. */
DECL|method|getCanonicalURL ()
specifier|public
name|String
name|getCanonicalURL
parameter_list|()
block|{
name|String
name|u
init|=
name|sConfig
operator|.
name|canonicalUrl
decl_stmt|;
if|if
condition|(
name|u
operator|!=
literal|null
operator|&&
operator|!
name|u
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|u
operator|+=
literal|"/"
expr_stmt|;
block|}
return|return
name|u
return|;
block|}
comment|/** Get the parsed<code>$site_path/gerrit.config</code> file. */
DECL|method|getGerritConfig ()
specifier|public
name|RepositoryConfig
name|getGerritConfig
parameter_list|()
block|{
return|return
name|gerritConfigFile
return|;
block|}
comment|/** Get the repositories maintained by this server. */
DECL|method|getRepositoryCache ()
specifier|public
name|RepositoryCache
name|getRepositoryCache
parameter_list|()
block|{
return|return
name|repositories
return|;
block|}
comment|/** Get all registered caches. */
DECL|method|getAllCaches ()
specifier|public
name|Ehcache
index|[]
name|getAllCaches
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|cacheNames
init|=
name|cacheMgr
operator|.
name|getCacheNames
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|cacheNames
argument_list|)
expr_stmt|;
specifier|final
name|Ehcache
index|[]
name|r
init|=
operator|new
name|Ehcache
index|[
name|cacheNames
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cacheNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|r
index|[
name|i
index|]
operator|=
name|cacheMgr
operator|.
name|getEhcache
argument_list|(
name|cacheNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
comment|/** Get any existing cache by name. */
DECL|method|getCache (final String name)
specifier|public
name|Cache
name|getCache
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|cacheMgr
operator|.
name|getCache
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/** Get the self-populating cache of DiffCacheContent entities. */
DECL|method|getDiffCache ()
specifier|public
name|SelfPopulatingCache
name|getDiffCache
parameter_list|()
block|{
return|return
name|diffCache
return|;
block|}
comment|/** Get the self-populating cache of user SSH keys. */
DECL|method|getSshKeysCache ()
specifier|public
name|SelfPopulatingCache
name|getSshKeysCache
parameter_list|()
block|{
return|return
name|sshKeysCache
return|;
block|}
comment|/** The mail session used to send messages; null if not configured. */
DECL|method|getOutgoingMail ()
specifier|public
name|javax
operator|.
name|mail
operator|.
name|Session
name|getOutgoingMail
parameter_list|()
block|{
return|return
name|outgoingMail
return|;
block|}
comment|/** Get a new identity representing this Gerrit server in Git. */
DECL|method|newGerritPersonIdent ()
specifier|public
name|PersonIdent
name|newGerritPersonIdent
parameter_list|()
block|{
return|return
operator|new
name|PersonIdent
argument_list|(
name|gerritPersonIdentTemplate
argument_list|)
return|;
block|}
DECL|method|isAllowGoogleAccountUpgrade ()
specifier|public
name|boolean
name|isAllowGoogleAccountUpgrade
parameter_list|()
block|{
return|return
name|sConfig
operator|.
name|allowGoogleAccountUpgrade
return|;
block|}
block|}
end_class

end_unit

