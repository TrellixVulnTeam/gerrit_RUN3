begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|SystemConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AuthConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|jdbc
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RepositoryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|UserConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RepositoryCache
operator|.
name|FileKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/** Global server-side state for Gerrit. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|GerritServer
specifier|public
class|class
name|GerritServer
block|{
DECL|field|db
specifier|private
specifier|final
name|Database
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|sitePath
specifier|private
specifier|final
name|File
name|sitePath
decl_stmt|;
DECL|field|gerritConfigFile
specifier|private
specifier|final
name|Config
name|gerritConfigFile
decl_stmt|;
DECL|field|basepath
specifier|private
specifier|final
name|File
name|basepath
decl_stmt|;
annotation|@
name|Inject
DECL|method|GerritServer (final Database<ReviewDb> database, final SystemConfig sConfig, @SitePath final File path, @GerritServerConfig final Config cfg, final AuthConfig authConfig)
name|GerritServer
parameter_list|(
specifier|final
name|Database
argument_list|<
name|ReviewDb
argument_list|>
name|database
parameter_list|,
specifier|final
name|SystemConfig
name|sConfig
parameter_list|,
annotation|@
name|SitePath
specifier|final
name|File
name|path
parameter_list|,
annotation|@
name|GerritServerConfig
specifier|final
name|Config
name|cfg
parameter_list|,
specifier|final
name|AuthConfig
name|authConfig
parameter_list|)
block|{
name|db
operator|=
name|database
expr_stmt|;
name|sitePath
operator|=
name|path
expr_stmt|;
name|gerritConfigFile
operator|=
name|cfg
expr_stmt|;
specifier|final
name|String
name|basePath
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"gerrit"
argument_list|,
literal|null
argument_list|,
literal|"basepath"
argument_list|)
decl_stmt|;
if|if
condition|(
name|basePath
operator|!=
literal|null
condition|)
block|{
name|File
name|root
init|=
operator|new
name|File
argument_list|(
name|basePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|root
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|root
operator|=
operator|new
name|File
argument_list|(
name|sitePath
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
block|}
name|basepath
operator|=
name|root
expr_stmt|;
block|}
else|else
block|{
name|basepath
operator|=
literal|null
expr_stmt|;
block|}
name|Common
operator|.
name|setAccountCache
argument_list|(
operator|new
name|AccountCache
argument_list|(
name|db
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getGerritConfig ()
specifier|private
name|Config
name|getGerritConfig
parameter_list|()
block|{
return|return
name|gerritConfigFile
return|;
block|}
comment|/**    * Get (or open) a repository by name.    *    * @param name the repository name, relative to the base directory.    * @return the cached Repository instance. Caller must call {@code close()}    *         when done to decrement the resource handle.    * @throws RepositoryNotFoundException the name does not denote an existing    *         repository, or the name cannot be read as a repository.    */
DECL|method|openRepository (String name)
specifier|public
name|Repository
name|openRepository
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryNotFoundException
block|{
if|if
condition|(
name|basepath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryNotFoundException
argument_list|(
literal|"No gerrit.basepath configured"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isUnreasonableName
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryNotFoundException
argument_list|(
literal|"Invalid name: "
operator|+
name|name
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|FileKey
name|loc
init|=
name|FileKey
operator|.
name|lenient
argument_list|(
operator|new
name|File
argument_list|(
name|basepath
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|RepositoryCache
operator|.
name|open
argument_list|(
name|loc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
specifier|final
name|RepositoryNotFoundException
name|e2
decl_stmt|;
name|e2
operator|=
operator|new
name|RepositoryNotFoundException
argument_list|(
literal|"Cannot open repository "
operator|+
name|name
argument_list|)
expr_stmt|;
name|e2
operator|.
name|initCause
argument_list|(
name|e1
argument_list|)
expr_stmt|;
throw|throw
name|e2
throw|;
block|}
block|}
DECL|method|isUnreasonableName (final String name)
specifier|private
name|boolean
name|isUnreasonableName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|true
return|;
comment|// no empty paths
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|'\\'
argument_list|)
operator|>=
literal|0
condition|)
return|return
literal|true
return|;
comment|// no windows/dos stlye paths
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
return|return
literal|true
return|;
comment|// no absolute paths
if|if
condition|(
operator|new
name|File
argument_list|(
name|name
argument_list|)
operator|.
name|isAbsolute
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// no absolute paths
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"../"
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// no "l../etc/passwd"
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"/../"
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// no "foo/../etc/passwd"
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"/./"
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// "foo/./foo" is insane to ask
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"//"
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// windows UNC path can be "//..."
return|return
literal|false
return|;
comment|// is a reasonable name
block|}
comment|/** Get a new identity representing this Gerrit server in Git. */
DECL|method|newGerritPersonIdent ()
specifier|public
name|PersonIdent
name|newGerritPersonIdent
parameter_list|()
block|{
name|String
name|name
init|=
name|getGerritConfig
argument_list|()
operator|.
name|getString
argument_list|(
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
literal|"Gerrit Code Review"
expr_stmt|;
block|}
name|String
name|email
init|=
name|getGerritConfig
argument_list|()
operator|.
name|get
argument_list|(
name|UserConfig
operator|.
name|KEY
argument_list|)
operator|.
name|getCommitterEmail
argument_list|()
decl_stmt|;
if|if
condition|(
name|email
operator|==
literal|null
operator|||
name|email
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|email
operator|=
literal|"gerrit@localhost"
expr_stmt|;
block|}
return|return
operator|new
name|PersonIdent
argument_list|(
name|name
argument_list|,
name|email
argument_list|)
return|;
block|}
block|}
end_class

end_unit

