begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import
name|eu
operator|.
name|medsea
operator|.
name|mimeutil
operator|.
name|MimeException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|medsea
operator|.
name|mimeutil
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|medsea
operator|.
name|mimeutil
operator|.
name|MimeUtil2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|FileTypeRegistry
specifier|public
class|class
name|FileTypeRegistry
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileTypeRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|FileTypeRegistry
name|INSTANCE
init|=
operator|new
name|FileTypeRegistry
argument_list|()
decl_stmt|;
comment|/** Get the global registry. */
DECL|method|getInstance ()
specifier|public
specifier|static
name|FileTypeRegistry
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
DECL|field|mimeUtil
specifier|private
name|MimeUtil2
name|mimeUtil
decl_stmt|;
DECL|method|FileTypeRegistry ()
specifier|private
name|FileTypeRegistry
parameter_list|()
block|{
name|mimeUtil
operator|=
operator|new
name|MimeUtil2
argument_list|()
expr_stmt|;
name|register
argument_list|(
literal|"eu.medsea.mimeutil.detector.ExtensionMimeDetector"
argument_list|)
expr_stmt|;
name|register
argument_list|(
literal|"eu.medsea.mimeutil.detector.MagicMimeMimeDetector"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isWin32
argument_list|()
condition|)
block|{
name|register
argument_list|(
literal|"eu.medsea.mimeutil.detector.WindowsRegistryMimeDetector"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|register (String name)
specifier|private
name|void
name|register
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|mimeUtil
operator|.
name|registerMimeDetector
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|isWin32 ()
specifier|private
specifier|static
name|boolean
name|isWin32
parameter_list|()
block|{
specifier|final
name|String
name|osDotName
init|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|run
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|osDotName
operator|!=
literal|null
operator|&&
name|osDotName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"windows"
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
comment|/**    * Get the most specific MIME type available for a file.    *     * @param path name of the file. The base name (component after the last '/')    *        may be used to help determine the MIME type, such as by examining    *        the extension (portion after the last '.' if present).    * @param content the complete file content. If non-null the content may be    *        used to guess the MIME type by examining the beginning for common    *        file headers.    * @return the MIME type for this content. If the MIME type is not recognized    *         or cannot be determined, {@link MimeUtil2#UNKNOWN_MIME_TYPE} which    *         is an alias for {@code application/octet-stream}.    */
DECL|method|getMimeType (final String path, final byte[] content)
specifier|public
name|MimeType
name|getMimeType
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|byte
index|[]
name|content
parameter_list|)
block|{
name|Set
argument_list|<
name|MimeType
argument_list|>
name|mimeTypes
init|=
operator|new
name|HashSet
argument_list|<
name|MimeType
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
operator|&&
name|content
operator|.
name|length
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|mimeTypes
operator|.
name|addAll
argument_list|(
name|mimeUtil
operator|.
name|getMimeTypes
argument_list|(
name|content
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to determine MIME type from content"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|mimeTypes
operator|.
name|addAll
argument_list|(
name|mimeUtil
operator|.
name|getMimeTypes
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to determine MIME type from path"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUnknownType
argument_list|(
name|mimeTypes
argument_list|)
condition|)
block|{
return|return
name|MimeUtil2
operator|.
name|UNKNOWN_MIME_TYPE
return|;
block|}
specifier|final
name|List
argument_list|<
name|MimeType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|MimeType
argument_list|>
argument_list|(
name|mimeTypes
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|types
argument_list|,
operator|new
name|Comparator
argument_list|<
name|MimeType
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|MimeType
name|a
parameter_list|,
name|MimeType
name|b
parameter_list|)
block|{
return|return
name|b
operator|.
name|getSpecificity
argument_list|()
operator|-
name|a
operator|.
name|getSpecificity
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|types
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * Is this content type safe to transmit to a browser directly?    *     * @param contentType the MIME type of the file content.    * @return true if the Gerrit administrator wants to permit this content to be    *         served as-is; false if the administrator does not trust this    *         content type and wants it to be protected (typically by wrapping    *         the data in a ZIP archive).    */
DECL|method|isSafeInline (final MimeType contentType)
specifier|public
name|boolean
name|isSafeInline
parameter_list|(
specifier|final
name|MimeType
name|contentType
parameter_list|)
block|{
if|if
condition|(
name|MimeUtil2
operator|.
name|UNKNOWN_MIME_TYPE
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
condition|)
block|{
comment|// Most browsers perform content type sniffing when they get told
comment|// a generic content type. This is bad, so assume we cannot send
comment|// the file inline.
comment|//
return|return
literal|false
return|;
block|}
comment|// Assume we cannot send the content inline.
comment|//
return|return
literal|false
return|;
block|}
DECL|method|isUnknownType (Collection<MimeType> mimeTypes)
specifier|private
specifier|static
name|boolean
name|isUnknownType
parameter_list|(
name|Collection
argument_list|<
name|MimeType
argument_list|>
name|mimeTypes
parameter_list|)
block|{
if|if
condition|(
name|mimeTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|mimeTypes
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|mimeTypes
operator|.
name|contains
argument_list|(
name|MimeUtil2
operator|.
name|UNKNOWN_MIME_TYPE
argument_list|)
return|;
block|}
block|}
end_class

end_unit

