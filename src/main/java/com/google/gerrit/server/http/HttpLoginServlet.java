begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.http
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|http
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Link
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AuthRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AuthResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AuthConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_comment
comment|/**  * Initializes the user session if HTTP authentication is enabled.  *<p>  * If HTTP authentication has been enabled this servlet binds to {@code /login/}  * and initializes the user session based on user information contained in the  * HTTP request.  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|HttpLoginServlet
class|class
name|HttpLoginServlet
extends|extends
name|HttpServlet
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HttpLoginServlet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|AUTHORIZATION
specifier|private
specifier|static
specifier|final
name|String
name|AUTHORIZATION
init|=
literal|"Authorization"
decl_stmt|;
DECL|field|webSession
specifier|private
specifier|final
name|Provider
argument_list|<
name|WebSession
argument_list|>
name|webSession
decl_stmt|;
DECL|field|urlProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|String
argument_list|>
name|urlProvider
decl_stmt|;
DECL|field|accountManager
specifier|private
specifier|final
name|AccountManager
name|accountManager
decl_stmt|;
DECL|field|loginHeader
specifier|private
specifier|final
name|String
name|loginHeader
decl_stmt|;
annotation|@
name|Inject
DECL|method|HttpLoginServlet (final AuthConfig authConfig, final Provider<WebSession> webSession, @CanonicalWebUrl @Nullable final Provider<String> urlProvider, final AccountManager accountManager)
name|HttpLoginServlet
parameter_list|(
specifier|final
name|AuthConfig
name|authConfig
parameter_list|,
specifier|final
name|Provider
argument_list|<
name|WebSession
argument_list|>
name|webSession
parameter_list|,
annotation|@
name|CanonicalWebUrl
annotation|@
name|Nullable
specifier|final
name|Provider
argument_list|<
name|String
argument_list|>
name|urlProvider
parameter_list|,
specifier|final
name|AccountManager
name|accountManager
parameter_list|)
block|{
name|this
operator|.
name|webSession
operator|=
name|webSession
expr_stmt|;
name|this
operator|.
name|urlProvider
operator|=
name|urlProvider
expr_stmt|;
name|this
operator|.
name|accountManager
operator|=
name|accountManager
expr_stmt|;
specifier|final
name|String
name|hdr
init|=
name|authConfig
operator|.
name|getLoginHttpHeader
argument_list|()
decl_stmt|;
name|this
operator|.
name|loginHeader
operator|=
name|hdr
operator|!=
literal|null
operator|&&
operator|!
name|hdr
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|?
name|hdr
else|:
name|AUTHORIZATION
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doGet (final HttpServletRequest req, final HttpServletResponse rsp)
specifier|protected
name|void
name|doGet
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|HttpServletResponse
name|rsp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
specifier|final
name|String
name|token
init|=
name|getToken
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"logout"
operator|.
name|equals
argument_list|(
name|token
argument_list|)
operator|||
literal|"signout"
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|req
operator|.
name|getRequestDispatcher
argument_list|(
literal|"/logout"
argument_list|)
operator|.
name|forward
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|String
name|user
init|=
name|getRemoteUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to authenticate user by "
operator|+
name|loginHeader
operator|+
literal|" request header.  Check container or server configuration."
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|AuthRequest
name|areq
init|=
name|AuthRequest
operator|.
name|forUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
specifier|final
name|AuthResult
name|arsp
decl_stmt|;
try|try
block|{
name|arsp
operator|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|areq
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccountException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to authenticate user \""
operator|+
name|user
operator|+
literal|"\""
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|StringBuilder
name|rdr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|rdr
operator|.
name|append
argument_list|(
name|urlProvider
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|rdr
operator|.
name|append
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
if|if
condition|(
name|arsp
operator|.
name|isNew
argument_list|()
operator|&&
operator|!
name|token
operator|.
name|startsWith
argument_list|(
name|Link
operator|.
name|REGISTER
operator|+
literal|","
argument_list|)
condition|)
block|{
name|rdr
operator|.
name|append
argument_list|(
name|Link
operator|.
name|REGISTER
argument_list|)
expr_stmt|;
name|rdr
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|rdr
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|webSession
operator|.
name|get
argument_list|()
operator|.
name|login
argument_list|(
name|arsp
operator|.
name|getAccountId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|setHeader
argument_list|(
literal|"Expires"
argument_list|,
literal|"Fri, 01 Jan 1980 00:00:00 GMT"
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|setHeader
argument_list|(
literal|"Pragma"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|setHeader
argument_list|(
literal|"Cache-Control"
argument_list|,
literal|"no-cache, must-revalidate"
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|sendRedirect
argument_list|(
name|rdr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getToken (final HttpServletRequest req)
specifier|private
name|String
name|getToken
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|String
name|token
init|=
name|req
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
operator|&&
name|token
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|||
name|token
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|token
operator|=
name|Link
operator|.
name|MINE
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
DECL|method|getRemoteUser (final HttpServletRequest req)
specifier|private
name|String
name|getRemoteUser
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|)
block|{
if|if
condition|(
name|AUTHORIZATION
operator|.
name|equals
argument_list|(
name|loginHeader
argument_list|)
condition|)
block|{
specifier|final
name|String
name|user
init|=
name|req
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|user
argument_list|)
condition|)
block|{
comment|// The container performed the authentication, and has the user
comment|// identity already decoded for us. Honor that as we have been
comment|// configured to honor HTTP authentication.
comment|//
return|return
name|user
return|;
block|}
comment|// If the container didn't do the authentication we might
comment|// have done it in the front-end web server. Try to split
comment|// the identity out of the Authorization header and honor it.
comment|//
name|String
name|auth
init|=
name|req
operator|.
name|getHeader
argument_list|(
name|AUTHORIZATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|auth
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|auth
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|auth
operator|.
name|startsWith
argument_list|(
literal|"Basic "
argument_list|)
condition|)
block|{
name|auth
operator|=
name|auth
operator|.
name|substring
argument_list|(
literal|"Basic "
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|auth
operator|=
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|decode
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|c
init|=
name|auth
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
return|return
name|c
operator|>
literal|0
condition|?
name|auth
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
else|:
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|auth
operator|.
name|startsWith
argument_list|(
literal|"Digest "
argument_list|)
condition|)
block|{
specifier|final
name|int
name|u
init|=
name|auth
operator|.
name|indexOf
argument_list|(
literal|"username=\""
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|auth
operator|=
name|auth
operator|.
name|substring
argument_list|(
name|u
operator|+
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|int
name|e
init|=
name|auth
operator|.
name|indexOf
argument_list|(
literal|'"'
argument_list|)
decl_stmt|;
return|return
name|e
operator|>
literal|0
condition|?
name|auth
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|auth
operator|.
name|indexOf
argument_list|(
literal|'"'
argument_list|)
argument_list|)
else|:
literal|null
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
comment|// Nonstandard HTTP header. We have been told to trust this
comment|// header blindly as-is.
comment|//
specifier|final
name|String
name|user
init|=
name|req
operator|.
name|getHeader
argument_list|(
name|loginHeader
argument_list|)
decl_stmt|;
return|return
name|user
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|user
argument_list|)
condition|?
name|user
else|:
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

