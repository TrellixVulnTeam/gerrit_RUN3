begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|com.google.gerrit.server.http
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|http
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AnonymousUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|http
operator|.
name|WebSessionManager
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|http
operator|.
name|WebSessionManager
operator|.
name|Val
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|RequestScoped
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_class
annotation|@
name|RequestScoped
DECL|class|WebSession
specifier|public
specifier|final
class|class
name|WebSession
block|{
DECL|field|ACCOUNT_COOKIE
specifier|private
specifier|static
specifier|final
name|String
name|ACCOUNT_COOKIE
init|=
literal|"GerritAccount"
decl_stmt|;
DECL|field|request
specifier|private
specifier|final
name|HttpServletRequest
name|request
decl_stmt|;
DECL|field|response
specifier|private
specifier|final
name|HttpServletResponse
name|response
decl_stmt|;
DECL|field|manager
specifier|private
specifier|final
name|WebSessionManager
name|manager
decl_stmt|;
DECL|field|anonymous
specifier|private
specifier|final
name|AnonymousUser
name|anonymous
decl_stmt|;
DECL|field|identified
specifier|private
specifier|final
name|IdentifiedUser
operator|.
name|RequestFactory
name|identified
decl_stmt|;
DECL|field|outCookie
specifier|private
name|Cookie
name|outCookie
decl_stmt|;
DECL|field|element
specifier|private
name|Element
name|element
decl_stmt|;
annotation|@
name|Inject
DECL|method|WebSession (final HttpServletRequest request, final HttpServletResponse response, final WebSessionManager manager, final AnonymousUser anonymous, final IdentifiedUser.RequestFactory identified)
name|WebSession
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|WebSessionManager
name|manager
parameter_list|,
specifier|final
name|AnonymousUser
name|anonymous
parameter_list|,
specifier|final
name|IdentifiedUser
operator|.
name|RequestFactory
name|identified
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|anonymous
operator|=
name|anonymous
expr_stmt|;
name|this
operator|.
name|identified
operator|=
name|identified
expr_stmt|;
name|this
operator|.
name|element
operator|=
name|manager
operator|.
name|get
argument_list|(
name|readCookie
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSignedIn
argument_list|()
operator|&&
name|val
argument_list|()
operator|.
name|refreshCookieAt
operator|<=
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
comment|// Cookie is more than half old. Send it again to the client with a
comment|// fresh expiration date.
comment|//
specifier|final
name|int
name|age
decl_stmt|;
name|age
operator|=
name|element
operator|.
name|getTimeToIdle
argument_list|()
expr_stmt|;
name|val
argument_list|()
operator|.
name|refreshCookieAt
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
operator|(
name|age
operator|/
literal|2
operator|*
literal|1000L
operator|)
expr_stmt|;
name|saveCookie
argument_list|(
name|key
argument_list|()
operator|.
name|token
argument_list|,
name|age
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readCookie ()
specifier|private
name|String
name|readCookie
parameter_list|()
block|{
specifier|final
name|Cookie
index|[]
name|all
init|=
name|request
operator|.
name|getCookies
argument_list|()
decl_stmt|;
if|if
condition|(
name|all
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Cookie
name|c
range|:
name|all
control|)
block|{
if|if
condition|(
name|ACCOUNT_COOKIE
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|String
name|v
init|=
name|c
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|v
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|v
argument_list|)
condition|?
name|v
else|:
literal|null
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|isSignedIn ()
specifier|public
name|boolean
name|isSignedIn
parameter_list|()
block|{
return|return
name|element
operator|!=
literal|null
return|;
block|}
DECL|method|getToken ()
name|String
name|getToken
parameter_list|()
block|{
return|return
name|isSignedIn
argument_list|()
condition|?
name|key
argument_list|()
operator|.
name|token
else|:
literal|null
return|;
block|}
DECL|method|isTokenValid (final String keyIn)
name|boolean
name|isTokenValid
parameter_list|(
specifier|final
name|String
name|keyIn
parameter_list|)
block|{
return|return
name|isSignedIn
argument_list|()
operator|&&
name|key
argument_list|()
operator|.
name|token
operator|.
name|equals
argument_list|(
name|keyIn
argument_list|)
return|;
block|}
DECL|method|getCurrentUser ()
name|CurrentUser
name|getCurrentUser
parameter_list|()
block|{
return|return
name|isSignedIn
argument_list|()
condition|?
name|identified
operator|.
name|create
argument_list|(
name|val
argument_list|()
operator|.
name|accountId
argument_list|)
else|:
name|anonymous
return|;
block|}
DECL|method|login (final Account.Id id, final boolean rememberMe)
specifier|public
name|void
name|login
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|id
parameter_list|,
specifier|final
name|boolean
name|rememberMe
parameter_list|)
block|{
name|logout
argument_list|()
expr_stmt|;
name|element
operator|=
name|manager
operator|.
name|create
argument_list|(
name|id
argument_list|)
expr_stmt|;
specifier|final
name|int
name|age
decl_stmt|;
if|if
condition|(
name|rememberMe
condition|)
block|{
name|age
operator|=
name|element
operator|.
name|getTimeToIdle
argument_list|()
expr_stmt|;
name|val
argument_list|()
operator|.
name|refreshCookieAt
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
operator|(
name|age
operator|/
literal|2
operator|*
literal|1000L
operator|)
expr_stmt|;
block|}
else|else
block|{
name|age
operator|=
operator|-
literal|1
comment|/* don't store on client disk */
expr_stmt|;
name|val
argument_list|()
operator|.
name|refreshCookieAt
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|saveCookie
argument_list|(
name|key
argument_list|()
operator|.
name|token
argument_list|,
name|age
argument_list|)
expr_stmt|;
block|}
DECL|method|logout ()
specifier|public
name|void
name|logout
parameter_list|()
block|{
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
block|{
name|manager
operator|.
name|destroy
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|element
operator|=
literal|null
expr_stmt|;
name|saveCookie
argument_list|(
literal|""
argument_list|,
literal|0
comment|/* erase at client */
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|key ()
specifier|private
name|Key
name|key
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Key
operator|)
name|element
operator|.
name|getKey
argument_list|()
operator|)
return|;
block|}
DECL|method|val ()
specifier|private
name|Val
name|val
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Val
operator|)
name|element
operator|.
name|getObjectValue
argument_list|()
operator|)
return|;
block|}
DECL|method|saveCookie (final String val, final int age)
specifier|private
name|void
name|saveCookie
parameter_list|(
specifier|final
name|String
name|val
parameter_list|,
specifier|final
name|int
name|age
parameter_list|)
block|{
if|if
condition|(
name|outCookie
operator|==
literal|null
condition|)
block|{
name|String
name|path
init|=
name|request
operator|.
name|getContextPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
name|outCookie
operator|=
operator|new
name|Cookie
argument_list|(
name|ACCOUNT_COOKIE
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|outCookie
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|outCookie
operator|.
name|setMaxAge
argument_list|(
name|age
argument_list|)
expr_stmt|;
name|response
operator|.
name|addCookie
argument_list|(
name|outCookie
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outCookie
operator|.
name|setMaxAge
argument_list|(
name|age
argument_list|)
expr_stmt|;
name|outCookie
operator|.
name|setValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

