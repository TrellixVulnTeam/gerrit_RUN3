begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.http
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|http
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AuthConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|ActiveCall
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|SignedToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|ValidToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|XsrfException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|RequestScoped
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_class
annotation|@
name|RequestScoped
DECL|class|GerritCall
specifier|public
class|class
name|GerritCall
extends|extends
name|ActiveCall
block|{
DECL|field|sessionKey
specifier|private
specifier|final
name|SignedToken
name|sessionKey
decl_stmt|;
DECL|field|sessionAge
specifier|private
specifier|final
name|int
name|sessionAge
decl_stmt|;
DECL|field|accountRead
specifier|private
name|boolean
name|accountRead
decl_stmt|;
DECL|field|accountId
specifier|private
name|Account
operator|.
name|Id
name|accountId
decl_stmt|;
DECL|field|rememberAccount
specifier|private
name|boolean
name|rememberAccount
decl_stmt|;
annotation|@
name|Inject
DECL|method|GerritCall (final AuthConfig ac, final HttpServletRequest i, final HttpServletResponse o)
name|GerritCall
parameter_list|(
specifier|final
name|AuthConfig
name|ac
parameter_list|,
specifier|final
name|HttpServletRequest
name|i
parameter_list|,
specifier|final
name|HttpServletResponse
name|o
parameter_list|)
block|{
name|super
argument_list|(
name|i
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|setXsrfSignedToken
argument_list|(
name|ac
operator|.
name|getXsrfToken
argument_list|()
argument_list|)
expr_stmt|;
name|sessionKey
operator|=
name|ac
operator|.
name|getAccountToken
argument_list|()
expr_stmt|;
name|sessionAge
operator|=
name|ac
operator|.
name|getSessionAge
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure (final Throwable error)
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
operator|instanceof
name|OrmException
condition|)
block|{
name|onInternalFailure
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|onFailure
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
name|initAccount
argument_list|()
expr_stmt|;
return|return
name|accountId
operator|!=
literal|null
condition|?
name|accountId
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
DECL|method|setAccount (final Account.Id id, final boolean remember)
specifier|public
name|void
name|setAccount
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|id
parameter_list|,
specifier|final
name|boolean
name|remember
parameter_list|)
block|{
name|accountRead
operator|=
literal|true
expr_stmt|;
name|accountId
operator|=
name|id
expr_stmt|;
name|rememberAccount
operator|=
name|remember
expr_stmt|;
name|setAccountCookie
argument_list|()
expr_stmt|;
block|}
DECL|method|logout ()
specifier|public
name|void
name|logout
parameter_list|()
block|{
name|accountRead
operator|=
literal|true
expr_stmt|;
name|accountId
operator|=
literal|null
expr_stmt|;
name|rememberAccount
operator|=
literal|false
expr_stmt|;
name|removeCookie
argument_list|(
name|Gerrit
operator|.
name|ACCOUNT_COOKIE
argument_list|)
expr_stmt|;
block|}
DECL|method|getAccountId ()
specifier|public
name|Account
operator|.
name|Id
name|getAccountId
parameter_list|()
block|{
name|initAccount
argument_list|()
expr_stmt|;
return|return
name|accountId
return|;
block|}
DECL|method|initAccount ()
specifier|private
name|void
name|initAccount
parameter_list|()
block|{
if|if
condition|(
operator|!
name|accountRead
condition|)
block|{
name|accountRead
operator|=
literal|true
expr_stmt|;
name|accountId
operator|=
literal|null
expr_stmt|;
name|rememberAccount
operator|=
literal|false
expr_stmt|;
specifier|final
name|ValidToken
name|t
init|=
name|getCookie
argument_list|(
name|Gerrit
operator|.
name|ACCOUNT_COOKIE
argument_list|,
name|sessionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
specifier|final
name|AccountCookie
name|cookie
decl_stmt|;
try|try
block|{
name|cookie
operator|=
name|AccountCookie
operator|.
name|parse
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
return|return;
block|}
name|accountId
operator|=
name|cookie
operator|.
name|getAccountId
argument_list|()
expr_stmt|;
name|rememberAccount
operator|=
name|cookie
operator|.
name|isRemember
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|needsRefresh
argument_list|()
condition|)
block|{
comment|// The cookie is valid, but its getting stale. Update it with a
comment|// newer date so it doesn't expire on an active user.
comment|//
name|setAccountCookie
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|setAccountCookie ()
specifier|private
name|void
name|setAccountCookie
parameter_list|()
block|{
specifier|final
name|AccountCookie
name|ac
init|=
operator|new
name|AccountCookie
argument_list|(
name|accountId
argument_list|,
name|rememberAccount
argument_list|)
decl_stmt|;
name|String
name|val
decl_stmt|;
name|int
name|age
decl_stmt|;
try|try
block|{
name|val
operator|=
name|sessionKey
operator|.
name|newToken
argument_list|(
name|ac
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|age
operator|=
name|ac
operator|.
name|isRemember
argument_list|()
condition|?
name|sessionAge
else|:
operator|-
literal|1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XsrfException
name|e
parameter_list|)
block|{
name|val
operator|=
literal|""
expr_stmt|;
name|age
operator|=
literal|0
expr_stmt|;
block|}
name|String
name|path
init|=
name|getHttpServletRequest
argument_list|()
operator|.
name|getContextPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
specifier|final
name|Cookie
name|c
init|=
operator|new
name|Cookie
argument_list|(
name|Gerrit
operator|.
name|ACCOUNT_COOKIE
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|c
operator|.
name|setMaxAge
argument_list|(
name|age
argument_list|)
expr_stmt|;
name|c
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|httpResponse
operator|.
name|addCookie
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

