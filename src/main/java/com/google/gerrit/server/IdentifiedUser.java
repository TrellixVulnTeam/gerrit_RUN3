begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|SystemConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|RequestScoped
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** An authenticated user. */
end_comment

begin_class
annotation|@
name|RequestScoped
DECL|class|IdentifiedUser
specifier|public
class|class
name|IdentifiedUser
extends|extends
name|CurrentUser
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (Account.Id id)
name|IdentifiedUser
name|create
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|)
function_decl|;
block|}
DECL|field|accountId
specifier|private
specifier|final
name|Account
operator|.
name|Id
name|accountId
decl_stmt|;
annotation|@
name|Inject
argument_list|(
name|optional
operator|=
literal|true
argument_list|)
annotation|@
name|RemotePeer
DECL|field|remotePeerProvider
specifier|private
name|Provider
argument_list|<
name|SocketAddress
argument_list|>
name|remotePeerProvider
decl_stmt|;
DECL|field|account
specifier|private
name|Account
name|account
decl_stmt|;
DECL|field|effectiveGroups
specifier|private
name|Set
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|effectiveGroups
decl_stmt|;
annotation|@
name|Inject
DECL|method|IdentifiedUser (final SystemConfig cfg, @Assisted final Account.Id id)
name|IdentifiedUser
parameter_list|(
specifier|final
name|SystemConfig
name|cfg
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|accountId
operator|=
name|id
expr_stmt|;
block|}
comment|/** The account identity for the user. */
DECL|method|getAccountId ()
specifier|public
name|Account
operator|.
name|Id
name|getAccountId
parameter_list|()
block|{
return|return
name|accountId
return|;
block|}
DECL|method|getAccount ()
specifier|public
name|Account
name|getAccount
parameter_list|()
block|{
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
name|account
operator|=
name|Common
operator|.
name|getAccountCache
argument_list|()
operator|.
name|get
argument_list|(
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|account
return|;
block|}
annotation|@
name|Override
DECL|method|getEffectiveGroups ()
specifier|public
name|Set
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|getEffectiveGroups
parameter_list|()
block|{
if|if
condition|(
name|effectiveGroups
operator|==
literal|null
condition|)
block|{
name|effectiveGroups
operator|=
name|Common
operator|.
name|getGroupCache
argument_list|()
operator|.
name|getEffectiveGroups
argument_list|(
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|effectiveGroups
return|;
block|}
DECL|method|toPersonIdent ()
specifier|public
name|PersonIdent
name|toPersonIdent
parameter_list|()
block|{
specifier|final
name|Account
name|ua
init|=
name|getAccount
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|ua
operator|.
name|getFullName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|ua
operator|.
name|getPreferredEmail
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
literal|"Anonymous Coward"
expr_stmt|;
block|}
specifier|final
name|String
name|userId
init|=
literal|"account-"
operator|+
name|ua
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|user
decl_stmt|;
if|if
condition|(
name|ua
operator|.
name|getSshUserName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|user
operator|=
name|ua
operator|.
name|getSshUserName
argument_list|()
operator|+
literal|"|"
operator|+
name|userId
expr_stmt|;
block|}
else|else
block|{
name|user
operator|=
name|userId
expr_stmt|;
block|}
name|String
name|host
init|=
literal|null
decl_stmt|;
specifier|final
name|SocketAddress
name|remotePeer
init|=
name|remotePeerProvider
operator|!=
literal|null
condition|?
name|remotePeerProvider
operator|.
name|get
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|remotePeer
operator|instanceof
name|InetSocketAddress
condition|)
block|{
specifier|final
name|InetSocketAddress
name|sa
init|=
operator|(
name|InetSocketAddress
operator|)
name|remotePeer
decl_stmt|;
specifier|final
name|InetAddress
name|in
init|=
name|sa
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|host
operator|=
name|in
operator|.
name|getCanonicalHostName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|host
operator|=
name|sa
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
name|host
operator|=
literal|"unknown"
expr_stmt|;
block|}
return|return
operator|new
name|PersonIdent
argument_list|(
name|name
argument_list|,
name|user
operator|+
literal|"@"
operator|+
name|host
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"IdentifiedUser[account "
operator|+
name|getAccountId
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

