begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountGroupMember
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountProjectWatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ChangeApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchSetInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|StarredChange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|UserIdentity
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|InvalidRepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|MessagingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Message
operator|.
name|RecipientType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|AddressException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|InternetAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_class
DECL|class|ChangeMail
specifier|public
class|class
name|ChangeMail
block|{
DECL|field|server
specifier|private
specifier|final
name|GerritServer
name|server
decl_stmt|;
DECL|field|transport
specifier|private
specifier|final
name|javax
operator|.
name|mail
operator|.
name|Session
name|transport
decl_stmt|;
DECL|field|change
specifier|private
specifier|final
name|Change
name|change
decl_stmt|;
DECL|field|projectName
specifier|private
specifier|final
name|String
name|projectName
decl_stmt|;
DECL|field|rcptTo
specifier|private
specifier|final
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|rcptTo
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|msg
specifier|private
name|MimeMessage
name|msg
decl_stmt|;
DECL|field|body
specifier|private
name|StringBuilder
name|body
decl_stmt|;
DECL|field|inFooter
specifier|private
name|boolean
name|inFooter
decl_stmt|;
DECL|field|myUrl
specifier|private
name|String
name|myUrl
decl_stmt|;
DECL|field|fromId
specifier|private
name|Account
operator|.
name|Id
name|fromId
decl_stmt|;
DECL|field|patchSet
specifier|private
name|PatchSet
name|patchSet
decl_stmt|;
DECL|field|patchSetInfo
specifier|private
name|PatchSetInfo
name|patchSetInfo
decl_stmt|;
DECL|field|message
specifier|private
name|ChangeMessage
name|message
decl_stmt|;
DECL|field|comments
specifier|private
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|comments
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|reviewers
specifier|private
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|extraCC
specifier|private
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|extraCC
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|db
specifier|private
name|ReviewDb
name|db
decl_stmt|;
DECL|method|ChangeMail (final GerritServer gs, final Change c)
specifier|public
name|ChangeMail
parameter_list|(
specifier|final
name|GerritServer
name|gs
parameter_list|,
specifier|final
name|Change
name|c
parameter_list|)
block|{
name|server
operator|=
name|gs
expr_stmt|;
name|transport
operator|=
name|server
operator|.
name|getOutgoingMail
argument_list|()
expr_stmt|;
name|change
operator|=
name|c
expr_stmt|;
name|projectName
operator|=
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|setFrom (final Account.Id id)
specifier|public
name|void
name|setFrom
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
name|fromId
operator|=
name|id
expr_stmt|;
block|}
DECL|method|setHttpServletRequest (final HttpServletRequest req)
specifier|public
name|void
name|setHttpServletRequest
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|myUrl
operator|=
name|GerritServer
operator|.
name|serverUrl
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
DECL|method|setPatchSet (final PatchSet ps, final PatchSetInfo psi)
specifier|public
name|void
name|setPatchSet
parameter_list|(
specifier|final
name|PatchSet
name|ps
parameter_list|,
specifier|final
name|PatchSetInfo
name|psi
parameter_list|)
block|{
name|patchSet
operator|=
name|ps
expr_stmt|;
name|patchSetInfo
operator|=
name|psi
expr_stmt|;
block|}
DECL|method|setChangeMessage (final ChangeMessage cm)
specifier|public
name|void
name|setChangeMessage
parameter_list|(
specifier|final
name|ChangeMessage
name|cm
parameter_list|)
block|{
name|message
operator|=
name|cm
expr_stmt|;
block|}
DECL|method|setPatchLineComments (final List<PatchLineComment> plc)
specifier|public
name|void
name|setPatchLineComments
parameter_list|(
specifier|final
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|plc
parameter_list|)
block|{
name|comments
operator|=
name|plc
expr_stmt|;
block|}
DECL|method|addReviewers (final Collection<Account.Id> cc)
specifier|public
name|void
name|addReviewers
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|cc
parameter_list|)
block|{
name|reviewers
operator|.
name|addAll
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
DECL|method|addExtraCC (final Collection<Account.Id> cc)
specifier|public
name|void
name|addExtraCC
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|cc
parameter_list|)
block|{
name|extraCC
operator|.
name|addAll
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
DECL|method|setReviewDb (final ReviewDb d)
specifier|public
name|void
name|setReviewDb
parameter_list|(
specifier|final
name|ReviewDb
name|d
parameter_list|)
block|{
name|db
operator|=
name|d
expr_stmt|;
block|}
DECL|method|sendNewChange ()
specifier|public
name|void
name|sendNewChange
parameter_list|()
throws|throws
name|MessagingException
block|{
if|if
condition|(
name|begin
argument_list|(
literal|"newchange"
argument_list|)
condition|)
block|{
name|newChangeTo
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|haveRcptTo
argument_list|()
condition|)
block|{
comment|// No destinations at this point makes it very moot to mail,
comment|// nobody was interested in the change or was told to look
comment|// at it by the caller.
comment|//
return|return;
block|}
name|newChangeCc
argument_list|()
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"New change "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|" for "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|":\n\n"
argument_list|)
expr_stmt|;
name|newChangePatchSetInfo
argument_list|()
expr_stmt|;
name|newChangeFooter
argument_list|()
expr_stmt|;
name|msg
operator|.
name|setMessageID
argument_list|(
name|changeMessageThreadId
argument_list|()
argument_list|)
expr_stmt|;
name|send
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|newChangePatchSetInfo ()
specifier|private
name|void
name|newChangePatchSetInfo
parameter_list|()
block|{
if|if
condition|(
name|changeUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|changeUrl
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|patchSetInfo
operator|!=
literal|null
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
name|patchSetInfo
operator|.
name|getMessage
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|body
operator|.
name|append
argument_list|(
name|change
operator|.
name|getSubject
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|db
operator|!=
literal|null
operator|&&
name|patchSet
operator|!=
literal|null
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
literal|"---\n"
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Patch
name|p
range|:
name|db
operator|.
name|patches
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|patchSet
operator|.
name|getId
argument_list|()
argument_list|)
control|)
block|{
name|body
operator|.
name|append
argument_list|(
name|p
operator|.
name|getChangeType
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|p
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
comment|// Don't bother including the files if we get a failure,
comment|// ensure we at least send the notification message.
block|}
name|body
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newChangeFooter ()
specifier|private
name|void
name|newChangeFooter
parameter_list|()
block|{
if|if
condition|(
name|changeUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|openFooter
argument_list|()
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"View this change at "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|changeUrl
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendNewPatchSet ()
specifier|public
name|void
name|sendNewPatchSet
parameter_list|()
throws|throws
name|MessagingException
block|{
if|if
condition|(
name|begin
argument_list|(
literal|"newpatchset"
argument_list|)
condition|)
block|{
name|newChangeTo
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|haveRcptTo
argument_list|()
condition|)
block|{
comment|// No destinations at this point makes it very moot to mail,
comment|// nobody was interested in the change or was told to look
comment|// at it by the caller.
comment|//
return|return;
block|}
name|newChangeCc
argument_list|()
expr_stmt|;
name|starredTo
argument_list|()
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"Uploaded replacement patch set "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|patchSet
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|" for change "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|":\n\n"
argument_list|)
expr_stmt|;
name|newChangePatchSetInfo
argument_list|()
expr_stmt|;
name|newChangeFooter
argument_list|()
expr_stmt|;
name|initInReplyToChange
argument_list|()
expr_stmt|;
name|send
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|sendComment ()
specifier|public
name|void
name|sendComment
parameter_list|()
throws|throws
name|MessagingException
block|{
if|if
condition|(
name|begin
argument_list|(
literal|"comment"
argument_list|)
condition|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|body
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|Patch
operator|.
name|Key
argument_list|,
name|Patch
argument_list|>
name|patches
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|Repository
name|repo
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|comments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|patchSet
operator|.
name|getId
argument_list|()
decl_stmt|;
name|patches
operator|=
name|db
operator|.
name|patches
argument_list|()
operator|.
name|toMap
argument_list|(
name|db
operator|.
name|patches
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
comment|// Can't read the patch table? Don't quote file lines.
name|patches
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|repo
operator|=
name|server
operator|.
name|getRepositoryCache
argument_list|()
operator|.
name|get
argument_list|(
name|projectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRepositoryException
name|e
parameter_list|)
block|{
name|repo
operator|=
literal|null
expr_stmt|;
name|patches
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
name|body
operator|.
name|append
argument_list|(
literal|"Comments on Patch Set "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|patchSet
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|":\n\n"
argument_list|)
expr_stmt|;
block|}
name|Patch
operator|.
name|Key
name|currentFile
init|=
literal|null
decl_stmt|;
name|PatchFile
name|file
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|PatchLineComment
name|c
range|:
name|comments
control|)
block|{
specifier|final
name|Patch
operator|.
name|Key
name|pk
init|=
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
specifier|final
name|int
name|lineNbr
init|=
name|c
operator|.
name|getLine
argument_list|()
decl_stmt|;
specifier|final
name|short
name|side
init|=
name|c
operator|.
name|getSide
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pk
operator|.
name|equals
argument_list|(
name|currentFile
argument_list|)
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
literal|"....................................................\n"
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"File "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|pk
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|currentFile
operator|=
name|pk
expr_stmt|;
specifier|final
name|Patch
name|p
init|=
name|patches
operator|.
name|get
argument_list|(
name|pk
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|repo
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|file
operator|=
operator|new
name|PatchFile
argument_list|(
name|repo
argument_list|,
name|patchSet
operator|.
name|getRevision
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// Don't quote the line if we can't load it.
block|}
block|}
else|else
block|{
name|file
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|body
operator|.
name|append
argument_list|(
literal|"Line "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|lineNbr
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
try|try
block|{
specifier|final
name|String
name|lineStr
init|=
name|file
operator|.
name|getLine
argument_list|(
name|side
argument_list|,
name|lineNbr
argument_list|)
decl_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|lineStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|cce
parameter_list|)
block|{
comment|// Don't quote the line if we can't safely convert it.
block|}
block|}
name|body
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|c
operator|.
name|getMessage
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|body
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// If we have no body, don't bother generating an email.
comment|//
return|return;
block|}
if|if
condition|(
name|changeUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|openFooter
argument_list|()
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"To respond visit "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|changeUrl
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|initInReplyToChange
argument_list|()
expr_stmt|;
name|commentTo
argument_list|()
expr_stmt|;
name|starredTo
argument_list|()
expr_stmt|;
name|send
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|sendRequestReview ()
specifier|public
name|void
name|sendRequestReview
parameter_list|()
throws|throws
name|MessagingException
block|{
if|if
condition|(
name|begin
argument_list|(
literal|"requestReview"
argument_list|)
condition|)
block|{
specifier|final
name|Account
name|a
init|=
name|Common
operator|.
name|getAccountCache
argument_list|()
operator|.
name|get
argument_list|(
name|fromId
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
operator|||
name|a
operator|.
name|getFullName
argument_list|()
operator|==
literal|null
operator|||
name|a
operator|.
name|getFullName
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
literal|"A Gerrit user"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|body
operator|.
name|append
argument_list|(
name|a
operator|.
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|body
operator|.
name|append
argument_list|(
literal|" has requested that you review a change:\n\n"
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|" - "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|change
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|changeUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|openFooter
argument_list|()
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"To respond visit "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|changeUrl
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|initInReplyToChange
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
name|reviewers
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
name|extraCC
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromId
operator|!=
literal|null
condition|)
block|{
name|add
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
name|fromId
argument_list|)
expr_stmt|;
block|}
name|send
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|sendMerged ()
specifier|public
name|void
name|sendMerged
parameter_list|()
throws|throws
name|MessagingException
block|{
if|if
condition|(
name|begin
argument_list|(
literal|"merged"
argument_list|)
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
literal|"Change "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|patchSetInfo
operator|!=
literal|null
operator|&&
name|patchSetInfo
operator|.
name|getAuthor
argument_list|()
operator|!=
literal|null
operator|&&
name|patchSetInfo
operator|.
name|getAuthor
argument_list|()
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
literal|" by "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|patchSetInfo
operator|.
name|getAuthor
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|body
operator|.
name|append
argument_list|(
literal|" submitted to "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|".\n\n"
argument_list|)
expr_stmt|;
name|newChangePatchSetInfo
argument_list|()
expr_stmt|;
if|if
condition|(
name|changeUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|openFooter
argument_list|()
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"To view visit "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|changeUrl
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|initInReplyToChange
argument_list|()
expr_stmt|;
name|submittedTo
argument_list|()
expr_stmt|;
name|starredTo
argument_list|()
expr_stmt|;
name|send
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|sendMergeFailed ()
specifier|public
name|void
name|sendMergeFailed
parameter_list|()
throws|throws
name|MessagingException
block|{
if|if
condition|(
name|begin
argument_list|(
literal|"comment"
argument_list|)
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
literal|"Change "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|patchSetInfo
operator|!=
literal|null
operator|&&
name|patchSetInfo
operator|.
name|getAuthor
argument_list|()
operator|!=
literal|null
operator|&&
name|patchSetInfo
operator|.
name|getAuthor
argument_list|()
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
literal|" by "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|patchSetInfo
operator|.
name|getAuthor
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|body
operator|.
name|append
argument_list|(
literal|" FAILED to submit to "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|".\n\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
literal|"Error message:\n"
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"....................................................\n"
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|body
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changeUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|openFooter
argument_list|()
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"To view visit "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|changeUrl
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|initInReplyToChange
argument_list|()
expr_stmt|;
name|submittedTo
argument_list|()
expr_stmt|;
name|starredTo
argument_list|()
expr_stmt|;
name|send
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|sendAbandoned ()
specifier|public
name|void
name|sendAbandoned
parameter_list|()
throws|throws
name|MessagingException
block|{
if|if
condition|(
name|begin
argument_list|(
literal|"abandon"
argument_list|)
condition|)
block|{
specifier|final
name|Account
name|a
init|=
name|Common
operator|.
name|getAccountCache
argument_list|()
operator|.
name|get
argument_list|(
name|fromId
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
operator|||
name|a
operator|.
name|getFullName
argument_list|()
operator|==
literal|null
operator|||
name|a
operator|.
name|getFullName
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
literal|"A Gerrit user"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|body
operator|.
name|append
argument_list|(
name|a
operator|.
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|body
operator|.
name|append
argument_list|(
literal|" has abandoned a change:\n\n"
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|" - "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|change
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|body
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changeUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|openFooter
argument_list|()
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"To view visit "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|changeUrl
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|initInReplyToChange
argument_list|()
expr_stmt|;
name|commentTo
argument_list|()
expr_stmt|;
name|starredTo
argument_list|()
expr_stmt|;
name|send
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|newChangeTo ()
specifier|private
name|void
name|newChangeTo
parameter_list|()
throws|throws
name|MessagingException
block|{
name|add
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
name|reviewers
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
name|extraCC
argument_list|)
expr_stmt|;
if|if
condition|(
name|patchSetInfo
operator|!=
literal|null
condition|)
block|{
comment|// Make sure the author/committer get notice of a change that
comment|// they will be blamed later on for writing.
comment|//
name|add
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
name|patchSetInfo
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
name|patchSetInfo
operator|.
name|getCommitter
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ProjectCache
operator|.
name|Entry
name|cacheEntry
init|=
name|Common
operator|.
name|getProjectCache
argument_list|()
operator|.
name|get
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
comment|// Try to mark interested owners with a TO and not a BCC line.
comment|//
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|toNotBCC
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountGroupMember
name|m
range|:
name|db
operator|.
name|accountGroupMembers
argument_list|()
operator|.
name|byGroup
argument_list|(
name|cacheEntry
operator|.
name|getProject
argument_list|()
operator|.
name|getOwnerGroupId
argument_list|()
argument_list|)
control|)
block|{
name|toNotBCC
operator|.
name|add
argument_list|(
name|m
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// BCC anyone who has interest in this project's changes
comment|//
for|for
control|(
name|AccountProjectWatch
name|w
range|:
name|db
operator|.
name|accountProjectWatches
argument_list|()
operator|.
name|notifyNewChanges
argument_list|(
name|cacheEntry
operator|.
name|getProject
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|toNotBCC
operator|.
name|contains
argument_list|(
name|w
operator|.
name|getAccountId
argument_list|()
argument_list|)
condition|)
block|{
name|add
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
name|w
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|add
argument_list|(
name|RecipientType
operator|.
name|BCC
argument_list|,
name|w
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
comment|// Just don't CC everyone. Better to send a partial message to those
comment|// we already have queued up then to fail deliver entirely to people
comment|// who have a lower interest in the change.
block|}
block|}
DECL|method|newChangeCc ()
specifier|private
name|void
name|newChangeCc
parameter_list|()
throws|throws
name|MessagingException
block|{
comment|// CC the owner/uploader, but in truth these should always match
comment|// the sender too. add will strip duplicates (if any).
comment|//
name|add
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
name|change
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|patchSet
operator|!=
literal|null
condition|)
block|{
name|add
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
name|patchSet
operator|.
name|getUploader
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ccSender
argument_list|()
expr_stmt|;
block|}
DECL|method|commentTo ()
specifier|private
name|void
name|commentTo
parameter_list|()
throws|throws
name|MessagingException
block|{
comment|// Always to the owner/uploader/author/committer. These people
comment|// have a vested interest in the change and any remarks made.
comment|//
name|add
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
name|change
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|patchSet
operator|!=
literal|null
condition|)
block|{
name|add
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
name|patchSet
operator|.
name|getUploader
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|patchSetInfo
operator|!=
literal|null
condition|)
block|{
name|add
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
name|patchSetInfo
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
name|patchSetInfo
operator|.
name|getCommitter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
name|reviewers
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
name|extraCC
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
comment|// We need a database handle to fetch the interest list.
comment|//
return|return;
block|}
try|try
block|{
comment|// CC anyone else who has posted an approval mark on this change
comment|//
for|for
control|(
name|ChangeApproval
name|ap
range|:
name|db
operator|.
name|changeApprovals
argument_list|()
operator|.
name|byChange
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
control|)
block|{
name|add
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
name|ap
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// BCC anyone else who has interest in this project's changes
comment|//
specifier|final
name|Project
operator|.
name|Id
name|projectId
init|=
name|projectId
argument_list|()
decl_stmt|;
if|if
condition|(
name|projectId
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AccountProjectWatch
name|w
range|:
name|db
operator|.
name|accountProjectWatches
argument_list|()
operator|.
name|notifyAllComments
argument_list|(
name|projectId
argument_list|)
control|)
block|{
name|add
argument_list|(
name|RecipientType
operator|.
name|BCC
argument_list|,
name|w
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
comment|// Just don't CC everyone. Better to send a partial message to those
comment|// we already have queued up then to fail deliver entirely to people
comment|// who have a lower interest in the change.
block|}
block|}
DECL|method|submittedTo ()
specifier|private
name|void
name|submittedTo
parameter_list|()
throws|throws
name|MessagingException
block|{
comment|// Always to the owner/uploader/author/committer. These people
comment|// have a vested interest in the change.
comment|//
name|add
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
name|change
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|patchSet
operator|!=
literal|null
condition|)
block|{
name|add
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
name|patchSet
operator|.
name|getUploader
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|patchSetInfo
operator|!=
literal|null
condition|)
block|{
name|add
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
name|patchSetInfo
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
name|patchSetInfo
operator|.
name|getCommitter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
name|reviewers
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
name|extraCC
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
comment|// We need a database handle to fetch the interest list.
comment|//
return|return;
block|}
try|try
block|{
comment|// CC anyone else who has posted an approval mark on this change
comment|//
for|for
control|(
name|ChangeApproval
name|ap
range|:
name|db
operator|.
name|changeApprovals
argument_list|()
operator|.
name|byChange
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
control|)
block|{
name|add
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
name|ap
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// BCC anyone else who has interest in this project's changes
comment|//
specifier|final
name|Project
operator|.
name|Id
name|projectId
init|=
name|projectId
argument_list|()
decl_stmt|;
if|if
condition|(
name|projectId
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AccountProjectWatch
name|w
range|:
name|db
operator|.
name|accountProjectWatches
argument_list|()
operator|.
name|notifySubmittedChanges
argument_list|(
name|projectId
argument_list|)
control|)
block|{
name|add
argument_list|(
name|RecipientType
operator|.
name|BCC
argument_list|,
name|w
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
comment|// Just don't CC everyone. Better to send a partial message to those
comment|// we already have queued up then to fail deliver entirely to people
comment|// who have a lower interest in the change.
block|}
block|}
DECL|method|starredTo ()
specifier|private
name|void
name|starredTo
parameter_list|()
throws|throws
name|MessagingException
block|{
try|try
block|{
comment|// BCC anyone else who has starred this change.
comment|//
for|for
control|(
name|StarredChange
name|w
range|:
name|db
operator|.
name|starredChanges
argument_list|()
operator|.
name|byChange
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
control|)
block|{
name|add
argument_list|(
name|RecipientType
operator|.
name|BCC
argument_list|,
name|w
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
comment|// Just don't CC everyone. Better to send a partial message to those
comment|// we already have queued up then to fail deliver entirely to people
comment|// who have a lower interest in the change.
block|}
block|}
DECL|method|begin (final String messageClass)
specifier|private
name|boolean
name|begin
parameter_list|(
specifier|final
name|String
name|messageClass
parameter_list|)
throws|throws
name|MessagingException
block|{
if|if
condition|(
name|transport
operator|!=
literal|null
condition|)
block|{
name|msg
operator|=
operator|new
name|MimeMessage
argument_list|(
name|transport
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
name|message
operator|.
name|getWrittenOn
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|setSentDate
argument_list|(
operator|new
name|Date
argument_list|(
name|message
operator|.
name|getWrittenOn
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|.
name|setSentDate
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|initFrom
argument_list|()
expr_stmt|;
name|initUserAgent
argument_list|()
expr_stmt|;
name|initListId
argument_list|()
expr_stmt|;
name|initChangeUrl
argument_list|()
expr_stmt|;
name|initChangeId
argument_list|()
expr_stmt|;
name|initCommitId
argument_list|()
expr_stmt|;
name|initMessageType
argument_list|(
name|messageClass
argument_list|)
expr_stmt|;
name|initSubject
argument_list|()
expr_stmt|;
name|body
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|inFooter
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|initFrom ()
specifier|private
name|void
name|initFrom
parameter_list|()
throws|throws
name|MessagingException
throws|,
name|AddressException
block|{
name|Address
name|addr
decl_stmt|;
if|if
condition|(
name|fromId
operator|!=
literal|null
condition|)
block|{
name|addr
operator|=
name|toAddress
argument_list|(
name|fromId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|PersonIdent
name|pi
init|=
name|server
operator|.
name|newGerritPersonIdent
argument_list|()
decl_stmt|;
try|try
block|{
name|addr
operator|=
operator|new
name|InternetAddress
argument_list|(
name|pi
operator|.
name|getName
argument_list|()
argument_list|,
name|pi
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|addr
operator|=
operator|new
name|InternetAddress
argument_list|(
name|pi
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|msg
operator|.
name|setFrom
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
DECL|method|initUserAgent ()
specifier|private
name|void
name|initUserAgent
parameter_list|()
throws|throws
name|MessagingException
block|{
name|msg
operator|.
name|setHeader
argument_list|(
literal|"User-Agent"
argument_list|,
literal|"Gerrit/2"
argument_list|)
expr_stmt|;
block|}
DECL|method|initListId ()
specifier|private
name|void
name|initListId
parameter_list|()
throws|throws
name|MessagingException
block|{
comment|// Set a reasonable list id so that filters can be used to sort messages
comment|//
specifier|final
name|StringBuilder
name|listid
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|listid
operator|.
name|append
argument_list|(
literal|"gerrit-"
argument_list|)
expr_stmt|;
name|listid
operator|.
name|append
argument_list|(
name|projectName
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|listid
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
expr_stmt|;
name|listid
operator|.
name|append
argument_list|(
name|gerritHost
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|listidStr
init|=
name|listid
operator|.
name|toString
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setHeader
argument_list|(
literal|"Mailing-List"
argument_list|,
literal|"list "
operator|+
name|listidStr
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setHeader
argument_list|(
literal|"List-Id"
argument_list|,
literal|"<"
operator|+
name|listidStr
operator|.
name|replace
argument_list|(
literal|'@'
argument_list|,
literal|'.'
argument_list|)
operator|+
literal|">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|settingsUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|setHeader
argument_list|(
literal|"List-Unsubscribe"
argument_list|,
literal|"<"
operator|+
name|settingsUrl
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initChangeUrl ()
specifier|private
name|void
name|initChangeUrl
parameter_list|()
throws|throws
name|MessagingException
block|{
specifier|final
name|String
name|u
init|=
name|changeUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|u
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|setHeader
argument_list|(
literal|"X-Gerrit-ChangeURL"
argument_list|,
literal|"<"
operator|+
name|u
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initChangeId ()
specifier|private
name|void
name|initChangeId
parameter_list|()
throws|throws
name|MessagingException
block|{
name|msg
operator|.
name|setHeader
argument_list|(
literal|"X-Gerrit-ChangeId"
argument_list|,
literal|""
operator|+
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|initCommitId ()
specifier|private
name|void
name|initCommitId
parameter_list|()
throws|throws
name|MessagingException
block|{
if|if
condition|(
name|patchSet
operator|!=
literal|null
operator|&&
name|patchSet
operator|.
name|getRevision
argument_list|()
operator|!=
literal|null
operator|&&
name|patchSet
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
operator|!=
literal|null
operator|&&
name|patchSet
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|msg
operator|.
name|setHeader
argument_list|(
literal|"X-Gerrit-Commit"
argument_list|,
name|patchSet
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initMessageType (final String messageClass)
specifier|private
name|void
name|initMessageType
parameter_list|(
specifier|final
name|String
name|messageClass
parameter_list|)
throws|throws
name|MessagingException
block|{
name|msg
operator|.
name|setHeader
argument_list|(
literal|"X-Gerrit-MessageType"
argument_list|,
name|messageClass
argument_list|)
expr_stmt|;
block|}
DECL|method|initInReplyToChange ()
specifier|private
name|void
name|initInReplyToChange
parameter_list|()
throws|throws
name|MessagingException
block|{
specifier|final
name|String
name|id
init|=
name|changeMessageThreadId
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setHeader
argument_list|(
literal|"In-Reply-To"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setHeader
argument_list|(
literal|"References"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|initSubject ()
specifier|private
name|void
name|initSubject
parameter_list|()
throws|throws
name|MessagingException
block|{
specifier|final
name|StringBuilder
name|subj
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|subj
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|subj
operator|.
name|append
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|subj
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
name|subj
operator|.
name|append
argument_list|(
literal|"Change "
argument_list|)
expr_stmt|;
name|subj
operator|.
name|append
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|subj
operator|.
name|append
argument_list|(
literal|": ("
argument_list|)
expr_stmt|;
name|subj
operator|.
name|append
argument_list|(
name|projectName
argument_list|)
expr_stmt|;
name|subj
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|.
name|getSubject
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|60
condition|)
block|{
name|subj
operator|.
name|append
argument_list|(
name|change
operator|.
name|getSubject
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|subj
operator|.
name|append
argument_list|(
literal|"..."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|subj
operator|.
name|append
argument_list|(
name|change
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|setSubject
argument_list|(
name|subj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|gerritHost ()
specifier|private
name|String
name|gerritHost
parameter_list|()
block|{
if|if
condition|(
name|server
operator|.
name|getCanonicalURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
operator|new
name|URL
argument_list|(
name|server
operator|.
name|getCanonicalURL
argument_list|()
argument_list|)
operator|.
name|getHost
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// Try something else.
block|}
block|}
if|if
condition|(
name|myUrl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
operator|new
name|URL
argument_list|(
name|myUrl
argument_list|)
operator|.
name|getHost
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// Try something else.
block|}
block|}
comment|// Fall back onto whatever the local operating system thinks
comment|// this server is called. We hopefully didn't get here as a
comment|// good admin would have configured the canonical url.
comment|//
try|try
block|{
return|return
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
return|return
literal|"localhost"
return|;
block|}
block|}
DECL|method|changeUrl ()
specifier|private
name|String
name|changeUrl
parameter_list|()
block|{
if|if
condition|(
name|gerritUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|r
operator|.
name|append
argument_list|(
name|gerritUrl
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|settingsUrl ()
specifier|private
name|String
name|settingsUrl
parameter_list|()
block|{
if|if
condition|(
name|gerritUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|r
operator|.
name|append
argument_list|(
name|gerritUrl
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|"settings"
argument_list|)
expr_stmt|;
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|gerritUrl ()
specifier|private
name|String
name|gerritUrl
parameter_list|()
block|{
if|if
condition|(
name|server
operator|.
name|getCanonicalURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|server
operator|.
name|getCanonicalURL
argument_list|()
return|;
block|}
return|return
name|myUrl
return|;
block|}
DECL|method|changeMessageThreadId ()
specifier|private
name|String
name|changeMessageThreadId
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|"gerrit"
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
name|change
operator|.
name|getCreatedOn
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|'@'
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
name|gerritHost
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|openFooter ()
specifier|private
name|void
name|openFooter
parameter_list|()
block|{
if|if
condition|(
operator|!
name|inFooter
condition|)
block|{
name|inFooter
operator|=
literal|true
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"-- \n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|send ()
specifier|private
name|void
name|send
parameter_list|()
throws|throws
name|MessagingException
block|{
if|if
condition|(
name|haveRcptTo
argument_list|()
condition|)
block|{
name|ccSender
argument_list|()
expr_stmt|;
if|if
condition|(
name|settingsUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|openFooter
argument_list|()
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"To unsubscribe, visit "
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
name|settingsUrl
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|setText
argument_list|(
name|body
operator|.
name|toString
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Transport
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|haveRcptTo ()
specifier|private
name|boolean
name|haveRcptTo
parameter_list|()
block|{
if|if
condition|(
name|rcptTo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If we have nobody to send this message to, then all of our
comment|// selection filters previously for this type of message were
comment|// unable to match a destination. Don't bother sending it.
comment|//
return|return
literal|false
return|;
block|}
if|if
condition|(
name|rcptTo
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|rcptTo
operator|.
name|contains
argument_list|(
name|fromId
argument_list|)
condition|)
block|{
comment|// If the only recipient is also the sender, don't bother.
comment|//
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|projectId ()
specifier|private
name|Project
operator|.
name|Id
name|projectId
parameter_list|()
block|{
specifier|final
name|ProjectCache
operator|.
name|Entry
name|r
decl_stmt|;
name|r
operator|=
name|Common
operator|.
name|getProjectCache
argument_list|()
operator|.
name|get
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|r
operator|!=
literal|null
condition|?
name|r
operator|.
name|getProject
argument_list|()
operator|.
name|getId
argument_list|()
else|:
literal|null
return|;
block|}
DECL|method|ccSender ()
specifier|private
name|void
name|ccSender
parameter_list|()
throws|throws
name|MessagingException
block|{
if|if
condition|(
name|fromId
operator|!=
literal|null
condition|)
block|{
comment|// If we are impersonating a user, make sure they receive a CC of
comment|// this message so they can always review and audit what we sent
comment|// on their behalf to others.
comment|//
name|add
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
name|fromId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|add (final RecipientType rt, final Collection<Account.Id> list)
specifier|private
name|void
name|add
parameter_list|(
specifier|final
name|RecipientType
name|rt
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|list
parameter_list|)
throws|throws
name|MessagingException
block|{
for|for
control|(
specifier|final
name|Account
operator|.
name|Id
name|id
range|:
name|list
control|)
block|{
name|add
argument_list|(
name|rt
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|add (final RecipientType rt, final UserIdentity who)
specifier|private
name|void
name|add
parameter_list|(
specifier|final
name|RecipientType
name|rt
parameter_list|,
specifier|final
name|UserIdentity
name|who
parameter_list|)
throws|throws
name|MessagingException
block|{
if|if
condition|(
name|who
operator|!=
literal|null
operator|&&
name|who
operator|.
name|getAccount
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|add
argument_list|(
name|rt
argument_list|,
name|who
operator|.
name|getAccount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|add (final RecipientType rt, final Account.Id to)
specifier|private
name|void
name|add
parameter_list|(
specifier|final
name|RecipientType
name|rt
parameter_list|,
specifier|final
name|Account
operator|.
name|Id
name|to
parameter_list|)
throws|throws
name|MessagingException
block|{
if|if
condition|(
operator|!
name|rcptTo
operator|.
name|add
argument_list|(
name|to
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|Address
name|addr
init|=
name|toAddress
argument_list|(
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|addRecipient
argument_list|(
name|rt
argument_list|,
name|addr
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|toAddress (final Account.Id id)
specifier|private
name|Address
name|toAddress
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|AddressException
block|{
specifier|final
name|Account
name|a
init|=
name|Common
operator|.
name|getAccountCache
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|e
init|=
name|a
operator|.
name|getPreferredEmail
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
specifier|final
name|String
name|an
init|=
name|a
operator|.
name|getFullName
argument_list|()
decl_stmt|;
return|return
operator|new
name|InternetAddress
argument_list|(
name|e
argument_list|,
name|an
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e1
parameter_list|)
block|{
return|return
operator|new
name|InternetAddress
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

