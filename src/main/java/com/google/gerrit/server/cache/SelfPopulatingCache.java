begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.cache
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|CacheException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Ehcache
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|constructs
operator|.
name|blocking
operator|.
name|CacheEntryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * A decorator for {@link Cache} which automatically constructs missing entries.  *<p>  * On a cache miss {@link #createEntry(Object)} is invoked, allowing the  * application specific subclass to compute the entry and return it for caching.  * During a miss the cache takes a lock related to the missing key, ensuring  * that at most one thread performs the creation work, and other threads wait  * for the result. Concurrent creations are possible if two different keys miss  * and hash to different locks in the internal lock table.  *  * @param<K> type of key used to name cache entries.  * @param<V> type of value stored within a cache entry.  */
end_comment

begin_class
DECL|class|SelfPopulatingCache
specifier|public
specifier|abstract
class|class
name|SelfPopulatingCache
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SelfPopulatingCache
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|self
specifier|private
specifier|final
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|constructs
operator|.
name|blocking
operator|.
name|SelfPopulatingCache
name|self
decl_stmt|;
comment|/**    * Create a new cache which uses another cache to store entries.    *    * @param backingStore cache which will store the entries for this cache.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|SelfPopulatingCache (final Cache<K, V> backingStore)
specifier|public
name|SelfPopulatingCache
parameter_list|(
specifier|final
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|backingStore
parameter_list|)
block|{
specifier|final
name|Ehcache
name|s
init|=
operator|(
operator|(
name|SimpleCache
operator|)
name|backingStore
operator|)
operator|.
name|getEhcache
argument_list|()
decl_stmt|;
specifier|final
name|CacheEntryFactory
name|f
init|=
operator|new
name|CacheEntryFactory
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Object
name|createEntry
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|SelfPopulatingCache
operator|.
name|this
operator|.
name|createEntry
argument_list|(
operator|(
name|K
operator|)
name|key
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|self
operator|=
operator|new
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|constructs
operator|.
name|blocking
operator|.
name|SelfPopulatingCache
argument_list|(
name|s
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
comment|/**    * Invoked on a cache miss, to compute the cache entry.    *    * @param key entry whose content needs to be obtained.    * @return new cache content. The caller will automatically put this object    *         into the cache.    * @throws Exception the cache content cannot be computed. No entry will be    *         stored in the cache, and {@link #missing(Object)} will be invoked    *         instead. Future requests for the same key will retry this method.    */
DECL|method|createEntry (K key)
specifier|protected
specifier|abstract
name|V
name|createEntry
parameter_list|(
name|K
name|key
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/** Invoked when {@link #createEntry(Object)} fails, by default return null. */
DECL|method|missing (K key)
specifier|protected
name|V
name|missing
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Get the element from the cache, or {@link #missing(Object)} if not found.    *<p>    * The {@link #missing(Object)} method is only invoked if:    *<ul>    *<li>{@code key == null}, in which case the application should return a    * suitable return value that callers can accept, or throw a RuntimeException.    *<li>{@code createEntry(key)} threw an exception, in which case the entry    * was not stored in the cache. An entry was recorded in the application log,    * but a return value is still required.    *<li>The cache has been shutdown, and access is forbidden.    *</ul>    *    * @param key key to locate.    * @return either the cached entry, or {@code missing(key)} if not found.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|get (final K key)
specifier|public
name|V
name|get
parameter_list|(
specifier|final
name|K
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
return|return
name|missing
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|final
name|Element
name|m
decl_stmt|;
try|try
block|{
name|m
operator|=
name|self
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot lookup "
operator|+
name|key
operator|+
literal|" in \""
operator|+
name|self
operator|.
name|getName
argument_list|()
operator|+
literal|"\""
argument_list|,
name|err
argument_list|)
expr_stmt|;
return|return
name|missing
argument_list|(
name|key
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CacheException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot lookup "
operator|+
name|key
operator|+
literal|" in \""
operator|+
name|self
operator|.
name|getName
argument_list|()
operator|+
literal|"\""
argument_list|,
name|err
argument_list|)
expr_stmt|;
return|return
name|missing
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
name|m
operator|!=
literal|null
condition|?
operator|(
name|V
operator|)
name|m
operator|.
name|getObjectValue
argument_list|()
else|:
name|missing
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|remove (final K key)
specifier|public
name|void
name|remove
parameter_list|(
specifier|final
name|K
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|self
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|put (K key, V value)
specifier|public
name|void
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|self
operator|.
name|put
argument_list|(
operator|new
name|Element
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTimeToIdle (final TimeUnit unit)
specifier|public
name|long
name|getTimeToIdle
parameter_list|(
specifier|final
name|TimeUnit
name|unit
parameter_list|)
block|{
specifier|final
name|long
name|idle
init|=
name|self
operator|.
name|getCacheConfiguration
argument_list|()
operator|.
name|getTimeToIdleSeconds
argument_list|()
decl_stmt|;
return|return
name|unit
operator|.
name|convert
argument_list|(
name|idle
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Cache["
operator|+
name|self
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

