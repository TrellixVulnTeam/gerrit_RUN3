begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.rebind.css
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|rebind
operator|.
name|css
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|css
operator|.
name|CssReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|ext
operator|.
name|Generator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|ext
operator|.
name|GeneratorContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|ext
operator|.
name|TreeLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|ext
operator|.
name|UnableToCompleteException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|ext
operator|.
name|typeinfo
operator|.
name|JArrayType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|ext
operator|.
name|typeinfo
operator|.
name|JClassType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|ext
operator|.
name|typeinfo
operator|.
name|JPackage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|ext
operator|.
name|typeinfo
operator|.
name|JType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|ext
operator|.
name|typeinfo
operator|.
name|TypeOracle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dev
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|rebind
operator|.
name|ClassSourceFileComposerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|rebind
operator|.
name|SourceWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_class
DECL|class|CssGenerator
specifier|public
class|class
name|CssGenerator
extends|extends
name|Generator
block|{
DECL|field|LDR_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|LDR_SUFFIX
init|=
literal|"_Loader"
decl_stmt|;
annotation|@
name|Override
DECL|method|generate (TreeLogger logger, final GeneratorContext ctx, final String requestedClass)
specifier|public
name|String
name|generate
parameter_list|(
name|TreeLogger
name|logger
parameter_list|,
specifier|final
name|GeneratorContext
name|ctx
parameter_list|,
specifier|final
name|String
name|requestedClass
parameter_list|)
throws|throws
name|UnableToCompleteException
block|{
name|logger
operator|=
name|logger
operator|.
name|branch
argument_list|(
name|TreeLogger
operator|.
name|DEBUG
argument_list|,
literal|"Generating client proxy for css loading interface '"
operator|+
name|requestedClass
operator|+
literal|"'"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|TypeOracle
name|typeOracle
init|=
name|ctx
operator|.
name|getTypeOracle
argument_list|()
decl_stmt|;
specifier|final
name|JClassType
name|ldrInf
init|=
name|typeOracle
operator|.
name|findType
argument_list|(
name|requestedClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|ldrInf
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|TreeLogger
operator|.
name|ERROR
argument_list|,
literal|"Unable to find metadata for type '"
operator|+
name|requestedClass
operator|+
literal|"'"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnableToCompleteException
argument_list|()
throw|;
block|}
if|if
condition|(
name|ldrInf
operator|.
name|isInterface
argument_list|()
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|TreeLogger
operator|.
name|ERROR
argument_list|,
name|ldrInf
operator|.
name|getQualifiedSourceName
argument_list|()
operator|+
literal|" is not an interface"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnableToCompleteException
argument_list|()
throw|;
block|}
specifier|final
name|SourceWriter
name|w
init|=
name|getSourceWriter
argument_list|(
name|logger
argument_list|,
name|ctx
argument_list|,
name|ldrInf
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|writeClass
argument_list|(
name|logger
argument_list|,
name|ctx
argument_list|,
name|w
argument_list|,
name|ldrInf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|TreeLogger
operator|.
name|ERROR
argument_list|,
literal|"Cannot create '"
operator|+
name|ldrInf
operator|.
name|getQualifiedSourceName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnableToCompleteException
argument_list|()
throw|;
block|}
block|}
return|return
name|getProxyQualifiedName
argument_list|(
name|ldrInf
argument_list|)
return|;
block|}
DECL|method|writeClass (TreeLogger logger, final GeneratorContext ctx, final SourceWriter w, final JClassType ldrInf)
specifier|private
name|void
name|writeClass
parameter_list|(
name|TreeLogger
name|logger
parameter_list|,
specifier|final
name|GeneratorContext
name|ctx
parameter_list|,
specifier|final
name|SourceWriter
name|w
parameter_list|,
specifier|final
name|JClassType
name|ldrInf
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnableToCompleteException
block|{
specifier|final
name|String
name|srcname
init|=
name|ldrInf
operator|.
name|getQualifiedSourceName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".css"
decl_stmt|;
specifier|final
name|InputStream
name|in
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|srcname
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|srcname
argument_list|)
throw|;
block|}
specifier|final
name|ByteArrayOutputStream
name|tmp
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|2048
index|]
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|tmp
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
name|tmp
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|rawcss
init|=
name|tmp
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
specifier|final
name|String
name|outname
init|=
name|Util
operator|.
name|computeStrongName
argument_list|(
name|rawcss
argument_list|)
operator|+
literal|".cache.css"
decl_stmt|;
specifier|final
name|OutputStream
name|out
init|=
name|ctx
operator|.
name|tryCreateResource
argument_list|(
name|logger
argument_list|,
name|outname
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|rawcss
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|commitResource
argument_list|(
name|logger
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|println
argument_list|(
literal|"public CssReference load() {"
argument_list|)
expr_stmt|;
name|w
operator|.
name|indent
argument_list|()
expr_stmt|;
name|w
operator|.
name|println
argument_list|(
literal|"return new CssReference(\""
operator|+
name|escape
argument_list|(
name|outname
argument_list|)
operator|+
literal|"\");"
argument_list|)
expr_stmt|;
name|w
operator|.
name|outdent
argument_list|()
expr_stmt|;
name|w
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
DECL|method|getSourceWriter (final TreeLogger logger, final GeneratorContext ctx, final JClassType ldrInf)
specifier|private
specifier|static
name|SourceWriter
name|getSourceWriter
parameter_list|(
specifier|final
name|TreeLogger
name|logger
parameter_list|,
specifier|final
name|GeneratorContext
name|ctx
parameter_list|,
specifier|final
name|JClassType
name|ldrInf
parameter_list|)
block|{
specifier|final
name|JPackage
name|servicePkg
init|=
name|ldrInf
operator|.
name|getPackage
argument_list|()
decl_stmt|;
specifier|final
name|String
name|pkgn
init|=
name|servicePkg
operator|==
literal|null
condition|?
literal|""
else|:
name|servicePkg
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|PrintWriter
name|pw
decl_stmt|;
specifier|final
name|ClassSourceFileComposerFactory
name|cf
decl_stmt|;
name|pw
operator|=
name|ctx
operator|.
name|tryCreate
argument_list|(
name|logger
argument_list|,
name|pkgn
argument_list|,
name|getProxySimpleName
argument_list|(
name|ldrInf
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pw
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|cf
operator|=
operator|new
name|ClassSourceFileComposerFactory
argument_list|(
name|pkgn
argument_list|,
name|getProxySimpleName
argument_list|(
name|ldrInf
argument_list|)
argument_list|)
expr_stmt|;
name|cf
operator|.
name|addImport
argument_list|(
name|CssReference
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cf
operator|.
name|addImplementedInterface
argument_list|(
name|ldrInf
operator|.
name|getErasedType
argument_list|()
operator|.
name|getQualifiedSourceName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cf
operator|.
name|createSourceWriter
argument_list|(
name|ctx
argument_list|,
name|pw
argument_list|)
return|;
block|}
DECL|method|getProxyQualifiedName (final JClassType ldrInf)
specifier|private
specifier|static
name|String
name|getProxyQualifiedName
parameter_list|(
specifier|final
name|JClassType
name|ldrInf
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|name
init|=
name|synthesizeTopLevelClassName
argument_list|(
name|ldrInf
argument_list|,
name|LDR_SUFFIX
argument_list|)
decl_stmt|;
return|return
name|name
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|name
index|[
literal|1
index|]
else|:
name|name
index|[
literal|0
index|]
operator|+
literal|"."
operator|+
name|name
index|[
literal|1
index|]
return|;
block|}
DECL|method|getProxySimpleName (final JClassType ldrInf)
specifier|private
specifier|static
name|String
name|getProxySimpleName
parameter_list|(
specifier|final
name|JClassType
name|ldrInf
parameter_list|)
block|{
return|return
name|synthesizeTopLevelClassName
argument_list|(
name|ldrInf
argument_list|,
name|LDR_SUFFIX
argument_list|)
index|[
literal|1
index|]
return|;
block|}
DECL|method|synthesizeTopLevelClassName (JClassType type, String suffix)
specifier|private
specifier|static
name|String
index|[]
name|synthesizeTopLevelClassName
parameter_list|(
name|JClassType
name|type
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
comment|// Gets the basic name of the type. If it's a nested type, the type name
comment|// will contains dots.
comment|//
name|String
name|className
decl_stmt|;
name|String
name|packageName
decl_stmt|;
name|JType
name|leafType
init|=
name|type
operator|.
name|getLeafType
argument_list|()
decl_stmt|;
if|if
condition|(
name|leafType
operator|.
name|isPrimitive
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|className
operator|=
name|leafType
operator|.
name|getSimpleSourceName
argument_list|()
expr_stmt|;
name|packageName
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|JClassType
name|classOrInterface
init|=
name|leafType
operator|.
name|isClassOrInterface
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|classOrInterface
operator|!=
literal|null
operator|)
assert|;
name|className
operator|=
name|classOrInterface
operator|.
name|getName
argument_list|()
expr_stmt|;
name|packageName
operator|=
name|classOrInterface
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|JArrayType
name|isArray
init|=
name|type
operator|.
name|isArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|isArray
operator|!=
literal|null
condition|)
block|{
name|className
operator|+=
literal|"_Array_Rank_"
operator|+
name|isArray
operator|.
name|getRank
argument_list|()
expr_stmt|;
block|}
comment|// Add the meaningful suffix.
comment|//
name|className
operator|+=
name|suffix
expr_stmt|;
comment|// Make it a top-level name.
comment|//
name|className
operator|=
name|className
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
index|[]
block|{
name|packageName
block|,
name|className
block|}
return|;
block|}
block|}
end_class

end_unit

