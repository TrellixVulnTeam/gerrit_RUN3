begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountGeneralPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|LocaleInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Grid
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|client
operator|.
name|VoidResult
import|;
end_import

begin_class
DECL|class|PreferencePanel
class|class
name|PreferencePanel
extends|extends
name|Composite
block|{
DECL|field|showSiteHeader
specifier|private
name|CheckBox
name|showSiteHeader
decl_stmt|;
DECL|field|useFlashClipboard
specifier|private
name|CheckBox
name|useFlashClipboard
decl_stmt|;
DECL|field|defaultContext
specifier|private
name|ListBox
name|defaultContext
decl_stmt|;
DECL|field|save
specifier|private
name|Button
name|save
decl_stmt|;
DECL|method|PreferencePanel ()
name|PreferencePanel
parameter_list|()
block|{
specifier|final
name|FlowPanel
name|body
init|=
operator|new
name|FlowPanel
argument_list|()
decl_stmt|;
specifier|final
name|ClickHandler
name|onClickSave
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
specifier|final
name|ClickEvent
name|event
parameter_list|)
block|{
name|save
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|showSiteHeader
operator|=
operator|new
name|CheckBox
argument_list|(
name|Util
operator|.
name|C
operator|.
name|showSiteHeader
argument_list|()
argument_list|)
expr_stmt|;
name|showSiteHeader
operator|.
name|addClickHandler
argument_list|(
name|onClickSave
argument_list|)
expr_stmt|;
name|useFlashClipboard
operator|=
operator|new
name|CheckBox
argument_list|(
name|Util
operator|.
name|C
operator|.
name|useFlashClipboard
argument_list|()
argument_list|)
expr_stmt|;
name|useFlashClipboard
operator|.
name|addClickHandler
argument_list|(
name|onClickSave
argument_list|)
expr_stmt|;
name|defaultContext
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|short
name|v
range|:
name|AccountGeneralPreferences
operator|.
name|CONTEXT_CHOICES
control|)
block|{
specifier|final
name|String
name|label
decl_stmt|;
if|if
condition|(
name|v
operator|==
name|AccountGeneralPreferences
operator|.
name|WHOLE_FILE_CONTEXT
condition|)
block|{
name|label
operator|=
name|Util
operator|.
name|C
operator|.
name|contextWholeFile
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|label
operator|=
name|Util
operator|.
name|M
operator|.
name|lines
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|defaultContext
operator|.
name|addItem
argument_list|(
name|label
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|defaultContext
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
specifier|final
name|ChangeEvent
name|event
parameter_list|)
block|{
name|save
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|int
name|labelIdx
decl_stmt|,
name|fieldIdx
decl_stmt|;
if|if
condition|(
name|LocaleInfo
operator|.
name|getCurrentLocale
argument_list|()
operator|.
name|isRTL
argument_list|()
condition|)
block|{
name|labelIdx
operator|=
literal|1
expr_stmt|;
name|fieldIdx
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|labelIdx
operator|=
literal|0
expr_stmt|;
name|fieldIdx
operator|=
literal|1
expr_stmt|;
block|}
specifier|final
name|Grid
name|formGrid
init|=
operator|new
name|Grid
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|formGrid
operator|.
name|setText
argument_list|(
name|row
argument_list|,
name|labelIdx
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|formGrid
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|fieldIdx
argument_list|,
name|showSiteHeader
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
name|formGrid
operator|.
name|setText
argument_list|(
name|row
argument_list|,
name|labelIdx
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|formGrid
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|fieldIdx
argument_list|,
name|useFlashClipboard
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
name|formGrid
operator|.
name|setText
argument_list|(
name|row
argument_list|,
name|labelIdx
argument_list|,
name|Util
operator|.
name|C
operator|.
name|defaultContextFieldLabel
argument_list|()
argument_list|)
expr_stmt|;
name|formGrid
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|fieldIdx
argument_list|,
name|defaultContext
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
name|body
operator|.
name|add
argument_list|(
name|formGrid
argument_list|)
expr_stmt|;
name|save
operator|=
operator|new
name|Button
argument_list|(
name|Util
operator|.
name|C
operator|.
name|buttonSaveChanges
argument_list|()
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|save
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
specifier|final
name|ClickEvent
name|event
parameter_list|)
block|{
name|doSave
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|body
operator|.
name|add
argument_list|(
name|save
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|public
name|void
name|onLoad
parameter_list|()
block|{
name|super
operator|.
name|onLoad
argument_list|()
expr_stmt|;
name|Util
operator|.
name|ACCOUNT_SVC
operator|.
name|myAccount
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|Account
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|Account
name|result
parameter_list|)
block|{
name|display
argument_list|(
name|result
operator|.
name|getGeneralPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|enable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|enable (final boolean on)
specifier|private
name|void
name|enable
parameter_list|(
specifier|final
name|boolean
name|on
parameter_list|)
block|{
name|showSiteHeader
operator|.
name|setEnabled
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|useFlashClipboard
operator|.
name|setEnabled
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|defaultContext
operator|.
name|setEnabled
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
DECL|method|display (final AccountGeneralPreferences p)
specifier|private
name|void
name|display
parameter_list|(
specifier|final
name|AccountGeneralPreferences
name|p
parameter_list|)
block|{
name|showSiteHeader
operator|.
name|setValue
argument_list|(
name|p
operator|.
name|isShowSiteHeader
argument_list|()
argument_list|)
expr_stmt|;
name|useFlashClipboard
operator|.
name|setValue
argument_list|(
name|p
operator|.
name|isUseFlashClipboard
argument_list|()
argument_list|)
expr_stmt|;
name|displayDefaultContext
argument_list|(
name|p
operator|.
name|getDefaultContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|displayDefaultContext (final short lines)
specifier|private
name|void
name|displayDefaultContext
parameter_list|(
specifier|final
name|short
name|lines
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|AccountGeneralPreferences
operator|.
name|CONTEXT_CHOICES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|AccountGeneralPreferences
operator|.
name|CONTEXT_CHOICES
index|[
name|i
index|]
operator|==
name|lines
condition|)
block|{
name|defaultContext
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|displayDefaultContext
argument_list|(
name|AccountGeneralPreferences
operator|.
name|DEFAULT_CONTEXT
argument_list|)
expr_stmt|;
block|}
DECL|method|getDefaultContext ()
specifier|private
name|short
name|getDefaultContext
parameter_list|()
block|{
specifier|final
name|int
name|idx
init|=
name|defaultContext
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|idx
condition|)
block|{
return|return
name|Short
operator|.
name|parseShort
argument_list|(
name|defaultContext
operator|.
name|getValue
argument_list|(
name|idx
argument_list|)
argument_list|)
return|;
block|}
return|return
name|AccountGeneralPreferences
operator|.
name|DEFAULT_CONTEXT
return|;
block|}
DECL|method|doSave ()
specifier|private
name|void
name|doSave
parameter_list|()
block|{
specifier|final
name|AccountGeneralPreferences
name|p
init|=
operator|new
name|AccountGeneralPreferences
argument_list|()
decl_stmt|;
name|p
operator|.
name|setShowSiteHeader
argument_list|(
name|showSiteHeader
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setUseFlashClipboard
argument_list|(
name|useFlashClipboard
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setDefaultContext
argument_list|(
name|getDefaultContext
argument_list|()
argument_list|)
expr_stmt|;
name|enable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Util
operator|.
name|ACCOUNT_SVC
operator|.
name|changePreferences
argument_list|(
name|p
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|VoidResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|VoidResult
name|result
parameter_list|)
block|{
name|Gerrit
operator|.
name|getUserAccount
argument_list|()
operator|.
name|setGeneralPreferences
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Gerrit
operator|.
name|applyUserPreferences
argument_list|()
expr_stmt|;
name|enable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
name|enable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

