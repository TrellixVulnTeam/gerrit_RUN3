begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|com.google.gerrit.client.patches
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|TextSaveButtonListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ClickListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasFocus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineLabel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|KeyboardListenerAdapter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextArea
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|client
operator|.
name|VoidResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_class
DECL|class|CommentEditorPanel
class|class
name|CommentEditorPanel
extends|extends
name|Composite
implements|implements
name|ClickListener
block|{
DECL|field|comment
specifier|private
name|PatchLineComment
name|comment
decl_stmt|;
DECL|field|text
specifier|private
specifier|final
name|TextArea
name|text
decl_stmt|;
DECL|field|save
specifier|private
specifier|final
name|Button
name|save
decl_stmt|;
DECL|field|discard
specifier|private
specifier|final
name|Button
name|discard
decl_stmt|;
DECL|field|savedAt
specifier|private
specifier|final
name|Label
name|savedAt
decl_stmt|;
DECL|method|CommentEditorPanel (final PatchLineComment plc)
name|CommentEditorPanel
parameter_list|(
specifier|final
name|PatchLineComment
name|plc
parameter_list|)
block|{
name|comment
operator|=
name|plc
expr_stmt|;
specifier|final
name|FlowPanel
name|body
init|=
operator|new
name|FlowPanel
argument_list|()
decl_stmt|;
name|body
operator|.
name|setStyleName
argument_list|(
literal|"gerrit-CommentEditor"
argument_list|)
expr_stmt|;
name|text
operator|=
operator|new
name|TextArea
argument_list|()
expr_stmt|;
name|text
operator|.
name|setText
argument_list|(
name|comment
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|text
operator|.
name|setCharacterWidth
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|text
operator|.
name|setVisibleLines
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setElementPropertyBoolean
argument_list|(
name|text
operator|.
name|getElement
argument_list|()
argument_list|,
literal|"spellcheck"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|text
operator|.
name|addKeyboardListener
argument_list|(
operator|new
name|KeyboardListenerAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|Widget
name|sender
parameter_list|,
specifier|final
name|char
name|kc
parameter_list|,
specifier|final
name|int
name|mod
parameter_list|)
block|{
name|DOM
operator|.
name|eventCancelBubble
argument_list|(
name|DOM
operator|.
name|eventGetCurrentEvent
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|kc
operator|==
name|KEY_ESCAPE
operator|&&
name|mod
operator|==
literal|0
operator|&&
name|isNew
argument_list|()
condition|)
block|{
name|DOM
operator|.
name|eventPreventDefault
argument_list|(
name|DOM
operator|.
name|eventGetCurrentEvent
argument_list|()
argument_list|)
expr_stmt|;
name|onDiscard
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|(
name|mod
operator|&
name|MODIFIER_CTRL
operator|)
operator|==
name|MODIFIER_CTRL
condition|)
block|{
switch|switch
condition|(
name|kc
condition|)
block|{
case|case
literal|'s'
case|:
name|DOM
operator|.
name|eventPreventDefault
argument_list|(
name|DOM
operator|.
name|eventGetCurrentEvent
argument_list|()
argument_list|)
expr_stmt|;
name|onSave
argument_list|()
expr_stmt|;
return|return;
case|case
literal|'d'
case|:
case|case
name|KEY_BACKSPACE
case|:
case|case
name|KEY_DELETE
case|:
name|DOM
operator|.
name|eventPreventDefault
argument_list|(
name|DOM
operator|.
name|eventGetCurrentEvent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isNew
argument_list|()
condition|)
block|{
name|onDiscard
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Window
operator|.
name|confirm
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|confirmDiscard
argument_list|()
argument_list|)
condition|)
block|{
name|onDiscard
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|text
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|body
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
specifier|final
name|FlowPanel
name|buttons
init|=
operator|new
name|FlowPanel
argument_list|()
decl_stmt|;
name|buttons
operator|.
name|setStyleName
argument_list|(
literal|"gerrit-CommentEditor-Buttons"
argument_list|)
expr_stmt|;
name|body
operator|.
name|add
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
name|save
operator|=
operator|new
name|Button
argument_list|()
expr_stmt|;
name|save
operator|.
name|setText
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|buttonSave
argument_list|()
argument_list|)
expr_stmt|;
name|save
operator|.
name|addClickListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
operator|new
name|TextSaveButtonListener
argument_list|(
name|text
argument_list|,
name|save
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|add
argument_list|(
name|save
argument_list|)
expr_stmt|;
name|discard
operator|=
operator|new
name|Button
argument_list|()
expr_stmt|;
name|discard
operator|.
name|setText
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|buttonDiscard
argument_list|()
argument_list|)
expr_stmt|;
name|discard
operator|.
name|addClickListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|add
argument_list|(
name|discard
argument_list|)
expr_stmt|;
name|savedAt
operator|=
operator|new
name|InlineLabel
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isNew
argument_list|()
condition|)
block|{
name|updateSavedAt
argument_list|()
expr_stmt|;
block|}
name|buttons
operator|.
name|add
argument_list|(
name|savedAt
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
DECL|method|updateSavedAt ()
specifier|private
name|void
name|updateSavedAt
parameter_list|()
block|{
specifier|final
name|Timestamp
name|on
init|=
name|comment
operator|.
name|getWrittenOn
argument_list|()
decl_stmt|;
name|savedAt
operator|.
name|setText
argument_list|(
name|PatchUtil
operator|.
name|M
operator|.
name|draftSaved
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|(
name|on
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setFocus (final boolean take)
name|void
name|setFocus
parameter_list|(
specifier|final
name|boolean
name|take
parameter_list|)
block|{
name|text
operator|.
name|setFocus
argument_list|(
name|take
argument_list|)
expr_stmt|;
block|}
DECL|method|isNew ()
name|boolean
name|isNew
parameter_list|()
block|{
return|return
name|comment
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|null
return|;
block|}
DECL|method|onClick (Widget sender)
specifier|public
name|void
name|onClick
parameter_list|(
name|Widget
name|sender
parameter_list|)
block|{
if|if
condition|(
name|sender
operator|==
name|save
condition|)
block|{
name|onSave
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sender
operator|==
name|discard
condition|)
block|{
name|onDiscard
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|onSave ()
specifier|private
name|void
name|onSave
parameter_list|()
block|{
specifier|final
name|String
name|txt
init|=
name|text
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|txt
argument_list|)
condition|)
block|{
return|return;
block|}
name|comment
operator|.
name|setMessage
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|text
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|discard
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PatchUtil
operator|.
name|DETAIL_SVC
operator|.
name|saveDraft
argument_list|(
name|comment
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|PatchLineComment
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|PatchLineComment
name|result
parameter_list|)
block|{
name|comment
operator|=
name|result
expr_stmt|;
name|text
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|discard
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateSavedAt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
name|text
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|discard
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|onDiscard ()
specifier|private
name|void
name|onDiscard
parameter_list|()
block|{
if|if
condition|(
name|isNew
argument_list|()
condition|)
block|{
name|removeUI
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|final
name|boolean
name|saveOn
init|=
name|save
operator|.
name|isEnabled
argument_list|()
decl_stmt|;
name|text
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|discard
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PatchUtil
operator|.
name|DETAIL_SVC
operator|.
name|deleteDraft
argument_list|(
name|comment
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|VoidResult
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|VoidResult
name|result
parameter_list|)
block|{
name|removeUI
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
name|text
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
name|saveOn
argument_list|)
expr_stmt|;
name|discard
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|removeUI ()
specifier|private
name|void
name|removeUI
parameter_list|()
block|{
specifier|final
name|FlexTable
name|table
init|=
operator|(
name|FlexTable
operator|)
name|getParent
argument_list|()
decl_stmt|;
specifier|final
name|int
name|nRows
init|=
name|table
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|nRows
condition|;
name|row
operator|++
control|)
block|{
specifier|final
name|int
name|nCells
init|=
name|table
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|cell
init|=
literal|0
init|;
name|cell
operator|<
name|nCells
condition|;
name|cell
operator|++
control|)
block|{
if|if
condition|(
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|cell
argument_list|)
operator|==
name|this
condition|)
block|{
name|AbstractPatchContentTable
operator|.
name|destroyEditor
argument_list|(
name|table
argument_list|,
name|row
argument_list|,
name|cell
argument_list|)
expr_stmt|;
name|Widget
name|p
init|=
name|table
decl_stmt|;
while|while
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|HasFocus
condition|)
block|{
operator|(
operator|(
name|HasFocus
operator|)
name|p
operator|)
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
name|p
operator|=
name|p
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

