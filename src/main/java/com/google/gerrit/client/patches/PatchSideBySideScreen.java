begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.patches
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|SideBySidePatchDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NoDifferencesException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|ScreenLoadCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|FancyFlexTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|DisclosurePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RadioButton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SourcesTableEvents
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TableListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtmlBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|client
operator|.
name|RemoteJsonException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|PatchSideBySideScreen
specifier|public
class|class
name|PatchSideBySideScreen
extends|extends
name|PatchScreen
block|{
DECL|field|historyPanel
specifier|private
name|DisclosurePanel
name|historyPanel
decl_stmt|;
DECL|field|historyTable
specifier|private
name|HistoryTable
name|historyTable
decl_stmt|;
DECL|field|sbsPanel
specifier|private
name|FlowPanel
name|sbsPanel
decl_stmt|;
DECL|field|sbsTable
specifier|private
name|SideBySideTable
name|sbsTable
decl_stmt|;
DECL|method|PatchSideBySideScreen (final Patch.Key id)
specifier|public
name|PatchSideBySideScreen
parameter_list|(
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|public
name|void
name|onLoad
parameter_list|()
block|{
if|if
condition|(
name|sbsTable
operator|==
literal|null
condition|)
block|{
name|initUI
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|onLoad
argument_list|()
expr_stmt|;
name|PatchUtil
operator|.
name|DETAIL_SVC
operator|.
name|sideBySidePatchDetail
argument_list|(
name|patchId
argument_list|,
literal|null
argument_list|,
operator|new
name|ScreenLoadCallback
argument_list|<
name|SideBySidePatchDetail
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|preDisplay
parameter_list|(
specifier|final
name|SideBySidePatchDetail
name|r
parameter_list|)
block|{
name|display
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|initUI ()
specifier|private
name|void
name|initUI
parameter_list|()
block|{
name|historyTable
operator|=
operator|new
name|HistoryTable
argument_list|()
expr_stmt|;
name|historyPanel
operator|=
operator|new
name|DisclosurePanel
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|patchHistoryTitle
argument_list|()
argument_list|)
expr_stmt|;
name|historyPanel
operator|.
name|setContent
argument_list|(
name|historyTable
argument_list|)
expr_stmt|;
name|historyPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|historyPanel
argument_list|)
expr_stmt|;
name|sbsPanel
operator|=
operator|new
name|FlowPanel
argument_list|()
expr_stmt|;
name|sbsPanel
operator|.
name|setStyleName
argument_list|(
literal|"gerrit-SideBySideScreen-SideBySideTable"
argument_list|)
expr_stmt|;
name|sbsTable
operator|=
operator|new
name|SideBySideTable
argument_list|()
expr_stmt|;
name|sbsPanel
operator|.
name|add
argument_list|(
name|sbsTable
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|sbsPanel
argument_list|)
expr_stmt|;
block|}
DECL|method|display (final SideBySidePatchDetail detail)
specifier|private
name|void
name|display
parameter_list|(
specifier|final
name|SideBySidePatchDetail
name|detail
parameter_list|)
block|{
name|showSideBySide
argument_list|(
name|detail
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
operator|.
name|getHistory
argument_list|()
operator|!=
literal|null
operator|&&
name|detail
operator|.
name|getHistory
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|historyTable
operator|.
name|display
argument_list|(
name|detail
operator|.
name|getHistory
argument_list|()
argument_list|)
expr_stmt|;
name|historyPanel
operator|.
name|setOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|historyPanel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|historyPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|showSideBySide (final SideBySidePatchDetail r)
specifier|private
name|void
name|showSideBySide
parameter_list|(
specifier|final
name|SideBySidePatchDetail
name|r
parameter_list|)
block|{
name|sbsTable
operator|.
name|setAccountInfoCache
argument_list|(
name|r
operator|.
name|getAccounts
argument_list|()
argument_list|)
expr_stmt|;
name|sbsTable
operator|.
name|display
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|sbsTable
operator|.
name|finishDisplay
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|class|HistoryTable
specifier|private
class|class
name|HistoryTable
extends|extends
name|FancyFlexTable
argument_list|<
name|Patch
argument_list|>
block|{
DECL|field|all
specifier|final
name|List
argument_list|<
name|HistoryRadio
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<
name|HistoryRadio
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|HistoryTable ()
name|HistoryTable
parameter_list|()
block|{
name|table
operator|.
name|addStyleName
argument_list|(
literal|"gerrit-PatchHistoryTable"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addTableListener
argument_list|(
operator|new
name|TableListener
argument_list|()
block|{
specifier|public
name|void
name|onCellClicked
parameter_list|(
name|SourcesTableEvents
name|sender
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|cell
parameter_list|)
block|{
if|if
condition|(
name|row
operator|>
literal|0
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRowItemKey (final Patch item)
specifier|protected
name|Object
name|getRowItemKey
parameter_list|(
specifier|final
name|Patch
name|item
parameter_list|)
block|{
return|return
name|item
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final char keyCode, final int modifiers)
specifier|protected
name|boolean
name|onKeyPress
parameter_list|(
specifier|final
name|char
name|keyCode
parameter_list|,
specifier|final
name|int
name|modifiers
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|onKeyPress
argument_list|(
name|keyCode
argument_list|,
name|modifiers
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|modifiers
operator|==
literal|0
operator|&&
name|getCurrentRow
argument_list|()
operator|>
literal|0
condition|)
block|{
switch|switch
condition|(
name|keyCode
condition|)
block|{
case|case
literal|'o'
case|:
case|case
literal|'l'
case|:
block|{
specifier|final
name|Widget
name|w
init|=
name|table
operator|.
name|getWidget
argument_list|(
name|getCurrentRow
argument_list|()
argument_list|,
name|radioCell
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
block|{
name|fakeClick
argument_list|(
operator|(
name|HistoryRadio
operator|)
name|w
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|'r'
case|:
case|case
literal|'n'
case|:
block|{
specifier|final
name|int
name|fileCnt
init|=
name|sbsTable
operator|.
name|getFileCount
argument_list|()
decl_stmt|;
specifier|final
name|Widget
name|w
init|=
name|table
operator|.
name|getWidget
argument_list|(
name|getCurrentRow
argument_list|()
argument_list|,
name|radioCell
argument_list|(
name|fileCnt
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
block|{
name|fakeClick
argument_list|(
operator|(
name|HistoryRadio
operator|)
name|w
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|fakeClick (final HistoryRadio b)
specifier|private
name|void
name|fakeClick
parameter_list|(
specifier|final
name|HistoryRadio
name|b
parameter_list|)
block|{
if|if
condition|(
operator|!
name|b
operator|.
name|isChecked
argument_list|()
operator|&&
name|b
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|HistoryRadio
name|a
range|:
name|all
control|)
block|{
if|if
condition|(
name|a
operator|.
name|isChecked
argument_list|()
operator|&&
name|a
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|a
operator|.
name|setChecked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|b
operator|.
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|onClick
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onClick (final HistoryRadio b)
specifier|public
name|void
name|onClick
parameter_list|(
specifier|final
name|HistoryRadio
name|b
parameter_list|)
block|{
name|sbsTable
operator|.
name|setVersion
argument_list|(
name|b
operator|.
name|file
argument_list|,
name|b
operator|.
name|patchSetId
argument_list|)
expr_stmt|;
name|boolean
name|diff
init|=
literal|false
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|last
init|=
name|sbsTable
operator|.
name|getVersion
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|sbsTable
operator|.
name|getFileCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|last
operator|.
name|equals
argument_list|(
name|sbsTable
operator|.
name|getVersion
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|diff
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|enable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PatchUtil
operator|.
name|DETAIL_SVC
operator|.
name|sideBySidePatchDetail
argument_list|(
name|patchId
argument_list|,
name|sbsTable
operator|.
name|getVersions
argument_list|()
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|SideBySidePatchDetail
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|SideBySidePatchDetail
name|r
parameter_list|)
block|{
name|enable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sbsPanel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|showSideBySide
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
name|enable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|isNoDifferences
argument_list|(
name|caught
argument_list|)
condition|)
block|{
name|sbsPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|isNoDifferences
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
if|if
condition|(
name|caught
operator|instanceof
name|NoDifferencesException
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|caught
operator|instanceof
name|RemoteJsonException
operator|&&
name|caught
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|NoDifferencesException
operator|.
name|MESSAGE
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|enable (final boolean on)
specifier|private
name|void
name|enable
parameter_list|(
specifier|final
name|boolean
name|on
parameter_list|)
block|{
for|for
control|(
specifier|final
name|HistoryRadio
name|a
range|:
name|all
control|)
block|{
name|a
operator|.
name|setEnabled
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|display (final List<Patch> result)
name|void
name|display
parameter_list|(
specifier|final
name|List
argument_list|<
name|Patch
argument_list|>
name|result
parameter_list|)
block|{
name|all
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|final
name|SafeHtmlBuilder
name|nc
init|=
operator|new
name|SafeHtmlBuilder
argument_list|()
decl_stmt|;
name|appendHeader
argument_list|(
name|nc
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|p
init|=
name|result
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|p
operator|>=
literal|0
condition|;
name|p
operator|--
control|)
block|{
specifier|final
name|Patch
name|k
init|=
name|result
operator|.
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|appendRow
argument_list|(
name|nc
argument_list|,
name|k
argument_list|)
expr_stmt|;
block|}
name|appendRow
argument_list|(
name|nc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|resetHtml
argument_list|(
name|nc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|fileCnt
init|=
name|sbsTable
operator|.
name|getFileCount
argument_list|()
decl_stmt|;
name|int
name|row
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
name|result
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|p
operator|>=
literal|0
condition|;
name|p
operator|--
operator|,
name|row
operator|++
control|)
block|{
specifier|final
name|Patch
name|k
init|=
name|result
operator|.
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|setRowItem
argument_list|(
name|row
argument_list|,
name|k
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|file
init|=
literal|0
init|;
name|file
operator|<
name|fileCnt
condition|;
name|file
operator|++
control|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|psid
init|=
name|k
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
specifier|final
name|HistoryRadio
name|b
init|=
operator|new
name|HistoryRadio
argument_list|(
name|psid
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|b
operator|.
name|setChecked
argument_list|(
name|psid
operator|.
name|equals
argument_list|(
name|sbsTable
operator|.
name|getVersion
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|installRadio
argument_list|(
name|row
argument_list|,
name|file
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|file
init|=
literal|0
init|;
name|file
operator|<
name|fileCnt
operator|-
literal|1
condition|;
name|file
operator|++
control|)
block|{
name|setRowItem
argument_list|(
name|row
argument_list|,
operator|new
name|Patch
argument_list|(
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|PatchSet
operator|.
name|BASE
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|HistoryRadio
name|b
init|=
operator|new
name|HistoryRadio
argument_list|(
name|PatchSet
operator|.
name|BASE
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|b
operator|.
name|setChecked
argument_list|(
name|b
operator|.
name|patchSetId
operator|.
name|equals
argument_list|(
name|sbsTable
operator|.
name|getVersion
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|installRadio
argument_list|(
name|row
argument_list|,
name|file
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|installRadio (final int row, final int file, final HistoryRadio b)
specifier|private
name|void
name|installRadio
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|int
name|file
parameter_list|,
specifier|final
name|HistoryRadio
name|b
parameter_list|)
block|{
specifier|final
name|int
name|cell
init|=
name|radioCell
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|cell
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|table
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
name|cell
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|all
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|radioCell (final int file)
specifier|private
name|int
name|radioCell
parameter_list|(
specifier|final
name|int
name|file
parameter_list|)
block|{
return|return
literal|2
operator|+
name|file
return|;
block|}
DECL|method|appendHeader (final SafeHtmlBuilder m)
specifier|private
name|void
name|appendHeader
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|)
block|{
name|m
operator|.
name|openTr
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|S_ICON_HEADER
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
literal|"LeftMostCell"
argument_list|)
expr_stmt|;
name|m
operator|.
name|nbsp
argument_list|()
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|S_DATA_HEADER
argument_list|)
expr_stmt|;
name|m
operator|.
name|nbsp
argument_list|()
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|file
init|=
literal|0
init|;
name|file
operator|<
name|sbsTable
operator|.
name|getFileCount
argument_list|()
condition|;
name|file
operator|++
control|)
block|{
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|S_DATA_HEADER
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|sbsTable
operator|.
name|getFileTitle
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|S_DATA_HEADER
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|Util
operator|.
name|C
operator|.
name|patchTableColumnComments
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|closeTr
argument_list|()
expr_stmt|;
block|}
DECL|method|appendRow (final SafeHtmlBuilder m, final Patch k)
specifier|private
name|void
name|appendRow
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|,
specifier|final
name|Patch
name|k
parameter_list|)
block|{
name|m
operator|.
name|openTr
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|S_ICON_CELL
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
literal|"LeftMostCell"
argument_list|)
expr_stmt|;
name|m
operator|.
name|nbsp
argument_list|()
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|S_DATA_CELL
argument_list|)
expr_stmt|;
name|m
operator|.
name|setAttribute
argument_list|(
literal|"align"
argument_list|,
literal|"right"
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|!=
literal|null
condition|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|k
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|m
operator|.
name|append
argument_list|(
name|Util
operator|.
name|M
operator|.
name|patchSetHeader
argument_list|(
name|psId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|append
argument_list|(
literal|"Base"
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|file
init|=
literal|0
init|;
name|file
operator|<
name|sbsTable
operator|.
name|getFileCount
argument_list|()
condition|;
name|file
operator|++
control|)
block|{
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|S_DATA_CELL
argument_list|)
expr_stmt|;
name|m
operator|.
name|nbsp
argument_list|()
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|S_DATA_CELL
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|!=
literal|null
operator|&&
name|k
operator|.
name|getCommentCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|m
operator|.
name|append
argument_list|(
name|Util
operator|.
name|M
operator|.
name|patchTableComments
argument_list|(
name|k
operator|.
name|getCommentCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|nbsp
argument_list|()
expr_stmt|;
block|}
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|closeTr
argument_list|()
expr_stmt|;
block|}
DECL|class|HistoryRadio
specifier|private
class|class
name|HistoryRadio
extends|extends
name|RadioButton
block|{
DECL|field|patchSetId
specifier|final
name|PatchSet
operator|.
name|Id
name|patchSetId
decl_stmt|;
DECL|field|file
specifier|final
name|int
name|file
decl_stmt|;
DECL|method|HistoryRadio (final PatchSet.Id ps, final int f)
name|HistoryRadio
parameter_list|(
specifier|final
name|PatchSet
operator|.
name|Id
name|ps
parameter_list|,
specifier|final
name|int
name|f
parameter_list|)
block|{
name|super
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONCLICK
argument_list|)
expr_stmt|;
name|patchSetId
operator|=
name|ps
expr_stmt|;
name|file
operator|=
name|f
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onBrowserEvent (final Event event)
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
specifier|final
name|Event
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONCLICK
case|:
name|onClick
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
default|default:
name|super
operator|.
name|onBrowserEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

