begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.patches
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|FormatUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Link
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|SignOutEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|SignOutHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|PatchTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|PublishCommentScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|AccountInfoCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|PatchScript
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|PatchSetDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|SparseFileContent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|ComplexDisclosurePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|NavigationTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|NeedsSignInKeyCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineLabel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|GlobalKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommandSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|AbstractPatchContentTable
specifier|public
specifier|abstract
class|class
name|AbstractPatchContentTable
extends|extends
name|NavigationTable
argument_list|<
name|Object
argument_list|>
block|{
DECL|field|AGE
specifier|private
specifier|static
specifier|final
name|long
name|AGE
init|=
literal|7
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000L
decl_stmt|;
DECL|field|fileList
specifier|protected
name|PatchTable
name|fileList
decl_stmt|;
DECL|field|accountCache
specifier|protected
name|AccountInfoCache
name|accountCache
init|=
name|AccountInfoCache
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|patchKey
specifier|protected
name|Patch
operator|.
name|Key
name|patchKey
decl_stmt|;
DECL|field|idSideA
specifier|protected
name|PatchSet
operator|.
name|Id
name|idSideA
decl_stmt|;
DECL|field|idSideB
specifier|protected
name|PatchSet
operator|.
name|Id
name|idSideB
decl_stmt|;
DECL|field|onlyOneHunk
specifier|protected
name|boolean
name|onlyOneHunk
decl_stmt|;
DECL|field|aged
specifier|private
specifier|final
name|Timestamp
name|aged
init|=
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|AGE
argument_list|)
decl_stmt|;
DECL|field|keysComment
specifier|private
specifier|final
name|KeyCommandSet
name|keysComment
decl_stmt|;
DECL|field|regComment
specifier|private
name|HandlerRegistration
name|regComment
decl_stmt|;
DECL|field|regSignOut
specifier|private
name|HandlerRegistration
name|regSignOut
decl_stmt|;
DECL|method|AbstractPatchContentTable ()
specifier|protected
name|AbstractPatchContentTable
parameter_list|()
block|{
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|UpToChangeCommand
argument_list|(
literal|0
argument_list|,
literal|'u'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|upToChange
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|PrevKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'k'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|linePrev
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|NextKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'j'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|lineNext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|PrevChunkKeyCmd
argument_list|(
literal|0
argument_list|,
literal|'p'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|chunkPrev
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|NextChunkKeyCmd
argument_list|(
literal|0
argument_list|,
literal|'n'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|chunkNext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|FileListCmd
argument_list|(
literal|0
argument_list|,
literal|'f'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|fileList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|InsertCommentCommand
argument_list|(
literal|0
argument_list|,
literal|'c'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|commentInsert
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|PublishCommentsKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'r'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|keyPublishComments
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// See CommentEditorPanel
comment|//
name|keysComment
operator|=
operator|new
name|KeyCommandSet
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|commentEditorSet
argument_list|()
argument_list|)
expr_stmt|;
name|keysComment
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
name|KeyCommand
operator|.
name|M_CTRL
argument_list|,
literal|'s'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|commentSaveDraft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysComment
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
name|KeyCommand
operator|.
name|M_CTRL
argument_list|,
literal|'d'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|commentDiscard
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysComment
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
name|KeyCodes
operator|.
name|KEY_ESCAPE
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|commentCancelEdit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keysComment
operator|=
literal|null
expr_stmt|;
block|}
name|table
operator|.
name|setStyleName
argument_list|(
literal|"gerrit-PatchContentTable"
argument_list|)
expr_stmt|;
block|}
DECL|method|notifyDraftDelta (final int delta)
name|void
name|notifyDraftDelta
parameter_list|(
specifier|final
name|int
name|delta
parameter_list|)
block|{
if|if
condition|(
name|fileList
operator|!=
literal|null
condition|)
block|{
name|fileList
operator|.
name|notifyDraftDelta
argument_list|(
name|patchKey
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setRegisterKeys (final boolean on)
specifier|public
name|void
name|setRegisterKeys
parameter_list|(
specifier|final
name|boolean
name|on
parameter_list|)
block|{
name|super
operator|.
name|setRegisterKeys
argument_list|(
name|on
argument_list|)
expr_stmt|;
if|if
condition|(
name|on
operator|&&
name|keysComment
operator|!=
literal|null
operator|&&
name|regComment
operator|==
literal|null
condition|)
block|{
name|regComment
operator|=
name|GlobalKey
operator|.
name|add
argument_list|(
name|this
argument_list|,
name|keysComment
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|on
operator|&&
name|regComment
operator|!=
literal|null
condition|)
block|{
name|regComment
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|regComment
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
block|{
name|super
operator|.
name|onLoad
argument_list|()
expr_stmt|;
if|if
condition|(
name|regSignOut
operator|==
literal|null
operator|&&
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|regSignOut
operator|=
name|Gerrit
operator|.
name|addSignOutHandler
argument_list|(
operator|new
name|SignOutHandler
argument_list|()
block|{
specifier|public
name|void
name|onSignOut
parameter_list|(
specifier|final
name|SignOutEvent
name|event
parameter_list|)
block|{
comment|// TODO we should confirm with the user before sign out starts
comment|// that its OK to sign out if any of our editors are unsaved.
comment|// (bug GERRIT-16)
comment|//
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
control|)
block|{
specifier|final
name|int
name|nCells
init|=
name|table
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|int
name|inc
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|cell
init|=
literal|0
init|;
name|cell
operator|<
name|nCells
condition|;
name|cell
operator|++
control|)
block|{
if|if
condition|(
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|cell
argument_list|)
operator|instanceof
name|CommentEditorPanel
condition|)
block|{
name|destroyEditor
argument_list|(
name|table
argument_list|,
name|row
argument_list|,
name|cell
argument_list|)
expr_stmt|;
name|inc
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|row
operator|+=
name|inc
expr_stmt|;
block|}
name|regSignOut
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|regSignOut
operator|=
literal|null
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onUnload ()
specifier|protected
name|void
name|onUnload
parameter_list|()
block|{
if|if
condition|(
name|regSignOut
operator|!=
literal|null
condition|)
block|{
name|regSignOut
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|regSignOut
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|onUnload
argument_list|()
expr_stmt|;
block|}
DECL|method|display (final Patch.Key k, final PatchSet.Id a, final PatchSet.Id b, final PatchScript s)
specifier|public
name|void
name|display
parameter_list|(
specifier|final
name|Patch
operator|.
name|Key
name|k
parameter_list|,
specifier|final
name|PatchSet
operator|.
name|Id
name|a
parameter_list|,
specifier|final
name|PatchSet
operator|.
name|Id
name|b
parameter_list|,
specifier|final
name|PatchScript
name|s
parameter_list|)
block|{
name|patchKey
operator|=
name|k
expr_stmt|;
name|idSideA
operator|=
name|a
expr_stmt|;
name|idSideB
operator|=
name|b
expr_stmt|;
name|render
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|render (PatchScript script)
specifier|protected
specifier|abstract
name|void
name|render
parameter_list|(
name|PatchScript
name|script
parameter_list|)
function_decl|;
DECL|method|onInsertComment (PatchLine pl)
specifier|protected
specifier|abstract
name|void
name|onInsertComment
parameter_list|(
name|PatchLine
name|pl
parameter_list|)
function_decl|;
DECL|method|display (CommentDetail comments)
specifier|public
specifier|abstract
name|void
name|display
parameter_list|(
name|CommentDetail
name|comments
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|createFlexTable ()
specifier|protected
name|MyFlexTable
name|createFlexTable
parameter_list|()
block|{
return|return
operator|new
name|DoubleClickFlexTable
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRowItemKey (final Object item)
specifier|protected
name|Object
name|getRowItemKey
parameter_list|(
specifier|final
name|Object
name|item
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|initScript (final PatchScript script)
specifier|protected
name|void
name|initScript
parameter_list|(
specifier|final
name|PatchScript
name|script
parameter_list|)
block|{
if|if
condition|(
name|script
operator|.
name|getEdits
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|SparseFileContent
name|a
init|=
name|script
operator|.
name|getA
argument_list|()
decl_stmt|;
specifier|final
name|SparseFileContent
name|b
init|=
name|script
operator|.
name|getB
argument_list|()
decl_stmt|;
name|onlyOneHunk
operator|=
name|a
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|b
operator|.
name|size
argument_list|()
operator|==
literal|0
expr_stmt|;
block|}
else|else
block|{
name|onlyOneHunk
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|method|isChunk (final int row)
specifier|private
name|boolean
name|isChunk
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
specifier|final
name|Object
name|o
init|=
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|onlyOneHunk
operator|&&
name|o
operator|instanceof
name|PatchLine
condition|)
block|{
specifier|final
name|PatchLine
name|pl
init|=
operator|(
name|PatchLine
operator|)
name|o
decl_stmt|;
switch|switch
condition|(
name|pl
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|DELETE
case|:
case|case
name|INSERT
case|:
case|case
name|REPLACE
case|:
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|CommentList
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|findChunkStart (int row)
specifier|private
name|int
name|findChunkStart
parameter_list|(
name|int
name|row
parameter_list|)
block|{
while|while
condition|(
literal|0
operator|<=
name|row
operator|&&
name|isChunk
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|row
operator|--
expr_stmt|;
block|}
return|return
name|row
operator|+
literal|1
return|;
block|}
DECL|method|findChunkEnd (int row)
specifier|private
name|int
name|findChunkEnd
parameter_list|(
name|int
name|row
parameter_list|)
block|{
specifier|final
name|int
name|max
init|=
name|table
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|row
operator|<
name|max
operator|&&
name|isChunk
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|row
operator|++
expr_stmt|;
block|}
return|return
name|row
operator|-
literal|1
return|;
block|}
DECL|method|oneBefore (final int begin)
specifier|private
specifier|static
name|int
name|oneBefore
parameter_list|(
specifier|final
name|int
name|begin
parameter_list|)
block|{
return|return
literal|1
operator|<=
name|begin
condition|?
name|begin
operator|-
literal|1
else|:
name|begin
return|;
block|}
DECL|method|oneAfter (final int end)
specifier|private
name|int
name|oneAfter
parameter_list|(
specifier|final
name|int
name|end
parameter_list|)
block|{
return|return
name|end
operator|+
literal|1
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|?
name|end
operator|+
literal|1
else|:
name|end
return|;
block|}
DECL|method|moveToPrevChunk (int row)
specifier|private
name|void
name|moveToPrevChunk
parameter_list|(
name|int
name|row
parameter_list|)
block|{
while|while
condition|(
literal|0
operator|<=
name|row
operator|&&
name|isChunk
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|row
operator|--
expr_stmt|;
block|}
for|for
control|(
init|;
literal|0
operator|<=
name|row
condition|;
name|row
operator|--
control|)
block|{
if|if
condition|(
name|isChunk
argument_list|(
name|row
argument_list|)
condition|)
block|{
specifier|final
name|int
name|start
init|=
name|findChunkStart
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|movePointerTo
argument_list|(
name|start
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scrollIntoView
argument_list|(
name|oneBefore
argument_list|(
name|start
argument_list|)
argument_list|,
name|oneAfter
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// No prior hunk found? Try to hit the first line in the file.
comment|//
for|for
control|(
name|row
operator|=
literal|0
init|;
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|getRowItem
argument_list|(
name|row
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|moveToNextChunk (int row)
specifier|private
name|void
name|moveToNextChunk
parameter_list|(
name|int
name|row
parameter_list|)
block|{
specifier|final
name|int
name|max
init|=
name|table
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|row
operator|<
name|max
operator|&&
name|isChunk
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|row
operator|++
expr_stmt|;
block|}
for|for
control|(
init|;
name|row
operator|<
name|max
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|isChunk
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scrollIntoView
argument_list|(
name|oneBefore
argument_list|(
name|row
argument_list|)
argument_list|,
name|oneAfter
argument_list|(
name|findChunkEnd
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// No next hunk found? Try to hit the last line in the file.
comment|//
for|for
control|(
name|row
operator|=
name|max
operator|-
literal|1
init|;
name|row
operator|>=
literal|0
condition|;
name|row
operator|--
control|)
block|{
if|if
condition|(
name|getRowItem
argument_list|(
name|row
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/** Invoked when the user clicks on a table cell. */
DECL|method|onCellDoubleClick (int row, int column)
specifier|protected
specifier|abstract
name|void
name|onCellDoubleClick
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
function_decl|;
DECL|method|createCommentEditor (final int suggestRow, final int column, final int line, final short file)
specifier|protected
name|void
name|createCommentEditor
parameter_list|(
specifier|final
name|int
name|suggestRow
parameter_list|,
specifier|final
name|int
name|column
parameter_list|,
specifier|final
name|int
name|line
parameter_list|,
specifier|final
name|short
name|file
parameter_list|)
block|{
name|int
name|row
init|=
name|suggestRow
decl_stmt|;
name|int
name|spans
index|[]
init|=
operator|new
name|int
index|[
name|column
operator|+
literal|1
index|]
decl_stmt|;
name|OUTER
label|:
while|while
condition|(
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|)
block|{
name|int
name|col
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|cell
init|=
literal|0
init|;
name|cell
operator|<
name|table
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|cell
operator|++
control|)
block|{
while|while
condition|(
name|col
operator|<
name|column
operator|&&
literal|0
operator|<
name|spans
index|[
name|col
index|]
condition|)
block|{
name|spans
index|[
name|col
operator|++
index|]
operator|--
expr_stmt|;
block|}
name|spans
index|[
name|col
index|]
operator|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|getRowSpan
argument_list|(
name|row
argument_list|,
name|cell
argument_list|)
expr_stmt|;
if|if
condition|(
name|col
operator|==
name|column
condition|)
block|{
if|if
condition|(
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|cell
argument_list|)
operator|instanceof
name|ComplexDisclosurePanel
condition|)
block|{
name|row
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break
name|OUTER
break|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
operator|&&
name|column
operator|<
name|table
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|&&
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
operator|instanceof
name|CommentEditorPanel
condition|)
block|{
comment|// Don't insert two editors on the same position, it doesn't make
comment|// any sense to the user.
comment|//
operator|(
operator|(
name|CommentEditorPanel
operator|)
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
operator|)
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|Gerrit
operator|.
name|doSignIn
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|final
name|Patch
operator|.
name|Key
name|parentKey
decl_stmt|;
specifier|final
name|short
name|side
decl_stmt|;
switch|switch
condition|(
name|file
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|idSideA
operator|==
literal|null
condition|)
block|{
name|parentKey
operator|=
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|idSideB
argument_list|,
name|patchKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|side
operator|=
operator|(
name|short
operator|)
literal|0
expr_stmt|;
block|}
else|else
block|{
name|parentKey
operator|=
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|idSideA
argument_list|,
name|patchKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|side
operator|=
operator|(
name|short
operator|)
literal|1
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
name|parentKey
operator|=
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|idSideB
argument_list|,
name|patchKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|side
operator|=
operator|(
name|short
operator|)
literal|1
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected file id "
operator|+
name|file
argument_list|)
throw|;
block|}
specifier|final
name|PatchLineComment
name|newComment
init|=
operator|new
name|PatchLineComment
argument_list|(
operator|new
name|PatchLineComment
operator|.
name|Key
argument_list|(
name|parentKey
argument_list|,
literal|null
argument_list|)
argument_list|,
name|line
argument_list|,
name|Gerrit
operator|.
name|getUserAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|newComment
operator|.
name|setSide
argument_list|(
name|side
argument_list|)
expr_stmt|;
name|newComment
operator|.
name|setMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
specifier|final
name|CommentEditorPanel
name|ed
init|=
operator|new
name|CommentEditorPanel
argument_list|(
name|newComment
argument_list|)
decl_stmt|;
name|boolean
name|needInsert
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|cell
init|=
literal|0
init|;
name|cell
operator|<
name|table
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|cell
operator|++
control|)
block|{
specifier|final
name|Widget
name|w
init|=
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|CommentEditorPanel
operator|||
name|w
operator|instanceof
name|ComplexDisclosurePanel
condition|)
block|{
name|needInsert
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|needInsert
condition|)
block|{
name|table
operator|.
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|S_ICON_CELL
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|ed
argument_list|)
expr_stmt|;
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
literal|"Comment"
argument_list|)
expr_stmt|;
name|int
name|span
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
name|row
operator|+
literal|1
init|;
name|r
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
name|boolean
name|hasComment
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|table
operator|.
name|getCellCount
argument_list|(
name|r
argument_list|)
condition|;
name|c
operator|++
control|)
block|{
specifier|final
name|Widget
name|w
init|=
name|table
operator|.
name|getWidget
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|ComplexDisclosurePanel
operator|||
name|w
operator|instanceof
name|CommentEditorPanel
condition|)
block|{
name|hasComment
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|hasComment
condition|)
block|{
name|table
operator|.
name|removeCell
argument_list|(
name|r
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|span
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|span
operator|>
literal|1
condition|)
block|{
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setRowSpan
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|span
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|r
init|=
name|row
operator|-
literal|1
init|;
name|r
operator|>
literal|0
condition|;
name|r
operator|--
control|)
block|{
if|if
condition|(
name|getRowItem
argument_list|(
name|r
argument_list|)
operator|instanceof
name|CommentList
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|getRowItem
argument_list|(
name|r
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|movePointerTo
argument_list|(
name|r
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|ed
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onOpenRow (final int row)
specifier|protected
name|void
name|onOpenRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
specifier|final
name|Object
name|item
init|=
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|instanceof
name|CommentList
condition|)
block|{
for|for
control|(
specifier|final
name|ComplexDisclosurePanel
name|p
range|:
operator|(
operator|(
name|CommentList
operator|)
name|item
operator|)
operator|.
name|panels
control|)
block|{
name|p
operator|.
name|setOpen
argument_list|(
operator|!
name|p
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setAccountInfoCache (final AccountInfoCache aic)
specifier|public
name|void
name|setAccountInfoCache
parameter_list|(
specifier|final
name|AccountInfoCache
name|aic
parameter_list|)
block|{
assert|assert
name|aic
operator|!=
literal|null
assert|;
name|accountCache
operator|=
name|aic
expr_stmt|;
block|}
DECL|method|destroyEditor (final FlexTable table, final int row, final int col)
specifier|static
name|void
name|destroyEditor
parameter_list|(
specifier|final
name|FlexTable
name|table
parameter_list|,
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|int
name|col
parameter_list|)
block|{
name|table
operator|.
name|clearCell
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
specifier|final
name|int
name|span
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|getRowSpan
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
name|boolean
name|removeRow
init|=
literal|true
decl_stmt|;
specifier|final
name|int
name|nCells
init|=
name|table
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|cell
init|=
literal|0
init|;
name|cell
operator|<
name|nCells
condition|;
name|cell
operator|++
control|)
block|{
if|if
condition|(
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|cell
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|removeRow
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|removeRow
condition|)
block|{
for|for
control|(
name|int
name|r
init|=
name|row
operator|-
literal|1
init|;
literal|0
operator|<=
name|r
condition|;
name|r
operator|--
control|)
block|{
name|boolean
name|data
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|table
operator|.
name|getCellCount
argument_list|(
name|r
argument_list|)
condition|;
name|c
operator|++
control|)
block|{
name|data
operator||=
name|table
operator|.
name|getWidget
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
operator|!=
literal|null
expr_stmt|;
specifier|final
name|int
name|s
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|getRowSpan
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|r
operator|+
name|s
operator|==
name|row
condition|)
block|{
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setRowSpan
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|data
condition|)
block|{
break|break;
block|}
block|}
name|table
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|span
operator|!=
literal|1
condition|)
block|{
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setRowSpan
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
name|row
operator|+
literal|1
init|;
name|r
operator|<
name|row
operator|+
name|span
condition|;
name|r
operator|++
control|)
block|{
name|table
operator|.
name|insertCell
argument_list|(
name|r
argument_list|,
name|col
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|bindComment (final int row, final int col, final PatchLineComment line, final boolean isLast)
specifier|protected
name|void
name|bindComment
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|int
name|col
parameter_list|,
specifier|final
name|PatchLineComment
name|line
parameter_list|,
specifier|final
name|boolean
name|isLast
parameter_list|)
block|{
if|if
condition|(
name|line
operator|.
name|getStatus
argument_list|()
operator|==
name|PatchLineComment
operator|.
name|Status
operator|.
name|DRAFT
condition|)
block|{
specifier|final
name|CommentEditorPanel
name|plc
init|=
operator|new
name|CommentEditorPanel
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|plc
argument_list|)
expr_stmt|;
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"Comment"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|LineCommentPanel
name|mp
init|=
operator|new
name|LineCommentPanel
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|String
name|panelHeader
decl_stmt|;
specifier|final
name|ComplexDisclosurePanel
name|panel
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|getAuthor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|panelHeader
operator|=
name|FormatUtil
operator|.
name|nameEmail
argument_list|(
name|accountCache
operator|.
name|get
argument_list|(
name|line
operator|.
name|getAuthor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|panelHeader
operator|=
name|Util
operator|.
name|C
operator|.
name|messageNoAuthor
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isLast
condition|)
block|{
name|mp
operator|.
name|isRecent
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// TODO Instead of opening messages by strict age, do it by "unread"?
name|mp
operator|.
name|isRecent
operator|=
name|line
operator|.
name|getWrittenOn
argument_list|()
operator|.
name|after
argument_list|(
name|aged
argument_list|)
expr_stmt|;
block|}
name|panel
operator|=
operator|new
name|ComplexDisclosurePanel
argument_list|(
name|panelHeader
argument_list|,
name|mp
operator|.
name|isRecent
argument_list|)
expr_stmt|;
name|panel
operator|.
name|getHeader
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|InlineLabel
argument_list|(
name|Util
operator|.
name|M
operator|.
name|messageWrittenOn
argument_list|(
name|FormatUtil
operator|.
name|mediumFormat
argument_list|(
name|line
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|panel
operator|.
name|setContent
argument_list|(
name|mp
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|panel
argument_list|)
expr_stmt|;
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"Comment"
argument_list|)
expr_stmt|;
name|CommentList
name|l
init|=
operator|(
name|CommentList
operator|)
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
block|{
name|l
operator|=
operator|new
name|CommentList
argument_list|()
expr_stmt|;
name|setRowItem
argument_list|(
name|row
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|comments
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|l
operator|.
name|panels
operator|.
name|add
argument_list|(
name|panel
argument_list|)
expr_stmt|;
block|}
DECL|class|CommentList
specifier|protected
specifier|static
class|class
name|CommentList
block|{
DECL|field|comments
specifier|final
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|comments
init|=
operator|new
name|ArrayList
argument_list|<
name|PatchLineComment
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|panels
specifier|final
name|List
argument_list|<
name|ComplexDisclosurePanel
argument_list|>
name|panels
init|=
operator|new
name|ArrayList
argument_list|<
name|ComplexDisclosurePanel
argument_list|>
argument_list|()
decl_stmt|;
block|}
DECL|class|DoubleClickFlexTable
specifier|protected
class|class
name|DoubleClickFlexTable
extends|extends
name|MyFlexTable
block|{
DECL|method|DoubleClickFlexTable ()
specifier|public
name|DoubleClickFlexTable
parameter_list|()
block|{
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONDBLCLICK
operator||
name|Event
operator|.
name|ONCLICK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onBrowserEvent (final Event event)
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
specifier|final
name|Event
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONCLICK
case|:
block|{
comment|// Find out which cell was actually clicked.
specifier|final
name|Element
name|td
init|=
name|getEventTargetCell
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|==
literal|null
condition|)
block|{
break|break;
block|}
specifier|final
name|Element
name|tr
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|td
argument_list|)
decl_stmt|;
specifier|final
name|Element
name|body
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|tr
argument_list|)
decl_stmt|;
specifier|final
name|int
name|row
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|body
argument_list|,
name|tr
argument_list|)
decl_stmt|;
if|if
condition|(
name|getRowItem
argument_list|(
name|row
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
block|}
case|case
name|Event
operator|.
name|ONDBLCLICK
case|:
block|{
comment|// Find out which cell was actually clicked.
name|Element
name|td
init|=
name|getEventTargetCell
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Element
name|tr
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|td
argument_list|)
decl_stmt|;
name|Element
name|body
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|tr
argument_list|)
decl_stmt|;
name|int
name|row
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|body
argument_list|,
name|tr
argument_list|)
decl_stmt|;
name|int
name|column
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|tr
argument_list|,
name|td
argument_list|)
decl_stmt|;
name|onCellDoubleClick
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|super
operator|.
name|onBrowserEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|UpToChangeCommand
specifier|public
class|class
name|UpToChangeCommand
extends|extends
name|KeyCommand
block|{
DECL|method|UpToChangeCommand (int mask, int key, String help)
specifier|public
name|UpToChangeCommand
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
specifier|final
name|Change
operator|.
name|Id
name|ck
init|=
name|patchKey
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
name|Link
operator|.
name|toChange
argument_list|(
name|ck
argument_list|)
argument_list|,
operator|new
name|ChangeScreen
argument_list|(
name|ck
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NoOpKeyCommand
specifier|public
specifier|static
class|class
name|NoOpKeyCommand
extends|extends
name|NeedsSignInKeyCommand
block|{
DECL|method|NoOpKeyCommand (int mask, int key, String help)
specifier|public
name|NoOpKeyCommand
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{     }
block|}
DECL|class|InsertCommentCommand
specifier|public
class|class
name|InsertCommentCommand
extends|extends
name|NeedsSignInKeyCommand
block|{
DECL|method|InsertCommentCommand (int mask, int key, String help)
specifier|public
name|InsertCommentCommand
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|ensurePointerVisible
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
name|getCurrentRow
argument_list|()
init|;
literal|0
operator|<=
name|row
condition|;
name|row
operator|--
control|)
block|{
specifier|final
name|Object
name|item
init|=
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|instanceof
name|PatchLine
condition|)
block|{
name|onInsertComment
argument_list|(
operator|(
name|PatchLine
operator|)
name|item
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|item
operator|instanceof
name|CommentList
condition|)
block|{
continue|continue;
block|}
else|else
block|{
return|return;
block|}
block|}
block|}
block|}
DECL|class|PublishCommentsKeyCommand
specifier|public
class|class
name|PublishCommentsKeyCommand
extends|extends
name|NeedsSignInKeyCommand
block|{
DECL|method|PublishCommentsKeyCommand (int mask, char key, String help)
specifier|public
name|PublishCommentsKeyCommand
parameter_list|(
name|int
name|mask
parameter_list|,
name|char
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|id
init|=
name|patchKey
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
literal|"change,publish,"
operator|+
name|id
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|PublishCommentScreen
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|PrevChunkKeyCmd
specifier|public
class|class
name|PrevChunkKeyCmd
extends|extends
name|KeyCommand
block|{
DECL|method|PrevChunkKeyCmd (int mask, int key, String help)
specifier|public
name|PrevChunkKeyCmd
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|ensurePointerVisible
argument_list|()
expr_stmt|;
name|moveToPrevChunk
argument_list|(
name|getCurrentRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NextChunkKeyCmd
specifier|public
class|class
name|NextChunkKeyCmd
extends|extends
name|KeyCommand
block|{
DECL|method|NextChunkKeyCmd (int mask, int key, String help)
specifier|public
name|NextChunkKeyCmd
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|ensurePointerVisible
argument_list|()
expr_stmt|;
name|moveToNextChunk
argument_list|(
name|getCurrentRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FileListCmd
specifier|public
class|class
name|FileListCmd
extends|extends
name|KeyCommand
block|{
DECL|method|FileListCmd (int mask, int key, String help)
specifier|public
name|FileListCmd
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|fileList
operator|==
literal|null
operator|||
name|fileList
operator|.
name|isAttached
argument_list|()
condition|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|psid
init|=
name|patchKey
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|fileList
operator|=
operator|new
name|PatchTable
argument_list|()
expr_stmt|;
name|fileList
operator|.
name|setSavePointerId
argument_list|(
literal|"PatchTable "
operator|+
name|psid
argument_list|)
expr_stmt|;
name|Util
operator|.
name|DETAIL_SVC
operator|.
name|patchSetDetail
argument_list|(
name|psid
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|PatchSetDetail
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|PatchSetDetail
name|result
parameter_list|)
block|{
name|fileList
operator|.
name|display
argument_list|(
name|psid
argument_list|,
name|result
operator|.
name|getPatches
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|final
name|PatchBrowserPopup
name|p
init|=
operator|new
name|PatchBrowserPopup
argument_list|(
name|patchKey
argument_list|,
name|fileList
argument_list|)
decl_stmt|;
name|p
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

