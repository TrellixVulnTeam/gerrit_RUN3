begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.ui
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FocusWidget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBoxBase
import|;
end_import

begin_comment
comment|/** Enables an action (e.g. a Button) if the text box is modified. */
end_comment

begin_class
DECL|class|TextSaveButtonListener
specifier|public
class|class
name|TextSaveButtonListener
implements|implements
name|KeyPressHandler
block|{
DECL|field|descAction
specifier|private
specifier|final
name|FocusWidget
name|descAction
decl_stmt|;
DECL|method|TextSaveButtonListener (final FocusWidget action)
specifier|public
name|TextSaveButtonListener
parameter_list|(
specifier|final
name|FocusWidget
name|action
parameter_list|)
block|{
name|descAction
operator|=
name|action
expr_stmt|;
block|}
DECL|method|TextSaveButtonListener (final TextBoxBase text, final FocusWidget action)
specifier|public
name|TextSaveButtonListener
parameter_list|(
specifier|final
name|TextBoxBase
name|text
parameter_list|,
specifier|final
name|FocusWidget
name|action
parameter_list|)
block|{
name|this
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|text
operator|.
name|addKeyPressHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent e)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|descAction
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
comment|// Do nothing, its already enabled.
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|isControlKeyDown
argument_list|()
operator|||
name|e
operator|.
name|isAltKeyDown
argument_list|()
operator|||
name|e
operator|.
name|isMetaKeyDown
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getCharCode
argument_list|()
condition|)
block|{
case|case
literal|'v'
case|:
case|case
literal|'x'
case|:
name|on
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|e
operator|.
name|getCharCode
argument_list|()
condition|)
block|{
case|case
name|KeyCodes
operator|.
name|KEY_UP
case|:
case|case
name|KeyCodes
operator|.
name|KEY_DOWN
case|:
case|case
name|KeyCodes
operator|.
name|KEY_LEFT
case|:
case|case
name|KeyCodes
operator|.
name|KEY_RIGHT
case|:
case|case
name|KeyCodes
operator|.
name|KEY_HOME
case|:
case|case
name|KeyCodes
operator|.
name|KEY_END
case|:
case|case
name|KeyCodes
operator|.
name|KEY_PAGEUP
case|:
case|case
name|KeyCodes
operator|.
name|KEY_PAGEDOWN
case|:
case|case
name|KeyCodes
operator|.
name|KEY_ALT
case|:
case|case
name|KeyCodes
operator|.
name|KEY_CTRL
case|:
case|case
name|KeyCodes
operator|.
name|KEY_SHIFT
case|:
break|break;
default|default:
name|on
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|on (final KeyPressEvent e)
specifier|private
name|void
name|on
parameter_list|(
specifier|final
name|KeyPressEvent
name|e
parameter_list|)
block|{
name|descAction
operator|.
name|setEnabled
argument_list|(
operator|(
operator|(
name|TextBoxBase
operator|)
name|e
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

