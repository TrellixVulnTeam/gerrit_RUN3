begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.data
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ProjectRight
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Cache of project information, including access rights. */
end_comment

begin_class
DECL|class|ProjectCache
specifier|public
class|class
name|ProjectCache
block|{
DECL|field|byId
specifier|private
specifier|final
name|LinkedHashMap
argument_list|<
name|Project
operator|.
name|Id
argument_list|,
name|Entry
argument_list|>
name|byId
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Project
operator|.
name|Id
argument_list|,
name|Entry
argument_list|>
argument_list|(
literal|16
argument_list|,
literal|0.75f
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Project
operator|.
name|Id
argument_list|,
name|ProjectCache
operator|.
name|Entry
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
literal|1024
operator|<=
name|size
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|byName
specifier|private
specifier|final
name|LinkedHashMap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Entry
argument_list|>
name|byName
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Entry
argument_list|>
argument_list|(
literal|16
argument_list|,
literal|0.75f
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|ProjectCache
operator|.
name|Entry
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
literal|1024
operator|<=
name|size
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/** Get the rights which are applied to all projects in the system. */
DECL|method|getWildcardRights ()
specifier|public
name|Collection
argument_list|<
name|ProjectRight
argument_list|>
name|getWildcardRights
parameter_list|()
block|{
return|return
name|get
argument_list|(
name|ProjectRight
operator|.
name|WILD_PROJECT
argument_list|)
operator|.
name|getRights
argument_list|()
return|;
block|}
comment|/** Invalidate the cached information about the given project. */
DECL|method|invalidate (final Project p)
specifier|public
name|void
name|invalidate
parameter_list|(
specifier|final
name|Project
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|byName
init|)
block|{
name|byName
operator|.
name|remove
argument_list|(
name|p
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|byId
init|)
block|{
name|byId
operator|.
name|remove
argument_list|(
name|p
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Invalidate the cached information about the given project. */
DECL|method|invalidate (final Project.Id projectId)
specifier|public
name|void
name|invalidate
parameter_list|(
specifier|final
name|Project
operator|.
name|Id
name|projectId
parameter_list|)
block|{
if|if
condition|(
name|projectId
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Entry
name|e
decl_stmt|;
synchronized|synchronized
init|(
name|byId
init|)
block|{
name|e
operator|=
name|byId
operator|.
name|remove
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|byName
init|)
block|{
name|byName
operator|.
name|remove
argument_list|(
name|e
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Get the cached data for a project by its unique id.    *     * @param projectId id of the project.    * @return the cached data; null if no such project exists.    */
DECL|method|get (final Project.Id projectId)
specifier|public
name|Entry
name|get
parameter_list|(
specifier|final
name|Project
operator|.
name|Id
name|projectId
parameter_list|)
block|{
if|if
condition|(
name|projectId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Entry
name|m
decl_stmt|;
synchronized|synchronized
init|(
name|byId
init|)
block|{
name|m
operator|=
name|byId
operator|.
name|get
argument_list|(
name|projectId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
return|return
name|m
return|;
block|}
try|try
block|{
specifier|final
name|ReviewDb
name|db
init|=
name|Common
operator|.
name|getSchemaFactory
argument_list|()
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Project
name|p
init|=
name|db
operator|.
name|projects
argument_list|()
operator|.
name|get
argument_list|(
name|projectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|m
operator|=
operator|new
name|Entry
argument_list|(
name|db
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
synchronized|synchronized
init|(
name|byName
init|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|m
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|byId
init|)
block|{
name|byId
operator|.
name|put
argument_list|(
name|m
operator|.
name|getProject
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
comment|/**    * Get the cached data for a project by its unique name.    *     * @param projectName name of the project.    * @return the cached data; null if no such project exists.    */
DECL|method|get (final Project.NameKey projectName)
specifier|public
name|Entry
name|get
parameter_list|(
specifier|final
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|)
block|{
if|if
condition|(
name|projectName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Entry
name|m
decl_stmt|;
synchronized|synchronized
init|(
name|byName
init|)
block|{
name|m
operator|=
name|byName
operator|.
name|get
argument_list|(
name|projectName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
return|return
name|m
return|;
block|}
try|try
block|{
specifier|final
name|ReviewDb
name|db
init|=
name|Common
operator|.
name|getSchemaFactory
argument_list|()
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Project
name|p
init|=
name|db
operator|.
name|projects
argument_list|()
operator|.
name|get
argument_list|(
name|projectName
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|m
operator|=
operator|new
name|Entry
argument_list|(
name|db
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
synchronized|synchronized
init|(
name|byName
init|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|m
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|byId
init|)
block|{
name|byId
operator|.
name|put
argument_list|(
name|m
operator|.
name|getProject
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
comment|/** Force the entire cache to flush from memory and recompute. */
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{
synchronized|synchronized
init|(
name|byId
init|)
block|{
name|byId
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|byName
init|)
block|{
name|byName
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Cached information on a project. */
DECL|class|Entry
specifier|public
specifier|static
class|class
name|Entry
block|{
DECL|field|project
specifier|private
specifier|final
name|Project
name|project
decl_stmt|;
DECL|field|rights
specifier|private
specifier|final
name|Collection
argument_list|<
name|ProjectRight
argument_list|>
name|rights
decl_stmt|;
DECL|method|Entry (final ReviewDb db, final Project p)
specifier|protected
name|Entry
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|Project
name|p
parameter_list|)
throws|throws
name|OrmException
block|{
name|project
operator|=
name|p
expr_stmt|;
name|rights
operator|=
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|db
operator|.
name|projectRights
argument_list|()
operator|.
name|byProject
argument_list|(
name|project
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getProject ()
specifier|public
name|Project
name|getProject
parameter_list|()
block|{
return|return
name|project
return|;
block|}
DECL|method|getRights ()
specifier|public
name|Collection
argument_list|<
name|ProjectRight
argument_list|>
name|getRights
parameter_list|()
block|{
return|return
name|rights
return|;
block|}
block|}
block|}
end_class

end_unit

