begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.data
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|SparseFileContent
specifier|public
class|class
name|SparseFileContent
block|{
DECL|field|ranges
specifier|protected
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
decl_stmt|;
DECL|field|size
specifier|protected
name|int
name|size
decl_stmt|;
DECL|field|missingNewlineAtEnd
specifier|protected
name|boolean
name|missingNewlineAtEnd
decl_stmt|;
DECL|field|lastGetRange
specifier|private
specifier|transient
name|int
name|lastGetRange
decl_stmt|;
DECL|method|SparseFileContent ()
specifier|public
name|SparseFileContent
parameter_list|()
block|{
name|ranges
operator|=
operator|new
name|ArrayList
argument_list|<
name|Range
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|setSize (final int s)
specifier|public
name|void
name|setSize
parameter_list|(
specifier|final
name|int
name|s
parameter_list|)
block|{
name|size
operator|=
name|s
expr_stmt|;
block|}
DECL|method|isMissingNewlineAtEnd ()
specifier|public
name|boolean
name|isMissingNewlineAtEnd
parameter_list|()
block|{
return|return
name|missingNewlineAtEnd
return|;
block|}
DECL|method|setMissingNewlineAtEnd (final boolean missing)
specifier|public
name|void
name|setMissingNewlineAtEnd
parameter_list|(
specifier|final
name|boolean
name|missing
parameter_list|)
block|{
name|missingNewlineAtEnd
operator|=
name|missing
expr_stmt|;
block|}
DECL|method|get (final int idx)
specifier|public
name|String
name|get
parameter_list|(
specifier|final
name|int
name|idx
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|lastGetRange
init|;
name|i
operator|<
name|ranges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Range
name|r
init|=
name|ranges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|lastGetRange
operator|=
name|i
expr_stmt|;
return|return
name|r
operator|.
name|get
argument_list|(
name|idx
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|lastGetRange
operator|!=
literal|0
condition|)
block|{
name|lastGetRange
operator|=
literal|0
expr_stmt|;
return|return
name|get
argument_list|(
name|idx
argument_list|)
return|;
block|}
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
name|idx
argument_list|)
throw|;
block|}
DECL|method|addLine (final int i, final String content)
specifier|public
name|void
name|addLine
parameter_list|(
specifier|final
name|int
name|i
parameter_list|,
specifier|final
name|String
name|content
parameter_list|)
block|{
specifier|final
name|Range
name|r
decl_stmt|;
if|if
condition|(
operator|!
name|ranges
operator|.
name|isEmpty
argument_list|()
operator|&&
name|i
operator|==
name|last
argument_list|()
operator|.
name|end
argument_list|()
condition|)
block|{
name|r
operator|=
name|last
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
operator|new
name|Range
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|ranges
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|lines
operator|.
name|add
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
DECL|method|last ()
specifier|private
name|Range
name|last
parameter_list|()
block|{
return|return
name|ranges
operator|.
name|get
argument_list|(
name|ranges
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|class|Range
specifier|static
class|class
name|Range
block|{
DECL|field|base
specifier|protected
name|int
name|base
decl_stmt|;
DECL|field|lines
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|lines
decl_stmt|;
DECL|method|Range (final int b)
specifier|private
name|Range
parameter_list|(
specifier|final
name|int
name|b
parameter_list|)
block|{
name|base
operator|=
name|b
expr_stmt|;
name|lines
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|Range ()
specifier|protected
name|Range
parameter_list|()
block|{     }
DECL|method|get (final int i)
specifier|private
name|String
name|get
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
block|{
return|return
name|lines
operator|.
name|get
argument_list|(
name|i
operator|-
name|base
argument_list|)
return|;
block|}
DECL|method|end ()
specifier|private
name|int
name|end
parameter_list|()
block|{
return|return
name|base
operator|+
name|lines
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|contains (final int i)
specifier|private
name|boolean
name|contains
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
block|{
return|return
name|base
operator|<=
name|i
operator|&&
name|i
operator|<
name|end
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

