begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.data
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** Cache of account information. */
end_comment

begin_class
DECL|class|AccountCache
specifier|public
class|class
name|AccountCache
block|{
DECL|field|byId
specifier|private
specifier|final
name|LinkedHashMap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|Account
argument_list|>
name|byId
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|Account
argument_list|>
argument_list|(
literal|16
argument_list|,
literal|0.75f
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|Account
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
literal|4096
operator|<=
name|size
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Invalidate all cached information about a single user account.    *     * @param accountId the account to invalidate from the cache.    */
DECL|method|invalidate (final Account.Id accountId)
specifier|public
name|void
name|invalidate
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|byId
init|)
block|{
name|byId
operator|.
name|remove
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get a single account.    *     * @param accountId the account to obtain.    * @return the cached account entity; null if the account is not in the    *         database anymore.    */
DECL|method|get (final Account.Id accountId)
specifier|public
name|Account
name|get
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|accountId
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Get a single account.    *     * @param accountId the account to obtain.    * @param qd optional connection to reuse (if not null) when doing a lookup.    * @return the cached account entity; null if the account is not in the    *         database anymore.    */
DECL|method|get (final Account.Id accountId, final ReviewDb qd)
specifier|public
name|Account
name|get
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
specifier|final
name|ReviewDb
name|qd
parameter_list|)
block|{
if|if
condition|(
name|accountId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Account
name|m
decl_stmt|;
synchronized|synchronized
init|(
name|byId
init|)
block|{
name|m
operator|=
name|byId
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
return|return
name|m
return|;
block|}
try|try
block|{
specifier|final
name|ReviewDb
name|db
init|=
name|qd
operator|!=
literal|null
condition|?
name|qd
else|:
name|Common
operator|.
name|getSchemaFactory
argument_list|()
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
name|m
operator|=
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|qd
operator|==
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|m
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|byId
init|)
block|{
name|byId
operator|.
name|put
argument_list|(
name|m
operator|.
name|getId
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|m
return|;
block|}
comment|/**    * Lookup multiple account records.    *     * @param fetch set of all accounts to obtain.    * @param qd optional query handle to use if the account data is not in cache.    * @return records which match; if an account listed in<code>fetch</code> is    *         not found it will not be returned.    */
DECL|method|get (final Set<Account.Id> fetch, final ReviewDb qd)
specifier|public
name|Collection
argument_list|<
name|Account
argument_list|>
name|get
parameter_list|(
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|fetch
parameter_list|,
specifier|final
name|ReviewDb
name|qd
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|toget
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|(
name|fetch
argument_list|)
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|Account
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|Account
argument_list|>
argument_list|(
name|toget
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|byId
init|)
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|i
init|=
name|toget
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Account
name|m
init|=
name|byId
operator|.
name|get
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|toget
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Account
argument_list|>
name|found
decl_stmt|;
try|try
block|{
specifier|final
name|ReviewDb
name|db
init|=
name|qd
operator|!=
literal|null
condition|?
name|qd
else|:
name|Common
operator|.
name|getSchemaFactory
argument_list|()
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
name|found
operator|=
name|qd
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|toget
argument_list|)
operator|.
name|toList
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|qd
operator|==
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|found
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|found
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|byId
init|)
block|{
for|for
control|(
specifier|final
name|Account
name|a
range|:
name|found
control|)
block|{
name|byId
operator|.
name|put
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|addAll
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
comment|/** Force the entire cache to flush from memory and recompute. */
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{
synchronized|synchronized
init|(
name|byId
init|)
block|{
name|byId
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

