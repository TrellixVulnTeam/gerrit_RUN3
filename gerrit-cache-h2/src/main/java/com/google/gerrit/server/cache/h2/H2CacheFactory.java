begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.cache.h2
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|h2
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|events
operator|.
name|LifecycleListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|CacheBinding
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|PersistentCacheFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|h2
operator|.
name|H2CacheImpl
operator|.
name|SqlStore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|h2
operator|.
name|H2CacheImpl
operator|.
name|ValueHolder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|H2CacheFactory
class|class
name|H2CacheFactory
implements|implements
name|PersistentCacheFactory
implements|,
name|LifecycleListener
block|{
DECL|field|log
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|H2CacheFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|defaultFactory
specifier|private
specifier|final
name|DefaultCacheFactory
name|defaultFactory
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|Config
name|config
decl_stmt|;
DECL|field|cacheDir
specifier|private
specifier|final
name|File
name|cacheDir
decl_stmt|;
DECL|field|caches
specifier|private
specifier|final
name|List
argument_list|<
name|H2CacheImpl
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|caches
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|ExecutorService
name|executor
decl_stmt|;
DECL|field|cleanup
specifier|private
specifier|final
name|ScheduledExecutorService
name|cleanup
decl_stmt|;
DECL|field|started
specifier|private
specifier|volatile
name|boolean
name|started
decl_stmt|;
annotation|@
name|Inject
DECL|method|H2CacheFactory ( DefaultCacheFactory defaultCacheFactory, @GerritServerConfig Config cfg, SitePaths site)
name|H2CacheFactory
parameter_list|(
name|DefaultCacheFactory
name|defaultCacheFactory
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|SitePaths
name|site
parameter_list|)
block|{
name|defaultFactory
operator|=
name|defaultCacheFactory
expr_stmt|;
name|config
operator|=
name|cfg
expr_stmt|;
name|File
name|loc
init|=
name|site
operator|.
name|resolve
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
literal|"cache"
argument_list|,
literal|null
argument_list|,
literal|"directory"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|==
literal|null
condition|)
block|{
name|cacheDir
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|loc
operator|.
name|exists
argument_list|()
operator|||
name|loc
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
if|if
condition|(
name|loc
operator|.
name|canWrite
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Enabling disk cache "
operator|+
name|loc
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|cacheDir
operator|=
name|loc
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Can't write to disk cache: "
operator|+
name|loc
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|cacheDir
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Can't create disk cache: "
operator|+
name|loc
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|cacheDir
operator|=
literal|null
expr_stmt|;
block|}
name|caches
operator|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
expr_stmt|;
if|if
condition|(
name|cacheDir
operator|!=
literal|null
condition|)
block|{
name|executor
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"DiskCache-Store-%d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|cleanup
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"DiskCache-Prune-%d"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|executor
operator|=
literal|null
expr_stmt|;
name|cleanup
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|started
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|H2CacheImpl
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|cache
range|:
name|caches
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cache
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cleanup
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cache
operator|.
name|prune
argument_list|(
name|cleanup
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|cleanup
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Runnable
argument_list|>
name|pending
init|=
name|executor
operator|.
name|shutdownNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
condition|)
block|{
if|if
condition|(
name|pending
operator|!=
literal|null
operator|&&
operator|!
name|pending
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Finishing %d disk cache updates"
argument_list|,
name|pending
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Runnable
name|update
range|:
name|pending
control|)
block|{
name|update
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Timeout waiting for disk cache to close"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Interrupted waiting for disk cache to shutdown"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|H2CacheImpl
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|cache
range|:
name|caches
control|)
block|{
name|cache
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"cast"
block|}
argument_list|)
annotation|@
name|Override
DECL|method|build (CacheBinding<K, V> def)
specifier|public
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|build
parameter_list|(
name|CacheBinding
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|def
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|started
argument_list|,
literal|"cache must be built before start"
argument_list|)
expr_stmt|;
name|long
name|limit
init|=
name|config
operator|.
name|getLong
argument_list|(
literal|"cache"
argument_list|,
name|def
operator|.
name|name
argument_list|()
argument_list|,
literal|"diskLimit"
argument_list|,
literal|128
operator|<<
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheDir
operator|==
literal|null
operator|||
name|limit
operator|<=
literal|0
condition|)
block|{
return|return
name|defaultFactory
operator|.
name|build
argument_list|(
name|def
argument_list|)
return|;
block|}
name|SqlStore
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|store
init|=
name|newSqlStore
argument_list|(
name|def
operator|.
name|name
argument_list|()
argument_list|,
name|def
operator|.
name|keyType
argument_list|()
argument_list|,
name|limit
argument_list|)
decl_stmt|;
name|H2CacheImpl
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
init|=
operator|new
name|H2CacheImpl
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|executor
argument_list|,
name|store
argument_list|,
name|def
operator|.
name|keyType
argument_list|()
argument_list|,
operator|(
name|Cache
argument_list|<
name|K
argument_list|,
name|ValueHolder
argument_list|<
name|V
argument_list|>
argument_list|>
operator|)
name|defaultFactory
operator|.
name|create
argument_list|(
name|def
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|caches
operator|.
name|add
argument_list|(
name|cache
argument_list|)
expr_stmt|;
return|return
name|cache
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|build ( CacheBinding<K, V> def, CacheLoader<K, V> loader)
specifier|public
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|LoadingCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|build
parameter_list|(
name|CacheBinding
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|def
parameter_list|,
name|CacheLoader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|loader
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|started
argument_list|,
literal|"cache must be built before start"
argument_list|)
expr_stmt|;
name|long
name|limit
init|=
name|config
operator|.
name|getLong
argument_list|(
literal|"cache"
argument_list|,
name|def
operator|.
name|name
argument_list|()
argument_list|,
literal|"diskLimit"
argument_list|,
literal|128
operator|<<
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheDir
operator|==
literal|null
operator|||
name|limit
operator|<=
literal|0
condition|)
block|{
return|return
name|defaultFactory
operator|.
name|build
argument_list|(
name|def
argument_list|,
name|loader
argument_list|)
return|;
block|}
name|SqlStore
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|store
init|=
name|newSqlStore
argument_list|(
name|def
operator|.
name|name
argument_list|()
argument_list|,
name|def
operator|.
name|keyType
argument_list|()
argument_list|,
name|limit
argument_list|)
decl_stmt|;
name|Cache
argument_list|<
name|K
argument_list|,
name|ValueHolder
argument_list|<
name|V
argument_list|>
argument_list|>
name|mem
init|=
operator|(
name|Cache
argument_list|<
name|K
argument_list|,
name|ValueHolder
argument_list|<
name|V
argument_list|>
argument_list|>
operator|)
name|defaultFactory
operator|.
name|create
argument_list|(
name|def
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|(
operator|(
name|CacheLoader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
operator|new
name|H2CacheImpl
operator|.
name|Loader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|executor
argument_list|,
name|store
argument_list|,
name|loader
argument_list|)
argument_list|)
decl_stmt|;
name|H2CacheImpl
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
init|=
operator|new
name|H2CacheImpl
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|executor
argument_list|,
name|store
argument_list|,
name|def
operator|.
name|keyType
argument_list|()
argument_list|,
name|mem
argument_list|)
decl_stmt|;
name|caches
operator|.
name|add
argument_list|(
name|cache
argument_list|)
expr_stmt|;
return|return
name|cache
return|;
block|}
DECL|method|newSqlStore ( String name, TypeLiteral<K> keyType, long maxSize)
specifier|private
parameter_list|<
name|V
parameter_list|,
name|K
parameter_list|>
name|SqlStore
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newSqlStore
parameter_list|(
name|String
name|name
parameter_list|,
name|TypeLiteral
argument_list|<
name|K
argument_list|>
name|keyType
parameter_list|,
name|long
name|maxSize
parameter_list|)
block|{
name|File
name|db
init|=
operator|new
name|File
argument_list|(
name|cacheDir
argument_list|,
name|name
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|String
name|url
init|=
literal|"jdbc:h2:"
operator|+
name|db
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|new
name|SqlStore
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|url
argument_list|,
name|keyType
argument_list|,
name|maxSize
argument_list|)
return|;
block|}
block|}
end_class

end_unit

