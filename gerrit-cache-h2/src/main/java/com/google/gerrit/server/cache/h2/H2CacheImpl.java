begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2012 Google Inc. All Rights Reserved.
end_comment

begin_package
DECL|package|com.google.gerrit.server.cache.h2
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|h2
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|AbstractLoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|BloomFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Funnel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Funnels
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|PrimitiveSink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|jdbc
operator|.
name|JdbcSQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InvalidClassException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  * Hybrid in-memory and database backed cache built on H2.  *<p>  * This cache can be used as either a recall cache, or a loading cache if a  * CacheLoader was supplied to its constructor at build time. Before creating an  * entry the in-memory cache is checked for the item, then the database is  * checked, and finally the CacheLoader is used to construct the item. This is  * mostly useful for CacheLoaders that are computationally intensive, such as  * the PatchListCache.  *<p>  * Cache stores and invalidations are performed on a background thread, hiding  * the latency associated with serializing the key and value pairs and writing  * them to the database log.  *<p>  * A BloomFilter is used around the database to reduce the number of SELECTs  * issued against the database for new cache items that have not been seen  * before, a common operation for the PatchListCache. The BloomFilter is sized  * when the cache starts to be 64,000 entries or double the number of items  * currently in the database table.  *<p>  * This cache does not export its items as a ConcurrentMap.  *  * @see H2CacheFactory  */
end_comment

begin_class
DECL|class|H2CacheImpl
specifier|public
class|class
name|H2CacheImpl
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractLoadingCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|H2CacheImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
DECL|field|store
specifier|private
specifier|final
name|SqlStore
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|store
decl_stmt|;
DECL|field|keyType
specifier|private
specifier|final
name|TypeLiteral
argument_list|<
name|K
argument_list|>
name|keyType
decl_stmt|;
DECL|field|mem
specifier|private
specifier|final
name|Cache
argument_list|<
name|K
argument_list|,
name|ValueHolder
argument_list|<
name|V
argument_list|>
argument_list|>
name|mem
decl_stmt|;
DECL|method|H2CacheImpl (Executor executor, SqlStore<K, V> store, TypeLiteral<K> keyType, Cache<K, ValueHolder<V>> mem)
name|H2CacheImpl
parameter_list|(
name|Executor
name|executor
parameter_list|,
name|SqlStore
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|store
parameter_list|,
name|TypeLiteral
argument_list|<
name|K
argument_list|>
name|keyType
parameter_list|,
name|Cache
argument_list|<
name|K
argument_list|,
name|ValueHolder
argument_list|<
name|V
argument_list|>
argument_list|>
name|mem
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|keyType
operator|=
name|keyType
expr_stmt|;
name|this
operator|.
name|mem
operator|=
name|mem
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getIfPresent (Object objKey)
specifier|public
name|V
name|getIfPresent
parameter_list|(
name|Object
name|objKey
parameter_list|)
block|{
if|if
condition|(
operator|!
name|keyType
operator|.
name|getRawType
argument_list|()
operator|.
name|isInstance
argument_list|(
name|objKey
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|K
name|key
init|=
operator|(
name|K
operator|)
name|objKey
decl_stmt|;
name|ValueHolder
argument_list|<
name|V
argument_list|>
name|h
init|=
name|mem
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
block|{
return|return
name|h
operator|.
name|value
return|;
block|}
if|if
condition|(
name|store
operator|.
name|mightContain
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|h
operator|=
name|store
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
block|{
name|mem
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|h
argument_list|)
expr_stmt|;
return|return
name|h
operator|.
name|value
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|get (K key)
specifier|public
name|V
name|get
parameter_list|(
name|K
name|key
parameter_list|)
throws|throws
name|ExecutionException
block|{
if|if
condition|(
name|mem
operator|instanceof
name|LoadingCache
condition|)
block|{
return|return
operator|(
operator|(
name|LoadingCache
argument_list|<
name|K
argument_list|,
name|ValueHolder
argument_list|<
name|V
argument_list|>
argument_list|>
operator|)
name|mem
operator|)
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|value
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|put (final K key, V val)
specifier|public
name|void
name|put
parameter_list|(
specifier|final
name|K
name|key
parameter_list|,
name|V
name|val
parameter_list|)
block|{
specifier|final
name|ValueHolder
argument_list|<
name|V
argument_list|>
name|h
init|=
operator|new
name|ValueHolder
argument_list|<
name|V
argument_list|>
argument_list|(
name|val
argument_list|)
decl_stmt|;
name|h
operator|.
name|created
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|mem
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|store
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|invalidate (final Object key)
specifier|public
name|void
name|invalidate
parameter_list|(
specifier|final
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|keyType
operator|.
name|getRawType
argument_list|()
operator|.
name|isInstance
argument_list|(
name|key
argument_list|)
operator|&&
name|store
operator|.
name|mightContain
argument_list|(
operator|(
name|K
operator|)
name|key
argument_list|)
condition|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|store
operator|.
name|invalidate
argument_list|(
operator|(
name|K
operator|)
name|key
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|mem
operator|.
name|invalidate
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invalidateAll ()
specifier|public
name|void
name|invalidateAll
parameter_list|()
block|{
name|store
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
name|mem
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|mem
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|stats ()
specifier|public
name|CacheStats
name|stats
parameter_list|()
block|{
return|return
name|mem
operator|.
name|stats
argument_list|()
return|;
block|}
DECL|method|diskStats ()
specifier|public
name|DiskStats
name|diskStats
parameter_list|()
block|{
return|return
name|store
operator|.
name|diskStats
argument_list|()
return|;
block|}
DECL|method|start ()
name|void
name|start
parameter_list|()
block|{
name|store
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
DECL|method|stop ()
name|void
name|stop
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|ValueHolder
argument_list|<
name|V
argument_list|>
argument_list|>
name|e
range|:
name|mem
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ValueHolder
argument_list|<
name|V
argument_list|>
name|h
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|h
operator|.
name|clean
condition|)
block|{
name|store
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
block|}
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|prune (final ScheduledExecutorService service)
name|void
name|prune
parameter_list|(
specifier|final
name|ScheduledExecutorService
name|service
parameter_list|)
block|{
name|store
operator|.
name|prune
argument_list|(
name|mem
argument_list|)
expr_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|01
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|long
name|delay
init|=
name|cal
operator|.
name|getTimeInMillis
argument_list|()
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|service
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|prune
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|delay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
DECL|class|DiskStats
specifier|public
specifier|static
class|class
name|DiskStats
block|{
DECL|field|size
name|long
name|size
decl_stmt|;
DECL|field|space
name|long
name|space
decl_stmt|;
DECL|field|hitCount
name|long
name|hitCount
decl_stmt|;
DECL|field|missCount
name|long
name|missCount
decl_stmt|;
DECL|method|size ()
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|space ()
specifier|public
name|long
name|space
parameter_list|()
block|{
return|return
name|space
return|;
block|}
DECL|method|hitCount ()
specifier|public
name|long
name|hitCount
parameter_list|()
block|{
return|return
name|hitCount
return|;
block|}
DECL|method|requestCount ()
specifier|public
name|long
name|requestCount
parameter_list|()
block|{
return|return
name|hitCount
operator|+
name|missCount
return|;
block|}
block|}
DECL|class|ValueHolder
specifier|static
class|class
name|ValueHolder
parameter_list|<
name|V
parameter_list|>
block|{
DECL|field|value
specifier|final
name|V
name|value
decl_stmt|;
DECL|field|created
name|long
name|created
decl_stmt|;
DECL|field|clean
specifier|volatile
name|boolean
name|clean
decl_stmt|;
DECL|method|ValueHolder (V value)
name|ValueHolder
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
DECL|class|Loader
specifier|static
class|class
name|Loader
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|CacheLoader
argument_list|<
name|K
argument_list|,
name|ValueHolder
argument_list|<
name|V
argument_list|>
argument_list|>
block|{
DECL|field|executor
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
DECL|field|store
specifier|private
specifier|final
name|SqlStore
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|store
decl_stmt|;
DECL|field|loader
specifier|private
specifier|final
name|CacheLoader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|loader
decl_stmt|;
DECL|method|Loader (Executor executor, SqlStore<K, V> store, CacheLoader<K, V> loader)
name|Loader
parameter_list|(
name|Executor
name|executor
parameter_list|,
name|SqlStore
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|store
parameter_list|,
name|CacheLoader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|loader
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load (final K key)
specifier|public
name|ValueHolder
argument_list|<
name|V
argument_list|>
name|load
parameter_list|(
specifier|final
name|K
name|key
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|store
operator|.
name|mightContain
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|ValueHolder
argument_list|<
name|V
argument_list|>
name|h
init|=
name|store
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
block|{
return|return
name|h
return|;
block|}
block|}
specifier|final
name|ValueHolder
argument_list|<
name|V
argument_list|>
name|h
init|=
operator|new
name|ValueHolder
argument_list|<
name|V
argument_list|>
argument_list|(
name|loader
operator|.
name|load
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|h
operator|.
name|created
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|store
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|h
return|;
block|}
block|}
DECL|class|KeyType
specifier|private
specifier|static
class|class
name|KeyType
parameter_list|<
name|K
parameter_list|>
block|{
DECL|method|columnType ()
name|String
name|columnType
parameter_list|()
block|{
return|return
literal|"OTHER"
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|get (ResultSet rs, int col)
name|K
name|get
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|int
name|col
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
operator|(
name|K
operator|)
name|rs
operator|.
name|getObject
argument_list|(
name|col
argument_list|)
return|;
block|}
DECL|method|set (PreparedStatement ps, int col, K value)
name|void
name|set
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|,
name|int
name|col
parameter_list|,
name|K
name|value
parameter_list|)
throws|throws
name|SQLException
block|{
name|ps
operator|.
name|setObject
argument_list|(
name|col
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|funnel ()
name|Funnel
argument_list|<
name|K
argument_list|>
name|funnel
parameter_list|()
block|{
return|return
operator|new
name|Funnel
argument_list|<
name|K
argument_list|>
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|funnel
parameter_list|(
name|K
name|from
parameter_list|,
name|PrimitiveSink
name|into
parameter_list|)
block|{
try|try
block|{
name|ObjectOutputStream
name|ser
init|=
operator|new
name|ObjectOutputStream
argument_list|(
operator|new
name|SinkOutputStream
argument_list|(
name|into
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|ser
operator|.
name|writeObject
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|ser
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|ser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot hash as Serializable"
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|create (TypeLiteral<K> type)
specifier|static
parameter_list|<
name|K
parameter_list|>
name|KeyType
argument_list|<
name|K
argument_list|>
name|create
parameter_list|(
name|TypeLiteral
argument_list|<
name|K
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|getRawType
argument_list|()
operator|==
name|String
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|KeyType
argument_list|<
name|K
argument_list|>
operator|)
name|STRING
return|;
block|}
return|return
operator|(
name|KeyType
argument_list|<
name|K
argument_list|>
operator|)
name|OTHER
return|;
block|}
DECL|field|OTHER
specifier|static
specifier|final
name|KeyType
argument_list|<
name|?
argument_list|>
name|OTHER
init|=
operator|new
name|KeyType
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|STRING
specifier|static
specifier|final
name|KeyType
argument_list|<
name|String
argument_list|>
name|STRING
init|=
operator|new
name|KeyType
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|String
name|columnType
parameter_list|()
block|{
return|return
literal|"VARCHAR(4096)"
return|;
block|}
annotation|@
name|Override
name|String
name|get
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|int
name|col
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|rs
operator|.
name|getString
argument_list|(
name|col
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|,
name|int
name|col
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|SQLException
block|{
name|ps
operator|.
name|setString
argument_list|(
name|col
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
name|Funnel
argument_list|<
name|String
argument_list|>
name|funnel
parameter_list|()
block|{
name|Funnel
argument_list|<
name|?
argument_list|>
name|s
init|=
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
decl_stmt|;
return|return
operator|(
name|Funnel
argument_list|<
name|String
argument_list|>
operator|)
name|s
return|;
block|}
block|}
decl_stmt|;
block|}
DECL|class|SqlStore
specifier|static
class|class
name|SqlStore
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|field|url
specifier|private
specifier|final
name|String
name|url
decl_stmt|;
DECL|field|keyType
specifier|private
specifier|final
name|KeyType
argument_list|<
name|K
argument_list|>
name|keyType
decl_stmt|;
DECL|field|maxSize
specifier|private
specifier|final
name|long
name|maxSize
decl_stmt|;
DECL|field|handles
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|SqlHandle
argument_list|>
name|handles
decl_stmt|;
DECL|field|hitCount
specifier|private
specifier|final
name|AtomicLong
name|hitCount
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|missCount
specifier|private
specifier|final
name|AtomicLong
name|missCount
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|bloomFilter
specifier|private
specifier|volatile
name|BloomFilter
argument_list|<
name|K
argument_list|>
name|bloomFilter
decl_stmt|;
DECL|field|estimatedSize
specifier|private
name|int
name|estimatedSize
decl_stmt|;
DECL|method|SqlStore (String jdbcUrl, TypeLiteral<K> keyType, long maxSize)
name|SqlStore
parameter_list|(
name|String
name|jdbcUrl
parameter_list|,
name|TypeLiteral
argument_list|<
name|K
argument_list|>
name|keyType
parameter_list|,
name|long
name|maxSize
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|jdbcUrl
expr_stmt|;
name|this
operator|.
name|keyType
operator|=
name|KeyType
operator|.
name|create
argument_list|(
name|keyType
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
name|int
name|cores
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
decl_stmt|;
name|int
name|keep
init|=
name|Math
operator|.
name|min
argument_list|(
name|cores
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|this
operator|.
name|handles
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|SqlHandle
argument_list|>
argument_list|(
name|keep
argument_list|)
expr_stmt|;
block|}
DECL|method|open ()
specifier|synchronized
name|void
name|open
parameter_list|()
block|{
if|if
condition|(
name|bloomFilter
operator|==
literal|null
condition|)
block|{
name|bloomFilter
operator|=
name|buildBloomFilter
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|close ()
name|void
name|close
parameter_list|()
block|{
name|SqlHandle
name|h
decl_stmt|;
while|while
condition|(
operator|(
name|h
operator|=
name|handles
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|h
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|mightContain (K key)
name|boolean
name|mightContain
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|BloomFilter
argument_list|<
name|K
argument_list|>
name|b
init|=
name|bloomFilter
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|b
operator|=
name|bloomFilter
expr_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
name|b
operator|=
name|buildBloomFilter
argument_list|()
expr_stmt|;
name|bloomFilter
operator|=
name|b
expr_stmt|;
block|}
block|}
block|}
return|return
name|b
operator|==
literal|null
operator|||
name|b
operator|.
name|mightContain
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|buildBloomFilter ()
specifier|private
name|BloomFilter
argument_list|<
name|K
argument_list|>
name|buildBloomFilter
parameter_list|()
block|{
name|SqlHandle
name|c
init|=
literal|null
decl_stmt|;
try|try
block|{
name|c
operator|=
name|acquire
argument_list|()
expr_stmt|;
name|Statement
name|s
init|=
name|c
operator|.
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|ResultSet
name|r
decl_stmt|;
if|if
condition|(
name|estimatedSize
operator|<=
literal|0
condition|)
block|{
name|r
operator|=
name|s
operator|.
name|executeQuery
argument_list|(
literal|"SELECT COUNT(*) FROM data"
argument_list|)
expr_stmt|;
try|try
block|{
name|estimatedSize
operator|=
name|r
operator|.
name|next
argument_list|()
condition|?
name|r
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
else|:
literal|0
expr_stmt|;
block|}
finally|finally
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|BloomFilter
argument_list|<
name|K
argument_list|>
name|b
init|=
name|newBloomFilter
argument_list|()
decl_stmt|;
name|r
operator|=
name|s
operator|.
name|executeQuery
argument_list|(
literal|"SELECT k FROM data"
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|b
operator|.
name|put
argument_list|(
name|keyType
operator|.
name|get
argument_list|(
name|r
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JdbcSQLException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|InvalidClassException
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Entries cached for "
operator|+
name|url
operator|+
literal|" have an incompatible class and can't be deserialized. "
operator|+
literal|"Cache is flushed."
argument_list|)
expr_stmt|;
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot build BloomFilter for "
operator|+
name|url
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|c
operator|=
name|close
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|release
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getIfPresent (K key)
name|ValueHolder
argument_list|<
name|V
argument_list|>
name|getIfPresent
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|SqlHandle
name|c
init|=
literal|null
decl_stmt|;
try|try
block|{
name|c
operator|=
name|acquire
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|get
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|get
operator|=
name|c
operator|.
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT v FROM data WHERE k=?"
argument_list|)
expr_stmt|;
block|}
name|keyType
operator|.
name|set
argument_list|(
name|c
operator|.
name|get
argument_list|,
literal|1
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|ResultSet
name|r
init|=
name|c
operator|.
name|get
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|missCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|V
name|val
init|=
operator|(
name|V
operator|)
name|r
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ValueHolder
argument_list|<
name|V
argument_list|>
name|h
init|=
operator|new
name|ValueHolder
argument_list|<
name|V
argument_list|>
argument_list|(
name|val
argument_list|)
decl_stmt|;
name|h
operator|.
name|clean
operator|=
literal|true
expr_stmt|;
name|hitCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|touch
argument_list|(
name|c
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
name|h
return|;
block|}
finally|finally
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|c
operator|.
name|get
operator|.
name|clearParameters
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot read cache "
operator|+
name|url
operator|+
literal|" for "
operator|+
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|c
operator|=
name|close
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|release
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|touch (SqlHandle c, K key)
specifier|private
name|void
name|touch
parameter_list|(
name|SqlHandle
name|c
parameter_list|,
name|K
name|key
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|c
operator|.
name|touch
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|touch
operator|=
name|c
operator|.
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"UPDATE data SET accessed=? WHERE k=?"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|c
operator|.
name|touch
operator|.
name|setTimestamp
argument_list|(
literal|1
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keyType
operator|.
name|set
argument_list|(
name|c
operator|.
name|touch
argument_list|,
literal|2
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|c
operator|.
name|touch
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|c
operator|.
name|touch
operator|.
name|clearParameters
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|put (K key, ValueHolder<V> holder)
name|void
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|ValueHolder
argument_list|<
name|V
argument_list|>
name|holder
parameter_list|)
block|{
if|if
condition|(
name|holder
operator|.
name|clean
condition|)
block|{
return|return;
block|}
name|BloomFilter
argument_list|<
name|K
argument_list|>
name|b
init|=
name|bloomFilter
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|put
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|bloomFilter
operator|=
name|b
expr_stmt|;
block|}
name|SqlHandle
name|c
init|=
literal|null
decl_stmt|;
try|try
block|{
name|c
operator|=
name|acquire
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|put
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|put
operator|=
name|c
operator|.
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"MERGE INTO data VALUES(?,?,?,?)"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|keyType
operator|.
name|set
argument_list|(
name|c
operator|.
name|put
argument_list|,
literal|1
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|c
operator|.
name|put
operator|.
name|setObject
argument_list|(
literal|2
argument_list|,
name|holder
operator|.
name|value
argument_list|)
expr_stmt|;
name|c
operator|.
name|put
operator|.
name|setTimestamp
argument_list|(
literal|3
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|holder
operator|.
name|created
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|put
operator|.
name|setTimestamp
argument_list|(
literal|4
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|put
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|holder
operator|.
name|clean
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|c
operator|.
name|put
operator|.
name|clearParameters
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot put into cache "
operator|+
name|url
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|c
operator|=
name|close
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|release
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|invalidate (K key)
name|void
name|invalidate
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|SqlHandle
name|c
init|=
literal|null
decl_stmt|;
try|try
block|{
name|c
operator|=
name|acquire
argument_list|()
expr_stmt|;
name|invalidate
argument_list|(
name|c
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot invalidate cache "
operator|+
name|url
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|c
operator|=
name|close
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|release
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|invalidate (SqlHandle c, K key)
specifier|private
name|void
name|invalidate
parameter_list|(
name|SqlHandle
name|c
parameter_list|,
name|K
name|key
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|c
operator|.
name|invalidate
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|invalidate
operator|=
name|c
operator|.
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"DELETE FROM data WHERE k=?"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|keyType
operator|.
name|set
argument_list|(
name|c
operator|.
name|invalidate
argument_list|,
literal|1
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|c
operator|.
name|invalidate
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|c
operator|.
name|invalidate
operator|.
name|clearParameters
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|invalidateAll ()
name|void
name|invalidateAll
parameter_list|()
block|{
name|SqlHandle
name|c
init|=
literal|null
decl_stmt|;
try|try
block|{
name|c
operator|=
name|acquire
argument_list|()
expr_stmt|;
name|Statement
name|s
init|=
name|c
operator|.
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"DELETE FROM data"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|bloomFilter
operator|=
name|newBloomFilter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot invalidate cache "
operator|+
name|url
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|c
operator|=
name|close
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|release
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prune (Cache<K, ?> mem)
name|void
name|prune
parameter_list|(
name|Cache
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
name|mem
parameter_list|)
block|{
name|SqlHandle
name|c
init|=
literal|null
decl_stmt|;
try|try
block|{
name|c
operator|=
name|acquire
argument_list|()
expr_stmt|;
name|Statement
name|s
init|=
name|c
operator|.
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|used
init|=
literal|0
decl_stmt|;
name|ResultSet
name|r
init|=
name|s
operator|.
name|executeQuery
argument_list|(
literal|"SELECT"
operator|+
literal|" SUM(OCTET_LENGTH(k) + OCTET_LENGTH(v))"
operator|+
literal|" FROM data"
argument_list|)
decl_stmt|;
try|try
block|{
name|used
operator|=
name|r
operator|.
name|next
argument_list|()
condition|?
name|r
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
else|:
literal|0
expr_stmt|;
block|}
finally|finally
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|used
operator|<=
name|maxSize
condition|)
block|{
return|return;
block|}
name|r
operator|=
name|s
operator|.
name|executeQuery
argument_list|(
literal|"SELECT"
operator|+
literal|" k"
operator|+
literal|",OCTET_LENGTH(k) + OCTET_LENGTH(v)"
operator|+
literal|" FROM data"
operator|+
literal|" ORDER BY accessed"
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|maxSize
operator|<
name|used
operator|&&
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|K
name|key
init|=
name|keyType
operator|.
name|get
argument_list|(
name|r
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|mem
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|touch
argument_list|(
name|c
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|invalidate
argument_list|(
name|c
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|used
operator|-=
name|r
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot prune cache "
operator|+
name|url
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|c
operator|=
name|close
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|release
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|diskStats ()
name|DiskStats
name|diskStats
parameter_list|()
block|{
name|DiskStats
name|d
init|=
operator|new
name|DiskStats
argument_list|()
decl_stmt|;
name|d
operator|.
name|hitCount
operator|=
name|hitCount
operator|.
name|get
argument_list|()
expr_stmt|;
name|d
operator|.
name|missCount
operator|=
name|missCount
operator|.
name|get
argument_list|()
expr_stmt|;
name|SqlHandle
name|c
init|=
literal|null
decl_stmt|;
try|try
block|{
name|c
operator|=
name|acquire
argument_list|()
expr_stmt|;
name|Statement
name|s
init|=
name|c
operator|.
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|ResultSet
name|r
init|=
name|s
operator|.
name|executeQuery
argument_list|(
literal|"SELECT"
operator|+
literal|" COUNT(*)"
operator|+
literal|",SUM(OCTET_LENGTH(k) + OCTET_LENGTH(v))"
operator|+
literal|" FROM data"
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|d
operator|.
name|size
operator|=
name|r
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|d
operator|.
name|space
operator|=
name|r
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot get DiskStats for "
operator|+
name|url
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|c
operator|=
name|close
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|release
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|d
return|;
block|}
DECL|method|acquire ()
specifier|private
name|SqlHandle
name|acquire
parameter_list|()
throws|throws
name|SQLException
block|{
name|SqlHandle
name|h
init|=
name|handles
operator|.
name|poll
argument_list|()
decl_stmt|;
return|return
name|h
operator|!=
literal|null
condition|?
name|h
else|:
operator|new
name|SqlHandle
argument_list|(
name|url
argument_list|,
name|keyType
argument_list|)
return|;
block|}
DECL|method|release (SqlHandle h)
specifier|private
name|void
name|release
parameter_list|(
name|SqlHandle
name|h
parameter_list|)
block|{
if|if
condition|(
name|h
operator|!=
literal|null
operator|&&
operator|!
name|handles
operator|.
name|offer
argument_list|(
name|h
argument_list|)
condition|)
block|{
name|h
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|close (SqlHandle h)
specifier|private
name|SqlHandle
name|close
parameter_list|(
name|SqlHandle
name|h
parameter_list|)
block|{
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
block|{
name|h
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|newBloomFilter ()
specifier|private
name|BloomFilter
argument_list|<
name|K
argument_list|>
name|newBloomFilter
parameter_list|()
block|{
name|int
name|cnt
init|=
name|Math
operator|.
name|max
argument_list|(
literal|64
operator|*
literal|1024
argument_list|,
literal|2
operator|*
name|estimatedSize
argument_list|)
decl_stmt|;
return|return
name|BloomFilter
operator|.
name|create
argument_list|(
name|keyType
operator|.
name|funnel
argument_list|()
argument_list|,
name|cnt
argument_list|)
return|;
block|}
block|}
DECL|class|SqlHandle
specifier|static
class|class
name|SqlHandle
block|{
DECL|field|url
specifier|private
specifier|final
name|String
name|url
decl_stmt|;
DECL|field|conn
name|Connection
name|conn
decl_stmt|;
DECL|field|get
name|PreparedStatement
name|get
decl_stmt|;
DECL|field|put
name|PreparedStatement
name|put
decl_stmt|;
DECL|field|touch
name|PreparedStatement
name|touch
decl_stmt|;
DECL|field|invalidate
name|PreparedStatement
name|invalidate
decl_stmt|;
DECL|method|SqlHandle (String url, KeyType<?> type)
name|SqlHandle
parameter_list|(
name|String
name|url
parameter_list|,
name|KeyType
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|conn
operator|=
name|org
operator|.
name|h2
operator|.
name|Driver
operator|.
name|load
argument_list|()
operator|.
name|connect
argument_list|(
name|url
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE IF NOT EXISTS data"
operator|+
literal|"(k "
operator|+
name|type
operator|.
name|columnType
argument_list|()
operator|+
literal|" NOT NULL PRIMARY KEY HASH"
operator|+
literal|",v OTHER NOT NULL"
operator|+
literal|",created TIMESTAMP NOT NULL"
operator|+
literal|",accessed TIMESTAMP NOT NULL"
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|close ()
name|void
name|close
parameter_list|()
block|{
name|get
operator|=
name|closeStatement
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|put
operator|=
name|closeStatement
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|touch
operator|=
name|closeStatement
argument_list|(
name|touch
argument_list|)
expr_stmt|;
name|invalidate
operator|=
name|closeStatement
argument_list|(
name|invalidate
argument_list|)
expr_stmt|;
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot close connection to "
operator|+
name|url
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conn
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|closeStatement (PreparedStatement ps)
specifier|private
name|PreparedStatement
name|closeStatement
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|)
block|{
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot close statement for "
operator|+
name|url
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|class|SinkOutputStream
specifier|private
specifier|static
class|class
name|SinkOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|sink
specifier|private
specifier|final
name|PrimitiveSink
name|sink
decl_stmt|;
DECL|method|SinkOutputStream (PrimitiveSink sink)
name|SinkOutputStream
parameter_list|(
name|PrimitiveSink
name|sink
parameter_list|)
block|{
name|this
operator|.
name|sink
operator|=
name|sink
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
block|{
name|sink
operator|.
name|putByte
argument_list|(
operator|(
name|byte
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] b, int p, int n)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|p
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|sink
operator|.
name|putBytes
argument_list|(
name|b
argument_list|,
name|p
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

