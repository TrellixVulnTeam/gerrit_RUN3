begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gwtexpui.linker.server
package|package
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|linker
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_comment
comment|/**  * Selects a permutation based on the HTTP request.  *<p>  * To use this class the application's GWT module must include our linker by  * inheriting our module:  *  *<pre>  *&lt;inherits name='com.google.gwtexpui.linker.ServerPlannedIFrameLinker'/&gt;  *</pre>  */
end_comment

begin_class
DECL|class|PermutationSelector
specifier|public
class|class
name|PermutationSelector
block|{
DECL|field|moduleName
specifier|private
specifier|final
name|String
name|moduleName
decl_stmt|;
DECL|field|rulesByName
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Rule
argument_list|>
name|rulesByName
decl_stmt|;
DECL|field|ruleOrder
specifier|private
specifier|final
name|List
argument_list|<
name|Rule
argument_list|>
name|ruleOrder
decl_stmt|;
DECL|field|permutations
specifier|private
specifier|final
name|List
argument_list|<
name|Permutation
argument_list|>
name|permutations
decl_stmt|;
DECL|field|css
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|css
decl_stmt|;
comment|/**    * Create an empty selector for a module.    *<p>    * {@link UserAgentRule} rule is automatically registered. Additional custom    * selector rules may be registered before {@link #init(ServletContext)} is    * called to finish the selector setup.    *    * @param moduleName the name of the module within the context.    */
DECL|method|PermutationSelector (final String moduleName)
specifier|public
name|PermutationSelector
parameter_list|(
specifier|final
name|String
name|moduleName
parameter_list|)
block|{
name|this
operator|.
name|moduleName
operator|=
name|moduleName
expr_stmt|;
name|this
operator|.
name|rulesByName
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Rule
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|ruleOrder
operator|=
operator|new
name|ArrayList
argument_list|<
name|Rule
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|permutations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Permutation
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|css
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|register
argument_list|(
operator|new
name|UserAgentRule
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|notInitialized ()
specifier|private
name|void
name|notInitialized
parameter_list|()
block|{
if|if
condition|(
operator|!
name|ruleOrder
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Already initialized"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Register a property selection rule.    *    * @param r the rule implementation.    */
DECL|method|register (Rule r)
specifier|public
name|void
name|register
parameter_list|(
name|Rule
name|r
parameter_list|)
block|{
name|notInitialized
argument_list|()
expr_stmt|;
name|rulesByName
operator|.
name|put
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize the selector by reading the module's {@code permutations} file.    *    * @param ctx context to load the module data from.    * @throws ServletException    * @throws IOException    */
DECL|method|init (ServletContext ctx)
specifier|public
name|void
name|init
parameter_list|(
name|ServletContext
name|ctx
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|notInitialized
argument_list|()
expr_stmt|;
specifier|final
name|String
name|tableName
init|=
literal|"/"
operator|+
name|moduleName
operator|+
literal|"/permutations"
decl_stmt|;
specifier|final
name|InputStream
name|in
init|=
name|ctx
operator|.
name|getResourceAsStream
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"No "
operator|+
name|tableName
operator|+
literal|" in context"
argument_list|)
throw|;
block|}
try|try
block|{
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|String
name|strongName
init|=
name|r
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|strongName
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|strongName
operator|.
name|startsWith
argument_list|(
literal|"css "
argument_list|)
condition|)
block|{
name|css
operator|.
name|add
argument_list|(
name|strongName
operator|.
name|substring
argument_list|(
literal|"css "
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|selections
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|String
name|permutation
init|=
name|r
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|permutation
operator|==
literal|null
operator|||
name|permutation
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
name|int
name|eq
init|=
name|permutation
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|eq
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|tableName
operator|+
literal|" has malformed content"
argument_list|)
throw|;
block|}
name|String
name|k
init|=
name|permutation
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|eq
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|v
init|=
name|permutation
operator|.
name|substring
argument_list|(
name|eq
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Rule
name|rule
init|=
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ruleOrder
operator|.
name|contains
argument_list|(
name|rule
argument_list|)
condition|)
block|{
name|ruleOrder
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|selections
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" has multiple values for "
operator|+
name|k
operator|+
literal|" within permutation "
operator|+
name|strongName
argument_list|)
throw|;
block|}
block|}
name|String
name|cacheHtml
init|=
name|strongName
operator|+
literal|".cache.html"
decl_stmt|;
name|String
index|[]
name|values
init|=
operator|new
name|String
index|[
name|ruleOrder
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|selections
operator|.
name|get
argument_list|(
name|ruleOrder
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|permutations
operator|.
name|add
argument_list|(
operator|new
name|Permutation
argument_list|(
name|this
argument_list|,
name|cacheHtml
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|get (final String name)
specifier|private
name|Rule
name|get
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|Rule
name|r
init|=
name|rulesByName
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|r
operator|=
operator|new
name|ClientSideRule
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
comment|/** @return name of the module (within the application context). */
DECL|method|getModuleName ()
specifier|public
name|String
name|getModuleName
parameter_list|()
block|{
return|return
name|moduleName
return|;
block|}
comment|/** @return all possible permutations */
DECL|method|getPermutations ()
specifier|public
name|List
argument_list|<
name|Permutation
argument_list|>
name|getPermutations
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|permutations
argument_list|)
return|;
block|}
comment|/**    * Select the permutation that best matches the browser request.    *    * @param req current request.    * @return the selected permutation; null if no permutation can be fit to the    *         request and the standard {@code nocache.js} loader must be used.    */
DECL|method|select (HttpServletRequest req)
specifier|public
name|Permutation
name|select
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|values
init|=
operator|new
name|String
index|[
name|ruleOrder
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|value
init|=
name|ruleOrder
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|select
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// If the rule returned null it doesn't know how to compute
comment|// the value for this HTTP request. Since we can't do that
comment|// defer to JavaScript by not picking a permutation.
comment|//
return|return
literal|null
return|;
block|}
name|values
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
for|for
control|(
name|Permutation
name|p
range|:
name|permutations
control|)
block|{
if|if
condition|(
name|p
operator|.
name|matches
argument_list|(
name|values
argument_list|)
condition|)
block|{
return|return
name|p
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getCSS ()
name|Collection
argument_list|<
name|String
argument_list|>
name|getCSS
parameter_list|()
block|{
return|return
name|css
return|;
block|}
block|}
end_class

end_unit

