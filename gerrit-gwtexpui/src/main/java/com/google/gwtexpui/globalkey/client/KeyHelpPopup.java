begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gwtexpui.globalkey.client
package|package
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Anchor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FocusPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Grid
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLTable
operator|.
name|CellFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtml
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtmlBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|KeyHelpPopup
specifier|public
class|class
name|KeyHelpPopup
extends|extends
name|PopupPanel
implements|implements
name|KeyPressHandler
implements|,
name|KeyDownHandler
block|{
DECL|field|focus
specifier|private
specifier|final
name|FocusPanel
name|focus
decl_stmt|;
DECL|method|KeyHelpPopup ()
specifier|public
name|KeyHelpPopup
parameter_list|()
block|{
name|super
argument_list|(
literal|true
comment|/* autohide */
argument_list|,
literal|true
comment|/* modal */
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
name|KeyResources
operator|.
name|I
operator|.
name|css
argument_list|()
operator|.
name|helpPopup
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Anchor
name|closer
init|=
operator|new
name|Anchor
argument_list|(
name|KeyConstants
operator|.
name|I
operator|.
name|closeButton
argument_list|()
argument_list|)
decl_stmt|;
name|closer
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
specifier|final
name|ClickEvent
name|event
parameter_list|)
block|{
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|Grid
name|header
init|=
operator|new
name|Grid
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|header
operator|.
name|setStyleName
argument_list|(
name|KeyResources
operator|.
name|I
operator|.
name|css
argument_list|()
operator|.
name|helpHeader
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|KeyConstants
operator|.
name|I
operator|.
name|keyboardShortcuts
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|closer
argument_list|)
expr_stmt|;
specifier|final
name|CellFormatter
name|fmt
init|=
name|header
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|KeyResources
operator|.
name|I
operator|.
name|css
argument_list|()
operator|.
name|helpHeaderGlue
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setHorizontalAlignment
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
specifier|final
name|Grid
name|lists
init|=
operator|new
name|Grid
argument_list|(
literal|0
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|lists
operator|.
name|setStyleName
argument_list|(
name|KeyResources
operator|.
name|I
operator|.
name|css
argument_list|()
operator|.
name|helpTable
argument_list|()
argument_list|)
expr_stmt|;
name|populate
argument_list|(
name|lists
argument_list|)
expr_stmt|;
name|lists
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
name|KeyResources
operator|.
name|I
operator|.
name|css
argument_list|()
operator|.
name|helpTableGlue
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FlowPanel
name|body
init|=
operator|new
name|FlowPanel
argument_list|()
decl_stmt|;
name|body
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|body
operator|.
name|getElement
argument_list|()
operator|.
name|appendChild
argument_list|(
name|DOM
operator|.
name|createElement
argument_list|(
literal|"hr"
argument_list|)
argument_list|)
expr_stmt|;
name|body
operator|.
name|add
argument_list|(
name|lists
argument_list|)
expr_stmt|;
name|focus
operator|=
operator|new
name|FocusPanel
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|focus
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"outline"
argument_list|,
literal|"0px"
argument_list|)
expr_stmt|;
name|focus
operator|.
name|getElement
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"hideFocus"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|focus
operator|.
name|addKeyPressHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|focus
operator|.
name|addKeyDownHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|focus
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setVisible (final boolean show)
specifier|public
name|void
name|setVisible
parameter_list|(
specifier|final
name|boolean
name|show
parameter_list|)
block|{
name|super
operator|.
name|setVisible
argument_list|(
name|show
argument_list|)
expr_stmt|;
if|if
condition|(
name|show
condition|)
block|{
name|focus
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|KeyCommandSet
operator|.
name|toMask
argument_list|(
name|event
argument_list|)
operator|==
name|ShowHelpCommand
operator|.
name|INSTANCE
operator|.
name|keyMask
condition|)
block|{
comment|// Block the '?' key from triggering us to show right after
comment|// we just hide ourselves.
comment|//
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
name|hide
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyDown (final KeyDownEvent event)
specifier|public
name|void
name|onKeyDown
parameter_list|(
specifier|final
name|KeyDownEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_ESCAPE
condition|)
block|{
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|populate (final Grid lists)
specifier|private
name|void
name|populate
parameter_list|(
specifier|final
name|Grid
name|lists
parameter_list|)
block|{
name|int
index|[]
name|end
init|=
operator|new
name|int
index|[
literal|5
index|]
decl_stmt|;
name|int
name|column
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|KeyCommandSet
name|set
range|:
name|combinedSetsByName
argument_list|()
control|)
block|{
name|int
name|row
init|=
name|end
index|[
name|column
index|]
decl_stmt|;
name|row
operator|=
name|formatGroup
argument_list|(
name|lists
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|set
argument_list|)
expr_stmt|;
name|end
index|[
name|column
index|]
operator|=
name|row
expr_stmt|;
if|if
condition|(
name|column
operator|==
literal|0
condition|)
block|{
name|column
operator|=
literal|4
expr_stmt|;
block|}
else|else
block|{
name|column
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @return an ordered collection of KeyCommandSet, combining sets which share    *         the same name, so that each set name appears at most once.    */
DECL|method|combinedSetsByName ()
specifier|private
specifier|static
name|Collection
argument_list|<
name|KeyCommandSet
argument_list|>
name|combinedSetsByName
parameter_list|()
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|KeyCommandSet
argument_list|>
name|byName
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|KeyCommandSet
name|set
range|:
name|GlobalKey
operator|.
name|active
operator|.
name|all
operator|.
name|getSets
argument_list|()
control|)
block|{
name|KeyCommandSet
name|v
init|=
name|byName
operator|.
name|get
argument_list|(
name|set
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
operator|new
name|KeyCommandSet
argument_list|(
name|set
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|byName
operator|.
name|put
argument_list|(
name|v
operator|.
name|getName
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|v
operator|.
name|add
argument_list|(
name|set
argument_list|)
expr_stmt|;
block|}
return|return
name|byName
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|formatGroup (final Grid lists, int row, final int col, final KeyCommandSet set)
specifier|private
name|int
name|formatGroup
parameter_list|(
specifier|final
name|Grid
name|lists
parameter_list|,
name|int
name|row
parameter_list|,
specifier|final
name|int
name|col
parameter_list|,
specifier|final
name|KeyCommandSet
name|set
parameter_list|)
block|{
if|if
condition|(
name|set
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|row
return|;
block|}
if|if
condition|(
name|lists
operator|.
name|getRowCount
argument_list|()
operator|<
name|row
operator|+
literal|1
condition|)
block|{
name|lists
operator|.
name|resizeRows
argument_list|(
name|row
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|lists
operator|.
name|setText
argument_list|(
name|row
argument_list|,
name|col
operator|+
literal|2
argument_list|,
name|set
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|lists
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|col
operator|+
literal|2
argument_list|,
name|KeyResources
operator|.
name|I
operator|.
name|css
argument_list|()
operator|.
name|helpGroup
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
return|return
name|formatKeys
argument_list|(
name|lists
argument_list|,
name|row
argument_list|,
name|col
argument_list|,
name|set
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|formatKeys (final Grid lists, int row, final int col, final KeyCommandSet set, final SafeHtml prefix)
specifier|private
name|int
name|formatKeys
parameter_list|(
specifier|final
name|Grid
name|lists
parameter_list|,
name|int
name|row
parameter_list|,
specifier|final
name|int
name|col
parameter_list|,
specifier|final
name|KeyCommandSet
name|set
parameter_list|,
specifier|final
name|SafeHtml
name|prefix
parameter_list|)
block|{
specifier|final
name|CellFormatter
name|fmt
init|=
name|lists
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|KeyCommand
argument_list|>
name|keys
init|=
name|sort
argument_list|(
name|set
argument_list|)
decl_stmt|;
if|if
condition|(
name|lists
operator|.
name|getRowCount
argument_list|()
operator|<
name|row
operator|+
name|keys
operator|.
name|size
argument_list|()
condition|)
block|{
name|lists
operator|.
name|resizeRows
argument_list|(
name|row
operator|+
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|KeyCommand
argument_list|,
name|Integer
argument_list|>
name|rows
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|FORMAT_KEYS
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|KeyCommand
name|k
init|=
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|rows
operator|.
name|containsKey
argument_list|(
name|k
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|k
operator|instanceof
name|CompoundKeyCommand
condition|)
block|{
specifier|final
name|SafeHtmlBuilder
name|b
init|=
operator|new
name|SafeHtmlBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|k
operator|.
name|describeKeyStroke
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
name|formatKeys
argument_list|(
name|lists
argument_list|,
name|row
argument_list|,
name|col
argument_list|,
operator|(
operator|(
name|CompoundKeyCommand
operator|)
name|k
operator|)
operator|.
name|getSet
argument_list|()
argument_list|,
name|b
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|int
name|prior
init|=
literal|0
init|;
name|prior
operator|<
name|i
condition|;
name|prior
operator|++
control|)
block|{
if|if
condition|(
name|KeyCommand
operator|.
name|same
argument_list|(
name|keys
operator|.
name|get
argument_list|(
name|prior
argument_list|)
argument_list|,
name|k
argument_list|)
condition|)
block|{
specifier|final
name|int
name|r
init|=
name|rows
operator|.
name|get
argument_list|(
name|keys
operator|.
name|get
argument_list|(
name|prior
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|SafeHtmlBuilder
name|b
init|=
operator|new
name|SafeHtmlBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|SafeHtml
operator|.
name|get
argument_list|(
name|lists
argument_list|,
name|r
argument_list|,
name|col
operator|+
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|KeyConstants
operator|.
name|I
operator|.
name|orOtherKey
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|KeyConstants
operator|.
name|I
operator|.
name|thenOtherKey
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|k
operator|.
name|describeKeyStroke
argument_list|()
argument_list|)
expr_stmt|;
name|SafeHtml
operator|.
name|set
argument_list|(
name|lists
argument_list|,
name|r
argument_list|,
name|col
operator|+
literal|0
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|rows
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|r
argument_list|)
expr_stmt|;
continue|continue
name|FORMAT_KEYS
continue|;
block|}
block|}
name|SafeHtmlBuilder
name|b
init|=
operator|new
name|SafeHtmlBuilder
argument_list|()
decl_stmt|;
name|String
name|t
init|=
name|k
operator|.
name|getHelpText
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|KeyConstants
operator|.
name|I
operator|.
name|thenOtherKey
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|k
operator|.
name|describeKeyStroke
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|.
name|sibling
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|" / "
argument_list|)
operator|.
name|append
argument_list|(
name|k
operator|.
name|sibling
operator|.
name|describeKeyStroke
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|+=
literal|" / "
operator|+
name|k
operator|.
name|sibling
operator|.
name|getHelpText
argument_list|()
expr_stmt|;
name|rows
operator|.
name|put
argument_list|(
name|k
operator|.
name|sibling
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
name|SafeHtml
operator|.
name|set
argument_list|(
name|lists
argument_list|,
name|row
argument_list|,
name|col
operator|+
literal|0
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|lists
operator|.
name|setText
argument_list|(
name|row
argument_list|,
name|col
operator|+
literal|1
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
name|lists
operator|.
name|setText
argument_list|(
name|row
argument_list|,
name|col
operator|+
literal|2
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|rows
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|col
operator|+
literal|0
argument_list|,
name|KeyResources
operator|.
name|I
operator|.
name|css
argument_list|()
operator|.
name|helpKeyStroke
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|col
operator|+
literal|1
argument_list|,
name|KeyResources
operator|.
name|I
operator|.
name|css
argument_list|()
operator|.
name|helpSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
DECL|method|sort (final KeyCommandSet set)
specifier|private
name|List
argument_list|<
name|KeyCommand
argument_list|>
name|sort
parameter_list|(
specifier|final
name|KeyCommandSet
name|set
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|KeyCommand
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|set
operator|.
name|getKeys
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|keys
argument_list|,
operator|new
name|Comparator
argument_list|<
name|KeyCommand
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|KeyCommand
name|arg0
parameter_list|,
name|KeyCommand
name|arg1
parameter_list|)
block|{
return|return
name|arg0
operator|.
name|getHelpText
argument_list|()
operator|.
name|compareTo
argument_list|(
name|arg1
operator|.
name|getHelpText
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|keys
return|;
block|}
block|}
end_class

end_unit

