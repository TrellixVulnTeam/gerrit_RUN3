begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gwtexpui.globalkey.client
package|package
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtml
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtmlBuilder
import|;
end_import

begin_class
DECL|class|KeyCommand
specifier|public
specifier|abstract
class|class
name|KeyCommand
implements|implements
name|KeyPressHandler
block|{
DECL|field|M_CTRL
specifier|public
specifier|static
specifier|final
name|int
name|M_CTRL
init|=
literal|1
operator|<<
literal|16
decl_stmt|;
DECL|field|M_ALT
specifier|public
specifier|static
specifier|final
name|int
name|M_ALT
init|=
literal|2
operator|<<
literal|16
decl_stmt|;
DECL|field|M_META
specifier|public
specifier|static
specifier|final
name|int
name|M_META
init|=
literal|4
operator|<<
literal|16
decl_stmt|;
DECL|method|same (final KeyCommand a, final KeyCommand b)
specifier|public
specifier|static
name|boolean
name|same
parameter_list|(
specifier|final
name|KeyCommand
name|a
parameter_list|,
specifier|final
name|KeyCommand
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|getClass
argument_list|()
operator|==
name|b
operator|.
name|getClass
argument_list|()
operator|&&
name|a
operator|.
name|helpText
operator|.
name|equals
argument_list|(
name|b
operator|.
name|helpText
argument_list|)
return|;
block|}
DECL|field|keyMask
specifier|final
name|int
name|keyMask
decl_stmt|;
DECL|field|helpText
specifier|private
specifier|final
name|String
name|helpText
decl_stmt|;
DECL|method|KeyCommand (final int mask, final int key, final String help)
specifier|public
name|KeyCommand
parameter_list|(
specifier|final
name|int
name|mask
parameter_list|,
specifier|final
name|int
name|key
parameter_list|,
specifier|final
name|String
name|help
parameter_list|)
block|{
name|this
argument_list|(
name|mask
argument_list|,
operator|(
name|char
operator|)
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
DECL|method|KeyCommand (final int mask, final char key, final String help)
specifier|public
name|KeyCommand
parameter_list|(
specifier|final
name|int
name|mask
parameter_list|,
specifier|final
name|char
name|key
parameter_list|,
specifier|final
name|String
name|help
parameter_list|)
block|{
assert|assert
name|help
operator|!=
literal|null
assert|;
name|keyMask
operator|=
name|mask
operator||
name|key
expr_stmt|;
name|helpText
operator|=
name|help
expr_stmt|;
block|}
DECL|method|getHelpText ()
specifier|public
name|String
name|getHelpText
parameter_list|()
block|{
return|return
name|helpText
return|;
block|}
DECL|method|describeKeyStroke ()
name|SafeHtml
name|describeKeyStroke
parameter_list|()
block|{
specifier|final
name|SafeHtmlBuilder
name|b
init|=
operator|new
name|SafeHtmlBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|keyMask
operator|&
name|M_CTRL
operator|)
operator|==
name|M_CTRL
condition|)
block|{
name|modifier
argument_list|(
name|b
argument_list|,
name|KeyConstants
operator|.
name|I
operator|.
name|keyCtrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|keyMask
operator|&
name|M_ALT
operator|)
operator|==
name|M_ALT
condition|)
block|{
name|modifier
argument_list|(
name|b
argument_list|,
name|KeyConstants
operator|.
name|I
operator|.
name|keyAlt
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|keyMask
operator|&
name|M_META
operator|)
operator|==
name|M_META
condition|)
block|{
name|modifier
argument_list|(
name|b
argument_list|,
name|KeyConstants
operator|.
name|I
operator|.
name|keyMeta
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|char
name|c
init|=
call|(
name|char
call|)
argument_list|(
name|keyMask
operator|&
literal|0xffff
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
name|KeyCodes
operator|.
name|KEY_ENTER
case|:
name|namedKey
argument_list|(
name|b
argument_list|,
name|KeyConstants
operator|.
name|I
operator|.
name|keyEnter
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_ESCAPE
case|:
name|namedKey
argument_list|(
name|b
argument_list|,
name|KeyConstants
operator|.
name|I
operator|.
name|keyEsc
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|b
operator|.
name|openSpan
argument_list|()
expr_stmt|;
name|b
operator|.
name|setStyleName
argument_list|(
name|KeyResources
operator|.
name|I
operator|.
name|css
argument_list|()
operator|.
name|helpKey
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|closeSpan
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
name|b
return|;
block|}
DECL|method|modifier (final SafeHtmlBuilder b, final String name)
specifier|private
name|void
name|modifier
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|b
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
name|namedKey
argument_list|(
name|b
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" + "
argument_list|)
expr_stmt|;
block|}
DECL|method|namedKey (final SafeHtmlBuilder b, final String name)
specifier|private
name|void
name|namedKey
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|b
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|b
operator|.
name|openSpan
argument_list|()
expr_stmt|;
name|b
operator|.
name|setStyleName
argument_list|(
name|KeyResources
operator|.
name|I
operator|.
name|css
argument_list|()
operator|.
name|helpKey
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|b
operator|.
name|closeSpan
argument_list|()
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

