begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.util.cli
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|util
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|OptionHandlers
specifier|public
class|class
name|OptionHandlers
block|{
DECL|method|empty ()
specifier|public
specifier|static
name|OptionHandlers
name|empty
parameter_list|()
block|{
name|ImmutableMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Provider
argument_list|<
name|OptionHandlerFactory
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|m
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
return|return
operator|new
name|OptionHandlers
argument_list|(
name|m
argument_list|)
return|;
block|}
DECL|field|map
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Provider
argument_list|<
name|OptionHandlerFactory
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|map
decl_stmt|;
annotation|@
name|Inject
DECL|method|OptionHandlers (Injector parent)
name|OptionHandlers
parameter_list|(
name|Injector
name|parent
parameter_list|)
block|{
name|this
argument_list|(
name|build
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|OptionHandlers (ImmutableMap<Class<?>, Provider<OptionHandlerFactory<?>>> m)
name|OptionHandlers
parameter_list|(
name|ImmutableMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Provider
argument_list|<
name|OptionHandlerFactory
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|m
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|m
expr_stmt|;
block|}
annotation|@
name|Nullable
DECL|method|get (Class<?> type)
name|OptionHandlerFactory
argument_list|<
name|?
argument_list|>
name|get
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|Provider
argument_list|<
name|OptionHandlerFactory
argument_list|<
name|?
argument_list|>
argument_list|>
name|b
init|=
name|map
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|b
operator|!=
literal|null
condition|?
name|b
operator|.
name|get
argument_list|()
else|:
literal|null
return|;
block|}
DECL|method|build (Injector i)
specifier|private
specifier|static
name|ImmutableMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Provider
argument_list|<
name|OptionHandlerFactory
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|build
parameter_list|(
name|Injector
name|i
parameter_list|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Provider
argument_list|<
name|OptionHandlerFactory
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|i
operator|!=
literal|null
condition|;
name|i
operator|=
name|i
operator|.
name|getParent
argument_list|()
control|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|Key
argument_list|<
name|?
argument_list|>
argument_list|,
name|Binding
argument_list|<
name|?
argument_list|>
argument_list|>
name|e
range|:
name|i
operator|.
name|getBindings
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|type
init|=
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getTypeLiteral
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getRawType
argument_list|()
operator|==
name|OptionHandlerFactory
operator|.
name|class
operator|&&
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getAnnotation
argument_list|()
operator|==
literal|null
operator|&&
name|type
operator|.
name|getType
argument_list|()
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|getType
argument_list|(
name|type
argument_list|)
argument_list|,
name|cast
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|map
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getType (TypeLiteral<?> t)
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getType
parameter_list|(
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|t
parameter_list|)
block|{
name|ParameterizedType
name|p
init|=
operator|(
name|ParameterizedType
operator|)
name|t
operator|.
name|getType
argument_list|()
decl_stmt|;
return|return
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|p
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
return|;
block|}
DECL|method|cast (Binding<?> e)
specifier|private
specifier|static
name|Binding
argument_list|<
name|OptionHandlerFactory
argument_list|<
name|?
argument_list|>
argument_list|>
name|cast
parameter_list|(
name|Binding
argument_list|<
name|?
argument_list|>
name|e
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Binding
argument_list|<
name|OptionHandlerFactory
argument_list|<
name|?
argument_list|>
argument_list|>
name|b
init|=
operator|(
name|Binding
argument_list|<
name|OptionHandlerFactory
argument_list|<
name|?
argument_list|>
argument_list|>
operator|)
name|e
decl_stmt|;
return|return
name|b
return|;
block|}
block|}
end_class

end_unit

