begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008, Shawn O. Pearce<spearce@spearce.org>  *  * (Taken from JGit org.eclipse.jgit.pgm.opt.CmdLineParser.)  *  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * - Redistributions of source code must retain the above copyright notice, this  * list of conditions and the following disclaimer.  *  * - Redistributions in binary form must reproduce the above copyright notice,  * this list of conditions and the following disclaimer in the documentation  * and/or other materials provided with the distribution.  *  * - Neither the name of the Git Development Community nor the names of its  * contributors may be used to endorse or promote products derived from this  * software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
DECL|package|com.google.gerrit.util.cli
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|util
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|CmdLineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|IllegalAnnotationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|OptionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|spi
operator|.
name|BooleanOptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|spi
operator|.
name|OptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|spi
operator|.
name|Setter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_comment
comment|/**  * Extended command line parser which handles --foo=value arguments.  *<p>  * The args4j package does not natively handle --foo=value and instead prefers  * to see --foo value on the command line. Many users are used to the GNU style  * --foo=value long option, so we convert from the GNU style format to the  * args4j style format prior to invoking args4j for parsing.  */
end_comment

begin_class
DECL|class|CmdLineParser
specifier|public
class|class
name|CmdLineParser
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (Object bean)
name|CmdLineParser
name|create
parameter_list|(
name|Object
name|bean
parameter_list|)
function_decl|;
block|}
DECL|field|injector
specifier|private
specifier|final
name|Injector
name|injector
decl_stmt|;
DECL|field|parser
specifier|private
specifier|final
name|MyParser
name|parser
decl_stmt|;
comment|/**    * Creates a new command line owner that parses arguments/options and set them    * into the given object.    *    * @param bean instance of a class annotated by    *        {@link org.kohsuke.args4j.Option} and    *        {@link org.kohsuke.args4j.Argument}. this object will receive    *        values.    *    * @throws IllegalAnnotationError if the option bean class is using args4j    *         annotations incorrectly.    */
annotation|@
name|Inject
DECL|method|CmdLineParser (final Injector injector, @Assisted final Object bean)
specifier|public
name|CmdLineParser
parameter_list|(
specifier|final
name|Injector
name|injector
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|Object
name|bean
parameter_list|)
throws|throws
name|IllegalAnnotationError
block|{
name|this
operator|.
name|injector
operator|=
name|injector
expr_stmt|;
name|this
operator|.
name|parser
operator|=
operator|new
name|MyParser
argument_list|(
name|bean
argument_list|)
expr_stmt|;
block|}
DECL|method|addArgument (Setter<?> setter, Argument a)
specifier|public
name|void
name|addArgument
parameter_list|(
name|Setter
argument_list|<
name|?
argument_list|>
name|setter
parameter_list|,
name|Argument
name|a
parameter_list|)
block|{
name|parser
operator|.
name|addArgument
argument_list|(
name|setter
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
DECL|method|addOption (Setter<?> setter, Option o)
specifier|public
name|void
name|addOption
parameter_list|(
name|Setter
argument_list|<
name|?
argument_list|>
name|setter
parameter_list|,
name|Option
name|o
parameter_list|)
block|{
name|parser
operator|.
name|addOption
argument_list|(
name|setter
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
DECL|method|printSingleLineUsage (Writer w, ResourceBundle rb)
specifier|public
name|void
name|printSingleLineUsage
parameter_list|(
name|Writer
name|w
parameter_list|,
name|ResourceBundle
name|rb
parameter_list|)
block|{
name|parser
operator|.
name|printSingleLineUsage
argument_list|(
name|w
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
DECL|method|printUsage (Writer out, ResourceBundle rb)
specifier|public
name|void
name|printUsage
parameter_list|(
name|Writer
name|out
parameter_list|,
name|ResourceBundle
name|rb
parameter_list|)
block|{
name|parser
operator|.
name|printUsage
argument_list|(
name|out
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
DECL|method|wasHelpRequestedByOption ()
specifier|public
name|boolean
name|wasHelpRequestedByOption
parameter_list|()
block|{
return|return
name|parser
operator|.
name|help
operator|.
name|value
return|;
block|}
DECL|method|parseArgument (final String... args)
specifier|public
name|void
name|parseArgument
parameter_list|(
specifier|final
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|CmdLineException
block|{
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|tmp
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|args
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|argi
init|=
literal|0
init|;
name|argi
operator|<
name|args
operator|.
name|length
condition|;
name|argi
operator|++
control|)
block|{
specifier|final
name|String
name|str
init|=
name|args
index|[
name|argi
index|]
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|equals
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
while|while
condition|(
name|argi
operator|<
name|args
operator|.
name|length
condition|)
name|tmp
operator|.
name|add
argument_list|(
name|args
index|[
name|argi
operator|++
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|str
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
specifier|final
name|int
name|eq
init|=
name|str
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|eq
operator|>
literal|0
condition|)
block|{
name|tmp
operator|.
name|add
argument_list|(
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|eq
argument_list|)
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|add
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|eq
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|tmp
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
name|parser
operator|.
name|parseArgument
argument_list|(
name|tmp
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tmp
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|MyParser
specifier|private
class|class
name|MyParser
extends|extends
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|CmdLineParser
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|field|options
specifier|private
name|List
argument_list|<
name|OptionHandler
argument_list|>
name|options
decl_stmt|;
DECL|field|help
specifier|private
name|HelpOption
name|help
decl_stmt|;
DECL|method|MyParser (final Object bean)
name|MyParser
parameter_list|(
specifier|final
name|Object
name|bean
parameter_list|)
block|{
name|super
argument_list|(
name|bean
argument_list|)
expr_stmt|;
name|ensureOptionsInitialized
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Override
DECL|method|createOptionHandler (final OptionDef option, final Setter setter)
specifier|protected
name|OptionHandler
name|createOptionHandler
parameter_list|(
specifier|final
name|OptionDef
name|option
parameter_list|,
specifier|final
name|Setter
name|setter
parameter_list|)
block|{
if|if
condition|(
name|isHandlerSpecified
argument_list|(
name|option
argument_list|)
operator|||
name|isEnum
argument_list|(
name|setter
argument_list|)
operator|||
name|isPrimitive
argument_list|(
name|setter
argument_list|)
condition|)
block|{
return|return
name|add
argument_list|(
name|super
operator|.
name|createOptionHandler
argument_list|(
name|option
argument_list|,
name|setter
argument_list|)
argument_list|)
return|;
block|}
specifier|final
name|Key
argument_list|<
name|OptionHandlerFactory
argument_list|<
name|?
argument_list|>
argument_list|>
name|key
init|=
name|OptionHandlerUtil
operator|.
name|keyFor
argument_list|(
name|setter
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|Injector
name|i
init|=
name|injector
decl_stmt|;
while|while
condition|(
name|i
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|getBindings
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|add
argument_list|(
name|i
operator|.
name|getInstance
argument_list|(
name|key
argument_list|)
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|option
argument_list|,
name|setter
argument_list|)
argument_list|)
return|;
block|}
name|i
operator|=
name|i
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
name|add
argument_list|(
name|super
operator|.
name|createOptionHandler
argument_list|(
name|option
argument_list|,
name|setter
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|add (OptionHandler handler)
specifier|private
name|OptionHandler
name|add
parameter_list|(
name|OptionHandler
name|handler
parameter_list|)
block|{
name|ensureOptionsInitialized
argument_list|()
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
return|return
name|handler
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|ensureOptionsInitialized ()
specifier|private
name|void
name|ensureOptionsInitialized
parameter_list|()
block|{
if|if
condition|(
name|options
operator|==
literal|null
condition|)
block|{
name|help
operator|=
operator|new
name|HelpOption
argument_list|()
expr_stmt|;
name|options
operator|=
operator|new
name|ArrayList
argument_list|<
name|OptionHandler
argument_list|>
argument_list|()
expr_stmt|;
name|addOption
argument_list|(
name|help
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isHandlerSpecified (final OptionDef option)
specifier|private
name|boolean
name|isHandlerSpecified
parameter_list|(
specifier|final
name|OptionDef
name|option
parameter_list|)
block|{
return|return
name|option
operator|.
name|handler
argument_list|()
operator|!=
name|OptionHandler
operator|.
name|class
return|;
block|}
DECL|method|isEnum (Setter<T> setter)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|boolean
name|isEnum
parameter_list|(
name|Setter
argument_list|<
name|T
argument_list|>
name|setter
parameter_list|)
block|{
return|return
name|Enum
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|setter
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isPrimitive (Setter<T> setter)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|boolean
name|isPrimitive
parameter_list|(
name|Setter
argument_list|<
name|T
argument_list|>
name|setter
parameter_list|)
block|{
return|return
name|setter
operator|.
name|getType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
return|;
block|}
block|}
DECL|class|HelpOption
specifier|private
specifier|static
class|class
name|HelpOption
implements|implements
name|Option
implements|,
name|Setter
argument_list|<
name|Boolean
argument_list|>
block|{
DECL|field|value
specifier|private
name|boolean
name|value
decl_stmt|;
annotation|@
name|Override
DECL|method|name ()
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"--help"
return|;
block|}
annotation|@
name|Override
DECL|method|aliases ()
specifier|public
name|String
index|[]
name|aliases
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"-h"
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|usage ()
specifier|public
name|String
name|usage
parameter_list|()
block|{
return|return
literal|"display this help text"
return|;
block|}
annotation|@
name|Override
DECL|method|addValue (Boolean val)
specifier|public
name|void
name|addValue
parameter_list|(
name|Boolean
name|val
parameter_list|)
block|{
name|value
operator|=
name|val
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handler ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|OptionHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|handler
parameter_list|()
block|{
return|return
name|BooleanOptionHandler
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|metaVar ()
specifier|public
name|String
name|metaVar
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
DECL|method|multiValued ()
specifier|public
name|boolean
name|multiValued
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|required ()
specifier|public
name|boolean
name|required
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|annotationType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|()
block|{
return|return
name|Option
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|Class
argument_list|<
name|Boolean
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued ()
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
name|multiValued
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

