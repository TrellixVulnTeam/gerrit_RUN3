begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AcceptanceTestRequestScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|DraftInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AnonymousCowardName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|VisibleRefFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|receive
operator|.
name|ReceiveCommitsAdvertiseRefsHook
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbChangeState
operator|.
name|PrimaryStorage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestChanges
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|Git
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|LsRemoteCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|RefAdvertisementIT
specifier|public
class|class
name|RefAdvertisementIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|refFilterFactory
annotation|@
name|Inject
specifier|private
name|VisibleRefFilter
operator|.
name|Factory
name|refFilterFactory
decl_stmt|;
DECL|field|noteUtil
annotation|@
name|Inject
specifier|private
name|ChangeNoteUtil
name|noteUtil
decl_stmt|;
DECL|field|anonymousCowardName
annotation|@
name|Inject
annotation|@
name|AnonymousCowardName
specifier|private
name|String
name|anonymousCowardName
decl_stmt|;
DECL|field|allUsersName
annotation|@
name|Inject
specifier|private
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|admins
specifier|private
name|AccountGroup
operator|.
name|UUID
name|admins
decl_stmt|;
DECL|field|c1
specifier|private
name|ChangeData
name|c1
decl_stmt|;
DECL|field|c2
specifier|private
name|ChangeData
name|c2
decl_stmt|;
DECL|field|c3
specifier|private
name|ChangeData
name|c3
decl_stmt|;
DECL|field|c4
specifier|private
name|ChangeData
name|c4
decl_stmt|;
DECL|field|r1
specifier|private
name|String
name|r1
decl_stmt|;
DECL|field|r2
specifier|private
name|String
name|r2
decl_stmt|;
DECL|field|r3
specifier|private
name|String
name|r3
decl_stmt|;
DECL|field|r4
specifier|private
name|String
name|r4
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|admins
operator|=
name|groupCache
operator|.
name|get
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Administrators"
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
operator|.
name|getGroupUUID
argument_list|()
expr_stmt|;
name|setUpPermissions
argument_list|()
expr_stmt|;
name|setUpChanges
argument_list|()
expr_stmt|;
block|}
DECL|method|setUpPermissions ()
specifier|private
name|void
name|setUpPermissions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Remove read permissions for all users besides admin. This method is
comment|// idempotent, so is safe to call on every test setup.
name|ProjectConfig
name|pc
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|allProjects
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessSection
name|sec
range|:
name|pc
operator|.
name|getAccessSections
argument_list|()
control|)
block|{
name|sec
operator|.
name|removePermission
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
name|Util
operator|.
name|allow
argument_list|(
name|pc
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|admins
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|allProjects
argument_list|,
name|pc
argument_list|)
expr_stmt|;
block|}
DECL|method|changeRefPrefix (Change.Id id)
specifier|private
specifier|static
name|String
name|changeRefPrefix
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
block|{
name|String
name|ps
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|id
argument_list|,
literal|1
argument_list|)
operator|.
name|toRefName
argument_list|()
decl_stmt|;
return|return
name|ps
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ps
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|setUpChanges ()
specifier|private
name|void
name|setUpChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"branch"
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
comment|// First 2 changes are merged, which means the tags pointing to them are
comment|// visible.
name|allow
argument_list|(
literal|"refs/for/refs/heads/*"
argument_list|,
name|Permission
operator|.
name|SUBMIT
argument_list|,
name|admins
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|mr
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master%submit"
argument_list|)
decl_stmt|;
name|mr
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|c1
operator|=
name|mr
operator|.
name|getChange
argument_list|()
expr_stmt|;
name|r1
operator|=
name|changeRefPrefix
argument_list|(
name|c1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|br
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/branch%submit"
argument_list|)
decl_stmt|;
name|br
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|c2
operator|=
name|br
operator|.
name|getChange
argument_list|()
expr_stmt|;
name|r2
operator|=
name|changeRefPrefix
argument_list|(
name|c2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Second 2 changes are unmerged.
name|mr
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|mr
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|c3
operator|=
name|mr
operator|.
name|getChange
argument_list|()
expr_stmt|;
name|r3
operator|=
name|changeRefPrefix
argument_list|(
name|c3
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|br
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/branch"
argument_list|)
expr_stmt|;
name|br
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|c4
operator|=
name|br
operator|.
name|getChange
argument_list|()
expr_stmt|;
name|r4
operator|=
name|changeRefPrefix
argument_list|(
name|c4
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
comment|// master-tag -> master
name|RefUpdate
name|mtu
init|=
name|repo
operator|.
name|updateRef
argument_list|(
literal|"refs/tags/master-tag"
argument_list|)
decl_stmt|;
name|mtu
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|mtu
operator|.
name|setNewObjectId
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mtu
operator|.
name|update
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
comment|// branch-tag -> branch
name|RefUpdate
name|btu
init|=
name|repo
operator|.
name|updateRef
argument_list|(
literal|"refs/tags/branch-tag"
argument_list|)
decl_stmt|;
name|btu
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|btu
operator|.
name|setNewObjectId
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
literal|"refs/heads/branch"
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|btu
operator|.
name|update
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|uploadPackAllRefsVisibleNoRefsMetaConfig ()
specifier|public
name|void
name|uploadPackAllRefsVisibleNoRefsMetaConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|cfg
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|cfg
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|admins
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
expr_stmt|;
name|Util
operator|.
name|doNotInherit
argument_list|(
name|cfg
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
name|r1
operator|+
literal|"1"
argument_list|,
name|r1
operator|+
literal|"meta"
argument_list|,
name|r2
operator|+
literal|"1"
argument_list|,
name|r2
operator|+
literal|"meta"
argument_list|,
name|r3
operator|+
literal|"1"
argument_list|,
name|r3
operator|+
literal|"meta"
argument_list|,
name|r4
operator|+
literal|"1"
argument_list|,
name|r4
operator|+
literal|"meta"
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|uploadPackAllRefsVisibleWithRefsMetaConfig ()
specifier|public
name|void
name|uploadPackAllRefsVisibleWithRefsMetaConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
name|r1
operator|+
literal|"1"
argument_list|,
name|r1
operator|+
literal|"meta"
argument_list|,
name|r2
operator|+
literal|"1"
argument_list|,
name|r2
operator|+
literal|"meta"
argument_list|,
name|r3
operator|+
literal|"1"
argument_list|,
name|r3
operator|+
literal|"meta"
argument_list|,
name|r4
operator|+
literal|"1"
argument_list|,
name|r4
operator|+
literal|"meta"
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|uploadPackSubsetOfBranchesVisibleIncludingHead ()
specifier|public
name|void
name|uploadPackSubsetOfBranchesVisibleIncludingHead
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|deny
argument_list|(
literal|"refs/heads/branch"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
name|r1
operator|+
literal|"1"
argument_list|,
name|r1
operator|+
literal|"meta"
argument_list|,
name|r3
operator|+
literal|"1"
argument_list|,
name|r3
operator|+
literal|"meta"
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|uploadPackSubsetOfBranchesVisibleNotIncludingHead ()
specifier|public
name|void
name|uploadPackSubsetOfBranchesVisibleNotIncludingHead
parameter_list|()
throws|throws
name|Exception
block|{
name|deny
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|allow
argument_list|(
literal|"refs/heads/branch"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
name|r2
operator|+
literal|"1"
argument_list|,
name|r2
operator|+
literal|"meta"
argument_list|,
name|r4
operator|+
literal|"1"
argument_list|,
name|r4
operator|+
literal|"meta"
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
comment|// master branch is not visible but master-tag is reachable from branch
comment|// (since PushOneCommit always bases changes on each other).
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|uploadPackSubsetOfBranchesVisibleWithEdit ()
specifier|public
name|void
name|uploadPackSubsetOfBranchesVisibleWithEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|Change
name|c
init|=
name|notesFactory
operator|.
name|createChecked
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|c1
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Admin's edit is not visible.
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// User's edit is visible.
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
name|r1
operator|+
literal|"1"
argument_list|,
name|r1
operator|+
literal|"meta"
argument_list|,
name|r3
operator|+
literal|"1"
argument_list|,
name|r3
operator|+
literal|"meta"
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|,
literal|"refs/users/01/1000001/edit-"
operator|+
name|c1
operator|.
name|getId
argument_list|()
operator|+
literal|"/1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|uploadPackSubsetOfBranchesAndEditsVisibleWithViewPrivateChanges ()
specifier|public
name|void
name|uploadPackSubsetOfBranchesAndEditsVisibleWithViewPrivateChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|allow
argument_list|(
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|VIEW_PRIVATE_CHANGES
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|Change
name|change1
init|=
name|notesFactory
operator|.
name|createChecked
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|c1
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|String
name|changeId1
init|=
name|change1
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|Change
name|change2
init|=
name|notesFactory
operator|.
name|createChecked
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|c2
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|String
name|changeId2
init|=
name|change2
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Admin's edit on change1 is visible.
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId1
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// Admin's edit on change2 is not visible since user cannot see the change.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// User's edit is visible.
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId1
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
name|r1
operator|+
literal|"1"
argument_list|,
name|r1
operator|+
literal|"meta"
argument_list|,
name|r3
operator|+
literal|"1"
argument_list|,
name|r3
operator|+
literal|"meta"
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|,
literal|"refs/users/00/1000000/edit-"
operator|+
name|c1
operator|.
name|getId
argument_list|()
operator|+
literal|"/1"
argument_list|,
literal|"refs/users/01/1000001/edit-"
operator|+
name|c1
operator|.
name|getId
argument_list|()
operator|+
literal|"/1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|uploadPackSubsetOfRefsVisibleWithAccessDatabase ()
specifier|public
name|void
name|uploadPackSubsetOfRefsVisibleWithAccessDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
try|try
block|{
name|deny
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|allow
argument_list|(
literal|"refs/heads/branch"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|c1
operator|.
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
comment|// Change 1 is visible due to accessDatabase capability, even though
comment|// refs/heads/master is not.
name|r1
operator|+
literal|"1"
argument_list|,
name|r1
operator|+
literal|"meta"
argument_list|,
name|r2
operator|+
literal|"1"
argument_list|,
name|r2
operator|+
literal|"meta"
argument_list|,
name|r3
operator|+
literal|"1"
argument_list|,
name|r3
operator|+
literal|"meta"
argument_list|,
name|r4
operator|+
literal|"1"
argument_list|,
name|r4
operator|+
literal|"meta"
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
comment|// See comment in subsetOfBranchesVisibleNotIncludingHead.
literal|"refs/tags/master-tag"
argument_list|,
comment|// All edits are visible due to accessDatabase capability.
literal|"refs/users/00/1000000/edit-"
operator|+
name|c1
operator|.
name|getId
argument_list|()
operator|+
literal|"/1"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|removeGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|uploadPackDraftRefs ()
specifier|public
name|void
name|uploadPackDraftRefs
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
literal|"refs/heads/*"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|br
init|=
name|createDraftChange
argument_list|()
decl_stmt|;
name|br
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|Change
operator|.
name|Id
name|c5
init|=
name|br
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|r5
init|=
name|changeRefPrefix
argument_list|(
name|c5
argument_list|)
decl_stmt|;
comment|// Only admin can see admin's draft change (5).
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
name|r1
operator|+
literal|"1"
argument_list|,
name|r1
operator|+
literal|"meta"
argument_list|,
name|r2
operator|+
literal|"1"
argument_list|,
name|r2
operator|+
literal|"meta"
argument_list|,
name|r3
operator|+
literal|"1"
argument_list|,
name|r3
operator|+
literal|"meta"
argument_list|,
name|r4
operator|+
literal|"1"
argument_list|,
name|r4
operator|+
literal|"meta"
argument_list|,
name|r5
operator|+
literal|"1"
argument_list|,
name|r5
operator|+
literal|"meta"
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
comment|// user can't.
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
name|r1
operator|+
literal|"1"
argument_list|,
name|r1
operator|+
literal|"meta"
argument_list|,
name|r2
operator|+
literal|"1"
argument_list|,
name|r2
operator|+
literal|"meta"
argument_list|,
name|r3
operator|+
literal|"1"
argument_list|,
name|r3
operator|+
literal|"meta"
argument_list|,
name|r4
operator|+
literal|"1"
argument_list|,
name|r4
operator|+
literal|"meta"
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|uploadPackNoSearchingChangeCacheImpl ()
specifier|public
name|void
name|uploadPackNoSearchingChangeCacheImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
literal|"refs/heads/*"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|assertRefs
argument_list|(
name|repo
argument_list|,
name|refFilterFactory
operator|.
name|create
argument_list|(
name|projectCache
operator|.
name|get
argument_list|(
name|project
argument_list|)
argument_list|,
name|repo
argument_list|)
argument_list|,
comment|// Can't use stored values from the index so DB must be enabled.
literal|false
argument_list|,
literal|"HEAD"
argument_list|,
name|r1
operator|+
literal|"1"
argument_list|,
name|r1
operator|+
literal|"meta"
argument_list|,
name|r2
operator|+
literal|"1"
argument_list|,
name|r2
operator|+
literal|"meta"
argument_list|,
name|r3
operator|+
literal|"1"
argument_list|,
name|r3
operator|+
literal|"meta"
argument_list|,
name|r4
operator|+
literal|"1"
argument_list|,
name|r4
operator|+
literal|"meta"
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|uploadPackSequencesWithAccessDatabase ()
specifier|public
name|void
name|uploadPackSequencesWithAccessDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChangeSequence
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allProjects
argument_list|)
init|)
block|{
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertRefs
argument_list|(
name|repo
argument_list|,
name|newFilter
argument_list|(
name|repo
argument_list|,
name|allProjects
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
try|try
block|{
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertRefs
argument_list|(
name|repo
argument_list|,
name|newFilter
argument_list|(
name|repo
argument_list|,
name|allProjects
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|"refs/sequences/changes"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|removeGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|receivePackListsOpenChangesAsAdditionalHaves ()
specifier|public
name|void
name|receivePackListsOpenChangesAsAdditionalHaves
parameter_list|()
throws|throws
name|Exception
block|{
name|ReceiveCommitsAdvertiseRefsHook
operator|.
name|Result
name|r
init|=
name|getReceivePackRefs
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|allRefs
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
comment|// meta refs are excluded even when NoteDb is enabled.
literal|"HEAD"
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"refs/meta/config"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|additionalHaves
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|obj
argument_list|(
name|c3
argument_list|,
literal|1
argument_list|)
argument_list|,
name|obj
argument_list|(
name|c4
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|receivePackRespectsVisibilityOfOpenChanges ()
specifier|public
name|void
name|receivePackRespectsVisibilityOfOpenChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|deny
argument_list|(
literal|"refs/heads/branch"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getReceivePackRefs
argument_list|()
operator|.
name|additionalHaves
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|obj
argument_list|(
name|c3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|receivePackListsOnlyLatestPatchSet ()
specifier|public
name|void
name|receivePackListsOnlyLatestPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|testRepo
operator|.
name|reset
argument_list|(
name|obj
argument_list|(
name|c3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|amendChange
argument_list|(
name|c3
operator|.
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|c3
operator|=
name|r
operator|.
name|getChange
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getReceivePackRefs
argument_list|()
operator|.
name|additionalHaves
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|obj
argument_list|(
name|c3
argument_list|,
literal|2
argument_list|)
argument_list|,
name|obj
argument_list|(
name|c4
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|receivePackOmitsMissingObject ()
specifier|public
name|void
name|receivePackOmitsMissingObject
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rev
init|=
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|TestRepository
argument_list|<
name|?
argument_list|>
name|tr
init|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|String
name|subject
init|=
literal|"Subject for missing commit"
decl_stmt|;
name|Change
name|c
init|=
operator|new
name|Change
argument_list|(
name|c3
operator|.
name|change
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|c3
operator|.
name|getId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|c
operator|.
name|setCurrentPatchSet
argument_list|(
name|psId
argument_list|,
name|subject
argument_list|,
name|c
operator|.
name|getOriginalSubject
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|notesMigration
operator|.
name|changePrimaryStorage
argument_list|()
operator|==
name|PrimaryStorage
operator|.
name|REVIEW_DB
condition|)
block|{
name|PatchSet
name|ps
init|=
name|TestChanges
operator|.
name|newPatchSet
argument_list|(
name|psId
argument_list|,
name|rev
argument_list|,
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|notesMigration
operator|.
name|commitChangeWrites
argument_list|()
condition|)
block|{
name|PersonIdent
name|committer
init|=
name|serverIdent
operator|.
name|get
argument_list|()
decl_stmt|;
name|PersonIdent
name|author
init|=
name|noteUtil
operator|.
name|newIdent
argument_list|(
name|accountCache
operator|.
name|get
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
argument_list|,
name|committer
operator|.
name|getWhen
argument_list|()
argument_list|,
name|committer
argument_list|,
name|anonymousCowardName
argument_list|)
decl_stmt|;
name|tr
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|c3
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|author
argument_list|(
name|author
argument_list|)
operator|.
name|committer
argument_list|(
name|committer
argument_list|)
operator|.
name|message
argument_list|(
literal|"Update patch set "
operator|+
name|psId
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"\n"
operator|+
literal|"Patch-set: "
operator|+
name|psId
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Commit: "
operator|+
name|rev
operator|+
literal|"\n"
operator|+
literal|"Subject: "
operator|+
name|subject
operator|+
literal|"\n"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|c
operator|.
name|getProject
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|getReceivePackRefs
argument_list|()
operator|.
name|additionalHaves
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|obj
argument_list|(
name|c4
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|advertisedReferencesOmitPrivateChangesOfOtherUsers ()
specifier|public
name|void
name|advertisedReferencesOmitPrivateChangesOfOtherUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|userTestRepository
init|=
name|cloneProject
argument_list|(
name|project
argument_list|,
name|user
argument_list|)
decl_stmt|;
try|try
init|(
name|Git
name|git
init|=
name|userTestRepository
operator|.
name|git
argument_list|()
init|)
block|{
name|LsRemoteCommand
name|lsRemoteCommand
init|=
name|git
operator|.
name|lsRemote
argument_list|()
decl_stmt|;
name|String
name|change3RefName
init|=
name|c3
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|getRefName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|initialRefNames
init|=
name|lsRemoteCommand
operator|.
name|call
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Ref
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"Precondition violated"
argument_list|)
operator|.
name|that
argument_list|(
name|initialRefNames
argument_list|)
operator|.
name|contains
argument_list|(
name|change3RefName
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|c3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setPrivate
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|refNames
init|=
name|lsRemoteCommand
operator|.
name|call
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Ref
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|refNames
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|change3RefName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|advertisedReferencesIncludePrivateChangesWhenAllRefsMayBeRead ()
specifier|public
name|void
name|advertisedReferencesIncludePrivateChangesWhenAllRefsMayBeRead
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|userTestRepository
init|=
name|cloneProject
argument_list|(
name|project
argument_list|,
name|user
argument_list|)
decl_stmt|;
try|try
init|(
name|Git
name|git
init|=
name|userTestRepository
operator|.
name|git
argument_list|()
init|)
block|{
name|LsRemoteCommand
name|lsRemoteCommand
init|=
name|git
operator|.
name|lsRemote
argument_list|()
decl_stmt|;
name|String
name|change3RefName
init|=
name|c3
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|getRefName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|initialRefNames
init|=
name|lsRemoteCommand
operator|.
name|call
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Ref
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"Precondition violated"
argument_list|)
operator|.
name|that
argument_list|(
name|initialRefNames
argument_list|)
operator|.
name|contains
argument_list|(
name|change3RefName
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|c3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setPrivate
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|refNames
init|=
name|lsRemoteCommand
operator|.
name|call
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Ref
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|refNames
argument_list|)
operator|.
name|contains
argument_list|(
name|change3RefName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|advertisedReferencesOmitDraftCommentRefsOfOtherUsers ()
specifier|public
name|void
name|advertisedReferencesOmitDraftCommentRefsOfOtherUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|commitChangeWrites
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|allow
argument_list|(
name|project
argument_list|,
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|allUsersName
argument_list|,
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|DraftInput
name|draftInput
init|=
operator|new
name|DraftInput
argument_list|()
decl_stmt|;
name|draftInput
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|draftInput
operator|.
name|message
operator|=
literal|"nit: trailing whitespace"
expr_stmt|;
name|draftInput
operator|.
name|path
operator|=
name|Patch
operator|.
name|COMMIT_MSG
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|c3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|createDraft
argument_list|(
name|draftInput
argument_list|)
expr_stmt|;
name|String
name|draftCommentRef
init|=
name|RefNames
operator|.
name|refsDraftComments
argument_list|(
name|c3
operator|.
name|getId
argument_list|()
argument_list|,
name|user
operator|.
name|id
argument_list|)
decl_stmt|;
comment|// user can see the draft comment ref of the own draft comment
name|assertThat
argument_list|(
name|lsRemote
argument_list|(
name|allUsersName
argument_list|,
name|user
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|draftCommentRef
argument_list|)
expr_stmt|;
comment|// user2 can't see the draft comment ref of user's draft comment
name|assertThat
argument_list|(
name|lsRemote
argument_list|(
name|allUsersName
argument_list|,
name|accountCreator
operator|.
name|user2
argument_list|()
argument_list|)
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|draftCommentRef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|advertisedReferencesOmitStarredChangesRefsOfOtherUsers ()
specifier|public
name|void
name|advertisedReferencesOmitStarredChangesRefsOfOtherUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|commitChangeWrites
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|allow
argument_list|(
name|project
argument_list|,
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|allUsersName
argument_list|,
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|starChange
argument_list|(
name|c3
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|starredChangesRef
init|=
name|RefNames
operator|.
name|refsStarredChanges
argument_list|(
name|c3
operator|.
name|getId
argument_list|()
argument_list|,
name|user
operator|.
name|id
argument_list|)
decl_stmt|;
comment|// user can see the starred changes ref of the own star
name|assertThat
argument_list|(
name|lsRemote
argument_list|(
name|allUsersName
argument_list|,
name|user
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|starredChangesRef
argument_list|)
expr_stmt|;
comment|// user2 can't see the starred changes ref of admin's star
name|assertThat
argument_list|(
name|lsRemote
argument_list|(
name|allUsersName
argument_list|,
name|accountCreator
operator|.
name|user2
argument_list|()
argument_list|)
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|starredChangesRef
argument_list|)
expr_stmt|;
block|}
DECL|method|lsRemote (Project.NameKey p, TestAccount a)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|lsRemote
parameter_list|(
name|Project
operator|.
name|NameKey
name|p
parameter_list|,
name|TestAccount
name|a
parameter_list|)
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|?
argument_list|>
name|testRepository
init|=
name|cloneProject
argument_list|(
name|p
argument_list|,
name|a
argument_list|)
decl_stmt|;
try|try
init|(
name|Git
name|git
init|=
name|testRepository
operator|.
name|git
argument_list|()
init|)
block|{
return|return
name|git
operator|.
name|lsRemote
argument_list|()
operator|.
name|call
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Ref
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Assert that refs seen by a non-admin user match expected.    *    * @param expectedWithMeta expected refs, in order. If NoteDb is disabled by the configuration,    *     any NoteDb refs (i.e. ending in "/meta") are removed from the expected list before    *     comparing to the actual results.    * @throws Exception    */
DECL|method|assertUploadPackRefs (String... expectedWithMeta)
specifier|private
name|void
name|assertUploadPackRefs
parameter_list|(
name|String
modifier|...
name|expectedWithMeta
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|assertRefs
argument_list|(
name|repo
argument_list|,
name|refFilterFactory
operator|.
name|create
argument_list|(
name|projectCache
operator|.
name|get
argument_list|(
name|project
argument_list|)
argument_list|,
name|repo
argument_list|)
argument_list|,
literal|true
argument_list|,
name|expectedWithMeta
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertRefs ( Repository repo, VisibleRefFilter filter, boolean disableDb, String... expectedWithMeta)
specifier|private
name|void
name|assertRefs
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|VisibleRefFilter
name|filter
parameter_list|,
name|boolean
name|disableDb
parameter_list|,
name|String
modifier|...
name|expectedWithMeta
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|expectedWithMeta
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|r
range|:
name|expectedWithMeta
control|)
block|{
if|if
condition|(
name|notesMigration
operator|.
name|commitChangeWrites
argument_list|()
operator|||
operator|!
name|r
operator|.
name|endsWith
argument_list|(
name|RefNames
operator|.
name|META_SUFFIX
argument_list|)
condition|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
name|AcceptanceTestRequestScope
operator|.
name|Context
name|ctx
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|disableDb
condition|)
block|{
name|ctx
operator|=
name|disableDb
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|all
init|=
name|repo
operator|.
name|getAllRefs
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|filter
argument_list|(
name|all
argument_list|,
literal|false
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|disableDb
condition|)
block|{
name|enableDb
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getReceivePackRefs ()
specifier|private
name|ReceiveCommitsAdvertiseRefsHook
operator|.
name|Result
name|getReceivePackRefs
parameter_list|()
throws|throws
name|Exception
block|{
name|ReceiveCommitsAdvertiseRefsHook
name|hook
init|=
operator|new
name|ReceiveCommitsAdvertiseRefsHook
argument_list|(
name|queryProvider
argument_list|,
name|project
argument_list|)
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
return|return
name|hook
operator|.
name|advertiseRefs
argument_list|(
name|repo
operator|.
name|getAllRefs
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|newFilter (Repository repo, Project.NameKey project)
specifier|private
name|VisibleRefFilter
name|newFilter
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
block|{
return|return
name|refFilterFactory
operator|.
name|create
argument_list|(
name|projectCache
operator|.
name|get
argument_list|(
name|project
argument_list|)
argument_list|,
name|repo
argument_list|)
return|;
block|}
DECL|method|obj (ChangeData cd, int psNum)
specifier|private
specifier|static
name|ObjectId
name|obj
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|int
name|psNum
parameter_list|)
throws|throws
name|Exception
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|psNum
argument_list|)
decl_stmt|;
name|PatchSet
name|ps
init|=
name|cd
operator|.
name|patchSet
argument_list|(
name|psId
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"%s not found in %s"
argument_list|,
name|psId
argument_list|,
name|cd
operator|.
name|patchSets
argument_list|()
argument_list|)
operator|.
name|that
argument_list|(
name|ps
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
return|return
name|ObjectId
operator|.
name|fromString
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

