begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.server.mail
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|server
operator|.
name|mail
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|WatchConfig
operator|.
name|NotifyType
operator|.
name|NEW_PATCHSETS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractNotificationTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|GeneralPreferencesInfo
operator|.
name|EmailStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ReplacePatchSetSenderIT
specifier|public
class|class
name|ReplacePatchSetSenderIT
extends|extends
name|AbstractNotificationTest
block|{
DECL|field|other
specifier|private
name|TestAccount
name|other
decl_stmt|;
annotation|@
name|Before
DECL|method|createOtherAndGrantPermissions ()
specifier|public
name|void
name|createOtherAndGrantPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|other
operator|=
name|accountCreator
operator|.
name|create
argument_list|(
literal|"other"
argument_list|,
literal|"other@example.com"
argument_list|,
literal|"other"
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|project
argument_list|,
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|FORGE_COMMITTER
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetByOwnerOnReviewableChangeInNoteDb ()
specifier|public
name|void
name|newPatchSetByOwnerOnReviewableChangeInNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master"
argument_list|,
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|reviewer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|ccer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|bcc
argument_list|(
name|sc
operator|.
name|starrer
argument_list|)
operator|.
name|bcc
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetByOwnerOnReviewableChangeInReviewDb ()
specifier|public
name|void
name|newPatchSetByOwnerOnReviewableChangeInReviewDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master"
argument_list|,
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|reviewer
argument_list|,
name|sc
operator|.
name|ccer
argument_list|)
operator|.
name|bcc
argument_list|(
name|sc
operator|.
name|starrer
argument_list|)
operator|.
name|bcc
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetByOtherOnReviewableChangeInNoteDb ()
specifier|public
name|void
name|newPatchSetByOtherOnReviewableChangeInNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master"
argument_list|,
name|other
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
comment|// TODO(logan): This email shouldn't come from the owner.
operator|.
name|to
argument_list|(
name|sc
operator|.
name|reviewer
argument_list|,
name|other
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|ccer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|bcc
argument_list|(
name|sc
operator|.
name|starrer
argument_list|)
operator|.
name|bcc
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetByOtherOnReviewableChangeInReviewDb ()
specifier|public
name|void
name|newPatchSetByOtherOnReviewableChangeInReviewDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master"
argument_list|,
name|other
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
comment|// TODO(logan): This email shouldn't come from the owner.
operator|.
name|to
argument_list|(
name|sc
operator|.
name|reviewer
argument_list|,
name|sc
operator|.
name|ccer
argument_list|,
name|other
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|bcc
argument_list|(
name|sc
operator|.
name|starrer
argument_list|)
operator|.
name|bcc
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetByOtherOnReviewableChangeOwnerSelfCcInNoteDb ()
specifier|public
name|void
name|newPatchSetByOtherOnReviewableChangeOwnerSelfCcInNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master"
argument_list|,
name|other
argument_list|,
name|EmailStrategy
operator|.
name|CC_ON_OWN_COMMENTS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|owner
argument_list|,
name|sc
operator|.
name|reviewer
argument_list|,
name|other
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|ccer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|bcc
argument_list|(
name|sc
operator|.
name|starrer
argument_list|)
operator|.
name|bcc
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetByOtherOnReviewableChangeOwnerSelfCcInReviewDb ()
specifier|public
name|void
name|newPatchSetByOtherOnReviewableChangeOwnerSelfCcInReviewDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master"
argument_list|,
name|other
argument_list|,
name|EmailStrategy
operator|.
name|CC_ON_OWN_COMMENTS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|owner
argument_list|,
name|sc
operator|.
name|reviewer
argument_list|,
name|sc
operator|.
name|ccer
argument_list|,
name|other
argument_list|)
operator|.
name|bcc
argument_list|(
name|sc
operator|.
name|starrer
argument_list|)
operator|.
name|bcc
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetByOtherOnReviewableChangeNotifyOwnerReviewersInNoteDb ()
specifier|public
name|void
name|newPatchSetByOtherOnReviewableChangeNotifyOwnerReviewersInNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%notify=OWNER_REVIEWERS"
argument_list|,
name|other
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
comment|// TODO(logan): This email shouldn't come from the owner.
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|owner
argument_list|,
name|sc
operator|.
name|starrer
argument_list|,
name|other
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|reviewer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|ccer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|notTo
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetByOtherOnReviewableChangeNotifyOwnerReviewersInReviewDb ()
specifier|public
name|void
name|newPatchSetByOtherOnReviewableChangeNotifyOwnerReviewersInReviewDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%notify=OWNER_REVIEWERS"
argument_list|,
name|other
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|reviewer
argument_list|,
name|sc
operator|.
name|ccer
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|starrer
argument_list|,
name|other
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
comment|// TODO(logan): This email shouldn't come from the owner.
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|notTo
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetByOtherOnReviewableChangeOwnerSelfCcNotifyOwnerReviewersInNoteDb ()
specifier|public
name|void
name|newPatchSetByOtherOnReviewableChangeOwnerSelfCcNotifyOwnerReviewersInNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%notify=OWNER_REVIEWERS"
argument_list|,
name|other
argument_list|,
name|EmailStrategy
operator|.
name|CC_ON_OWN_COMMENTS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|starrer
argument_list|,
name|other
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|owner
argument_list|,
name|sc
operator|.
name|reviewer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|ccer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|notTo
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetByOtherOnReviewableChangeOwnerSelfCcNotifyOwnerReviewersInReviewDb ()
specifier|public
name|void
name|newPatchSetByOtherOnReviewableChangeOwnerSelfCcNotifyOwnerReviewersInReviewDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%notify=OWNER_REVIEWERS"
argument_list|,
name|other
argument_list|,
name|EmailStrategy
operator|.
name|CC_ON_OWN_COMMENTS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|starrer
argument_list|,
name|other
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|owner
argument_list|,
name|sc
operator|.
name|reviewer
argument_list|,
name|sc
operator|.
name|ccer
argument_list|)
operator|.
name|notTo
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetByOtherOnReviewableChangeNotifyOwner ()
specifier|public
name|void
name|newPatchSetByOtherOnReviewableChangeNotifyOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%notify=OWNER"
argument_list|,
name|other
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|notSent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetByOtherOnReviewableChangeOwnerSelfCcNotifyOwner ()
specifier|public
name|void
name|newPatchSetByOtherOnReviewableChangeOwnerSelfCcNotifyOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%notify=OWNER"
argument_list|,
name|other
argument_list|,
name|EmailStrategy
operator|.
name|CC_ON_OWN_COMMENTS
argument_list|)
expr_stmt|;
comment|// TODO(logan): This email shouldn't come from the owner, and that's why
comment|// no email is currently sent (owner isn't CCing self).
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|notSent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetByOtherOnReviewableChangeNotifyNone ()
specifier|public
name|void
name|newPatchSetByOtherOnReviewableChangeNotifyNone
parameter_list|()
throws|throws
name|Exception
block|{
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%notify=NONE"
argument_list|,
name|other
argument_list|)
expr_stmt|;
comment|// TODO(logan): This email shouldn't come from the owner, and that's why
comment|// no email is currently sent (owner isn't CCing self).
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|notSent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetByOtherOnReviewableChangeOwnerSelfCcNotifyNone ()
specifier|public
name|void
name|newPatchSetByOtherOnReviewableChangeOwnerSelfCcNotifyNone
parameter_list|()
throws|throws
name|Exception
block|{
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%notify=NONE"
argument_list|,
name|other
argument_list|,
name|EmailStrategy
operator|.
name|CC_ON_OWN_COMMENTS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|notSent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetByOwnerOnReviewableChangeToWip ()
specifier|public
name|void
name|newPatchSetByOwnerOnReviewableChangeToWip
parameter_list|()
throws|throws
name|Exception
block|{
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%wip"
argument_list|,
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|notSent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetOnWipChange ()
specifier|public
name|void
name|newPatchSetOnWipChange
parameter_list|()
throws|throws
name|Exception
block|{
name|StagedChange
name|sc
init|=
name|stageWipChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%wip"
argument_list|,
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|notSent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetOnWipChangeNotifyAllInNoteDb ()
specifier|public
name|void
name|newPatchSetOnWipChangeNotifyAllInNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageWipChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%wip,notify=ALL"
argument_list|,
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|reviewer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|ccer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|bcc
argument_list|(
name|sc
operator|.
name|starrer
argument_list|)
operator|.
name|bcc
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetOnWipChangeNotifyAllInReviewDb ()
specifier|public
name|void
name|newPatchSetOnWipChangeNotifyAllInReviewDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageWipChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%wip,notify=ALL"
argument_list|,
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|reviewer
argument_list|,
name|sc
operator|.
name|ccer
argument_list|)
operator|.
name|bcc
argument_list|(
name|sc
operator|.
name|starrer
argument_list|)
operator|.
name|bcc
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetOnWipChangeToReadyInNoteDb ()
specifier|public
name|void
name|newPatchSetOnWipChangeToReadyInNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageWipChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%ready"
argument_list|,
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|reviewer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|ccer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|bcc
argument_list|(
name|sc
operator|.
name|starrer
argument_list|)
operator|.
name|bcc
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetOnWipChangeToReadyInReviewDb ()
specifier|public
name|void
name|newPatchSetOnWipChangeToReadyInReviewDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageWipChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%ready"
argument_list|,
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|reviewer
argument_list|,
name|sc
operator|.
name|ccer
argument_list|)
operator|.
name|bcc
argument_list|(
name|sc
operator|.
name|starrer
argument_list|)
operator|.
name|bcc
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetOnReviewableWipChange ()
specifier|public
name|void
name|newPatchSetOnReviewableWipChange
parameter_list|()
throws|throws
name|Exception
block|{
name|StagedChange
name|sc
init|=
name|stageReviewableWipChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%wip"
argument_list|,
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|notSent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetOnReviewableChangeAddingReviewerInNoteDb ()
specifier|public
name|void
name|newPatchSetOnReviewableChangeAddingReviewerInNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|TestAccount
name|newReviewer
init|=
name|sc
operator|.
name|testAccount
argument_list|(
literal|"newReviewer"
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%r="
operator|+
name|newReviewer
operator|.
name|username
argument_list|,
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|reviewer
argument_list|,
name|newReviewer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|ccer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|bcc
argument_list|(
name|sc
operator|.
name|starrer
argument_list|)
operator|.
name|bcc
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|notSent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetOnReviewableChangeAddingReviewerInReviewDb ()
specifier|public
name|void
name|newPatchSetOnReviewableChangeAddingReviewerInReviewDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|TestAccount
name|newReviewer
init|=
name|sc
operator|.
name|testAccount
argument_list|(
literal|"newReviewer"
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%r="
operator|+
name|newReviewer
operator|.
name|username
argument_list|,
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|reviewer
argument_list|,
name|sc
operator|.
name|ccer
argument_list|,
name|newReviewer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|bcc
argument_list|(
name|sc
operator|.
name|starrer
argument_list|)
operator|.
name|bcc
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|notSent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetOnWipChangeAddingReviewer ()
specifier|public
name|void
name|newPatchSetOnWipChangeAddingReviewer
parameter_list|()
throws|throws
name|Exception
block|{
name|StagedChange
name|sc
init|=
name|stageWipChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|TestAccount
name|newReviewer
init|=
name|sc
operator|.
name|testAccount
argument_list|(
literal|"newReviewer"
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%r="
operator|+
name|newReviewer
operator|.
name|username
argument_list|,
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|notSent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetOnWipChangeAddingReviewerNotifyAllInNoteDb ()
specifier|public
name|void
name|newPatchSetOnWipChangeAddingReviewerNotifyAllInNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageWipChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|TestAccount
name|newReviewer
init|=
name|sc
operator|.
name|testAccount
argument_list|(
literal|"newReviewer"
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%notify=ALL,r="
operator|+
name|newReviewer
operator|.
name|username
argument_list|,
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|reviewer
argument_list|,
name|newReviewer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|ccer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|bcc
argument_list|(
name|sc
operator|.
name|starrer
argument_list|)
operator|.
name|bcc
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|notSent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetOnWipChangeAddingReviewerNotifyAllInReviewDb ()
specifier|public
name|void
name|newPatchSetOnWipChangeAddingReviewerNotifyAllInReviewDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageWipChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|TestAccount
name|newReviewer
init|=
name|sc
operator|.
name|testAccount
argument_list|(
literal|"newReviewer"
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%notify=ALL,r="
operator|+
name|newReviewer
operator|.
name|username
argument_list|,
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|reviewer
argument_list|,
name|sc
operator|.
name|ccer
argument_list|,
name|newReviewer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|bcc
argument_list|(
name|sc
operator|.
name|starrer
argument_list|)
operator|.
name|bcc
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|notSent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetOnWipChangeSettingReadyInNoteDb ()
specifier|public
name|void
name|newPatchSetOnWipChangeSettingReadyInNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageWipChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%ready"
argument_list|,
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|reviewer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|ccer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|bcc
argument_list|(
name|sc
operator|.
name|starrer
argument_list|)
operator|.
name|bcc
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|notSent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newPatchSetOnWipChangeSettingReadyInReviewDb ()
specifier|public
name|void
name|newPatchSetOnWipChangeSettingReadyInReviewDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|StagedChange
name|sc
init|=
name|stageWipChange
argument_list|(
name|NEW_PATCHSETS
argument_list|)
decl_stmt|;
name|pushTo
argument_list|(
name|sc
argument_list|,
literal|"refs/for/master%ready"
argument_list|,
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|sent
argument_list|(
literal|"newpatchset"
argument_list|,
name|sc
argument_list|)
operator|.
name|notTo
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
operator|.
name|to
argument_list|(
name|sc
operator|.
name|reviewer
argument_list|,
name|sc
operator|.
name|ccer
argument_list|)
operator|.
name|cc
argument_list|(
name|sc
operator|.
name|reviewerByEmail
argument_list|,
name|sc
operator|.
name|ccerByEmail
argument_list|)
operator|.
name|bcc
argument_list|(
name|sc
operator|.
name|starrer
argument_list|)
operator|.
name|bcc
argument_list|(
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
argument_list|)
operator|.
name|notSent
argument_list|()
expr_stmt|;
block|}
DECL|method|pushTo (StagedChange sc, String ref, TestAccount by)
specifier|private
name|void
name|pushTo
parameter_list|(
name|StagedChange
name|sc
parameter_list|,
name|String
name|ref
parameter_list|,
name|TestAccount
name|by
parameter_list|)
throws|throws
name|Exception
block|{
name|pushTo
argument_list|(
name|sc
argument_list|,
name|ref
argument_list|,
name|by
argument_list|,
name|EmailStrategy
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
block|}
DECL|method|pushTo (StagedChange sc, String ref, TestAccount by, EmailStrategy emailStrategy)
specifier|private
name|void
name|pushTo
parameter_list|(
name|StagedChange
name|sc
parameter_list|,
name|String
name|ref
parameter_list|,
name|TestAccount
name|by
parameter_list|,
name|EmailStrategy
name|emailStrategy
parameter_list|)
throws|throws
name|Exception
block|{
name|setEmailStrategy
argument_list|(
name|sc
operator|.
name|owner
argument_list|,
name|emailStrategy
argument_list|)
expr_stmt|;
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|by
operator|.
name|getIdent
argument_list|()
argument_list|,
name|sc
operator|.
name|repo
argument_list|,
name|sc
operator|.
name|changeId
argument_list|)
operator|.
name|to
argument_list|(
name|ref
argument_list|)
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

