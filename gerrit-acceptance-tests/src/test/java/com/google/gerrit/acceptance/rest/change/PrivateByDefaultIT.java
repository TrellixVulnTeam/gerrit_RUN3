begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|PrivateByDefaultIT
specifier|public
class|class
name|PrivateByDefaultIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.privateByDefault"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|createChangeWithPrivateByDefaultEnabled ()
specifier|public
name|void
name|createChangeWithPrivateByDefaultEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|input
init|=
operator|new
name|ChangeInput
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"empty change"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|input
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isPrivate
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.privateByDefault"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|createChangeBypassPrivateByDefaultEnabled ()
specifier|public
name|void
name|createChangeBypassPrivateByDefaultEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|input
init|=
operator|new
name|ChangeInput
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"empty change"
argument_list|)
decl_stmt|;
name|input
operator|.
name|isPrivate
operator|=
literal|false
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|input
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isPrivate
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createChangeWithPrivateByDefaultDisabled ()
specifier|public
name|void
name|createChangeWithPrivateByDefaultDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|ChangeInput
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"empty change"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|isPrivate
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.privateByDefault"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|pushWithPrivateByDefaultEnabled ()
specifier|public
name|void
name|pushWithPrivateByDefaultEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|createChange
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isPrivate
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.privateByDefault"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|pushBypassPrivateByDefaultEnabled ()
specifier|public
name|void
name|pushBypassPrivateByDefaultEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|createChange
argument_list|(
literal|"refs/for/master%remove-private"
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isPrivate
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithPrivateByDefaultDisabled ()
specifier|public
name|void
name|pushWithPrivateByDefaultDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|createChange
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isPrivate
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

