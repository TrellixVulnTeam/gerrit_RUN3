begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.server.mail
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|server
operator|.
name|mail
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeMessageInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MailUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|send
operator|.
name|EmailHeader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|FakeEmailSender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZonedDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Tests the presence of required metadata in email headers, text and html. */
end_comment

begin_class
DECL|class|MailMetadataIT
specifier|public
class|class
name|MailMetadataIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Test
DECL|method|metadataOnNewChange ()
specifier|public
name|void
name|metadataOnNewChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|newChange
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|newChange
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FakeEmailSender
operator|.
name|Message
argument_list|>
name|emails
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|emails
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|FakeEmailSender
operator|.
name|Message
name|message
init|=
name|emails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|changeURL
init|=
literal|"<"
operator|+
name|canonicalWebUrl
operator|.
name|get
argument_list|()
operator|+
name|newChange
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|">"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedHeaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedHeaders
operator|.
name|put
argument_list|(
literal|"Gerrit-PatchSet"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|expectedHeaders
operator|.
name|put
argument_list|(
literal|"Gerrit-Change-Id"
argument_list|,
name|newChange
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|expectedHeaders
operator|.
name|put
argument_list|(
literal|"Gerrit-MessageType"
argument_list|,
literal|"newchange"
argument_list|)
expr_stmt|;
name|expectedHeaders
operator|.
name|put
argument_list|(
literal|"Gerrit-Commit"
argument_list|,
name|newChange
operator|.
name|getCommit
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|expectedHeaders
operator|.
name|put
argument_list|(
literal|"Gerrit-ChangeURL"
argument_list|,
name|changeURL
argument_list|)
expr_stmt|;
name|assertHeaders
argument_list|(
name|message
operator|.
name|headers
argument_list|()
argument_list|,
name|expectedHeaders
argument_list|)
expr_stmt|;
comment|// Remove metadata that is not present in email
name|expectedHeaders
operator|.
name|remove
argument_list|(
literal|"Gerrit-ChangeURL"
argument_list|)
expr_stmt|;
name|expectedHeaders
operator|.
name|remove
argument_list|(
literal|"Gerrit-Commit"
argument_list|)
expr_stmt|;
name|assertTextFooter
argument_list|(
name|message
operator|.
name|body
argument_list|()
argument_list|,
name|expectedHeaders
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|metadataOnNewComment ()
specifier|public
name|void
name|metadataOnNewComment
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|newChange
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|newChange
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Review change
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|message
operator|=
literal|"Test"
expr_stmt|;
name|revision
argument_list|(
name|newChange
argument_list|)
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|result
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|newChange
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|messages
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|FakeEmailSender
operator|.
name|Message
argument_list|>
name|emails
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|emails
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|FakeEmailSender
operator|.
name|Message
name|message
init|=
name|emails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|changeURL
init|=
literal|"<"
operator|+
name|canonicalWebUrl
operator|.
name|get
argument_list|()
operator|+
name|newChange
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|">"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedHeaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedHeaders
operator|.
name|put
argument_list|(
literal|"Gerrit-PatchSet"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|expectedHeaders
operator|.
name|put
argument_list|(
literal|"Gerrit-Change-Id"
argument_list|,
name|newChange
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|expectedHeaders
operator|.
name|put
argument_list|(
literal|"Gerrit-MessageType"
argument_list|,
literal|"comment"
argument_list|)
expr_stmt|;
name|expectedHeaders
operator|.
name|put
argument_list|(
literal|"Gerrit-Commit"
argument_list|,
name|newChange
operator|.
name|getCommit
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|expectedHeaders
operator|.
name|put
argument_list|(
literal|"Gerrit-ChangeURL"
argument_list|,
name|changeURL
argument_list|)
expr_stmt|;
name|expectedHeaders
operator|.
name|put
argument_list|(
literal|"Gerrit-Comment-Date"
argument_list|,
name|Iterables
operator|.
name|getLast
argument_list|(
name|result
argument_list|)
operator|.
name|date
argument_list|)
expr_stmt|;
name|assertHeaders
argument_list|(
name|message
operator|.
name|headers
argument_list|()
argument_list|,
name|expectedHeaders
argument_list|)
expr_stmt|;
comment|// Remove metadata that is not present in email
name|expectedHeaders
operator|.
name|remove
argument_list|(
literal|"Gerrit-ChangeURL"
argument_list|)
expr_stmt|;
name|expectedHeaders
operator|.
name|remove
argument_list|(
literal|"Gerrit-Commit"
argument_list|)
expr_stmt|;
name|assertTextFooter
argument_list|(
name|message
operator|.
name|body
argument_list|()
argument_list|,
name|expectedHeaders
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHeaders (Map<String, EmailHeader> have, Map<String, Object> want)
specifier|private
specifier|static
name|void
name|assertHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|EmailHeader
argument_list|>
name|have
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|want
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|want
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|assertThat
argument_list|(
name|have
argument_list|)
operator|.
name|containsEntry
argument_list|(
literal|"X-"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|EmailHeader
operator|.
name|String
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Date
condition|)
block|{
name|assertThat
argument_list|(
name|have
argument_list|)
operator|.
name|containsEntry
argument_list|(
literal|"X-"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|EmailHeader
operator|.
name|Date
argument_list|(
operator|(
name|Date
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Object has unsupported type: "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" must be java.util.Date or java.lang.String for key "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|assertTextFooter (String body, Map<String, Object> want)
specifier|private
specifier|static
name|void
name|assertTextFooter
parameter_list|(
name|String
name|body
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|want
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|want
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|assertThat
argument_list|(
name|body
argument_list|)
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|": "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Timestamp
condition|)
block|{
name|assertThat
argument_list|(
name|body
argument_list|)
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|": "
operator|+
name|MailUtil
operator|.
name|rfcDateformatter
operator|.
name|format
argument_list|(
name|ZonedDateTime
operator|.
name|ofInstant
argument_list|(
operator|(
operator|(
name|Timestamp
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|toInstant
argument_list|()
argument_list|,
name|ZoneId
operator|.
name|of
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Object has unsupported type: "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" must be java.util.Date or java.lang.String for key "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

