begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|assertPushOk
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|assertPushRejected
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|pushHead
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
operator|.
name|category
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
operator|.
name|value
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|InheritableBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeMessageInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|EditInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|LabelInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|FakeEmailSender
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestTimeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RefSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|AbstractPushForReview
specifier|public
specifier|abstract
class|class
name|AbstractPushForReview
extends|extends
name|AbstractDaemonTest
block|{
DECL|enum|Protocol
specifier|protected
enum|enum
name|Protocol
block|{
comment|// TODO(dborowitz): TEST.
DECL|enumConstant|SSH
DECL|enumConstant|HTTP
name|SSH
block|,
name|HTTP
block|}
DECL|field|sshUrl
specifier|private
name|String
name|sshUrl
decl_stmt|;
DECL|field|patchSetLock
specifier|private
name|LabelType
name|patchSetLock
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setTimeForTesting ()
specifier|public
specifier|static
name|void
name|setTimeForTesting
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|restoreTime ()
specifier|public
specifier|static
name|void
name|restoreTime
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|sshUrl
operator|=
name|adminSshSession
operator|.
name|getUrl
argument_list|()
expr_stmt|;
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|patchSetLock
operator|=
name|Util
operator|.
name|patchSetLock
argument_list|()
expr_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|patchSetLock
operator|.
name|getName
argument_list|()
argument_list|,
name|patchSetLock
argument_list|)
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|anonymousUsers
init|=
name|SystemGroupBackend
operator|.
name|getGroup
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|cfg
argument_list|,
name|Permission
operator|.
name|forLabel
argument_list|(
name|patchSetLock
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|anonymousUsers
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|Permission
operator|.
name|LABEL
operator|+
literal|"Patch-Set-Lock"
argument_list|,
name|project
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
block|}
DECL|method|selectProtocol (Protocol p)
specifier|protected
name|void
name|selectProtocol
parameter_list|(
name|Protocol
name|p
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|url
decl_stmt|;
switch|switch
condition|(
name|p
condition|)
block|{
case|case
name|SSH
case|:
name|url
operator|=
name|sshUrl
expr_stmt|;
break|break;
case|case
name|HTTP
case|:
name|url
operator|=
name|admin
operator|.
name|getHttpUrl
argument_list|(
name|server
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unexpected protocol: "
operator|+
name|p
argument_list|)
throw|;
block|}
name|testRepo
operator|=
name|GitUtil
operator|.
name|cloneProject
argument_list|(
name|project
argument_list|,
name|url
operator|+
literal|"/"
operator|+
name|project
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMaster ()
specifier|public
name|void
name|pushForMaster
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|output ()
specifier|public
name|void
name|output
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|canonicalWebUrl
operator|.
name|get
argument_list|()
decl_stmt|;
name|ObjectId
name|initialHead
init|=
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"HEAD"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|id1
init|=
name|r1
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|r1
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r1
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|r1
operator|.
name|assertMessage
argument_list|(
literal|"New changes:\n"
operator|+
literal|"  "
operator|+
name|url
operator|+
name|id1
operator|+
literal|" "
operator|+
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|String
name|newMsg
init|=
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
operator|+
literal|" v2"
decl_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
name|newMsg
argument_list|)
operator|.
name|insertChangeId
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"another commit"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"bbb"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|id2
init|=
name|r2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|r2
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r2
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|r2
operator|.
name|assertMessage
argument_list|(
literal|"New changes:\n"
operator|+
literal|"  "
operator|+
name|url
operator|+
name|id2
operator|+
literal|" another commit\n"
operator|+
literal|"\n"
operator|+
literal|"\n"
operator|+
literal|"Updated changes:\n"
operator|+
literal|"  "
operator|+
name|url
operator|+
name|id1
operator|+
literal|" "
operator|+
name|newMsg
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithTopic ()
specifier|public
name|void
name|pushForMasterWithTopic
parameter_list|()
throws|throws
name|Exception
block|{
comment|// specify topic in ref
name|String
name|topic
init|=
literal|"my/topic"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master/"
operator|+
name|topic
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|topic
argument_list|)
expr_stmt|;
comment|// specify topic as option
name|r
operator|=
name|pushTo
argument_list|(
literal|"refs/for/master%topic="
operator|+
name|topic
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|topic
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithTopicOption ()
specifier|public
name|void
name|pushForMasterWithTopicOption
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|topicOption
init|=
literal|"topic=myTopic"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|pushOptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|pushOptions
operator|.
name|add
argument_list|(
name|topicOption
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|push
operator|.
name|setPushOptions
argument_list|(
name|pushOptions
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|"myTopic"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertPushOptions
argument_list|(
name|pushOptions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithNotify ()
specifier|public
name|void
name|pushForMasterWithNotify
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|user2
init|=
name|accounts
operator|.
name|user2
argument_list|()
decl_stmt|;
name|String
name|pushSpec
init|=
literal|"refs/for/master"
operator|+
literal|"%reviewer="
operator|+
name|user
operator|.
name|email
operator|+
literal|",cc="
operator|+
name|user2
operator|.
name|email
decl_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",notify="
operator|+
name|NotifyHandling
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",notify="
operator|+
name|NotifyHandling
operator|.
name|OWNER
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// no email notification about own changes
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",notify="
operator|+
name|NotifyHandling
operator|.
name|OWNER_REVIEWERS
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",notify="
operator|+
name|NotifyHandling
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|m
operator|=
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|emailAddress
argument_list|,
name|user2
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithCc ()
specifier|public
name|void
name|pushForMasterWithCc
parameter_list|()
throws|throws
name|Exception
block|{
comment|// cc one user
name|String
name|topic
init|=
literal|"my/topic"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%cc="
operator|+
name|user
operator|.
name|email
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|topic
argument_list|)
expr_stmt|;
comment|// cc several users
name|TestAccount
name|user2
init|=
name|accounts
operator|.
name|create
argument_list|(
literal|"another-user"
argument_list|,
literal|"another.user@example.com"
argument_list|,
literal|"Another User"
argument_list|)
decl_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%cc="
operator|+
name|admin
operator|.
name|email
operator|+
literal|",cc="
operator|+
name|user
operator|.
name|email
operator|+
literal|",cc="
operator|+
name|user2
operator|.
name|email
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|topic
argument_list|)
expr_stmt|;
comment|// cc non-existing user
name|String
name|nonExistingEmail
init|=
literal|"non.existing@example.com"
decl_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%cc="
operator|+
name|admin
operator|.
name|email
operator|+
literal|",cc="
operator|+
name|nonExistingEmail
operator|+
literal|",cc="
operator|+
name|user
operator|.
name|email
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"user \""
operator|+
name|nonExistingEmail
operator|+
literal|"\" not found"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithReviewer ()
specifier|public
name|void
name|pushForMasterWithReviewer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add one reviewer
name|String
name|topic
init|=
literal|"my/topic"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%r="
operator|+
name|user
operator|.
name|email
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|topic
argument_list|,
name|user
argument_list|)
expr_stmt|;
comment|// add several reviewers
name|TestAccount
name|user2
init|=
name|accounts
operator|.
name|create
argument_list|(
literal|"another-user"
argument_list|,
literal|"another.user@example.com"
argument_list|,
literal|"Another User"
argument_list|)
decl_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%r="
operator|+
name|admin
operator|.
name|email
operator|+
literal|",r="
operator|+
name|user
operator|.
name|email
operator|+
literal|",r="
operator|+
name|user2
operator|.
name|email
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// admin is the owner of the change and should not appear as reviewer
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|topic
argument_list|,
name|user
argument_list|,
name|user2
argument_list|)
expr_stmt|;
comment|// add non-existing user as reviewer
name|String
name|nonExistingEmail
init|=
literal|"non.existing@example.com"
decl_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%r="
operator|+
name|admin
operator|.
name|email
operator|+
literal|",r="
operator|+
name|nonExistingEmail
operator|+
literal|",r="
operator|+
name|user
operator|.
name|email
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"user \""
operator|+
name|nonExistingEmail
operator|+
literal|"\" not found"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterAsDraft ()
specifier|public
name|void
name|pushForMasterAsDraft
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create draft by pushing to 'refs/drafts/'
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/drafts/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|DRAFT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// create draft by using 'draft' option
name|r
operator|=
name|pushTo
argument_list|(
literal|"refs/for/master%draft"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|DRAFT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishDraftChangeByPushingNonDraftPatchSet ()
specifier|public
name|void
name|publishDraftChangeByPushingNonDraftPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create draft change
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/drafts/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|DRAFT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// publish draft change by pushing non-draft patch set
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterAsEdit ()
specifier|public
name|void
name|pushForMasterAsEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|EditInfo
name|edit
init|=
name|getEdit
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// specify edit as option
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master%edit"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|edit
operator|=
name|getEdit
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertMessage
argument_list|(
literal|"Updated Changes:\n  "
operator|+
name|canonicalWebUrl
operator|.
name|get
argument_list|()
operator|+
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|" "
operator|+
name|edit
operator|.
name|commit
operator|.
name|subject
operator|+
literal|" [EDIT]\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithMessage ()
specifier|public
name|void
name|pushForMasterWithMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master/%m=my_test_message"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ChangeInfo
name|ci
init|=
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|changeMessages
init|=
name|ci
operator|.
name|messages
decl_stmt|;
name|assertThat
argument_list|(
name|changeMessages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeMessageInfo
name|cm
range|:
name|changeMessages
control|)
block|{
name|assertThat
argument_list|(
name|cm
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1.\nmy test message"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithApprovals ()
specifier|public
name|void
name|pushForMasterWithApprovals
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master/%l=Code-Review"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ChangeInfo
name|ci
init|=
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|LabelInfo
name|cr
init|=
name|ci
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Administrator"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|ci
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1: Code-Review+1."
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master/%l=Code-Review+2"
argument_list|)
expr_stmt|;
name|ci
operator|=
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|=
name|ci
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|ci
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 2: Code-Review+2."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Administrator"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"c.txt"
argument_list|,
literal|"moreContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master/%l=Code-Review+2"
argument_list|)
expr_stmt|;
name|ci
operator|=
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|ci
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 3."
argument_list|)
expr_stmt|;
block|}
comment|/**    * There was a bug that allowed a user with Forge Committer Identity access    * right to upload a commit and put *votes on behalf of another user* on it.    * This test checks that this is not possible, but that the votes that are    * specified on push are applied only on behalf of the uploader.    *    * This particular bug only occurred when there was more than one label    * defined. However to test that the votes that are specified on push are    * applied on behalf of the uploader a single label is sufficient.    */
annotation|@
name|Test
DECL|method|pushForMasterWithApprovalsForgeCommitterButNoForgeVote ()
specifier|public
name|void
name|pushForMasterWithApprovalsForgeCommitterButNoForgeVote
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a commit with "User" as author and committer
name|RevCommit
name|c
init|=
name|commitBuilder
argument_list|()
operator|.
name|author
argument_list|(
name|user
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|committer
argument_list|(
name|user
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
name|PushOneCommit
operator|.
name|FILE_CONTENT
argument_list|)
operator|.
name|message
argument_list|(
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Push this commit as "Administrator" (requires Forge Committer Identity)
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master/%l=Code-Review+1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Expected Code-Review votes:
comment|// 1. 0 from User (committer):
comment|//    When the committer is forged, the committer is automatically added as
comment|//    reviewer, hence we expect a dummy 0 vote for the committer.
comment|// 2. +1 from Administrator (uploader):
comment|//    On push Code-Review+1 was specified, hence we expect a +1 vote from
comment|//    the uploader.
name|ChangeInfo
name|ci
init|=
name|get
argument_list|(
name|GitUtil
operator|.
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|c
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|LabelInfo
name|cr
init|=
name|ci
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|int
name|indexAdmin
init|=
name|admin
operator|.
name|fullName
operator|.
name|equals
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|int
name|indexUser
init|=
name|indexAdmin
operator|==
literal|0
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
name|indexAdmin
argument_list|)
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|fullName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
name|indexAdmin
argument_list|)
operator|.
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
name|indexUser
argument_list|)
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|fullName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
name|indexUser
argument_list|)
operator|.
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|ci
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1: Code-Review+1."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithMultipleApprovals ()
specifier|public
name|void
name|pushWithMultipleApprovals
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelType
name|Q
init|=
name|category
argument_list|(
literal|"Custom-Label"
argument_list|,
name|value
argument_list|(
literal|1
argument_list|,
literal|"Positive"
argument_list|)
argument_list|,
name|value
argument_list|(
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|,
name|value
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Negative"
argument_list|)
argument_list|)
decl_stmt|;
name|ProjectConfig
name|config
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|anon
init|=
name|SystemGroupBackend
operator|.
name|getGroup
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|String
name|heads
init|=
literal|"refs/heads/*"
decl_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|config
argument_list|,
name|Permission
operator|.
name|forLabel
argument_list|(
literal|"Custom-Label"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
name|anon
argument_list|,
name|heads
argument_list|)
expr_stmt|;
name|config
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|Q
operator|.
name|getName
argument_list|()
argument_list|,
name|Q
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|RevCommit
name|c
init|=
name|commitBuilder
argument_list|()
operator|.
name|author
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|committer
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
name|PushOneCommit
operator|.
name|FILE_CONTENT
argument_list|)
operator|.
name|message
argument_list|(
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master/%l=Code-Review+1,l=Custom-Label-1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ChangeInfo
name|ci
init|=
name|get
argument_list|(
name|GitUtil
operator|.
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|c
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|LabelInfo
name|cr
init|=
name|ci
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cr
operator|=
name|ci
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Custom-Label"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushNewPatchsetToRefsChanges ()
specifier|public
name|void
name|pushNewPatchsetToRefsChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/changes/"
operator|+
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushNewPatchsetToPatchSetLockedChange ()
specifier|public
name|void
name|pushNewPatchsetToPatchSetLockedChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
operator|.
name|label
argument_list|(
literal|"Patch-Set-Lock"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"cannot add patch set to "
operator|+
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getChangeId
argument_list|()
operator|+
literal|". Change is patch set locked."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithApprovals_MissingLabel ()
specifier|public
name|void
name|pushForMasterWithApprovals_MissingLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master/%l=Verify"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"label \"Verify\" is not a configured label"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithApprovals_ValueOutOfRange ()
specifier|public
name|void
name|pushForMasterWithApprovals_ValueOutOfRange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master/%l=Code-Review-3"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"label \"Code-Review\": -3 is not a valid value"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForNonExistingBranch ()
specifier|public
name|void
name|pushForNonExistingBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|branchName
init|=
literal|"non-existing"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/"
operator|+
name|branchName
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"branch "
operator|+
name|branchName
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithHashtags ()
specifier|public
name|void
name|pushForMasterWithHashtags
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Hashtags only work when reading from NoteDB is enabled
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// specify a single hashtag as option
name|String
name|hashtag1
init|=
literal|"tag1"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|hashtag1
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%hashtag=#"
operator|+
name|hashtag1
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|getHashtags
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|hashtags
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
comment|// specify a single hashtag as option in new patch set
name|String
name|hashtag2
init|=
literal|"tag2"
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master/%hashtag="
operator|+
name|hashtag2
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|expected
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|hashtag1
argument_list|,
name|hashtag2
argument_list|)
expr_stmt|;
name|hashtags
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|getHashtags
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|hashtags
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithMultipleHashtags ()
specifier|public
name|void
name|pushForMasterWithMultipleHashtags
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Hashtags only work when reading from NoteDB is enabled
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// specify multiple hashtags as options
name|String
name|hashtag1
init|=
literal|"tag1"
decl_stmt|;
name|String
name|hashtag2
init|=
literal|"tag2"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|hashtag1
argument_list|,
name|hashtag2
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%hashtag=#"
operator|+
name|hashtag1
operator|+
literal|",hashtag=##"
operator|+
name|hashtag2
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|getHashtags
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|hashtags
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
comment|// specify multiple hashtags as options in new patch set
name|String
name|hashtag3
init|=
literal|"tag3"
decl_stmt|;
name|String
name|hashtag4
init|=
literal|"tag4"
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master%hashtag="
operator|+
name|hashtag3
operator|+
literal|",hashtag="
operator|+
name|hashtag4
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|expected
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|hashtag1
argument_list|,
name|hashtag2
argument_list|,
name|hashtag3
argument_list|,
name|hashtag4
argument_list|)
expr_stmt|;
name|hashtags
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|getHashtags
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|hashtags
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithHashtagsNoteDbDisabled ()
specifier|public
name|void
name|pushForMasterWithHashtagsNoteDbDisabled
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Push with hashtags should fail when reading from NoteDb is disabled.
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%hashtag=tag1"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"cannot add hashtags; noteDb is disabled"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushCommitUsingSignedOffBy ()
specifier|public
name|void
name|pushCommitUsingSignedOffBy
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|setUseSignedOffBy
argument_list|(
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|blockForgeCommitter
argument_list|(
name|project
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"\n\nSigned-off-by: %s<%s>"
argument_list|,
name|admin
operator|.
name|fullName
argument_list|,
name|admin
operator|.
name|email
argument_list|)
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|)
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|)
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"not Signed-off-by author/committer/uploader in commit message footer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createNewChangeForAllNotInTarget ()
specifier|public
name|void
name|createNewChangeForAllNotInTarget
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectConfig
name|config
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|getProject
argument_list|()
operator|.
name|setCreateNewChangeForAllNotInTarget
argument_list|(
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|)
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"otherBranch"
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/otherBranch"
argument_list|)
decl_stmt|;
name|r2
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertTwoChangesWithSameRevision
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushSameCommitTwiceUsingMagicBranchBaseOption ()
specifier|public
name|void
name|pushSameCommitTwiceUsingMagicBranchBaseOption
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|,
name|project
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|rBase
init|=
name|pushTo
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|rBase
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushResult
name|pr
init|=
name|GitUtil
operator|.
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/foo%base="
operator|+
name|rBase
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|pr
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"changes: new: 1, refs: 1, done"
argument_list|)
expr_stmt|;
name|assertTwoChangesWithSameRevision
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTwoChangesWithSameRevision (PushOneCommit.Result result)
specifier|private
name|void
name|assertTwoChangesWithSameRevision
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|changes
init|=
name|query
argument_list|(
name|result
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changes
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c1
init|=
name|get
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|id
argument_list|)
decl_stmt|;
name|ChangeInfo
name|c2
init|=
name|get
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|project
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c2
operator|.
name|project
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|branch
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|c2
operator|.
name|branch
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c2
operator|.
name|changeId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|currentRevision
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c2
operator|.
name|currentRevision
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushAFewChanges ()
specifier|public
name|void
name|pushAFewChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|n
init|=
literal|10
decl_stmt|;
name|String
name|r
init|=
literal|"refs/for/master"
decl_stmt|;
name|ObjectId
name|initialHead
init|=
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"HEAD"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RevCommit
argument_list|>
name|commits
init|=
name|createChanges
argument_list|(
name|n
argument_list|,
name|r
argument_list|)
decl_stmt|;
comment|// Check that a change was created for each.
for|for
control|(
name|RevCommit
name|c
range|:
name|commits
control|)
block|{
name|assertThat
argument_list|(
name|byCommit
argument_list|(
name|c
argument_list|)
operator|.
name|change
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"change for "
operator|+
name|c
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|RevCommit
argument_list|>
name|commits2
init|=
name|amendChanges
argument_list|(
name|initialHead
argument_list|,
name|commits
argument_list|,
name|r
argument_list|)
decl_stmt|;
comment|// Check that there are correct patch sets.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|RevCommit
name|c
init|=
name|commits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RevCommit
name|c2
init|=
name|commits2
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|"change for "
operator|+
name|c2
operator|.
name|name
argument_list|()
decl_stmt|;
name|ChangeData
name|cd
init|=
name|byCommit
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c2
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getPatchSetRevisions
argument_list|(
name|cd
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
name|c
operator|.
name|name
argument_list|()
argument_list|,
literal|2
argument_list|,
name|c2
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Pushing again results in "no new changes".
name|assertPushRejected
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
argument_list|,
name|r
argument_list|,
literal|"no new changes"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cantAutoCloseChangeAlreadyMergedToBranch ()
specifier|public
name|void
name|cantAutoCloseChangeAlreadyMergedToBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id1
init|=
name|r1
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id2
init|=
name|r2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// Merge change 1 behind Gerrit's back.
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|TestRepository
argument_list|<
name|?
argument_list|>
name|tr
init|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|tr
operator|.
name|branch
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|update
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id2
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|r2
operator|=
name|amendChange
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|r2
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// Change 1 is still new despite being merged into the branch, because
comment|// ReceiveCommits only considers commits between the branch tip (which is
comment|// now the merged change 1) and the push tip (new patch set of change 2).
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id2
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|accidentallyPushNewPatchSetDirectlyToBranchAndRecoverByPushingToRefsChanges ()
specifier|public
name|void
name|accidentallyPushNewPatchSetDirectlyToBranchAndRecoverByPushingToRefsChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|accidentallyPushNewPatchSetDirectlyToBranch
argument_list|()
decl_stmt|;
name|ChangeData
name|cd
init|=
name|byChangeId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|ps1Rev
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|cd
operator|.
name|patchSets
argument_list|()
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|r
init|=
literal|"refs/changes/"
operator|+
name|id
decl_stmt|;
name|assertPushOk
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
argument_list|,
name|r
argument_list|)
expr_stmt|;
comment|// Added a new patch set and auto-closed the change.
name|cd
operator|=
name|byChangeId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getPatchSetRevisions
argument_list|(
name|cd
argument_list|)
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
name|ps1Rev
argument_list|,
literal|2
argument_list|,
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|accidentallyPushNewPatchSetDirectlyToBranchAndCantRecoverByPushingToRefsFor ()
specifier|public
name|void
name|accidentallyPushNewPatchSetDirectlyToBranchAndCantRecoverByPushingToRefsFor
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|accidentallyPushNewPatchSetDirectlyToBranch
argument_list|()
decl_stmt|;
name|ChangeData
name|cd
init|=
name|byChangeId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|ps1Rev
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|cd
operator|.
name|patchSets
argument_list|()
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|r
init|=
literal|"refs/for/master"
decl_stmt|;
name|assertPushRejected
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
argument_list|,
name|r
argument_list|,
literal|"no new changes"
argument_list|)
expr_stmt|;
comment|// Change not updated.
name|cd
operator|=
name|byChangeId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getPatchSetRevisions
argument_list|(
name|cd
argument_list|)
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
name|ps1Rev
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|accidentallyPushNewPatchSetDirectlyToBranch ()
specifier|private
name|Change
operator|.
name|Id
name|accidentallyPushNewPatchSetDirectlyToBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|RevCommit
name|ps1Commit
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
name|Change
name|c
init|=
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
decl_stmt|;
name|RevCommit
name|ps2Commit
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
comment|// Create a new patch set of the change directly in Gerrit's repository,
comment|// without pushing it. In reality it's more likely that the client would
comment|// create and push this behind Gerrit's back (e.g. an admin accidentally
comment|// using direct ssh access to the repo), but that's harder to do in tests.
name|TestRepository
argument_list|<
name|?
argument_list|>
name|tr
init|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|ps2Commit
operator|=
name|tr
operator|.
name|branch
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
name|ps1Commit
operator|.
name|getShortMessage
argument_list|()
operator|+
literal|" v2"
argument_list|)
operator|.
name|insertChangeId
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"refs/heads/master"
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|ps2Commit
argument_list|)
expr_stmt|;
name|ChangeData
name|cd
init|=
name|byCommit
argument_list|(
name|ps1Commit
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getPatchSetRevisions
argument_list|(
name|cd
argument_list|)
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
name|ps1Commit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|pushWithEmailInFooter ()
specifier|public
name|void
name|pushWithEmailInFooter
parameter_list|()
throws|throws
name|Exception
block|{
name|pushWithReviewerInFooter
argument_list|(
name|user
operator|.
name|emailAddress
operator|.
name|toString
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithNameInFooter ()
specifier|public
name|void
name|pushWithNameInFooter
parameter_list|()
throws|throws
name|Exception
block|{
name|pushWithReviewerInFooter
argument_list|(
name|user
operator|.
name|fullName
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithEmailInFooterNotFound ()
specifier|public
name|void
name|pushWithEmailInFooterNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|pushWithReviewerInFooter
argument_list|(
operator|new
name|Address
argument_list|(
literal|"No Body"
argument_list|,
literal|"notarealuser@example.com"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithNameInFooterNotFound ()
specifier|public
name|void
name|pushWithNameInFooterNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|pushWithReviewerInFooter
argument_list|(
literal|"Notauser"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// TODO(dborowitz): This is to exercise a specific case in the database search
comment|// path. Once the account index becomes obligatory this method can be removed.
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"index.testDisable"
argument_list|,
name|value
operator|=
literal|"accounts"
argument_list|)
DECL|method|pushWithNameInFooterNotFoundWithDbSearch ()
specifier|public
name|void
name|pushWithNameInFooterNotFoundWithDbSearch
parameter_list|()
throws|throws
name|Exception
block|{
name|pushWithReviewerInFooter
argument_list|(
literal|"Notauser"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushNewPatchsetOverridingStickyLabel ()
specifier|public
name|void
name|pushNewPatchsetOverridingStickyLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|LabelType
name|codeReview
init|=
name|Util
operator|.
name|codeReview
argument_list|()
decl_stmt|;
name|codeReview
operator|.
name|setCopyMaxScore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|codeReview
operator|.
name|getName
argument_list|()
argument_list|,
name|codeReview
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%l=Code-Review+2"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master%l=Code-Review+1"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
block|}
DECL|method|pushWithReviewerInFooter (String nameEmail, TestAccount expectedReviewer)
specifier|private
name|void
name|pushWithReviewerInFooter
parameter_list|(
name|String
name|nameEmail
parameter_list|,
name|TestAccount
name|expectedReviewer
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|n
init|=
literal|5
decl_stmt|;
name|String
name|r
init|=
literal|"refs/for/master"
decl_stmt|;
name|ObjectId
name|initialHead
init|=
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"HEAD"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RevCommit
argument_list|>
name|commits
init|=
name|createChanges
argument_list|(
name|n
argument_list|,
name|r
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"Acked-By: "
operator|+
name|nameEmail
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|RevCommit
name|c
init|=
name|commits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ChangeData
name|cd
init|=
name|byCommit
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|"reviewers for "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|expectedReviewer
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|cd
operator|.
name|reviewers
argument_list|()
operator|.
name|all
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|expectedReviewer
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|expectedReviewer
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|byCommit
argument_list|(
name|c
argument_list|)
operator|.
name|reviewers
argument_list|()
operator|.
name|all
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|RevCommit
argument_list|>
name|commits2
init|=
name|amendChanges
argument_list|(
name|initialHead
argument_list|,
name|commits
argument_list|,
name|r
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|RevCommit
name|c
init|=
name|commits2
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ChangeData
name|cd
init|=
name|byCommit
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|"reviewers for "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|expectedReviewer
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|cd
operator|.
name|reviewers
argument_list|()
operator|.
name|all
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|expectedReviewer
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|byCommit
argument_list|(
name|c
argument_list|)
operator|.
name|reviewers
argument_list|()
operator|.
name|all
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|createChanges (int n, String refsFor)
specifier|private
name|List
argument_list|<
name|RevCommit
argument_list|>
name|createChanges
parameter_list|(
name|int
name|n
parameter_list|,
name|String
name|refsFor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createChanges
argument_list|(
name|n
argument_list|,
name|refsFor
argument_list|,
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createChanges (int n, String refsFor, List<String> footerLines)
specifier|private
name|List
argument_list|<
name|RevCommit
argument_list|>
name|createChanges
parameter_list|(
name|int
name|n
parameter_list|,
name|String
name|refsFor
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|footerLines
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|RevCommit
argument_list|>
name|commits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|String
name|msg
init|=
literal|"Change "
operator|+
name|i
decl_stmt|;
if|if
condition|(
operator|!
name|footerLines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|msg
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|footerLines
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|msg
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|TestRepository
argument_list|<
name|?
argument_list|>
operator|.
name|CommitBuilder
name|cb
init|=
name|testRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
name|msg
argument_list|)
operator|.
name|insertChangeId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|commits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cb
operator|.
name|parent
argument_list|(
name|commits
operator|.
name|get
argument_list|(
name|commits
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RevCommit
name|c
init|=
name|cb
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|commits
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|assertPushOk
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|refsFor
argument_list|,
literal|false
argument_list|)
argument_list|,
name|refsFor
argument_list|)
expr_stmt|;
return|return
name|commits
return|;
block|}
DECL|method|amendChanges (ObjectId initialHead, List<RevCommit> origCommits, String refsFor)
specifier|private
name|List
argument_list|<
name|RevCommit
argument_list|>
name|amendChanges
parameter_list|(
name|ObjectId
name|initialHead
parameter_list|,
name|List
argument_list|<
name|RevCommit
argument_list|>
name|origCommits
parameter_list|,
name|String
name|refsFor
parameter_list|)
throws|throws
name|Exception
block|{
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RevCommit
argument_list|>
name|newCommits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|origCommits
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RevCommit
name|c
range|:
name|origCommits
control|)
block|{
name|String
name|msg
init|=
name|c
operator|.
name|getShortMessage
argument_list|()
operator|+
literal|"v2"
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|getShortMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getFullMessage
argument_list|()
argument_list|)
condition|)
block|{
name|msg
operator|=
name|msg
operator|+
name|c
operator|.
name|getFullMessage
argument_list|()
operator|.
name|substring
argument_list|(
name|c
operator|.
name|getShortMessage
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TestRepository
argument_list|<
name|?
argument_list|>
operator|.
name|CommitBuilder
name|cb
init|=
name|testRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
name|msg
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newCommits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cb
operator|.
name|parent
argument_list|(
name|origCommits
operator|.
name|get
argument_list|(
name|newCommits
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RevCommit
name|c2
init|=
name|cb
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|newCommits
operator|.
name|add
argument_list|(
name|c2
argument_list|)
expr_stmt|;
block|}
name|assertPushOk
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|refsFor
argument_list|,
literal|false
argument_list|)
argument_list|,
name|refsFor
argument_list|)
expr_stmt|;
return|return
name|newCommits
return|;
block|}
DECL|method|getPatchSetRevisions (ChangeData cd)
specifier|private
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|getPatchSetRevisions
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|revisions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSet
name|ps
range|:
name|cd
operator|.
name|patchSets
argument_list|()
control|)
block|{
name|revisions
operator|.
name|put
argument_list|(
name|ps
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|revisions
return|;
block|}
DECL|method|byCommit (ObjectId id)
specifier|private
name|ChangeData
name|byCommit
parameter_list|(
name|ObjectId
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ChangeData
argument_list|>
name|cds
init|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byCommit
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cds
argument_list|)
operator|.
name|named
argument_list|(
literal|"change for "
operator|+
name|id
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|cds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|byChangeId (Change.Id id)
specifier|private
name|ChangeData
name|byChangeId
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ChangeData
argument_list|>
name|cds
init|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byLegacyChangeId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cds
argument_list|)
operator|.
name|named
argument_list|(
literal|"change "
operator|+
name|id
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|cds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
end_class

end_unit

