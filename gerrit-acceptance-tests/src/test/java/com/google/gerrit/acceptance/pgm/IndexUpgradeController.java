begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.pgm
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|pgm
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assert_
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|OnlineUpgradeListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|IndexUpgradeController
class|class
name|IndexUpgradeController
implements|implements
name|OnlineUpgradeListener
block|{
annotation|@
name|AutoValue
DECL|class|UpgradeAttempt
specifier|abstract
specifier|static
class|class
name|UpgradeAttempt
block|{
DECL|method|create (String name, int oldVersion, int newVersion)
specifier|static
name|UpgradeAttempt
name|create
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|oldVersion
parameter_list|,
name|int
name|newVersion
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_IndexUpgradeController_UpgradeAttempt
argument_list|(
name|name
argument_list|,
name|oldVersion
argument_list|,
name|newVersion
argument_list|)
return|;
block|}
DECL|method|name ()
specifier|abstract
name|String
name|name
parameter_list|()
function_decl|;
DECL|method|oldVersion ()
specifier|abstract
name|int
name|oldVersion
parameter_list|()
function_decl|;
DECL|method|newVersion ()
specifier|abstract
name|int
name|newVersion
parameter_list|()
function_decl|;
block|}
DECL|field|numExpected
specifier|private
specifier|final
name|int
name|numExpected
decl_stmt|;
DECL|field|readyToStart
specifier|private
specifier|final
name|CountDownLatch
name|readyToStart
decl_stmt|;
DECL|field|started
specifier|private
specifier|final
name|CountDownLatch
name|started
decl_stmt|;
DECL|field|finished
specifier|private
specifier|final
name|CountDownLatch
name|finished
decl_stmt|;
DECL|field|startedAttempts
specifier|private
specifier|final
name|List
argument_list|<
name|UpgradeAttempt
argument_list|>
name|startedAttempts
decl_stmt|;
DECL|field|succeededAttempts
specifier|private
specifier|final
name|List
argument_list|<
name|UpgradeAttempt
argument_list|>
name|succeededAttempts
decl_stmt|;
DECL|field|failedAttempts
specifier|private
specifier|final
name|List
argument_list|<
name|UpgradeAttempt
argument_list|>
name|failedAttempts
decl_stmt|;
DECL|method|IndexUpgradeController (int numExpected)
name|IndexUpgradeController
parameter_list|(
name|int
name|numExpected
parameter_list|)
block|{
name|this
operator|.
name|numExpected
operator|=
name|numExpected
expr_stmt|;
name|readyToStart
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|started
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|numExpected
argument_list|)
expr_stmt|;
name|finished
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|numExpected
argument_list|)
expr_stmt|;
name|startedAttempts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|succeededAttempts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|failedAttempts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|module ()
name|Module
name|module
parameter_list|()
block|{
return|return
operator|new
name|AbstractModule
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|DynamicSet
operator|.
name|bind
argument_list|(
name|binder
argument_list|()
argument_list|,
name|OnlineUpgradeListener
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|IndexUpgradeController
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|onStart (String name, int oldVersion, int newVersion)
specifier|public
specifier|synchronized
name|void
name|onStart
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|oldVersion
parameter_list|,
name|int
name|newVersion
parameter_list|)
block|{
name|UpgradeAttempt
name|a
init|=
name|UpgradeAttempt
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|oldVersion
argument_list|,
name|newVersion
argument_list|)
decl_stmt|;
try|try
block|{
name|readyToStart
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"interrupted waiting to start "
operator|+
name|a
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|checkState
argument_list|(
name|started
operator|.
name|getCount
argument_list|()
operator|>
literal|0
argument_list|,
literal|"already started %s upgrades, can't start %s"
argument_list|,
name|numExpected
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|startedAttempts
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|started
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onSuccess (String name, int oldVersion, int newVersion)
specifier|public
specifier|synchronized
name|void
name|onSuccess
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|oldVersion
parameter_list|,
name|int
name|newVersion
parameter_list|)
block|{
name|finish
argument_list|(
name|UpgradeAttempt
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|oldVersion
argument_list|,
name|newVersion
argument_list|)
argument_list|,
name|succeededAttempts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure (String name, int oldVersion, int newVersion)
specifier|public
specifier|synchronized
name|void
name|onFailure
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|oldVersion
parameter_list|,
name|int
name|newVersion
parameter_list|)
block|{
name|finish
argument_list|(
name|UpgradeAttempt
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|oldVersion
argument_list|,
name|newVersion
argument_list|)
argument_list|,
name|failedAttempts
argument_list|)
expr_stmt|;
block|}
DECL|method|finish (UpgradeAttempt a, List<UpgradeAttempt> out)
specifier|private
specifier|synchronized
name|void
name|finish
parameter_list|(
name|UpgradeAttempt
name|a
parameter_list|,
name|List
argument_list|<
name|UpgradeAttempt
argument_list|>
name|out
parameter_list|)
block|{
name|checkState
argument_list|(
name|readyToStart
operator|.
name|getCount
argument_list|()
operator|==
literal|0
argument_list|,
literal|"shouldn't be finishing upgrade before starting"
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|finished
operator|.
name|getCount
argument_list|()
operator|>
literal|0
argument_list|,
literal|"already finished %s upgrades, can't finish %s"
argument_list|,
name|numExpected
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|finished
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
DECL|method|runUpgrades ()
name|void
name|runUpgrades
parameter_list|()
throws|throws
name|Exception
block|{
name|readyToStart
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// Wait with a timeout. Startup should happen quickly, but bugs preventing upgrading from
comment|// starting might not be that uncommon, so we don't want to have to wait forever to discover
comment|// them.
name|int
name|timeoutSec
init|=
literal|60
decl_stmt|;
if|if
condition|(
operator|!
name|started
operator|.
name|await
argument_list|(
name|timeoutSec
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|assert_
argument_list|()
operator|.
name|fail
argument_list|(
literal|"%s/%s online upgrades started after %ss"
argument_list|,
name|numExpected
operator|-
name|started
operator|.
name|getCount
argument_list|()
argument_list|,
name|numExpected
argument_list|,
name|timeoutSec
argument_list|)
expr_stmt|;
block|}
comment|// Wait with no timeout. Reindexing might be slow, and given that upgrading started
comment|// successfully, it's unlikely there is a bug preventing it from tripping the finished latch
comment|// eventually, even if it takes longer than we might guess.
name|finished
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
DECL|method|getStartedAttempts ()
specifier|synchronized
name|ImmutableList
argument_list|<
name|UpgradeAttempt
argument_list|>
name|getStartedAttempts
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|startedAttempts
argument_list|)
return|;
block|}
DECL|method|getSucceededAttempts ()
specifier|synchronized
name|ImmutableList
argument_list|<
name|UpgradeAttempt
argument_list|>
name|getSucceededAttempts
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|succeededAttempts
argument_list|)
return|;
block|}
DECL|method|getFailedAttempts ()
specifier|synchronized
name|ImmutableList
argument_list|<
name|UpgradeAttempt
argument_list|>
name|getFailedAttempts
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|failedAttempts
argument_list|)
return|;
block|}
block|}
end_class

end_unit

