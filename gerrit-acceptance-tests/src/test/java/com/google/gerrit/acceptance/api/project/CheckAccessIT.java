begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|config
operator|.
name|AccessCheckInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|config
operator|.
name|AccessCheckInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CheckAccessIT
specifier|public
class|class
name|CheckAccessIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|normalProject
specifier|private
name|Project
operator|.
name|NameKey
name|normalProject
decl_stmt|;
DECL|field|secretProject
specifier|private
name|Project
operator|.
name|NameKey
name|secretProject
decl_stmt|;
DECL|field|secretRefProject
specifier|private
name|Project
operator|.
name|NameKey
name|secretRefProject
decl_stmt|;
DECL|field|privilegedUser
specifier|private
name|TestAccount
name|privilegedUser
decl_stmt|;
DECL|field|privilegedGroup
specifier|private
name|AccountGroup
name|privilegedGroup
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|normalProject
operator|=
name|createProject
argument_list|(
literal|"normal"
argument_list|)
expr_stmt|;
name|secretProject
operator|=
name|createProject
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|secretRefProject
operator|=
name|createProject
argument_list|(
literal|"secretRef"
argument_list|)
expr_stmt|;
name|privilegedGroup
operator|=
name|groupCache
operator|.
name|get
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|createGroup
argument_list|(
literal|"privilegedGroup"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|privilegedUser
operator|=
name|accountCreator
operator|.
name|create
argument_list|(
literal|"privilegedUser"
argument_list|,
literal|"snowden@nsa.gov"
argument_list|,
literal|"Ed Snowden"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|privilegedGroup
operator|.
name|getGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|addMembers
argument_list|(
name|privilegedUser
operator|.
name|username
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|privilegedGroup
operator|.
name|getGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|members
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|email
argument_list|)
operator|.
name|contains
argument_list|(
literal|"snowden"
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|secretProject
argument_list|,
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
literal|false
argument_list|,
name|privilegedGroup
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|secretProject
argument_list|,
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
comment|// deny/grant/block arg ordering is screwy.
name|deny
argument_list|(
name|secretRefProject
argument_list|,
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|secretRefProject
argument_list|,
literal|"refs/heads/secret/*"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
literal|false
argument_list|,
name|privilegedGroup
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|secretRefProject
argument_list|,
literal|"refs/heads/secret/*"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|secretRefProject
argument_list|,
literal|"refs/heads/*"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
literal|false
argument_list|,
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyInput ()
specifier|public
name|void
name|emptyInput
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"input requires 'account'"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|normalProject
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|checkAccess
argument_list|(
operator|new
name|AccessCheckInput
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nonexistentEmail ()
specifier|public
name|void
name|nonexistentEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|UnprocessableEntityException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"cannot find account doesnotexist@invalid.com"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|normalProject
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|checkAccess
argument_list|(
operator|new
name|AccessCheckInput
argument_list|(
literal|"doesnotexist@invalid.com"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|TestCase
specifier|private
specifier|static
class|class
name|TestCase
block|{
DECL|field|input
name|AccessCheckInput
name|input
decl_stmt|;
DECL|field|project
name|String
name|project
decl_stmt|;
DECL|field|want
name|int
name|want
decl_stmt|;
DECL|method|TestCase (String mail, String project, String ref, int want)
name|TestCase
parameter_list|(
name|String
name|mail
parameter_list|,
name|String
name|project
parameter_list|,
name|String
name|ref
parameter_list|,
name|int
name|want
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
operator|new
name|AccessCheckInput
argument_list|(
name|mail
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
name|this
operator|.
name|want
operator|=
name|want
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|accessible ()
specifier|public
name|void
name|accessible
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TestCase
argument_list|>
name|inputs
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|TestCase
argument_list|(
name|user
operator|.
name|email
argument_list|,
name|normalProject
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|200
argument_list|)
argument_list|,
operator|new
name|TestCase
argument_list|(
name|user
operator|.
name|email
argument_list|,
name|secretProject
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|403
argument_list|)
argument_list|,
operator|new
name|TestCase
argument_list|(
name|user
operator|.
name|email
argument_list|,
name|secretRefProject
operator|.
name|get
argument_list|()
argument_list|,
literal|"refs/heads/secret/master"
argument_list|,
literal|403
argument_list|)
argument_list|,
operator|new
name|TestCase
argument_list|(
name|privilegedUser
operator|.
name|email
argument_list|,
name|secretRefProject
operator|.
name|get
argument_list|()
argument_list|,
literal|"refs/heads/secret/master"
argument_list|,
literal|200
argument_list|)
argument_list|,
operator|new
name|TestCase
argument_list|(
name|privilegedUser
operator|.
name|email
argument_list|,
name|normalProject
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|200
argument_list|)
argument_list|,
operator|new
name|TestCase
argument_list|(
name|privilegedUser
operator|.
name|email
argument_list|,
name|secretProject
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|200
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|TestCase
name|tc
range|:
name|inputs
control|)
block|{
name|String
name|in
init|=
name|newGson
argument_list|()
operator|.
name|toJson
argument_list|(
name|tc
operator|.
name|input
argument_list|)
decl_stmt|;
name|AccessCheckInfo
name|info
init|=
literal|null
decl_stmt|;
try|try
block|{
name|info
operator|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|tc
operator|.
name|project
argument_list|)
operator|.
name|checkAccess
argument_list|(
name|tc
operator|.
name|input
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RestApiException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"check.access(%s, %s): exception %s"
argument_list|,
name|tc
operator|.
name|project
argument_list|,
name|in
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|want
init|=
name|tc
operator|.
name|want
decl_stmt|;
if|if
condition|(
name|want
operator|!=
name|info
operator|.
name|status
condition|)
block|{
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"check.access(%s, %s) = %d, want %d"
argument_list|,
name|tc
operator|.
name|project
argument_list|,
name|in
argument_list|,
name|info
operator|.
name|status
argument_list|,
name|want
argument_list|)
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|want
condition|)
block|{
case|case
literal|403
case|:
name|assertThat
argument_list|(
name|info
operator|.
name|message
argument_list|)
operator|.
name|contains
argument_list|(
literal|"cannot see"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|404
case|:
name|assertThat
argument_list|(
name|info
operator|.
name|message
argument_list|)
operator|.
name|contains
argument_list|(
literal|"does not exist"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|200
case|:
name|assertThat
argument_list|(
name|info
operator|.
name|message
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"unknown code %d"
argument_list|,
name|want
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

