begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.group
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|group
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Collections2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|groups
operator|.
name|GroupInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|ListGroupIncludesIT
specifier|public
class|class
name|ListGroupIncludesIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Test
DECL|method|listNonExistingGroupIncludes_NotFound ()
specifier|public
name|void
name|listNonExistingGroupIncludes_NotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"non-existing"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|adminSession
operator|.
name|get
argument_list|(
literal|"/groups/"
operator|+
name|name
operator|+
literal|"/groups/"
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listEmptyGroupIncludes ()
specifier|public
name|void
name|listEmptyGroupIncludes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|gx
init|=
name|group
argument_list|(
literal|"gx"
argument_list|,
literal|"Administrators"
argument_list|)
decl_stmt|;
name|PUT
argument_list|(
literal|"/groups/"
operator|+
name|gx
operator|+
literal|"/groups/"
operator|+
name|name
argument_list|(
literal|"emptygroup"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GET
argument_list|(
literal|"/groups/Administrators/groups/"
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listNonEmptyGroupIncludes ()
specifier|public
name|void
name|listNonEmptyGroupIncludes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|gx
init|=
name|group
argument_list|(
literal|"gx"
argument_list|,
literal|"Administrators"
argument_list|)
decl_stmt|;
name|String
name|gy
init|=
name|group
argument_list|(
literal|"gy"
argument_list|,
literal|"Administrators"
argument_list|)
decl_stmt|;
name|String
name|gz
init|=
name|group
argument_list|(
literal|"gz"
argument_list|,
literal|"Administrators"
argument_list|)
decl_stmt|;
name|PUT
argument_list|(
literal|"/groups/"
operator|+
name|gx
operator|+
literal|"/groups/"
operator|+
name|gy
argument_list|)
expr_stmt|;
name|PUT
argument_list|(
literal|"/groups/"
operator|+
name|gx
operator|+
literal|"/groups/"
operator|+
name|gz
argument_list|)
expr_stmt|;
name|assertIncludes
argument_list|(
name|GET
argument_list|(
literal|"/groups/"
operator|+
name|gx
operator|+
literal|"/groups/"
argument_list|)
argument_list|,
name|gy
argument_list|,
name|gz
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listOneIncludeMember ()
specifier|public
name|void
name|listOneIncludeMember
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|gx
init|=
name|group
argument_list|(
literal|"gx"
argument_list|,
literal|"Administrators"
argument_list|)
decl_stmt|;
name|String
name|gy
init|=
name|group
argument_list|(
literal|"gy"
argument_list|,
literal|"Administrators"
argument_list|)
decl_stmt|;
name|PUT
argument_list|(
literal|"/groups/"
operator|+
name|gx
operator|+
literal|"/groups/"
operator|+
name|gy
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GET_ONE
argument_list|(
literal|"/groups/"
operator|+
name|gx
operator|+
literal|"/groups/"
operator|+
name|gy
argument_list|)
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|gy
argument_list|)
expr_stmt|;
block|}
DECL|method|GET (String endpoint)
specifier|private
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|GET
parameter_list|(
name|String
name|endpoint
parameter_list|)
throws|throws
name|IOException
block|{
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|get
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
return|return
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|GroupInfo
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
DECL|method|GET_ONE (String endpoint)
specifier|private
name|GroupInfo
name|GET_ONE
parameter_list|(
name|String
name|endpoint
parameter_list|)
throws|throws
name|IOException
block|{
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|get
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
return|return
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
name|GroupInfo
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|PUT (String endpoint)
specifier|private
name|void
name|PUT
parameter_list|(
name|String
name|endpoint
parameter_list|)
throws|throws
name|IOException
block|{
name|adminSession
operator|.
name|put
argument_list|(
name|endpoint
argument_list|)
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
DECL|method|group (String name, String ownerGroup)
specifier|private
name|String
name|group
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|ownerGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|name
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|GroupInput
name|in
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|ownerId
operator|=
name|ownerGroup
expr_stmt|;
name|adminSession
operator|.
name|put
argument_list|(
literal|"/groups/"
operator|+
name|name
argument_list|,
name|in
argument_list|)
operator|.
name|consume
argument_list|()
expr_stmt|;
return|return
name|name
return|;
block|}
DECL|method|assertIncludes (List<GroupInfo> includes, String name, String... names)
specifier|private
name|void
name|assertIncludes
parameter_list|(
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|includes
parameter_list|,
name|String
name|name
parameter_list|,
name|String
modifier|...
name|names
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|includeNames
init|=
name|Collections2
operator|.
name|transform
argument_list|(
name|includes
argument_list|,
operator|new
name|Function
argument_list|<
name|GroupInfo
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|GroupInfo
name|info
parameter_list|)
block|{
return|return
name|info
operator|.
name|name
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|includeNames
argument_list|)
operator|.
name|contains
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|n
range|:
name|names
control|)
block|{
name|assertThat
argument_list|(
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|includeNames
argument_list|)
operator|.
name|contains
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|includes
argument_list|)
operator|.
name|hasSize
argument_list|(
name|names
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

