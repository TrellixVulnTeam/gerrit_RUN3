begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assert_
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth8
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbChangeState
operator|.
name|NOTE_DB_PRIMARY_STATE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigrationState
operator|.
name|NOTE_DB
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigrationState
operator|.
name|READ_WRITE_NO_SEQUENCE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigrationState
operator|.
name|READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigrationState
operator|.
name|READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigrationState
operator|.
name|REVIEW_DB
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigrationState
operator|.
name|WRITE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createStrictMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expectLastCall
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|Sandboxed
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|UseLocalDisk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|RegistrationHandle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CommentsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|Sequences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeBundle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeBundleReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbChangeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbChangeState
operator|.
name|PrimaryStorage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbChangeState
operator|.
name|RefState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigrationState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|rebuild
operator|.
name|MigrationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|rebuild
operator|.
name|NoteDbMigrator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|rebuild
operator|.
name|NotesMigrationStateListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|ReviewDbFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|ConfigSuite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|NoteDbMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|SimpleFileVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|file
operator|.
name|FileRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|storage
operator|.
name|file
operator|.
name|FileBasedConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|FS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Sandboxed
annotation|@
name|UseLocalDisk
annotation|@
name|NoHttpd
DECL|class|OnlineNoteDbMigrationIT
specifier|public
class|class
name|OnlineNoteDbMigrationIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|INVALID_STATE
specifier|private
specifier|static
specifier|final
name|String
name|INVALID_STATE
init|=
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
decl_stmt|;
annotation|@
name|ConfigSuite
operator|.
name|Default
DECL|method|defaultConfig ()
specifier|public
specifier|static
name|Config
name|defaultConfig
parameter_list|()
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setInt
argument_list|(
literal|"noteDb"
argument_list|,
literal|"changes"
argument_list|,
literal|"sequenceBatchSize"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setInt
argument_list|(
literal|"noteDb"
argument_list|,
literal|"changes"
argument_list|,
literal|"initialSequenceGap"
argument_list|,
literal|500
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
comment|// Tests in this class are generally interested in the actual ReviewDb contents, but the shifting
comment|// migration state may result in various kinds of wrappers showing up unexpectedly.
DECL|field|schemaFactory
annotation|@
name|Inject
annotation|@
name|ReviewDbFactory
specifier|private
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
decl_stmt|;
DECL|field|changeBundleReader
annotation|@
name|Inject
specifier|private
name|ChangeBundleReader
name|changeBundleReader
decl_stmt|;
DECL|field|commentsUtil
annotation|@
name|Inject
specifier|private
name|CommentsUtil
name|commentsUtil
decl_stmt|;
DECL|field|listeners
annotation|@
name|Inject
specifier|private
name|DynamicSet
argument_list|<
name|NotesMigrationStateListener
argument_list|>
name|listeners
decl_stmt|;
DECL|field|migratorBuilderProvider
annotation|@
name|Inject
specifier|private
name|Provider
argument_list|<
name|NoteDbMigrator
operator|.
name|Builder
argument_list|>
name|migratorBuilderProvider
decl_stmt|;
DECL|field|sequences
annotation|@
name|Inject
specifier|private
name|Sequences
name|sequences
decl_stmt|;
DECL|field|sitePaths
annotation|@
name|Inject
specifier|private
name|SitePaths
name|sitePaths
decl_stmt|;
DECL|field|noteDbConfig
specifier|private
name|FileBasedConfig
name|noteDbConfig
decl_stmt|;
DECL|field|addedListeners
specifier|private
name|List
argument_list|<
name|RegistrationHandle
argument_list|>
name|addedListeners
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|NoteDbMode
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|NoteDbMode
operator|.
name|OFF
argument_list|)
expr_stmt|;
comment|// Unlike in the running server, for tests, we don't stack notedb.config on gerrit.config.
name|noteDbConfig
operator|=
operator|new
name|FileBasedConfig
argument_list|(
name|sitePaths
operator|.
name|notedb_config
operator|.
name|toFile
argument_list|()
argument_list|,
name|FS
operator|.
name|detect
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotesMigrationState
argument_list|(
name|REVIEW_DB
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addedListeners
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|addedListeners
operator|!=
literal|null
condition|)
block|{
name|addedListeners
operator|.
name|forEach
argument_list|(
name|RegistrationHandle
operator|::
name|remove
argument_list|)
expr_stmt|;
name|addedListeners
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|preconditionsFail ()
specifier|public
name|void
name|preconditionsFail
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|cs
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|Change
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|ps
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"p"
argument_list|)
argument_list|)
decl_stmt|;
name|assertMigrationException
argument_list|(
literal|"Cannot rebuild without noteDb.changes.write=true"
argument_list|,
name|b
lambda|->
name|b
argument_list|,
name|NoteDbMigrator
operator|::
name|rebuild
argument_list|)
expr_stmt|;
name|assertMigrationException
argument_list|(
literal|"Cannot combine changes, projects and skipProjects"
argument_list|,
name|b
lambda|->
name|b
operator|.
name|setChanges
argument_list|(
name|cs
argument_list|)
operator|.
name|setProjects
argument_list|(
name|ps
argument_list|)
argument_list|,
name|m
lambda|->
block|{}
argument_list|)
expr_stmt|;
name|assertMigrationException
argument_list|(
literal|"Cannot combine changes, projects and skipProjects"
argument_list|,
name|b
lambda|->
name|b
operator|.
name|setChanges
argument_list|(
name|cs
argument_list|)
operator|.
name|setSkipProjects
argument_list|(
name|ps
argument_list|)
argument_list|,
name|m
lambda|->
block|{}
argument_list|)
expr_stmt|;
name|assertMigrationException
argument_list|(
literal|"Cannot combine changes, projects and skipProjects"
argument_list|,
name|b
lambda|->
name|b
operator|.
name|setProjects
argument_list|(
name|ps
argument_list|)
operator|.
name|setSkipProjects
argument_list|(
name|ps
argument_list|)
argument_list|,
name|m
lambda|->
block|{}
argument_list|)
expr_stmt|;
name|assertMigrationException
argument_list|(
literal|"Cannot set changes or projects or skipProjects during full migration"
argument_list|,
name|b
lambda|->
name|b
operator|.
name|setChanges
argument_list|(
name|cs
argument_list|)
argument_list|,
name|NoteDbMigrator
operator|::
name|migrate
argument_list|)
expr_stmt|;
name|assertMigrationException
argument_list|(
literal|"Cannot set changes or projects or skipProjects during full migration"
argument_list|,
name|b
lambda|->
name|b
operator|.
name|setProjects
argument_list|(
name|ps
argument_list|)
argument_list|,
name|NoteDbMigrator
operator|::
name|migrate
argument_list|)
expr_stmt|;
name|assertMigrationException
argument_list|(
literal|"Cannot set changes or projects or skipProjects during full migration"
argument_list|,
name|b
lambda|->
name|b
operator|.
name|setSkipProjects
argument_list|(
name|ps
argument_list|)
argument_list|,
name|NoteDbMigrator
operator|::
name|migrate
argument_list|)
expr_stmt|;
name|setNotesMigrationState
argument_list|(
name|READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY
argument_list|)
expr_stmt|;
name|assertMigrationException
argument_list|(
literal|"Migration has already progressed past the endpoint of the \"trial mode\" state"
argument_list|,
name|b
lambda|->
name|b
operator|.
name|setTrialMode
argument_list|(
literal|true
argument_list|)
argument_list|,
name|NoteDbMigrator
operator|::
name|migrate
argument_list|)
expr_stmt|;
name|setNotesMigrationState
argument_list|(
name|READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY
argument_list|)
expr_stmt|;
name|assertMigrationException
argument_list|(
literal|"Cannot force rebuild changes; NoteDb is already the primary storage for some changes"
argument_list|,
name|b
lambda|->
name|b
operator|.
name|setForceRebuild
argument_list|(
literal|true
argument_list|)
argument_list|,
name|NoteDbMigrator
operator|::
name|migrate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"noteDb.changes.initialSequenceGap"
argument_list|,
name|value
operator|=
literal|"-7"
argument_list|)
DECL|method|initialSequenceGapMustBeNonNegative ()
specifier|public
name|void
name|initialSequenceGapMustBeNonNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|setNotesMigrationState
argument_list|(
name|READ_WRITE_NO_SEQUENCE
argument_list|)
expr_stmt|;
name|assertMigrationException
argument_list|(
literal|"Sequence gap must be non-negative: -7"
argument_list|,
name|b
lambda|->
name|b
argument_list|,
name|m
lambda|->
block|{}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuildOneChangeTrialModeAndForceRebuild ()
specifier|public
name|void
name|rebuildOneChangeTrialModeAndForceRebuild
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|migrate
argument_list|(
name|b
lambda|->
name|b
operator|.
name|setTrialMode
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotesMigrationState
argument_list|(
name|READ_WRITE_NO_SEQUENCE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ObjectId
name|oldMetaId
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|ReviewDb
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|oldMetaId
operator|=
name|ref
operator|.
name|getObjectId
argument_list|()
expr_stmt|;
name|Change
name|c
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|NoteDbChangeState
name|state
init|=
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|state
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getPrimaryStorage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|PrimaryStorage
operator|.
name|REVIEW_DB
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getRefState
argument_list|()
argument_list|)
operator|.
name|hasValue
argument_list|(
name|RefState
operator|.
name|create
argument_list|(
name|oldMetaId
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Force change to be out of date, and change topic so it will get rebuilt as something other
comment|// than oldMetaId.
name|c
operator|.
name|setNoteDbState
argument_list|(
name|INVALID_STATE
argument_list|)
expr_stmt|;
name|c
operator|.
name|setTopic
argument_list|(
name|name
argument_list|(
literal|"a-new-topic"
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|migrate
argument_list|(
name|b
lambda|->
name|b
operator|.
name|setTrialMode
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotesMigrationState
argument_list|(
name|READ_WRITE_NO_SEQUENCE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|ReviewDb
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
init|)
block|{
comment|// Change is out of date, but was not rebuilt without forceRebuild.
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|oldMetaId
argument_list|)
expr_stmt|;
name|Change
name|c
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|getNoteDbState
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|INVALID_STATE
argument_list|)
expr_stmt|;
block|}
name|migrate
argument_list|(
name|b
lambda|->
name|b
operator|.
name|setTrialMode
argument_list|(
literal|true
argument_list|)
operator|.
name|setForceRebuild
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotesMigrationState
argument_list|(
name|READ_WRITE_NO_SEQUENCE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|ReviewDb
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|ObjectId
name|newMetaId
init|=
name|ref
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|newMetaId
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldMetaId
argument_list|)
expr_stmt|;
name|NoteDbChangeState
name|state
init|=
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|state
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getPrimaryStorage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|PrimaryStorage
operator|.
name|REVIEW_DB
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getRefState
argument_list|()
argument_list|)
operator|.
name|hasValue
argument_list|(
name|RefState
operator|.
name|create
argument_list|(
name|newMetaId
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|autoMigrateTrialMode ()
specifier|public
name|void
name|autoMigrateTrialMode
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|migrate
argument_list|(
name|b
lambda|->
name|b
operator|.
name|setAutoMigrate
argument_list|(
literal|true
argument_list|)
operator|.
name|setTrialMode
argument_list|(
literal|true
argument_list|)
operator|.
name|setStopAtStateForTesting
argument_list|(
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotesMigrationState
argument_list|(
name|WRITE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|migrate
argument_list|(
name|b
lambda|->
name|b
argument_list|)
expr_stmt|;
comment|// autoMigrate is still enabled so that we can continue the migration by only unsetting trial.
name|assertNotesMigrationState
argument_list|(
name|READ_WRITE_NO_SEQUENCE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ObjectId
name|metaId
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|ReviewDb
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|metaId
operator|=
name|ref
operator|.
name|getObjectId
argument_list|()
expr_stmt|;
name|NoteDbChangeState
name|state
init|=
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|state
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getPrimaryStorage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|PrimaryStorage
operator|.
name|REVIEW_DB
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getRefState
argument_list|()
argument_list|)
operator|.
name|hasValue
argument_list|(
name|RefState
operator|.
name|create
argument_list|(
name|metaId
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Unset trial mode and the next migration runs to completion.
name|noteDbConfig
operator|.
name|load
argument_list|()
expr_stmt|;
name|NoteDbMigrator
operator|.
name|setTrialMode
argument_list|(
name|noteDbConfig
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|noteDbConfig
operator|.
name|save
argument_list|()
expr_stmt|;
name|migrate
argument_list|(
name|b
lambda|->
name|b
argument_list|)
expr_stmt|;
name|assertNotesMigrationState
argument_list|(
name|NOTE_DB
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|ReviewDb
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|metaId
argument_list|)
expr_stmt|;
name|NoteDbChangeState
name|state
init|=
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|state
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getPrimaryStorage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|PrimaryStorage
operator|.
name|NOTE_DB
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|rebuildSubsetOfChanges ()
specifier|public
name|void
name|rebuildSubsetOfChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|setNotesMigrationState
argument_list|(
name|WRITE
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id1
init|=
name|r1
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id2
init|=
name|r2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|invalidateNoteDbState
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|)
expr_stmt|;
name|migrate
argument_list|(
name|b
lambda|->
name|b
operator|.
name|setChanges
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|id2
argument_list|)
argument_list|)
argument_list|,
name|NoteDbMigrator
operator|::
name|rebuild
argument_list|)
expr_stmt|;
name|assertNotRebuilt
argument_list|(
name|id1
argument_list|)
expr_stmt|;
name|assertRebuilt
argument_list|(
name|id2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuildSubsetOfProjects ()
specifier|public
name|void
name|rebuildSubsetOfProjects
parameter_list|()
throws|throws
name|Exception
block|{
name|setNotesMigrationState
argument_list|(
name|WRITE
argument_list|)
expr_stmt|;
name|Project
operator|.
name|NameKey
name|p2
init|=
name|createProject
argument_list|(
literal|"project2"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|tr2
init|=
name|cloneProject
argument_list|(
name|p2
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|tr2
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|id1
init|=
name|r1
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id2
init|=
name|r2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|invalidateNoteDbState
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|)
expr_stmt|;
name|migrate
argument_list|(
name|b
lambda|->
name|b
operator|.
name|setProjects
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|p2
argument_list|)
argument_list|)
argument_list|,
name|NoteDbMigrator
operator|::
name|rebuild
argument_list|)
expr_stmt|;
name|assertNotRebuilt
argument_list|(
name|id1
argument_list|)
expr_stmt|;
name|assertRebuilt
argument_list|(
name|id2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuildNonSkippedProjects ()
specifier|public
name|void
name|rebuildNonSkippedProjects
parameter_list|()
throws|throws
name|Exception
block|{
name|setNotesMigrationState
argument_list|(
name|WRITE
argument_list|)
expr_stmt|;
name|Project
operator|.
name|NameKey
name|p2
init|=
name|createProject
argument_list|(
literal|"project2"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|tr2
init|=
name|cloneProject
argument_list|(
name|p2
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|p3
init|=
name|createProject
argument_list|(
literal|"project3"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|tr3
init|=
name|cloneProject
argument_list|(
name|p3
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|tr2
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r3
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|tr3
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|id1
init|=
name|r1
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id2
init|=
name|r2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id3
init|=
name|r3
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|invalidateNoteDbState
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|,
name|id3
argument_list|)
expr_stmt|;
name|migrate
argument_list|(
name|b
lambda|->
name|b
operator|.
name|setSkipProjects
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|p3
argument_list|)
argument_list|)
argument_list|,
name|NoteDbMigrator
operator|::
name|rebuild
argument_list|)
expr_stmt|;
name|assertRebuilt
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|)
expr_stmt|;
name|assertNotRebuilt
argument_list|(
name|id3
argument_list|)
expr_stmt|;
block|}
DECL|method|invalidateNoteDbState (Change.Id... ids)
specifier|private
name|void
name|invalidateNoteDbState
parameter_list|(
name|Change
operator|.
name|Id
modifier|...
name|ids
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|Change
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ids
operator|.
name|length
argument_list|)
decl_stmt|;
try|try
init|(
name|ReviewDb
name|db
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
init|)
block|{
for|for
control|(
name|Change
operator|.
name|Id
name|id
range|:
name|ids
control|)
block|{
name|Change
name|c
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|c
operator|.
name|setNoteDbState
argument_list|(
name|INVALID_STATE
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertRebuilt (Change.Id... ids)
specifier|private
name|void
name|assertRebuilt
parameter_list|(
name|Change
operator|.
name|Id
modifier|...
name|ids
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
init|(
name|ReviewDb
name|db
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
init|)
block|{
for|for
control|(
name|Change
operator|.
name|Id
name|id
range|:
name|ids
control|)
block|{
name|NoteDbChangeState
name|s
init|=
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|s
operator|.
name|getChangeMetaId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|INVALID_STATE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertNotRebuilt (Change.Id... ids)
specifier|private
name|void
name|assertNotRebuilt
parameter_list|(
name|Change
operator|.
name|Id
modifier|...
name|ids
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
init|(
name|ReviewDb
name|db
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
init|)
block|{
for|for
control|(
name|Change
operator|.
name|Id
name|id
range|:
name|ids
control|)
block|{
name|NoteDbChangeState
name|s
init|=
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|s
operator|.
name|getChangeMetaId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|INVALID_STATE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|enableSequencesNoGap ()
specifier|public
name|void
name|enableSequencesNoGap
parameter_list|()
throws|throws
name|Exception
block|{
name|testEnableSequences
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|"13"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|enableSequencesWithGap ()
specifier|public
name|void
name|enableSequencesWithGap
parameter_list|()
throws|throws
name|Exception
block|{
name|testEnableSequences
argument_list|(
operator|-
literal|1
argument_list|,
literal|502
argument_list|,
literal|"512"
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnableSequences (int builderOption, int expectedFirstId, String expectedRefValue)
specifier|private
name|void
name|testEnableSequences
parameter_list|(
name|int
name|builderOption
parameter_list|,
name|int
name|expectedFirstId
parameter_list|,
name|String
name|expectedRefValue
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|migrate
argument_list|(
name|b
lambda|->
name|b
operator|.
name|setSequenceGap
argument_list|(
name|builderOption
argument_list|)
operator|.
name|setStopAtStateForTesting
argument_list|(
name|READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sequences
operator|.
name|nextChangeId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedFirstId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sequences
operator|.
name|nextChangeId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedFirstId
operator|+
literal|1
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allProjects
argument_list|)
init|;
name|ObjectReader
name|reader
operator|=
name|repo
operator|.
name|newObjectReader
argument_list|()
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
literal|"refs/sequences/changes"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|ObjectLoader
name|loader
init|=
name|reader
operator|.
name|open
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|loader
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Constants
operator|.
name|OBJ_BLOB
argument_list|)
expr_stmt|;
comment|// Acquired a block of 10 to serve the first nextChangeId call after migration.
name|assertThat
argument_list|(
operator|new
name|String
argument_list|(
name|loader
operator|.
name|getCachedBytes
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedRefValue
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|ReviewDb
name|db
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
init|)
block|{
comment|// Underlying, unused ReviewDb is still on its own sequence.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|int
name|nextFromReviewDb
init|=
name|db
operator|.
name|nextChangeId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|nextFromReviewDb
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|fullMigrationSameThread ()
specifier|public
name|void
name|fullMigrationSameThread
parameter_list|()
throws|throws
name|Exception
block|{
name|testFullMigration
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fullMigrationMultipleThreads ()
specifier|public
name|void
name|fullMigrationMultipleThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|testFullMigration
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testFullMigration (int threads)
specifier|private
name|void
name|testFullMigration
parameter_list|(
name|int
name|threads
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id1
init|=
name|r1
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id2
init|=
name|r2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|objectFiles
init|=
name|getObjectFiles
argument_list|(
name|project
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|objectFiles
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|migrate
argument_list|(
name|b
lambda|->
name|b
operator|.
name|setThreads
argument_list|(
name|threads
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotesMigrationState
argument_list|(
name|NOTE_DB
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sequences
operator|.
name|nextChangeId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|503
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getObjectFiles
argument_list|(
name|project
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|objectFiles
argument_list|)
expr_stmt|;
name|ObjectId
name|oldMetaId
init|=
literal|null
decl_stmt|;
name|int
name|rowVersion
init|=
literal|0
decl_stmt|;
try|try
init|(
name|ReviewDb
name|db
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
init|;
name|Repository
name|repo
operator|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
for|for
control|(
name|Change
operator|.
name|Id
name|id
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|)
control|)
block|{
name|String
name|refName
init|=
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref
argument_list|)
operator|.
name|named
argument_list|(
name|refName
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|Change
name|c
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"topic of change %s"
argument_list|,
name|id
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|NoteDbChangeState
name|s
init|=
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|s
operator|.
name|getPrimaryStorage
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"primary storage of change %s"
argument_list|,
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|PrimaryStorage
operator|.
name|NOTE_DB
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|s
operator|.
name|getRefState
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ref state of change %s"
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|id1
argument_list|)
condition|)
block|{
name|oldMetaId
operator|=
name|ref
operator|.
name|getObjectId
argument_list|()
expr_stmt|;
name|rowVersion
operator|=
name|c
operator|.
name|getRowVersion
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Do not open a new context, to simulate races with other threads that opened a context earlier
comment|// in the migration process; this needs to work.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
name|name
argument_list|(
literal|"a-topic"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Of course, it should also work with a new context.
name|resetCurrentApiUser
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
name|name
argument_list|(
literal|"another-topic"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ReviewDb
name|db
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
init|;
name|Repository
name|repo
operator|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|id1
argument_list|)
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldMetaId
argument_list|)
expr_stmt|;
name|Change
name|c
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|getRowVersion
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|rowVersion
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|fullMigrationOneChangeWithNoPatchSets ()
specifier|public
name|void
name|fullMigrationOneChangeWithNoPatchSets
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id1
init|=
name|r1
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id2
init|=
name|r2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|id2
argument_list|)
expr_stmt|;
try|try
block|{
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|byChange
argument_list|(
name|id2
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|migrate
argument_list|(
name|b
lambda|->
name|b
argument_list|)
expr_stmt|;
name|assertNotesMigrationState
argument_list|(
name|NOTE_DB
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
init|(
name|ReviewDb
name|db
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
init|;
name|Repository
name|repo
operator|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|id1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id1
argument_list|)
operator|.
name|getNoteDbState
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|NOTE_DB_PRIMARY_STATE
argument_list|)
expr_stmt|;
comment|// A change with no patch sets is so corrupt that it is completely skipped by the migration
comment|// process.
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|id2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id2
argument_list|)
operator|.
name|getNoteDbState
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|fullMigrationMissingPatchSetRefs ()
specifier|public
name|void
name|fullMigrationMissingPatchSetRefs
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|RefUpdate
name|u
init|=
name|repo
operator|.
name|updateRef
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|id
argument_list|,
literal|1
argument_list|)
operator|.
name|toRefName
argument_list|()
argument_list|)
decl_stmt|;
name|u
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|u
operator|.
name|delete
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
name|ChangeBundle
name|reviewDbBundle
decl_stmt|;
try|try
init|(
name|ReviewDb
name|db
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
init|)
block|{
name|reviewDbBundle
operator|=
name|changeBundleReader
operator|.
name|fromReviewDb
argument_list|(
name|db
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|migrate
argument_list|(
name|b
lambda|->
name|b
argument_list|)
expr_stmt|;
name|assertNotesMigrationState
argument_list|(
name|NOTE_DB
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
init|(
name|ReviewDb
name|db
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
init|;
name|Repository
name|repo
operator|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
comment|// Change migrated successfully even though it was missing patch set refs.
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getNoteDbState
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|NOTE_DB_PRIMARY_STATE
argument_list|)
expr_stmt|;
name|ChangeBundle
name|noteDbBundle
init|=
name|ChangeBundle
operator|.
name|fromNotes
argument_list|(
name|commentsUtil
argument_list|,
name|notesFactory
operator|.
name|createChecked
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|noteDbBundle
operator|.
name|differencesFrom
argument_list|(
name|reviewDbBundle
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|autoMigrationConfig ()
specifier|public
name|void
name|autoMigrationConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|createChange
argument_list|()
expr_stmt|;
name|migrate
argument_list|(
name|b
lambda|->
name|b
operator|.
name|setStopAtStateForTesting
argument_list|(
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotesMigrationState
argument_list|(
name|WRITE
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|migrate
argument_list|(
name|b
lambda|->
name|b
operator|.
name|setAutoMigrate
argument_list|(
literal|true
argument_list|)
operator|.
name|setStopAtStateForTesting
argument_list|(
name|READ_WRITE_NO_SEQUENCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotesMigrationState
argument_list|(
name|READ_WRITE_NO_SEQUENCE
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|migrate
argument_list|(
name|b
lambda|->
name|b
argument_list|)
expr_stmt|;
name|assertNotesMigrationState
argument_list|(
name|NOTE_DB
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|notesMigrationStateListener ()
specifier|public
name|void
name|notesMigrationStateListener
parameter_list|()
throws|throws
name|Exception
block|{
name|NotesMigrationStateListener
name|listener
init|=
name|createStrictMock
argument_list|(
name|NotesMigrationStateListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|listener
operator|.
name|preStateChange
argument_list|(
name|REVIEW_DB
argument_list|,
name|WRITE
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
expr_stmt|;
name|listener
operator|.
name|preStateChange
argument_list|(
name|WRITE
argument_list|,
name|READ_WRITE_NO_SEQUENCE
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
expr_stmt|;
name|listener
operator|.
name|preStateChange
argument_list|(
name|READ_WRITE_NO_SEQUENCE
argument_list|,
name|READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
expr_stmt|;
name|listener
operator|.
name|preStateChange
argument_list|(
name|READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY
argument_list|,
name|READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY
argument_list|)
expr_stmt|;
name|listener
operator|.
name|preStateChange
argument_list|(
name|READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY
argument_list|,
name|NOTE_DB
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|createChange
argument_list|()
expr_stmt|;
name|migrate
argument_list|(
name|b
lambda|->
name|b
argument_list|)
expr_stmt|;
name|assertNotesMigrationState
argument_list|(
name|NOTE_DB
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|notesMigrationStateListenerFails ()
specifier|public
name|void
name|notesMigrationStateListenerFails
parameter_list|()
throws|throws
name|Exception
block|{
name|NotesMigrationStateListener
name|listener
init|=
name|createStrictMock
argument_list|(
name|NotesMigrationStateListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|listener
operator|.
name|preStateChange
argument_list|(
name|REVIEW_DB
argument_list|,
name|WRITE
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
expr_stmt|;
name|listener
operator|.
name|preStateChange
argument_list|(
name|WRITE
argument_list|,
name|READ_WRITE_NO_SEQUENCE
argument_list|)
expr_stmt|;
name|IOException
name|listenerException
init|=
operator|new
name|IOException
argument_list|(
literal|"Listener failed"
argument_list|)
decl_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andThrow
argument_list|(
name|listenerException
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|createChange
argument_list|()
expr_stmt|;
try|try
block|{
name|migrate
argument_list|(
name|b
lambda|->
name|b
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|fail
argument_list|(
literal|"expected IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isSameAs
argument_list|(
name|listenerException
argument_list|)
expr_stmt|;
block|}
name|assertNotesMigrationState
argument_list|(
name|WRITE
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNotesMigrationState ( NotesMigrationState expected, boolean autoMigrate, boolean trialMode)
specifier|private
name|void
name|assertNotesMigrationState
parameter_list|(
name|NotesMigrationState
name|expected
parameter_list|,
name|boolean
name|autoMigrate
parameter_list|,
name|boolean
name|trialMode
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|NotesMigrationState
operator|.
name|forNotesMigration
argument_list|(
name|notesMigration
argument_list|)
argument_list|)
operator|.
name|hasValue
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|noteDbConfig
operator|.
name|load
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|NotesMigrationState
operator|.
name|forConfig
argument_list|(
name|noteDbConfig
argument_list|)
argument_list|)
operator|.
name|hasValue
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|NoteDbMigrator
operator|.
name|getAutoMigrate
argument_list|(
name|noteDbConfig
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"noteDb.changes.autoMigrate"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|autoMigrate
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|NoteDbMigrator
operator|.
name|getTrialMode
argument_list|(
name|noteDbConfig
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"noteDb.changes.trial"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|trialMode
argument_list|)
expr_stmt|;
block|}
DECL|method|setNotesMigrationState (NotesMigrationState state)
specifier|private
name|void
name|setNotesMigrationState
parameter_list|(
name|NotesMigrationState
name|state
parameter_list|)
throws|throws
name|Exception
block|{
name|noteDbConfig
operator|.
name|load
argument_list|()
expr_stmt|;
name|state
operator|.
name|setConfigValues
argument_list|(
name|noteDbConfig
argument_list|)
expr_stmt|;
name|noteDbConfig
operator|.
name|save
argument_list|()
expr_stmt|;
name|notesMigration
operator|.
name|setFrom
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|PrepareBuilder
interface|interface
name|PrepareBuilder
block|{
DECL|method|prepare (NoteDbMigrator.Builder b)
name|NoteDbMigrator
operator|.
name|Builder
name|prepare
parameter_list|(
name|NoteDbMigrator
operator|.
name|Builder
name|b
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|RunMigration
interface|interface
name|RunMigration
block|{
DECL|method|run (NoteDbMigrator m)
name|void
name|run
parameter_list|(
name|NoteDbMigrator
name|m
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
DECL|method|migrate (PrepareBuilder b)
specifier|private
name|void
name|migrate
parameter_list|(
name|PrepareBuilder
name|b
parameter_list|)
throws|throws
name|Exception
block|{
name|migrate
argument_list|(
name|b
argument_list|,
name|NoteDbMigrator
operator|::
name|migrate
argument_list|)
expr_stmt|;
block|}
DECL|method|migrate (PrepareBuilder b, RunMigration m)
specifier|private
name|void
name|migrate
parameter_list|(
name|PrepareBuilder
name|b
parameter_list|,
name|RunMigration
name|m
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|NoteDbMigrator
name|migrator
init|=
name|b
operator|.
name|prepare
argument_list|(
name|migratorBuilderProvider
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|m
operator|.
name|run
argument_list|(
name|migrator
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertMigrationException ( String expectMessageContains, PrepareBuilder b, RunMigration m)
specifier|private
name|void
name|assertMigrationException
parameter_list|(
name|String
name|expectMessageContains
parameter_list|,
name|PrepareBuilder
name|b
parameter_list|,
name|RunMigration
name|m
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|migrate
argument_list|(
name|b
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MigrationException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|expectMessageContains
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addListener (NotesMigrationStateListener listener)
specifier|private
name|void
name|addListener
parameter_list|(
name|NotesMigrationStateListener
name|listener
parameter_list|)
block|{
name|addedListeners
operator|.
name|add
argument_list|(
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getObjectFiles (Project.NameKey project)
specifier|private
name|SortedSet
argument_list|<
name|String
argument_list|>
name|getObjectFiles
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
throws|throws
name|Exception
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|Files
operator|.
name|walkFileTree
argument_list|(
operator|(
operator|(
name|FileRepository
operator|)
name|repo
operator|)
operator|.
name|getObjectDatabase
argument_list|()
operator|.
name|getDirectory
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
operator|new
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attrs
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|name
operator|.
name|endsWith
argument_list|(
literal|".pack"
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|endsWith
argument_list|(
literal|".idx"
argument_list|)
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
block|}
end_class

end_unit

