begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.group
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|group
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|group
operator|.
name|GroupAssert
operator|.
name|toBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|groups
operator|.
name|GroupInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupOptionsInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Url
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|PutDescription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|PutName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|PutOwner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|GroupPropertiesIT
specifier|public
class|class
name|GroupPropertiesIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|group
specifier|private
name|GroupInfo
name|group
decl_stmt|;
DECL|field|baseUrl
specifier|private
name|String
name|baseUrl
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|group
operator|=
name|createGroup
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|baseUrl
operator|=
literal|"/groups/"
operator|+
name|group
operator|.
name|id
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupName ()
specifier|public
name|void
name|testGroupName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|baseUrl
operator|+
literal|"/name"
decl_stmt|;
comment|// get name
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|get
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|group
operator|.
name|name
argument_list|)
expr_stmt|;
name|r
operator|.
name|consume
argument_list|()
expr_stmt|;
comment|// set name with name conflict
name|GroupInfo
name|newGroup
init|=
name|createGroup
argument_list|(
literal|"newGroup"
argument_list|)
decl_stmt|;
name|PutName
operator|.
name|Input
name|in
init|=
operator|new
name|PutName
operator|.
name|Input
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|newGroup
operator|.
name|name
expr_stmt|;
name|r
operator|=
name|adminSession
operator|.
name|put
argument_list|(
name|url
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_CONFLICT
argument_list|)
expr_stmt|;
name|r
operator|.
name|consume
argument_list|()
expr_stmt|;
comment|// set name to same name
name|in
operator|=
operator|new
name|PutName
operator|.
name|Input
argument_list|()
expr_stmt|;
name|in
operator|.
name|name
operator|=
name|group
operator|.
name|name
expr_stmt|;
name|r
operator|=
name|adminSession
operator|.
name|put
argument_list|(
name|url
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|r
operator|.
name|consume
argument_list|()
expr_stmt|;
comment|// rename
name|in
operator|=
operator|new
name|PutName
operator|.
name|Input
argument_list|()
expr_stmt|;
name|in
operator|.
name|name
operator|=
name|name
argument_list|(
literal|"newName"
argument_list|)
expr_stmt|;
name|r
operator|=
name|adminSession
operator|.
name|put
argument_list|(
name|url
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|String
name|newName
init|=
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groupCache
operator|.
name|get
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|in
operator|.
name|name
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|groupCache
operator|.
name|get
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|group
operator|.
name|name
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|newName
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|name
argument_list|)
expr_stmt|;
name|r
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupDescription ()
specifier|public
name|void
name|testGroupDescription
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|baseUrl
operator|+
literal|"/description"
decl_stmt|;
comment|// get description
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|get
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|String
name|description
init|=
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|description
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|group
operator|.
name|description
argument_list|)
expr_stmt|;
name|r
operator|.
name|consume
argument_list|()
expr_stmt|;
comment|// set description
name|PutDescription
operator|.
name|Input
name|in
init|=
operator|new
name|PutDescription
operator|.
name|Input
argument_list|()
decl_stmt|;
name|in
operator|.
name|description
operator|=
literal|"New description for the group."
expr_stmt|;
name|r
operator|=
name|adminSession
operator|.
name|put
argument_list|(
name|url
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|String
name|newDescription
init|=
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newDescription
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|description
argument_list|)
expr_stmt|;
name|group
operator|=
name|getGroup
argument_list|(
name|group
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|description
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|description
argument_list|)
expr_stmt|;
name|r
operator|.
name|consume
argument_list|()
expr_stmt|;
comment|// delete description
name|r
operator|=
name|adminSession
operator|.
name|delete
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|group
operator|=
name|getGroup
argument_list|(
name|group
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|description
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// set description to empty string
name|in
operator|=
operator|new
name|PutDescription
operator|.
name|Input
argument_list|()
expr_stmt|;
name|in
operator|.
name|description
operator|=
literal|""
expr_stmt|;
name|r
operator|=
name|adminSession
operator|.
name|put
argument_list|(
name|url
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|group
operator|=
name|getGroup
argument_list|(
name|group
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|description
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupOptions ()
specifier|public
name|void
name|testGroupOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|baseUrl
operator|+
literal|"/options"
decl_stmt|;
comment|// get options
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|get
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|GroupOptionsInfo
name|options
init|=
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
name|GroupOptionsInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|options
operator|.
name|visibleToAll
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|group
operator|.
name|options
operator|.
name|visibleToAll
argument_list|)
expr_stmt|;
name|r
operator|.
name|consume
argument_list|()
expr_stmt|;
comment|// set options
name|GroupOptionsInfo
name|in
init|=
operator|new
name|GroupOptionsInfo
argument_list|()
decl_stmt|;
name|in
operator|.
name|visibleToAll
operator|=
operator|!
name|toBoolean
argument_list|(
name|group
operator|.
name|options
operator|.
name|visibleToAll
argument_list|)
expr_stmt|;
name|r
operator|=
name|adminSession
operator|.
name|put
argument_list|(
name|url
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|GroupOptionsInfo
name|newOptions
init|=
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
name|GroupOptionsInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newOptions
operator|.
name|visibleToAll
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|visibleToAll
argument_list|)
expr_stmt|;
name|group
operator|=
name|getGroup
argument_list|(
name|group
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|options
operator|.
name|visibleToAll
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|visibleToAll
argument_list|)
expr_stmt|;
name|r
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupOwner ()
specifier|public
name|void
name|testGroupOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|baseUrl
operator|+
literal|"/owner"
decl_stmt|;
name|String
name|adminGroupUUID
init|=
name|groupCache
operator|.
name|get
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Administrators"
argument_list|)
argument_list|)
operator|.
name|getGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// get owner
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|get
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|GroupInfo
name|options
init|=
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
name|GroupInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|options
operator|.
name|ownerId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|adminGroupUUID
argument_list|)
expr_stmt|;
name|r
operator|.
name|consume
argument_list|()
expr_stmt|;
comment|// set owner by name
name|PutOwner
operator|.
name|Input
name|in
init|=
operator|new
name|PutOwner
operator|.
name|Input
argument_list|()
decl_stmt|;
name|in
operator|.
name|owner
operator|=
literal|"Registered Users"
expr_stmt|;
name|r
operator|=
name|adminSession
operator|.
name|put
argument_list|(
name|url
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|GroupInfo
name|newOwner
init|=
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
name|GroupInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newOwner
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|owner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newOwner
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SystemGroupBackend
operator|.
name|getGroup
argument_list|(
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Url
operator|.
name|decode
argument_list|(
name|newOwner
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|consume
argument_list|()
expr_stmt|;
comment|// set owner by UUID
name|in
operator|=
operator|new
name|PutOwner
operator|.
name|Input
argument_list|()
expr_stmt|;
name|in
operator|.
name|owner
operator|=
name|adminGroupUUID
expr_stmt|;
name|r
operator|=
name|adminSession
operator|.
name|put
argument_list|(
name|url
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|newOwner
operator|=
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
name|GroupInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newOwner
operator|.
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|owner
argument_list|)
expr_stmt|;
name|r
operator|.
name|consume
argument_list|()
expr_stmt|;
comment|// set non existing owner
name|in
operator|=
operator|new
name|PutOwner
operator|.
name|Input
argument_list|()
expr_stmt|;
name|in
operator|.
name|owner
operator|=
literal|"Non-Existing Group"
expr_stmt|;
name|r
operator|=
name|adminSession
operator|.
name|put
argument_list|(
name|url
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_UNPROCESSABLE_ENTITY
argument_list|)
expr_stmt|;
name|r
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
DECL|method|createGroup (String name)
specifier|private
name|GroupInfo
name|createGroup
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|name
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|GroupInput
name|in
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|ownerId
operator|=
literal|"Administrators"
expr_stmt|;
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|put
argument_list|(
literal|"/groups/"
operator|+
name|name
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_CREATED
argument_list|)
expr_stmt|;
return|return
name|parseGroup
argument_list|(
name|r
argument_list|)
return|;
block|}
DECL|method|getGroup (String name)
specifier|private
name|GroupInfo
name|getGroup
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|get
argument_list|(
literal|"/groups/"
operator|+
name|name
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
return|return
name|parseGroup
argument_list|(
name|r
argument_list|)
return|;
block|}
DECL|method|parseGroup (RestResponse r)
specifier|private
name|GroupInfo
name|parseGroup
parameter_list|(
name|RestResponse
name|r
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|GroupInfo
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

