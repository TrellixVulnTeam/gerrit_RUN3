begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ProblemInfo
operator|.
name|Status
operator|.
name|FIXED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ProblemInfo
operator|.
name|Status
operator|.
name|FIX_FAILED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestChanges
operator|.
name|newPatchSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|FooterConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|FixInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ProblemInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|Sequences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountsUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeInserter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ConsistencyChecker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|PatchSetInserter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AnonymousCowardName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbChangeState
operator|.
name|PrimaryStorage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdateOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RepoContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|InMemoryRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|NoteDbMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestChanges
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|ConsistencyCheckerIT
specifier|public
class|class
name|ConsistencyCheckerIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|changeControlFactory
annotation|@
name|Inject
specifier|private
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
DECL|field|changeNotesFactory
annotation|@
name|Inject
specifier|private
name|ChangeNotes
operator|.
name|Factory
name|changeNotesFactory
decl_stmt|;
DECL|field|checkerProvider
annotation|@
name|Inject
specifier|private
name|Provider
argument_list|<
name|ConsistencyChecker
argument_list|>
name|checkerProvider
decl_stmt|;
DECL|field|userFactory
annotation|@
name|Inject
specifier|private
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
DECL|field|changeInserterFactory
annotation|@
name|Inject
specifier|private
name|ChangeInserter
operator|.
name|Factory
name|changeInserterFactory
decl_stmt|;
DECL|field|patchSetInserterFactory
annotation|@
name|Inject
specifier|private
name|PatchSetInserter
operator|.
name|Factory
name|patchSetInserterFactory
decl_stmt|;
DECL|field|noteUtil
annotation|@
name|Inject
specifier|private
name|ChangeNoteUtil
name|noteUtil
decl_stmt|;
DECL|field|anonymousCowardName
annotation|@
name|Inject
annotation|@
name|AnonymousCowardName
specifier|private
name|String
name|anonymousCowardName
decl_stmt|;
DECL|field|sequences
annotation|@
name|Inject
specifier|private
name|Sequences
name|sequences
decl_stmt|;
DECL|field|accountsUpdate
annotation|@
name|Inject
specifier|private
name|AccountsUpdate
operator|.
name|Server
name|accountsUpdate
decl_stmt|;
DECL|field|tip
specifier|private
name|RevCommit
name|tip
decl_stmt|;
DECL|field|adminId
specifier|private
name|Account
operator|.
name|Id
name|adminId
decl_stmt|;
DECL|field|checker
specifier|private
name|ConsistencyChecker
name|checker
decl_stmt|;
DECL|method|assumeNoteDbDisabled ()
specifier|private
name|void
name|assumeNoteDbDisabled
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|NoteDbMode
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|NoteDbMode
operator|.
name|CHECK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Ignore client clone of project; repurpose as server-side TestRepository.
name|testRepo
operator|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
operator|(
name|InMemoryRepository
operator|)
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
argument_list|)
expr_stmt|;
name|tip
operator|=
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|exactRef
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|adminId
operator|=
name|admin
operator|.
name|getId
argument_list|()
expr_stmt|;
name|checker
operator|=
name|checkerProvider
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|validNewChange ()
specifier|public
name|void
name|validNewChange
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNoProblems
argument_list|(
name|insertChange
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|validMergedChange ()
specifier|public
name|void
name|validMergedChange
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|mergeChange
argument_list|(
name|incrementPatchSet
argument_list|(
name|insertChange
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNoProblems
argument_list|(
name|notes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|missingOwner ()
specifier|public
name|void
name|missingOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|owner
init|=
name|accountCreator
operator|.
name|create
argument_list|(
literal|"missing"
argument_list|)
decl_stmt|;
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|(
name|owner
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|create
argument_list|()
operator|.
name|deleteByKey
argument_list|(
name|owner
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
literal|null
argument_list|,
name|problem
argument_list|(
literal|"Missing change owner: "
operator|+
name|owner
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|missingRepo ()
specifier|public
name|void
name|missingRepo
parameter_list|()
throws|throws
name|Exception
block|{
comment|// NoteDb can't have a change without a repo.
name|assumeNoteDbDisabled
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|Project
operator|.
name|NameKey
name|name
init|=
name|notes
operator|.
name|getProjectName
argument_list|()
decl_stmt|;
comment|// Create control before deleting repo to avoid NoSuchProjectException
name|ChangeControl
name|ctl
init|=
name|controlForNotes
argument_list|(
name|notes
argument_list|)
decl_stmt|;
operator|(
operator|(
name|InMemoryRepositoryManager
operator|)
name|repoManager
operator|)
operator|.
name|deleteRepository
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checker
operator|.
name|check
argument_list|(
name|ctl
argument_list|,
literal|null
argument_list|)
operator|.
name|problems
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|problem
argument_list|(
literal|"Destination repository not found: "
operator|+
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|invalidRevision ()
specifier|public
name|void
name|invalidRevision
parameter_list|()
throws|throws
name|Exception
block|{
comment|// NoteDb always parses the revision when inserting a patch set, so we can't
comment|// create an invalid patch set.
name|assumeNoteDbDisabled
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
name|ps
init|=
name|newPatchSet
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
literal|"fooooooooooooooooooooooooooooooooooooooo"
argument_list|,
name|adminId
argument_list|)
decl_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|update
argument_list|(
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
literal|null
argument_list|,
name|problem
argument_list|(
literal|"Invalid revision on patch set 1: fooooooooooooooooooooooooooooooooooooooo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// No test for ref existing but object missing; InMemoryRepository won't let
comment|// us do such a thing.
annotation|@
name|Test
DECL|method|patchSetObjectAndRefMissing ()
specifier|public
name|void
name|patchSetObjectAndRefMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rev
init|=
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
decl_stmt|;
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
name|ps
init|=
name|insertMissingPatchSet
argument_list|(
name|notes
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|notes
operator|=
name|reload
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
literal|null
argument_list|,
name|problem
argument_list|(
literal|"Ref missing: "
operator|+
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
argument_list|,
name|problem
argument_list|(
literal|"Object missing: patch set 2: deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchSetObjectAndRefMissingWithFix ()
specifier|public
name|void
name|patchSetObjectAndRefMissingWithFix
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rev
init|=
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
decl_stmt|;
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
name|ps
init|=
name|insertMissingPatchSet
argument_list|(
name|notes
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|notes
operator|=
name|reload
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|String
name|refName
init|=
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
decl_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
operator|new
name|FixInput
argument_list|()
argument_list|,
name|problem
argument_list|(
literal|"Ref missing: "
operator|+
name|refName
argument_list|)
argument_list|,
name|problem
argument_list|(
literal|"Object missing: patch set 2: "
operator|+
name|rev
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchSetRefMissing ()
specifier|public
name|void
name|patchSetRefMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|update
argument_list|(
literal|"refs/other/foo"
argument_list|,
name|ObjectId
operator|.
name|fromString
argument_list|(
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|refName
init|=
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|toRefName
argument_list|()
decl_stmt|;
name|deleteRef
argument_list|(
name|refName
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
literal|null
argument_list|,
name|problem
argument_list|(
literal|"Ref missing: "
operator|+
name|refName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchSetRefMissingWithFix ()
specifier|public
name|void
name|patchSetRefMissingWithFix
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|update
argument_list|(
literal|"refs/other/foo"
argument_list|,
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|refName
init|=
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|toRefName
argument_list|()
decl_stmt|;
name|deleteRef
argument_list|(
name|refName
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
operator|new
name|FixInput
argument_list|()
argument_list|,
name|problem
argument_list|(
literal|"Ref missing: "
operator|+
name|refName
argument_list|,
name|FIXED
argument_list|,
literal|"Repaired patch set ref"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|exactRef
argument_list|(
name|refName
argument_list|)
operator|.
name|getObjectId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchSetObjectAndRefMissingWithDeletingPatchSet ()
specifier|public
name|void
name|patchSetObjectAndRefMissingWithDeletingPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
name|ps1
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
decl_stmt|;
name|String
name|rev2
init|=
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
decl_stmt|;
name|PatchSet
name|ps2
init|=
name|insertMissingPatchSet
argument_list|(
name|notes
argument_list|,
name|rev2
argument_list|)
decl_stmt|;
name|notes
operator|=
name|reload
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|FixInput
name|fix
init|=
operator|new
name|FixInput
argument_list|()
decl_stmt|;
name|fix
operator|.
name|deletePatchSetIfCommitMissing
operator|=
literal|true
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
name|fix
argument_list|,
name|problem
argument_list|(
literal|"Ref missing: "
operator|+
name|ps2
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
argument_list|,
name|problem
argument_list|(
literal|"Object missing: patch set 2: "
operator|+
name|rev2
argument_list|,
name|FIXED
argument_list|,
literal|"Deleted patch set"
argument_list|)
argument_list|)
expr_stmt|;
name|notes
operator|=
name|reload
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psUtil
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|notes
argument_list|,
name|ps1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|psUtil
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|notes
argument_list|,
name|ps2
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchSetMultipleObjectsMissingWithDeletingPatchSets ()
specifier|public
name|void
name|patchSetMultipleObjectsMissingWithDeletingPatchSets
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
name|ps1
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
decl_stmt|;
name|String
name|rev2
init|=
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
decl_stmt|;
name|PatchSet
name|ps2
init|=
name|insertMissingPatchSet
argument_list|(
name|notes
argument_list|,
name|rev2
argument_list|)
decl_stmt|;
name|notes
operator|=
name|incrementPatchSet
argument_list|(
name|reload
argument_list|(
name|notes
argument_list|)
argument_list|)
expr_stmt|;
name|PatchSet
name|ps3
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
decl_stmt|;
name|String
name|rev4
init|=
literal|"c0ffeeeec0ffeeeec0ffeeeec0ffeeeec0ffeeee"
decl_stmt|;
name|PatchSet
name|ps4
init|=
name|insertMissingPatchSet
argument_list|(
name|notes
argument_list|,
name|rev4
argument_list|)
decl_stmt|;
name|notes
operator|=
name|reload
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|FixInput
name|fix
init|=
operator|new
name|FixInput
argument_list|()
decl_stmt|;
name|fix
operator|.
name|deletePatchSetIfCommitMissing
operator|=
literal|true
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
name|fix
argument_list|,
name|problem
argument_list|(
literal|"Ref missing: "
operator|+
name|ps2
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
argument_list|,
name|problem
argument_list|(
literal|"Object missing: patch set 2: "
operator|+
name|rev2
argument_list|,
name|FIXED
argument_list|,
literal|"Deleted patch set"
argument_list|)
argument_list|,
name|problem
argument_list|(
literal|"Ref missing: "
operator|+
name|ps4
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
argument_list|,
name|problem
argument_list|(
literal|"Object missing: patch set 4: "
operator|+
name|rev4
argument_list|,
name|FIXED
argument_list|,
literal|"Deleted patch set"
argument_list|)
argument_list|)
expr_stmt|;
name|notes
operator|=
name|reload
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psUtil
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|notes
argument_list|,
name|ps1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|psUtil
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|notes
argument_list|,
name|ps2
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|psUtil
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|notes
argument_list|,
name|ps3
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|psUtil
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|notes
argument_list|,
name|ps4
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onlyPatchSetObjectMissingWithFix ()
specifier|public
name|void
name|onlyPatchSetObjectMissingWithFix
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|admin
operator|.
name|getId
argument_list|()
argument_list|,
name|sequences
operator|.
name|nextChangeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Set review started, mimicking Schema_153, so tests pass with NoteDbMode.CHECK.
name|c
operator|.
name|setReviewStarted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
decl_stmt|;
name|PatchSet
name|ps
init|=
name|newPatchSet
argument_list|(
name|psId
argument_list|,
name|rev
argument_list|,
name|adminId
argument_list|)
decl_stmt|;
if|if
condition|(
name|notesMigration
operator|.
name|changePrimaryStorage
argument_list|()
operator|==
name|PrimaryStorage
operator|.
name|REVIEW_DB
condition|)
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|insert
argument_list|(
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addNoteDbCommit
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Create change\n"
operator|+
literal|"\n"
operator|+
literal|"Patch-set: 1\n"
operator|+
literal|"Branch: "
operator|+
name|c
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Change-id: "
operator|+
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Subject: Bogus subject\n"
operator|+
literal|"Commit: "
operator|+
name|rev
operator|+
literal|"\n"
operator|+
literal|"Groups: "
operator|+
name|rev
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|c
operator|.
name|getProject
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|changeNotesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|c
operator|.
name|getProject
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|FixInput
name|fix
init|=
operator|new
name|FixInput
argument_list|()
decl_stmt|;
name|fix
operator|.
name|deletePatchSetIfCommitMissing
operator|=
literal|true
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
name|fix
argument_list|,
name|problem
argument_list|(
literal|"Ref missing: "
operator|+
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
argument_list|,
name|problem
argument_list|(
literal|"Object missing: patch set 1: "
operator|+
name|rev
argument_list|,
name|FIX_FAILED
argument_list|,
literal|"Cannot delete patch set; no patch sets would remain"
argument_list|)
argument_list|)
expr_stmt|;
name|notes
operator|=
name|reload
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|currentPatchSetMissing ()
specifier|public
name|void
name|currentPatchSetMissing
parameter_list|()
throws|throws
name|Exception
block|{
comment|// NoteDb can't create a change without a patch set.
name|assumeNoteDbDisabled
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|deleteKeys
argument_list|(
name|singleton
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
literal|null
argument_list|,
name|problem
argument_list|(
literal|"Current patch set 1 not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|duplicatePatchSetRevisions ()
specifier|public
name|void
name|duplicatePatchSetRevisions
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
name|ps1
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
name|ps1
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|notes
operator|=
name|incrementPatchSet
argument_list|(
name|notes
argument_list|,
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
literal|null
argument_list|,
name|problem
argument_list|(
literal|"Multiple patch sets pointing to "
operator|+
name|rev
operator|+
literal|": [1, 2]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|missingDestRef ()
specifier|public
name|void
name|missingDestRef
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|String
name|ref
init|=
literal|"refs/heads/master"
decl_stmt|;
comment|// Detach head so we're allowed to delete ref.
name|testRepo
operator|.
name|reset
argument_list|(
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|exactRef
argument_list|(
name|ref
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|RefUpdate
name|ru
init|=
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|updateRef
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|delete
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
literal|null
argument_list|,
name|problem
argument_list|(
literal|"Destination ref not found (may be new branch): "
operator|+
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergedChangeIsNotMerged ()
specifier|public
name|void
name|mergedChangeIsNotMerged
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|newUpdate
argument_list|(
name|adminId
argument_list|)
init|)
block|{
name|bu
operator|.
name|addOp
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
operator|new
name|BatchUpdateOp
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|OrmException
block|{
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getUpdate
argument_list|(
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|fixStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|notes
operator|=
name|reload
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|String
name|rev
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|ObjectId
name|tip
init|=
name|getDestRef
argument_list|(
name|notes
argument_list|)
decl_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
literal|null
argument_list|,
name|problem
argument_list|(
literal|"Patch set 1 ("
operator|+
name|rev
operator|+
literal|") is not merged into destination ref"
operator|+
literal|" refs/heads/master ("
operator|+
name|tip
operator|.
name|name
argument_list|()
operator|+
literal|"), but change status is MERGED"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newChangeIsMerged ()
specifier|public
name|void
name|newChangeIsMerged
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|update
argument_list|(
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
literal|null
argument_list|,
name|problem
argument_list|(
literal|"Patch set 1 ("
operator|+
name|rev
operator|+
literal|") is merged into destination ref"
operator|+
literal|" refs/heads/master ("
operator|+
name|rev
operator|+
literal|"), but change status is NEW"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newChangeIsMergedWithFix ()
specifier|public
name|void
name|newChangeIsMergedWithFix
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|update
argument_list|(
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
operator|new
name|FixInput
argument_list|()
argument_list|,
name|problem
argument_list|(
literal|"Patch set 1 ("
operator|+
name|rev
operator|+
literal|") is merged into destination ref"
operator|+
literal|" refs/heads/master ("
operator|+
name|rev
operator|+
literal|"), but change status is NEW"
argument_list|,
name|FIXED
argument_list|,
literal|"Marked change as merged"
argument_list|)
argument_list|)
expr_stmt|;
name|notes
operator|=
name|reload
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|assertNoProblems
argument_list|(
name|notes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|extensionApiReturnsUpdatedValueAfterFix ()
specifier|public
name|void
name|extensionApiReturnsUpdatedValueAfterFix
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|update
argument_list|(
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|check
argument_list|(
operator|new
name|FixInput
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|expectedMergedCommitIsLatestPatchSet ()
specifier|public
name|void
name|expectedMergedCommitIsLatestPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|update
argument_list|(
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FixInput
name|fix
init|=
operator|new
name|FixInput
argument_list|()
decl_stmt|;
name|fix
operator|.
name|expectMergedAs
operator|=
name|rev
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
name|fix
argument_list|,
name|problem
argument_list|(
literal|"Patch set 1 ("
operator|+
name|rev
operator|+
literal|") is merged into destination ref"
operator|+
literal|" refs/heads/master ("
operator|+
name|rev
operator|+
literal|"), but change status is NEW"
argument_list|,
name|FIXED
argument_list|,
literal|"Marked change as merged"
argument_list|)
argument_list|)
expr_stmt|;
name|notes
operator|=
name|reload
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|assertNoProblems
argument_list|(
name|notes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|expectedMergedCommitNotMergedIntoDestination ()
specifier|public
name|void
name|expectedMergedCommitNotMergedIntoDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|RevCommit
name|commit
init|=
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|update
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|FixInput
name|fix
init|=
operator|new
name|FixInput
argument_list|()
decl_stmt|;
name|RevCommit
name|other
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
name|commit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|fix
operator|.
name|expectMergedAs
operator|=
name|other
operator|.
name|name
argument_list|()
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
name|fix
argument_list|,
name|problem
argument_list|(
literal|"Expected merged commit "
operator|+
name|other
operator|.
name|name
argument_list|()
operator|+
literal|" is not merged into destination ref refs/heads/master"
operator|+
literal|" ("
operator|+
name|commit
operator|.
name|name
argument_list|()
operator|+
literal|")"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createNewPatchSetForExpectedMergeCommitWithNoChangeId ()
specifier|public
name|void
name|createNewPatchSetForExpectedMergeCommitWithNoChangeId
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|String
name|dest
init|=
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|RevCommit
name|commit
init|=
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|mergedAs
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|commit
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|message
argument_list|(
name|commit
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|mergedAs
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mergedAs
operator|.
name|getFooterLines
argument_list|(
name|FooterConstants
operator|.
name|CHANGE_ID
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|testRepo
operator|.
name|update
argument_list|(
name|dest
argument_list|,
name|mergedAs
argument_list|)
expr_stmt|;
name|assertNoProblems
argument_list|(
name|notes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FixInput
name|fix
init|=
operator|new
name|FixInput
argument_list|()
decl_stmt|;
name|fix
operator|.
name|expectMergedAs
operator|=
name|mergedAs
operator|.
name|name
argument_list|()
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
name|fix
argument_list|,
name|problem
argument_list|(
literal|"No patch set found for merged commit "
operator|+
name|mergedAs
operator|.
name|name
argument_list|()
argument_list|,
name|FIXED
argument_list|,
literal|"Marked change as merged"
argument_list|)
argument_list|,
name|problem
argument_list|(
literal|"Expected merged commit "
operator|+
name|mergedAs
operator|.
name|name
argument_list|()
operator|+
literal|" has no associated patch set"
argument_list|,
name|FIXED
argument_list|,
literal|"Inserted as patch set 2"
argument_list|)
argument_list|)
expr_stmt|;
name|notes
operator|=
name|reload
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|psId2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psUtil
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|notes
argument_list|,
name|psId2
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|mergedAs
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoProblems
argument_list|(
name|notes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createNewPatchSetForExpectedMergeCommitWithChangeId ()
specifier|public
name|void
name|createNewPatchSetForExpectedMergeCommitWithChangeId
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|String
name|dest
init|=
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|RevCommit
name|commit
init|=
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|mergedAs
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|commit
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|message
argument_list|(
name|commit
operator|.
name|getShortMessage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"\n"
operator|+
literal|"Change-Id: "
operator|+
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|mergedAs
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mergedAs
operator|.
name|getFooterLines
argument_list|(
name|FooterConstants
operator|.
name|CHANGE_ID
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|update
argument_list|(
name|dest
argument_list|,
name|mergedAs
argument_list|)
expr_stmt|;
name|assertNoProblems
argument_list|(
name|notes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FixInput
name|fix
init|=
operator|new
name|FixInput
argument_list|()
decl_stmt|;
name|fix
operator|.
name|expectMergedAs
operator|=
name|mergedAs
operator|.
name|name
argument_list|()
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
name|fix
argument_list|,
name|problem
argument_list|(
literal|"No patch set found for merged commit "
operator|+
name|mergedAs
operator|.
name|name
argument_list|()
argument_list|,
name|FIXED
argument_list|,
literal|"Marked change as merged"
argument_list|)
argument_list|,
name|problem
argument_list|(
literal|"Expected merged commit "
operator|+
name|mergedAs
operator|.
name|name
argument_list|()
operator|+
literal|" has no associated patch set"
argument_list|,
name|FIXED
argument_list|,
literal|"Inserted as patch set 2"
argument_list|)
argument_list|)
expr_stmt|;
name|notes
operator|=
name|reload
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|psId2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psUtil
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|notes
argument_list|,
name|psId2
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|mergedAs
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoProblems
argument_list|(
name|notes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|expectedMergedCommitIsOldPatchSetOfSameChange ()
specifier|public
name|void
name|expectedMergedCommitIsOldPatchSetOfSameChange
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
name|ps1
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
decl_stmt|;
name|String
name|rev1
init|=
name|ps1
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|notes
operator|=
name|incrementPatchSet
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|PatchSet
name|ps2
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|update
argument_list|(
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FixInput
name|fix
init|=
operator|new
name|FixInput
argument_list|()
decl_stmt|;
name|fix
operator|.
name|expectMergedAs
operator|=
name|rev1
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
name|fix
argument_list|,
name|problem
argument_list|(
literal|"No patch set found for merged commit "
operator|+
name|rev1
argument_list|,
name|FIXED
argument_list|,
literal|"Marked change as merged"
argument_list|)
argument_list|,
name|problem
argument_list|(
literal|"Expected merge commit "
operator|+
name|rev1
operator|+
literal|" corresponds to patch set 1,"
operator|+
literal|" not the current patch set 2"
argument_list|,
name|FIXED
argument_list|,
literal|"Deleted patch set"
argument_list|)
argument_list|,
name|problem
argument_list|(
literal|"Expected merge commit "
operator|+
name|rev1
operator|+
literal|" corresponds to patch set 1,"
operator|+
literal|" not the current patch set 2"
argument_list|,
name|FIXED
argument_list|,
literal|"Inserted as patch set 3"
argument_list|)
argument_list|)
expr_stmt|;
name|notes
operator|=
name|reload
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId3
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|psId3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psUtil
operator|.
name|byChangeAsMap
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ps2
operator|.
name|getId
argument_list|()
argument_list|,
name|psId3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psUtil
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|notes
argument_list|,
name|psId3
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|rev1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|expectedMergedCommitIsDanglingPatchSetOlderThanCurrent ()
specifier|public
name|void
name|expectedMergedCommitIsDanglingPatchSetOlderThanCurrent
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
name|ps1
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
decl_stmt|;
comment|// Create dangling ref so next ID in the database becomes 3.
name|PatchSet
operator|.
name|Id
name|psId2
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|RevCommit
name|commit2
init|=
name|patchSetCommit
argument_list|(
name|psId2
argument_list|)
decl_stmt|;
name|String
name|rev2
init|=
name|commit2
operator|.
name|name
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
name|psId2
operator|.
name|toRefName
argument_list|()
argument_list|)
operator|.
name|update
argument_list|(
name|commit2
argument_list|)
expr_stmt|;
name|notes
operator|=
name|incrementPatchSet
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|PatchSet
name|ps3
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ps3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|update
argument_list|(
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FixInput
name|fix
init|=
operator|new
name|FixInput
argument_list|()
decl_stmt|;
name|fix
operator|.
name|expectMergedAs
operator|=
name|rev2
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
name|fix
argument_list|,
name|problem
argument_list|(
literal|"No patch set found for merged commit "
operator|+
name|rev2
argument_list|,
name|FIXED
argument_list|,
literal|"Marked change as merged"
argument_list|)
argument_list|,
name|problem
argument_list|(
literal|"Expected merge commit "
operator|+
name|rev2
operator|+
literal|" corresponds to patch set 2,"
operator|+
literal|" not the current patch set 3"
argument_list|,
name|FIXED
argument_list|,
literal|"Deleted patch set"
argument_list|)
argument_list|,
name|problem
argument_list|(
literal|"Expected merge commit "
operator|+
name|rev2
operator|+
literal|" corresponds to patch set 2,"
operator|+
literal|" not the current patch set 3"
argument_list|,
name|FIXED
argument_list|,
literal|"Inserted as patch set 4"
argument_list|)
argument_list|)
expr_stmt|;
name|notes
operator|=
name|reload
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId4
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|psId4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psUtil
operator|.
name|byChangeAsMap
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ps1
operator|.
name|getId
argument_list|()
argument_list|,
name|ps3
operator|.
name|getId
argument_list|()
argument_list|,
name|psId4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psUtil
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|notes
argument_list|,
name|psId4
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|rev2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|expectedMergedCommitIsDanglingPatchSetNewerThanCurrent ()
specifier|public
name|void
name|expectedMergedCommitIsDanglingPatchSetNewerThanCurrent
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
name|ps1
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
decl_stmt|;
comment|// Create dangling ref with no patch set.
name|PatchSet
operator|.
name|Id
name|psId2
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|RevCommit
name|commit2
init|=
name|patchSetCommit
argument_list|(
name|psId2
argument_list|)
decl_stmt|;
name|String
name|rev2
init|=
name|commit2
operator|.
name|name
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
name|psId2
operator|.
name|toRefName
argument_list|()
argument_list|)
operator|.
name|update
argument_list|(
name|commit2
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|update
argument_list|(
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FixInput
name|fix
init|=
operator|new
name|FixInput
argument_list|()
decl_stmt|;
name|fix
operator|.
name|expectMergedAs
operator|=
name|rev2
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
name|fix
argument_list|,
name|problem
argument_list|(
literal|"No patch set found for merged commit "
operator|+
name|rev2
argument_list|,
name|FIXED
argument_list|,
literal|"Marked change as merged"
argument_list|)
argument_list|,
name|problem
argument_list|(
literal|"Expected merge commit "
operator|+
name|rev2
operator|+
literal|" corresponds to patch set 2,"
operator|+
literal|" not the current patch set 1"
argument_list|,
name|FIXED
argument_list|,
literal|"Inserted as patch set 2"
argument_list|)
argument_list|)
expr_stmt|;
name|notes
operator|=
name|reload
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|psId2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psUtil
operator|.
name|byChangeAsMap
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ps1
operator|.
name|getId
argument_list|()
argument_list|,
name|psId2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psUtil
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|notes
argument_list|,
name|psId2
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|rev2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|expectedMergedCommitWithMismatchedChangeId ()
specifier|public
name|void
name|expectedMergedCommitWithMismatchedChangeId
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|String
name|dest
init|=
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|RevCommit
name|parent
init|=
name|testRepo
operator|.
name|branch
argument_list|(
name|dest
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"parent"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|RevCommit
name|commit
init|=
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
name|dest
argument_list|)
operator|.
name|update
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|String
name|badId
init|=
literal|"I0000000000000000000000000000000000000000"
decl_stmt|;
name|RevCommit
name|mergedAs
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|parent
argument_list|)
operator|.
name|message
argument_list|(
name|commit
operator|.
name|getShortMessage
argument_list|()
operator|+
literal|"\n\nChange-Id: "
operator|+
name|badId
operator|+
literal|"\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|mergedAs
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mergedAs
operator|.
name|getFooterLines
argument_list|(
name|FooterConstants
operator|.
name|CHANGE_ID
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|badId
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|update
argument_list|(
name|dest
argument_list|,
name|mergedAs
argument_list|)
expr_stmt|;
name|assertNoProblems
argument_list|(
name|notes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FixInput
name|fix
init|=
operator|new
name|FixInput
argument_list|()
decl_stmt|;
name|fix
operator|.
name|expectMergedAs
operator|=
name|mergedAs
operator|.
name|name
argument_list|()
expr_stmt|;
name|assertProblems
argument_list|(
name|notes
argument_list|,
name|fix
argument_list|,
name|problem
argument_list|(
literal|"Expected merged commit "
operator|+
name|mergedAs
operator|.
name|name
argument_list|()
operator|+
literal|" has Change-Id: "
operator|+
name|badId
operator|+
literal|", but expected "
operator|+
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|expectedMergedCommitMatchesMultiplePatchSets ()
specifier|public
name|void
name|expectedMergedCommitMatchesMultiplePatchSets
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes1
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId1
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes1
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|dest
init|=
name|notes1
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes1
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|RevCommit
name|commit
init|=
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
name|dest
argument_list|)
operator|.
name|update
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|ChangeNotes
name|notes2
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|notes2
operator|=
name|incrementPatchSet
argument_list|(
name|notes2
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes2
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ChangeNotes
name|notes3
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|notes3
operator|=
name|incrementPatchSet
argument_list|(
name|notes3
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId3
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes3
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|FixInput
name|fix
init|=
operator|new
name|FixInput
argument_list|()
decl_stmt|;
name|fix
operator|.
name|expectMergedAs
operator|=
name|commit
operator|.
name|name
argument_list|()
expr_stmt|;
name|assertProblems
argument_list|(
name|notes1
argument_list|,
name|fix
argument_list|,
name|problem
argument_list|(
literal|"Multiple patch sets for expected merged commit "
operator|+
name|commit
operator|.
name|name
argument_list|()
operator|+
literal|": ["
operator|+
name|psId1
operator|+
literal|", "
operator|+
name|psId2
operator|+
literal|", "
operator|+
name|psId3
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newUpdate (Account.Id owner)
specifier|private
name|BatchUpdate
name|newUpdate
parameter_list|(
name|Account
operator|.
name|Id
name|owner
parameter_list|)
block|{
return|return
name|batchUpdateFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|userFactory
operator|.
name|create
argument_list|(
name|owner
argument_list|)
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
return|;
block|}
DECL|method|insertChange ()
specifier|private
name|ChangeNotes
name|insertChange
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|insertChange
argument_list|(
name|admin
argument_list|)
return|;
block|}
DECL|method|insertChange (TestAccount owner)
specifier|private
name|ChangeNotes
name|insertChange
parameter_list|(
name|TestAccount
name|owner
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|insertChange
argument_list|(
name|owner
argument_list|,
literal|"refs/heads/master"
argument_list|)
return|;
block|}
DECL|method|insertChange (TestAccount owner, String dest)
specifier|private
name|ChangeNotes
name|insertChange
parameter_list|(
name|TestAccount
name|owner
parameter_list|,
name|String
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
name|Change
operator|.
name|Id
name|id
init|=
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|sequences
operator|.
name|nextChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins
decl_stmt|;
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|newUpdate
argument_list|(
name|owner
operator|.
name|getId
argument_list|()
argument_list|)
init|)
block|{
name|RevCommit
name|commit
init|=
name|patchSetCommit
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|id
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ins
operator|=
name|changeInserterFactory
operator|.
name|create
argument_list|(
name|id
argument_list|,
name|commit
argument_list|,
name|dest
argument_list|)
operator|.
name|setValidate
argument_list|(
literal|false
argument_list|)
operator|.
name|setNotify
argument_list|(
name|NotifyHandling
operator|.
name|NONE
argument_list|)
operator|.
name|setFireRevisionCreated
argument_list|(
literal|false
argument_list|)
operator|.
name|setSendMail
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|bu
operator|.
name|insertChange
argument_list|(
name|ins
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
return|return
name|changeNotesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|ins
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|nextPatchSetId (ChangeNotes notes)
specifier|private
name|PatchSet
operator|.
name|Id
name|nextPatchSetId
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ChangeUtil
operator|.
name|nextPatchSetId
argument_list|(
name|testRepo
operator|.
name|getRepository
argument_list|()
argument_list|,
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|incrementPatchSet (ChangeNotes notes)
specifier|private
name|ChangeNotes
name|incrementPatchSet
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|incrementPatchSet
argument_list|(
name|notes
argument_list|,
name|patchSetCommit
argument_list|(
name|nextPatchSetId
argument_list|(
name|notes
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|incrementPatchSet (ChangeNotes notes, RevCommit commit)
specifier|private
name|ChangeNotes
name|incrementPatchSet
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|RevCommit
name|commit
parameter_list|)
throws|throws
name|Exception
block|{
name|PatchSetInserter
name|ins
decl_stmt|;
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|newUpdate
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
init|)
block|{
name|ins
operator|=
name|patchSetInserterFactory
operator|.
name|create
argument_list|(
name|notes
argument_list|,
name|nextPatchSetId
argument_list|(
name|notes
argument_list|)
argument_list|,
name|commit
argument_list|)
operator|.
name|setValidate
argument_list|(
literal|false
argument_list|)
operator|.
name|setFireRevisionCreated
argument_list|(
literal|false
argument_list|)
operator|.
name|setNotify
argument_list|(
name|NotifyHandling
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|ins
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
return|return
name|reload
argument_list|(
name|notes
argument_list|)
return|;
block|}
DECL|method|reload (ChangeNotes notes)
specifier|private
name|ChangeNotes
name|reload
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|changeNotesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|patchSetCommit (PatchSet.Id psId)
specifier|private
name|RevCommit
name|patchSetCommit
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|)
throws|throws
name|Exception
block|{
name|RevCommit
name|c
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|tip
argument_list|)
operator|.
name|message
argument_list|(
literal|"Change "
operator|+
name|psId
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|testRepo
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
return|;
block|}
DECL|method|insertMissingPatchSet (ChangeNotes notes, String rev)
specifier|private
name|PatchSet
name|insertMissingPatchSet
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|String
name|rev
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Don't use BatchUpdate since we're manually updating the meta ref rather
comment|// than using ChangeUpdate.
name|String
name|subject
init|=
literal|"Subject for missing commit"
decl_stmt|;
name|Change
name|c
init|=
operator|new
name|Change
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|nextPatchSetId
argument_list|(
name|notes
argument_list|)
decl_stmt|;
name|c
operator|.
name|setCurrentPatchSet
argument_list|(
name|psId
argument_list|,
name|subject
argument_list|,
name|c
operator|.
name|getOriginalSubject
argument_list|()
argument_list|)
expr_stmt|;
name|PatchSet
name|ps
init|=
name|newPatchSet
argument_list|(
name|psId
argument_list|,
name|rev
argument_list|,
name|adminId
argument_list|)
decl_stmt|;
if|if
condition|(
name|PrimaryStorage
operator|.
name|of
argument_list|(
name|c
argument_list|)
operator|==
name|PrimaryStorage
operator|.
name|REVIEW_DB
condition|)
block|{
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addNoteDbCommit
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Update patch set "
operator|+
name|psId
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"\n"
operator|+
literal|"Patch-set: "
operator|+
name|psId
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Commit: "
operator|+
name|rev
operator|+
literal|"\n"
operator|+
literal|"Subject: "
operator|+
name|subject
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|c
operator|.
name|getProject
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ps
return|;
block|}
DECL|method|deleteRef (String refName)
specifier|private
name|void
name|deleteRef
parameter_list|(
name|String
name|refName
parameter_list|)
throws|throws
name|Exception
block|{
name|RefUpdate
name|ru
init|=
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|updateRef
argument_list|(
name|refName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|delete
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
DECL|method|addNoteDbCommit (Change.Id id, String commitMessage)
specifier|private
name|void
name|addNoteDbCommit
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|String
name|commitMessage
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|notesMigration
operator|.
name|commitChangeWrites
argument_list|()
condition|)
block|{
return|return;
block|}
name|PersonIdent
name|committer
init|=
name|serverIdent
operator|.
name|get
argument_list|()
decl_stmt|;
name|PersonIdent
name|author
init|=
name|noteUtil
operator|.
name|newIdent
argument_list|(
name|accountCache
operator|.
name|get
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
argument_list|,
name|committer
operator|.
name|getWhen
argument_list|()
argument_list|,
name|committer
argument_list|,
name|anonymousCowardName
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|author
argument_list|(
name|author
argument_list|)
operator|.
name|committer
argument_list|(
name|committer
argument_list|)
operator|.
name|message
argument_list|(
name|commitMessage
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
DECL|method|getDestRef (ChangeNotes notes)
specifier|private
name|ObjectId
name|getDestRef
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|exactRef
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getObjectId
argument_list|()
return|;
block|}
DECL|method|mergeChange (ChangeNotes notes)
specifier|private
name|ChangeNotes
name|mergeChange
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ObjectId
name|oldId
init|=
name|getDestRef
argument_list|(
name|notes
argument_list|)
decl_stmt|;
specifier|final
name|ObjectId
name|newId
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dest
init|=
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|newUpdate
argument_list|(
name|adminId
argument_list|)
init|)
block|{
name|bu
operator|.
name|addOp
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
operator|new
name|BatchUpdateOp
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|updateRepo
parameter_list|(
name|RepoContext
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|ctx
operator|.
name|addRefUpdate
argument_list|(
name|oldId
argument_list|,
name|newId
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|OrmException
block|{
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getUpdate
argument_list|(
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|fixStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
return|return
name|reload
argument_list|(
name|notes
argument_list|)
return|;
block|}
DECL|method|problem (String message)
specifier|private
specifier|static
name|ProblemInfo
name|problem
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|ProblemInfo
name|p
init|=
operator|new
name|ProblemInfo
argument_list|()
decl_stmt|;
name|p
operator|.
name|message
operator|=
name|message
expr_stmt|;
return|return
name|p
return|;
block|}
DECL|method|problem (String message, ProblemInfo.Status status, String outcome)
specifier|private
specifier|static
name|ProblemInfo
name|problem
parameter_list|(
name|String
name|message
parameter_list|,
name|ProblemInfo
operator|.
name|Status
name|status
parameter_list|,
name|String
name|outcome
parameter_list|)
block|{
name|ProblemInfo
name|p
init|=
name|problem
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|p
operator|.
name|status
operator|=
name|checkNotNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
name|checkNotNull
argument_list|(
name|outcome
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
DECL|method|assertProblems ( ChangeNotes notes, @Nullable FixInput fix, ProblemInfo first, ProblemInfo... rest)
specifier|private
name|void
name|assertProblems
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
annotation|@
name|Nullable
name|FixInput
name|fix
parameter_list|,
name|ProblemInfo
name|first
parameter_list|,
name|ProblemInfo
modifier|...
name|rest
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ProblemInfo
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
operator|+
name|rest
operator|.
name|length
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|rest
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checker
operator|.
name|check
argument_list|(
name|controlForNotes
argument_list|(
name|notes
argument_list|)
argument_list|,
name|fix
argument_list|)
operator|.
name|problems
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNoProblems (ChangeNotes notes, @Nullable FixInput fix)
specifier|private
name|void
name|assertNoProblems
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
annotation|@
name|Nullable
name|FixInput
name|fix
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|checker
operator|.
name|check
argument_list|(
name|controlForNotes
argument_list|(
name|notes
argument_list|)
argument_list|,
name|fix
argument_list|)
operator|.
name|problems
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/** @return {@link ChangeControl} for notes and admin regardless of owner. */
DECL|method|controlForNotes (ChangeNotes notes)
specifier|private
name|ChangeControl
name|controlForNotes
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|notes
argument_list|,
name|userFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|id
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

