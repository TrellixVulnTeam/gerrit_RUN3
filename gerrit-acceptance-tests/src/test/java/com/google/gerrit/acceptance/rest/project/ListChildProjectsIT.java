begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|createProject
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|project
operator|.
name|ProjectAssert
operator|.
name|assertProjects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ProjectInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|JSchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|ListChildProjectsIT
specifier|public
class|class
name|ListChildProjectsIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Inject
DECL|field|allProjects
specifier|private
name|AllProjectsName
name|allProjects
decl_stmt|;
annotation|@
name|Test
DECL|method|listChildrenOfNonExistingProject_NotFound ()
specifier|public
name|void
name|listChildrenOfNonExistingProject_NotFound
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_NOT_FOUND
argument_list|,
name|GET
argument_list|(
literal|"/projects/non-existing/children/"
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listNoChildren ()
specifier|public
name|void
name|listNoChildren
parameter_list|()
throws|throws
name|IOException
block|{
name|RestResponse
name|r
init|=
name|GET
argument_list|(
literal|"/projects/"
operator|+
name|allProjects
operator|.
name|get
argument_list|()
operator|+
literal|"/children/"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ProjectInfo
argument_list|>
name|projectInfoList
init|=
name|toProjectInfoList
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// Project 'p' was already created in the base class
name|assertTrue
argument_list|(
name|projectInfoList
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listChildren ()
specifier|public
name|void
name|listChildren
parameter_list|()
throws|throws
name|IOException
throws|,
name|JSchException
block|{
name|Project
operator|.
name|NameKey
name|existingProject
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|child1
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"p1"
argument_list|)
decl_stmt|;
name|createProject
argument_list|(
name|sshSession
argument_list|,
name|child1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Project
operator|.
name|NameKey
name|child2
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"p2"
argument_list|)
decl_stmt|;
name|createProject
argument_list|(
name|sshSession
argument_list|,
name|child2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|createProject
argument_list|(
name|sshSession
argument_list|,
literal|"p1.1"
argument_list|,
name|child1
argument_list|)
expr_stmt|;
name|RestResponse
name|r
init|=
name|GET
argument_list|(
literal|"/projects/"
operator|+
name|allProjects
operator|.
name|get
argument_list|()
operator|+
literal|"/children/"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertProjects
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|existingProject
argument_list|,
name|child1
argument_list|,
name|child2
argument_list|)
argument_list|,
name|toProjectInfoList
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listChildrenRecursively ()
specifier|public
name|void
name|listChildrenRecursively
parameter_list|()
throws|throws
name|IOException
throws|,
name|JSchException
block|{
name|Project
operator|.
name|NameKey
name|child1
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"p1"
argument_list|)
decl_stmt|;
name|createProject
argument_list|(
name|sshSession
argument_list|,
name|child1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|createProject
argument_list|(
name|sshSession
argument_list|,
literal|"p2"
argument_list|)
expr_stmt|;
name|Project
operator|.
name|NameKey
name|child1_1
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"p1.1"
argument_list|)
decl_stmt|;
name|createProject
argument_list|(
name|sshSession
argument_list|,
name|child1_1
operator|.
name|get
argument_list|()
argument_list|,
name|child1
argument_list|)
expr_stmt|;
name|Project
operator|.
name|NameKey
name|child1_2
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"p1.2"
argument_list|)
decl_stmt|;
name|createProject
argument_list|(
name|sshSession
argument_list|,
name|child1_2
operator|.
name|get
argument_list|()
argument_list|,
name|child1
argument_list|)
expr_stmt|;
name|Project
operator|.
name|NameKey
name|child1_1_1
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"p1.1.1"
argument_list|)
decl_stmt|;
name|createProject
argument_list|(
name|sshSession
argument_list|,
name|child1_1_1
operator|.
name|get
argument_list|()
argument_list|,
name|child1_1
argument_list|)
expr_stmt|;
name|Project
operator|.
name|NameKey
name|child1_1_1_1
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"p1.1.1.1"
argument_list|)
decl_stmt|;
name|createProject
argument_list|(
name|sshSession
argument_list|,
name|child1_1_1_1
operator|.
name|get
argument_list|()
argument_list|,
name|child1_1_1
argument_list|)
expr_stmt|;
name|RestResponse
name|r
init|=
name|GET
argument_list|(
literal|"/projects/"
operator|+
name|child1
operator|.
name|get
argument_list|()
operator|+
literal|"/children/?recursive"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertProjects
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|child1_1
argument_list|,
name|child1_2
argument_list|,
name|child1_1_1
argument_list|,
name|child1_1_1_1
argument_list|)
argument_list|,
name|toProjectInfoList
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|toProjectInfoList (RestResponse r)
specifier|private
specifier|static
name|List
argument_list|<
name|ProjectInfo
argument_list|>
name|toProjectInfoList
parameter_list|(
name|RestResponse
name|r
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|ProjectInfo
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
DECL|method|GET (String endpoint)
specifier|private
name|RestResponse
name|GET
parameter_list|(
name|String
name|endpoint
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|adminSession
operator|.
name|get
argument_list|(
name|endpoint
argument_list|)
return|;
block|}
block|}
end_class

end_unit

