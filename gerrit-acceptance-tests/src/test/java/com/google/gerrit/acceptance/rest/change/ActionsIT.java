begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CHANGE_ACTIONS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CURRENT_ACTIONS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CURRENT_REVISION
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ActionVisitor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ActionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|RevisionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|RegistrationHandle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeJson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|ConfigSuite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ActionsIT
specifier|public
class|class
name|ActionsIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|ConfigSuite
operator|.
name|Config
DECL|method|submitWholeTopicEnabled ()
specifier|public
specifier|static
name|Config
name|submitWholeTopicEnabled
parameter_list|()
block|{
return|return
name|submitWholeTopicEnabledConfig
argument_list|()
return|;
block|}
DECL|field|changeJsonFactory
annotation|@
name|Inject
specifier|private
name|ChangeJson
operator|.
name|Factory
name|changeJsonFactory
decl_stmt|;
DECL|field|actionVisitors
annotation|@
name|Inject
specifier|private
name|DynamicSet
argument_list|<
name|ActionVisitor
argument_list|>
name|actionVisitors
decl_stmt|;
DECL|field|visitorHandle
specifier|private
name|RegistrationHandle
name|visitorHandle
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|visitorHandle
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|visitorHandle
operator|!=
literal|null
condition|)
block|{
name|visitorHandle
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|revisionActionsOneChangePerTopicUnapproved ()
specifier|public
name|void
name|revisionActionsOneChangePerTopicUnapproved
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChangeWithTopic
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ActionInfo
argument_list|>
name|actions
init|=
name|getActions
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actions
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actions
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"cherrypick"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actions
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"rebase"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actions
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"description"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revisionActionsOneChangePerTopic ()
specifier|public
name|void
name|revisionActionsOneChangePerTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChangeWithTopic
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ActionInfo
argument_list|>
name|actions
init|=
name|getActions
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|commonActionsAssertions
argument_list|(
name|actions
argument_list|)
expr_stmt|;
comment|// We want to treat a single change in a topic not as a whole topic,
comment|// so regardless of how submitWholeTopic is configured:
name|noSubmitWholeTopicAssertions
argument_list|(
name|actions
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revisionActionsTwoChangesInTopic ()
specifier|public
name|void
name|revisionActionsTwoChangesInTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChangeWithTopic
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|String
name|changeId2
init|=
name|createChangeWithTopic
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ActionInfo
argument_list|>
name|actions
init|=
name|getActions
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|commonActionsAssertions
argument_list|(
name|actions
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSubmitWholeTopicEnabled
argument_list|()
condition|)
block|{
name|ActionInfo
name|info
init|=
name|actions
operator|.
name|get
argument_list|(
literal|"submit"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|enabled
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|label
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Submit whole topic"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|method
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|title
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"This change depends on other changes which are not ready"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|noSubmitWholeTopicAssertions
argument_list|(
name|actions
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getActions
argument_list|(
name|changeId2
argument_list|)
operator|.
name|get
argument_list|(
literal|"submit"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|approve
argument_list|(
name|changeId2
argument_list|)
expr_stmt|;
name|noSubmitWholeTopicAssertions
argument_list|(
name|getActions
argument_list|(
name|changeId2
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|revisionActionsETag ()
specifier|public
name|void
name|revisionActionsETag
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|parent
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|change
init|=
name|createChangeWithTopic
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|String
name|etag1
init|=
name|getETag
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|String
name|etag2
init|=
name|getETag
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|String
name|changeWithSameTopic
init|=
name|createChangeWithTopic
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|etag3
init|=
name|getETag
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|changeWithSameTopic
argument_list|)
expr_stmt|;
name|String
name|etag4
init|=
name|getETag
argument_list|(
name|change
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSubmitWholeTopicEnabled
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|etag1
argument_list|,
name|etag2
argument_list|,
name|etag3
argument_list|,
name|etag4
argument_list|)
argument_list|)
operator|.
name|containsNoDuplicates
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|etag2
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|etag1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|etag3
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|etag2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|etag4
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|etag2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|revisionActionsETagWithHiddenDraftInTopic ()
specifier|public
name|void
name|revisionActionsETagWithHiddenDraftInTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|change
init|=
name|createChangeWithTopic
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|String
name|etag1
init|=
name|getETag
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|String
name|draft
init|=
name|createDraftChange
argument_list|(
literal|"topic"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|draft
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|String
name|etag2
init|=
name|getETag
argument_list|(
name|change
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSubmitWholeTopicEnabled
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|etag2
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|etag1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|etag2
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|etag1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|revisionActionsAnonymousETag ()
specifier|public
name|void
name|revisionActionsAnonymousETag
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|parent
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|change
init|=
name|createChangeWithTopic
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|setApiUserAnonymous
argument_list|()
expr_stmt|;
name|String
name|etag1
init|=
name|getETag
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|setApiUserAnonymous
argument_list|()
expr_stmt|;
name|String
name|etag2
init|=
name|getETag
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|String
name|changeWithSameTopic
init|=
name|createChangeWithTopic
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|setApiUserAnonymous
argument_list|()
expr_stmt|;
name|String
name|etag3
init|=
name|getETag
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|changeWithSameTopic
argument_list|)
expr_stmt|;
name|setApiUserAnonymous
argument_list|()
expr_stmt|;
name|String
name|etag4
init|=
name|getETag
argument_list|(
name|change
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSubmitWholeTopicEnabled
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|etag1
argument_list|,
name|etag2
argument_list|,
name|etag3
argument_list|,
name|etag4
argument_list|)
argument_list|)
operator|.
name|containsNoDuplicates
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|etag2
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|etag1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|etag3
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|etag2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|etag4
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|etag2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|submitType
operator|=
name|SubmitType
operator|.
name|CHERRY_PICK
argument_list|)
DECL|method|revisionActionsAnonymousETagCherryPickStrategy ()
specifier|public
name|void
name|revisionActionsAnonymousETagCherryPickStrategy
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|parent
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|change
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|setApiUserAnonymous
argument_list|()
expr_stmt|;
name|String
name|etag1
init|=
name|getETag
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|setApiUserAnonymous
argument_list|()
expr_stmt|;
name|String
name|etag2
init|=
name|getETag
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|etag2
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|etag1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revisionActionsTwoChangesInTopic_conflicting ()
specifier|public
name|void
name|revisionActionsTwoChangesInTopic_conflicting
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChangeWithTopic
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
comment|// create another change with the same topic
name|String
name|changeId2
init|=
name|createChangeWithTopic
argument_list|(
name|testRepo
argument_list|,
literal|"topic"
argument_list|,
literal|"touching b"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"real content"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|int
name|changeNum2
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|_number
decl_stmt|;
name|approve
argument_list|(
name|changeId2
argument_list|)
expr_stmt|;
comment|// collide with the other change in the same topic
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~2"
argument_list|)
expr_stmt|;
name|String
name|collidingChange
init|=
name|createChangeWithTopic
argument_list|(
name|testRepo
argument_list|,
literal|"off_topic"
argument_list|,
literal|"rewriting file b"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"garbage\ngarbage\ngarbage"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|collidingChange
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|collidingChange
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ActionInfo
argument_list|>
name|actions
init|=
name|getActions
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|commonActionsAssertions
argument_list|(
name|actions
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSubmitWholeTopicEnabled
argument_list|()
condition|)
block|{
name|ActionInfo
name|info
init|=
name|actions
operator|.
name|get
argument_list|(
literal|"submit"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|enabled
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|label
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Submit whole topic"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|method
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|title
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Problems with change(s): "
operator|+
name|changeNum2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|noSubmitWholeTopicAssertions
argument_list|(
name|actions
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|revisionActionsTwoChangesInTopicWithAncestorReady ()
specifier|public
name|void
name|revisionActionsTwoChangesInTopicWithAncestorReady
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|String
name|changeId1
init|=
name|createChangeWithTopic
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|changeId1
argument_list|)
expr_stmt|;
comment|// create another change with the same topic
name|String
name|changeId2
init|=
name|createChangeWithTopic
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|changeId2
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ActionInfo
argument_list|>
name|actions
init|=
name|getActions
argument_list|(
name|changeId1
argument_list|)
decl_stmt|;
name|commonActionsAssertions
argument_list|(
name|actions
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSubmitWholeTopicEnabled
argument_list|()
condition|)
block|{
name|ActionInfo
name|info
init|=
name|actions
operator|.
name|get
argument_list|(
literal|"submit"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|enabled
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|label
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Submit whole topic"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|method
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|title
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Submit all 2 changes of the same "
operator|+
literal|"topic (3 changes including ancestors "
operator|+
literal|"and other changes related by topic)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|noSubmitWholeTopicAssertions
argument_list|(
name|actions
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|revisionActionsReadyWithAncestors ()
specifier|public
name|void
name|revisionActionsReadyWithAncestors
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|String
name|changeId1
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|changeId1
argument_list|)
expr_stmt|;
name|String
name|changeId2
init|=
name|createChangeWithTopic
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|changeId2
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ActionInfo
argument_list|>
name|actions
init|=
name|getActions
argument_list|(
name|changeId2
argument_list|)
decl_stmt|;
name|commonActionsAssertions
argument_list|(
name|actions
argument_list|)
expr_stmt|;
comment|// The topic contains only one change, so standard text applies
name|noSubmitWholeTopicAssertions
argument_list|(
name|actions
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|noSubmitWholeTopicAssertions (Map<String, ActionInfo> actions, int nrChanges)
specifier|private
name|void
name|noSubmitWholeTopicAssertions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ActionInfo
argument_list|>
name|actions
parameter_list|,
name|int
name|nrChanges
parameter_list|)
block|{
name|ActionInfo
name|info
init|=
name|actions
operator|.
name|get
argument_list|(
literal|"submit"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|enabled
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
if|if
condition|(
name|nrChanges
operator|==
literal|1
condition|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|label
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Submit"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|label
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Submit including parents"
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|info
operator|.
name|method
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
if|if
condition|(
name|nrChanges
operator|==
literal|1
condition|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|title
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Submit patch set 1 into master"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|title
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Submit patch set 1 and ancestors (%d changes altogether) into master"
argument_list|,
name|nrChanges
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|changeActionVisitor ()
specifier|public
name|void
name|changeActionVisitor
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|ChangeInfo
name|origChange
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|(
name|CHANGE_ACTIONS
argument_list|)
decl_stmt|;
class|class
name|Visitor
implements|implements
name|ActionVisitor
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|String
name|name
parameter_list|,
name|ActionInfo
name|actionInfo
parameter_list|,
name|ChangeInfo
name|changeInfo
parameter_list|)
block|{
name|assertThat
argument_list|(
name|changeInfo
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|origChange
operator|.
name|_number
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"followup"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"abandon"
argument_list|)
condition|)
block|{
name|actionInfo
operator|.
name|label
operator|=
literal|"Abandon All Hope"
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|String
name|name
parameter_list|,
name|ActionInfo
name|actionInfo
parameter_list|,
name|ChangeInfo
name|changeInfo
parameter_list|,
name|RevisionInfo
name|revisionInfo
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ActionInfo
argument_list|>
name|origActions
init|=
name|origChange
operator|.
name|actions
decl_stmt|;
name|assertThat
argument_list|(
name|origActions
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsAllOf
argument_list|(
literal|"followup"
argument_list|,
literal|"abandon"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|origActions
operator|.
name|get
argument_list|(
literal|"abandon"
argument_list|)
operator|.
name|label
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Abandon"
argument_list|)
expr_stmt|;
name|Visitor
name|v
init|=
operator|new
name|Visitor
argument_list|()
decl_stmt|;
name|visitorHandle
operator|=
name|actionVisitors
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ActionInfo
argument_list|>
name|newActions
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|ListChangesOption
operator|.
name|CHANGE_ACTIONS
argument_list|)
argument_list|)
operator|.
name|actions
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedNames
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|origActions
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|expectedNames
operator|.
name|remove
argument_list|(
literal|"followup"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newActions
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedNames
argument_list|)
expr_stmt|;
name|ActionInfo
name|abandon
init|=
name|newActions
operator|.
name|get
argument_list|(
literal|"abandon"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|abandon
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|abandon
operator|.
name|label
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Abandon All Hope"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|currentRevisionActionVisitor ()
specifier|public
name|void
name|currentRevisionActionVisitor
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|amendChange
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|ChangeInfo
name|origChange
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|(
name|CHANGE_ACTIONS
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|changeId
init|=
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|origChange
operator|.
name|_number
argument_list|)
decl_stmt|;
class|class
name|Visitor
implements|implements
name|ActionVisitor
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|String
name|name
parameter_list|,
name|ActionInfo
name|actionInfo
parameter_list|,
name|ChangeInfo
name|changeInfo
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// Do nothing; implicitly called for CURRENT_ACTIONS.
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|String
name|name
parameter_list|,
name|ActionInfo
name|actionInfo
parameter_list|,
name|ChangeInfo
name|changeInfo
parameter_list|,
name|RevisionInfo
name|revisionInfo
parameter_list|)
block|{
name|assertThat
argument_list|(
name|changeInfo
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|origChange
operator|.
name|_number
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revisionInfo
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|revisionInfo
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"cherrypick"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"rebase"
argument_list|)
condition|)
block|{
name|actionInfo
operator|.
name|label
operator|=
literal|"All Your Base"
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ActionInfo
argument_list|>
name|origActions
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|actions
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|origActions
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsAllOf
argument_list|(
literal|"cherrypick"
argument_list|,
literal|"rebase"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|origActions
operator|.
name|get
argument_list|(
literal|"rebase"
argument_list|)
operator|.
name|label
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Rebase"
argument_list|)
expr_stmt|;
name|Visitor
name|v
init|=
operator|new
name|Visitor
argument_list|()
decl_stmt|;
name|visitorHandle
operator|=
name|actionVisitors
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
comment|// Test different codepaths within ActionJson...
comment|// ...via revision API.
name|visitedCurrentRevisionActionsAssertions
argument_list|(
name|origActions
argument_list|,
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|actions
argument_list|()
argument_list|)
expr_stmt|;
comment|// ...via change API with option.
name|EnumSet
argument_list|<
name|ListChangesOption
argument_list|>
name|opts
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CURRENT_ACTIONS
argument_list|,
name|CURRENT_REVISION
argument_list|)
decl_stmt|;
name|ChangeInfo
name|changeInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|(
name|opts
argument_list|)
decl_stmt|;
name|RevisionInfo
name|revisionInfo
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|changeInfo
operator|.
name|revisions
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|visitedCurrentRevisionActionsAssertions
argument_list|(
name|origActions
argument_list|,
name|revisionInfo
operator|.
name|actions
argument_list|)
expr_stmt|;
comment|// ...via ChangeJson directly.
name|ChangeData
name|cd
init|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
name|revisionInfo
operator|=
name|changeJsonFactory
operator|.
name|create
argument_list|(
name|opts
argument_list|)
operator|.
name|getRevisionInfo
argument_list|(
name|cd
argument_list|,
name|cd
operator|.
name|patchSet
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|changeId
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|visitedCurrentRevisionActionsAssertions ( Map<String, ActionInfo> origActions, Map<String, ActionInfo> newActions)
specifier|private
name|void
name|visitedCurrentRevisionActionsAssertions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ActionInfo
argument_list|>
name|origActions
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ActionInfo
argument_list|>
name|newActions
parameter_list|)
block|{
name|assertThat
argument_list|(
name|newActions
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedNames
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|origActions
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|expectedNames
operator|.
name|remove
argument_list|(
literal|"cherrypick"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newActions
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedNames
argument_list|)
expr_stmt|;
name|ActionInfo
name|rebase
init|=
name|newActions
operator|.
name|get
argument_list|(
literal|"rebase"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rebase
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rebase
operator|.
name|label
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"All Your Base"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|oldRevisionActionVisitor ()
specifier|public
name|void
name|oldRevisionActionVisitor
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|amendChange
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|ChangeInfo
name|origChange
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|(
name|CHANGE_ACTIONS
argument_list|)
decl_stmt|;
class|class
name|Visitor
implements|implements
name|ActionVisitor
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|String
name|name
parameter_list|,
name|ActionInfo
name|actionInfo
parameter_list|,
name|ChangeInfo
name|changeInfo
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// Do nothing; implicitly called for CURRENT_ACTIONS.
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|String
name|name
parameter_list|,
name|ActionInfo
name|actionInfo
parameter_list|,
name|ChangeInfo
name|changeInfo
parameter_list|,
name|RevisionInfo
name|revisionInfo
parameter_list|)
block|{
name|assertThat
argument_list|(
name|changeInfo
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|origChange
operator|.
name|_number
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revisionInfo
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|revisionInfo
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"description"
argument_list|)
condition|)
block|{
name|actionInfo
operator|.
name|label
operator|=
literal|"Describify"
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ActionInfo
argument_list|>
name|origActions
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|revision
argument_list|(
literal|1
argument_list|)
operator|.
name|actions
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|origActions
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"description"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|origActions
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
operator|.
name|label
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Edit Description"
argument_list|)
expr_stmt|;
name|Visitor
name|v
init|=
operator|new
name|Visitor
argument_list|()
decl_stmt|;
name|visitorHandle
operator|=
name|actionVisitors
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
comment|// Unlike for the current revision, actions for old revisions are only available via the
comment|// revision API.
name|Map
argument_list|<
name|String
argument_list|,
name|ActionInfo
argument_list|>
name|newActions
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|revision
argument_list|(
literal|1
argument_list|)
operator|.
name|actions
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|newActions
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|newActions
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|origActions
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|ActionInfo
name|description
init|=
name|newActions
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|description
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|description
operator|.
name|label
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Describify"
argument_list|)
expr_stmt|;
block|}
DECL|method|commonActionsAssertions (Map<String, ActionInfo> actions)
specifier|private
name|void
name|commonActionsAssertions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ActionInfo
argument_list|>
name|actions
parameter_list|)
block|{
name|assertThat
argument_list|(
name|actions
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actions
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"cherrypick"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actions
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"submit"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actions
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"description"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actions
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"rebase"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

