begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
operator|.
name|roundToSecond
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|GerritServerTests
operator|.
name|isNoteDbTestEnabled
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeRebuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ChangeRebuilderIT
specifier|public
class|class
name|ChangeRebuilderIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Inject
DECL|field|rebuilder
specifier|private
name|ChangeRebuilder
name|rebuilder
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isNoteDbTestEnabled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|notesMigration
operator|.
name|setAllEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeFields ()
specifier|public
name|void
name|changeFields
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
name|name
argument_list|(
literal|"a-topic"
argument_list|)
argument_list|)
expr_stmt|;
name|Change
name|old
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|rebuild
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertChangeEqual
argument_list|(
name|old
argument_list|,
name|notesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|getChange
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchSets ()
specifier|public
name|void
name|patchSets
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|PatchSet
name|ps1
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|id
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|PatchSet
name|ps2
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|id
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|rebuild
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|patchSets
init|=
name|notes
operator|.
name|getPatchSets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|patchSets
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ps1
operator|.
name|getId
argument_list|()
argument_list|,
name|ps2
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertPatchSetEqual
argument_list|(
name|ps1
argument_list|,
name|patchSets
operator|.
name|get
argument_list|(
name|ps1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertPatchSetEqual
argument_list|(
name|ps2
argument_list|,
name|patchSets
operator|.
name|get
argument_list|(
name|ps2
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|rebuild (Change.Id... changeIds)
specifier|private
name|void
name|rebuild
parameter_list|(
name|Change
operator|.
name|Id
modifier|...
name|changeIds
parameter_list|)
throws|throws
name|Exception
block|{
name|notesMigration
operator|.
name|setWriteChanges
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Change
operator|.
name|Id
name|id
range|:
name|changeIds
control|)
block|{
name|rebuilder
operator|.
name|rebuild
argument_list|(
name|db
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|notesMigration
operator|.
name|setReadChanges
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|assertChangeEqual (Change expectedReviewDb, Change actualNoteDb)
specifier|private
specifier|static
name|void
name|assertChangeEqual
parameter_list|(
name|Change
name|expectedReviewDb
parameter_list|,
name|Change
name|actualNoteDb
parameter_list|)
block|{
name|assertThat
argument_list|(
name|actualNoteDb
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedReviewDb
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualNoteDb
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedReviewDb
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO(dborowitz): actualNoteDb's timestamps should come from notedb, currently
comment|// they're read from reviewdb.
name|assertThat
argument_list|(
name|roundToSecond
argument_list|(
name|actualNoteDb
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|roundToSecond
argument_list|(
name|expectedReviewDb
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|roundToSecond
argument_list|(
name|actualNoteDb
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|roundToSecond
argument_list|(
name|expectedReviewDb
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualNoteDb
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedReviewDb
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualNoteDb
operator|.
name|getDest
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedReviewDb
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualNoteDb
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedReviewDb
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualNoteDb
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedReviewDb
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualNoteDb
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedReviewDb
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualNoteDb
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedReviewDb
operator|.
name|getTopic
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualNoteDb
operator|.
name|getOriginalSubject
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedReviewDb
operator|.
name|getOriginalSubject
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualNoteDb
operator|.
name|getSubmissionId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedReviewDb
operator|.
name|getSubmissionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertPatchSetEqual (PatchSet expectedReviewDb, PatchSet actualNoteDb)
specifier|private
specifier|static
name|void
name|assertPatchSetEqual
parameter_list|(
name|PatchSet
name|expectedReviewDb
parameter_list|,
name|PatchSet
name|actualNoteDb
parameter_list|)
block|{
name|assertThat
argument_list|(
name|actualNoteDb
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedReviewDb
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualNoteDb
operator|.
name|getRevision
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedReviewDb
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualNoteDb
operator|.
name|getUploader
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedReviewDb
operator|.
name|getUploader
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualNoteDb
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|roundToSecond
argument_list|(
name|expectedReviewDb
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualNoteDb
operator|.
name|isDraft
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedReviewDb
operator|.
name|isDraft
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualNoteDb
operator|.
name|getGroups
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedReviewDb
operator|.
name|getGroups
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualNoteDb
operator|.
name|getPushCertificate
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedReviewDb
operator|.
name|getPushCertificate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

