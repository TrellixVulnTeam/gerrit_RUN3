begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assert_
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|changeMetaRef
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|refsDraftComments
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|DAYS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|OBJ_BLOB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AcceptanceTestRequestScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|DraftInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
operator|.
name|CommentInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
operator|.
name|DraftHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CommentsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|Sequences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|PostReview
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|Rebuild
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|RevisionResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|RepoRefCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeBundle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeBundleReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbChangeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbChangeState
operator|.
name|PrimaryStorage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbUpdateManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|TestChangeRebuilderWrapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|rebuild
operator|.
name|ChangeRebuilder
operator|.
name|NoPatchSetsException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdateOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|UpdateException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|ConfigSuite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|NoteDbChecker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|NoteDbMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestChanges
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestTimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmRuntimeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ChangeRebuilderIT
specifier|public
class|class
name|ChangeRebuilderIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|ConfigSuite
operator|.
name|Default
DECL|method|defaultConfig ()
specifier|public
specifier|static
name|Config
name|defaultConfig
parameter_list|()
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"noteDb"
argument_list|,
literal|null
argument_list|,
literal|"testRebuilderWrapper"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Disable async reindex-if-stale check after index update. This avoids
comment|// unintentional auto-rebuilding of the change in NoteDb during the read
comment|// path of the reindex-if-stale check. For the purposes of this test, we
comment|// want precise control over when auto-rebuilding happens.
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"index"
argument_list|,
literal|null
argument_list|,
literal|"testAutoReindexIfStale"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
DECL|field|allUsers
annotation|@
name|Inject
specifier|private
name|AllUsersName
name|allUsers
decl_stmt|;
DECL|field|checker
annotation|@
name|Inject
specifier|private
name|NoteDbChecker
name|checker
decl_stmt|;
DECL|field|rebuildHandler
annotation|@
name|Inject
specifier|private
name|Rebuild
name|rebuildHandler
decl_stmt|;
DECL|field|dbProvider
annotation|@
name|Inject
specifier|private
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
decl_stmt|;
DECL|field|commentsUtil
annotation|@
name|Inject
specifier|private
name|CommentsUtil
name|commentsUtil
decl_stmt|;
DECL|field|postReview
annotation|@
name|Inject
specifier|private
name|Provider
argument_list|<
name|PostReview
argument_list|>
name|postReview
decl_stmt|;
DECL|field|rebuilderWrapper
annotation|@
name|Inject
specifier|private
name|TestChangeRebuilderWrapper
name|rebuilderWrapper
decl_stmt|;
DECL|field|seq
annotation|@
name|Inject
specifier|private
name|Sequences
name|seq
decl_stmt|;
DECL|field|bundleReader
annotation|@
name|Inject
specifier|private
name|ChangeBundleReader
name|bundleReader
decl_stmt|;
DECL|field|patchSetInfoFactory
annotation|@
name|Inject
specifier|private
name|PatchSetInfoFactory
name|patchSetInfoFactory
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|NoteDbMode
operator|.
name|readWrite
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|setNotesMigration
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|setNotesMigration (boolean writeChanges, boolean readChanges)
specifier|private
name|void
name|setNotesMigration
parameter_list|(
name|boolean
name|writeChanges
parameter_list|,
name|boolean
name|readChanges
parameter_list|)
throws|throws
name|Exception
block|{
name|notesMigration
operator|.
name|setWriteChanges
argument_list|(
name|writeChanges
argument_list|)
expr_stmt|;
name|notesMigration
operator|.
name|setReadChanges
argument_list|(
name|readChanges
argument_list|)
expr_stmt|;
name|db
operator|=
name|atrScope
operator|.
name|reopenDb
argument_list|()
operator|.
name|getReviewDbProvider
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|notesMigration
operator|.
name|readChangeSequence
argument_list|()
condition|)
block|{
comment|// Copy next ReviewDb ID to NoteDb.
name|seq
operator|.
name|getChangeIdRepoSequence
argument_list|()
operator|.
name|set
argument_list|(
name|db
operator|.
name|nextChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Copy next NoteDb ID to ReviewDb.
while|while
condition|(
name|db
operator|.
name|nextChangeId
argument_list|()
operator|<
name|seq
operator|.
name|getChangeIdRepoSequence
argument_list|()
operator|.
name|next
argument_list|()
condition|)
block|{}
block|}
block|}
annotation|@
name|Test
DECL|method|changeFields ()
specifier|public
name|void
name|changeFields
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
name|name
argument_list|(
literal|"a-topic"
argument_list|)
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchSets ()
specifier|public
name|void
name|patchSets
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishedComment ()
specifier|public
name|void
name|publishedComment
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|putComment
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
literal|"comment"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishedCommentAndReply ()
specifier|public
name|void
name|publishedCommentAndReply
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|putComment
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
literal|"comment"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|comments
init|=
name|getPublishedComments
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|parentUuid
init|=
name|comments
operator|.
name|get
argument_list|(
literal|"a.txt"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|id
decl_stmt|;
name|putComment
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
literal|"comment"
argument_list|,
name|parentUuid
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchSetWithNullGroups ()
specifier|public
name|void
name|patchSetWithNullGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|Timestamp
name|ts
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|seq
operator|.
name|nextChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|setCreatedOn
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|c
operator|.
name|setLastUpdatedOn
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|PatchSet
name|ps
init|=
name|TestChanges
operator|.
name|newPatchSet
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setCreatedOn
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps
operator|.
name|getGroups
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|draftComment ()
specifier|public
name|void
name|draftComment
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|putDraft
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
literal|"comment"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|draftAndPublishedComment ()
specifier|public
name|void
name|draftAndPublishedComment
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|putDraft
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
literal|"draft comment"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|putComment
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
literal|"published comment"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishDraftComment ()
specifier|public
name|void
name|publishDraftComment
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|putDraft
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
literal|"draft comment"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|publishDrafts
argument_list|(
name|user
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nullAccountId ()
specifier|public
name|void
name|nullAccountId
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|psId
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
comment|// Events need to be otherwise identical for the account ID to be compared.
name|ChangeMessage
name|msg1
init|=
name|insertMessage
argument_list|(
name|id
argument_list|,
name|psId
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
literal|"message 1"
argument_list|)
decl_stmt|;
name|insertMessage
argument_list|(
name|id
argument_list|,
name|psId
argument_list|,
literal|null
argument_list|,
name|msg1
operator|.
name|getWrittenOn
argument_list|()
argument_list|,
literal|"message 2"
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nullPatchSetId ()
specifier|public
name|void
name|nullPatchSetId
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId1
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|psId1
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
comment|// Events need to be otherwise identical for the PatchSet.ID to be compared.
name|ChangeMessage
name|msg1
init|=
name|insertMessage
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
literal|"message 1"
argument_list|)
decl_stmt|;
name|insertMessage
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|msg1
operator|.
name|getWrittenOn
argument_list|()
argument_list|,
literal|"message 2"
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2
init|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|ChangeMessage
name|msg3
init|=
name|insertMessage
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
literal|"message 3"
argument_list|)
decl_stmt|;
name|insertMessage
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|msg3
operator|.
name|getWrittenOn
argument_list|()
argument_list|,
literal|"message 4"
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PatchSet
operator|.
name|Id
argument_list|>
name|psIds
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeMessage
name|msg
range|:
name|notes
operator|.
name|getChangeMessages
argument_list|()
control|)
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|msg
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|psId
argument_list|)
operator|.
name|named
argument_list|(
literal|"patchset for "
operator|+
name|msg
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|psIds
operator|.
name|put
argument_list|(
name|msg
operator|.
name|getMessage
argument_list|()
argument_list|,
name|psId
argument_list|)
expr_stmt|;
block|}
comment|// Patch set IDs were replaced during conversion process.
name|assertThat
argument_list|(
name|psIds
argument_list|)
operator|.
name|containsEntry
argument_list|(
literal|"message 1"
argument_list|,
name|psId1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psIds
argument_list|)
operator|.
name|containsEntry
argument_list|(
literal|"message 2"
argument_list|,
name|psId1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psIds
argument_list|)
operator|.
name|containsEntry
argument_list|(
literal|"message 3"
argument_list|,
name|psId2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psIds
argument_list|)
operator|.
name|containsEntry
argument_list|(
literal|"message 4"
argument_list|,
name|psId2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noWriteToNewRef ()
specifier|public
name|void
name|noWriteToNewRef
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|checker
operator|.
name|assertNoChangeRef
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
name|name
argument_list|(
literal|"a-topic"
argument_list|)
argument_list|)
expr_stmt|;
comment|// First write doesn't create the ref, but rebuilding works.
name|checker
operator|.
name|assertNoChangeRef
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getUnwrappedDb
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getNoteDbState
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// Now that there is a ref, writes are "turned on" for this change, and
comment|// NoteDb stays up to date without explicit rebuilding.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
name|name
argument_list|(
literal|"new-topic"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getUnwrappedDb
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getNoteDbState
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|checker
operator|.
name|checkChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|restApiNotFoundWhenNoteDbDisabled ()
specifier|public
name|void
name|restApiNotFoundWhenNoteDbDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|rebuildHandler
operator|.
name|apply
argument_list|(
name|parseChangeResource
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Rebuild
operator|.
name|Input
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuildViaRestApi ()
specifier|public
name|void
name|rebuildViaRestApi
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checker
operator|.
name|assertNoChangeRef
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|rebuildHandler
operator|.
name|apply
argument_list|(
name|parseChangeResource
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Rebuild
operator|.
name|Input
argument_list|()
argument_list|)
expr_stmt|;
name|checker
operator|.
name|checkChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeToNewRefForNewChange ()
specifier|public
name|void
name|writeToNewRefForNewChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id1
init|=
name|r1
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
name|name
argument_list|(
literal|"a-topic"
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id2
init|=
name|r2
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
comment|// Second change was created after NoteDb writes were turned on, so it was
comment|// allowed to write to a new ref.
name|checker
operator|.
name|checkChanges
argument_list|(
name|id2
argument_list|)
expr_stmt|;
comment|// First change was created before NoteDb writes were turned on, so its meta
comment|// ref doesn't exist until a manual rebuild.
name|checker
operator|.
name|assertNoChangeRef
argument_list|(
name|project
argument_list|,
name|id1
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noteDbChangeState ()
specifier|public
name|void
name|noteDbChangeState
parameter_list|()
throws|throws
name|Exception
block|{
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|ObjectId
name|changeMetaId
init|=
name|getMetaRef
argument_list|(
name|project
argument_list|,
name|changeMetaRef
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getUnwrappedDb
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getNoteDbState
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeMetaId
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|putDraft
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
literal|"comment by user"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ObjectId
name|userDraftsId
init|=
name|getMetaRef
argument_list|(
name|allUsers
argument_list|,
name|refsDraftComments
argument_list|(
name|id
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getUnwrappedDb
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getNoteDbState
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeMetaId
operator|.
name|name
argument_list|()
operator|+
literal|","
operator|+
name|user
operator|.
name|getId
argument_list|()
operator|+
literal|"="
operator|+
name|userDraftsId
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|putDraft
argument_list|(
name|admin
argument_list|,
name|id
argument_list|,
literal|2
argument_list|,
literal|"comment by admin"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ObjectId
name|adminDraftsId
init|=
name|getMetaRef
argument_list|(
name|allUsers
argument_list|,
name|refsDraftComments
argument_list|(
name|id
argument_list|,
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isLessThan
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getUnwrappedDb
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getNoteDbState
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeMetaId
operator|.
name|name
argument_list|()
operator|+
literal|","
operator|+
name|admin
operator|.
name|getId
argument_list|()
operator|+
literal|"="
operator|+
name|adminDraftsId
operator|.
name|name
argument_list|()
operator|+
literal|","
operator|+
name|user
operator|.
name|getId
argument_list|()
operator|+
literal|"="
operator|+
name|userDraftsId
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|putDraft
argument_list|(
name|admin
argument_list|,
name|id
argument_list|,
literal|2
argument_list|,
literal|"revised comment by admin"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|adminDraftsId
operator|=
name|getMetaRef
argument_list|(
name|allUsers
argument_list|,
name|refsDraftComments
argument_list|(
name|id
argument_list|,
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getUnwrappedDb
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getNoteDbState
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeMetaId
operator|.
name|name
argument_list|()
operator|+
literal|","
operator|+
name|admin
operator|.
name|getId
argument_list|()
operator|+
literal|"="
operator|+
name|adminDraftsId
operator|.
name|name
argument_list|()
operator|+
literal|","
operator|+
name|user
operator|.
name|getId
argument_list|()
operator|+
literal|"="
operator|+
name|userDraftsId
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuildAutomaticallyWhenChangeOutOfDate ()
specifier|public
name|void
name|rebuildAutomaticallyWhenChangeOutOfDate
parameter_list|()
throws|throws
name|Exception
block|{
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// Make a ReviewDb change behind NoteDb's back and ensure it's detected.
name|setNotesMigration
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
name|name
argument_list|(
literal|"a-topic"
argument_list|)
argument_list|)
expr_stmt|;
name|setInvalidNoteDbState
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|false
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// On next NoteDb read, the change is transparently rebuilt.
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|topic
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|(
literal|"a-topic"
argument_list|)
argument_list|)
expr_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// Check that the bundles are equal.
name|ChangeBundle
name|actual
init|=
name|ChangeBundle
operator|.
name|fromNotes
argument_list|(
name|commentsUtil
argument_list|,
name|notesFactory
operator|.
name|create
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|ChangeBundle
name|expected
init|=
name|bundleReader
operator|.
name|fromReviewDb
argument_list|(
name|getUnwrappedDb
argument_list|()
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|differencesFrom
argument_list|(
name|expected
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuildAutomaticallyWithinBatchUpdate ()
specifier|public
name|void
name|rebuildAutomaticallyWithinBatchUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
specifier|final
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// Update ReviewDb and NoteDb, then revert the corresponding NoteDb change
comment|// to simulate it failing.
name|NoteDbChangeState
name|oldState
init|=
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|getUnwrappedDb
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|topic
init|=
name|name
argument_list|(
literal|"a-topic"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
name|topic
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|)
operator|.
name|update
argument_list|(
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|id
argument_list|)
argument_list|,
name|oldState
operator|.
name|getChangeMetaId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertChangeUpToDate
argument_list|(
literal|false
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// Next NoteDb read comes inside the transaction started by BatchUpdate. In
comment|// reality this could be caused by a failed update happening between when
comment|// the change is parsed by ChangesCollection and when the BatchUpdate
comment|// executes. We simulate it here by using BatchUpdate directly and not going
comment|// through an API handler.
specifier|final
name|String
name|msg
init|=
literal|"message from BatchUpdate"
decl_stmt|;
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|batchUpdateFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
init|)
block|{
name|bu
operator|.
name|addOp
argument_list|(
name|id
argument_list|,
operator|new
name|BatchUpdateOp
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|OrmException
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|ChangeMessage
name|cm
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|id
argument_list|,
name|ChangeUtil
operator|.
name|messageUuid
argument_list|()
argument_list|)
argument_list|,
name|ctx
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|,
name|psId
argument_list|)
decl_stmt|;
name|cm
operator|.
name|setMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getDb
argument_list|()
operator|.
name|changeMessages
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|cm
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getUpdate
argument_list|(
name|psId
argument_list|)
operator|.
name|setChangeMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected update to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UpdateException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"cannot copy ChangeNotesState"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO(dborowitz): Re-enable these assertions once we fix auto-rebuilding
comment|// in the BatchUpdate path.
comment|//// As an implementation detail, change wasn't actually rebuilt inside the
comment|//// BatchUpdate transaction, but it was rebuilt during read for the
comment|//// subsequent reindex. Thus it's impossible to actually observe an
comment|//// out-of-date state in the caller.
comment|//assertChangeUpToDate(true, id);
comment|//// Check that the bundles are equal.
comment|//ChangeNotes notes = notesFactory.create(dbProvider.get(), project, id);
comment|//ChangeBundle actual = ChangeBundle.fromNotes(commentsUtil, notes);
comment|//ChangeBundle expected = bundleReader.fromReviewDb(getUnwrappedDb(), id);
comment|//assertThat(actual.differencesFrom(expected)).isEmpty();
comment|//assertThat(
comment|//        Iterables.transform(
comment|//            notes.getChangeMessages(),
comment|//            ChangeMessage::getMessage))
comment|//    .contains(msg);
comment|//assertThat(actual.getChange().getTopic()).isEqualTo(topic);
block|}
annotation|@
name|Test
DECL|method|rebuildIgnoresErrorIfChangeIsUpToDateAfter ()
specifier|public
name|void
name|rebuildIgnoresErrorIfChangeIsUpToDateAfter
parameter_list|()
throws|throws
name|Exception
block|{
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// Make a ReviewDb change behind NoteDb's back and ensure it's detected.
name|setNotesMigration
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
name|name
argument_list|(
literal|"a-topic"
argument_list|)
argument_list|)
expr_stmt|;
name|setInvalidNoteDbState
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|false
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// Force the next rebuild attempt to fail but also rebuild the change in the
comment|// background.
name|rebuilderWrapper
operator|.
name|stealNextUpdate
argument_list|()
expr_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|topic
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|(
literal|"a-topic"
argument_list|)
argument_list|)
expr_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// Check that the bundles are equal.
name|ChangeBundle
name|actual
init|=
name|ChangeBundle
operator|.
name|fromNotes
argument_list|(
name|commentsUtil
argument_list|,
name|notesFactory
operator|.
name|create
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|ChangeBundle
name|expected
init|=
name|bundleReader
operator|.
name|fromReviewDb
argument_list|(
name|getUnwrappedDb
argument_list|()
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|differencesFrom
argument_list|(
name|expected
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuildReturnsCorrectResultEvenIfSavingToNoteDbFailed ()
specifier|public
name|void
name|rebuildReturnsCorrectResultEvenIfSavingToNoteDbFailed
parameter_list|()
throws|throws
name|Exception
block|{
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|ObjectId
name|oldMetaId
init|=
name|getMetaRef
argument_list|(
name|project
argument_list|,
name|changeMetaRef
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
comment|// Make a ReviewDb change behind NoteDb's back.
name|setNotesMigration
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
name|name
argument_list|(
literal|"a-topic"
argument_list|)
argument_list|)
expr_stmt|;
name|setInvalidNoteDbState
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|false
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getMetaRef
argument_list|(
name|project
argument_list|,
name|changeMetaRef
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|oldMetaId
argument_list|)
expr_stmt|;
comment|// Force the next rebuild attempt to fail.
name|rebuilderWrapper
operator|.
name|failNextUpdate
argument_list|()
expr_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
decl_stmt|;
comment|// Not up to date, but the actual returned state matches anyway.
name|assertChangeUpToDate
argument_list|(
literal|false
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getMetaRef
argument_list|(
name|project
argument_list|,
name|changeMetaRef
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|oldMetaId
argument_list|)
expr_stmt|;
name|ChangeBundle
name|actual
init|=
name|ChangeBundle
operator|.
name|fromNotes
argument_list|(
name|commentsUtil
argument_list|,
name|notes
argument_list|)
decl_stmt|;
name|ChangeBundle
name|expected
init|=
name|bundleReader
operator|.
name|fromReviewDb
argument_list|(
name|getUnwrappedDb
argument_list|()
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|differencesFrom
argument_list|(
name|expected
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|false
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// Another rebuild attempt succeeds
name|notesFactory
operator|.
name|create
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getMetaRef
argument_list|(
name|project
argument_list|,
name|changeMetaRef
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldMetaId
argument_list|)
expr_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuildReturnsDraftResultWhenRebuildingInChangeNotesFails ()
specifier|public
name|void
name|rebuildReturnsDraftResultWhenRebuildingInChangeNotesFails
parameter_list|()
throws|throws
name|Exception
block|{
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|putDraft
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
literal|"comment by user"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|ObjectId
name|oldMetaId
init|=
name|getMetaRef
argument_list|(
name|allUsers
argument_list|,
name|refsDraftComments
argument_list|(
name|id
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Add a draft behind NoteDb's back.
name|setNotesMigration
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|putDraft
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
literal|"second comment by user"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setInvalidNoteDbState
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertDraftsUpToDate
argument_list|(
literal|false
argument_list|,
name|id
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getMetaRef
argument_list|(
name|allUsers
argument_list|,
name|refsDraftComments
argument_list|(
name|id
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|oldMetaId
argument_list|)
expr_stmt|;
comment|// Force the next rebuild attempt to fail (in ChangeNotes).
name|rebuilderWrapper
operator|.
name|failNextUpdate
argument_list|()
expr_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|notes
operator|.
name|getDraftComments
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getMetaRef
argument_list|(
name|allUsers
argument_list|,
name|refsDraftComments
argument_list|(
name|id
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|oldMetaId
argument_list|)
expr_stmt|;
comment|// Not up to date, but the actual returned state matches anyway.
name|assertDraftsUpToDate
argument_list|(
literal|false
argument_list|,
name|id
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|ChangeBundle
name|actual
init|=
name|ChangeBundle
operator|.
name|fromNotes
argument_list|(
name|commentsUtil
argument_list|,
name|notes
argument_list|)
decl_stmt|;
name|ChangeBundle
name|expected
init|=
name|bundleReader
operator|.
name|fromReviewDb
argument_list|(
name|getUnwrappedDb
argument_list|()
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|differencesFrom
argument_list|(
name|expected
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// Another rebuild attempt succeeds
name|notesFactory
operator|.
name|create
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertDraftsUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getMetaRef
argument_list|(
name|allUsers
argument_list|,
name|refsDraftComments
argument_list|(
name|id
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldMetaId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuildReturnsDraftResultWhenRebuildingInDraftCommentNotesFails ()
specifier|public
name|void
name|rebuildReturnsDraftResultWhenRebuildingInDraftCommentNotesFails
parameter_list|()
throws|throws
name|Exception
block|{
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|putDraft
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
literal|"comment by user"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|ObjectId
name|oldMetaId
init|=
name|getMetaRef
argument_list|(
name|allUsers
argument_list|,
name|refsDraftComments
argument_list|(
name|id
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Add a draft behind NoteDb's back.
name|setNotesMigration
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|putDraft
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
literal|"second comment by user"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ReviewDb
name|db
init|=
name|getUnwrappedDb
argument_list|()
decl_stmt|;
name|Change
name|c
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// Leave change meta ID alone so DraftCommentNotes does the rebuild.
name|ObjectId
name|badSha
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
decl_stmt|;
name|NoteDbChangeState
name|bogusState
init|=
operator|new
name|NoteDbChangeState
argument_list|(
name|id
argument_list|,
name|PrimaryStorage
operator|.
name|REVIEW_DB
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|NoteDbChangeState
operator|.
name|RefState
operator|.
name|create
argument_list|(
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|c
argument_list|)
operator|.
name|getChangeMetaId
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|badSha
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|setNoteDbState
argument_list|(
name|bogusState
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|assertDraftsUpToDate
argument_list|(
literal|false
argument_list|,
name|id
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getMetaRef
argument_list|(
name|allUsers
argument_list|,
name|refsDraftComments
argument_list|(
name|id
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|oldMetaId
argument_list|)
expr_stmt|;
comment|// Force the next rebuild attempt to fail (in DraftCommentNotes).
name|rebuilderWrapper
operator|.
name|failNextUpdate
argument_list|()
expr_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|notes
operator|.
name|getDraftComments
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getMetaRef
argument_list|(
name|allUsers
argument_list|,
name|refsDraftComments
argument_list|(
name|id
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|oldMetaId
argument_list|)
expr_stmt|;
comment|// Not up to date, but the actual returned state matches anyway.
name|assertChangeUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertDraftsUpToDate
argument_list|(
literal|false
argument_list|,
name|id
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|ChangeBundle
name|actual
init|=
name|ChangeBundle
operator|.
name|fromNotes
argument_list|(
name|commentsUtil
argument_list|,
name|notes
argument_list|)
decl_stmt|;
name|ChangeBundle
name|expected
init|=
name|bundleReader
operator|.
name|fromReviewDb
argument_list|(
name|getUnwrappedDb
argument_list|()
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|differencesFrom
argument_list|(
name|expected
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// Another rebuild attempt succeeds
name|notesFactory
operator|.
name|create
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|getDraftComments
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertDraftsUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getMetaRef
argument_list|(
name|allUsers
argument_list|,
name|refsDraftComments
argument_list|(
name|id
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldMetaId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuildAutomaticallyWhenDraftsOutOfDate ()
specifier|public
name|void
name|rebuildAutomaticallyWhenDraftsOutOfDate
parameter_list|()
throws|throws
name|Exception
block|{
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|putDraft
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
literal|"comment"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertDraftsUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|,
name|user
argument_list|)
expr_stmt|;
comment|// Make a ReviewDb change behind NoteDb's back and ensure it's detected.
name|setNotesMigration
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|putDraft
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
literal|"comment"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setInvalidNoteDbState
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertDraftsUpToDate
argument_list|(
literal|false
argument_list|,
name|id
argument_list|,
name|user
argument_list|)
expr_stmt|;
comment|// On next NoteDb read, the drafts are transparently rebuilt.
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|drafts
argument_list|()
argument_list|)
operator|.
name|containsKey
argument_list|(
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|)
expr_stmt|;
name|assertDraftsUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushCert ()
specifier|public
name|void
name|pushCert
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We don't have the code in our test harness to do signed pushes, so just
comment|// use a hard-coded cert. This cert was actually generated by C git 2.2.0
comment|// (albeit not for sending to Gerrit).
name|String
name|cert
init|=
literal|"certificate version 0.1\n"
operator|+
literal|"pusher Dave Borowitz<dborowitz@google.com> 1433954361 -0700\n"
operator|+
literal|"pushee git://localhost/repo.git\n"
operator|+
literal|"nonce 1433954361-bde756572d665bba81d8\n"
operator|+
literal|"\n"
operator|+
literal|"0000000000000000000000000000000000000000"
operator|+
literal|"b981a177396fb47345b7df3e4d3f854c6bea7"
operator|+
literal|"s/heads/master\n"
operator|+
literal|"-----BEGIN PGP SIGNATURE-----\n"
operator|+
literal|"Version: GnuPG v1\n"
operator|+
literal|"\n"
operator|+
literal|"iQEcBAABAgAGBQJVeGg5AAoJEPfTicJkUdPkUggH/RKAeI9/i/LduuiqrL/SSdIa\n"
operator|+
literal|"9tYaSqJKLbXz63M/AW4Sp+4u+dVCQvnAt/a35CVEnpZz6hN4Kn/tiswOWVJf4CO7\n"
operator|+
literal|"htNubGs5ZMwvD6sLYqKAnrM3WxV/2TbbjzjZW6Jkidz3jz/WRT4SmjGYiEO7aA+V\n"
operator|+
literal|"4ZdIS9f7sW5VsHHYlNThCA7vH8Uu48bUovFXyQlPTX0pToSgrWV3JnTxDNxfn3iG\n"
operator|+
literal|"IL0zTY/qwVCdXgFownLcs6J050xrrBWIKqfcWr3u4D2aCLyR0v+S/KArr7ulZygY\n"
operator|+
literal|"+SOklImn8TAZiNxhWtA6ens66IiammUkZYFv7SSzoPLFZT4dC84SmGPWgf94NoQ=\n"
operator|+
literal|"=XFeC\n"
operator|+
literal|"-----END PGP SIGNATURE-----\n"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|psId
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|PatchSet
name|ps
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psId
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setPushCertificate
argument_list|(
name|cert
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyTopic ()
specifier|public
name|void
name|emptyTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|Change
name|c
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|c
operator|.
name|setTopic
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Rebuild and check was successful, but NoteDb doesn't support storing an
comment|// empty topic, so it comes out as null.
name|ChangeNotes
name|notes
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commentBeforeFirstPatchSet ()
specifier|public
name|void
name|commentBeforeFirstPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|psId
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|Change
name|c
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|c
operator|.
name|setCreatedOn
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|c
operator|.
name|getCreatedOn
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|ReviewInput
name|rin
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|rin
operator|.
name|message
operator|=
literal|"comment"
expr_stmt|;
name|Timestamp
name|ts
init|=
operator|new
name|Timestamp
argument_list|(
name|c
operator|.
name|getCreatedOn
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|2000
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ts
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|c
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts
argument_list|)
operator|.
name|isLessThan
argument_list|(
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psId
argument_list|)
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|RevisionResource
name|revRsrc
init|=
name|parseCurrentRevisionResource
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|postReview
operator|.
name|get
argument_list|()
operator|.
name|apply
argument_list|(
name|revRsrc
argument_list|,
name|rin
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commentPredatingChangeBySomeoneOtherThanOwner ()
specifier|public
name|void
name|commentPredatingChangeBySomeoneOtherThanOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|psId
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|Change
name|c
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ReviewInput
name|rin
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|rin
operator|.
name|message
operator|=
literal|"comment"
expr_stmt|;
name|Timestamp
name|ts
init|=
operator|new
name|Timestamp
argument_list|(
name|c
operator|.
name|getCreatedOn
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
literal|10000
argument_list|)
decl_stmt|;
name|RevisionResource
name|revRsrc
init|=
name|parseCurrentRevisionResource
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|postReview
operator|.
name|get
argument_list|()
operator|.
name|apply
argument_list|(
name|revRsrc
argument_list|,
name|rin
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noteDbUsesOriginalSubjectFromPatchSetAndIgnoresChangeField ()
specifier|public
name|void
name|noteDbUsesOriginalSubjectFromPatchSetAndIgnoresChangeField
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|orig
init|=
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|orig
operator|+
literal|" v2"
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"new contents"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|psId
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|Change
name|c
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|c
operator|.
name|setCurrentPatchSet
argument_list|(
name|psId
argument_list|,
name|c
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|"Bogus original subject"
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|Change
name|nc
init|=
name|notes
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|nc
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nc
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|orig
operator|+
literal|" v2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nc
operator|.
name|getOriginalSubject
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|c
operator|.
name|getOriginalSubject
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nc
operator|.
name|getOriginalSubject
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|orig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteDraftPS1WithNoOtherEntities ()
specifier|public
name|void
name|deleteDraftPS1WithNoOtherEntities
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/drafts/master"
argument_list|)
decl_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"4711"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/drafts/master"
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|psId
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
literal|1
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getPatchSets
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|psId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ignorePatchLineCommentsOnPatchSet0 ()
specifier|public
name|void
name|ignorePatchLineCommentsOnPatchSet0
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
name|change
init|=
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|change
operator|.
name|getId
argument_list|()
decl_stmt|;
name|PatchLineComment
name|comment
init|=
operator|new
name|PatchLineComment
argument_list|(
operator|new
name|PatchLineComment
operator|.
name|Key
argument_list|(
operator|new
name|Patch
operator|.
name|Key
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|id
argument_list|,
literal|0
argument_list|)
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|)
argument_list|,
literal|"uuid"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|comment
operator|.
name|setSide
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|comment
operator|.
name|setMessage
argument_list|(
literal|"message"
argument_list|)
expr_stmt|;
name|comment
operator|.
name|setStatus
argument_list|(
name|PatchLineComment
operator|.
name|Status
operator|.
name|PUBLISHED
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|leadingSpacesInSubject ()
specifier|public
name|void
name|leadingSpacesInSubject
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|subj
init|=
literal|"   "
operator|+
name|PushOneCommit
operator|.
name|SUBJECT
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|subj
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
name|PushOneCommit
operator|.
name|FILE_CONTENT
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|Change
name|change
init|=
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|subj
argument_list|)
expr_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|subj
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createWithAutoRebuildingDisabled ()
specifier|public
name|void
name|createWithAutoRebuildingDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|ReviewDb
name|oldDb
init|=
name|db
decl_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|ChangeNotes
name|oldNotes
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
decl_stmt|;
comment|// Make a ReviewDb change behind NoteDb's back.
name|Change
name|c
init|=
name|oldDb
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|String
name|topic
init|=
name|name
argument_list|(
literal|"a-topic"
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTopic
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|oldDb
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|oldDb
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeNotes
name|newNotes
init|=
name|notesFactory
operator|.
name|createWithAutoRebuildingDisabled
argument_list|(
name|c
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newNotes
operator|.
name|getChange
argument_list|()
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newNotes
operator|.
name|getChange
argument_list|()
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|oldNotes
operator|.
name|getChange
argument_list|()
operator|.
name|getTopic
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuildDeletesOldDraftRefs ()
specifier|public
name|void
name|rebuildDeletesOldDraftRefs
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|putDraft
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
literal|"comment"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Account
operator|.
name|Id
name|otherAccountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|1234
argument_list|)
decl_stmt|;
name|String
name|otherDraftRef
init|=
name|refsDraftComments
argument_list|(
name|id
argument_list|,
name|otherAccountId
argument_list|)
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|ObjectInserter
name|ins
operator|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
name|ObjectId
name|sha
init|=
name|ins
operator|.
name|insert
argument_list|(
name|OBJ_BLOB
argument_list|,
literal|"garbage data"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|ins
operator|.
name|flush
argument_list|()
expr_stmt|;
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|otherDraftRef
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|sha
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|update
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|otherDraftRef
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|failWhenWritesDisabled ()
specifier|public
name|void
name|failWhenWritesDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|topic
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// Turning off writes causes failure.
name|setNotesMigration
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
name|name
argument_list|(
literal|"a-topic"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected write to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RestApiException
name|e
parameter_list|)
block|{
name|assertChangesReadOnly
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Update was not written.
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|topic
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuildWhenWritesDisabledWorksButDoesNotWrite ()
specifier|public
name|void
name|rebuildWhenWritesDisabledWorksButDoesNotWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|true
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// Make a ReviewDb change behind NoteDb's back and ensure it's detected.
name|setNotesMigration
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
name|name
argument_list|(
literal|"a-topic"
argument_list|)
argument_list|)
expr_stmt|;
name|setInvalidNoteDbState
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|false
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// On next NoteDb read, change is rebuilt in-memory but not stored.
name|setNotesMigration
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|topic
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|(
literal|"a-topic"
argument_list|)
argument_list|)
expr_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|false
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// Attempting to write directly causes failure.
try|try
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
name|name
argument_list|(
literal|"other-topic"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected write to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RestApiException
name|e
parameter_list|)
block|{
name|assertChangesReadOnly
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Update was not written.
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|topic
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|(
literal|"a-topic"
argument_list|)
argument_list|)
expr_stmt|;
name|assertChangeUpToDate
argument_list|(
literal|false
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuildChangeWithNoPatchSets ()
specifier|public
name|void
name|rebuildChangeWithNoPatchSets
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|id
argument_list|)
expr_stmt|;
try|try
block|{
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|byChange
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|exception
operator|.
name|expect
argument_list|(
name|NoPatchSetsException
operator|.
name|class
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuildEntitiesCreatedByImpersonation ()
specifier|public
name|void
name|rebuildEntitiesCreatedByImpersonation
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|id
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
literal|"/changes/"
operator|+
name|id
operator|+
literal|"/revisions/current/"
decl_stmt|;
comment|// For each of the entities that have a real user field, create one entity
comment|// without impersonation and one with.
name|CommentInput
name|ci
init|=
operator|new
name|CommentInput
argument_list|()
decl_stmt|;
name|ci
operator|.
name|path
operator|=
name|Patch
operator|.
name|COMMIT_MSG
expr_stmt|;
name|ci
operator|.
name|side
operator|=
name|Side
operator|.
name|REVISION
expr_stmt|;
name|ci
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|ci
operator|.
name|message
operator|=
literal|"comment without impersonation"
expr_stmt|;
name|ReviewInput
name|ri
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|ri
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ri
operator|.
name|message
operator|=
literal|"message without impersonation"
expr_stmt|;
name|ri
operator|.
name|drafts
operator|=
name|DraftHandling
operator|.
name|KEEP
expr_stmt|;
name|ri
operator|.
name|comments
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|ci
operator|.
name|path
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ci
argument_list|)
argument_list|)
expr_stmt|;
name|userRestSession
operator|.
name|post
argument_list|(
name|prefix
operator|+
literal|"review"
argument_list|,
name|ri
argument_list|)
operator|.
name|assertOK
argument_list|()
expr_stmt|;
name|DraftInput
name|di
init|=
operator|new
name|DraftInput
argument_list|()
decl_stmt|;
name|di
operator|.
name|path
operator|=
name|Patch
operator|.
name|COMMIT_MSG
expr_stmt|;
name|di
operator|.
name|side
operator|=
name|Side
operator|.
name|REVISION
expr_stmt|;
name|di
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|di
operator|.
name|message
operator|=
literal|"draft without impersonation"
expr_stmt|;
name|userRestSession
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|"drafts"
argument_list|,
name|di
argument_list|)
operator|.
name|assertCreated
argument_list|()
expr_stmt|;
name|allowRunAs
argument_list|()
expr_stmt|;
try|try
block|{
name|Header
name|runAs
init|=
operator|new
name|BasicHeader
argument_list|(
literal|"X-Gerrit-RunAs"
argument_list|,
name|user
operator|.
name|id
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ci
operator|.
name|message
operator|=
literal|"comment with impersonation"
expr_stmt|;
name|ri
operator|.
name|message
operator|=
literal|"message with impersonation"
expr_stmt|;
name|ri
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|adminRestSession
operator|.
name|postWithHeader
argument_list|(
name|prefix
operator|+
literal|"review"
argument_list|,
name|ri
argument_list|,
name|runAs
argument_list|)
operator|.
name|assertOK
argument_list|()
expr_stmt|;
name|di
operator|.
name|message
operator|=
literal|"draft with impersonation"
expr_stmt|;
name|adminRestSession
operator|.
name|putWithHeader
argument_list|(
name|prefix
operator|+
literal|"drafts"
argument_list|,
name|runAs
argument_list|,
name|di
argument_list|)
operator|.
name|assertCreated
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|removeRunAs
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|msgs
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|onResultOf
argument_list|(
name|ChangeMessage
operator|::
name|getWrittenOn
argument_list|)
operator|.
name|sortedCopy
argument_list|(
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|byChange
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|msgs
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msgs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"message without impersonation"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msgs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msgs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRealAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msgs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"message with impersonation"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msgs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msgs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getRealAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|psas
init|=
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byChange
argument_list|(
name|id
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|psas
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRealAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|)
expr_stmt|;
name|Ordering
argument_list|<
name|PatchLineComment
argument_list|>
name|commentOrder
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|onResultOf
argument_list|(
name|PatchLineComment
operator|::
name|getWrittenOn
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|drafts
init|=
name|commentOrder
operator|.
name|sortedCopy
argument_list|(
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|draftByPatchSetAuthor
argument_list|(
name|psId
argument_list|,
name|user
operator|.
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|drafts
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|drafts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"draft without impersonation"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|drafts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|drafts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRealAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|drafts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"draft with impersonation"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|drafts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|drafts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRealAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|pub
init|=
name|commentOrder
operator|.
name|sortedCopy
argument_list|(
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|publishedByPatchSet
argument_list|(
name|psId
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|pub
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pub
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"comment without impersonation"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pub
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pub
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRealAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pub
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"comment with impersonation"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pub
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pub
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRealAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|laterEventsDependingOnEarlierPatchSetDontIntefereWithOtherPatchSets ()
specifier|public
name|void
name|laterEventsDependingOnEarlierPatchSetDontIntefereWithOtherPatchSets
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeData
name|cd
init|=
name|r1
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|cd
operator|.
name|getId
argument_list|()
decl_stmt|;
name|amendChange
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|TestTimeUtil
operator|.
name|incrementClock
argument_list|(
literal|90
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
expr_stmt|;
name|ReviewInput
name|rin
init|=
name|ReviewInput
operator|.
name|approve
argument_list|()
decl_stmt|;
name|rin
operator|.
name|message
operator|=
literal|"Some very late message on PS1"
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
literal|1
argument_list|)
operator|.
name|review
argument_list|(
name|rin
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ignoreChangeMessageBeyondCurrentPatchSet ()
specifier|public
name|void
name|ignoreChangeMessageBeyondCurrentPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId1
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|psId1
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|byChange
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|psId2
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|deleteKeys
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|psId2
argument_list|)
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|psId2
operator|.
name|getParentKey
argument_list|()
argument_list|)
expr_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ChangeData
name|cd
init|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|psId1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|patchSets
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ps
lambda|->
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|psId1
argument_list|)
expr_stmt|;
name|PatchSet
name|ps
init|=
name|cd
operator|.
name|currentPatchSet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ps
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|psId1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|highestNumberedPatchSetIsNotCurrent ()
specifier|public
name|void
name|highestNumberedPatchSetIsNotCurrent
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId1
init|=
name|r1
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|psId1
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|amendChange
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2
init|=
name|r2
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|batchUpdateFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
init|)
block|{
name|bu
operator|.
name|addOp
argument_list|(
name|id
argument_list|,
operator|new
name|BatchUpdateOp
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|PatchSetInfoNotAvailableException
block|{
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|setCurrentPatchSet
argument_list|(
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|,
name|psId1
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|ChangeNotes
name|notes
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|psUtil
operator|.
name|byChangeAsMap
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|psId1
argument_list|,
name|psId2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|psId1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|psId1
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|notes
operator|=
name|notesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psUtil
operator|.
name|byChangeAsMap
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|psId1
argument_list|,
name|psId2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|psId1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|resolveCommentsInheritsValueFromParentWhenUnspecified ()
specifier|public
name|void
name|resolveCommentsInheritsValueFromParentWhenUnspecified
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|putDraft
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
literal|"comment"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|putDraft
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
literal|"newComment"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|comments
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|drafts
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|cList
range|:
name|comments
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|CommentInfo
name|ci
range|:
name|cList
control|)
block|{
name|assertThat
argument_list|(
name|ci
operator|.
name|unresolved
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|rebuilderRespectsReadOnlyInNoteDbChangeState ()
specifier|public
name|void
name|rebuilderRespectsReadOnlyInNoteDbChangeState
parameter_list|()
throws|throws
name|Exception
block|{
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId1
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|psId1
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ReviewDb
name|db
init|=
name|getUnwrappedDb
argument_list|()
decl_stmt|;
name|Change
name|c
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|NoteDbChangeState
name|state
init|=
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Timestamp
name|until
init|=
operator|new
name|Timestamp
argument_list|(
name|TimeUtil
operator|.
name|nowMs
argument_list|()
operator|+
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|1
argument_list|,
name|DAYS
argument_list|)
argument_list|)
decl_stmt|;
name|state
operator|=
name|state
operator|.
name|withReadOnlyUntil
argument_list|(
name|until
argument_list|)
expr_stmt|;
name|c
operator|.
name|setNoteDbState
argument_list|(
name|state
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|rebuilderWrapper
operator|.
name|rebuild
argument_list|(
name|db
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|fail
argument_list|(
literal|"expected rebuild to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmRuntimeException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"read-only until"
argument_list|)
expr_stmt|;
block|}
name|TestTimeUtil
operator|.
name|setClock
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|until
operator|.
name|getTime
argument_list|()
operator|+
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rebuilderWrapper
operator|.
name|rebuild
argument_list|(
name|db
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitWithCrLineEndings ()
specifier|public
name|void
name|commitWithCrLineEndings
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|(
literal|"Subject\r\rBody\r"
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
name|PushOneCommit
operator|.
name|FILE_CONTENT
argument_list|)
decl_stmt|;
name|Change
name|c
init|=
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
decl_stmt|;
comment|// This assertion demonstrates an arguable bug in JGit's commit subject
comment|// parsing, and shows how this kind of data might have gotten into
comment|// ReviewDb. If that bug ever gets fixed upstream, this assert may start
comment|// failing. If that happens, this test can be rewritten to directly set the
comment|// subject field in ReviewDb.
name|assertThat
argument_list|(
name|c
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Subject\r\rBody"
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchSetsOutOfOrder ()
specifier|public
name|void
name|patchSetsOutOfOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|amendChange
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|amendChange
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ChangeData
name|cd
init|=
name|r
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId3
init|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|psId3
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|PatchSet
name|ps1
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|PatchSet
name|ps3
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psId3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ps1
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|.
name|isLessThan
argument_list|(
name|ps3
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
comment|// Simulate an old Gerrit bug by setting the created timestamp of the latest
comment|// patch set ID to the timestamp of PS1.
name|ps3
operator|.
name|setCreatedOn
argument_list|(
name|ps1
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|ps3
argument_list|)
argument_list|)
expr_stmt|;
name|checker
operator|.
name|rebuildAndCheckChanges
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|setNotesMigration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cd
operator|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|psId3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PatchSet
argument_list|>
name|patchSets
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|cd
operator|.
name|patchSets
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|patchSets
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|PatchSet
name|newPs1
init|=
name|patchSets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newPs1
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ps1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newPs1
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ps1
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|PatchSet
name|newPs2
init|=
name|patchSets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newPs2
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|newPs1
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|PatchSet
name|newPs3
init|=
name|patchSets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newPs3
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ps3
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Migrated with a newer timestamp than the original, to preserve ordering.
name|assertThat
argument_list|(
name|newPs3
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|.
name|isAtLeast
argument_list|(
name|newPs2
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newPs3
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|ps1
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertChangesReadOnly (RestApiException e)
specifier|private
name|void
name|assertChangesReadOnly
parameter_list|(
name|RestApiException
name|e
parameter_list|)
throws|throws
name|Exception
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cause
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|UpdateException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|OrmException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|NoteDbUpdateManager
operator|.
name|CHANGES_READ_ONLY
argument_list|)
expr_stmt|;
block|}
DECL|method|setInvalidNoteDbState (Change.Id id)
specifier|private
name|void
name|setInvalidNoteDbState
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|ReviewDb
name|db
init|=
name|getUnwrappedDb
argument_list|()
decl_stmt|;
name|Change
name|c
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// In reality we would have NoteDb writes enabled, which would write a real
comment|// state into this field. For tests however, we turn NoteDb writes off, so
comment|// just use a dummy state to force ChangeNotes to view the notes as
comment|// out-of-date.
name|c
operator|.
name|setNoteDbState
argument_list|(
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertChangeUpToDate (boolean expected, Change.Id id)
specifier|private
name|void
name|assertChangeUpToDate
parameter_list|(
name|boolean
name|expected
parameter_list|,
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|Change
name|c
init|=
name|getUnwrappedDb
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|getNoteDbState
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|c
argument_list|)
operator|.
name|isChangeUpToDate
argument_list|(
operator|new
name|RepoRefCache
argument_list|(
name|repo
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertDraftsUpToDate (boolean expected, Change.Id changeId, TestAccount account)
specifier|private
name|void
name|assertDraftsUpToDate
parameter_list|(
name|boolean
name|expected
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|TestAccount
name|account
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|Change
name|c
init|=
name|getUnwrappedDb
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|getNoteDbState
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|NoteDbChangeState
name|state
init|=
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|areDraftsUpToDate
argument_list|(
operator|new
name|RepoRefCache
argument_list|(
name|repo
argument_list|)
argument_list|,
name|account
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getMetaRef (Project.NameKey p, String name)
specifier|private
name|ObjectId
name|getMetaRef
parameter_list|(
name|Project
operator|.
name|NameKey
name|p
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|p
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|ref
operator|!=
literal|null
condition|?
name|ref
operator|.
name|getObjectId
argument_list|()
else|:
literal|null
return|;
block|}
block|}
DECL|method|putDraft (TestAccount account, Change.Id id, int line, String msg, Boolean unresolved)
specifier|private
name|void
name|putDraft
parameter_list|(
name|TestAccount
name|account
parameter_list|,
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|int
name|line
parameter_list|,
name|String
name|msg
parameter_list|,
name|Boolean
name|unresolved
parameter_list|)
throws|throws
name|Exception
block|{
name|DraftInput
name|in
init|=
operator|new
name|DraftInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|line
operator|=
name|line
expr_stmt|;
name|in
operator|.
name|message
operator|=
name|msg
expr_stmt|;
name|in
operator|.
name|path
operator|=
name|PushOneCommit
operator|.
name|FILE_NAME
expr_stmt|;
name|in
operator|.
name|unresolved
operator|=
name|unresolved
expr_stmt|;
name|AcceptanceTestRequestScope
operator|.
name|Context
name|old
init|=
name|setApiUser
argument_list|(
name|account
argument_list|)
decl_stmt|;
try|try
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|createDraft
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|atrScope
operator|.
name|set
argument_list|(
name|old
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|putComment (TestAccount account, Change.Id id, int line, String msg, String inReplyTo)
specifier|private
name|void
name|putComment
parameter_list|(
name|TestAccount
name|account
parameter_list|,
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|int
name|line
parameter_list|,
name|String
name|msg
parameter_list|,
name|String
name|inReplyTo
parameter_list|)
throws|throws
name|Exception
block|{
name|CommentInput
name|in
init|=
operator|new
name|CommentInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|line
operator|=
name|line
expr_stmt|;
name|in
operator|.
name|message
operator|=
name|msg
expr_stmt|;
name|in
operator|.
name|inReplyTo
operator|=
name|inReplyTo
expr_stmt|;
name|ReviewInput
name|rin
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|rin
operator|.
name|comments
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|rin
operator|.
name|comments
operator|.
name|put
argument_list|(
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|rin
operator|.
name|drafts
operator|=
name|ReviewInput
operator|.
name|DraftHandling
operator|.
name|KEEP
expr_stmt|;
name|AcceptanceTestRequestScope
operator|.
name|Context
name|old
init|=
name|setApiUser
argument_list|(
name|account
argument_list|)
decl_stmt|;
try|try
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|rin
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|atrScope
operator|.
name|set
argument_list|(
name|old
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|publishDrafts (TestAccount account, Change.Id id)
specifier|private
name|void
name|publishDrafts
parameter_list|(
name|TestAccount
name|account
parameter_list|,
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|ReviewInput
name|rin
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|rin
operator|.
name|drafts
operator|=
name|ReviewInput
operator|.
name|DraftHandling
operator|.
name|PUBLISH_ALL_REVISIONS
expr_stmt|;
name|AcceptanceTestRequestScope
operator|.
name|Context
name|old
init|=
name|setApiUser
argument_list|(
name|account
argument_list|)
decl_stmt|;
try|try
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|rin
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|atrScope
operator|.
name|set
argument_list|(
name|old
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|insertMessage ( Change.Id id, PatchSet.Id psId, Account.Id author, Timestamp ts, String message)
specifier|private
name|ChangeMessage
name|insertMessage
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|Account
operator|.
name|Id
name|author
parameter_list|,
name|Timestamp
name|ts
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|ChangeMessage
name|msg
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|id
argument_list|,
name|ChangeUtil
operator|.
name|messageUuid
argument_list|()
argument_list|)
argument_list|,
name|author
argument_list|,
name|ts
argument_list|,
name|psId
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|Change
name|c
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|c
operator|.
name|setLastUpdatedOn
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|msg
return|;
block|}
DECL|method|getUnwrappedDb ()
specifier|private
name|ReviewDb
name|getUnwrappedDb
parameter_list|()
block|{
name|ReviewDb
name|db
init|=
name|dbProvider
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|ReviewDbUtil
operator|.
name|unwrapDb
argument_list|(
name|db
argument_list|)
return|;
block|}
DECL|method|allowRunAs ()
specifier|private
name|void
name|allowRunAs
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|allProjects
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|cfg
argument_list|,
name|GlobalCapability
operator|.
name|RUN_AS
argument_list|,
name|systemGroupBackend
operator|.
name|getGroup
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|allProjects
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
block|}
DECL|method|removeRunAs ()
specifier|private
name|void
name|removeRunAs
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|allProjects
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|Util
operator|.
name|remove
argument_list|(
name|cfg
argument_list|,
name|GlobalCapability
operator|.
name|RUN_AS
argument_list|,
name|systemGroupBackend
operator|.
name|getGroup
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|allProjects
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
block|}
DECL|method|getPublishedComments (Change.Id id)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|getPublishedComments
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|comments
argument_list|()
return|;
block|}
block|}
end_class

end_unit

