begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountProjectWatch
operator|.
name|NotifyType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|NotifyConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|FakeEmailSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|FakeEmailSender
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|ProjectWatchIT
specifier|public
class|class
name|ProjectWatchIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Inject
DECL|field|sender
specifier|private
name|FakeEmailSender
name|sender
decl_stmt|;
comment|/**    * Tests message project watches on new patch sets    *<p>    * As of 2015-06-21 this test is marked flaky for triggering race    * conditions between indexing and project watches filters as    * of 2015-06-21.    *<p>    * The test $SOMETIMES fails, stating that 2 emails instead of only    * 1 got sent. The root issue is the inserting of two patch sets    * (one shortly after the other), where the first patch set would    * not match a user's filter while the second one would.    *<p>    * The test basically:    *<ol>    *<li>Sets up a watch on the text 'sekret' in the commit message.</li>    *<li>Pushes a change without sekret in the commit message (no    *     email is expected). (We'll refer to this as PS1)</li>    *<li>Push another patch set to the same change with sekret in the    *     commit message (1 email is expected). (We'll refer to this as PS2)</li>    *<li>[...]</li>    *</ol>    *<p>The expected flow of actions for step 2+3 is:    *<pre>    *    (i) Write PS1 to the index    *   (ii) Send out emails for PS1 after checking project watches from    *        fresh ChangeData    *  (iii) Write PS2 to the index    *   (iv) Send out emails for PS2 after checking project watches from    *        fresh ChangeData    *</pre>    *<p>    * But as step (ii) and step (iv) happen on separate threads, steps    * (ii) and (iii) might get turned around and become:    *<pre>    *   * Write PS1 to the index    *   * Write PS2 to the index    *   * Send out emails for PS1 after checking project watches from    *     fresh ChangeData    *   * Send out emails for PS2 after checking project watches from    *     fresh ChangeData    *</pre>    *<p>    * Hence, the filters for project watches for the emails for PS1 query    * the index after PS2 has already been written there. Hence, the    * filters for PS1 use the commit message of PS2 when filtering on    * 'message:sekret'.    *<p>    * Since in the ProjectWatchIT test, PS2 contains 'sekret', the filters    * for sending out emails for PS1 see a commit message containing    * 'sekret', and the watches match for both PS1 and PS2, although they    * should only match for PS2.    *<p>    * This explains why the test is only failing sometimes, and also why it    * is more likely to occur when the system is under load.    *<p>    * A demo exposing the race condition is available at    *<a href="https://gerrit-review.googlesource.com/#/c/68719/1">https://gerrit-review.googlesource.com/#/c/68719/1</a>.    */
annotation|@
name|Test
DECL|method|newPatchSetsNotifyConfig ()
specifier|public
name|void
name|newPatchSetsNotifyConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Address
name|addr
init|=
operator|new
name|Address
argument_list|(
literal|"Watcher"
argument_list|,
literal|"watcher@example.com"
argument_list|)
decl_stmt|;
name|NotifyConfig
name|nc
init|=
operator|new
name|NotifyConfig
argument_list|()
decl_stmt|;
name|nc
operator|.
name|addEmail
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setName
argument_list|(
literal|"new-patch-set"
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setHeader
argument_list|(
name|NotifyConfig
operator|.
name|Header
operator|.
name|CC
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setTypes
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|NotifyType
operator|.
name|NEW_PATCHSETS
argument_list|)
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setFilter
argument_list|(
literal|"message:sekret"
argument_list|)
expr_stmt|;
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|putNotifyConfig
argument_list|(
literal|"watch"
argument_list|,
name|nc
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"original subject"
argument_list|,
literal|"a"
argument_list|,
literal|"a1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"super sekret subject"
argument_list|,
literal|"a"
argument_list|,
literal|"a2"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"back to original subject"
argument_list|,
literal|"a"
argument_list|,
literal|"a3"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Change subject: super sekret subject\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Gerrit-PatchSet: 2\n"
argument_list|)
expr_stmt|;
block|}
comment|// TODO(anybody reading this): More tests.
block|}
end_class

end_unit

