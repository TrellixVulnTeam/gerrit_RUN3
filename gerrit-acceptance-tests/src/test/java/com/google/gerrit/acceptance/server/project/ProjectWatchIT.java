begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|Sandboxed
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|WatchConfig
operator|.
name|NotifyType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|NotifyConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|FakeEmailSender
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
annotation|@
name|Sandboxed
DECL|class|ProjectWatchIT
specifier|public
class|class
name|ProjectWatchIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Test
DECL|method|newPatchSetsNotifyConfig ()
specifier|public
name|void
name|newPatchSetsNotifyConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Address
name|addr
init|=
operator|new
name|Address
argument_list|(
literal|"Watcher"
argument_list|,
literal|"watcher@example.com"
argument_list|)
decl_stmt|;
name|NotifyConfig
name|nc
init|=
operator|new
name|NotifyConfig
argument_list|()
decl_stmt|;
name|nc
operator|.
name|addEmail
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setName
argument_list|(
literal|"new-patch-set"
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setHeader
argument_list|(
name|NotifyConfig
operator|.
name|Header
operator|.
name|CC
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setTypes
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|NotifyType
operator|.
name|NEW_PATCHSETS
argument_list|)
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setFilter
argument_list|(
literal|"message:sekret"
argument_list|)
expr_stmt|;
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|putNotifyConfig
argument_list|(
literal|"watch"
argument_list|,
name|nc
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"original subject"
argument_list|,
literal|"a"
argument_list|,
literal|"a1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"super sekret subject"
argument_list|,
literal|"a"
argument_list|,
literal|"a2"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"back to original subject"
argument_list|,
literal|"a"
argument_list|,
literal|"a3"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Change subject: super sekret subject\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Gerrit-PatchSet: 2\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|watchProject ()
specifier|public
name|void
name|watchProject
parameter_list|()
throws|throws
name|Exception
block|{
comment|// watch project
name|String
name|watchedProject
init|=
name|createProject
argument_list|(
literal|"watchedProject"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|watch
argument_list|(
name|watchedProject
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// push a change to watched project -> should trigger email notification
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|watchedRepo
init|=
name|cloneProject
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|watchedProject
argument_list|)
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|watchedRepo
argument_list|,
literal|"TRIGGER"
argument_list|,
literal|"a"
argument_list|,
literal|"a1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// push a change to non-watched project -> should not trigger email
comment|// notification
name|String
name|notWatchedProject
init|=
name|createProject
argument_list|(
literal|"otherProject"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|notWatchedRepo
init|=
name|cloneProject
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|notWatchedProject
argument_list|)
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|notWatchedRepo
argument_list|,
literal|"DONT_TRIGGER"
argument_list|,
literal|"a"
argument_list|,
literal|"a1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// assert email notification
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Change subject: TRIGGER\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Gerrit-PatchSet: 1\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|watchFile ()
specifier|public
name|void
name|watchFile
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|watchedProject
init|=
name|createProject
argument_list|(
literal|"watchedProject"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|otherWatchedProject
init|=
name|createProject
argument_list|(
literal|"otherWatchedProject"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// watch file in project as user
name|watch
argument_list|(
name|watchedProject
argument_list|,
literal|"file:a.txt"
argument_list|)
expr_stmt|;
comment|// watch other project as user
name|watch
argument_list|(
name|otherWatchedProject
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// push a change to watched file -> should trigger email notification for
comment|// user
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|watchedRepo
init|=
name|cloneProject
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|watchedProject
argument_list|)
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|watchedRepo
argument_list|,
literal|"TRIGGER"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"a1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// assert email notification for user
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Change subject: TRIGGER\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Gerrit-PatchSet: 1\n"
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// watch project as user2
name|TestAccount
name|user2
init|=
name|accounts
operator|.
name|create
argument_list|(
literal|"user2"
argument_list|,
literal|"user2@test.com"
argument_list|,
literal|"User2"
argument_list|)
decl_stmt|;
name|setApiUser
argument_list|(
name|user2
argument_list|)
expr_stmt|;
name|watch
argument_list|(
name|watchedProject
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// push a change to non-watched file -> should not trigger email
comment|// notification for user, only for user2
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|watchedRepo
argument_list|,
literal|"TRIGGER_USER2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"b1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// assert email notification
name|messages
operator|=
name|sender
operator|.
name|getMessages
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|m
operator|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user2
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Change subject: TRIGGER_USER2\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Gerrit-PatchSet: 1\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|watchKeyword ()
specifier|public
name|void
name|watchKeyword
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|watchedProject
init|=
name|createProject
argument_list|(
literal|"watchedProject"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// watch keyword in project as user
name|watch
argument_list|(
name|watchedProject
argument_list|,
literal|"multimaster"
argument_list|)
expr_stmt|;
comment|// push a change with keyword -> should trigger email notification
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|watchedRepo
init|=
name|cloneProject
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|watchedProject
argument_list|)
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|watchedRepo
argument_list|,
literal|"Document multimaster setup"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"a1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// assert email notification for user
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Change subject: Document multimaster setup\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Gerrit-PatchSet: 1\n"
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// push a change without keyword -> should not trigger email notification
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|watchedRepo
argument_list|,
literal|"Cleanup cache implementation"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"b1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// assert email notification
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|watchAllProjects ()
specifier|public
name|void
name|watchAllProjects
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|anyProject
init|=
name|createProject
argument_list|(
literal|"anyProject"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// watch the All-Projects project to watch all projects
name|watch
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// push a change to any project -> should trigger email notification
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|anyRepo
init|=
name|cloneProject
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|anyProject
argument_list|)
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|anyRepo
argument_list|,
literal|"TRIGGER"
argument_list|,
literal|"a"
argument_list|,
literal|"a1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// assert email notification
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Change subject: TRIGGER\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Gerrit-PatchSet: 1\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|watchFileAllProjects ()
specifier|public
name|void
name|watchFileAllProjects
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|anyProject
init|=
name|createProject
argument_list|(
literal|"anyProject"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// watch file in All-Projects project as user to watch the file in all
comment|// projects
name|watch
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|,
literal|"file:a.txt"
argument_list|)
expr_stmt|;
comment|// push a change to watched file in any project -> should trigger email
comment|// notification for user
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|anyRepo
init|=
name|cloneProject
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|anyProject
argument_list|)
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|anyRepo
argument_list|,
literal|"TRIGGER"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"a1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// assert email notification for user
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Change subject: TRIGGER\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Gerrit-PatchSet: 1\n"
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// watch project as user2
name|TestAccount
name|user2
init|=
name|accounts
operator|.
name|create
argument_list|(
literal|"user2"
argument_list|,
literal|"user2@test.com"
argument_list|,
literal|"User2"
argument_list|)
decl_stmt|;
name|setApiUser
argument_list|(
name|user2
argument_list|)
expr_stmt|;
name|watch
argument_list|(
name|anyProject
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// push a change to non-watched file in any project -> should not trigger
comment|// email notification for user, only for user2
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|anyRepo
argument_list|,
literal|"TRIGGER_USER2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"b1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// assert email notification
name|messages
operator|=
name|sender
operator|.
name|getMessages
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|m
operator|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user2
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Change subject: TRIGGER_USER2\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Gerrit-PatchSet: 1\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|watchKeywordAllProjects ()
specifier|public
name|void
name|watchKeywordAllProjects
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|anyProject
init|=
name|createProject
argument_list|(
literal|"anyProject"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// watch keyword in project as user
name|watch
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|,
literal|"multimaster"
argument_list|)
expr_stmt|;
comment|// push a change with keyword to any project -> should trigger email
comment|// notification
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|anyRepo
init|=
name|cloneProject
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|anyProject
argument_list|)
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|anyRepo
argument_list|,
literal|"Document multimaster setup"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"a1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// assert email notification for user
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Change subject: Document multimaster setup\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Gerrit-PatchSet: 1\n"
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// push a change without keyword to any project -> should not trigger email
comment|// notification
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|anyRepo
argument_list|,
literal|"Cleanup cache implementation"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"b1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// assert email notification
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

