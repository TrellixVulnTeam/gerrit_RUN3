begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.accounts
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|accounts
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|gpg
operator|.
name|PublicKeyStore
operator|.
name|fingerprintToString
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|gpg
operator|.
name|PublicKeyStore
operator|.
name|keyIdToString
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|accounts
operator|.
name|EmailInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GpgKeyInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|gpg
operator|.
name|PublicKeyStore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|gpg
operator|.
name|TestKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|ArmoredOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKeyRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushCertificateIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|AccountIT
specifier|public
class|class
name|AccountIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Inject
DECL|field|publicKeyStoreProvider
specifier|private
name|Provider
argument_list|<
name|PublicKeyStore
argument_list|>
name|publicKeyStoreProvider
decl_stmt|;
DECL|field|savedExternalIds
specifier|private
name|List
argument_list|<
name|AccountExternalId
argument_list|>
name|savedExternalIds
decl_stmt|;
annotation|@
name|Before
DECL|method|saveExternalIds ()
specifier|public
name|void
name|saveExternalIds
parameter_list|()
throws|throws
name|Exception
block|{
name|savedExternalIds
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|savedExternalIds
operator|.
name|addAll
argument_list|(
name|getExternalIds
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
name|savedExternalIds
operator|.
name|addAll
argument_list|(
name|getExternalIds
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|restoreExternalIds ()
specifier|public
name|void
name|restoreExternalIds
parameter_list|()
throws|throws
name|Exception
block|{
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|delete
argument_list|(
name|getExternalIds
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|delete
argument_list|(
name|getExternalIds
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|insert
argument_list|(
name|savedExternalIds
argument_list|)
expr_stmt|;
block|}
DECL|method|getExternalIds (TestAccount account)
specifier|private
name|List
argument_list|<
name|AccountExternalId
argument_list|>
name|getExternalIds
parameter_list|(
name|TestAccount
name|account
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|byAccount
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|get ()
specifier|public
name|void
name|get
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"admin"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Administrator"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"admin@example.com"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"admin"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|self ()
specifier|public
name|void
name|self
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Administrator"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"admin@example.com"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"admin"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|starUnstarChange ()
specifier|public
name|void
name|starUnstarChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|starChange
argument_list|(
name|triplet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|triplet
argument_list|)
operator|.
name|starred
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|unstarChange
argument_list|(
name|triplet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|triplet
argument_list|)
operator|.
name|starred
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|suggestAccounts ()
specifier|public
name|void
name|suggestAccounts
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|adminUsername
init|=
literal|"admin"
decl_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|result
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|suggestAccounts
argument_list|()
operator|.
name|withQuery
argument_list|(
name|adminUsername
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|adminUsername
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|resultShortcutApi
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|suggestAccounts
argument_list|(
name|adminUsername
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|resultShortcutApi
argument_list|)
operator|.
name|hasSize
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|emptyResult
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|suggestAccounts
argument_list|(
literal|"unknown"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|emptyResult
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addEmail ()
specifier|public
name|void
name|addEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|emails
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"new.email@example.com"
argument_list|,
literal|"new.email@example.systems"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|email
range|:
name|emails
control|)
block|{
name|EmailInput
name|input
init|=
operator|new
name|EmailInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|email
operator|=
name|email
expr_stmt|;
name|input
operator|.
name|noConfirmation
operator|=
literal|true
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|addInvalidEmail ()
specifier|public
name|void
name|addInvalidEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|EmailInput
name|input
init|=
operator|new
name|EmailInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|email
operator|=
literal|"invalid@"
expr_stmt|;
name|input
operator|.
name|noConfirmation
operator|=
literal|true
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"invalid email address"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addGpgKey ()
specifier|public
name|void
name|addGpgKey
parameter_list|()
throws|throws
name|Exception
block|{
name|TestKey
name|key
init|=
name|TestKey
operator|.
name|key1
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|keyIdToString
argument_list|(
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|addExternalIdEmail
argument_list|(
name|admin
argument_list|,
literal|"test1@example.com"
argument_list|)
expr_stmt|;
name|GpgKeyInfo
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|putGpgKeys
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|key
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|info
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|assertKeyEquals
argument_list|(
name|key
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|assertKeyEquals
argument_list|(
name|key
argument_list|,
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|gpgKey
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|PGPPublicKey
name|stored
init|=
name|getOnlyKeyFromStore
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stored
operator|.
name|getFingerprint
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|key
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getFingerprint
argument_list|()
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|gpgKey
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reAddExistingGpgKey ()
specifier|public
name|void
name|reAddExistingGpgKey
parameter_list|()
throws|throws
name|Exception
block|{
name|addExternalIdEmail
argument_list|(
name|admin
argument_list|,
literal|"test5@example.com"
argument_list|)
expr_stmt|;
name|TestKey
name|key
init|=
name|TestKey
operator|.
name|key5
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|keyIdToString
argument_list|(
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|PGPPublicKey
name|pk
init|=
name|key
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
name|GpgKeyInfo
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|putGpgKeys
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|armor
argument_list|(
name|pk
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|userIds
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertIteratorSize
argument_list|(
literal|2
argument_list|,
name|getOnlyKeyFromStore
argument_list|(
name|key
argument_list|)
operator|.
name|getUserIDs
argument_list|()
argument_list|)
expr_stmt|;
name|pk
operator|=
name|PGPPublicKey
operator|.
name|removeCertification
argument_list|(
name|pk
argument_list|,
literal|"foo:myId"
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|putGpgKeys
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|armor
argument_list|(
name|pk
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|userIds
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertIteratorSize
argument_list|(
literal|1
argument_list|,
name|getOnlyKeyFromStore
argument_list|(
name|key
argument_list|)
operator|.
name|getUserIDs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addOtherUsersGpgKey_Conflict ()
specifier|public
name|void
name|addOtherUsersGpgKey_Conflict
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Both users have a matching external ID for this key.
name|addExternalIdEmail
argument_list|(
name|admin
argument_list|,
literal|"test5@example.com"
argument_list|)
expr_stmt|;
name|AccountExternalId
name|extId
init|=
operator|new
name|AccountExternalId
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AccountExternalId
operator|.
name|Key
argument_list|(
literal|"foo:myId"
argument_list|)
argument_list|)
decl_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|extId
argument_list|)
argument_list|)
expr_stmt|;
name|TestKey
name|key
init|=
name|TestKey
operator|.
name|key5
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|keyIdToString
argument_list|(
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|putGpgKeys
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|key
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"GPG key already associated with another account"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|putGpgKeys
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|key
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listGpgKeys ()
specifier|public
name|void
name|listGpgKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TestKey
argument_list|>
name|keys
init|=
name|TestKey
operator|.
name|allValidKeys
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toAdd
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TestKey
name|key
range|:
name|keys
control|)
block|{
name|addExternalIdEmail
argument_list|(
name|admin
argument_list|,
name|PushCertificateIdent
operator|.
name|parse
argument_list|(
name|key
operator|.
name|getFirstUserId
argument_list|()
argument_list|)
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|toAdd
operator|.
name|add
argument_list|(
name|key
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|putGpgKeys
argument_list|(
name|toAdd
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GpgKeyInfo
argument_list|>
name|actual
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|listGpgKeys
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|hasSize
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TestKey
name|k
range|:
name|keys
control|)
block|{
name|String
name|id
init|=
name|keyIdToString
argument_list|(
name|k
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|GpgKeyInfo
name|info
init|=
name|actual
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|named
argument_list|(
name|id
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|id
argument_list|)
operator|.
name|named
argument_list|(
name|id
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|info
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|assertKeyEquals
argument_list|(
name|k
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getOnlyKeyFromStore (TestKey key)
specifier|private
name|PGPPublicKey
name|getOnlyKeyFromStore
parameter_list|(
name|TestKey
name|key
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|PublicKeyStore
name|store
init|=
name|publicKeyStoreProvider
operator|.
name|get
argument_list|()
init|)
block|{
name|Iterable
argument_list|<
name|PGPPublicKeyRing
argument_list|>
name|keys
init|=
name|store
operator|.
name|get
argument_list|(
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|keys
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|keys
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getPublicKey
argument_list|()
return|;
block|}
block|}
DECL|method|armor (PGPPublicKey key)
specifier|private
specifier|static
name|String
name|armor
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
try|try
init|(
name|ArmoredOutputStream
name|aout
init|=
operator|new
name|ArmoredOutputStream
argument_list|(
name|out
argument_list|)
init|)
block|{
name|key
operator|.
name|encode
argument_list|(
name|aout
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|assertIteratorSize (int size, Iterator it)
specifier|private
specifier|static
name|void
name|assertIteratorSize
parameter_list|(
name|int
name|size
parameter_list|,
name|Iterator
name|it
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|it
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|assertKeyEquals (TestKey expected, GpgKeyInfo actual)
specifier|private
specifier|static
name|void
name|assertKeyEquals
parameter_list|(
name|TestKey
name|expected
parameter_list|,
name|GpgKeyInfo
name|actual
parameter_list|)
block|{
name|String
name|id
init|=
name|keyIdToString
argument_list|(
name|expected
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|id
argument_list|)
operator|.
name|named
argument_list|(
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|fingerprint
argument_list|)
operator|.
name|named
argument_list|(
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|fingerprintToString
argument_list|(
name|expected
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getFingerprint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|userIds
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|expected
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getUserIDs
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|userIds
argument_list|)
operator|.
name|named
argument_list|(
name|id
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|userIds
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|key
argument_list|)
operator|.
name|named
argument_list|(
name|id
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"-----BEGIN PGP PUBLIC KEY BLOCK-----\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|addExternalIdEmail (TestAccount account, String email)
specifier|private
name|void
name|addExternalIdEmail
parameter_list|(
name|TestAccount
name|account
parameter_list|,
name|String
name|email
parameter_list|)
throws|throws
name|Exception
block|{
name|checkNotNull
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|AccountExternalId
name|extId
init|=
operator|new
name|AccountExternalId
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AccountExternalId
operator|.
name|Key
argument_list|(
name|name
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|email
argument_list|)
argument_list|)
decl_stmt|;
name|extId
operator|.
name|setEmailAddress
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|extId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Clear saved AccountState and AccountExternalIds.
name|accountCache
operator|.
name|evict
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|account
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

