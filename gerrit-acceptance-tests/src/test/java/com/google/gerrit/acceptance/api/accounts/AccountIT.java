begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.accounts
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|accounts
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assert_
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|fetch
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|PublicKeyStore
operator|.
name|REFS_GPG_KEYS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|PublicKeyStore
operator|.
name|keyToString
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestKeys
operator|.
name|allValidKeys
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestKeys
operator|.
name|validKeyWithExpiration
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestKeys
operator|.
name|validKeyWithSecondUserId
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestKeys
operator|.
name|validKeyWithoutExpiration
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StarredChangesUtil
operator|.
name|DEFAULT_LABEL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StarredChangesUtil
operator|.
name|IGNORE_LABEL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|BaseEncoding
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AccountCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|accounts
operator|.
name|EmailInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|AddReviewerInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|StarsInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|GeneralPreferencesInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GpgKeyInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|SshKeyInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|Fingerprint
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|PublicKeyStore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|server
operator|.
name|GpgKeys
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountProjectWatch
operator|.
name|NotifyType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|WatchConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefPattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|MagicBranch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|ConfigSuite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|FakeEmailSender
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|ArmoredOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKeyRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|errors
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushCertificateIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|AccountIT
specifier|public
class|class
name|AccountIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|ConfigSuite
operator|.
name|Default
DECL|method|enableSignedPushConfig ()
specifier|public
specifier|static
name|Config
name|enableSignedPushConfig
parameter_list|()
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"receive"
argument_list|,
literal|null
argument_list|,
literal|"enableSignedPush"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
annotation|@
name|Inject
DECL|field|publicKeyStoreProvider
specifier|private
name|Provider
argument_list|<
name|PublicKeyStore
argument_list|>
name|publicKeyStoreProvider
decl_stmt|;
annotation|@
name|Inject
DECL|field|allUsers
specifier|private
name|AllUsersName
name|allUsers
decl_stmt|;
DECL|field|savedExternalIds
specifier|private
name|List
argument_list|<
name|AccountExternalId
argument_list|>
name|savedExternalIds
decl_stmt|;
annotation|@
name|Before
DECL|method|saveExternalIds ()
specifier|public
name|void
name|saveExternalIds
parameter_list|()
throws|throws
name|Exception
block|{
name|savedExternalIds
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|savedExternalIds
operator|.
name|addAll
argument_list|(
name|getExternalIds
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
name|savedExternalIds
operator|.
name|addAll
argument_list|(
name|getExternalIds
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|restoreExternalIds ()
specifier|public
name|void
name|restoreExternalIds
parameter_list|()
throws|throws
name|Exception
block|{
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|delete
argument_list|(
name|getExternalIds
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|delete
argument_list|(
name|getExternalIds
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|insert
argument_list|(
name|savedExternalIds
argument_list|)
expr_stmt|;
name|accountCache
operator|.
name|evict
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|accountCache
operator|.
name|evict
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|clearPublicKeyStore ()
specifier|public
name|void
name|clearPublicKeyStore
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|REFS_GPG_KEYS
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|REFS_GPG_KEYS
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|delete
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getExternalIds (TestAccount account)
specifier|private
name|Collection
argument_list|<
name|AccountExternalId
argument_list|>
name|getExternalIds
parameter_list|(
name|TestAccount
name|account
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|accountCache
operator|.
name|get
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getExternalIds
argument_list|()
return|;
block|}
annotation|@
name|After
DECL|method|deleteGpgKeys ()
specifier|public
name|void
name|deleteGpgKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ref
init|=
name|REFS_GPG_KEYS
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
if|if
condition|(
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
name|ref
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|withFailureMessage
argument_list|(
literal|"Failed to delete "
operator|+
name|ref
argument_list|)
operator|.
name|that
argument_list|(
name|ru
operator|.
name|delete
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|get ()
specifier|public
name|void
name|get
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"admin"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Administrator"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"admin@example.com"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"admin"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getByIntId ()
specifier|public
name|void
name|getByIntId
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"admin"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|AccountInfo
name|infoByIntId
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|info
operator|.
name|_accountId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|infoByIntId
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|self ()
specifier|public
name|void
name|self
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertUser
argument_list|(
name|info
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"self"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertUser
argument_list|(
name|info
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|active ()
specifier|public
name|void
name|active
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getActive
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getActive
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getActive
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deactivateSelf ()
specifier|public
name|void
name|deactivateSelf
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"cannot deactivate own account"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deactivateNotActive ()
specifier|public
name|void
name|deactivateNotActive
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getActive
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getActive
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
try|try
block|{
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"account not active"
argument_list|)
expr_stmt|;
block|}
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|starUnstarChange ()
specifier|public
name|void
name|starUnstarChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|starChange
argument_list|(
name|triplet
argument_list|)
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|info
argument_list|(
name|triplet
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|starred
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|stars
argument_list|)
operator|.
name|contains
argument_list|(
name|DEFAULT_LABEL
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|unstarChange
argument_list|(
name|triplet
argument_list|)
expr_stmt|;
name|change
operator|=
name|info
argument_list|(
name|triplet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|starred
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|stars
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|starUnstarChangeWithLabels ()
specifier|public
name|void
name|starUnstarChangeWithLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getStars
argument_list|(
name|triplet
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getStarredChanges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|triplet
argument_list|,
operator|new
name|StarsInput
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|DEFAULT_LABEL
argument_list|,
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|info
argument_list|(
name|triplet
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|starred
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|stars
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"blue"
argument_list|,
literal|"red"
argument_list|,
name|DEFAULT_LABEL
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getStars
argument_list|(
name|triplet
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"blue"
argument_list|,
literal|"red"
argument_list|,
name|DEFAULT_LABEL
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|starredChanges
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getStarredChanges
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|starredChanges
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ChangeInfo
name|starredChange
init|=
name|starredChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|starredChange
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|starredChange
operator|.
name|starred
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|starredChange
operator|.
name|stars
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"blue"
argument_list|,
literal|"red"
argument_list|,
name|DEFAULT_LABEL
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|triplet
argument_list|,
operator|new
name|StarsInput
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"yellow"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|DEFAULT_LABEL
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|change
operator|=
name|info
argument_list|(
name|triplet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|starred
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|stars
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"red"
argument_list|,
literal|"yellow"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getStars
argument_list|(
name|triplet
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"red"
argument_list|,
literal|"yellow"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|starredChanges
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getStarredChanges
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|starredChanges
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|starredChange
operator|=
name|starredChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|starredChange
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|starredChange
operator|.
name|starred
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|starredChange
operator|.
name|stars
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"red"
argument_list|,
literal|"yellow"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"not allowed to get stars of another account"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
operator|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
operator|)
argument_list|)
argument_list|)
operator|.
name|getStars
argument_list|(
name|triplet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|starWithInvalidLabels ()
specifier|public
name|void
name|starWithInvalidLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"invalid labels: another invalid label, invalid label"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|triplet
argument_list|,
operator|new
name|StarsInput
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|DEFAULT_LABEL
argument_list|,
literal|"invalid label"
argument_list|,
literal|"blue"
argument_list|,
literal|"another invalid label"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|starWithDefaultAndIgnoreLabel ()
specifier|public
name|void
name|starWithDefaultAndIgnoreLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"The labels "
operator|+
name|DEFAULT_LABEL
operator|+
literal|" and "
operator|+
name|IGNORE_LABEL
operator|+
literal|" are mutually exclusive."
operator|+
literal|" Only one of them can be set."
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|triplet
argument_list|,
operator|new
name|StarsInput
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|DEFAULT_LABEL
argument_list|,
literal|"blue"
argument_list|,
name|IGNORE_LABEL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ignoreChange ()
specifier|public
name|void
name|ignoreChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|TestAccount
name|user2
init|=
name|accounts
operator|.
name|user2
argument_list|()
decl_stmt|;
name|in
operator|=
operator|new
name|AddReviewerInput
argument_list|()
expr_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user2
operator|.
name|email
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
operator|new
name|StarsInput
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|IGNORE_LABEL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user2
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addReviewerToIgnoredChange ()
specifier|public
name|void
name|addReviewerToIgnoredChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
operator|new
name|StarsInput
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|IGNORE_LABEL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
name|assertMailFrom
argument_list|(
name|message
argument_list|,
name|admin
operator|.
name|email
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|suggestAccounts ()
specifier|public
name|void
name|suggestAccounts
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|adminUsername
init|=
literal|"admin"
decl_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|result
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|suggestAccounts
argument_list|()
operator|.
name|withQuery
argument_list|(
name|adminUsername
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|adminUsername
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|resultShortcutApi
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|suggestAccounts
argument_list|(
name|adminUsername
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|resultShortcutApi
argument_list|)
operator|.
name|hasSize
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|emptyResult
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|suggestAccounts
argument_list|(
literal|"unknown"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|emptyResult
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addEmail ()
specifier|public
name|void
name|addEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|emails
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"new.email@example.com"
argument_list|,
literal|"new.email@example.systems"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|email
range|:
name|emails
control|)
block|{
name|EmailInput
name|input
init|=
operator|new
name|EmailInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|email
operator|=
name|email
expr_stmt|;
name|input
operator|.
name|noConfirmation
operator|=
literal|true
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|addInvalidEmail ()
specifier|public
name|void
name|addInvalidEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|EmailInput
name|input
init|=
operator|new
name|EmailInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|email
operator|=
literal|"invalid@"
expr_stmt|;
name|input
operator|.
name|noConfirmation
operator|=
literal|true
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"invalid email address"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fetchUserBranch ()
specifier|public
name|void
name|fetchUserBranch
parameter_list|()
throws|throws
name|Exception
block|{
comment|// change something in the user preferences to ensure that the user branch
comment|// is created
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|GeneralPreferencesInfo
name|input
init|=
operator|new
name|GeneralPreferencesInfo
argument_list|()
decl_stmt|;
name|input
operator|.
name|changesPerPage
operator|=
name|GeneralPreferencesInfo
operator|.
name|defaults
argument_list|()
operator|.
name|changesPerPage
operator|+
literal|10
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setPreferences
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|String
name|userRefName
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|user
operator|.
name|id
argument_list|)
decl_stmt|;
comment|// remove default READ permissions
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|allUsers
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|getAccessSection
argument_list|(
name|RefNames
operator|.
name|REFS_USERS
operator|+
literal|"${"
operator|+
name|RefPattern
operator|.
name|USERID_SHARDED
operator|+
literal|"}"
argument_list|,
literal|true
argument_list|)
operator|.
name|remove
argument_list|(
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|allUsers
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
comment|// deny READ permission that is inherited from All-Projects
name|deny
argument_list|(
name|allUsers
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
name|RefNames
operator|.
name|REFS
operator|+
literal|"*"
argument_list|)
expr_stmt|;
comment|// fetching user branch without READ permission fails
try|try
block|{
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|userRefName
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"user branch is visible although no READ permission is granted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransportException
name|e
parameter_list|)
block|{
comment|// expected because no READ granted on user branch
block|}
comment|// allow each user to read its own user branch
name|grant
argument_list|(
name|Permission
operator|.
name|READ
argument_list|,
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_USERS
operator|+
literal|"${"
operator|+
name|RefPattern
operator|.
name|USERID_SHARDED
operator|+
literal|"}"
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
comment|// fetch user branch using refs/users/YY/XXXXXXX
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|userRefName
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|Ref
name|userRef
init|=
name|allUsersRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|exactRef
argument_list|(
literal|"userRef"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|userRef
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
comment|// fetch user branch using refs/users/self
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_USERS_SELF
operator|+
literal|":userSelfRef"
argument_list|)
expr_stmt|;
name|Ref
name|userSelfRef
init|=
name|allUsersRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
literal|"userSelfRef"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|userSelfRef
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|userSelfRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|userRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
comment|// fetching user branch of another user fails
name|String
name|otherUserRefName
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|TransportException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Remote does not have "
operator|+
name|otherUserRefName
operator|+
literal|" available for fetch."
argument_list|)
expr_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|otherUserRefName
operator|+
literal|":otherUserRef"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToUserBranch ()
specifier|public
name|void
name|pushToUserBranch
parameter_list|()
throws|throws
name|Exception
block|{
comment|// change something in the user preferences to ensure that the user branch
comment|// is created
name|GeneralPreferencesInfo
name|input
init|=
operator|new
name|GeneralPreferencesInfo
argument_list|()
decl_stmt|;
name|input
operator|.
name|changesPerPage
operator|=
name|GeneralPreferencesInfo
operator|.
name|defaults
argument_list|()
operator|.
name|changesPerPage
operator|+
literal|10
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setPreferences
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|)
decl_stmt|;
name|push
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|)
expr_stmt|;
name|push
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|REFS_USERS_SELF
argument_list|)
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToUserBranchForReview ()
specifier|public
name|void
name|pushToUserBranchForReview
parameter_list|()
throws|throws
name|Exception
block|{
comment|// change something in the user preferences to ensure that the user branch
comment|// is created
name|GeneralPreferencesInfo
name|input
init|=
operator|new
name|GeneralPreferencesInfo
argument_list|()
decl_stmt|;
name|input
operator|.
name|changesPerPage
operator|=
name|GeneralPreferencesInfo
operator|.
name|defaults
argument_list|()
operator|.
name|changesPerPage
operator|+
literal|10
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setPreferences
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|String
name|userRefName
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|userRefName
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
name|MagicBranch
operator|.
name|NEW_CHANGE
operator|+
name|userRefName
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|userRefName
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|)
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
name|MagicBranch
operator|.
name|NEW_CHANGE
operator|+
name|RefNames
operator|.
name|REFS_USERS_SELF
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|userRefName
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWatchConfigToUserBranch ()
specifier|public
name|void
name|pushWatchConfigToUserBranch
parameter_list|()
throws|throws
name|Exception
block|{
comment|// change something in the user preferences to ensure that the user branch
comment|// is created
name|GeneralPreferencesInfo
name|input
init|=
operator|new
name|GeneralPreferencesInfo
argument_list|()
decl_stmt|;
name|input
operator|.
name|changesPerPage
operator|=
name|GeneralPreferencesInfo
operator|.
name|defaults
argument_list|()
operator|.
name|changesPerPage
operator|+
literal|10
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setPreferences
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|Config
name|wc
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|wc
operator|.
name|setString
argument_list|(
name|WatchConfig
operator|.
name|PROJECT
argument_list|,
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|WatchConfig
operator|.
name|KEY_NOTIFY
argument_list|,
name|WatchConfig
operator|.
name|NotifyValue
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|NotifyType
operator|.
name|ALL_COMMENTS
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
literal|"Add project watch"
argument_list|,
name|WatchConfig
operator|.
name|WATCH_CONFIG
argument_list|,
name|wc
operator|.
name|toText
argument_list|()
argument_list|)
decl_stmt|;
name|push
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|REFS_USERS_SELF
argument_list|)
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|String
name|invalidNotifyValue
init|=
literal|"]invalid["
decl_stmt|;
name|wc
operator|.
name|setString
argument_list|(
name|WatchConfig
operator|.
name|PROJECT
argument_list|,
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|WatchConfig
operator|.
name|KEY_NOTIFY
argument_list|,
name|invalidNotifyValue
argument_list|)
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
literal|"Add invalid project watch"
argument_list|,
name|WatchConfig
operator|.
name|WATCH_CONFIG
argument_list|,
name|wc
operator|.
name|toText
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|REFS_USERS_SELF
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"invalid watch configuration"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: Invalid project watch of account %d for project %s: %s"
argument_list|,
name|WatchConfig
operator|.
name|WATCH_CONFIG
argument_list|,
name|admin
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|invalidNotifyValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addGpgKey ()
specifier|public
name|void
name|addGpgKey
parameter_list|()
throws|throws
name|Exception
block|{
name|TestKey
name|key
init|=
name|validKeyWithoutExpiration
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|key
operator|.
name|getKeyIdString
argument_list|()
decl_stmt|;
name|addExternalIdEmail
argument_list|(
name|admin
argument_list|,
literal|"test1@example.com"
argument_list|)
expr_stmt|;
name|assertKeyMapContains
argument_list|(
name|key
argument_list|,
name|addGpgKey
argument_list|(
name|key
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertKeys
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|gpgKey
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reAddExistingGpgKey ()
specifier|public
name|void
name|reAddExistingGpgKey
parameter_list|()
throws|throws
name|Exception
block|{
name|addExternalIdEmail
argument_list|(
name|admin
argument_list|,
literal|"test5@example.com"
argument_list|)
expr_stmt|;
name|TestKey
name|key
init|=
name|validKeyWithSecondUserId
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|key
operator|.
name|getKeyIdString
argument_list|()
decl_stmt|;
name|PGPPublicKey
name|pk
init|=
name|key
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
name|GpgKeyInfo
name|info
init|=
name|addGpgKey
argument_list|(
name|armor
argument_list|(
name|pk
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|userIds
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertIteratorSize
argument_list|(
literal|2
argument_list|,
name|getOnlyKeyFromStore
argument_list|(
name|key
argument_list|)
operator|.
name|getUserIDs
argument_list|()
argument_list|)
expr_stmt|;
name|pk
operator|=
name|PGPPublicKey
operator|.
name|removeCertification
argument_list|(
name|pk
argument_list|,
literal|"foo:myId"
argument_list|)
expr_stmt|;
name|info
operator|=
name|addGpgKey
argument_list|(
name|armor
argument_list|(
name|pk
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|userIds
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertIteratorSize
argument_list|(
literal|1
argument_list|,
name|getOnlyKeyFromStore
argument_list|(
name|key
argument_list|)
operator|.
name|getUserIDs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addOtherUsersGpgKey_Conflict ()
specifier|public
name|void
name|addOtherUsersGpgKey_Conflict
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Both users have a matching external ID for this key.
name|addExternalIdEmail
argument_list|(
name|admin
argument_list|,
literal|"test5@example.com"
argument_list|)
expr_stmt|;
name|AccountExternalId
name|extId
init|=
operator|new
name|AccountExternalId
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AccountExternalId
operator|.
name|Key
argument_list|(
literal|"foo:myId"
argument_list|)
argument_list|)
decl_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|extId
argument_list|)
argument_list|)
expr_stmt|;
name|accountCache
operator|.
name|evict
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|TestKey
name|key
init|=
name|validKeyWithSecondUserId
argument_list|()
decl_stmt|;
name|addGpgKey
argument_list|(
name|key
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"GPG key already associated with another account"
argument_list|)
expr_stmt|;
name|addGpgKey
argument_list|(
name|key
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listGpgKeys ()
specifier|public
name|void
name|listGpgKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TestKey
argument_list|>
name|keys
init|=
name|allValidKeys
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toAdd
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TestKey
name|key
range|:
name|keys
control|)
block|{
name|addExternalIdEmail
argument_list|(
name|admin
argument_list|,
name|PushCertificateIdent
operator|.
name|parse
argument_list|(
name|key
operator|.
name|getFirstUserId
argument_list|()
argument_list|)
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|toAdd
operator|.
name|add
argument_list|(
name|key
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|putGpgKeys
argument_list|(
name|toAdd
argument_list|,
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertKeys
argument_list|(
name|keys
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteGpgKey ()
specifier|public
name|void
name|deleteGpgKey
parameter_list|()
throws|throws
name|Exception
block|{
name|TestKey
name|key
init|=
name|validKeyWithoutExpiration
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|key
operator|.
name|getKeyIdString
argument_list|()
decl_stmt|;
name|addExternalIdEmail
argument_list|(
name|admin
argument_list|,
literal|"test1@example.com"
argument_list|)
expr_stmt|;
name|addGpgKey
argument_list|(
name|key
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
expr_stmt|;
name|assertKeys
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|gpgKey
argument_list|(
name|id
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertKeys
argument_list|()
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|gpgKey
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addAndRemoveGpgKeys ()
specifier|public
name|void
name|addAndRemoveGpgKeys
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|TestKey
name|key
range|:
name|allValidKeys
argument_list|()
control|)
block|{
name|addExternalIdEmail
argument_list|(
name|admin
argument_list|,
name|PushCertificateIdent
operator|.
name|parse
argument_list|(
name|key
operator|.
name|getFirstUserId
argument_list|()
argument_list|)
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TestKey
name|key1
init|=
name|validKeyWithoutExpiration
argument_list|()
decl_stmt|;
name|TestKey
name|key2
init|=
name|validKeyWithExpiration
argument_list|()
decl_stmt|;
name|TestKey
name|key5
init|=
name|validKeyWithSecondUserId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GpgKeyInfo
argument_list|>
name|infos
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|putGpgKeys
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|key1
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|,
name|key2
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|key5
operator|.
name|getKeyIdString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|infos
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|key1
operator|.
name|getKeyIdString
argument_list|()
argument_list|,
name|key2
operator|.
name|getKeyIdString
argument_list|()
argument_list|)
expr_stmt|;
name|assertKeys
argument_list|(
name|key1
argument_list|,
name|key2
argument_list|)
expr_stmt|;
name|infos
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|putGpgKeys
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|key5
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|key1
operator|.
name|getKeyIdString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|infos
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|key1
operator|.
name|getKeyIdString
argument_list|()
argument_list|,
name|key5
operator|.
name|getKeyIdString
argument_list|()
argument_list|)
expr_stmt|;
name|assertKeyMapContains
argument_list|(
name|key5
argument_list|,
name|infos
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|infos
operator|.
name|get
argument_list|(
name|key1
operator|.
name|getKeyIdString
argument_list|()
argument_list|)
operator|.
name|key
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertKeys
argument_list|(
name|key2
argument_list|,
name|key5
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Cannot both add and delete key: "
operator|+
name|keyToString
argument_list|(
name|key2
operator|.
name|getPublicKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|infos
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|putGpgKeys
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|key2
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|key2
operator|.
name|getKeyIdString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sshKeys ()
specifier|public
name|void
name|sshKeys
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The test account should initially have exactly one ssh key
name|List
argument_list|<
name|SshKeyInfo
argument_list|>
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|listSshKeys
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertSequenceNumbers
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|SshKeyInfo
name|key
init|=
name|info
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|inital
init|=
name|AccountCreator
operator|.
name|publicKey
argument_list|(
name|admin
operator|.
name|sshKey
argument_list|,
name|admin
operator|.
name|email
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|key
operator|.
name|sshPublicKey
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|inital
argument_list|)
expr_stmt|;
comment|// Add a new key
name|String
name|newKey
init|=
name|AccountCreator
operator|.
name|publicKey
argument_list|(
name|AccountCreator
operator|.
name|genSshKey
argument_list|()
argument_list|,
name|admin
operator|.
name|email
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|addSshKey
argument_list|(
name|newKey
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|listSshKeys
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertSequenceNumbers
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// Add an existing key (the request succeeds, but the key isn't added again)
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|addSshKey
argument_list|(
name|inital
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|listSshKeys
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertSequenceNumbers
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// Add another new key
name|String
name|newKey2
init|=
name|AccountCreator
operator|.
name|publicKey
argument_list|(
name|AccountCreator
operator|.
name|genSshKey
argument_list|()
argument_list|,
name|admin
operator|.
name|email
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|addSshKey
argument_list|(
name|newKey2
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|listSshKeys
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertSequenceNumbers
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// Delete second key
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|deleteSshKey
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|listSshKeys
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|seq
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|seq
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSequenceNumbers (List<SshKeyInfo> sshKeys)
specifier|private
name|void
name|assertSequenceNumbers
parameter_list|(
name|List
argument_list|<
name|SshKeyInfo
argument_list|>
name|sshKeys
parameter_list|)
block|{
name|int
name|seq
init|=
literal|1
decl_stmt|;
for|for
control|(
name|SshKeyInfo
name|key
range|:
name|sshKeys
control|)
block|{
name|assertThat
argument_list|(
name|key
operator|.
name|seq
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|seq
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getOnlyKeyFromStore (TestKey key)
specifier|private
name|PGPPublicKey
name|getOnlyKeyFromStore
parameter_list|(
name|TestKey
name|key
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|PublicKeyStore
name|store
init|=
name|publicKeyStoreProvider
operator|.
name|get
argument_list|()
init|)
block|{
name|Iterable
argument_list|<
name|PGPPublicKeyRing
argument_list|>
name|keys
init|=
name|store
operator|.
name|get
argument_list|(
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|keys
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|keys
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getPublicKey
argument_list|()
return|;
block|}
block|}
DECL|method|armor (PGPPublicKey key)
specifier|private
specifier|static
name|String
name|armor
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
try|try
init|(
name|ArmoredOutputStream
name|aout
init|=
operator|new
name|ArmoredOutputStream
argument_list|(
name|out
argument_list|)
init|)
block|{
name|key
operator|.
name|encode
argument_list|(
name|aout
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|assertIteratorSize (int size, Iterator it)
specifier|private
specifier|static
name|void
name|assertIteratorSize
parameter_list|(
name|int
name|size
parameter_list|,
name|Iterator
name|it
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|it
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|assertKeyMapContains (TestKey expected, Map<String, GpgKeyInfo> actualMap)
specifier|private
specifier|static
name|void
name|assertKeyMapContains
parameter_list|(
name|TestKey
name|expected
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|GpgKeyInfo
argument_list|>
name|actualMap
parameter_list|)
block|{
name|GpgKeyInfo
name|actual
init|=
name|actualMap
operator|.
name|get
argument_list|(
name|expected
operator|.
name|getKeyIdString
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|id
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|actual
operator|.
name|id
operator|=
name|expected
operator|.
name|getKeyIdString
argument_list|()
expr_stmt|;
name|assertKeyEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|assertKeys (TestKey... expectedKeys)
specifier|private
name|void
name|assertKeys
parameter_list|(
name|TestKey
modifier|...
name|expectedKeys
parameter_list|)
throws|throws
name|Exception
block|{
name|assertKeys
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedKeys
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertKeys (Iterable<TestKey> expectedKeys)
specifier|private
name|void
name|assertKeys
parameter_list|(
name|Iterable
argument_list|<
name|TestKey
argument_list|>
name|expectedKeys
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Check via API.
name|FluentIterable
argument_list|<
name|TestKey
argument_list|>
name|expected
init|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|expectedKeys
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GpgKeyInfo
argument_list|>
name|keyMap
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|listGpgKeys
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|keyMap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"keys returned by listGpgKeys()"
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
operator|.
name|transform
argument_list|(
operator|new
name|Function
argument_list|<
name|TestKey
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|TestKey
name|in
parameter_list|)
block|{
return|return
name|in
operator|.
name|getKeyIdString
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TestKey
name|key
range|:
name|expected
control|)
block|{
name|assertKeyEquals
argument_list|(
name|key
argument_list|,
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|gpgKey
argument_list|(
name|key
operator|.
name|getKeyIdString
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertKeyEquals
argument_list|(
name|key
argument_list|,
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|gpgKey
argument_list|(
name|Fingerprint
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getFingerprint
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertKeyMapContains
argument_list|(
name|key
argument_list|,
name|keyMap
argument_list|)
expr_stmt|;
block|}
comment|// Check raw external IDs.
name|Account
operator|.
name|Id
name|currAccountId
init|=
name|atrScope
operator|.
name|get
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|GpgKeys
operator|.
name|getGpgExtIds
argument_list|(
name|db
argument_list|,
name|currAccountId
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|Function
argument_list|<
name|AccountExternalId
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|AccountExternalId
name|in
parameter_list|)
block|{
return|return
name|in
operator|.
name|getSchemeRest
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"external IDs in database"
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
operator|.
name|transform
argument_list|(
operator|new
name|Function
argument_list|<
name|TestKey
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|TestKey
name|in
parameter_list|)
block|{
return|return
name|BaseEncoding
operator|.
name|base16
argument_list|()
operator|.
name|encode
argument_list|(
name|in
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getFingerprint
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check raw stored keys.
for|for
control|(
name|TestKey
name|key
range|:
name|expected
control|)
block|{
name|getOnlyKeyFromStore
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertKeyEquals (TestKey expected, GpgKeyInfo actual)
specifier|private
specifier|static
name|void
name|assertKeyEquals
parameter_list|(
name|TestKey
name|expected
parameter_list|,
name|GpgKeyInfo
name|actual
parameter_list|)
block|{
name|String
name|id
init|=
name|expected
operator|.
name|getKeyIdString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|id
argument_list|)
operator|.
name|named
argument_list|(
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|fingerprint
argument_list|)
operator|.
name|named
argument_list|(
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Fingerprint
operator|.
name|toString
argument_list|(
name|expected
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getFingerprint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|userIds
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|expected
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getUserIDs
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|userIds
argument_list|)
operator|.
name|named
argument_list|(
name|id
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|userIds
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|key
argument_list|)
operator|.
name|named
argument_list|(
name|id
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"-----BEGIN PGP PUBLIC KEY BLOCK-----\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|GpgKeyInfo
operator|.
name|Status
operator|.
name|TRUSTED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|problems
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|addExternalIdEmail (TestAccount account, String email)
specifier|private
name|void
name|addExternalIdEmail
parameter_list|(
name|TestAccount
name|account
parameter_list|,
name|String
name|email
parameter_list|)
throws|throws
name|Exception
block|{
name|checkNotNull
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|AccountExternalId
name|extId
init|=
operator|new
name|AccountExternalId
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AccountExternalId
operator|.
name|Key
argument_list|(
name|name
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|email
argument_list|)
argument_list|)
decl_stmt|;
name|extId
operator|.
name|setEmailAddress
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|extId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Clear saved AccountState and AccountExternalIds.
name|accountCache
operator|.
name|evict
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|account
argument_list|)
expr_stmt|;
block|}
DECL|method|addGpgKey (String armored)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|GpgKeyInfo
argument_list|>
name|addGpgKey
parameter_list|(
name|String
name|armored
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|putGpgKeys
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|armored
argument_list|)
argument_list|,
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
return|;
block|}
DECL|method|assertUser (AccountInfo info, TestAccount account)
specifier|private
name|void
name|assertUser
parameter_list|(
name|AccountInfo
name|info
parameter_list|,
name|TestAccount
name|account
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|account
operator|.
name|fullName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|account
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|account
operator|.
name|username
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

