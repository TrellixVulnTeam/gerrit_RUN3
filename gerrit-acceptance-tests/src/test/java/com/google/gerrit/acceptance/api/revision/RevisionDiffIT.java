begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.revision
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|revision
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|DiffInfoSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|FileInfoSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
operator|.
name|COMMIT_MSG
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|RawInputUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RebaseInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|DiffInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|FileInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BinaryResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|RevisionDiffIT
specifier|public
class|class
name|RevisionDiffIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|FILE_NAME
init|=
literal|"some_file.txt"
decl_stmt|;
DECL|field|FILE_NAME2
specifier|private
specifier|static
specifier|final
name|String
name|FILE_NAME2
init|=
literal|"another_file.txt"
decl_stmt|;
DECL|field|FILE_CONTENT
specifier|private
specifier|static
specifier|final
name|String
name|FILE_CONTENT
init|=
name|IntStream
operator|.
name|rangeClosed
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|number
lambda|->
name|String
operator|.
name|format
argument_list|(
literal|"Line %d\n"
argument_list|,
name|number
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|FILE_CONTENT2
specifier|private
specifier|static
specifier|final
name|String
name|FILE_CONTENT2
init|=
literal|"1st line\n2nd line\n3rd line\n"
decl_stmt|;
DECL|field|commit1
specifier|private
name|ObjectId
name|commit1
decl_stmt|;
DECL|field|changeId
specifier|private
name|String
name|changeId
decl_stmt|;
DECL|field|initialPatchSetId
specifier|private
name|String
name|initialPatchSetId
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|headCommit
init|=
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"HEAD"
argument_list|)
decl_stmt|;
name|commit1
operator|=
name|addCommit
argument_list|(
name|headCommit
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|FILE_NAME
argument_list|,
name|FILE_CONTENT
argument_list|,
name|FILE_NAME2
argument_list|,
name|FILE_CONTENT2
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|createEmptyChange
argument_list|()
decl_stmt|;
name|changeId
operator|=
name|result
operator|.
name|getChangeId
argument_list|()
expr_stmt|;
name|initialPatchSetId
operator|=
name|result
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diff ()
specifier|public
name|void
name|diff
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fileName
init|=
literal|"a_new_file.txt"
decl_stmt|;
name|String
name|fileContent
init|=
literal|"First line\nSecond line\n"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|(
literal|"Add a file"
argument_list|,
name|fileName
argument_list|,
name|fileContent
argument_list|)
decl_stmt|;
name|assertDiffForNewFile
argument_list|(
name|result
argument_list|,
name|fileName
argument_list|,
name|fileContent
argument_list|)
expr_stmt|;
name|assertDiffForNewFile
argument_list|(
name|result
argument_list|,
name|COMMIT_MSG
argument_list|,
name|result
operator|.
name|getCommit
argument_list|()
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffDeletedFile ()
specifier|public
name|void
name|diffDeletedFile
parameter_list|()
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|deleteFile
argument_list|(
name|FILE_NAME
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|publish
argument_list|()
expr_stmt|;
name|DiffInfo
name|diff
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|metaA
operator|.
name|lines
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|metaB
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffOnMergeCommitChange ()
specifier|public
name|void
name|diffOnMergeCommitChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createMergeCommitChange
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|DiffInfo
name|diff
decl_stmt|;
comment|// automerge
name|diff
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|file
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|diff
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|metaA
operator|.
name|lines
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|metaB
operator|.
name|lines
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|diff
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|file
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|diff
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|metaA
operator|.
name|lines
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|metaB
operator|.
name|lines
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// parent 1
name|diff
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|file
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|diff
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|metaA
operator|.
name|lines
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|metaB
operator|.
name|lines
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// parent 2
name|diff
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|file
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|diff
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|metaA
operator|.
name|lines
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|metaB
operator|.
name|lines
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addedUnrelatedFileIsIgnored_ForPatchSetDiffWithRebase ()
specifier|public
name|void
name|addedUnrelatedFileIsIgnored_ForPatchSetDiffWithRebase
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
literal|"file_added_in_another_commit.txt"
argument_list|,
literal|"Some file content"
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
literal|"Another line\n"
operator|::
name|concat
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|COMMIT_MSG
argument_list|,
name|FILE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removedUnrelatedFileIsIgnored_ForPatchSetDiffWithRebase ()
specifier|public
name|void
name|removedUnrelatedFileIsIgnored_ForPatchSetDiffWithRebase
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|commit2
init|=
name|addCommitRemovingFiles
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME2
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
literal|"Another line\n"
operator|::
name|concat
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|COMMIT_MSG
argument_list|,
name|FILE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|renamedUnrelatedFileIsIgnored_ForPatchSetDiffWithRebase ()
specifier|public
name|void
name|renamedUnrelatedFileIsIgnored_ForPatchSetDiffWithRebase
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|commit2
init|=
name|addCommitRenamingFile
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME2
argument_list|,
literal|"a_new_file_name.txt"
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
literal|"Another line\n"
operator|::
name|concat
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|COMMIT_MSG
argument_list|,
name|FILE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|filesNotTouchedByPatchSetsAndContainingOnlyRebaseHunksAreIgnored ()
specifier|public
name|void
name|filesNotTouchedByPatchSetsAndContainingOnlyRebaseHunksAreIgnored
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newFileContent
init|=
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 10\n"
argument_list|,
literal|"Line ten\n"
argument_list|)
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|newFileContent
argument_list|)
decl_stmt|;
name|ObjectId
name|commit3
init|=
name|addCommitRenamingFile
argument_list|(
name|commit2
argument_list|,
name|FILE_NAME2
argument_list|,
literal|"a_new_file_name.txt"
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit3
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|COMMIT_MSG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|filesTouchedByPatchSetsAndContainingOnlyRebaseHunksAreIgnored ()
specifier|public
name|void
name|filesTouchedByPatchSetsAndContainingOnlyRebaseHunksAreIgnored
parameter_list|()
throws|throws
name|Exception
block|{
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 50\n"
argument_list|,
literal|"Line fifty\n"
argument_list|)
argument_list|)
expr_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME2
argument_list|,
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"1st line\n"
argument_list|,
literal|"First line\n"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|previousPatchSetId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|currentRevision
decl_stmt|;
comment|// Revert the modification to allow rebasing.
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME2
argument_list|,
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"First line\n"
argument_list|,
literal|"1st line\n"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|newFileContent
init|=
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 10\n"
argument_list|,
literal|"Line ten\n"
argument_list|)
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|newFileContent
argument_list|)
decl_stmt|;
name|String
name|newFilePath
init|=
literal|"a_new_file_name.txt"
decl_stmt|;
name|ObjectId
name|commit3
init|=
name|addCommitRenamingFile
argument_list|(
name|commit2
argument_list|,
name|FILE_NAME2
argument_list|,
name|newFilePath
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit3
argument_list|)
expr_stmt|;
comment|// Apply the modification again to bring the file into the same state as for the previous
comment|// patch set.
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|newFilePath
argument_list|,
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"1st line\n"
argument_list|,
literal|"First line\n"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|previousPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|COMMIT_MSG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseHunksAtStartOfFileAreIdentified ()
specifier|public
name|void
name|rebaseHunksAtStartOfFileAreIdentified
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newFileContent
init|=
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 1\n"
argument_list|,
literal|"Line one\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 5\n"
argument_list|,
literal|"Line five\n"
argument_list|)
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|newFileContent
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification
init|=
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 50\n"
argument_list|,
literal|"Line fifty\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|contentModification
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line one"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 5"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line five"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|44
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 50"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line fifty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseHunksAtEndOfFileAreIdentified ()
specifier|public
name|void
name|rebaseHunksAtEndOfFileAreIdentified
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newFileContent
init|=
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 60\n"
argument_list|,
literal|"Line sixty\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 100\n"
argument_list|,
literal|"Line one hundred\n"
argument_list|)
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|newFileContent
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification
init|=
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 50\n"
argument_list|,
literal|"Line fifty\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|contentModification
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|49
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 50"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line fifty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 60"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line sixty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|39
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 100"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line one hundred"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseHunksInBetweenRegularHunksAreIdentified ()
specifier|public
name|void
name|rebaseHunksInBetweenRegularHunksAreIdentified
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newFileContent
init|=
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 40\n"
argument_list|,
literal|"Line forty\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 45\n"
argument_list|,
literal|"Line forty five\n"
argument_list|)
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|newFileContent
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification
init|=
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 1\n"
argument_list|,
literal|"Line one\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 100\n"
argument_list|,
literal|"Line one hundred\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|contentModification
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line one"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|38
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 40"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line forty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 45"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line forty five"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|54
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|6
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 100"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|6
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line one hundred"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|6
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseHunkIsIdentifiedWhenMovedDownInPreviousPatchSet ()
specifier|public
name|void
name|rebaseHunkIsIdentifiedWhenMovedDownInPreviousPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Move the code down by introducing additional lines (pure insert + enlarging replacement) in
comment|// the previous patch set.
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification1
init|=
name|fileContent
lambda|->
literal|"Line zero\n"
operator|+
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 10\n"
argument_list|,
literal|"Line ten\nLine ten and a half\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|contentModification1
argument_list|)
expr_stmt|;
name|String
name|previousPatchSetId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|currentRevision
decl_stmt|;
name|String
name|newFileContent
init|=
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 40\n"
argument_list|,
literal|"Line forty\n"
argument_list|)
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|newFileContent
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification2
init|=
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 100\n"
argument_list|,
literal|"Line one hundred\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|contentModification2
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|(
name|previousPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|41
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 40"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line forty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|59
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 100"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line one hundred"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|previousPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseHunkIsIdentifiedWhenMovedDownInLatestPatchSet ()
specifier|public
name|void
name|rebaseHunkIsIdentifiedWhenMovedDownInLatestPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newFileContent
init|=
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 40\n"
argument_list|,
literal|"Line forty\n"
argument_list|)
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|newFileContent
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
comment|// Move the code down by introducing additional lines (pure insert + enlarging replacement) in
comment|// the latest patch set.
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification
init|=
name|fileContent
lambda|->
literal|"Line zero\n"
operator|+
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 10\n"
argument_list|,
literal|"Line ten\nLine ten and a half\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|contentModification
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line zero"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 10"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line ten"
argument_list|,
literal|"Line ten and a half"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|29
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 40"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line forty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseHunkIsIdentifiedWhenMovedUpInPreviousPatchSet ()
specifier|public
name|void
name|rebaseHunkIsIdentifiedWhenMovedUpInPreviousPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Move the code up by removing lines (pure deletion + shrinking replacement) in the previous
comment|// patch set.
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification1
init|=
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 1\n"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 10\nLine 11\n"
argument_list|,
literal|"Line ten\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|contentModification1
argument_list|)
expr_stmt|;
name|String
name|previousPatchSetId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|currentRevision
decl_stmt|;
name|String
name|newFileContent
init|=
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 40\n"
argument_list|,
literal|"Line forty\n"
argument_list|)
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|newFileContent
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification2
init|=
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 100\n"
argument_list|,
literal|"Line one hundred\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|contentModification2
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|(
name|previousPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|37
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 40"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line forty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|59
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 100"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line one hundred"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|previousPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseHunkIsIdentifiedWhenMovedUpInLatestPatchSet ()
specifier|public
name|void
name|rebaseHunkIsIdentifiedWhenMovedUpInLatestPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newFileContent
init|=
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 40\n"
argument_list|,
literal|"Line forty\n"
argument_list|)
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|newFileContent
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
comment|// Move the code up by removing lines (pure deletion + shrinking replacement) in the latest
comment|// patch set.
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification
init|=
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 1\n"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 10\nLine 11\n"
argument_list|,
literal|"Line ten\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|contentModification
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 10"
argument_list|,
literal|"Line 11"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line ten"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|28
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 40"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line forty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|modifiedRebaseHunkWithSameRegionConsideredAsRegularHunk ()
specifier|public
name|void
name|modifiedRebaseHunkWithSameRegionConsideredAsRegularHunk
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newFileContent
init|=
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 40\n"
argument_list|,
literal|"Line forty\n"
argument_list|)
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|newFileContent
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification
init|=
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line forty\n"
argument_list|,
literal|"Line modified after rebase\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|contentModification
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|39
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 40"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line modified after rebase"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseHunkOverlappingAtBeginningConsideredAsRegularHunk ()
specifier|public
name|void
name|rebaseHunkOverlappingAtBeginningConsideredAsRegularHunk
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newFileContent
init|=
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 40\nLine 41\n"
argument_list|,
literal|"Line forty\nLine forty one\n"
argument_list|)
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|newFileContent
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification
init|=
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 39\n"
argument_list|,
literal|"Line thirty nine\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line forty one\n"
argument_list|,
literal|"Line 41\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|contentModification
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|38
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 39"
argument_list|,
literal|"Line 40"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line thirty nine"
argument_list|,
literal|"Line forty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseHunkOverlappingAtEndConsideredAsRegularHunk ()
specifier|public
name|void
name|rebaseHunkOverlappingAtEndConsideredAsRegularHunk
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newFileContent
init|=
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 40\nLine 41\n"
argument_list|,
literal|"Line forty\nLine forty one\n"
argument_list|)
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|newFileContent
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification
init|=
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line forty\n"
argument_list|,
literal|"Line 40\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 42\n"
argument_list|,
literal|"Line forty two\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|contentModification
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 41"
argument_list|,
literal|"Line 42"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line forty one"
argument_list|,
literal|"Line forty two"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|58
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseHunkModifiedInsideConsideredAsRegularHunk ()
specifier|public
name|void
name|rebaseHunkModifiedInsideConsideredAsRegularHunk
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newFileContent
init|=
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 39\nLine 40\nLine 41\n"
argument_list|,
literal|"Line thirty nine\nLine forty\nLine forty one\n"
argument_list|)
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|newFileContent
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification
init|=
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line forty\n"
argument_list|,
literal|"A different line forty\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|contentModification
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|38
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 39"
argument_list|,
literal|"Line 40"
argument_list|,
literal|"Line 41"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line thirty nine"
argument_list|,
literal|"A different line forty"
argument_list|,
literal|"Line forty one"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|59
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseHunkAfterLineNumberChangingOverlappingHunksIsIdentified ()
specifier|public
name|void
name|rebaseHunkAfterLineNumberChangingOverlappingHunksIsIdentified
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newFileContent
init|=
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 40\nLine 41\n"
argument_list|,
literal|"Line forty\nLine forty one\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 60\n"
argument_list|,
literal|"Line sixty\n"
argument_list|)
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|newFileContent
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification
init|=
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line forty\n"
argument_list|,
literal|"Line 40\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 42\n"
argument_list|,
literal|"Line forty two\nLine forty two and a half\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|contentModification
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 41"
argument_list|,
literal|"Line 42"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line forty one"
argument_list|,
literal|"Line forty two"
argument_list|,
literal|"Line forty two and a half"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 60"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line sixty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseHunksOneLineApartFromRegularHunkAreIdentified ()
specifier|public
name|void
name|rebaseHunksOneLineApartFromRegularHunkAreIdentified
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newFileContent
init|=
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 1\n"
argument_list|,
literal|"Line one\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 5\n"
argument_list|,
literal|"Line five\n"
argument_list|)
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|newFileContent
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification
init|=
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 3\n"
argument_list|,
literal|"Line three\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|contentModification
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line one"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 3"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line three"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 5"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line five"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|95
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multipleRebaseEditsMixedWithRegularEditsCanBeIdentified ()
specifier|public
name|void
name|multipleRebaseEditsMixedWithRegularEditsCanBeIdentified
parameter_list|()
throws|throws
name|Exception
block|{
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 7\n"
argument_list|,
literal|"Line seven\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 24\n"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|previousPatchSetId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|currentRevision
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 2\n"
argument_list|,
literal|"Line two\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 18\nLine 19\n"
argument_list|,
literal|"Line eighteen\nLine nineteen\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 50\n"
argument_list|,
literal|"Line fifty\n"
argument_list|)
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line seven\n"
argument_list|,
literal|"Line 7\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 9\n"
argument_list|,
literal|"Line nine\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 60\n"
argument_list|,
literal|"Line sixty\n"
argument_list|)
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|(
name|previousPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line two"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line seven"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 7"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 9"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line nine"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|6
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|7
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 18"
argument_list|,
literal|"Line 19"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|7
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line eighteen"
argument_list|,
literal|"Line nineteen"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|7
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|8
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|29
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|9
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 50"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|9
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line fifty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|9
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|10
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|11
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 60"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|11
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line sixty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|11
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|12
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|previousPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multipleRebaseEditsMixedWithRegularEditsCanBeIdentified_WithIntraline ()
specifier|public
name|void
name|multipleRebaseEditsMixedWithRegularEditsCanBeIdentified_WithIntraline
parameter_list|()
throws|throws
name|Exception
block|{
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 7\n"
argument_list|,
literal|"Line seven\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 24\n"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|previousPatchSetId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|currentRevision
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 2\n"
argument_list|,
literal|"Line two\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 18\nLine 19\n"
argument_list|,
literal|"Line eighteen\nLine nineteen\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 50\n"
argument_list|,
literal|"Line fifty\n"
argument_list|)
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line seven\n"
argument_list|,
literal|"Line 7\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 9\n"
argument_list|,
literal|"Line nine\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 60\n"
argument_list|,
literal|"Line sixty\n"
argument_list|)
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diffRequest
argument_list|()
operator|.
name|withBase
argument_list|(
name|previousPatchSetId
argument_list|)
operator|.
name|withIntraline
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line two"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line seven"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 7"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 9"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line nine"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|6
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|7
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 18"
argument_list|,
literal|"Line 19"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|7
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line eighteen"
argument_list|,
literal|"Line nineteen"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|7
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|8
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|29
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|9
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 50"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|9
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line fifty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|9
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|10
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|11
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 60"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|11
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line sixty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|11
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|12
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|previousPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deletedFileDuringRebaseConsideredAsRegularHunkWhenModifiedInDiff ()
specifier|public
name|void
name|deletedFileDuringRebaseConsideredAsRegularHunkWhenModifiedInDiff
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Modify the file and revert the modifications to allow rebasing.
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 50\n"
argument_list|,
literal|"Line fifty\n"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|previousPatchSetId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|currentRevision
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line fifty\n"
argument_list|,
literal|"Line 50\n"
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommitRemovingFiles
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|(
name|previousPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|changeType
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|ChangeType
operator|.
name|DELETED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|previousPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addedFileDuringRebaseConsideredAsRegularHunkWhenModifiedInDiff ()
specifier|public
name|void
name|addedFileDuringRebaseConsideredAsRegularHunkWhenModifiedInDiff
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newFilePath
init|=
literal|"a_new_file.txt"
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|newFilePath
argument_list|,
literal|"1st line\n2nd line\n3rd line\n"
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|newFilePath
argument_list|,
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"1st line\n"
argument_list|,
literal|"First line\n"
argument_list|)
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|newFilePath
argument_list|)
operator|.
name|diff
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|changeType
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|ChangeType
operator|.
name|ADDED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|newFilePath
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|newFilePath
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseHunkInRenamedFileIsIdentified_WhenFileIsRenamedDuringRebase ()
specifier|public
name|void
name|rebaseHunkInRenamedFileIsIdentified_WhenFileIsRenamedDuringRebase
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|renamedFilePath
init|=
literal|"renamed_some_file.txt"
decl_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 1\n"
argument_list|,
literal|"Line one\n"
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectId
name|commit3
init|=
name|addCommitRenamingFile
argument_list|(
name|commit2
argument_list|,
name|FILE_NAME
argument_list|,
name|renamedFilePath
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit3
argument_list|)
expr_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification
init|=
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 50\n"
argument_list|,
literal|"Line fifty\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|renamedFilePath
argument_list|,
name|contentModification
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|renamedFilePath
argument_list|)
operator|.
name|diff
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line one"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|48
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 50"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line fifty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|initialPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|renamedFilePath
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|renamedFilePath
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseHunkInRenamedFileIsIdentified_WhenFileIsRenamedInPatchSets ()
specifier|public
name|void
name|rebaseHunkInRenamedFileIsIdentified_WhenFileIsRenamedInPatchSets
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|renamedFilePath
init|=
literal|"renamed_some_file.txt"
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|renameFile
argument_list|(
name|FILE_NAME
argument_list|,
name|renamedFilePath
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|publish
argument_list|()
expr_stmt|;
name|String
name|previousPatchSetId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|currentRevision
decl_stmt|;
comment|// Revert the renaming to be able to rebase.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|renameFile
argument_list|(
name|renamedFilePath
argument_list|,
name|FILE_NAME
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|publish
argument_list|()
expr_stmt|;
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 5\n"
argument_list|,
literal|"Line five\n"
argument_list|)
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|renameFile
argument_list|(
name|FILE_NAME
argument_list|,
name|renamedFilePath
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|publish
argument_list|()
expr_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification
init|=
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 50\n"
argument_list|,
literal|"Line fifty\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|renamedFilePath
argument_list|,
name|contentModification
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|renamedFilePath
argument_list|)
operator|.
name|diff
argument_list|(
name|previousPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 5"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line five"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|44
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 50"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line fifty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|previousPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|renamedFilePath
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|renamedFilePath
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseHunksWhenRebasingOnAnotherChangeAreIdentified ()
specifier|public
name|void
name|rebaseHunksWhenRebasingOnAnotherChangeAreIdentified
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 5\n"
argument_list|,
literal|"Line five\n"
argument_list|)
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|String
name|previousPatchSetId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|currentRevision
decl_stmt|;
name|ObjectId
name|commit3
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 35\n"
argument_list|,
literal|"Line thirty five\n"
argument_list|)
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit3
argument_list|)
expr_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification
init|=
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 20\n"
argument_list|,
literal|"Line twenty\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|contentModification
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|(
name|previousPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line five"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 5"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|14
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 20"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line twenty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|14
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 35"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line thirty five"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|6
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|65
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|(
name|previousPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseHunksWhenReversingPatchSetOrderAreIdentified ()
specifier|public
name|void
name|rebaseHunksWhenReversingPatchSetOrderAreIdentified
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|commit2
init|=
name|addCommit
argument_list|(
name|commit1
argument_list|,
name|FILE_NAME
argument_list|,
name|FILE_CONTENT
operator|.
name|replace
argument_list|(
literal|"Line 5\n"
argument_list|,
literal|"Line five\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Line 35\n"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|rebaseChangeOn
argument_list|(
name|changeId
argument_list|,
name|commit2
argument_list|)
expr_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification
init|=
name|fileContent
lambda|->
name|fileContent
operator|.
name|replace
argument_list|(
literal|"Line 20\n"
argument_list|,
literal|"Line twenty\n"
argument_list|)
decl_stmt|;
name|addModifiedPatchSet
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
name|contentModification
argument_list|)
expr_stmt|;
name|String
name|currentPatchSetId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|currentRevision
decl_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|initialPatchSetId
argument_list|)
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|diff
argument_list|(
name|currentPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line five"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 5"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|2
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|14
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line twenty"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 20"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|3
argument_list|)
operator|.
name|isNotDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|4
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|14
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|linesOfA
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|linesOfB
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"Line 35"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|5
argument_list|)
operator|.
name|isDueToRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diffInfo
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|element
argument_list|(
literal|6
argument_list|)
operator|.
name|commonLines
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|65
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|changedFiles
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|initialPatchSetId
argument_list|)
operator|.
name|files
argument_list|(
name|currentPatchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesInserted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changedFiles
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|linesDeleted
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDiffForNewFile ( PushOneCommit.Result pushResult, String path, String expectedContentSideB)
specifier|private
name|void
name|assertDiffForNewFile
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|pushResult
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|expectedContentSideB
parameter_list|)
throws|throws
name|Exception
block|{
name|DiffInfo
name|diff
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|pushResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|pushResult
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|file
argument_list|(
name|path
argument_list|)
operator|.
name|diff
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|headers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|COMMIT_MSG
argument_list|)
condition|)
block|{
name|RevCommit
name|c
init|=
name|pushResult
operator|.
name|getCommit
argument_list|()
decl_stmt|;
name|RevCommit
name|parentCommit
init|=
name|c
operator|.
name|getParents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|String
name|parentCommitId
init|=
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|getObjectReader
argument_list|()
operator|.
name|abbreviate
argument_list|(
name|parentCommit
operator|.
name|getId
argument_list|()
argument_list|,
literal|8
argument_list|)
operator|.
name|name
argument_list|()
decl_stmt|;
name|headers
operator|.
name|add
argument_list|(
literal|"Parent:     "
operator|+
name|parentCommitId
operator|+
literal|" ("
operator|+
name|parentCommit
operator|.
name|getShortMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|dtfmt
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss Z"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|PersonIdent
name|author
init|=
name|c
operator|.
name|getAuthorIdent
argument_list|()
decl_stmt|;
name|dtfmt
operator|.
name|setTimeZone
argument_list|(
name|author
operator|.
name|getTimeZone
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
literal|"Author:     "
operator|+
name|author
operator|.
name|getName
argument_list|()
operator|+
literal|"<"
operator|+
name|author
operator|.
name|getEmailAddress
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
literal|"AuthorDate: "
operator|+
name|dtfmt
operator|.
name|format
argument_list|(
name|author
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PersonIdent
name|committer
init|=
name|c
operator|.
name|getCommitterIdent
argument_list|()
decl_stmt|;
name|dtfmt
operator|.
name|setTimeZone
argument_list|(
name|committer
operator|.
name|getTimeZone
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
literal|"Commit:     "
operator|+
name|committer
operator|.
name|getName
argument_list|()
operator|+
literal|"<"
operator|+
name|committer
operator|.
name|getEmailAddress
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
literal|"CommitDate: "
operator|+
name|dtfmt
operator|.
name|format
argument_list|(
name|committer
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|headers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|header
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|join
argument_list|(
name|headers
argument_list|)
decl_stmt|;
name|expectedContentSideB
operator|=
name|header
operator|+
literal|"\n"
operator|+
name|expectedContentSideB
expr_stmt|;
block|}
name|assertDiffForNewFile
argument_list|(
name|diff
argument_list|,
name|pushResult
operator|.
name|getCommit
argument_list|()
argument_list|,
name|path
argument_list|,
name|expectedContentSideB
argument_list|)
expr_stmt|;
block|}
DECL|method|rebaseChangeOn (String changeId, ObjectId newParent)
specifier|private
name|void
name|rebaseChangeOn
parameter_list|(
name|String
name|changeId
parameter_list|,
name|ObjectId
name|newParent
parameter_list|)
throws|throws
name|Exception
block|{
name|RebaseInput
name|rebaseInput
init|=
operator|new
name|RebaseInput
argument_list|()
decl_stmt|;
name|rebaseInput
operator|.
name|base
operator|=
name|newParent
operator|.
name|getName
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|rebase
argument_list|(
name|rebaseInput
argument_list|)
expr_stmt|;
block|}
DECL|method|addCommit (ObjectId parentCommit, String filePath, String fileContent)
specifier|private
name|ObjectId
name|addCommit
parameter_list|(
name|ObjectId
name|parentCommit
parameter_list|,
name|String
name|filePath
parameter_list|,
name|String
name|fileContent
parameter_list|)
throws|throws
name|Exception
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|files
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|filePath
argument_list|,
name|fileContent
argument_list|)
decl_stmt|;
return|return
name|addCommit
argument_list|(
name|parentCommit
argument_list|,
name|files
argument_list|)
return|;
block|}
DECL|method|addCommit (ObjectId parentCommit, ImmutableMap<String, String> files)
specifier|private
name|ObjectId
name|addCommit
parameter_list|(
name|ObjectId
name|parentCommit
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|files
parameter_list|)
throws|throws
name|Exception
block|{
name|testRepo
operator|.
name|reset
argument_list|(
name|parentCommit
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"Adjust files of repo"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|getCommit
argument_list|()
return|;
block|}
DECL|method|addCommitRemovingFiles (ObjectId parentCommit, String... removedFilePaths)
specifier|private
name|ObjectId
name|addCommitRemovingFiles
parameter_list|(
name|ObjectId
name|parentCommit
parameter_list|,
name|String
modifier|...
name|removedFilePaths
parameter_list|)
throws|throws
name|Exception
block|{
name|testRepo
operator|.
name|reset
argument_list|(
name|parentCommit
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|files
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|removedFilePaths
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|path
lambda|->
literal|"Irrelevant content"
argument_list|)
argument_list|)
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"Remove files from repo"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|rm
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|getCommit
argument_list|()
return|;
block|}
DECL|method|addCommitRenamingFile ( ObjectId parentCommit, String oldFilePath, String newFilePath)
specifier|private
name|ObjectId
name|addCommitRenamingFile
parameter_list|(
name|ObjectId
name|parentCommit
parameter_list|,
name|String
name|oldFilePath
parameter_list|,
name|String
name|newFilePath
parameter_list|)
throws|throws
name|Exception
block|{
name|testRepo
operator|.
name|reset
argument_list|(
name|parentCommit
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createEmptyChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|result
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|renameFile
argument_list|(
name|oldFilePath
argument_list|,
name|newFilePath
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|publish
argument_list|()
expr_stmt|;
name|String
name|currentRevision
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|currentRevision
decl_stmt|;
name|GitUtil
operator|.
name|fetch
argument_list|(
name|testRepo
argument_list|,
literal|"refs/*:refs/*"
argument_list|)
expr_stmt|;
return|return
name|ObjectId
operator|.
name|fromString
argument_list|(
name|currentRevision
argument_list|)
return|;
block|}
DECL|method|createEmptyChange ()
specifier|private
name|Result
name|createEmptyChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"Test change"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
return|;
block|}
DECL|method|addModifiedPatchSet ( String changeId, String filePath, Function<String, String> contentModification)
specifier|private
name|void
name|addModifiedPatchSet
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|filePath
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentModification
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|BinaryResult
name|content
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|filePath
argument_list|)
operator|.
name|content
argument_list|()
init|)
block|{
name|String
name|newContent
init|=
name|contentModification
operator|.
name|apply
argument_list|(
name|content
operator|.
name|asString
argument_list|()
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|filePath
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|newContent
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|publish
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

