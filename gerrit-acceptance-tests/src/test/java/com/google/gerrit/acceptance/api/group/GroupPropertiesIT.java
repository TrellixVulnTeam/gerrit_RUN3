begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.group
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|group
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupOptionsInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Url
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|GroupPropertiesIT
specifier|public
class|class
name|GroupPropertiesIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Test
DECL|method|testGroupName ()
specifier|public
name|void
name|testGroupName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// get name
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// set name with name conflict
name|String
name|other
init|=
name|name
argument_list|(
literal|"other"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|other
argument_list|)
expr_stmt|;
try|try
block|{
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|name
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|expected
parameter_list|)
block|{
comment|// Expected.
block|}
comment|// set name to same name
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|name
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// rename
name|String
name|newName
init|=
name|name
argument_list|(
literal|"newName"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|name
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getFromCache
argument_list|(
name|newName
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|newName
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getFromCache
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
try|try
block|{
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|expected
parameter_list|)
block|{
comment|// Expceted.
block|}
block|}
annotation|@
name|Test
DECL|method|testGroupDescription ()
specifier|public
name|void
name|testGroupDescription
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// get description
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// set description
name|String
name|desc
init|=
literal|"New description for the group."
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// set description to null
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// set description to empty string
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupOptions ()
specifier|public
name|void
name|testGroupOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// get options
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|options
argument_list|()
operator|.
name|visibleToAll
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// set options
name|GroupOptionsInfo
name|options
init|=
operator|new
name|GroupOptionsInfo
argument_list|()
decl_stmt|;
name|options
operator|.
name|visibleToAll
operator|=
literal|true
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|options
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|options
argument_list|()
operator|.
name|visibleToAll
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupOwner ()
specifier|public
name|void
name|testGroupOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|GroupInfo
name|info
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|adminUUID
init|=
name|getFromCache
argument_list|(
literal|"Administrators"
argument_list|)
operator|.
name|getGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|registeredUUID
init|=
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// get owner
name|assertThat
argument_list|(
name|Url
operator|.
name|decode
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|()
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|info
operator|.
name|id
argument_list|)
expr_stmt|;
comment|// set owner by name
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|(
literal|"Registered Users"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Url
operator|.
name|decode
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|()
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|registeredUUID
argument_list|)
expr_stmt|;
comment|// set owner by UUID
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|(
name|adminUUID
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Url
operator|.
name|decode
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|()
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|adminUUID
argument_list|)
expr_stmt|;
comment|// set non existing owner
try|try
block|{
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|(
literal|"Non-Existing Group"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnprocessableEntityException
name|expected
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
DECL|method|getFromCache (String name)
specifier|private
name|AccountGroup
name|getFromCache
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|groupCache
operator|.
name|get
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

