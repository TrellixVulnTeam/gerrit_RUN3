begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lifecycle
operator|.
name|LifecycleManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|Init
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|FactoryModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_class
DECL|class|GerritServer
class|class
name|GerritServer
block|{
comment|/** Returns fully started Gerrit server */
DECL|method|start ()
specifier|static
name|GerritServer
name|start
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|sitePath
init|=
name|initSite
argument_list|()
decl_stmt|;
specifier|final
name|CyclicBarrier
name|serverStarted
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|Daemon
name|daemon
init|=
operator|new
name|Daemon
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|serverStarted
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|ExecutorService
name|daemonService
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|daemonService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|rc
init|=
name|daemon
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-d"
block|,
name|sitePath
block|,
literal|"--headless"
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
name|serverStarted
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
empty_stmt|;
block|}
argument_list|)
expr_stmt|;
name|serverStarted
operator|.
name|await
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Gerrit Server Started"
argument_list|)
expr_stmt|;
name|Injector
name|i
init|=
name|createTestInjector
argument_list|(
name|daemon
argument_list|)
decl_stmt|;
return|return
operator|new
name|GerritServer
argument_list|(
name|i
argument_list|,
name|daemon
argument_list|,
name|daemonService
argument_list|)
return|;
block|}
DECL|method|initSite ()
specifier|private
specifier|static
name|String
name|initSite
parameter_list|()
throws|throws
name|Exception
block|{
name|DateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss"
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|"target/test_site_"
operator|+
name|df
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|Init
name|init
init|=
operator|new
name|Init
argument_list|()
decl_stmt|;
name|int
name|rc
init|=
name|init
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-d"
block|,
name|path
block|,
literal|"--batch"
block|,
literal|"--no-auto-start"
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't initialize site"
argument_list|)
throw|;
block|}
return|return
name|path
return|;
block|}
DECL|method|createTestInjector (Daemon daemon)
specifier|private
specifier|static
name|Injector
name|createTestInjector
parameter_list|(
name|Daemon
name|daemon
parameter_list|)
throws|throws
name|Exception
block|{
name|Injector
name|sysInjector
init|=
name|get
argument_list|(
name|daemon
argument_list|,
literal|"sysInjector"
argument_list|)
decl_stmt|;
name|Module
name|module
init|=
operator|new
name|FactoryModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|AccountCreator
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
name|sysInjector
operator|.
name|createChildInjector
argument_list|(
name|module
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|get (Object obj, String field)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|Object
name|obj
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|Field
name|f
init|=
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|f
operator|.
name|get
argument_list|(
name|obj
argument_list|)
return|;
block|}
DECL|field|daemon
specifier|private
name|Daemon
name|daemon
decl_stmt|;
DECL|field|daemonService
specifier|private
name|ExecutorService
name|daemonService
decl_stmt|;
DECL|field|testInjector
specifier|private
name|Injector
name|testInjector
decl_stmt|;
DECL|method|GerritServer (Injector testInjector, Daemon daemon, ExecutorService daemonService)
specifier|private
name|GerritServer
parameter_list|(
name|Injector
name|testInjector
parameter_list|,
name|Daemon
name|daemon
parameter_list|,
name|ExecutorService
name|daemonService
parameter_list|)
block|{
name|this
operator|.
name|testInjector
operator|=
name|testInjector
expr_stmt|;
name|this
operator|.
name|daemon
operator|=
name|daemon
expr_stmt|;
name|this
operator|.
name|daemonService
operator|=
name|daemonService
expr_stmt|;
block|}
DECL|method|getTestInjector ()
name|Injector
name|getTestInjector
parameter_list|()
block|{
return|return
name|testInjector
return|;
block|}
DECL|method|stop ()
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|LifecycleManager
name|manager
init|=
name|get
argument_list|(
name|daemon
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Gerrit Server Shutdown"
argument_list|)
expr_stmt|;
name|manager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|daemonService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|daemonService
operator|.
name|awaitTermination
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

