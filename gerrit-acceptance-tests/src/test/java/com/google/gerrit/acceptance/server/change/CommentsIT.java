begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|FILE_NAME
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|SUBJECT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AcceptanceTestRequestScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|DraftInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
operator|.
name|CommentInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
operator|.
name|DraftHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|IdString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|TopLevelResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangesCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|PostReview
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|RevisionResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|FakeEmailSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|FakeEmailSender
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|CommentsIT
specifier|public
class|class
name|CommentsIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|changes
annotation|@
name|Inject
specifier|private
name|Provider
argument_list|<
name|ChangesCollection
argument_list|>
name|changes
decl_stmt|;
DECL|field|postReview
annotation|@
name|Inject
specifier|private
name|Provider
argument_list|<
name|PostReview
argument_list|>
name|postReview
decl_stmt|;
DECL|field|email
annotation|@
name|Inject
specifier|private
name|FakeEmailSender
name|email
decl_stmt|;
DECL|field|lines
specifier|private
specifier|final
name|Integer
index|[]
name|lines
init|=
block|{
literal|0
block|,
literal|1
block|}
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getNonExistingComment ()
specifier|public
name|void
name|getNonExistingComment
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|getPublishedComment
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
literal|"non-existing"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDraft ()
specifier|public
name|void
name|createDraft
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|"file1"
decl_stmt|;
name|DraftInput
name|comment
init|=
name|newDraft
argument_list|(
name|path
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment 1"
argument_list|)
decl_stmt|;
name|addDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
init|=
name|getDraftComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommentInfo
name|actual
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|comment
operator|.
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|comment
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|infoToDraft
argument_list|(
name|path
argument_list|)
operator|.
name|apply
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|createDraftOnMergeCommitChange ()
specifier|public
name|void
name|createDraftOnMergeCommitChange
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createMergeCommitChange
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|"file1"
decl_stmt|;
name|DraftInput
name|c1
init|=
name|newDraft
argument_list|(
name|path
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"ps-1"
argument_list|)
decl_stmt|;
name|DraftInput
name|c2
init|=
name|newDraft
argument_list|(
name|path
argument_list|,
name|Side
operator|.
name|PARENT
argument_list|,
name|line
argument_list|,
literal|"auto-merge of ps-1"
argument_list|)
decl_stmt|;
name|DraftInput
name|c3
init|=
name|newDraftOnParent
argument_list|(
name|path
argument_list|,
literal|1
argument_list|,
name|line
argument_list|,
literal|"parent-1 of ps-1"
argument_list|)
decl_stmt|;
name|DraftInput
name|c4
init|=
name|newDraftOnParent
argument_list|(
name|path
argument_list|,
literal|2
argument_list|,
name|line
argument_list|,
literal|"parent-2 of ps-1"
argument_list|)
decl_stmt|;
name|addDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|addDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|addDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|c3
argument_list|)
expr_stmt|;
name|addDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|c4
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
init|=
name|getDraftComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|,
name|infoToDraft
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|,
name|c3
argument_list|,
name|c4
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|postComment ()
specifier|public
name|void
name|postComment
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|String
name|file
init|=
literal|"file"
decl_stmt|;
name|String
name|contents
init|=
literal|"contents "
operator|+
name|line
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"first subject"
argument_list|,
name|file
argument_list|,
name|contents
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|CommentInput
name|comment
init|=
name|newComment
argument_list|(
name|file
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment 1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|input
operator|.
name|comments
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|input
operator|.
name|comments
operator|.
name|put
argument_list|(
name|comment
operator|.
name|path
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
init|=
name|getPublishedComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|CommentInfo
name|actual
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|comment
operator|.
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|comment
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|infoToInput
argument_list|(
name|file
argument_list|)
operator|.
name|apply
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|comment
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|infoToInput
argument_list|(
name|file
argument_list|)
operator|.
name|apply
argument_list|(
name|getPublishedComment
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|actual
operator|.
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|postCommentWithReply ()
specifier|public
name|void
name|postCommentWithReply
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|String
name|file
init|=
literal|"file"
decl_stmt|;
name|String
name|contents
init|=
literal|"contents "
operator|+
name|line
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"first subject"
argument_list|,
name|file
argument_list|,
name|contents
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|CommentInput
name|comment
init|=
name|newComment
argument_list|(
name|file
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment 1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|input
operator|.
name|comments
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|input
operator|.
name|comments
operator|.
name|put
argument_list|(
name|comment
operator|.
name|path
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
init|=
name|getPublishedComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|CommentInfo
name|actual
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|comment
operator|.
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|input
operator|=
operator|new
name|ReviewInput
argument_list|()
expr_stmt|;
name|comment
operator|=
name|newComment
argument_list|(
name|file
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment 1 reply"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|comment
operator|.
name|inReplyTo
operator|=
name|actual
operator|.
name|id
expr_stmt|;
name|input
operator|.
name|comments
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|input
operator|.
name|comments
operator|.
name|put
argument_list|(
name|comment
operator|.
name|path
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|result
operator|=
name|getPublishedComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
expr_stmt|;
name|actual
operator|=
name|result
operator|.
name|get
argument_list|(
name|comment
operator|.
name|path
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|comment
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|infoToInput
argument_list|(
name|file
argument_list|)
operator|.
name|apply
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|comment
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|infoToInput
argument_list|(
name|file
argument_list|)
operator|.
name|apply
argument_list|(
name|getPublishedComment
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|actual
operator|.
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|postCommentWithUnresolved ()
specifier|public
name|void
name|postCommentWithUnresolved
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|String
name|file
init|=
literal|"file"
decl_stmt|;
name|String
name|contents
init|=
literal|"contents "
operator|+
name|line
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"first subject"
argument_list|,
name|file
argument_list|,
name|contents
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|CommentInput
name|comment
init|=
name|newComment
argument_list|(
name|file
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment 1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|input
operator|.
name|comments
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|input
operator|.
name|comments
operator|.
name|put
argument_list|(
name|comment
operator|.
name|path
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
init|=
name|getPublishedComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|CommentInfo
name|actual
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|comment
operator|.
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|comment
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|infoToInput
argument_list|(
name|file
argument_list|)
operator|.
name|apply
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|comment
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|infoToInput
argument_list|(
name|file
argument_list|)
operator|.
name|apply
argument_list|(
name|getPublishedComment
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|actual
operator|.
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|postCommentOnMergeCommitChange ()
specifier|public
name|void
name|postCommentOnMergeCommitChange
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|String
name|file
init|=
literal|"foo"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createMergeCommitChange
argument_list|(
literal|"refs/for/master"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|CommentInput
name|c1
init|=
name|newComment
argument_list|(
name|file
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"ps-1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|CommentInput
name|c2
init|=
name|newComment
argument_list|(
name|file
argument_list|,
name|Side
operator|.
name|PARENT
argument_list|,
name|line
argument_list|,
literal|"auto-merge of ps-1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|CommentInput
name|c3
init|=
name|newCommentOnParent
argument_list|(
name|file
argument_list|,
literal|1
argument_list|,
name|line
argument_list|,
literal|"parent-1 of ps-1"
argument_list|)
decl_stmt|;
name|CommentInput
name|c4
init|=
name|newCommentOnParent
argument_list|(
name|file
argument_list|,
literal|2
argument_list|,
name|line
argument_list|,
literal|"parent-2 of ps-1"
argument_list|)
decl_stmt|;
name|input
operator|.
name|comments
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|input
operator|.
name|comments
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|,
name|c3
argument_list|,
name|c4
argument_list|)
argument_list|)
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
init|=
name|getPublishedComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|file
argument_list|)
argument_list|,
name|infoToInput
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|,
name|c3
argument_list|,
name|c4
argument_list|)
expr_stmt|;
block|}
comment|// for the commit message comments on the auto-merge are not possible
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|String
name|file
init|=
name|Patch
operator|.
name|COMMIT_MSG
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createMergeCommitChange
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|CommentInput
name|c1
init|=
name|newComment
argument_list|(
name|file
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"ps-1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|CommentInput
name|c2
init|=
name|newCommentOnParent
argument_list|(
name|file
argument_list|,
literal|1
argument_list|,
name|line
argument_list|,
literal|"parent-1 of ps-1"
argument_list|)
decl_stmt|;
name|CommentInput
name|c3
init|=
name|newCommentOnParent
argument_list|(
name|file
argument_list|,
literal|2
argument_list|,
name|line
argument_list|,
literal|"parent-2 of ps-1"
argument_list|)
decl_stmt|;
name|input
operator|.
name|comments
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|input
operator|.
name|comments
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|,
name|c3
argument_list|)
argument_list|)
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
init|=
name|getPublishedComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|file
argument_list|)
argument_list|,
name|infoToInput
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|,
name|c3
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|postCommentOnCommitMessageOnAutoMerge ()
specifier|public
name|void
name|postCommentOnCommitMessageOnAutoMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createMergeCommitChange
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|CommentInput
name|c
init|=
name|newComment
argument_list|(
name|Patch
operator|.
name|COMMIT_MSG
argument_list|,
name|Side
operator|.
name|PARENT
argument_list|,
literal|0
argument_list|,
literal|"comment on auto-merge"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|input
operator|.
name|comments
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|input
operator|.
name|comments
operator|.
name|put
argument_list|(
name|Patch
operator|.
name|COMMIT_MSG
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"cannot comment on "
operator|+
name|Patch
operator|.
name|COMMIT_MSG
operator|+
literal|" on auto-merge"
argument_list|)
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listComments ()
specifier|public
name|void
name|listComments
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|file
init|=
literal|"file"
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"first subject"
argument_list|,
name|file
argument_list|,
literal|"contents"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getPublishedComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|CommentInput
argument_list|>
name|expectedComments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|CommentInput
name|comment
init|=
name|newComment
argument_list|(
name|file
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment "
operator|+
name|line
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|expectedComments
operator|.
name|add
argument_list|(
name|comment
argument_list|)
expr_stmt|;
name|input
operator|.
name|comments
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|input
operator|.
name|comments
operator|.
name|put
argument_list|(
name|comment
operator|.
name|path
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
init|=
name|getPublishedComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|actualComments
init|=
name|result
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|actualComments
argument_list|,
name|infoToInput
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedComments
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putDraft ()
specifier|public
name|void
name|putDraft
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Timestamp
name|origLastUpdated
init|=
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|"file1"
decl_stmt|;
name|DraftInput
name|comment
init|=
name|newDraft
argument_list|(
name|path
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment 1"
argument_list|)
decl_stmt|;
name|addDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
init|=
name|getDraftComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|CommentInfo
name|actual
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|comment
operator|.
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|comment
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|infoToDraft
argument_list|(
name|path
argument_list|)
operator|.
name|apply
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|uuid
init|=
name|actual
operator|.
name|id
decl_stmt|;
name|comment
operator|.
name|message
operator|=
literal|"updated comment 1"
expr_stmt|;
name|updateDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|comment
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
name|result
operator|=
name|getDraftComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
expr_stmt|;
name|actual
operator|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|comment
operator|.
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|comment
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|infoToDraft
argument_list|(
name|path
argument_list|)
operator|.
name|apply
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
comment|// Posting a draft comment doesn't cause lastUpdatedOn to change.
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|origLastUpdated
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|listDrafts ()
specifier|public
name|void
name|listDrafts
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|file
init|=
literal|"file"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getDraftComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|DraftInput
argument_list|>
name|expectedDrafts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|DraftInput
name|comment
init|=
name|newDraft
argument_list|(
name|file
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment "
operator|+
name|line
argument_list|)
decl_stmt|;
name|expectedDrafts
operator|.
name|add
argument_list|(
name|comment
argument_list|)
expr_stmt|;
name|addDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
init|=
name|getDraftComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|actualComments
init|=
name|result
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|actualComments
argument_list|,
name|infoToDraft
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedDrafts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getDraft ()
specifier|public
name|void
name|getDraft
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|"file1"
decl_stmt|;
name|DraftInput
name|comment
init|=
name|newDraft
argument_list|(
name|path
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment 1"
argument_list|)
decl_stmt|;
name|CommentInfo
name|returned
init|=
name|addDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|comment
argument_list|)
decl_stmt|;
name|CommentInfo
name|actual
init|=
name|getDraftComment
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|returned
operator|.
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|comment
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|infoToDraft
argument_list|(
name|path
argument_list|)
operator|.
name|apply
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|deleteDraft ()
specifier|public
name|void
name|deleteDraft
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Timestamp
name|origLastUpdated
init|=
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|DraftInput
name|draft
init|=
name|newDraft
argument_list|(
literal|"file1"
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment 1"
argument_list|)
decl_stmt|;
name|CommentInfo
name|returned
init|=
name|addDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|draft
argument_list|)
decl_stmt|;
name|deleteDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|returned
operator|.
name|id
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|drafts
init|=
name|getDraftComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|drafts
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// Deleting a draft comment doesn't cause lastUpdatedOn to change.
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|origLastUpdated
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|insertCommentsWithHistoricTimestamp ()
specifier|public
name|void
name|insertCommentsWithHistoricTimestamp
parameter_list|()
throws|throws
name|Exception
block|{
name|Timestamp
name|timestamp
init|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|String
name|file
init|=
literal|"file"
decl_stmt|;
name|String
name|contents
init|=
literal|"contents "
operator|+
name|line
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"first subject"
argument_list|,
name|file
argument_list|,
name|contents
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Timestamp
name|origLastUpdated
init|=
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|CommentInput
name|comment
init|=
name|newComment
argument_list|(
name|file
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment 1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|comment
operator|.
name|updated
operator|=
name|timestamp
expr_stmt|;
name|input
operator|.
name|comments
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|input
operator|.
name|comments
operator|.
name|put
argument_list|(
name|comment
operator|.
name|path
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeResource
name|changeRsrc
init|=
name|changes
operator|.
name|get
argument_list|()
operator|.
name|parse
argument_list|(
name|TopLevelResource
operator|.
name|INSTANCE
argument_list|,
name|IdString
operator|.
name|fromDecoded
argument_list|(
name|changeId
argument_list|)
argument_list|)
decl_stmt|;
name|RevisionResource
name|revRsrc
init|=
name|revisions
operator|.
name|parse
argument_list|(
name|changeRsrc
argument_list|,
name|IdString
operator|.
name|fromDecoded
argument_list|(
name|revId
argument_list|)
argument_list|)
decl_stmt|;
name|postReview
operator|.
name|get
argument_list|()
operator|.
name|apply
argument_list|(
name|revRsrc
argument_list|,
name|input
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
init|=
name|getPublishedComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|CommentInfo
name|actual
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|comment
operator|.
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|CommentInput
name|ci
init|=
name|infoToInput
argument_list|(
name|file
argument_list|)
operator|.
name|apply
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|ci
operator|.
name|updated
operator|=
name|comment
operator|.
name|updated
expr_stmt|;
name|assertThat
argument_list|(
name|comment
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|updated
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|created
argument_list|)
expr_stmt|;
comment|// Updating historic comments doesn't cause lastUpdatedOn to regress.
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|origLastUpdated
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|addDuplicateComments ()
specifier|public
name|void
name|addDuplicateComments
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r1
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|addComment
argument_list|(
name|r1
argument_list|,
literal|"nit: trailing whitespace"
argument_list|)
expr_stmt|;
name|addComment
argument_list|(
name|r1
argument_list|,
literal|"nit: trailing whitespace"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
init|=
name|getPublishedComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|addComment
argument_list|(
name|r1
argument_list|,
literal|"nit: trailing whitespace"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|result
operator|=
name|getPublishedComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
literal|"content"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|changeId
operator|=
name|r2
operator|.
name|getChangeId
argument_list|()
expr_stmt|;
name|revId
operator|=
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|addComment
argument_list|(
name|r2
argument_list|,
literal|"nit: trailing whitespace"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|result
operator|=
name|getPublishedComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listChangeDrafts ()
specifier|public
name|void
name|listChangeDrafts
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
literal|"new content"
argument_list|,
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|addDraft
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
literal|1
argument_list|,
literal|"nit: trailing whitespace"
argument_list|)
argument_list|)
expr_stmt|;
name|addDraft
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
literal|1
argument_list|,
literal|"typo: content"
argument_list|)
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|addDraft
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
literal|1
argument_list|,
literal|"+1, please fix"
argument_list|)
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|actual
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|drafts
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|FILE_NAME
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|comments
init|=
name|actual
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|comments
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|CommentInfo
name|c1
init|=
name|comments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|author
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|patchSet
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"nit: trailing whitespace"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|side
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|line
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommentInfo
name|c2
init|=
name|comments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|author
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|patchSet
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"typo: content"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|side
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|line
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listChangeComments ()
specifier|public
name|void
name|listChangeComments
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
literal|"new cntent"
argument_list|,
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|addComment
argument_list|(
name|r1
argument_list|,
literal|"nit: trailing whitespace"
argument_list|)
expr_stmt|;
name|addComment
argument_list|(
name|r2
argument_list|,
literal|"typo: content"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|actual
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|comments
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|FILE_NAME
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|comments
init|=
name|actual
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|comments
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|CommentInfo
name|c1
init|=
name|comments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|author
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|patchSet
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"nit: trailing whitespace"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|side
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|line
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommentInfo
name|c2
init|=
name|comments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|author
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|patchSet
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"typo: content"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|side
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|line
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listChangeWithDrafts ()
specifier|public
name|void
name|listChangeWithDrafts
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|DraftInput
name|comment
init|=
name|newDraft
argument_list|(
literal|"file1"
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment 1"
argument_list|)
decl_stmt|;
name|addDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
literal|"change:"
operator|+
name|changeId
operator|+
literal|" has:draft"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|publishCommentsAllRevisions ()
specifier|public
name|void
name|publishCommentsAllRevisions
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
literal|"new\ncntent\n"
argument_list|,
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|addDraft
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
literal|1
argument_list|,
literal|"nit: trailing whitespace"
argument_list|)
argument_list|)
expr_stmt|;
name|addDraft
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
name|Side
operator|.
name|PARENT
argument_list|,
literal|2
argument_list|,
literal|"what happened to this?"
argument_list|)
argument_list|)
expr_stmt|;
name|addDraft
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
literal|1
argument_list|,
literal|"join lines"
argument_list|)
argument_list|)
expr_stmt|;
name|addDraft
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
literal|2
argument_list|,
literal|"typo: content"
argument_list|)
argument_list|)
expr_stmt|;
name|addDraft
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
name|Side
operator|.
name|PARENT
argument_list|,
literal|1
argument_list|,
literal|"comment 1 on base"
argument_list|)
argument_list|)
expr_stmt|;
name|addDraft
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
name|Side
operator|.
name|PARENT
argument_list|,
literal|2
argument_list|,
literal|"comment 2 on base"
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|other
init|=
name|createChange
argument_list|()
decl_stmt|;
comment|// Drafts on other changes aren't returned.
name|addDraft
argument_list|(
name|other
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|other
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
literal|1
argument_list|,
literal|"unrelated comment"
argument_list|)
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
comment|// Drafts by other users aren't returned.
name|addDraft
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
literal|2
argument_list|,
literal|"oops"
argument_list|)
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|ReviewInput
name|reviewInput
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|reviewInput
operator|.
name|drafts
operator|=
name|DraftHandling
operator|.
name|PUBLISH_ALL_REVISIONS
expr_stmt|;
name|reviewInput
operator|.
name|message
operator|=
literal|"comments"
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|reviewInput
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|drafts
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|ps1Map
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|comments
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ps1Map
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|FILE_NAME
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|ps1List
init|=
name|ps1Map
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ps1List
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps1List
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"what happened to this?"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps1List
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|side
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Side
operator|.
name|PARENT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps1List
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"nit: trailing whitespace"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps1List
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|side
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|drafts
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|ps2Map
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|comments
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ps2Map
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|FILE_NAME
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|ps2List
init|=
name|ps2Map
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ps2List
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps2List
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"comment 1 on base"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps2List
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"comment 2 on base"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps2List
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"join lines"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps2List
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"typo: content"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|email
operator|.
name|getMessages
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"comment"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|canonicalWebUrl
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|c
init|=
name|r1
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|extractComments
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Patch Set 2:\n"
operator|+
literal|"\n"
operator|+
literal|"(6 comments)\n"
operator|+
literal|"\n"
operator|+
literal|"comments\n"
operator|+
literal|"\n"
operator|+
name|url
operator|+
literal|"#/c/"
operator|+
name|c
operator|+
literal|"/1/a.txt\n"
operator|+
literal|"File a.txt:\n"
operator|+
literal|"\n"
operator|+
name|url
operator|+
literal|"#/c/"
operator|+
name|c
operator|+
literal|"/1/a.txt@a2\n"
operator|+
literal|"PS1, Line 2: \n"
operator|+
literal|"what happened to this?\n"
operator|+
literal|"\n"
operator|+
literal|"\n"
operator|+
name|url
operator|+
literal|"#/c/"
operator|+
name|c
operator|+
literal|"/1/a.txt@1\n"
operator|+
literal|"PS1, Line 1: ew\n"
operator|+
literal|"nit: trailing whitespace\n"
operator|+
literal|"\n"
operator|+
literal|"\n"
operator|+
name|url
operator|+
literal|"#/c/"
operator|+
name|c
operator|+
literal|"/2/a.txt\n"
operator|+
literal|"File a.txt:\n"
operator|+
literal|"\n"
operator|+
name|url
operator|+
literal|"#/c/"
operator|+
name|c
operator|+
literal|"/2/a.txt@a1\n"
operator|+
literal|"PS2, Line 1: \n"
operator|+
literal|"comment 1 on base\n"
operator|+
literal|"\n"
operator|+
literal|"\n"
operator|+
name|url
operator|+
literal|"#/c/"
operator|+
name|c
operator|+
literal|"/2/a.txt@a2\n"
operator|+
literal|"PS2, Line 2: \n"
operator|+
literal|"comment 2 on base\n"
operator|+
literal|"\n"
operator|+
literal|"\n"
operator|+
name|url
operator|+
literal|"#/c/"
operator|+
name|c
operator|+
literal|"/2/a.txt@1\n"
operator|+
literal|"PS2, Line 1: ew\n"
operator|+
literal|"join lines\n"
operator|+
literal|"\n"
operator|+
literal|"\n"
operator|+
name|url
operator|+
literal|"#/c/"
operator|+
name|c
operator|+
literal|"/2/a.txt@2\n"
operator|+
literal|"PS2, Line 2: nten\n"
operator|+
literal|"typo: content\n"
operator|+
literal|"\n"
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commentTags ()
specifier|public
name|void
name|commentTags
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|CommentInput
name|pub
init|=
operator|new
name|CommentInput
argument_list|()
decl_stmt|;
name|pub
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|pub
operator|.
name|message
operator|=
literal|"published comment"
expr_stmt|;
name|pub
operator|.
name|path
operator|=
name|FILE_NAME
expr_stmt|;
name|ReviewInput
name|rin
init|=
name|newInput
argument_list|(
name|pub
argument_list|)
decl_stmt|;
name|rin
operator|.
name|tag
operator|=
literal|"tag1"
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|rin
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|comments
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commentsAsList
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|comments
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|comments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|tag
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"tag1"
argument_list|)
expr_stmt|;
name|DraftInput
name|draft
init|=
operator|new
name|DraftInput
argument_list|()
decl_stmt|;
name|draft
operator|.
name|line
operator|=
literal|2
expr_stmt|;
name|draft
operator|.
name|message
operator|=
literal|"draft comment"
expr_stmt|;
name|draft
operator|.
name|path
operator|=
name|FILE_NAME
expr_stmt|;
name|draft
operator|.
name|tag
operator|=
literal|"tag2"
expr_stmt|;
name|addDraft
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|draft
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|drafts
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|draftsAsList
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|drafts
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|drafts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|tag
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"tag2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangesWithUnresolvedCommentCount ()
specifier|public
name|void
name|queryChangesWithUnresolvedCommentCount
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|addComment
argument_list|(
name|r1
argument_list|,
literal|"comment 1"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addComment
argument_list|(
name|r1
argument_list|,
literal|"nit: trailing whitespace"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
literal|"new cntent"
argument_list|,
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|addComment
argument_list|(
name|r2
argument_list|,
literal|"typo: content"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AcceptanceTestRequestScope
operator|.
name|Context
name|ctx
init|=
name|disableDb
argument_list|()
decl_stmt|;
try|try
block|{
name|ChangeInfo
name|result
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|query
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|unresolvedCommentCount
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|enableDb
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|extractComments (String msg)
specifier|private
specifier|static
name|String
name|extractComments
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
comment|// Extract lines between start "....." and end "-- ".
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*[.]{5}\n+(.*)\\n+-- \n.*"
argument_list|,
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|msg
argument_list|)
decl_stmt|;
return|return
name|m
operator|.
name|matches
argument_list|()
condition|?
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
else|:
name|msg
return|;
block|}
DECL|method|newInput (CommentInput c)
specifier|private
name|ReviewInput
name|newInput
parameter_list|(
name|CommentInput
name|c
parameter_list|)
block|{
name|ReviewInput
name|in
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|comments
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|in
operator|.
name|comments
operator|.
name|put
argument_list|(
name|c
operator|.
name|path
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|in
return|;
block|}
DECL|method|addComment (PushOneCommit.Result r, String message)
specifier|private
name|void
name|addComment
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|addComment
argument_list|(
name|r
argument_list|,
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|addComment ( PushOneCommit.Result r, String message, boolean omitDuplicateComments, Boolean unresolved)
specifier|private
name|void
name|addComment
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|,
name|String
name|message
parameter_list|,
name|boolean
name|omitDuplicateComments
parameter_list|,
name|Boolean
name|unresolved
parameter_list|)
throws|throws
name|Exception
block|{
name|CommentInput
name|c
init|=
operator|new
name|CommentInput
argument_list|()
decl_stmt|;
name|c
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|c
operator|.
name|path
operator|=
name|FILE_NAME
expr_stmt|;
name|c
operator|.
name|unresolved
operator|=
name|unresolved
expr_stmt|;
name|ReviewInput
name|in
init|=
name|newInput
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|in
operator|.
name|omitDuplicateComments
operator|=
name|omitDuplicateComments
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|addDraft (String changeId, String revId, DraftInput in)
specifier|private
name|CommentInfo
name|addDraft
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|revId
parameter_list|,
name|DraftInput
name|in
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId
argument_list|)
operator|.
name|createDraft
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|updateDraft (String changeId, String revId, DraftInput in, String uuid)
specifier|private
name|void
name|updateDraft
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|revId
parameter_list|,
name|DraftInput
name|in
parameter_list|,
name|String
name|uuid
parameter_list|)
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId
argument_list|)
operator|.
name|draft
argument_list|(
name|uuid
argument_list|)
operator|.
name|update
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteDraft (String changeId, String revId, String uuid)
specifier|private
name|void
name|deleteDraft
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|revId
parameter_list|,
name|String
name|uuid
parameter_list|)
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId
argument_list|)
operator|.
name|draft
argument_list|(
name|uuid
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
DECL|method|getPublishedComment (String changeId, String revId, String uuid)
specifier|private
name|CommentInfo
name|getPublishedComment
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|revId
parameter_list|,
name|String
name|uuid
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId
argument_list|)
operator|.
name|comment
argument_list|(
name|uuid
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getPublishedComments (String changeId, String revId)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|getPublishedComments
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|revId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId
argument_list|)
operator|.
name|comments
argument_list|()
return|;
block|}
DECL|method|getDraftComments (String changeId, String revId)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|getDraftComments
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|revId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId
argument_list|)
operator|.
name|drafts
argument_list|()
return|;
block|}
DECL|method|getDraftComment (String changeId, String revId, String uuid)
specifier|private
name|CommentInfo
name|getDraftComment
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|revId
parameter_list|,
name|String
name|uuid
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId
argument_list|)
operator|.
name|draft
argument_list|(
name|uuid
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|newComment ( String path, Side side, int line, String message, Boolean unresolved)
specifier|private
specifier|static
name|CommentInput
name|newComment
parameter_list|(
name|String
name|path
parameter_list|,
name|Side
name|side
parameter_list|,
name|int
name|line
parameter_list|,
name|String
name|message
parameter_list|,
name|Boolean
name|unresolved
parameter_list|)
block|{
name|CommentInput
name|c
init|=
operator|new
name|CommentInput
argument_list|()
decl_stmt|;
return|return
name|populate
argument_list|(
name|c
argument_list|,
name|path
argument_list|,
name|side
argument_list|,
literal|null
argument_list|,
name|line
argument_list|,
name|message
argument_list|,
name|unresolved
argument_list|)
return|;
block|}
DECL|method|newCommentOnParent ( String path, int parent, int line, String message)
specifier|private
specifier|static
name|CommentInput
name|newCommentOnParent
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|parent
parameter_list|,
name|int
name|line
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|CommentInput
name|c
init|=
operator|new
name|CommentInput
argument_list|()
decl_stmt|;
return|return
name|populate
argument_list|(
name|c
argument_list|,
name|path
argument_list|,
name|Side
operator|.
name|PARENT
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|parent
argument_list|)
argument_list|,
name|line
argument_list|,
name|message
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|newDraft (String path, Side side, int line, String message)
specifier|private
name|DraftInput
name|newDraft
parameter_list|(
name|String
name|path
parameter_list|,
name|Side
name|side
parameter_list|,
name|int
name|line
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|DraftInput
name|d
init|=
operator|new
name|DraftInput
argument_list|()
decl_stmt|;
return|return
name|populate
argument_list|(
name|d
argument_list|,
name|path
argument_list|,
name|side
argument_list|,
literal|null
argument_list|,
name|line
argument_list|,
name|message
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|newDraftOnParent (String path, int parent, int line, String message)
specifier|private
name|DraftInput
name|newDraftOnParent
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|parent
parameter_list|,
name|int
name|line
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|DraftInput
name|d
init|=
operator|new
name|DraftInput
argument_list|()
decl_stmt|;
return|return
name|populate
argument_list|(
name|d
argument_list|,
name|path
argument_list|,
name|Side
operator|.
name|PARENT
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|parent
argument_list|)
argument_list|,
name|line
argument_list|,
name|message
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|populate ( C c, String path, Side side, Integer parent, int line, String message, Boolean unresolved)
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|Comment
parameter_list|>
name|C
name|populate
parameter_list|(
name|C
name|c
parameter_list|,
name|String
name|path
parameter_list|,
name|Side
name|side
parameter_list|,
name|Integer
name|parent
parameter_list|,
name|int
name|line
parameter_list|,
name|String
name|message
parameter_list|,
name|Boolean
name|unresolved
parameter_list|)
block|{
name|c
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|c
operator|.
name|side
operator|=
name|side
expr_stmt|;
name|c
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|c
operator|.
name|line
operator|=
name|line
operator|!=
literal|0
condition|?
name|line
else|:
literal|null
expr_stmt|;
name|c
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|c
operator|.
name|unresolved
operator|=
name|unresolved
expr_stmt|;
if|if
condition|(
name|line
operator|!=
literal|0
condition|)
block|{
name|Comment
operator|.
name|Range
name|range
init|=
operator|new
name|Comment
operator|.
name|Range
argument_list|()
decl_stmt|;
name|range
operator|.
name|startLine
operator|=
name|line
expr_stmt|;
name|range
operator|.
name|startCharacter
operator|=
literal|1
expr_stmt|;
name|range
operator|.
name|endLine
operator|=
name|line
expr_stmt|;
name|range
operator|.
name|endCharacter
operator|=
literal|5
expr_stmt|;
name|c
operator|.
name|range
operator|=
name|range
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
DECL|method|infoToInput (String path)
specifier|private
specifier|static
name|Function
argument_list|<
name|CommentInfo
argument_list|,
name|CommentInput
argument_list|>
name|infoToInput
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|infoToInput
argument_list|(
name|path
argument_list|,
name|CommentInput
operator|::
operator|new
argument_list|)
return|;
block|}
DECL|method|infoToDraft (String path)
specifier|private
specifier|static
name|Function
argument_list|<
name|CommentInfo
argument_list|,
name|DraftInput
argument_list|>
name|infoToDraft
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|infoToInput
argument_list|(
name|path
argument_list|,
name|DraftInput
operator|::
operator|new
argument_list|)
return|;
block|}
DECL|method|infoToInput ( String path, Supplier<I> supplier)
specifier|private
specifier|static
parameter_list|<
name|I
extends|extends
name|Comment
parameter_list|>
name|Function
argument_list|<
name|CommentInfo
argument_list|,
name|I
argument_list|>
name|infoToInput
parameter_list|(
name|String
name|path
parameter_list|,
name|Supplier
argument_list|<
name|I
argument_list|>
name|supplier
parameter_list|)
block|{
return|return
name|info
lambda|->
block|{
name|I
name|i
init|=
name|supplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|i
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|copy
argument_list|(
name|info
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
return|;
block|}
DECL|method|copy (Comment from, Comment to)
specifier|private
specifier|static
name|void
name|copy
parameter_list|(
name|Comment
name|from
parameter_list|,
name|Comment
name|to
parameter_list|)
block|{
name|to
operator|.
name|side
operator|=
name|from
operator|.
name|side
operator|==
literal|null
condition|?
name|Side
operator|.
name|REVISION
else|:
name|from
operator|.
name|side
expr_stmt|;
name|to
operator|.
name|parent
operator|=
name|from
operator|.
name|parent
expr_stmt|;
name|to
operator|.
name|line
operator|=
name|from
operator|.
name|line
expr_stmt|;
name|to
operator|.
name|message
operator|=
name|from
operator|.
name|message
expr_stmt|;
name|to
operator|.
name|range
operator|=
name|from
operator|.
name|range
expr_stmt|;
name|to
operator|.
name|unresolved
operator|=
name|from
operator|.
name|unresolved
expr_stmt|;
name|to
operator|.
name|inReplyTo
operator|=
name|from
operator|.
name|inReplyTo
expr_stmt|;
block|}
block|}
end_class

end_unit

