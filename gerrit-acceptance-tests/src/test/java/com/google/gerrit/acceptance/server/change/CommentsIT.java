begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|FILE_NAME
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|SUBJECT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|DraftInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
operator|.
name|CommentInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|IdString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|TopLevelResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangesCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|PostReview
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|RevisionResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|Revisions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|ConfigSuite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|CommentsIT
specifier|public
class|class
name|CommentsIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|ConfigSuite
operator|.
name|Config
DECL|method|noteDbEnabled ()
specifier|public
specifier|static
name|Config
name|noteDbEnabled
parameter_list|()
block|{
return|return
name|NotesMigration
operator|.
name|allEnabledConfig
argument_list|()
return|;
block|}
annotation|@
name|Inject
DECL|field|changes
specifier|private
name|Provider
argument_list|<
name|ChangesCollection
argument_list|>
name|changes
decl_stmt|;
annotation|@
name|Inject
DECL|field|revisions
specifier|private
name|Provider
argument_list|<
name|Revisions
argument_list|>
name|revisions
decl_stmt|;
annotation|@
name|Inject
DECL|field|postReview
specifier|private
name|Provider
argument_list|<
name|PostReview
argument_list|>
name|postReview
decl_stmt|;
DECL|field|lines
specifier|private
specifier|final
name|Integer
index|[]
name|lines
init|=
block|{
literal|0
block|,
literal|1
block|}
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDraft ()
specifier|public
name|void
name|createDraft
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|DraftInput
name|comment
init|=
name|newDraft
argument_list|(
literal|"file1"
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment 1"
argument_list|)
decl_stmt|;
name|addDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
init|=
name|getDraftComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommentInfo
name|actual
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|comment
operator|.
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|assertCommentInfo
argument_list|(
name|comment
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|postComment ()
specifier|public
name|void
name|postComment
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|String
name|file
init|=
literal|"file"
decl_stmt|;
name|String
name|contents
init|=
literal|"contents "
operator|+
name|line
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"first subject"
argument_list|,
name|file
argument_list|,
name|contents
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|CommentInput
name|comment
init|=
name|newComment
argument_list|(
name|file
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment 1"
argument_list|)
decl_stmt|;
name|input
operator|.
name|comments
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|input
operator|.
name|comments
operator|.
name|put
argument_list|(
name|comment
operator|.
name|path
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
init|=
name|getPublishedComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|CommentInfo
name|actual
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|comment
operator|.
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|assertCommentInfo
argument_list|(
name|comment
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|putDraft ()
specifier|public
name|void
name|putDraft
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|DraftInput
name|comment
init|=
name|newDraft
argument_list|(
literal|"file1"
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment 1"
argument_list|)
decl_stmt|;
name|addDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
init|=
name|getDraftComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|CommentInfo
name|actual
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|comment
operator|.
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|assertCommentInfo
argument_list|(
name|comment
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|String
name|uuid
init|=
name|actual
operator|.
name|id
decl_stmt|;
name|comment
operator|.
name|message
operator|=
literal|"updated comment 1"
expr_stmt|;
name|updateDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|comment
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
name|result
operator|=
name|getDraftComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
expr_stmt|;
name|actual
operator|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|comment
operator|.
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertCommentInfo
argument_list|(
name|comment
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|getDraft ()
specifier|public
name|void
name|getDraft
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|DraftInput
name|comment
init|=
name|newDraft
argument_list|(
literal|"file1"
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment 1"
argument_list|)
decl_stmt|;
name|CommentInfo
name|returned
init|=
name|addDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|comment
argument_list|)
decl_stmt|;
name|CommentInfo
name|actual
init|=
name|getDraftComment
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|returned
operator|.
name|id
argument_list|)
decl_stmt|;
name|assertCommentInfo
argument_list|(
name|comment
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|deleteDraft ()
specifier|public
name|void
name|deleteDraft
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|DraftInput
name|draft
init|=
name|newDraft
argument_list|(
literal|"file1"
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment 1"
argument_list|)
decl_stmt|;
name|CommentInfo
name|returned
init|=
name|addDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|draft
argument_list|)
decl_stmt|;
name|deleteDraft
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|,
name|returned
operator|.
name|id
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|drafts
init|=
name|getDraftComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|drafts
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|insertCommentsWithHistoricTimestamp ()
specifier|public
name|void
name|insertCommentsWithHistoricTimestamp
parameter_list|()
throws|throws
name|Exception
block|{
name|Timestamp
name|timestamp
init|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|line
range|:
name|lines
control|)
block|{
name|String
name|file
init|=
literal|"file"
decl_stmt|;
name|String
name|contents
init|=
literal|"contents "
operator|+
name|line
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"first subject"
argument_list|,
name|file
argument_list|,
name|contents
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|CommentInput
name|comment
init|=
name|newComment
argument_list|(
name|file
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|,
literal|"comment 1"
argument_list|)
decl_stmt|;
name|comment
operator|.
name|updated
operator|=
name|timestamp
expr_stmt|;
name|input
operator|.
name|comments
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|input
operator|.
name|comments
operator|.
name|put
argument_list|(
name|comment
operator|.
name|path
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeResource
name|changeRsrc
init|=
name|changes
operator|.
name|get
argument_list|()
operator|.
name|parse
argument_list|(
name|TopLevelResource
operator|.
name|INSTANCE
argument_list|,
name|IdString
operator|.
name|fromDecoded
argument_list|(
name|changeId
argument_list|)
argument_list|)
decl_stmt|;
name|RevisionResource
name|revRsrc
init|=
name|revisions
operator|.
name|get
argument_list|()
operator|.
name|parse
argument_list|(
name|changeRsrc
argument_list|,
name|IdString
operator|.
name|fromDecoded
argument_list|(
name|revId
argument_list|)
argument_list|)
decl_stmt|;
name|postReview
operator|.
name|get
argument_list|()
operator|.
name|apply
argument_list|(
name|revRsrc
argument_list|,
name|input
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
init|=
name|getPublishedComments
argument_list|(
name|changeId
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|CommentInfo
name|actual
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|comment
operator|.
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|assertCommentInfo
argument_list|(
name|comment
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|comment
operator|.
name|updated
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|listChangeDrafts ()
specifier|public
name|void
name|listChangeDrafts
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
literal|"new cntent"
argument_list|,
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|addDraft
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
literal|1
argument_list|,
literal|"nit: trailing whitespace"
argument_list|)
argument_list|)
expr_stmt|;
name|addDraft
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
literal|1
argument_list|,
literal|"typo: content"
argument_list|)
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|addDraft
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|,
literal|1
argument_list|,
literal|"+1, please fix"
argument_list|)
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|actual
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|drafts
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|actual
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|FILE_NAME
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|comments
init|=
name|actual
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|comments
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|CommentInfo
name|c1
init|=
name|comments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|author
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|patchSet
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"nit: trailing whitespace"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|side
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|line
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommentInfo
name|c2
init|=
name|comments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|author
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|patchSet
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"typo: content"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|side
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|line
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listChangeComments ()
specifier|public
name|void
name|listChangeComments
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
literal|"new cntent"
argument_list|,
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|addComment
argument_list|(
name|r1
argument_list|,
literal|"nit: trailing whitespace"
argument_list|)
expr_stmt|;
name|addComment
argument_list|(
name|r2
argument_list|,
literal|"typo: content"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|actual
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|comments
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|FILE_NAME
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|comments
init|=
name|actual
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|comments
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|CommentInfo
name|c1
init|=
name|comments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|author
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|patchSet
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"nit: trailing whitespace"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|side
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|line
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommentInfo
name|c2
init|=
name|comments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|author
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|patchSet
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"typo: content"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|side
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|line
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|addComment (PushOneCommit.Result r, String message)
specifier|private
name|void
name|addComment
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|CommentInput
name|c
init|=
operator|new
name|CommentInput
argument_list|()
decl_stmt|;
name|c
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|c
operator|.
name|path
operator|=
name|FILE_NAME
expr_stmt|;
name|ReviewInput
name|in
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|comments
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|List
argument_list|<
name|CommentInput
argument_list|>
operator|>
name|of
argument_list|(
name|FILE_NAME
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|addDraft (String changeId, String revId, DraftInput in)
specifier|private
name|CommentInfo
name|addDraft
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|revId
parameter_list|,
name|DraftInput
name|in
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId
argument_list|)
operator|.
name|createDraft
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|updateDraft (String changeId, String revId, DraftInput in, String uuid)
specifier|private
name|void
name|updateDraft
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|revId
parameter_list|,
name|DraftInput
name|in
parameter_list|,
name|String
name|uuid
parameter_list|)
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId
argument_list|)
operator|.
name|draft
argument_list|(
name|uuid
argument_list|)
operator|.
name|update
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteDraft (String changeId, String revId, String uuid)
specifier|private
name|void
name|deleteDraft
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|revId
parameter_list|,
name|String
name|uuid
parameter_list|)
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId
argument_list|)
operator|.
name|draft
argument_list|(
name|uuid
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
DECL|method|getPublishedComments (String changeId, String revId)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|getPublishedComments
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|revId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId
argument_list|)
operator|.
name|comments
argument_list|()
return|;
block|}
DECL|method|getDraftComments (String changeId, String revId)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|getDraftComments
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|revId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId
argument_list|)
operator|.
name|drafts
argument_list|()
return|;
block|}
DECL|method|getDraftComment (String changeId, String revId, String uuid)
specifier|private
name|CommentInfo
name|getDraftComment
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|revId
parameter_list|,
name|String
name|uuid
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId
argument_list|)
operator|.
name|draft
argument_list|(
name|uuid
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|assertCommentInfo (Comment expected, CommentInfo actual)
specifier|private
specifier|static
name|void
name|assertCommentInfo
parameter_list|(
name|Comment
name|expected
parameter_list|,
name|CommentInfo
name|actual
parameter_list|)
block|{
name|assertThat
argument_list|(
name|actual
operator|.
name|line
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|line
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|message
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|inReplyTo
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|inReplyTo
argument_list|)
expr_stmt|;
name|assertCommentRange
argument_list|(
name|expected
operator|.
name|range
argument_list|,
name|actual
operator|.
name|range
argument_list|)
expr_stmt|;
if|if
condition|(
name|actual
operator|.
name|side
operator|==
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|Side
operator|.
name|REVISION
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|side
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertCommentRange (Comment.Range expected, Comment.Range actual)
specifier|private
specifier|static
name|void
name|assertCommentRange
parameter_list|(
name|Comment
operator|.
name|Range
name|expected
parameter_list|,
name|Comment
operator|.
name|Range
name|actual
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|startLine
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|startLine
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|startCharacter
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|startCharacter
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|endLine
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|endLine
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|endCharacter
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|endCharacter
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newComment (String path, Side side, int line, String message)
specifier|private
specifier|static
name|CommentInput
name|newComment
parameter_list|(
name|String
name|path
parameter_list|,
name|Side
name|side
parameter_list|,
name|int
name|line
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|CommentInput
name|c
init|=
operator|new
name|CommentInput
argument_list|()
decl_stmt|;
return|return
name|populate
argument_list|(
name|c
argument_list|,
name|path
argument_list|,
name|side
argument_list|,
name|line
argument_list|,
name|message
argument_list|)
return|;
block|}
DECL|method|newDraft (String path, Side side, int line, String message)
specifier|private
name|DraftInput
name|newDraft
parameter_list|(
name|String
name|path
parameter_list|,
name|Side
name|side
parameter_list|,
name|int
name|line
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|DraftInput
name|d
init|=
operator|new
name|DraftInput
argument_list|()
decl_stmt|;
return|return
name|populate
argument_list|(
name|d
argument_list|,
name|path
argument_list|,
name|side
argument_list|,
name|line
argument_list|,
name|message
argument_list|)
return|;
block|}
DECL|method|populate (C c, String path, Side side, int line, String message)
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|Comment
parameter_list|>
name|C
name|populate
parameter_list|(
name|C
name|c
parameter_list|,
name|String
name|path
parameter_list|,
name|Side
name|side
parameter_list|,
name|int
name|line
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|c
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|c
operator|.
name|side
operator|=
name|side
expr_stmt|;
name|c
operator|.
name|line
operator|=
name|line
operator|!=
literal|0
condition|?
name|line
else|:
literal|null
expr_stmt|;
name|c
operator|.
name|message
operator|=
name|message
expr_stmt|;
if|if
condition|(
name|line
operator|!=
literal|0
condition|)
block|{
name|Comment
operator|.
name|Range
name|range
init|=
operator|new
name|Comment
operator|.
name|Range
argument_list|()
decl_stmt|;
name|range
operator|.
name|startLine
operator|=
literal|1
expr_stmt|;
name|range
operator|.
name|startCharacter
operator|=
literal|1
expr_stmt|;
name|range
operator|.
name|endLine
operator|=
literal|1
expr_stmt|;
name|range
operator|.
name|endCharacter
operator|=
literal|5
expr_stmt|;
name|c
operator|.
name|range
operator|=
name|range
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
block|}
end_class

end_unit

