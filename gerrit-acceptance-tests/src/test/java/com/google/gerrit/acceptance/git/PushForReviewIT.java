begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
operator|.
name|GitUtil
operator|.
name|add
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
operator|.
name|GitUtil
operator|.
name|cloneProject
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
operator|.
name|GitUtil
operator|.
name|createCommit
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
operator|.
name|GitUtil
operator|.
name|createProject
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
operator|.
name|GitUtil
operator|.
name|initSsh
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
operator|.
name|GitUtil
operator|.
name|pushHead
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AccountCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|SshSession
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|JSchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|Git
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|errors
operator|.
name|GitAPIException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RemoteRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RemoteRefUpdate
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|PushForReviewIT
specifier|public
class|class
name|PushForReviewIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|enum|Protocol
specifier|private
enum|enum
name|Protocol
block|{
DECL|enumConstant|SSH
DECL|enumConstant|HTTP
name|SSH
block|,
name|HTTP
block|}
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
DECL|method|getParam ()
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|getParam
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|params
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Protocol
name|p
range|:
name|Protocol
operator|.
name|values
argument_list|()
control|)
block|{
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|p
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
annotation|@
name|Inject
DECL|field|accounts
specifier|private
name|AccountCreator
name|accounts
decl_stmt|;
annotation|@
name|Inject
DECL|field|reviewDbProvider
specifier|private
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|reviewDbProvider
decl_stmt|;
DECL|field|admin
specifier|private
name|TestAccount
name|admin
decl_stmt|;
DECL|field|project
specifier|private
name|Project
operator|.
name|NameKey
name|project
decl_stmt|;
DECL|field|git
specifier|private
name|Git
name|git
decl_stmt|;
DECL|field|db
specifier|private
name|ReviewDb
name|db
decl_stmt|;
DECL|field|protocol
specifier|private
name|Protocol
name|protocol
decl_stmt|;
DECL|method|PushForReviewIT (Protocol p)
specifier|public
name|PushForReviewIT
parameter_list|(
name|Protocol
name|p
parameter_list|)
block|{
name|this
operator|.
name|protocol
operator|=
name|p
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|admin
operator|=
name|accounts
operator|.
name|create
argument_list|(
literal|"admin"
argument_list|,
literal|"admin@example.com"
argument_list|,
literal|"Administrator"
argument_list|,
literal|"Administrators"
argument_list|)
expr_stmt|;
name|project
operator|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|initSsh
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|SshSession
name|sshSession
init|=
operator|new
name|SshSession
argument_list|(
name|admin
argument_list|)
decl_stmt|;
name|createProject
argument_list|(
name|sshSession
argument_list|,
name|project
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|url
decl_stmt|;
switch|switch
condition|(
name|protocol
condition|)
block|{
case|case
name|SSH
case|:
name|url
operator|=
name|sshSession
operator|.
name|getUrl
argument_list|()
expr_stmt|;
break|break;
case|case
name|HTTP
case|:
name|url
operator|=
name|admin
operator|.
name|getHttpUrl
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unexpected protocol: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
name|git
operator|=
name|cloneProject
argument_list|(
name|url
operator|+
literal|"/"
operator|+
name|project
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|sshSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|db
operator|=
name|reviewDbProvider
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPushForMaster ()
specifier|public
name|void
name|testPushForMaster
parameter_list|()
throws|throws
name|GitAPIException
throws|,
name|OrmException
throws|,
name|IOException
block|{
name|PushOneCommit
name|push
init|=
operator|new
name|PushOneCommit
argument_list|()
decl_stmt|;
name|String
name|ref
init|=
literal|"refs/for/master"
decl_stmt|;
name|PushResult
name|r
init|=
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|assertOkStatus
argument_list|(
name|r
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertChange
argument_list|(
name|push
operator|.
name|changeId
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPushForMasterWithTopic ()
specifier|public
name|void
name|testPushForMasterWithTopic
parameter_list|()
throws|throws
name|GitAPIException
throws|,
name|OrmException
throws|,
name|IOException
block|{
comment|// specify topic in ref
name|PushOneCommit
name|push
init|=
operator|new
name|PushOneCommit
argument_list|()
decl_stmt|;
name|String
name|topic
init|=
literal|"my/topic"
decl_stmt|;
name|String
name|ref
init|=
literal|"refs/for/master/"
operator|+
name|topic
decl_stmt|;
name|PushResult
name|r
init|=
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|assertOkStatus
argument_list|(
name|r
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertChange
argument_list|(
name|push
operator|.
name|changeId
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|topic
argument_list|)
expr_stmt|;
comment|// specify topic as option
name|push
operator|=
operator|new
name|PushOneCommit
argument_list|()
expr_stmt|;
name|ref
operator|=
literal|"refs/for/master%topic="
operator|+
name|topic
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|assertOkStatus
argument_list|(
name|r
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertChange
argument_list|(
name|push
operator|.
name|changeId
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|topic
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPushForMasterWithCc ()
specifier|public
name|void
name|testPushForMasterWithCc
parameter_list|()
throws|throws
name|GitAPIException
throws|,
name|OrmException
throws|,
name|IOException
throws|,
name|JSchException
block|{
comment|// cc one user
name|TestAccount
name|user
init|=
name|accounts
operator|.
name|create
argument_list|(
literal|"user"
argument_list|,
literal|"user@example.com"
argument_list|,
literal|"User"
argument_list|)
decl_stmt|;
name|PushOneCommit
name|push
init|=
operator|new
name|PushOneCommit
argument_list|()
decl_stmt|;
name|String
name|topic
init|=
literal|"my/topic"
decl_stmt|;
name|String
name|ref
init|=
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%cc="
operator|+
name|user
operator|.
name|email
decl_stmt|;
name|PushResult
name|r
init|=
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|assertOkStatus
argument_list|(
name|r
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertChange
argument_list|(
name|push
operator|.
name|changeId
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|topic
argument_list|)
expr_stmt|;
comment|// cc several users
name|TestAccount
name|user2
init|=
name|accounts
operator|.
name|create
argument_list|(
literal|"another-user"
argument_list|,
literal|"another.user@example.com"
argument_list|,
literal|"Another User"
argument_list|)
decl_stmt|;
name|push
operator|=
operator|new
name|PushOneCommit
argument_list|()
expr_stmt|;
name|ref
operator|=
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%cc="
operator|+
name|admin
operator|.
name|email
operator|+
literal|",cc="
operator|+
name|user
operator|.
name|email
operator|+
literal|",cc="
operator|+
name|user2
operator|.
name|email
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|assertOkStatus
argument_list|(
name|r
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertChange
argument_list|(
name|push
operator|.
name|changeId
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|topic
argument_list|)
expr_stmt|;
comment|// cc non-existing user
name|String
name|nonExistingEmail
init|=
literal|"non.existing@example.com"
decl_stmt|;
name|push
operator|=
operator|new
name|PushOneCommit
argument_list|()
expr_stmt|;
name|ref
operator|=
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%cc="
operator|+
name|admin
operator|.
name|email
operator|+
literal|",cc="
operator|+
name|nonExistingEmail
operator|+
literal|",cc="
operator|+
name|user
operator|.
name|email
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|assertErrorStatus
argument_list|(
name|r
argument_list|,
literal|"user \""
operator|+
name|nonExistingEmail
operator|+
literal|"\" not found"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPushForMasterWithReviewer ()
specifier|public
name|void
name|testPushForMasterWithReviewer
parameter_list|()
throws|throws
name|GitAPIException
throws|,
name|OrmException
throws|,
name|IOException
throws|,
name|JSchException
block|{
comment|// add one reviewer
name|TestAccount
name|user
init|=
name|accounts
operator|.
name|create
argument_list|(
literal|"user"
argument_list|,
literal|"user@example.com"
argument_list|,
literal|"User"
argument_list|)
decl_stmt|;
name|PushOneCommit
name|push
init|=
operator|new
name|PushOneCommit
argument_list|()
decl_stmt|;
name|String
name|topic
init|=
literal|"my/topic"
decl_stmt|;
name|String
name|ref
init|=
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%r="
operator|+
name|user
operator|.
name|email
decl_stmt|;
name|PushResult
name|r
init|=
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|assertOkStatus
argument_list|(
name|r
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertChange
argument_list|(
name|push
operator|.
name|changeId
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|topic
argument_list|,
name|user
argument_list|)
expr_stmt|;
comment|// add several reviewers
name|TestAccount
name|user2
init|=
name|accounts
operator|.
name|create
argument_list|(
literal|"another-user"
argument_list|,
literal|"another.user@example.com"
argument_list|,
literal|"Another User"
argument_list|)
decl_stmt|;
name|push
operator|=
operator|new
name|PushOneCommit
argument_list|()
expr_stmt|;
name|ref
operator|=
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%r="
operator|+
name|admin
operator|.
name|email
operator|+
literal|",r="
operator|+
name|user
operator|.
name|email
operator|+
literal|",r="
operator|+
name|user2
operator|.
name|email
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|assertOkStatus
argument_list|(
name|r
argument_list|,
name|ref
argument_list|)
expr_stmt|;
comment|// admin is the owner of the change and should not appear as reviewer
name|assertChange
argument_list|(
name|push
operator|.
name|changeId
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|topic
argument_list|,
name|user
argument_list|,
name|user2
argument_list|)
expr_stmt|;
comment|// add non-existing user as reviewer
name|String
name|nonExistingEmail
init|=
literal|"non.existing@example.com"
decl_stmt|;
name|push
operator|=
operator|new
name|PushOneCommit
argument_list|()
expr_stmt|;
name|ref
operator|=
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%r="
operator|+
name|admin
operator|.
name|email
operator|+
literal|",r="
operator|+
name|nonExistingEmail
operator|+
literal|",r="
operator|+
name|user
operator|.
name|email
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|assertErrorStatus
argument_list|(
name|r
argument_list|,
literal|"user \""
operator|+
name|nonExistingEmail
operator|+
literal|"\" not found"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPushForMasterAsDraft ()
specifier|public
name|void
name|testPushForMasterAsDraft
parameter_list|()
throws|throws
name|GitAPIException
throws|,
name|OrmException
throws|,
name|IOException
block|{
comment|// create draft by pushing to 'refs/drafts/'
name|PushOneCommit
name|push
init|=
operator|new
name|PushOneCommit
argument_list|()
decl_stmt|;
name|String
name|ref
init|=
literal|"refs/drafts/master"
decl_stmt|;
name|PushResult
name|r
init|=
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|assertOkStatus
argument_list|(
name|r
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertChange
argument_list|(
name|push
operator|.
name|changeId
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|DRAFT
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// create draft by using 'draft' option
name|push
operator|=
operator|new
name|PushOneCommit
argument_list|()
expr_stmt|;
name|ref
operator|=
literal|"refs/for/master%draft"
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|assertOkStatus
argument_list|(
name|r
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertChange
argument_list|(
name|push
operator|.
name|changeId
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|DRAFT
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPushForNonExistingBranch ()
specifier|public
name|void
name|testPushForNonExistingBranch
parameter_list|()
throws|throws
name|GitAPIException
throws|,
name|OrmException
throws|,
name|IOException
block|{
name|PushOneCommit
name|push
init|=
operator|new
name|PushOneCommit
argument_list|()
decl_stmt|;
name|String
name|branchName
init|=
literal|"non-existing"
decl_stmt|;
name|String
name|ref
init|=
literal|"refs/for/"
operator|+
name|branchName
decl_stmt|;
name|PushResult
name|r
init|=
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|assertErrorStatus
argument_list|(
name|r
argument_list|,
literal|"branch "
operator|+
name|branchName
operator|+
literal|" not found"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
DECL|method|assertChange (String changeId, Change.Status expectedStatus, String expectedSubject, String expectedTopic, TestAccount... expectedReviewers)
specifier|private
name|void
name|assertChange
parameter_list|(
name|String
name|changeId
parameter_list|,
name|Change
operator|.
name|Status
name|expectedStatus
parameter_list|,
name|String
name|expectedSubject
parameter_list|,
name|String
name|expectedTopic
parameter_list|,
name|TestAccount
modifier|...
name|expectedReviewers
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|c
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|byKey
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedSubject
argument_list|,
name|c
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedStatus
argument_list|,
name|c
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedTopic
argument_list|,
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|c
operator|.
name|getTopic
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertReviewers
argument_list|(
name|c
argument_list|,
name|expectedReviewers
argument_list|)
expr_stmt|;
block|}
DECL|method|assertReviewers (Change c, TestAccount... expectedReviewers)
specifier|private
name|void
name|assertReviewers
parameter_list|(
name|Change
name|c
parameter_list|,
name|TestAccount
modifier|...
name|expectedReviewers
parameter_list|)
throws|throws
name|OrmException
block|{
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|expectedReviewerIds
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedReviewers
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|TestAccount
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Account
operator|.
name|Id
name|apply
parameter_list|(
name|TestAccount
name|a
parameter_list|)
block|{
return|return
name|a
operator|.
name|id
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
literal|"unexpected reviewer "
operator|+
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|expectedReviewerIds
operator|.
name|remove
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"missing reviewers: "
operator|+
name|expectedReviewerIds
argument_list|,
name|expectedReviewerIds
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertOkStatus (PushResult result, String ref)
specifier|private
specifier|static
name|void
name|assertOkStatus
parameter_list|(
name|PushResult
name|result
parameter_list|,
name|String
name|ref
parameter_list|)
block|{
name|assertStatus
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
literal|null
argument_list|,
name|result
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
DECL|method|assertErrorStatus (PushResult result, String expectedMessage, String ref)
specifier|private
specifier|static
name|void
name|assertErrorStatus
parameter_list|(
name|PushResult
name|result
parameter_list|,
name|String
name|expectedMessage
parameter_list|,
name|String
name|ref
parameter_list|)
block|{
name|assertStatus
argument_list|(
name|Status
operator|.
name|REJECTED_OTHER_REASON
argument_list|,
name|expectedMessage
argument_list|,
name|result
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
DECL|method|assertStatus (Status expectedStatus, String expectedMessage, PushResult result, String ref)
specifier|private
specifier|static
name|void
name|assertStatus
parameter_list|(
name|Status
name|expectedStatus
parameter_list|,
name|String
name|expectedMessage
parameter_list|,
name|PushResult
name|result
parameter_list|,
name|String
name|ref
parameter_list|)
block|{
name|RemoteRefUpdate
name|refUpdate
init|=
name|result
operator|.
name|getRemoteUpdate
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|refUpdate
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
operator|+
name|result
operator|.
name|getMessages
argument_list|()
argument_list|,
name|expectedStatus
argument_list|,
name|refUpdate
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedMessage
argument_list|,
name|refUpdate
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|PushOneCommit
specifier|private
class|class
name|PushOneCommit
block|{
DECL|field|FILE_NAME
specifier|final
specifier|static
name|String
name|FILE_NAME
init|=
literal|"a.txt"
decl_stmt|;
DECL|field|FILE_CONTENT
specifier|final
specifier|static
name|String
name|FILE_CONTENT
init|=
literal|"some content"
decl_stmt|;
DECL|field|SUBJECT
specifier|final
specifier|static
name|String
name|SUBJECT
init|=
literal|"test commit"
decl_stmt|;
DECL|field|changeId
name|String
name|changeId
decl_stmt|;
DECL|method|to (String ref)
specifier|public
name|PushResult
name|to
parameter_list|(
name|String
name|ref
parameter_list|)
throws|throws
name|GitAPIException
throws|,
name|IOException
block|{
name|add
argument_list|(
name|git
argument_list|,
name|FILE_NAME
argument_list|,
name|FILE_CONTENT
argument_list|)
expr_stmt|;
name|changeId
operator|=
name|createCommit
argument_list|(
name|git
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|SUBJECT
argument_list|)
expr_stmt|;
return|return
name|pushHead
argument_list|(
name|git
argument_list|,
name|ref
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

