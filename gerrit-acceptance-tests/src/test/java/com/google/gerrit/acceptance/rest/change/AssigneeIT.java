begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|AssigneeInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestTimeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|AssigneeIT
specifier|public
class|class
name|AssigneeIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|BeforeClass
DECL|method|setTimeForTesting ()
specifier|public
specifier|static
name|void
name|setTimeForTesting
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|restoreTime ()
specifier|public
specifier|static
name|void
name|restoreTime
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getNoAssignee ()
specifier|public
name|void
name|getNoAssignee
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getAssignee
argument_list|(
name|r
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addGetAssignee ()
specifier|public
name|void
name|addGetAssignee
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|setAssignee
argument_list|(
name|r
argument_list|,
name|user
operator|.
name|email
argument_list|)
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getAssignee
argument_list|(
name|r
argument_list|)
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setNewAssigneeWhenExists ()
specifier|public
name|void
name|setNewAssigneeWhenExists
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|setAssignee
argument_list|(
name|r
argument_list|,
name|user
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|setAssignee
argument_list|(
name|r
argument_list|,
name|user
operator|.
name|email
argument_list|)
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getPastAssignees ()
specifier|public
name|void
name|getPastAssignees
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|setAssignee
argument_list|(
name|r
argument_list|,
name|user
operator|.
name|email
argument_list|)
expr_stmt|;
name|setAssignee
argument_list|(
name|r
argument_list|,
name|admin
operator|.
name|email
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|assignees
init|=
name|getPastAssignees
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|assignees
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|AccountInfo
argument_list|>
name|itr
init|=
name|assignees
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|itr
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|itr
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|assigneeAddedAsReviewer ()
specifier|public
name|void
name|assigneeAddedAsReviewer
parameter_list|()
throws|throws
name|Exception
block|{
name|ReviewerState
name|state
decl_stmt|;
comment|// Assignee is added as CC, if back-end is reviewDb (that does not support
comment|// CC) CC is stored as REVIEWER
if|if
condition|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
name|state
operator|=
name|ReviewerState
operator|.
name|CC
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|ReviewerState
operator|.
name|REVIEWER
expr_stmt|;
block|}
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|AccountInfo
argument_list|>
name|reviewers
init|=
name|getReviewers
argument_list|(
name|r
argument_list|,
name|state
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|setAssignee
argument_list|(
name|r
argument_list|,
name|user
operator|.
name|email
argument_list|)
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|reviewers
operator|=
name|getReviewers
argument_list|(
name|r
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|AccountInfo
name|reviewer
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|reviewers
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reviewer
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setAlreadyExistingAssignee ()
specifier|public
name|void
name|setAlreadyExistingAssignee
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|setAssignee
argument_list|(
name|r
argument_list|,
name|user
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|setAssignee
argument_list|(
name|r
argument_list|,
name|user
operator|.
name|email
argument_list|)
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteAssignee ()
specifier|public
name|void
name|deleteAssignee
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|setAssignee
argument_list|(
name|r
argument_list|,
name|user
operator|.
name|email
argument_list|)
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deleteAssignee
argument_list|(
name|r
argument_list|)
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getAssignee
argument_list|(
name|r
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteAssigneeWhenNoAssignee ()
specifier|public
name|void
name|deleteAssigneeWhenNoAssignee
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|deleteAssignee
argument_list|(
name|r
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|getAssignee (PushOneCommit.Result r)
specifier|private
name|AccountInfo
name|getAssignee
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getAssignee
argument_list|()
return|;
block|}
DECL|method|getPastAssignees (PushOneCommit.Result r)
specifier|private
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|getPastAssignees
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getPastAssignees
argument_list|()
return|;
block|}
DECL|method|getReviewers (PushOneCommit.Result r, ReviewerState state)
specifier|private
name|Iterable
argument_list|<
name|AccountInfo
argument_list|>
name|getReviewers
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|,
name|ReviewerState
name|state
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|state
argument_list|)
return|;
block|}
DECL|method|setAssignee (PushOneCommit.Result r, String identifieer)
specifier|private
name|AccountInfo
name|setAssignee
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|,
name|String
name|identifieer
parameter_list|)
throws|throws
name|Exception
block|{
name|AssigneeInput
name|input
init|=
operator|new
name|AssigneeInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|assignee
operator|=
name|identifieer
expr_stmt|;
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setAssignee
argument_list|(
name|input
argument_list|)
return|;
block|}
DECL|method|deleteAssignee (PushOneCommit.Result r)
specifier|private
name|AccountInfo
name|deleteAssignee
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|deleteAssignee
argument_list|()
return|;
block|}
block|}
end_class

end_unit

