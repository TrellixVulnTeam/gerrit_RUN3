begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ProjectInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|ProjectIT
specifier|public
class|class
name|ProjectIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Test
DECL|method|createProjectFoo ()
specifier|public
name|void
name|createProjectFoo
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"foo"
decl_stmt|;
name|assertThat
argument_list|(
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|name
argument_list|)
operator|.
name|create
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RestApiException
operator|.
name|class
argument_list|)
DECL|method|createProjectFooBar ()
specifier|public
name|void
name|createProjectFooBar
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectInput
name|in
init|=
operator|new
name|ProjectInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
literal|"foo"
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ResourceConflictException
operator|.
name|class
argument_list|)
DECL|method|createProjectDuplicate ()
specifier|public
name|void
name|createProjectDuplicate
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectInput
name|in
init|=
operator|new
name|ProjectInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
literal|"baz"
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createBranch ()
specifier|public
name|void
name|createBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listProjects ()
specifier|public
name|void
name|listProjects
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ProjectInfo
argument_list|>
name|initialProjects
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ProjectInfo
argument_list|>
name|allProjects
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|allProjects
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|is
argument_list|(
name|initialProjects
operator|.
name|size
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ProjectInfo
argument_list|>
name|projectsWithDescription
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|projectsWithDescription
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|description
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ProjectInfo
argument_list|>
name|projectsWithoutDescription
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|false
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|projectsWithoutDescription
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|description
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ProjectInfo
argument_list|>
name|noMatchingProjects
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withPrefix
argument_list|(
literal|"fox"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|noMatchingProjects
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|is
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ProjectInfo
argument_list|>
name|matchingProject
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withPrefix
argument_list|(
literal|"fo"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|matchingProject
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|is
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ProjectInfo
argument_list|>
name|limitOneProject
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withLimit
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|limitOneProject
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|is
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ProjectInfo
argument_list|>
name|startAtOneProjects
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withStart
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|startAtOneProjects
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|is
argument_list|(
name|allProjects
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

