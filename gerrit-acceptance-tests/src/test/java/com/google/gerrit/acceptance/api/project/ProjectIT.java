begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
operator|.
name|INHERITED_FROM_GLOBAL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
operator|.
name|INHERITED_FROM_PARENT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
operator|.
name|OVERRIDDEN_BY_GLOBAL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
operator|.
name|OVERRIDDEN_BY_PARENT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ConfigInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ConfigInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|DescriptionInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|ProjectIT
specifier|public
class|class
name|ProjectIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Test
DECL|method|createProject ()
specifier|public
name|void
name|createProject
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|name
argument_list|)
expr_stmt|;
name|RevCommit
name|head
init|=
name|getRemoteHead
argument_list|(
name|name
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
name|eventRecorder
operator|.
name|assertRefUpdatedEvents
argument_list|(
name|name
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|,
literal|null
argument_list|,
name|head
argument_list|)
expr_stmt|;
name|eventRecorder
operator|.
name|assertNoRefUpdatedEvents
argument_list|(
name|name
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createProjectWithGitSuffix ()
specifier|public
name|void
name|createProjectWithGitSuffix
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|create
argument_list|(
name|name
operator|+
literal|".git"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|name
argument_list|)
expr_stmt|;
name|RevCommit
name|head
init|=
name|getRemoteHead
argument_list|(
name|name
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
name|eventRecorder
operator|.
name|assertRefUpdatedEvents
argument_list|(
name|name
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|,
literal|null
argument_list|,
name|head
argument_list|)
expr_stmt|;
name|eventRecorder
operator|.
name|assertNoRefUpdatedEvents
argument_list|(
name|name
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createProjectWithInitialCommit ()
specifier|public
name|void
name|createProjectWithInitialCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ProjectInput
name|input
init|=
operator|new
name|ProjectInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|input
operator|.
name|createEmptyCommit
operator|=
literal|true
expr_stmt|;
name|assertThat
argument_list|(
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|create
argument_list|(
name|input
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|name
argument_list|)
expr_stmt|;
name|RevCommit
name|head
init|=
name|getRemoteHead
argument_list|(
name|name
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
name|eventRecorder
operator|.
name|assertRefUpdatedEvents
argument_list|(
name|name
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|,
literal|null
argument_list|,
name|head
argument_list|)
expr_stmt|;
name|head
operator|=
name|getRemoteHead
argument_list|(
name|name
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|eventRecorder
operator|.
name|assertRefUpdatedEvents
argument_list|(
name|name
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|null
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createProjectWithMismatchedInput ()
specifier|public
name|void
name|createProjectWithMismatchedInput
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectInput
name|in
init|=
operator|new
name|ProjectInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|name
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"name must match input.name"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createProjectNoNameInInput ()
specifier|public
name|void
name|createProjectNoNameInInput
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectInput
name|in
init|=
operator|new
name|ProjectInput
argument_list|()
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"input.name is required"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createProjectDuplicate ()
specifier|public
name|void
name|createProjectDuplicate
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectInput
name|in
init|=
operator|new
name|ProjectInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|name
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Project already exists"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createBranch ()
specifier|public
name|void
name|createBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|description ()
specifier|public
name|void
name|description
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|initialHead
init|=
name|getRemoteHead
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|description
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|DescriptionInput
name|in
init|=
operator|new
name|DescriptionInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|description
operator|=
literal|"new project description"
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|description
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|description
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|description
argument_list|)
expr_stmt|;
name|RevCommit
name|updatedHead
init|=
name|getRemoteHead
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
name|eventRecorder
operator|.
name|assertRefUpdatedEvents
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|,
name|initialHead
argument_list|,
name|updatedHead
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitType ()
specifier|public
name|void
name|submitType
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|initialHead
init|=
name|getRemoteHead
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
name|ConfigInfo
name|info
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|submitType
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SubmitType
operator|.
name|MERGE_IF_NECESSARY
argument_list|)
expr_stmt|;
name|ConfigInput
name|input
init|=
operator|new
name|ConfigInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|submitType
operator|=
name|SubmitType
operator|.
name|CHERRY_PICK
expr_stmt|;
name|info
operator|=
name|setConfig
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|submitType
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SubmitType
operator|.
name|CHERRY_PICK
argument_list|)
expr_stmt|;
name|info
operator|=
name|getConfig
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|submitType
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SubmitType
operator|.
name|CHERRY_PICK
argument_list|)
expr_stmt|;
name|RevCommit
name|updatedHead
init|=
name|getRemoteHead
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
name|eventRecorder
operator|.
name|assertRefUpdatedEvents
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|,
name|initialHead
argument_list|,
name|updatedHead
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|maxObjectSizeIsNotSetByDefault ()
specifier|public
name|void
name|maxObjectSizeIsNotSetByDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigInfo
name|info
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|maxObjectSizeCanBeSetAndCleared ()
specifier|public
name|void
name|maxObjectSizeCanBeSetAndCleared
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set a value
name|ConfigInfo
name|info
init|=
name|setMaxObjectSize
argument_list|(
literal|"100k"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"102400"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"100k"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// Clear the value
name|info
operator|=
name|setMaxObjectSize
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|maxObjectSizeIsInheritedFromParentProject ()
specifier|public
name|void
name|maxObjectSizeIsInheritedFromParentProject
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|child
init|=
name|createProject
argument_list|(
name|name
argument_list|(
literal|"child"
argument_list|)
argument_list|,
name|project
argument_list|)
decl_stmt|;
name|ConfigInfo
name|info
init|=
name|setMaxObjectSize
argument_list|(
literal|"100k"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"102400"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"100k"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|info
operator|=
name|getConfig
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"102400"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|INHERITED_FROM_PARENT
argument_list|,
name|project
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|maxObjectSizeOverridesParentProjectWhenNotSetOnParent ()
specifier|public
name|void
name|maxObjectSizeOverridesParentProjectWhenNotSetOnParent
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|child
init|=
name|createProject
argument_list|(
name|name
argument_list|(
literal|"child"
argument_list|)
argument_list|,
name|project
argument_list|)
decl_stmt|;
name|ConfigInfo
name|info
init|=
name|setMaxObjectSize
argument_list|(
literal|"0"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|info
operator|=
name|setMaxObjectSize
argument_list|(
name|child
argument_list|,
literal|"100k"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"102400"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"100k"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|maxObjectSizeOverridesParentProjectWhenLower ()
specifier|public
name|void
name|maxObjectSizeOverridesParentProjectWhenLower
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|child
init|=
name|createProject
argument_list|(
name|name
argument_list|(
literal|"child"
argument_list|)
argument_list|,
name|project
argument_list|)
decl_stmt|;
name|ConfigInfo
name|info
init|=
name|setMaxObjectSize
argument_list|(
literal|"200k"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"204800"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"200k"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|info
operator|=
name|setMaxObjectSize
argument_list|(
name|child
argument_list|,
literal|"100k"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"102400"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"100k"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|maxObjectSizeDoesNotOverrideParentProjectWhenHigher ()
specifier|public
name|void
name|maxObjectSizeDoesNotOverrideParentProjectWhenHigher
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|child
init|=
name|createProject
argument_list|(
name|name
argument_list|(
literal|"child"
argument_list|)
argument_list|,
name|project
argument_list|)
decl_stmt|;
name|ConfigInfo
name|info
init|=
name|setMaxObjectSize
argument_list|(
literal|"100k"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"102400"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"100k"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|info
operator|=
name|setMaxObjectSize
argument_list|(
name|child
argument_list|,
literal|"200k"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"102400"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"200k"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|OVERRIDDEN_BY_PARENT
argument_list|,
name|project
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"receive.maxObjectSizeLimit"
argument_list|,
name|value
operator|=
literal|"200k"
argument_list|)
DECL|method|maxObjectSizeIsInheritedFromGlobalConfig ()
specifier|public
name|void
name|maxObjectSizeIsInheritedFromGlobalConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|child
init|=
name|createProject
argument_list|(
name|name
argument_list|(
literal|"child"
argument_list|)
argument_list|,
name|project
argument_list|)
decl_stmt|;
name|ConfigInfo
name|info
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"204800"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|INHERITED_FROM_GLOBAL
argument_list|)
expr_stmt|;
name|info
operator|=
name|getConfig
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"204800"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|INHERITED_FROM_GLOBAL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"receive.maxObjectSizeLimit"
argument_list|,
name|value
operator|=
literal|"200k"
argument_list|)
DECL|method|maxObjectSizeOverridesGlobalConfigWhenLower ()
specifier|public
name|void
name|maxObjectSizeOverridesGlobalConfigWhenLower
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigInfo
name|info
init|=
name|setMaxObjectSize
argument_list|(
literal|"100k"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"102400"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"100k"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"receive.maxObjectSizeLimit"
argument_list|,
name|value
operator|=
literal|"300k"
argument_list|)
DECL|method|inheritedMaxObjectSizeOverridesGlobalConfigWhenLower ()
specifier|public
name|void
name|inheritedMaxObjectSizeOverridesGlobalConfigWhenLower
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|child
init|=
name|createProject
argument_list|(
name|name
argument_list|(
literal|"child"
argument_list|)
argument_list|,
name|project
argument_list|)
decl_stmt|;
name|ConfigInfo
name|info
init|=
name|setMaxObjectSize
argument_list|(
literal|"200k"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"204800"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"200k"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|info
operator|=
name|setMaxObjectSize
argument_list|(
name|child
argument_list|,
literal|"100k"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"102400"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"100k"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"receive.maxObjectSizeLimit"
argument_list|,
name|value
operator|=
literal|"200k"
argument_list|)
DECL|method|maxObjectSizeDoesNotOverrideGlobalConfigWhenHigher ()
specifier|public
name|void
name|maxObjectSizeDoesNotOverrideGlobalConfigWhenHigher
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|child
init|=
name|createProject
argument_list|(
name|name
argument_list|(
literal|"child"
argument_list|)
argument_list|,
name|project
argument_list|)
decl_stmt|;
name|ConfigInfo
name|info
init|=
name|setMaxObjectSize
argument_list|(
literal|"300k"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"204800"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"300k"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|OVERRIDDEN_BY_GLOBAL
argument_list|)
expr_stmt|;
name|info
operator|=
name|getConfig
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"204800"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|configuredValue
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|maxObjectSizeLimit
operator|.
name|summary
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|OVERRIDDEN_BY_GLOBAL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|invalidMaxObjectSizeIsRejected ()
specifier|public
name|void
name|invalidMaxObjectSizeIsRejected
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"100 foo"
argument_list|)
expr_stmt|;
name|setMaxObjectSize
argument_list|(
literal|"100 foo"
argument_list|)
expr_stmt|;
block|}
DECL|method|setConfig (Project.NameKey name, ConfigInput input)
specifier|private
name|ConfigInfo
name|setConfig
parameter_list|(
name|Project
operator|.
name|NameKey
name|name
parameter_list|,
name|ConfigInput
name|input
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|name
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|config
argument_list|(
name|input
argument_list|)
return|;
block|}
DECL|method|setConfig (ConfigInput input)
specifier|private
name|ConfigInfo
name|setConfig
parameter_list|(
name|ConfigInput
name|input
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|setConfig
argument_list|(
name|project
argument_list|,
name|input
argument_list|)
return|;
block|}
DECL|method|setMaxObjectSize (String value)
specifier|private
name|ConfigInfo
name|setMaxObjectSize
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|setMaxObjectSize
argument_list|(
name|project
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|setMaxObjectSize (Project.NameKey name, String value)
specifier|private
name|ConfigInfo
name|setMaxObjectSize
parameter_list|(
name|Project
operator|.
name|NameKey
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|ConfigInput
name|input
init|=
operator|new
name|ConfigInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|maxObjectSizeLimit
operator|=
name|value
expr_stmt|;
return|return
name|setConfig
argument_list|(
name|name
argument_list|,
name|input
argument_list|)
return|;
block|}
DECL|method|getConfig (Project.NameKey name)
specifier|private
name|ConfigInfo
name|getConfig
parameter_list|(
name|Project
operator|.
name|NameKey
name|name
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|name
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|config
argument_list|()
return|;
block|}
DECL|method|getConfig ()
specifier|private
name|ConfigInfo
name|getConfig
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getConfig
argument_list|(
name|project
argument_list|)
return|;
block|}
block|}
end_class

end_unit

