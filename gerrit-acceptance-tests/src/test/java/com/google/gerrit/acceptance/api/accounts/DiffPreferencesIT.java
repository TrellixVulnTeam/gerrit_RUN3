begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.accounts
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|accounts
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ConfigUtil
operator|.
name|skipField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|DiffPreferencesInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|DiffPreferencesInfo
operator|.
name|Whitespace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Theme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|DiffPreferencesIT
specifier|public
class|class
name|DiffPreferencesIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Test
DECL|method|getDiffPreferences ()
specifier|public
name|void
name|getDiffPreferences
parameter_list|()
throws|throws
name|Exception
block|{
name|DiffPreferencesInfo
name|d
init|=
name|DiffPreferencesInfo
operator|.
name|defaults
argument_list|()
decl_stmt|;
name|DiffPreferencesInfo
name|o
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getDiffPreferences
argument_list|()
decl_stmt|;
name|assertPrefs
argument_list|(
name|o
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setDiffPreferences ()
specifier|public
name|void
name|setDiffPreferences
parameter_list|()
throws|throws
name|Exception
block|{
name|DiffPreferencesInfo
name|i
init|=
name|DiffPreferencesInfo
operator|.
name|defaults
argument_list|()
decl_stmt|;
comment|// change all default values
name|i
operator|.
name|context
operator|*=
operator|-
literal|1
expr_stmt|;
name|i
operator|.
name|tabSize
operator|*=
operator|-
literal|1
expr_stmt|;
name|i
operator|.
name|lineLength
operator|*=
operator|-
literal|1
expr_stmt|;
name|i
operator|.
name|cursorBlinkRate
operator|=
literal|500
expr_stmt|;
name|i
operator|.
name|theme
operator|=
name|Theme
operator|.
name|MIDNIGHT
expr_stmt|;
name|i
operator|.
name|ignoreWhitespace
operator|=
name|Whitespace
operator|.
name|IGNORE_ALL
expr_stmt|;
name|i
operator|.
name|expandAllComments
operator|^=
literal|true
expr_stmt|;
name|i
operator|.
name|intralineDifference
operator|^=
literal|true
expr_stmt|;
name|i
operator|.
name|manualReview
operator|^=
literal|true
expr_stmt|;
name|i
operator|.
name|retainHeader
operator|^=
literal|true
expr_stmt|;
name|i
operator|.
name|showLineEndings
operator|^=
literal|true
expr_stmt|;
name|i
operator|.
name|showTabs
operator|^=
literal|true
expr_stmt|;
name|i
operator|.
name|showWhitespaceErrors
operator|^=
literal|true
expr_stmt|;
name|i
operator|.
name|skipDeleted
operator|^=
literal|true
expr_stmt|;
name|i
operator|.
name|skipUnchanged
operator|^=
literal|true
expr_stmt|;
name|i
operator|.
name|skipUncommented
operator|^=
literal|true
expr_stmt|;
name|i
operator|.
name|syntaxHighlighting
operator|^=
literal|true
expr_stmt|;
name|i
operator|.
name|hideTopMenu
operator|^=
literal|true
expr_stmt|;
name|i
operator|.
name|autoHideDiffTableHeader
operator|^=
literal|true
expr_stmt|;
name|i
operator|.
name|hideLineNumbers
operator|^=
literal|true
expr_stmt|;
name|i
operator|.
name|renderEntireFile
operator|^=
literal|true
expr_stmt|;
name|i
operator|.
name|hideEmptyPane
operator|^=
literal|true
expr_stmt|;
name|i
operator|.
name|matchBrackets
operator|^=
literal|true
expr_stmt|;
name|DiffPreferencesInfo
name|o
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setDiffPreferences
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertPrefs
argument_list|(
name|o
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// Partially fill input record
name|i
operator|=
operator|new
name|DiffPreferencesInfo
argument_list|()
expr_stmt|;
name|i
operator|.
name|tabSize
operator|=
literal|42
expr_stmt|;
name|DiffPreferencesInfo
name|a
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setDiffPreferences
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertPrefs
argument_list|(
name|a
argument_list|,
name|o
argument_list|,
literal|"tabSize"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|tabSize
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|42
argument_list|)
expr_stmt|;
block|}
DECL|method|assertPrefs (DiffPreferencesInfo actual, DiffPreferencesInfo expected, String... fieldsToExclude)
specifier|private
specifier|static
name|void
name|assertPrefs
parameter_list|(
name|DiffPreferencesInfo
name|actual
parameter_list|,
name|DiffPreferencesInfo
name|expected
parameter_list|,
name|String
modifier|...
name|fieldsToExclude
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|exludedFields
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|fieldsToExclude
argument_list|)
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|actual
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|exludedFields
operator|.
name|contains
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|skipField
argument_list|(
name|field
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Object
name|actualVal
init|=
name|field
operator|.
name|get
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|Object
name|expectedVal
init|=
name|field
operator|.
name|get
argument_list|(
name|expected
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
condition|)
block|{
if|if
condition|(
name|actualVal
operator|==
literal|null
condition|)
block|{
name|actualVal
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|expectedVal
operator|==
literal|null
condition|)
block|{
name|expectedVal
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|assertWithMessage
argument_list|(
literal|"field "
operator|+
name|field
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|that
argument_list|(
name|actualVal
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedVal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

