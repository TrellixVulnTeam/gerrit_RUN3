begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|FILE_NAME
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|SUBJECT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
operator|.
name|CC
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
operator|.
name|REVIEWER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|CHANGE_OWNER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
operator|.
name|blockLabel
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
operator|.
name|category
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
operator|.
name|value
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|GerritServerTests
operator|.
name|isNoteDbTestEnabled
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|AddReviewerInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RebaseInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RevisionApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ApprovalInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeMessageInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GitPerson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|LabelInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|RevisionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|ChangeIT
specifier|public
class|class
name|ChangeIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Test
DECL|method|get ()
specifier|public
name|void
name|get
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|ChangeInfo
name|c
init|=
name|info
argument_list|(
name|triplet
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|triplet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|project
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|branch
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"master"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|subject
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"test commit"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|mergeable
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|created
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
operator|.
name|updated
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|owner
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|owner
operator|.
name|name
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|owner
operator|.
name|email
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|owner
operator|.
name|username
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|owner
operator|.
name|avatars
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getAmbiguous ()
specifier|public
name|void
name|getAmbiguous
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r1
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|BranchInput
name|b
init|=
operator|new
name|BranchInput
argument_list|()
decl_stmt|;
name|b
operator|.
name|revision
operator|=
name|repo
argument_list|()
operator|.
name|getRef
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|getObjectId
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"other"
argument_list|)
operator|.
name|create
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
name|PushOneCommit
operator|.
name|FILE_CONTENT
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|push2
operator|.
name|to
argument_list|(
literal|"refs/for/other"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Multiple changes found for "
operator|+
name|changeId
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|abandon ()
specifier|public
name|void
name|abandon
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|ABANDONED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|message
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"abandoned"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|restore ()
specifier|public
name|void
name|restore
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|ABANDONED
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|restore
argument_list|()
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|message
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"restored"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revert ()
specifier|public
name|void
name|revert
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|ChangeInfo
name|revertChange
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// expected messages on source change:
comment|// 1. Uploaded patch set 1.
comment|// 2. Patch Set 1: Code-Review+2
comment|// 3. Change has been successfully merged by Administrator
comment|// 4. Patch Set 1: Reverted
name|List
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|sourceMessages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|messages
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sourceMessages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|String
name|expectedMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Patch Set 1: Reverted\n\n"
operator|+
literal|"This patchset was reverted in change: %s"
argument_list|,
name|revertChange
operator|.
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sourceMessages
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMessage
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChange
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChange
operator|.
name|messages
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|createEmptyCommit
operator|=
literal|false
argument_list|)
DECL|method|revertInitialCommit ()
specifier|public
name|void
name|revertInitialCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Cannot revert initial commit"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebase ()
specifier|public
name|void
name|rebase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create two changes both with the same parent
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~1"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
comment|// Approve and submit the first change
name|RevisionApi
name|revision
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
decl_stmt|;
name|revision
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|revision
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// Rebase the second change
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|rebase
argument_list|()
expr_stmt|;
comment|// Second change should have 2 patch sets
name|assertThat
argument_list|(
name|r2
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// ...and the committer should be correct
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|ListChangesOption
operator|.
name|CURRENT_REVISION
argument_list|,
name|ListChangesOption
operator|.
name|CURRENT_COMMIT
argument_list|)
argument_list|)
decl_stmt|;
name|GitPerson
name|committer
init|=
name|info
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
operator|.
name|committer
decl_stmt|;
name|assertThat
argument_list|(
name|committer
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|fullName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|committer
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|email
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|voteOnBehalfOf ()
specifier|public
name|void
name|voteOnBehalfOf
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|LabelType
name|codeReviewType
init|=
name|Util
operator|.
name|codeReview
argument_list|()
decl_stmt|;
name|String
name|forCodeReviewAs
init|=
name|Permission
operator|.
name|forLabelAs
argument_list|(
name|codeReviewType
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|heads
init|=
literal|"refs/heads/*"
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|owner
init|=
name|SystemGroupBackend
operator|.
name|getGroup
argument_list|(
name|CHANGE_OWNER
argument_list|)
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|cfg
argument_list|,
name|forCodeReviewAs
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
name|owner
argument_list|,
name|heads
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|RevisionApi
name|revision
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
decl_stmt|;
name|ReviewInput
name|in
init|=
name|ReviewInput
operator|.
name|recommend
argument_list|()
decl_stmt|;
name|in
operator|.
name|onBehalfOf
operator|=
name|user
operator|.
name|id
operator|.
name|toString
argument_list|()
expr_stmt|;
name|revision
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|LabelInfo
name|codeReview
init|=
name|c
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|codeReview
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ApprovalInfo
name|approval
init|=
name|codeReview
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ResourceConflictException
operator|.
name|class
argument_list|)
DECL|method|rebaseUpToDateChange ()
specifier|public
name|void
name|rebaseUpToDateChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseConflict ()
specifier|public
name|void
name|rebaseConflict
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"other content"
argument_list|,
literal|"If09d8782c1e59dd0b33de2b1ec3595d69cc10ad5"
argument_list|)
decl_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseChangeBase ()
specifier|public
name|void
name|rebaseChangeBase
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r3
init|=
name|createChange
argument_list|()
decl_stmt|;
name|RebaseInput
name|ri
init|=
operator|new
name|RebaseInput
argument_list|()
decl_stmt|;
comment|// rebase r3 directly onto master (break dep. towards r2)
name|ri
operator|.
name|base
operator|=
literal|""
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r3
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r3
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|(
name|ri
argument_list|)
expr_stmt|;
name|PatchSet
name|ps3
init|=
name|r3
operator|.
name|getPatchSet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ps3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// rebase r2 onto r3 (referenced by ref)
name|ri
operator|.
name|base
operator|=
name|ps3
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|(
name|ri
argument_list|)
expr_stmt|;
name|PatchSet
name|ps2
init|=
name|r2
operator|.
name|getPatchSet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ps2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// rebase r1 onto r2 (referenced by commit)
name|ri
operator|.
name|base
operator|=
name|ps2
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|(
name|ri
argument_list|)
expr_stmt|;
name|PatchSet
name|ps1
init|=
name|r1
operator|.
name|getPatchSet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ps1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// rebase r1 onto r3 (referenced by change number)
name|ri
operator|.
name|base
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|r3
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|ps1
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|(
name|ri
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r1
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ResourceConflictException
operator|.
name|class
argument_list|)
DECL|method|rebaseChangeBaseRecursion ()
specifier|public
name|void
name|rebaseChangeBaseRecursion
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|RebaseInput
name|ri
init|=
operator|new
name|RebaseInput
argument_list|()
decl_stmt|;
name|ri
operator|.
name|base
operator|=
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|(
name|ri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addReviewer ()
specifier|public
name|void
name|addReviewer
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// When notedb is enabled adding a reviewer records that user as reviewer
comment|// in notedb. When notedb is disabled adding a reviewer results in a dummy 0
comment|// approval on the change which is treated as CC when the ChangeInfo is
comment|// created.
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|reviewers
init|=
name|isNoteDbTestEnabled
argument_list|()
condition|?
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
else|:
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|CC
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addReviewerToClosedChange ()
specifier|public
name|void
name|addReviewerToClosedChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|reviewers
init|=
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|reviewers
argument_list|)
operator|.
name|doesNotContainKey
argument_list|(
name|CC
argument_list|)
expr_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|c
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|reviewers
operator|=
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
expr_stmt|;
if|if
condition|(
name|isNoteDbTestEnabled
argument_list|()
condition|)
block|{
comment|// When notedb is enabled adding a reviewer records that user as reviewer
comment|// in notedb.
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|AccountInfo
argument_list|>
name|reviewerIt
init|=
name|reviewers
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|reviewerIt
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewerIt
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|reviewers
argument_list|)
operator|.
name|doesNotContainKey
argument_list|(
name|CC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// When notedb is disabled adding a reviewer results in a dummy 0 approval
comment|// on the change which is treated as CC when the ChangeInfo is created.
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|ccs
init|=
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|CC
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ccs
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ccs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|listVotes ()
specifier|public
name|void
name|listVotes
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|m
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|votes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|m
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
argument_list|)
operator|.
name|containsEntry
argument_list|(
literal|"Code-Review"
argument_list|,
operator|new
name|Short
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|dislike
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|votes
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|m
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
argument_list|)
operator|.
name|containsEntry
argument_list|(
literal|"Code-Review"
argument_list|,
operator|new
name|Short
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteVote ()
specifier|public
name|void
name|deleteVote
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|deleteVote
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|m
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|votes
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNoteDbTestEnabled
argument_list|()
condition|)
block|{
comment|// When notedb is enabled each reviewer is explicitly recorded in the
comment|// notedb and this record stays even when all votes of that user have been
comment|// deleted, hence there is no dummy 0 approval left when a vote is
comment|// deleted.
comment|// TODO(dborowitz): Support modifying other users' labels in notedb
comment|// format.
comment|//assertThat(m).isEmpty();
block|}
else|else
block|{
comment|// When notedb is disabled there is a dummy 0 approval on the change so
comment|// that the user is still returned as CC when all votes of that user have
comment|// been deleted.
name|assertThat
argument_list|(
name|m
argument_list|)
operator|.
name|containsEntry
argument_list|(
literal|"Code-Review"
argument_list|,
operator|new
name|Short
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ChangeMessageInfo
name|message
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|c
operator|.
name|messages
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|author
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Removed Code-Review+1 by User<user@example.com>\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isNoteDbTestEnabled
argument_list|()
condition|)
block|{
comment|// When notedb is enabled each reviewer is explicitly recorded in the
comment|// notedb and this record stays even when all votes of that user have been
comment|// deleted.
name|assertThat
argument_list|(
name|getReviewers
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// When notedb is disabled users that have only dummy 0 approvals on the
comment|// change are returned as CC and not as REVIEWER.
name|assertThat
argument_list|(
name|getReviewers
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getReviewers
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|CC
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|deleteVoteNotPermitted ()
specifier|public
name|void
name|deleteVoteNotPermitted
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"delete not permitted"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|deleteVote
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEmptyChange ()
specifier|public
name|void
name|createEmptyChange
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInfo
name|in
init|=
operator|new
name|ChangeInfo
argument_list|()
decl_stmt|;
name|in
operator|.
name|branch
operator|=
name|Constants
operator|.
name|MASTER
expr_stmt|;
name|in
operator|.
name|subject
operator|=
literal|"Create a change from the API"
expr_stmt|;
name|in
operator|.
name|project
operator|=
name|project
operator|.
name|get
argument_list|()
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|project
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|project
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|branch
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|branch
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|subject
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|subject
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangesNoQuery ()
specifier|public
name|void
name|queryChangesNoQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isAtLeast
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ChangeInfo
name|info
init|=
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|forChangeStatus
argument_list|(
name|info
operator|.
name|status
argument_list|)
operator|.
name|isOpen
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|info
operator|.
name|_number
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|ids
argument_list|)
operator|.
name|contains
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangesNoResults ()
specifier|public
name|void
name|queryChangesNoResults
parameter_list|()
throws|throws
name|Exception
block|{
name|createChange
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|(
literal|"message:test"
argument_list|)
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|(
literal|"message:{"
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"fhqwhgads}"
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChanges ()
specifier|public
name|void
name|queryChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|createChange
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
init|=
name|query
argument_list|(
literal|"project:{"
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"} "
operator|+
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|results
argument_list|)
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangesLimit ()
specifier|public
name|void
name|queryChangesLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|createChange
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|withLimit
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|results
argument_list|)
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangesStart ()
specifier|public
name|void
name|queryChangesStart
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|createChange
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
literal|"project:{"
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"}"
argument_list|)
operator|.
name|withStart
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|results
argument_list|)
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangesNoOptions ()
specifier|public
name|void
name|queryChangesNoOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeInfo
name|result
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|query
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|labels
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|messages
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|revisions
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|actions
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangesOptions ()
specifier|public
name|void
name|queryChangesOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeInfo
name|result
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|withOptions
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|ListChangesOption
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|result
operator|.
name|labels
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|actions
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|RevisionInfo
name|rev
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|result
operator|.
name|revisions
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rev
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rev
operator|.
name|created
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rev
operator|.
name|uploader
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rev
operator|.
name|ref
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rev
operator|.
name|actions
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangesOwnerWithDifferentUsers ()
specifier|public
name|void
name|queryChangesOwnerWithDifferentUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|query
argument_list|(
literal|"project:{"
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"} owner:self"
argument_list|)
argument_list|)
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|(
literal|"owner:self"
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkReviewedFlagBeforeAndAfterReview ()
specifier|public
name|void
name|checkReviewedFlagBeforeAndAfterReview
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewed
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewed
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|topic ()
specifier|public
name|void
name|topic
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
literal|"mytopic"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"mytopic"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|check ()
specifier|public
name|void
name|check
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|problems
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|ListChangesOption
operator|.
name|CHECK
argument_list|)
argument_list|)
operator|.
name|problems
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitFooters ()
specifier|public
name|void
name|commitFooters
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelType
name|verified
init|=
name|category
argument_list|(
literal|"Verified"
argument_list|,
name|value
argument_list|(
literal|1
argument_list|,
literal|"Failed"
argument_list|)
argument_list|,
name|value
argument_list|(
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|,
name|value
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Passes"
argument_list|)
argument_list|)
decl_stmt|;
name|LabelType
name|custom1
init|=
name|category
argument_list|(
literal|"Custom1"
argument_list|,
name|value
argument_list|(
literal|1
argument_list|,
literal|"Positive"
argument_list|)
argument_list|,
name|value
argument_list|(
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|,
name|value
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Negative"
argument_list|)
argument_list|)
decl_stmt|;
name|LabelType
name|custom2
init|=
name|category
argument_list|(
literal|"Custom2"
argument_list|,
name|value
argument_list|(
literal|1
argument_list|,
literal|"Positive"
argument_list|)
argument_list|,
name|value
argument_list|(
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|,
name|value
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Negative"
argument_list|)
argument_list|)
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|,
name|verified
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|custom1
operator|.
name|getName
argument_list|()
argument_list|,
name|verified
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|custom2
operator|.
name|getName
argument_list|()
argument_list|,
name|verified
argument_list|)
expr_stmt|;
name|String
name|heads
init|=
literal|"refs/heads/*"
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|anon
init|=
name|SystemGroupBackend
operator|.
name|getGroup
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|cfg
argument_list|,
name|Permission
operator|.
name|forLabel
argument_list|(
literal|"Verified"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
name|anon
argument_list|,
name|heads
argument_list|)
expr_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|cfg
argument_list|,
name|Permission
operator|.
name|forLabel
argument_list|(
literal|"Custom1"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
name|anon
argument_list|,
name|heads
argument_list|)
expr_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|cfg
argument_list|,
name|Permission
operator|.
name|forLabel
argument_list|(
literal|"Custom2"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
name|anon
argument_list|,
name|heads
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|r1
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
literal|"new content"
argument_list|,
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r2
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ReviewInput
name|in
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|in
operator|.
name|label
argument_list|(
literal|"Verified"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|in
operator|.
name|label
argument_list|(
literal|"Custom1"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|in
operator|.
name|label
argument_list|(
literal|"Custom2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|EnumSet
argument_list|<
name|ListChangesOption
argument_list|>
name|options
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|ListChangesOption
operator|.
name|ALL_REVISIONS
argument_list|,
name|ListChangesOption
operator|.
name|COMMIT_FOOTERS
argument_list|)
decl_stmt|;
name|ChangeInfo
name|actual
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|revisions
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// No footers except on latest patch set.
name|assertThat
argument_list|(
name|actual
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|commitWithFooters
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|footers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|actual
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|commitWithFooters
operator|.
name|split
argument_list|(
literal|"\\n"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// remove subject + blank line
name|footers
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|footers
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedFooters
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Change-Id: "
operator|+
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"Reviewed-on: "
operator|+
name|canonicalWebUrl
operator|.
name|get
argument_list|()
operator|+
name|r2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Reviewed-by: Administrator<admin@example.com>"
argument_list|,
literal|"Custom2: Administrator<admin@example.com>"
argument_list|,
literal|"Tested-by: Administrator<admin@example.com>"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|footers
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedFooters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|defaultSearchDoesNotTouchDatabase ()
specifier|public
name|void
name|defaultSearchDoesNotTouchDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|createChange
argument_list|()
expr_stmt|;
name|setApiUserAnonymous
argument_list|()
expr_stmt|;
comment|// Identified user may async get stars from DB.
name|atrScope
operator|.
name|disableDb
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|withQuery
argument_list|(
literal|"project:{"
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"} (status:open OR status:closed)"
argument_list|)
comment|// Options should match defaults in AccountDashboardScreen.
operator|.
name|withOption
argument_list|(
name|ListChangesOption
operator|.
name|LABELS
argument_list|)
operator|.
name|withOption
argument_list|(
name|ListChangesOption
operator|.
name|DETAILED_ACCOUNTS
argument_list|)
operator|.
name|withOption
argument_list|(
name|ListChangesOption
operator|.
name|REVIEWED
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|votable ()
specifier|public
name|void
name|votable
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|user
operator|.
name|username
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|get
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|ListChangesOption
operator|.
name|DETAILED_LABELS
argument_list|)
argument_list|)
decl_stmt|;
name|LabelInfo
name|codeReview
init|=
name|c
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|codeReview
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ApprovalInfo
name|approval
init|=
name|codeReview
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|blockLabel
argument_list|(
name|cfg
argument_list|,
literal|"Code-Review"
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|c
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|get
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|ListChangesOption
operator|.
name|DETAILED_LABELS
argument_list|)
argument_list|)
expr_stmt|;
name|codeReview
operator|=
name|c
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|codeReview
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|approval
operator|=
name|codeReview
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|value
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushCertificates ()
specifier|public
name|void
name|pushCertificates
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|amendChange
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|ListChangesOption
operator|.
name|ALL_REVISIONS
argument_list|,
name|ListChangesOption
operator|.
name|PUSH_CERTIFICATES
argument_list|)
argument_list|)
decl_stmt|;
name|RevisionInfo
name|rev1
init|=
name|info
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rev1
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rev1
operator|.
name|pushCertificate
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rev1
operator|.
name|pushCertificate
operator|.
name|certificate
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rev1
operator|.
name|pushCertificate
operator|.
name|key
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|RevisionInfo
name|rev2
init|=
name|info
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rev2
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rev2
operator|.
name|pushCertificate
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rev2
operator|.
name|pushCertificate
operator|.
name|certificate
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rev2
operator|.
name|pushCertificate
operator|.
name|key
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|anonymousRestApi ()
specifier|public
name|void
name|anonymousRestApi
parameter_list|()
throws|throws
name|Exception
block|{
name|setApiUserAnonymous
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|info
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|info
operator|.
name|_number
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getReviewers ( Collection<AccountInfo> r)
specifier|private
specifier|static
name|Iterable
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|getReviewers
parameter_list|(
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|r
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|r
argument_list|,
operator|new
name|Function
argument_list|<
name|AccountInfo
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Account
operator|.
name|Id
name|apply
parameter_list|(
name|AccountInfo
name|account
parameter_list|)
block|{
return|return
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|account
operator|.
name|_accountId
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

