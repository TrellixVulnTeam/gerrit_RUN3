begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.edit
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|edit
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
operator|.
name|SC_NOT_FOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
operator|.
name|SC_NO_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
operator|.
name|SC_OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|RestSession
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ApprovalInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|EditInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BinaryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeEdits
operator|.
name|EditMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeEdits
operator|.
name|Post
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeEdits
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|FileContentUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|ChangeEdit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|ChangeEditModifier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|ChangeEditUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|UnchangedCommitMessageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|InvalidChangeOperationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|Git
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeUtils
operator|.
name|MillisProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_class
DECL|class|ChangeEditIT
specifier|public
class|class
name|ChangeEditIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|FILE_NAME
specifier|private
specifier|final
specifier|static
name|String
name|FILE_NAME
init|=
literal|"foo"
decl_stmt|;
DECL|field|FILE_NAME2
specifier|private
specifier|final
specifier|static
name|String
name|FILE_NAME2
init|=
literal|"foo2"
decl_stmt|;
DECL|field|CONTENT_OLD
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|CONTENT_OLD
init|=
literal|"bar"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
DECL|field|CONTENT_NEW
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|CONTENT_NEW
init|=
literal|"baz"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
DECL|field|CONTENT_NEW2
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|CONTENT_NEW2
init|=
literal|"qux"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
annotation|@
name|Inject
DECL|field|reviewDbProvider
specifier|private
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|reviewDbProvider
decl_stmt|;
annotation|@
name|Inject
DECL|field|editUtil
name|ChangeEditUtil
name|editUtil
decl_stmt|;
annotation|@
name|Inject
DECL|field|modifier
specifier|private
name|ChangeEditModifier
name|modifier
decl_stmt|;
annotation|@
name|Inject
DECL|field|fileUtil
specifier|private
name|FileContentUtil
name|fileUtil
decl_stmt|;
DECL|field|change
specifier|private
name|Change
name|change
decl_stmt|;
DECL|field|changeId
specifier|private
name|String
name|changeId
decl_stmt|;
DECL|field|change2
specifier|private
name|Change
name|change2
decl_stmt|;
DECL|field|ps
specifier|private
name|PatchSet
name|ps
decl_stmt|;
DECL|field|ps2
specifier|private
name|PatchSet
name|ps2
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|db
operator|=
name|reviewDbProvider
operator|.
name|open
argument_list|()
expr_stmt|;
name|changeId
operator|=
name|newChange
argument_list|(
name|git
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|=
name|getCurrentPatchSet
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|amendChange
argument_list|(
name|git
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|change
operator|=
name|getChange
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|String
name|changeId2
init|=
name|newChange2
argument_list|(
name|git
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
decl_stmt|;
name|change2
operator|=
name|getChange
argument_list|(
name|changeId2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change2
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|ps2
operator|=
name|getCurrentPatchSet
argument_list|(
name|changeId2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps2
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
specifier|final
name|long
name|clockStepMs
init|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|clockMs
init|=
operator|new
name|AtomicLong
argument_list|(
operator|new
name|DateTime
argument_list|(
literal|2009
argument_list|,
literal|9
argument_list|,
literal|30
argument_list|,
literal|17
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|getMillis
argument_list|()
argument_list|)
decl_stmt|;
name|DateTimeUtils
operator|.
name|setCurrentMillisProvider
argument_list|(
operator|new
name|MillisProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getMillis
parameter_list|()
block|{
return|return
name|clockMs
operator|.
name|getAndAdd
argument_list|(
name|clockStepMs
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|DateTimeUtils
operator|.
name|setCurrentMillisSystem
argument_list|()
expr_stmt|;
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteEdit ()
specifier|public
name|void
name|deleteEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|modifyFile
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|editUtil
operator|.
name|delete
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishEdit ()
specifier|public
name|void
name|publishEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|getCurrentPatchSet
argument_list|(
name|changeId
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|modifyFile
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|editUtil
operator|.
name|publish
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishEditRest ()
specifier|public
name|void
name|publishEditRest
parameter_list|()
throws|throws
name|Exception
block|{
name|PatchSet
name|oldCurrentPatchSet
init|=
name|getCurrentPatchSet
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|oldCurrentPatchSet
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|modifyFile
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|post
argument_list|(
name|urlPublish
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
operator|.
name|isPresent
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|PatchSet
name|newCurrentPatchSet
init|=
name|getCurrentPatchSet
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newCurrentPatchSet
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldCurrentPatchSet
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteEditRest ()
specifier|public
name|void
name|deleteEditRest
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|modifyFile
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|delete
argument_list|(
name|urlEdit
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
operator|.
name|isPresent
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseEdit ()
specifier|public
name|void
name|rebaseEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|modifyFile
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|ChangeEdit
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|PatchSet
name|current
init|=
name|getCurrentPatchSet
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
operator|.
name|getBasePatchSet
argument_list|()
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|current
operator|.
name|getPatchSetId
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Date
name|beforeRebase
init|=
name|edit
operator|.
name|getEditCommit
argument_list|()
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
decl_stmt|;
name|modifier
operator|.
name|rebaseEdit
argument_list|(
name|edit
argument_list|,
name|current
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertByteArray
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|assertByteArray
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME2
argument_list|)
argument_list|,
name|CONTENT_NEW2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
operator|.
name|getBasePatchSet
argument_list|()
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|current
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|afterRebase
init|=
name|edit
operator|.
name|getEditCommit
argument_list|()
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|beforeRebase
operator|.
name|equals
argument_list|(
name|afterRebase
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseEditRest ()
specifier|public
name|void
name|rebaseEditRest
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|modifyFile
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|ChangeEdit
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|PatchSet
name|current
init|=
name|getCurrentPatchSet
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
operator|.
name|getBasePatchSet
argument_list|()
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|current
operator|.
name|getPatchSetId
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Date
name|beforeRebase
init|=
name|edit
operator|.
name|getEditCommit
argument_list|()
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
decl_stmt|;
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|post
argument_list|(
name|urlRebase
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertByteArray
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|assertByteArray
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME2
argument_list|)
argument_list|,
name|CONTENT_NEW2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
operator|.
name|getBasePatchSet
argument_list|()
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|current
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|afterRebase
init|=
name|edit
operator|.
name|getEditCommit
argument_list|()
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|afterRebase
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|beforeRebase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateExistingFile ()
specifier|public
name|void
name|updateExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|modifyFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertByteArray
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|editUtil
operator|.
name|delete
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
operator|.
name|isPresent
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateMessage ()
specifier|public
name|void
name|updateMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|getCurrentPatchSet
argument_list|(
name|changeId
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
try|try
block|{
name|modifier
operator|.
name|modifyMessage
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getEditCommit
argument_list|()
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnchangedCommitMessageException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnchangedCommitMessageException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"New commit message cannot be same as existing commit message"
argument_list|)
expr_stmt|;
block|}
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"New commit message\n\nChange-Id: %s"
argument_list|,
name|change
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|modifyMessage
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|msg
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getEditCommit
argument_list|()
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|editUtil
operator|.
name|publish
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|get
argument_list|(
name|changeId
argument_list|,
name|ListChangesOption
operator|.
name|CURRENT_COMMIT
argument_list|,
name|ListChangesOption
operator|.
name|CURRENT_REVISION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateMessageRest ()
specifier|public
name|void
name|updateMessageRest
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|adminSession
operator|.
name|get
argument_list|(
name|urlEditMessage
argument_list|()
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
name|EditMessage
operator|.
name|Input
name|in
init|=
operator|new
name|EditMessage
operator|.
name|Input
argument_list|()
decl_stmt|;
name|in
operator|.
name|message
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"New commit message\n\nChange-Id: %s"
argument_list|,
name|change
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|adminSession
operator|.
name|put
argument_list|(
name|urlEditMessage
argument_list|()
argument_list|,
name|in
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|get
argument_list|(
name|urlEditMessage
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|adminSession
operator|.
name|get
argument_list|(
name|urlEditMessage
argument_list|()
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_OK
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|r
operator|.
name|getEntityContent
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|StringUtils
operator|.
name|newStringUtf8
argument_list|(
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|content
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|message
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getEditCommit
argument_list|()
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|message
argument_list|)
expr_stmt|;
name|in
operator|.
name|message
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"New commit message2\n\nChange-Id: %s"
argument_list|,
name|change
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|adminSession
operator|.
name|put
argument_list|(
name|urlEditMessage
argument_list|()
argument_list|,
name|in
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getEditCommit
argument_list|()
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|retrieveEdit ()
specifier|public
name|void
name|retrieveEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|get
argument_list|(
name|urlEdit
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|modifyFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|EditInfo
name|info
init|=
name|toEditInfo
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|commit
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|commit
operator|.
name|parents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|editUtil
operator|.
name|delete
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|adminSession
operator|.
name|get
argument_list|(
name|urlEdit
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|retrieveFilesInEdit ()
specifier|public
name|void
name|retrieveFilesInEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|modifyFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|EditInfo
name|info
init|=
name|toEditInfo
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|files
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|info
operator|.
name|files
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"/COMMIT_MSG"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteExistingFile ()
specifier|public
name|void
name|deleteExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|deleteFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
try|try
block|{
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ResourceNotFoundException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|rnfe
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|createEditByDeletingExistingFileRest ()
specifier|public
name|void
name|createEditByDeletingExistingFileRest
parameter_list|()
throws|throws
name|Exception
block|{
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|delete
argument_list|(
name|urlEditFile
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
try|try
block|{
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ResourceNotFoundException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|rnfe
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|deletingNonExistingEditRest ()
specifier|public
name|void
name|deletingNonExistingEditRest
parameter_list|()
throws|throws
name|Exception
block|{
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|delete
argument_list|(
name|urlEdit
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteExistingFileRest ()
specifier|public
name|void
name|deleteExistingFileRest
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|adminSession
operator|.
name|delete
argument_list|(
name|urlEditFile
argument_list|()
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
try|try
block|{
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ResourceNotFoundException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|rnfe
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|restoreDeletedFileInPatchSet ()
specifier|public
name|void
name|restoreDeletedFileInPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change2
argument_list|,
name|ps2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|restoreFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change2
argument_list|)
expr_stmt|;
name|assertByteArray
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_OLD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|restoreDeletedFileInPatchSetRest ()
specifier|public
name|void
name|restoreDeletedFileInPatchSetRest
parameter_list|()
throws|throws
name|Exception
block|{
name|Post
operator|.
name|Input
name|in
init|=
operator|new
name|Post
operator|.
name|Input
argument_list|()
decl_stmt|;
name|in
operator|.
name|restorePath
operator|=
name|FILE_NAME
expr_stmt|;
name|assertThat
argument_list|(
name|adminSession
operator|.
name|post
argument_list|(
name|urlEdit2
argument_list|()
argument_list|,
name|in
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change2
argument_list|)
decl_stmt|;
name|assertByteArray
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_OLD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|amendExistingFile ()
specifier|public
name|void
name|amendExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|modifyFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertByteArray
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|modifyFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertByteArray
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createAndChangeEditInOneRequestRest ()
specifier|public
name|void
name|createAndChangeEditInOneRequestRest
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
operator|.
name|Input
name|in
init|=
operator|new
name|Put
operator|.
name|Input
argument_list|()
decl_stmt|;
name|in
operator|.
name|content
operator|=
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|adminSession
operator|.
name|putRaw
argument_list|(
name|urlEditFile
argument_list|()
argument_list|,
name|in
operator|.
name|content
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertByteArray
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|in
operator|.
name|content
operator|=
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|adminSession
operator|.
name|putRaw
argument_list|(
name|urlEditFile
argument_list|()
argument_list|,
name|in
operator|.
name|content
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertByteArray
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeEditRest ()
specifier|public
name|void
name|changeEditRest
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|Put
operator|.
name|Input
name|in
init|=
operator|new
name|Put
operator|.
name|Input
argument_list|()
decl_stmt|;
name|in
operator|.
name|content
operator|=
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|adminSession
operator|.
name|putRaw
argument_list|(
name|urlEditFile
argument_list|()
argument_list|,
name|in
operator|.
name|content
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertByteArray
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyPutRequest ()
specifier|public
name|void
name|emptyPutRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|adminSession
operator|.
name|put
argument_list|(
name|urlEditFile
argument_list|()
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertByteArray
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
literal|""
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEmptyEditRest ()
specifier|public
name|void
name|createEmptyEditRest
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|adminSession
operator|.
name|post
argument_list|(
name|urlEdit
argument_list|()
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertByteArray
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_OLD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFileContentRest ()
specifier|public
name|void
name|getFileContentRest
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
operator|.
name|Input
name|in
init|=
operator|new
name|Put
operator|.
name|Input
argument_list|()
decl_stmt|;
name|in
operator|.
name|content
operator|=
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|adminSession
operator|.
name|putRaw
argument_list|(
name|urlEditFile
argument_list|()
argument_list|,
name|in
operator|.
name|content
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|modifyFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|get
argument_list|(
name|urlEditFile
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_OK
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|r
operator|.
name|getEntityContent
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|StringUtils
operator|.
name|newStringUtf8
argument_list|(
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|content
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|StringUtils
operator|.
name|newStringUtf8
argument_list|(
name|CONTENT_NEW2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFileContentTypeRest ()
specifier|public
name|void
name|getFileContentTypeRest
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
operator|.
name|Input
name|in
init|=
operator|new
name|Put
operator|.
name|Input
argument_list|()
decl_stmt|;
name|in
operator|.
name|content
operator|=
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|adminSession
operator|.
name|putRaw
argument_list|(
name|urlEditFile
argument_list|()
argument_list|,
name|in
operator|.
name|content
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|get
argument_list|(
name|urlEditFileContentType
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_OK
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"application/octet-stream"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFileNotFoundRest ()
specifier|public
name|void
name|getFileNotFoundRest
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|adminSession
operator|.
name|delete
argument_list|(
name|urlEditFile
argument_list|()
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
try|try
block|{
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ResourceNotFoundException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|rnfe
parameter_list|)
block|{     }
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|get
argument_list|(
name|urlEditFile
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addNewFile ()
specifier|public
name|void
name|addNewFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|modifyFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME2
argument_list|,
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertByteArray
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME2
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addNewFileAndAmend ()
specifier|public
name|void
name|addNewFileAndAmend
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|modifyFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME2
argument_list|,
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertByteArray
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME2
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|modifyFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME2
argument_list|,
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_NEW2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertByteArray
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME2
argument_list|)
argument_list|,
name|CONTENT_NEW2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeNoChanges ()
specifier|public
name|void
name|writeNoChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
try|try
block|{
name|modifier
operator|.
name|modifyFile
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|RestSession
operator|.
name|newRawInput
argument_list|(
name|CONTENT_OLD
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidChangeOperationException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"no changes were made"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|editCommitMessageCopiesLabelScores ()
specifier|public
name|void
name|editCommitMessageCopiesLabelScores
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|cr
init|=
literal|"Code-Review"
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|allProjects
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
name|cr
argument_list|)
operator|.
name|setCopyAllScoresIfNoCodeChange
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|allProjects
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|ReviewInput
name|r
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|r
operator|.
name|labels
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|Short
operator|>
name|of
argument_list|(
name|cr
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|change
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|getCurrentPatchSet
argument_list|(
name|changeId
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|String
name|newSubj
init|=
literal|"New commit message"
decl_stmt|;
name|String
name|newMsg
init|=
name|newSubj
operator|+
literal|"\n\nChange-Id: "
operator|+
name|changeId
operator|+
literal|"\n"
decl_stmt|;
name|assertThat
argument_list|(
name|modifier
operator|.
name|modifyMessage
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|newMsg
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|editUtil
operator|.
name|publish
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|get
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|subject
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|newSubj
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApprovalInfo
argument_list|>
name|approvals
init|=
name|info
operator|.
name|labels
operator|.
name|get
argument_list|(
name|cr
argument_list|)
operator|.
name|all
decl_stmt|;
name|assertThat
argument_list|(
name|approvals
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|newChange (Git git, PersonIdent ident)
specifier|private
name|String
name|newChange
parameter_list|(
name|Git
name|git
parameter_list|,
name|PersonIdent
name|ident
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|ident
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
operator|new
name|String
argument_list|(
name|CONTENT_OLD
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
name|git
argument_list|,
literal|"refs/for/master"
argument_list|)
operator|.
name|getChangeId
argument_list|()
return|;
block|}
DECL|method|amendChange (Git git, PersonIdent ident, String changeId)
specifier|private
name|String
name|amendChange
parameter_list|(
name|Git
name|git
parameter_list|,
name|PersonIdent
name|ident
parameter_list|,
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|ident
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|FILE_NAME2
argument_list|,
operator|new
name|String
argument_list|(
name|CONTENT_NEW2
argument_list|)
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
name|git
argument_list|,
literal|"refs/for/master"
argument_list|)
operator|.
name|getChangeId
argument_list|()
return|;
block|}
DECL|method|newChange2 (Git git, PersonIdent ident)
specifier|private
name|String
name|newChange2
parameter_list|(
name|Git
name|git
parameter_list|,
name|PersonIdent
name|ident
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|ident
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
operator|new
name|String
argument_list|(
name|CONTENT_OLD
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|rm
argument_list|(
name|git
argument_list|,
literal|"refs/for/master"
argument_list|)
operator|.
name|getChangeId
argument_list|()
return|;
block|}
DECL|method|getChange (String changeId)
specifier|private
name|Change
name|getChange
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|byKey
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|changeId
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getCurrentPatchSet (String changeId)
specifier|private
name|PatchSet
name|getCurrentPatchSet
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|getChange
argument_list|(
name|changeId
argument_list|)
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|assertByteArray (BinaryResult result, byte[] expected)
specifier|private
specifier|static
name|void
name|assertByteArray
parameter_list|(
name|BinaryResult
name|result
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|result
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|urlEdit ()
specifier|private
name|String
name|urlEdit
parameter_list|()
block|{
return|return
literal|"/changes/"
operator|+
name|change
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"/edit"
return|;
block|}
DECL|method|urlEdit2 ()
specifier|private
name|String
name|urlEdit2
parameter_list|()
block|{
return|return
literal|"/changes/"
operator|+
name|change2
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"/edit/"
return|;
block|}
DECL|method|urlEditMessage ()
specifier|private
name|String
name|urlEditMessage
parameter_list|()
block|{
return|return
literal|"/changes/"
operator|+
name|change
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"/edit:message"
return|;
block|}
DECL|method|urlEditFile ()
specifier|private
name|String
name|urlEditFile
parameter_list|()
block|{
return|return
name|urlEdit
argument_list|()
operator|+
literal|"/"
operator|+
name|FILE_NAME
return|;
block|}
DECL|method|urlEditFileContentType ()
specifier|private
name|String
name|urlEditFileContentType
parameter_list|()
block|{
return|return
name|urlEdit
argument_list|()
operator|+
literal|"/"
operator|+
name|FILE_NAME
operator|+
literal|"/type"
return|;
block|}
DECL|method|urlGetFiles ()
specifier|private
name|String
name|urlGetFiles
parameter_list|()
block|{
return|return
name|urlEdit
argument_list|()
operator|+
literal|"?list"
return|;
block|}
DECL|method|urlPublish ()
specifier|private
name|String
name|urlPublish
parameter_list|()
block|{
return|return
literal|"/changes/"
operator|+
name|change
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"/edit:publish"
return|;
block|}
DECL|method|urlRebase ()
specifier|private
name|String
name|urlRebase
parameter_list|()
block|{
return|return
literal|"/changes/"
operator|+
name|change
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"/edit:rebase"
return|;
block|}
DECL|method|toEditInfo (boolean files)
specifier|private
name|EditInfo
name|toEditInfo
parameter_list|(
name|boolean
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|get
argument_list|(
name|files
condition|?
name|urlGetFiles
argument_list|()
else|:
name|urlEdit
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_OK
argument_list|)
expr_stmt|;
return|return
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
name|EditInfo
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

