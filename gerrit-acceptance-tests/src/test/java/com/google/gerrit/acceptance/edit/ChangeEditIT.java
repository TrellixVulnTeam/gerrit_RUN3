begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.edit
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|edit
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|getOnlyElement
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|EditInfoSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BinaryResultSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|RawInputUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|AddReviewerInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|PublishChangeEditInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|InheritableBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ApprovalInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|DiffInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|EditInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|FileInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BinaryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeEdits
operator|.
name|EditMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeEdits
operator|.
name|Post
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeEdits
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestTimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|stream
operator|.
name|JsonReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ChangeEditIT
specifier|public
class|class
name|ChangeEditIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|FILE_NAME
init|=
literal|"foo"
decl_stmt|;
DECL|field|FILE_NAME2
specifier|private
specifier|static
specifier|final
name|String
name|FILE_NAME2
init|=
literal|"foo2"
decl_stmt|;
DECL|field|FILE_NAME3
specifier|private
specifier|static
specifier|final
name|String
name|FILE_NAME3
init|=
literal|"foo3"
decl_stmt|;
DECL|field|CONTENT_OLD
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CONTENT_OLD
init|=
literal|"bar"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
DECL|field|CONTENT_NEW
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CONTENT_NEW
init|=
literal|"baz"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
DECL|field|CONTENT_NEW2_STR
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT_NEW2_STR
init|=
literal|"quxÃÃÃÃÂµ"
decl_stmt|;
DECL|field|CONTENT_NEW2
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CONTENT_NEW2
init|=
name|CONTENT_NEW2_STR
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
DECL|field|reviewDbProvider
annotation|@
name|Inject
specifier|private
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|reviewDbProvider
decl_stmt|;
DECL|field|changeId
specifier|private
name|String
name|changeId
decl_stmt|;
DECL|field|changeId2
specifier|private
name|String
name|changeId2
decl_stmt|;
DECL|field|ps
specifier|private
name|PatchSet
name|ps
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setTimeForTesting ()
specifier|public
specifier|static
name|void
name|setTimeForTesting
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|restoreTime ()
specifier|public
specifier|static
name|void
name|restoreTime
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|db
operator|=
name|reviewDbProvider
operator|.
name|open
argument_list|()
expr_stmt|;
name|changeId
operator|=
name|newChange
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|=
name|getCurrentPatchSet
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|amendChange
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|changeId2
operator|=
name|newChange2
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseEditRevision ()
specifier|public
name|void
name|parseEditRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
comment|// check that '0' is parsed as edit revision
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
literal|0
argument_list|)
operator|.
name|comments
argument_list|()
expr_stmt|;
comment|// check that 'edit' is parsed as edit revision
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
literal|"edit"
argument_list|)
operator|.
name|comments
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteEditOfCurrentPatchSet ()
specifier|public
name|void
name|deleteEditOfCurrentPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getEdit
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteEditOfOlderPatchSet ()
specifier|public
name|void
name|deleteEditOfOlderPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryEditFor
argument_list|(
name|changeId2
argument_list|)
expr_stmt|;
name|amendChange
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|changeId2
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getEdit
argument_list|(
name|changeId2
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishEdit ()
specifier|public
name|void
name|publishEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|PublishChangeEditInput
name|publishInput
init|=
operator|new
name|PublishChangeEditInput
argument_list|()
decl_stmt|;
name|publishInput
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|NONE
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|publish
argument_list|(
name|publishInput
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getEdit
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
name|assertChangeMessages
argument_list|(
name|changeId
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"Uploaded patch set 1."
argument_list|,
literal|"Uploaded patch set 2."
argument_list|,
literal|"Patch Set 3: Published edit on patch set 2."
argument_list|)
argument_list|)
expr_stmt|;
comment|// The tag for the publish edit change message should vary according
comment|// to whether the change was WIP at the time of publishing.
name|ChangeInfo
name|info
init|=
name|get
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|tag
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeMessagesUtil
operator|.
name|TAG_UPLOADED_PATCH_SET
argument_list|)
expr_stmt|;
comment|// Move the change to WIP, repeat, and verify.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setWorkInProgress
argument_list|()
expr_stmt|;
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW2
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|publish
argument_list|()
expr_stmt|;
name|info
operator|=
name|get
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|tag
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeMessagesUtil
operator|.
name|TAG_UPLOADED_WIP_PATCH_SET
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishEditRest ()
specifier|public
name|void
name|publishEditRest
parameter_list|()
throws|throws
name|Exception
block|{
name|PatchSet
name|oldCurrentPatchSet
init|=
name|getCurrentPatchSet
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|createArbitraryEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|adminRestSession
operator|.
name|post
argument_list|(
name|urlPublish
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getEdit
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
name|PatchSet
name|newCurrentPatchSet
init|=
name|getCurrentPatchSet
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newCurrentPatchSet
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldCurrentPatchSet
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertChangeMessages
argument_list|(
name|changeId
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"Uploaded patch set 1."
argument_list|,
literal|"Uploaded patch set 2."
argument_list|,
literal|"Patch Set 3: Published edit on patch set 2."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishEditNotifyRest ()
specifier|public
name|void
name|publishEditNotifyRest
parameter_list|()
throws|throws
name|Exception
block|{
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|createArbitraryEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|PublishChangeEditInput
name|input
init|=
operator|new
name|PublishChangeEditInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|NONE
expr_stmt|;
name|adminRestSession
operator|.
name|post
argument_list|(
name|urlPublish
argument_list|(
name|changeId
argument_list|)
argument_list|,
name|input
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishEditWithDefaultNotify ()
specifier|public
name|void
name|publishEditWithDefaultNotify
parameter_list|()
throws|throws
name|Exception
block|{
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|createArbitraryEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|publish
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteEditRest ()
specifier|public
name|void
name|deleteEditRest
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|adminRestSession
operator|.
name|delete
argument_list|(
name|urlEdit
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getEdit
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishEditRestWithoutCLA ()
specifier|public
name|void
name|publishEditRestWithoutCLA
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|setUseContributorAgreements
argument_list|(
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|adminRestSession
operator|.
name|post
argument_list|(
name|urlPublish
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|assertForbidden
argument_list|()
expr_stmt|;
name|setUseContributorAgreements
argument_list|(
name|InheritableBoolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|adminRestSession
operator|.
name|post
argument_list|(
name|urlPublish
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseEdit ()
specifier|public
name|void
name|rebaseEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|PatchSet
name|previousPatchSet
init|=
name|getCurrentPatchSet
argument_list|(
name|changeId2
argument_list|)
decl_stmt|;
name|createEmptyEditFor
argument_list|(
name|changeId2
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|amendChange
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|changeId2
argument_list|)
expr_stmt|;
name|PatchSet
name|currentPatchSet
init|=
name|getCurrentPatchSet
argument_list|(
name|changeId2
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|EditInfo
argument_list|>
name|originalEdit
init|=
name|getEdit
argument_list|(
name|changeId2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|originalEdit
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|baseRevision
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|previousPatchSet
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Timestamp
name|beforeRebase
init|=
name|originalEdit
operator|.
name|get
argument_list|()
operator|.
name|commit
operator|.
name|committer
operator|.
name|date
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|rebase
argument_list|()
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId2
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId2
argument_list|,
name|FILE_NAME2
argument_list|)
argument_list|,
name|CONTENT_NEW2
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|EditInfo
argument_list|>
name|rebasedEdit
init|=
name|getEdit
argument_list|(
name|changeId2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rebasedEdit
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|baseRevision
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentPatchSet
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rebasedEdit
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|commit
argument_list|()
operator|.
name|committer
argument_list|()
operator|.
name|creationDate
argument_list|()
operator|.
name|isNotEqualTo
argument_list|(
name|beforeRebase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseEditRest ()
specifier|public
name|void
name|rebaseEditRest
parameter_list|()
throws|throws
name|Exception
block|{
name|PatchSet
name|previousPatchSet
init|=
name|getCurrentPatchSet
argument_list|(
name|changeId2
argument_list|)
decl_stmt|;
name|createEmptyEditFor
argument_list|(
name|changeId2
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|amendChange
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|changeId2
argument_list|)
expr_stmt|;
name|PatchSet
name|currentPatchSet
init|=
name|getCurrentPatchSet
argument_list|(
name|changeId2
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|EditInfo
argument_list|>
name|originalEdit
init|=
name|getEdit
argument_list|(
name|changeId2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|originalEdit
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|baseRevision
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|previousPatchSet
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Timestamp
name|beforeRebase
init|=
name|originalEdit
operator|.
name|get
argument_list|()
operator|.
name|commit
operator|.
name|committer
operator|.
name|date
decl_stmt|;
name|adminRestSession
operator|.
name|post
argument_list|(
name|urlRebase
argument_list|(
name|changeId2
argument_list|)
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId2
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId2
argument_list|,
name|FILE_NAME2
argument_list|)
argument_list|,
name|CONTENT_NEW2
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|EditInfo
argument_list|>
name|rebasedEdit
init|=
name|getEdit
argument_list|(
name|changeId2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rebasedEdit
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|baseRevision
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentPatchSet
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rebasedEdit
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|commit
argument_list|()
operator|.
name|committer
argument_list|()
operator|.
name|creationDate
argument_list|()
operator|.
name|isNotEqualTo
argument_list|(
name|beforeRebase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseEditWithConflictsRest_Conflict ()
specifier|public
name|void
name|rebaseEditWithConflictsRest_Conflict
parameter_list|()
throws|throws
name|Exception
block|{
name|PatchSet
name|currentPatchSet
init|=
name|getCurrentPatchSet
argument_list|(
name|changeId2
argument_list|)
decl_stmt|;
name|createEmptyEditFor
argument_list|(
name|changeId2
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|EditInfo
argument_list|>
name|edit
init|=
name|getEdit
argument_list|(
name|changeId2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|baseRevision
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentPatchSet
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
operator|new
name|String
argument_list|(
name|CONTENT_NEW2
argument_list|,
name|UTF_8
argument_list|)
argument_list|,
name|changeId2
argument_list|)
decl_stmt|;
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|adminRestSession
operator|.
name|post
argument_list|(
name|urlRebase
argument_list|(
name|changeId2
argument_list|)
argument_list|)
operator|.
name|assertConflict
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateExistingFile ()
specifier|public
name|void
name|updateExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getEdit
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|createEmptyCommit
operator|=
literal|false
argument_list|)
DECL|method|updateRootCommitMessage ()
specifier|public
name|void
name|updateRootCommitMessage
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Re-clone empty repo; TestRepository doesn't let us reset to unborn head.
name|testRepo
operator|=
name|cloneProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|changeId
operator|=
name|newChange
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
expr_stmt|;
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|EditInfo
argument_list|>
name|edit
init|=
name|getEdit
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|commit
argument_list|()
operator|.
name|parents
argument_list|()
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"New commit message\n\nChange-Id: %s\n"
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyCommitMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|String
name|commitMessage
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|getCommitMessage
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|commitMessage
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateMessageNoChange ()
specifier|public
name|void
name|updateMessageNoChange
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|String
name|commitMessage
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|getCommitMessage
argument_list|()
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"New commit message cannot be same as existing commit message"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyCommitMessage
argument_list|(
name|commitMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateMessageOnlyAddTrailingNewLines ()
specifier|public
name|void
name|updateMessageOnlyAddTrailingNewLines
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|String
name|commitMessage
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|getCommitMessage
argument_list|()
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"New commit message cannot be same as existing commit message"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyCommitMessage
argument_list|(
name|commitMessage
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateMessage ()
specifier|public
name|void
name|updateMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"New commit message\n\nChange-Id: %s\n"
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyCommitMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|String
name|commitMessage
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|getCommitMessage
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|commitMessage
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|PublishChangeEditInput
name|publishInput
init|=
operator|new
name|PublishChangeEditInput
argument_list|()
decl_stmt|;
name|publishInput
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|NONE
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|publish
argument_list|(
name|publishInput
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getEdit
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|get
argument_list|(
name|changeId
argument_list|,
name|ListChangesOption
operator|.
name|CURRENT_COMMIT
argument_list|,
name|ListChangesOption
operator|.
name|CURRENT_REVISION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|)
operator|.
name|description
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Edit commit message"
argument_list|)
expr_stmt|;
name|assertChangeMessages
argument_list|(
name|changeId
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"Uploaded patch set 1."
argument_list|,
literal|"Uploaded patch set 2."
argument_list|,
literal|"Patch Set 3: Commit message was updated."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateMessageRest ()
specifier|public
name|void
name|updateMessageRest
parameter_list|()
throws|throws
name|Exception
block|{
name|adminRestSession
operator|.
name|get
argument_list|(
name|urlEditMessage
argument_list|(
name|changeId
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|assertNotFound
argument_list|()
expr_stmt|;
name|EditMessage
operator|.
name|Input
name|in
init|=
operator|new
name|EditMessage
operator|.
name|Input
argument_list|()
decl_stmt|;
name|in
operator|.
name|message
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"New commit message\n\n"
operator|+
name|CONTENT_NEW2_STR
operator|+
literal|"\n\nChange-Id: %s\n"
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|adminRestSession
operator|.
name|put
argument_list|(
name|urlEditMessage
argument_list|(
name|changeId
argument_list|,
literal|false
argument_list|)
argument_list|,
name|in
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|RestResponse
name|r
init|=
name|adminRestSession
operator|.
name|getJsonAccept
argument_list|(
name|urlEditMessage
argument_list|(
name|changeId
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOK
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|readContentFromJson
argument_list|(
name|r
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|message
argument_list|)
expr_stmt|;
name|String
name|commitMessage
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|getCommitMessage
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|commitMessage
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|message
argument_list|)
expr_stmt|;
name|in
operator|.
name|message
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"New commit message2\n\nChange-Id: %s\n"
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|adminRestSession
operator|.
name|put
argument_list|(
name|urlEditMessage
argument_list|(
name|changeId
argument_list|,
literal|false
argument_list|)
argument_list|,
name|in
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|String
name|updatedCommitMessage
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|getCommitMessage
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|updatedCommitMessage
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|message
argument_list|)
expr_stmt|;
name|r
operator|=
name|adminRestSession
operator|.
name|getJsonAccept
argument_list|(
name|urlEditMessage
argument_list|(
name|changeId
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RevCommit
name|commit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|readContentFromJson
argument_list|(
name|r
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PublishChangeEditInput
name|publishInput
init|=
operator|new
name|PublishChangeEditInput
argument_list|()
decl_stmt|;
name|publishInput
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|NONE
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|publish
argument_list|(
name|publishInput
argument_list|)
expr_stmt|;
name|assertChangeMessages
argument_list|(
name|changeId
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"Uploaded patch set 1."
argument_list|,
literal|"Uploaded patch set 2."
argument_list|,
literal|"Patch Set 3: Commit message was updated."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|retrieveEdit ()
specifier|public
name|void
name|retrieveEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|adminRestSession
operator|.
name|get
argument_list|(
name|urlEdit
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|createArbitraryEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|EditInfo
name|editInfo
init|=
name|getEditInfo
argument_list|(
name|changeId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ChangeInfo
name|changeInfo
init|=
name|get
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|editInfo
operator|.
name|commit
operator|.
name|commit
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|changeInfo
operator|.
name|currentRevision
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|editInfo
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|parents
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|editInfo
argument_list|)
operator|.
name|baseRevision
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|changeInfo
operator|.
name|currentRevision
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|delete
argument_list|()
expr_stmt|;
name|adminRestSession
operator|.
name|get
argument_list|(
name|urlEdit
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|retrieveFilesInEdit ()
specifier|public
name|void
name|retrieveFilesInEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|EditInfo
name|info
init|=
name|getEditInfo
argument_list|(
name|changeId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|files
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|files
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Patch
operator|.
name|COMMIT_MSG
argument_list|,
name|FILE_NAME
argument_list|,
name|FILE_NAME2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteExistingFile ()
specifier|public
name|void
name|deleteExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|deleteFile
argument_list|(
name|FILE_NAME
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|renameExistingFile ()
specifier|public
name|void
name|renameExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|renameFile
argument_list|(
name|FILE_NAME
argument_list|,
name|FILE_NAME3
argument_list|)
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME3
argument_list|)
argument_list|,
name|CONTENT_OLD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEditByDeletingExistingFileRest ()
specifier|public
name|void
name|createEditByDeletingExistingFileRest
parameter_list|()
throws|throws
name|Exception
block|{
name|adminRestSession
operator|.
name|delete
argument_list|(
name|urlEditFile
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deletingNonExistingEditRest ()
specifier|public
name|void
name|deletingNonExistingEditRest
parameter_list|()
throws|throws
name|Exception
block|{
name|adminRestSession
operator|.
name|delete
argument_list|(
name|urlEdit
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|assertNotFound
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteExistingFileRest ()
specifier|public
name|void
name|deleteExistingFileRest
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|adminRestSession
operator|.
name|delete
argument_list|(
name|urlEditFile
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|restoreDeletedFileInPatchSet ()
specifier|public
name|void
name|restoreDeletedFileInPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId2
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|restoreFile
argument_list|(
name|FILE_NAME
argument_list|)
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId2
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_OLD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revertChanges ()
specifier|public
name|void
name|revertChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId2
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|restoreFile
argument_list|(
name|FILE_NAME
argument_list|)
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId2
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_OLD
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId2
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|restoreFile
argument_list|(
name|FILE_NAME
argument_list|)
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId2
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_OLD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|renameFileRest ()
specifier|public
name|void
name|renameFileRest
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|Post
operator|.
name|Input
name|in
init|=
operator|new
name|Post
operator|.
name|Input
argument_list|()
decl_stmt|;
name|in
operator|.
name|oldPath
operator|=
name|FILE_NAME
expr_stmt|;
name|in
operator|.
name|newPath
operator|=
name|FILE_NAME3
expr_stmt|;
name|adminRestSession
operator|.
name|post
argument_list|(
name|urlEdit
argument_list|(
name|changeId
argument_list|)
argument_list|,
name|in
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME3
argument_list|)
argument_list|,
name|CONTENT_OLD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|restoreDeletedFileInPatchSetRest ()
specifier|public
name|void
name|restoreDeletedFileInPatchSetRest
parameter_list|()
throws|throws
name|Exception
block|{
name|Post
operator|.
name|Input
name|in
init|=
operator|new
name|Post
operator|.
name|Input
argument_list|()
decl_stmt|;
name|in
operator|.
name|restorePath
operator|=
name|FILE_NAME
expr_stmt|;
name|adminRestSession
operator|.
name|post
argument_list|(
name|urlEdit
argument_list|(
name|changeId2
argument_list|)
argument_list|,
name|in
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId2
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_OLD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|amendExistingFile ()
specifier|public
name|void
name|amendExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW2
argument_list|)
argument_list|)
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createAndChangeEditInOneRequestRest ()
specifier|public
name|void
name|createAndChangeEditInOneRequestRest
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
operator|.
name|Input
name|in
init|=
operator|new
name|Put
operator|.
name|Input
argument_list|()
decl_stmt|;
name|in
operator|.
name|content
operator|=
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|adminRestSession
operator|.
name|putRaw
argument_list|(
name|urlEditFile
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|in
operator|.
name|content
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|in
operator|.
name|content
operator|=
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW2
argument_list|)
expr_stmt|;
name|adminRestSession
operator|.
name|putRaw
argument_list|(
name|urlEditFile
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|in
operator|.
name|content
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeEditRest ()
specifier|public
name|void
name|changeEditRest
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|Put
operator|.
name|Input
name|in
init|=
operator|new
name|Put
operator|.
name|Input
argument_list|()
decl_stmt|;
name|in
operator|.
name|content
operator|=
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|adminRestSession
operator|.
name|putRaw
argument_list|(
name|urlEditFile
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|in
operator|.
name|content
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyPutRequest ()
specifier|public
name|void
name|emptyPutRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|adminRestSession
operator|.
name|put
argument_list|(
name|urlEditFile
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
literal|""
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEmptyEditRest ()
specifier|public
name|void
name|createEmptyEditRest
parameter_list|()
throws|throws
name|Exception
block|{
name|adminRestSession
operator|.
name|post
argument_list|(
name|urlEdit
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|CONTENT_OLD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFileContentRest ()
specifier|public
name|void
name|getFileContentRest
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
operator|.
name|Input
name|in
init|=
operator|new
name|Put
operator|.
name|Input
argument_list|()
decl_stmt|;
name|in
operator|.
name|content
operator|=
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|adminRestSession
operator|.
name|putRaw
argument_list|(
name|urlEditFile
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|,
name|in
operator|.
name|content
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW2
argument_list|)
argument_list|)
expr_stmt|;
name|RestResponse
name|r
init|=
name|adminRestSession
operator|.
name|getJsonAccept
argument_list|(
name|urlEditFile
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOK
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|readContentFromJson
argument_list|(
name|r
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|String
argument_list|(
name|CONTENT_NEW2
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|adminRestSession
operator|.
name|getJsonAccept
argument_list|(
name|urlEditFile
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOK
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|readContentFromJson
argument_list|(
name|r
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|String
argument_list|(
name|CONTENT_OLD
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFileNotFoundRest ()
specifier|public
name|void
name|getFileNotFoundRest
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|adminRestSession
operator|.
name|delete
argument_list|(
name|urlEditFile
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|adminRestSession
operator|.
name|get
argument_list|(
name|urlEditFile
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addNewFile ()
specifier|public
name|void
name|addNewFile
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME3
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME3
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addNewFileAndAmend ()
specifier|public
name|void
name|addNewFileAndAmend
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME3
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME3
argument_list|)
argument_list|,
name|CONTENT_NEW
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME3
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW2
argument_list|)
argument_list|)
expr_stmt|;
name|ensureSameBytes
argument_list|(
name|getFileContentOfEdit
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME3
argument_list|)
argument_list|,
name|CONTENT_NEW2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeNoChanges ()
specifier|public
name|void
name|writeNoChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"no changes were made"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_OLD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|editCommitMessageCopiesLabelScores ()
specifier|public
name|void
name|editCommitMessageCopiesLabelScores
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|cr
init|=
literal|"Code-Review"
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|LabelType
name|codeReview
init|=
name|Util
operator|.
name|codeReview
argument_list|()
decl_stmt|;
name|codeReview
operator|.
name|setCopyAllScoresIfNoCodeChange
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|codeReview
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|ReviewInput
name|r
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|r
operator|.
name|labels
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|cr
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|String
name|newSubj
init|=
literal|"New commit message"
decl_stmt|;
name|String
name|newMsg
init|=
name|newSubj
operator|+
literal|"\n\nChange-Id: "
operator|+
name|changeId
operator|+
literal|"\n"
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyCommitMessage
argument_list|(
name|newMsg
argument_list|)
expr_stmt|;
name|PublishChangeEditInput
name|publishInput
init|=
operator|new
name|PublishChangeEditInput
argument_list|()
decl_stmt|;
name|publishInput
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|NONE
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|publish
argument_list|(
name|publishInput
argument_list|)
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|get
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|subject
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|newSubj
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApprovalInfo
argument_list|>
name|approvals
init|=
name|info
operator|.
name|labels
operator|.
name|get
argument_list|(
name|cr
argument_list|)
operator|.
name|all
decl_stmt|;
name|assertThat
argument_list|(
name|approvals
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hasEditPredicate ()
specifier|public
name|void
name|hasEditPredicate
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|queryEdits
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|createEmptyEditFor
argument_list|(
name|changeId2
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|queryEdits
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|queryEdits
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|PublishChangeEditInput
name|publishInput
init|=
operator|new
name|PublishChangeEditInput
argument_list|()
decl_stmt|;
name|publishInput
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|NONE
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|publish
argument_list|(
name|publishInput
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|queryEdits
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|queryEdits
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|queryEdits
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|files ()
specifier|public
name|void
name|files
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|EditInfo
argument_list|>
name|edit
init|=
name|getEdit
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|String
name|editCommitId
init|=
name|edit
operator|.
name|get
argument_list|()
operator|.
name|commit
operator|.
name|commit
decl_stmt|;
name|RestResponse
name|r
init|=
name|adminRestSession
operator|.
name|getJsonAccept
argument_list|(
name|urlRevisionFiles
argument_list|(
name|changeId
argument_list|,
name|editCommitId
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|files
init|=
name|readContentFromJson
argument_list|(
name|r
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|files
argument_list|)
operator|.
name|containsKey
argument_list|(
name|FILE_NAME
argument_list|)
expr_stmt|;
name|r
operator|=
name|adminRestSession
operator|.
name|getJsonAccept
argument_list|(
name|urlRevisionFiles
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|=
name|readContentFromJson
argument_list|(
name|r
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|files
argument_list|)
operator|.
name|containsKey
argument_list|(
name|FILE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diff ()
specifier|public
name|void
name|diff
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|EditInfo
argument_list|>
name|edit
init|=
name|getEdit
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|String
name|editCommitId
init|=
name|edit
operator|.
name|get
argument_list|()
operator|.
name|commit
operator|.
name|commit
decl_stmt|;
name|RestResponse
name|r
init|=
name|adminRestSession
operator|.
name|getJsonAccept
argument_list|(
name|urlDiff
argument_list|(
name|changeId
argument_list|,
name|editCommitId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|DiffInfo
name|diff
init|=
name|readContentFromJson
argument_list|(
name|r
argument_list|,
name|DiffInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|diffHeader
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|FILE_NAME
argument_list|)
expr_stmt|;
name|r
operator|=
name|adminRestSession
operator|.
name|getJsonAccept
argument_list|(
name|urlDiff
argument_list|(
name|changeId
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|diff
operator|=
name|readContentFromJson
argument_list|(
name|r
argument_list|,
name|DiffInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|diffHeader
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|FILE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEditWithoutPushPatchSetPermission ()
specifier|public
name|void
name|createEditWithoutPushPatchSetPermission
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create new project with clean permissions
name|Project
operator|.
name|NameKey
name|p
init|=
name|createProject
argument_list|(
literal|"addPatchSetEdit"
argument_list|)
decl_stmt|;
comment|// Clone repository as user
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|userTestRepo
init|=
name|cloneProject
argument_list|(
name|p
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|// Block default permission
name|block
argument_list|(
name|p
argument_list|,
literal|"refs/for/*"
argument_list|,
name|Permission
operator|.
name|ADD_PATCH_SET
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
comment|// Create change as user
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|user
operator|.
name|getIdent
argument_list|()
argument_list|,
name|userTestRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r1
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// Try to create edit as admin
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|createEmptyEditFor
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createArbitraryEditFor (String changeId)
specifier|private
name|void
name|createArbitraryEditFor
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|createEmptyEditFor
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|arbitrarilyModifyEditOf
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
block|}
DECL|method|createEmptyEditFor (String changeId)
specifier|private
name|void
name|createEmptyEditFor
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
DECL|method|arbitrarilyModifyEditOf (String changeId)
specifier|private
name|void
name|arbitrarilyModifyEditOf
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getFileContentOfEdit (String changeId, String filePath)
specifier|private
name|Optional
argument_list|<
name|BinaryResult
argument_list|>
name|getFileContentOfEdit
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|filePath
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|getFile
argument_list|(
name|filePath
argument_list|)
return|;
block|}
DECL|method|queryEdits ()
specifier|private
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|queryEdits
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|query
argument_list|(
literal|"project:{"
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"} has:edit"
argument_list|)
return|;
block|}
DECL|method|newChange (PersonIdent ident)
specifier|private
name|String
name|newChange
parameter_list|(
name|PersonIdent
name|ident
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|ident
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
operator|new
name|String
argument_list|(
name|CONTENT_OLD
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
operator|.
name|getChangeId
argument_list|()
return|;
block|}
DECL|method|amendChange (PersonIdent ident, String changeId)
specifier|private
name|String
name|amendChange
parameter_list|(
name|PersonIdent
name|ident
parameter_list|,
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|ident
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|FILE_NAME2
argument_list|,
operator|new
name|String
argument_list|(
name|CONTENT_NEW2
argument_list|,
name|UTF_8
argument_list|)
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
operator|.
name|getChangeId
argument_list|()
return|;
block|}
DECL|method|newChange2 (PersonIdent ident)
specifier|private
name|String
name|newChange2
parameter_list|(
name|PersonIdent
name|ident
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|ident
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
operator|new
name|String
argument_list|(
name|CONTENT_OLD
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|rm
argument_list|(
literal|"refs/for/master"
argument_list|)
operator|.
name|getChangeId
argument_list|()
return|;
block|}
DECL|method|getCurrentPatchSet (String changeId)
specifier|private
name|PatchSet
name|getCurrentPatchSet
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getOnlyElement
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byKeyPrefix
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|currentPatchSet
argument_list|()
return|;
block|}
DECL|method|ensureSameBytes (Optional<BinaryResult> fileContent, byte[] expectedFileBytes)
specifier|private
name|void
name|ensureSameBytes
parameter_list|(
name|Optional
argument_list|<
name|BinaryResult
argument_list|>
name|fileContent
parameter_list|,
name|byte
index|[]
name|expectedFileBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThat
argument_list|(
name|fileContent
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|bytes
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|expectedFileBytes
argument_list|)
expr_stmt|;
block|}
DECL|method|urlEdit (String changeId)
specifier|private
name|String
name|urlEdit
parameter_list|(
name|String
name|changeId
parameter_list|)
block|{
return|return
literal|"/changes/"
operator|+
name|changeId
operator|+
literal|"/edit"
return|;
block|}
DECL|method|urlEditMessage (String changeId, boolean base)
specifier|private
name|String
name|urlEditMessage
parameter_list|(
name|String
name|changeId
parameter_list|,
name|boolean
name|base
parameter_list|)
block|{
return|return
literal|"/changes/"
operator|+
name|changeId
operator|+
literal|"/edit:message"
operator|+
operator|(
name|base
condition|?
literal|"?base"
else|:
literal|""
operator|)
return|;
block|}
DECL|method|urlEditFile (String changeId, String fileName)
specifier|private
name|String
name|urlEditFile
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
return|return
name|urlEditFile
argument_list|(
name|changeId
argument_list|,
name|fileName
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|urlEditFile (String changeId, String fileName, boolean base)
specifier|private
name|String
name|urlEditFile
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|fileName
parameter_list|,
name|boolean
name|base
parameter_list|)
block|{
return|return
name|urlEdit
argument_list|(
name|changeId
argument_list|)
operator|+
literal|"/"
operator|+
name|fileName
operator|+
operator|(
name|base
condition|?
literal|"?base"
else|:
literal|""
operator|)
return|;
block|}
DECL|method|urlGetFiles (String changeId)
specifier|private
name|String
name|urlGetFiles
parameter_list|(
name|String
name|changeId
parameter_list|)
block|{
return|return
name|urlEdit
argument_list|(
name|changeId
argument_list|)
operator|+
literal|"?list"
return|;
block|}
DECL|method|urlRevisionFiles (String changeId, String revisionId)
specifier|private
name|String
name|urlRevisionFiles
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
return|return
literal|"/changes/"
operator|+
name|changeId
operator|+
literal|"/revisions/"
operator|+
name|revisionId
operator|+
literal|"/files"
return|;
block|}
DECL|method|urlRevisionFiles (String changeId)
specifier|private
name|String
name|urlRevisionFiles
parameter_list|(
name|String
name|changeId
parameter_list|)
block|{
return|return
literal|"/changes/"
operator|+
name|changeId
operator|+
literal|"/revisions/0/files"
return|;
block|}
DECL|method|urlPublish (String changeId)
specifier|private
name|String
name|urlPublish
parameter_list|(
name|String
name|changeId
parameter_list|)
block|{
return|return
literal|"/changes/"
operator|+
name|changeId
operator|+
literal|"/edit:publish"
return|;
block|}
DECL|method|urlRebase (String changeId)
specifier|private
name|String
name|urlRebase
parameter_list|(
name|String
name|changeId
parameter_list|)
block|{
return|return
literal|"/changes/"
operator|+
name|changeId
operator|+
literal|"/edit:rebase"
return|;
block|}
DECL|method|urlDiff (String changeId, String fileName)
specifier|private
name|String
name|urlDiff
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
return|return
literal|"/changes/"
operator|+
name|changeId
operator|+
literal|"/revisions/0/files/"
operator|+
name|fileName
operator|+
literal|"/diff?context=ALL&intraline"
return|;
block|}
DECL|method|urlDiff (String changeId, String revisionId, String fileName)
specifier|private
name|String
name|urlDiff
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
return|return
literal|"/changes/"
operator|+
name|changeId
operator|+
literal|"/revisions/"
operator|+
name|revisionId
operator|+
literal|"/files/"
operator|+
name|fileName
operator|+
literal|"/diff?context=ALL&intraline"
return|;
block|}
DECL|method|getEditInfo (String changeId, boolean files)
specifier|private
name|EditInfo
name|getEditInfo
parameter_list|(
name|String
name|changeId
parameter_list|,
name|boolean
name|files
parameter_list|)
throws|throws
name|Exception
block|{
name|RestResponse
name|r
init|=
name|adminRestSession
operator|.
name|get
argument_list|(
name|files
condition|?
name|urlGetFiles
argument_list|(
name|changeId
argument_list|)
else|:
name|urlEdit
argument_list|(
name|changeId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|readContentFromJson
argument_list|(
name|r
argument_list|,
name|EditInfo
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|readContentFromJson (RestResponse r, Class<T> clazz)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|readContentFromJson
parameter_list|(
name|RestResponse
name|r
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
name|r
operator|.
name|assertOK
argument_list|()
expr_stmt|;
try|try
init|(
name|JsonReader
name|jsonReader
init|=
operator|new
name|JsonReader
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|)
init|)
block|{
name|jsonReader
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|jsonReader
argument_list|,
name|clazz
argument_list|)
return|;
block|}
block|}
DECL|method|readContentFromJson (RestResponse r, TypeToken<T> typeToken)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|readContentFromJson
parameter_list|(
name|RestResponse
name|r
parameter_list|,
name|TypeToken
argument_list|<
name|T
argument_list|>
name|typeToken
parameter_list|)
throws|throws
name|Exception
block|{
name|r
operator|.
name|assertOK
argument_list|()
expr_stmt|;
try|try
init|(
name|JsonReader
name|jsonReader
init|=
operator|new
name|JsonReader
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|)
init|)
block|{
name|jsonReader
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|jsonReader
argument_list|,
name|typeToken
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|readContentFromJson (RestResponse r)
specifier|private
name|String
name|readContentFromJson
parameter_list|(
name|RestResponse
name|r
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|readContentFromJson
argument_list|(
name|r
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|assertChangeMessages (String changeId, List<String> expectedMessages)
specifier|private
name|void
name|assertChangeMessages
parameter_list|(
name|String
name|changeId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|expectedMessages
parameter_list|)
throws|throws
name|Exception
block|{
name|ChangeInfo
name|ci
init|=
name|get
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ci
operator|.
name|messages
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ci
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
name|expectedMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actualMessages
init|=
name|ci
operator|.
name|messages
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|message
lambda|->
name|message
operator|.
name|message
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actualMessages
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedMessages
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

