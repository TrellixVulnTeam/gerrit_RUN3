begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.edit
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|edit
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AcceptanceTestRequestScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|RestSession
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BinaryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|FileContentUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|ChangeEdit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|ChangeEditModifier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|ChangeEditUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|InvalidChangeOperationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|Git
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|ChangeEditIT
specifier|public
class|class
name|ChangeEditIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|FILE_NAME
specifier|private
specifier|final
specifier|static
name|String
name|FILE_NAME
init|=
literal|"foo"
decl_stmt|;
DECL|field|FILE_NAME2
specifier|private
specifier|final
specifier|static
name|String
name|FILE_NAME2
init|=
literal|"foo2"
decl_stmt|;
DECL|field|CONTENT_OLD
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|CONTENT_OLD
init|=
literal|"bar"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
DECL|field|CONTENT_NEW
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|CONTENT_NEW
init|=
literal|"baz"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
DECL|field|CONTENT_NEW2
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|CONTENT_NEW2
init|=
literal|"qux"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
annotation|@
name|Inject
DECL|field|reviewDbProvider
specifier|private
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|reviewDbProvider
decl_stmt|;
annotation|@
name|Inject
DECL|field|identifiedUserFactory
specifier|private
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
decl_stmt|;
annotation|@
name|Inject
DECL|field|pushFactory
specifier|private
name|PushOneCommit
operator|.
name|Factory
name|pushFactory
decl_stmt|;
annotation|@
name|Inject
DECL|field|editUtil
name|ChangeEditUtil
name|editUtil
decl_stmt|;
annotation|@
name|Inject
DECL|field|modifier
specifier|private
name|ChangeEditModifier
name|modifier
decl_stmt|;
annotation|@
name|Inject
DECL|field|fileUtil
specifier|private
name|FileContentUtil
name|fileUtil
decl_stmt|;
annotation|@
name|Inject
DECL|field|atrScope
specifier|private
name|AcceptanceTestRequestScope
name|atrScope
decl_stmt|;
DECL|field|db
specifier|private
name|ReviewDb
name|db
decl_stmt|;
DECL|field|change
specifier|private
name|Change
name|change
decl_stmt|;
DECL|field|change2
specifier|private
name|Change
name|change2
decl_stmt|;
DECL|field|ps
specifier|private
name|PatchSet
name|ps
decl_stmt|;
DECL|field|ps2
specifier|private
name|PatchSet
name|ps2
decl_stmt|;
DECL|field|session
name|RestSession
name|session
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|db
operator|=
name|reviewDbProvider
operator|.
name|open
argument_list|()
expr_stmt|;
name|String
name|changeId
init|=
name|newChange
argument_list|(
name|git
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
decl_stmt|;
name|change
operator|=
name|getChange
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|ps
operator|=
name|getCurrentPatchSet
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|changeId
operator|=
name|newChange2
argument_list|(
name|git
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
expr_stmt|;
name|change2
operator|=
name|getChange
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|change2
argument_list|)
expr_stmt|;
name|ps2
operator|=
name|getCurrentPatchSet
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ps2
argument_list|)
expr_stmt|;
name|session
operator|=
operator|new
name|RestSession
argument_list|(
name|server
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|atrScope
operator|.
name|set
argument_list|(
name|atrScope
operator|.
name|newContext
argument_list|(
name|reviewDbProvider
argument_list|,
name|sshSession
argument_list|,
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|Providers
operator|.
name|of
argument_list|(
name|db
argument_list|)
argument_list|,
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteEdit ()
specifier|public
name|void
name|deleteEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|,
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|,
name|modifier
operator|.
name|modifyFile
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|editUtil
operator|.
name|delete
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishEdit ()
specifier|public
name|void
name|publishEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|,
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|,
name|modifier
operator|.
name|modifyFile
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|editUtil
operator|.
name|publish
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateExistingFile ()
specifier|public
name|void
name|updateExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|,
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|,
name|modifier
operator|.
name|modifyFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|CONTENT_NEW
argument_list|,
name|toBytes
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|editUtil
operator|.
name|delete
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|edit
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteExistingFile ()
specifier|public
name|void
name|deleteExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|,
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|,
name|modifier
operator|.
name|deleteFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
try|try
block|{
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ResourceNotFoundException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|rnfe
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|restoreDeletedFileInEdit ()
specifier|public
name|void
name|restoreDeletedFileInEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|,
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|,
name|modifier
operator|.
name|modifyFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|CONTENT_NEW
argument_list|,
name|toBytes
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|,
name|modifier
operator|.
name|deleteFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
try|try
block|{
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ResourceNotFoundException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|rnfe
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|,
name|modifier
operator|.
name|restoreFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|CONTENT_OLD
argument_list|,
name|toBytes
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|restoreDeletedFileInPatchSet ()
specifier|public
name|void
name|restoreDeletedFileInPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|,
name|modifier
operator|.
name|createEdit
argument_list|(
name|change2
argument_list|,
name|ps2
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|,
name|modifier
operator|.
name|restoreFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change2
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|CONTENT_OLD
argument_list|,
name|toBytes
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|amendExistingFile ()
specifier|public
name|void
name|amendExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|,
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|,
name|modifier
operator|.
name|modifyFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|CONTENT_NEW
argument_list|,
name|toBytes
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|,
name|modifier
operator|.
name|modifyFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|CONTENT_NEW2
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|CONTENT_NEW2
argument_list|,
name|toBytes
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addNewFile ()
specifier|public
name|void
name|addNewFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|,
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|,
name|modifier
operator|.
name|modifyFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME2
argument_list|,
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|CONTENT_NEW
argument_list|,
name|toBytes
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addNewFileAndAmend ()
specifier|public
name|void
name|addNewFileAndAmend
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|,
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|,
name|modifier
operator|.
name|modifyFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME2
argument_list|,
name|CONTENT_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|CONTENT_NEW
argument_list|,
name|toBytes
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|,
name|modifier
operator|.
name|modifyFile
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME2
argument_list|,
name|CONTENT_NEW2
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|CONTENT_NEW2
argument_list|,
name|toBytes
argument_list|(
name|fileUtil
operator|.
name|getContent
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeNoChanges ()
specifier|public
name|void
name|writeNoChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|,
name|modifier
operator|.
name|createEdit
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|modifier
operator|.
name|modifyFile
argument_list|(
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|,
name|CONTENT_OLD
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidChangeOperationException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"no changes were made"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newChange (Git git, PersonIdent ident)
specifier|private
name|String
name|newChange
parameter_list|(
name|Git
name|git
parameter_list|,
name|PersonIdent
name|ident
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|ident
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
operator|new
name|String
argument_list|(
name|CONTENT_OLD
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
name|git
argument_list|,
literal|"refs/for/master"
argument_list|)
operator|.
name|getChangeId
argument_list|()
return|;
block|}
DECL|method|newChange2 (Git git, PersonIdent ident)
specifier|private
name|String
name|newChange2
parameter_list|(
name|Git
name|git
parameter_list|,
name|PersonIdent
name|ident
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|ident
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
operator|new
name|String
argument_list|(
name|CONTENT_OLD
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|rm
argument_list|(
name|git
argument_list|,
literal|"refs/for/master"
argument_list|)
operator|.
name|getChangeId
argument_list|()
return|;
block|}
DECL|method|getChange (String changeId)
specifier|private
name|Change
name|getChange
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|byKey
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|changeId
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getCurrentPatchSet (String changeId)
specifier|private
name|PatchSet
name|getCurrentPatchSet
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|getChange
argument_list|(
name|changeId
argument_list|)
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toBytes (BinaryResult content)
specifier|private
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|BinaryResult
name|content
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|content
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
return|return
name|os
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

