begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.group
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|group
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|group
operator|.
name|GroupAssert
operator|.
name|assertGroupInfo
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|account
operator|.
name|AccountAssert
operator|.
name|assertAccountInfos
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|groups
operator|.
name|GroupApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|groups
operator|.
name|GroupInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupAuditEventInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupAuditEventInfo
operator|.
name|GroupMemberAuditEventInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupAuditEventInfo
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupAuditEventInfo
operator|.
name|UserMemberAuditEventInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupOptionsInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Url
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|GroupsIT
specifier|public
class|class
name|GroupsIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Test
DECL|method|addToNonExistingGroup_NotFound ()
specifier|public
name|void
name|addToNonExistingGroup_NotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"non-existing"
argument_list|)
operator|.
name|addMembers
argument_list|(
literal|"admin"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeFromNonExistingGroup_NotFound ()
specifier|public
name|void
name|removeFromNonExistingGroup_NotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"non-existing"
argument_list|)
operator|.
name|removeMembers
argument_list|(
literal|"admin"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addRemoveMember ()
specifier|public
name|void
name|addRemoveMember
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|g
init|=
name|createGroup
argument_list|(
literal|"users"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|g
argument_list|)
operator|.
name|addMembers
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|assertMembers
argument_list|(
name|g
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|g
argument_list|)
operator|.
name|removeMembers
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|assertNoMembers
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addExistingMember_OK ()
specifier|public
name|void
name|addExistingMember_OK
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|g
init|=
literal|"Administrators"
decl_stmt|;
name|assertMembers
argument_list|(
name|g
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"Administrators"
argument_list|)
operator|.
name|addMembers
argument_list|(
literal|"admin"
argument_list|)
expr_stmt|;
name|assertMembers
argument_list|(
name|g
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addNonExistingMember_UnprocessableEntity ()
specifier|public
name|void
name|addNonExistingMember_UnprocessableEntity
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|UnprocessableEntityException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"Administrators"
argument_list|)
operator|.
name|addMembers
argument_list|(
literal|"non-existing"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addMultipleMembers ()
specifier|public
name|void
name|addMultipleMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|g
init|=
name|createGroup
argument_list|(
literal|"users"
argument_list|)
decl_stmt|;
name|TestAccount
name|u1
init|=
name|accounts
operator|.
name|create
argument_list|(
literal|"u1"
argument_list|,
literal|"u1@example.com"
argument_list|,
literal|"Full Name 1"
argument_list|)
decl_stmt|;
name|TestAccount
name|u2
init|=
name|accounts
operator|.
name|create
argument_list|(
literal|"u2"
argument_list|,
literal|"u2@example.com"
argument_list|,
literal|"Full Name 2"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|g
argument_list|)
operator|.
name|addMembers
argument_list|(
name|u1
operator|.
name|username
argument_list|,
name|u2
operator|.
name|username
argument_list|)
expr_stmt|;
name|assertMembers
argument_list|(
name|g
argument_list|,
name|u1
argument_list|,
name|u2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addMembersWithAtSign ()
specifier|public
name|void
name|addMembersWithAtSign
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|g
init|=
name|createGroup
argument_list|(
literal|"users"
argument_list|)
decl_stmt|;
name|TestAccount
name|u10
init|=
name|accounts
operator|.
name|create
argument_list|(
literal|"u10"
argument_list|,
literal|"u10@example.com"
argument_list|,
literal|"Full Name 10"
argument_list|)
decl_stmt|;
name|TestAccount
name|u11_at
init|=
name|accounts
operator|.
name|create
argument_list|(
literal|"u11@something"
argument_list|,
literal|"u11@example.com"
argument_list|,
literal|"Full Name 11 With At"
argument_list|)
decl_stmt|;
name|TestAccount
name|u11
init|=
name|accounts
operator|.
name|create
argument_list|(
literal|"u11"
argument_list|,
literal|"u11.another@example.com"
argument_list|,
literal|"Full Name 11 Without At"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|g
argument_list|)
operator|.
name|addMembers
argument_list|(
name|u10
operator|.
name|username
argument_list|,
name|u11_at
operator|.
name|username
argument_list|)
expr_stmt|;
name|assertMembers
argument_list|(
name|g
argument_list|,
name|u10
argument_list|,
name|u11_at
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|includeRemoveGroup ()
specifier|public
name|void
name|includeRemoveGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|p
init|=
name|createGroup
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|String
name|g
init|=
name|createGroup
argument_list|(
literal|"newGroup"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|p
argument_list|)
operator|.
name|addGroups
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertIncludes
argument_list|(
name|p
argument_list|,
name|g
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|p
argument_list|)
operator|.
name|removeGroups
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertNoIncludes
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|includeExistingGroup_OK ()
specifier|public
name|void
name|includeExistingGroup_OK
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|p
init|=
name|createGroup
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|String
name|g
init|=
name|createGroup
argument_list|(
literal|"newGroup"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|p
argument_list|)
operator|.
name|addGroups
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertIncludes
argument_list|(
name|p
argument_list|,
name|g
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|p
argument_list|)
operator|.
name|addGroups
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertIncludes
argument_list|(
name|p
argument_list|,
name|g
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addMultipleIncludes ()
specifier|public
name|void
name|addMultipleIncludes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|p
init|=
name|createGroup
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|String
name|g1
init|=
name|createGroup
argument_list|(
literal|"newGroup1"
argument_list|)
decl_stmt|;
name|String
name|g2
init|=
name|createGroup
argument_list|(
literal|"newGroup2"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|g1
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|g2
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|p
argument_list|)
operator|.
name|addGroups
argument_list|(
name|g1
argument_list|,
name|g2
argument_list|)
expr_stmt|;
name|assertIncludes
argument_list|(
name|p
argument_list|,
name|g1
argument_list|,
name|g2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createGroup ()
specifier|public
name|void
name|createGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newGroupName
init|=
name|name
argument_list|(
literal|"newGroup"
argument_list|)
decl_stmt|;
name|GroupInfo
name|g
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|newGroupName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertGroupInfo
argument_list|(
name|getFromCache
argument_list|(
name|newGroupName
argument_list|)
argument_list|,
name|g
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDuplicateInternalGroupCaseSensitiveName_Conflict ()
specifier|public
name|void
name|createDuplicateInternalGroupCaseSensitiveName_Conflict
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dupGroupName
init|=
name|name
argument_list|(
literal|"dupGroup"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|dupGroupName
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"group '"
operator|+
name|dupGroupName
operator|+
literal|"' already exists"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|dupGroupName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDuplicateInternalGroupCaseInsensitiveName ()
specifier|public
name|void
name|createDuplicateInternalGroupCaseInsensitiveName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dupGroupName
init|=
name|name
argument_list|(
literal|"dupGroupA"
argument_list|)
decl_stmt|;
name|String
name|dupGroupNameLowerCase
init|=
name|name
argument_list|(
literal|"dupGroupA"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|dupGroupName
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|dupGroupNameLowerCase
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|dupGroupName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|dupGroupNameLowerCase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDuplicateSystemGroupCaseSensitiveName_Conflict ()
specifier|public
name|void
name|createDuplicateSystemGroupCaseSensitiveName_Conflict
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newGroupName
init|=
literal|"Registered Users"
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"group 'Registered Users' already exists"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|newGroupName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDuplicateSystemGroupCaseInsensitiveName_Conflict ()
specifier|public
name|void
name|createDuplicateSystemGroupCaseInsensitiveName_Conflict
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newGroupName
init|=
literal|"registered users"
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"group 'Registered Users' already exists"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|newGroupName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"groups.global:Anonymous-Users.name"
argument_list|,
name|value
operator|=
literal|"All Users"
argument_list|)
DECL|method|createGroupWithConfiguredNameOfSystemGroup_Conflict ()
specifier|public
name|void
name|createGroupWithConfiguredNameOfSystemGroup_Conflict
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"group 'All Users' already exists"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
literal|"all users"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"groups.global:Anonymous-Users.name"
argument_list|,
name|value
operator|=
literal|"All Users"
argument_list|)
DECL|method|createGroupWithDefaultNameOfSystemGroup_Conflict ()
specifier|public
name|void
name|createGroupWithDefaultNameOfSystemGroup_Conflict
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"group name 'Anonymous Users' is reserved"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
literal|"anonymous users"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createGroupWithProperties ()
specifier|public
name|void
name|createGroupWithProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupInput
name|in
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|name
argument_list|(
literal|"newGroup"
argument_list|)
expr_stmt|;
name|in
operator|.
name|description
operator|=
literal|"Test description"
expr_stmt|;
name|in
operator|.
name|visibleToAll
operator|=
literal|true
expr_stmt|;
name|in
operator|.
name|ownerId
operator|=
name|getFromCache
argument_list|(
literal|"Administrators"
argument_list|)
operator|.
name|getGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|GroupInfo
name|g
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
operator|.
name|detail
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|g
operator|.
name|description
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|description
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|g
operator|.
name|options
operator|.
name|visibleToAll
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|visibleToAll
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|g
operator|.
name|ownerId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|ownerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createGroupWithoutCapability_Forbidden ()
specifier|public
name|void
name|createGroupWithoutCapability_Forbidden
parameter_list|()
throws|throws
name|Exception
block|{
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"newGroup"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getGroup ()
specifier|public
name|void
name|getGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
name|adminGroup
init|=
name|groupCache
operator|.
name|get
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Administrators"
argument_list|)
argument_list|)
decl_stmt|;
name|testGetGroup
argument_list|(
name|adminGroup
operator|.
name|getGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|adminGroup
argument_list|)
expr_stmt|;
name|testGetGroup
argument_list|(
name|adminGroup
operator|.
name|getName
argument_list|()
argument_list|,
name|adminGroup
argument_list|)
expr_stmt|;
name|testGetGroup
argument_list|(
name|adminGroup
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|adminGroup
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetGroup (Object id, AccountGroup expectedGroup)
specifier|private
name|void
name|testGetGroup
parameter_list|(
name|Object
name|id
parameter_list|,
name|AccountGroup
name|expectedGroup
parameter_list|)
throws|throws
name|Exception
block|{
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertGroupInfo
argument_list|(
name|expectedGroup
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"groups.global:Anonymous-Users.name"
argument_list|,
name|value
operator|=
literal|"All Users"
argument_list|)
DECL|method|getSystemGroupByConfiguredName ()
specifier|public
name|void
name|getSystemGroupByConfiguredName
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupReference
name|anonymousUsersGroup
init|=
name|systemGroupBackend
operator|.
name|getGroup
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|anonymousUsersGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"All Users"
argument_list|)
expr_stmt|;
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|anonymousUsersGroup
operator|.
name|getUUID
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|anonymousUsersGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|anonymousUsersGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Url
operator|.
name|encode
argument_list|(
operator|(
name|anonymousUsersGroup
operator|.
name|getUUID
argument_list|()
operator|.
name|get
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getSystemGroupByDefaultName ()
specifier|public
name|void
name|getSystemGroupByDefaultName
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupReference
name|anonymousUsersGroup
init|=
name|systemGroupBackend
operator|.
name|getGroup
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
decl_stmt|;
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"Anonymous Users"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|anonymousUsersGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Url
operator|.
name|encode
argument_list|(
operator|(
name|anonymousUsersGroup
operator|.
name|getUUID
argument_list|()
operator|.
name|get
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"groups.global:Anonymous-Users.name"
argument_list|,
name|value
operator|=
literal|"All Users"
argument_list|)
DECL|method|getSystemGroupByDefaultName_NotFound ()
specifier|public
name|void
name|getSystemGroupByDefaultName_NotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"Anonymous-Users"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupName ()
specifier|public
name|void
name|groupName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// get name
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// set name to same name
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|name
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// set name with name conflict
name|String
name|other
init|=
name|name
argument_list|(
literal|"other"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|name
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupRename ()
specifier|public
name|void
name|groupRename
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|newName
init|=
name|name
argument_list|(
literal|"newName"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|name
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getFromCache
argument_list|(
name|newName
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|newName
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getFromCache
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupDescription ()
specifier|public
name|void
name|groupDescription
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// get description
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// set description
name|String
name|desc
init|=
literal|"New description for the group."
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// set description to null
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// set description to empty string
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupOptions ()
specifier|public
name|void
name|groupOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// get options
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|options
argument_list|()
operator|.
name|visibleToAll
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// set options
name|GroupOptionsInfo
name|options
init|=
operator|new
name|GroupOptionsInfo
argument_list|()
decl_stmt|;
name|options
operator|.
name|visibleToAll
operator|=
literal|true
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|options
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|options
argument_list|()
operator|.
name|visibleToAll
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupOwner ()
specifier|public
name|void
name|groupOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|GroupInfo
name|info
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|adminUUID
init|=
name|getFromCache
argument_list|(
literal|"Administrators"
argument_list|)
operator|.
name|getGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|registeredUUID
init|=
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// get owner
name|assertThat
argument_list|(
name|Url
operator|.
name|decode
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|()
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|info
operator|.
name|id
argument_list|)
expr_stmt|;
comment|// set owner by name
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|(
literal|"Registered Users"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Url
operator|.
name|decode
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|()
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|registeredUUID
argument_list|)
expr_stmt|;
comment|// set owner by UUID
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|(
name|adminUUID
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Url
operator|.
name|decode
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|()
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|adminUUID
argument_list|)
expr_stmt|;
comment|// set non existing owner
name|exception
operator|.
name|expect
argument_list|(
name|UnprocessableEntityException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|(
literal|"Non-Existing Group"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listNonExistingGroupIncludes_NotFound ()
specifier|public
name|void
name|listNonExistingGroupIncludes_NotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"non-existing"
argument_list|)
operator|.
name|includedGroups
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listEmptyGroupIncludes ()
specifier|public
name|void
name|listEmptyGroupIncludes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|gx
init|=
name|createGroup
argument_list|(
literal|"gx"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|includedGroups
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|includeNonExistingGroup ()
specifier|public
name|void
name|includeNonExistingGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|gx
init|=
name|createGroup
argument_list|(
literal|"gx"
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|UnprocessableEntityException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|addGroups
argument_list|(
literal|"non-existing"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listNonEmptyGroupIncludes ()
specifier|public
name|void
name|listNonEmptyGroupIncludes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|gx
init|=
name|createGroup
argument_list|(
literal|"gx"
argument_list|)
decl_stmt|;
name|String
name|gy
init|=
name|createGroup
argument_list|(
literal|"gy"
argument_list|)
decl_stmt|;
name|String
name|gz
init|=
name|createGroup
argument_list|(
literal|"gz"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|addGroups
argument_list|(
name|gy
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|addGroups
argument_list|(
name|gz
argument_list|)
expr_stmt|;
name|assertIncludes
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|includedGroups
argument_list|()
argument_list|,
name|gy
argument_list|,
name|gz
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listOneIncludeMember ()
specifier|public
name|void
name|listOneIncludeMember
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|gx
init|=
name|createGroup
argument_list|(
literal|"gx"
argument_list|)
decl_stmt|;
name|String
name|gy
init|=
name|createGroup
argument_list|(
literal|"gy"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|addGroups
argument_list|(
name|gy
argument_list|)
expr_stmt|;
name|assertIncludes
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|includedGroups
argument_list|()
argument_list|,
name|gy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listNonExistingGroupMembers_NotFound ()
specifier|public
name|void
name|listNonExistingGroupMembers_NotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"non-existing"
argument_list|)
operator|.
name|members
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listEmptyGroupMembers ()
specifier|public
name|void
name|listEmptyGroupMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|group
init|=
name|createGroup
argument_list|(
literal|"empty"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|members
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listNonEmptyGroupMembers ()
specifier|public
name|void
name|listNonEmptyGroupMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|group
init|=
name|createGroup
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|String
name|user1
init|=
name|createAccount
argument_list|(
literal|"user1"
argument_list|,
name|group
argument_list|)
decl_stmt|;
name|String
name|user2
init|=
name|createAccount
argument_list|(
literal|"user2"
argument_list|,
name|group
argument_list|)
decl_stmt|;
name|assertMembers
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|members
argument_list|()
argument_list|,
name|user1
argument_list|,
name|user2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listOneGroupMember ()
specifier|public
name|void
name|listOneGroupMember
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|group
init|=
name|createGroup
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|createAccount
argument_list|(
literal|"user1"
argument_list|,
name|group
argument_list|)
decl_stmt|;
name|assertMembers
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|members
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listGroupMembersRecursively ()
specifier|public
name|void
name|listGroupMembersRecursively
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|gx
init|=
name|createGroup
argument_list|(
literal|"gx"
argument_list|)
decl_stmt|;
name|String
name|ux
init|=
name|createAccount
argument_list|(
literal|"ux"
argument_list|,
name|gx
argument_list|)
decl_stmt|;
name|String
name|gy
init|=
name|createGroup
argument_list|(
literal|"gy"
argument_list|)
decl_stmt|;
name|String
name|uy
init|=
name|createAccount
argument_list|(
literal|"uy"
argument_list|,
name|gy
argument_list|)
decl_stmt|;
name|String
name|gz
init|=
name|createGroup
argument_list|(
literal|"gz"
argument_list|)
decl_stmt|;
name|String
name|uz
init|=
name|createAccount
argument_list|(
literal|"uz"
argument_list|,
name|gz
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|addGroups
argument_list|(
name|gy
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gy
argument_list|)
operator|.
name|addGroups
argument_list|(
name|gz
argument_list|)
expr_stmt|;
name|assertMembers
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|members
argument_list|()
argument_list|,
name|ux
argument_list|)
expr_stmt|;
name|assertMembers
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|members
argument_list|(
literal|true
argument_list|)
argument_list|,
name|ux
argument_list|,
name|uy
argument_list|,
name|uz
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|defaultGroupsCreated ()
specifier|public
name|void
name|defaultGroupsCreated
parameter_list|()
throws|throws
name|Exception
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|names
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|names
argument_list|)
operator|.
name|containsAllOf
argument_list|(
literal|"Administrators"
argument_list|,
literal|"Non-Interactive Users"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listAllGroups ()
specifier|public
name|void
name|listAllGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expectedGroups
init|=
name|groupCache
operator|.
name|all
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|expectedGroups
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isAtLeast
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedGroups
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onlyVisibleGroupsReturned ()
specifier|public
name|void
name|onlyVisibleGroupsReturned
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newGroupName
init|=
name|name
argument_list|(
literal|"newGroup"
argument_list|)
decl_stmt|;
name|GroupInput
name|in
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|newGroupName
expr_stmt|;
name|in
operator|.
name|description
operator|=
literal|"a hidden group"
expr_stmt|;
name|in
operator|.
name|visibleToAll
operator|=
literal|false
expr_stmt|;
name|in
operator|.
name|ownerId
operator|=
name|getFromCache
argument_list|(
literal|"Administrators"
argument_list|)
operator|.
name|getGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|getAsMap
argument_list|()
argument_list|)
operator|.
name|doesNotContainKey
argument_list|(
name|newGroupName
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|newGroupName
argument_list|)
operator|.
name|addMembers
argument_list|(
name|user
operator|.
name|username
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|getAsMap
argument_list|()
argument_list|)
operator|.
name|containsKey
argument_list|(
name|newGroupName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|suggestGroup ()
specifier|public
name|void
name|suggestGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|GroupInfo
argument_list|>
name|groups
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withSuggest
argument_list|(
literal|"adm"
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"Administrators"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|allGroupInfoFieldsSetCorrectly ()
specifier|public
name|void
name|allGroupInfoFieldsSetCorrectly
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
name|adminGroup
init|=
name|getFromCache
argument_list|(
literal|"Administrators"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GroupInfo
argument_list|>
name|groups
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|addGroup
argument_list|(
name|adminGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"Administrators"
argument_list|)
expr_stmt|;
name|assertGroupInfo
argument_list|(
name|adminGroup
argument_list|,
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|groups
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getAuditLog ()
specifier|public
name|void
name|getAuditLog
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupApi
name|g
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"group"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|GroupAuditEventInfo
argument_list|>
name|auditEvents
init|=
name|g
operator|.
name|auditLog
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_USER
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|admin
operator|.
name|id
argument_list|)
expr_stmt|;
name|g
operator|.
name|addMembers
argument_list|(
name|user
operator|.
name|username
argument_list|)
expr_stmt|;
name|auditEvents
operator|=
name|g
operator|.
name|auditLog
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_USER
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|user
operator|.
name|id
argument_list|)
expr_stmt|;
name|g
operator|.
name|removeMembers
argument_list|(
name|user
operator|.
name|username
argument_list|)
expr_stmt|;
name|auditEvents
operator|=
name|g
operator|.
name|auditLog
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|REMOVE_USER
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|user
operator|.
name|id
argument_list|)
expr_stmt|;
name|String
name|otherGroup
init|=
name|name
argument_list|(
literal|"otherGroup"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|otherGroup
argument_list|)
expr_stmt|;
name|g
operator|.
name|addGroups
argument_list|(
name|otherGroup
argument_list|)
expr_stmt|;
name|auditEvents
operator|=
name|g
operator|.
name|auditLog
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_GROUP
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|otherGroup
argument_list|)
expr_stmt|;
name|g
operator|.
name|removeGroups
argument_list|(
name|otherGroup
argument_list|)
expr_stmt|;
name|auditEvents
operator|=
name|g
operator|.
name|auditLog
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|REMOVE_GROUP
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|otherGroup
argument_list|)
expr_stmt|;
name|Timestamp
name|lastDate
init|=
literal|null
decl_stmt|;
for|for
control|(
name|GroupAuditEventInfo
name|auditEvent
range|:
name|auditEvents
control|)
block|{
if|if
condition|(
name|lastDate
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|lastDate
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|auditEvent
operator|.
name|date
argument_list|)
expr_stmt|;
block|}
name|lastDate
operator|=
name|auditEvent
operator|.
name|date
expr_stmt|;
block|}
block|}
comment|// reindex is tested by {@link AbstractQueryGroupsTest#reindex}
annotation|@
name|Test
DECL|method|reindexPermissions ()
specifier|public
name|void
name|reindexPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|groupOwner
init|=
name|accounts
operator|.
name|user2
argument_list|()
decl_stmt|;
name|GroupInput
name|in
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|name
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|in
operator|.
name|members
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|groupOwner
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|u
lambda|->
name|u
operator|.
name|id
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|visibleToAll
operator|=
literal|true
expr_stmt|;
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// admin can reindex any group
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|index
argument_list|()
expr_stmt|;
comment|// group owner can reindex own group (group is owned by itself)
name|setApiUser
argument_list|(
name|groupOwner
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|index
argument_list|()
expr_stmt|;
comment|// user cannot reindex any group
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"not allowed to index group"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|index
argument_list|()
expr_stmt|;
block|}
DECL|method|assertAuditEvent ( GroupAuditEventInfo info, Type expectedType, Account.Id expectedUser, Account.Id expectedMember)
specifier|private
name|void
name|assertAuditEvent
parameter_list|(
name|GroupAuditEventInfo
name|info
parameter_list|,
name|Type
name|expectedType
parameter_list|,
name|Account
operator|.
name|Id
name|expectedUser
parameter_list|,
name|Account
operator|.
name|Id
name|expectedMember
parameter_list|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|user
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedUser
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|type
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedType
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|UserMemberAuditEventInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|UserMemberAuditEventInfo
operator|)
name|info
operator|)
operator|.
name|member
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMember
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAuditEvent ( GroupAuditEventInfo info, Type expectedType, Account.Id expectedUser, String expectedMemberGroupName)
specifier|private
name|void
name|assertAuditEvent
parameter_list|(
name|GroupAuditEventInfo
name|info
parameter_list|,
name|Type
name|expectedType
parameter_list|,
name|Account
operator|.
name|Id
name|expectedUser
parameter_list|,
name|String
name|expectedMemberGroupName
parameter_list|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|user
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedUser
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|type
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedType
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|GroupMemberAuditEventInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|GroupMemberAuditEventInfo
operator|)
name|info
operator|)
operator|.
name|member
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMemberGroupName
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMembers (String group, TestAccount... expectedMembers)
specifier|private
name|void
name|assertMembers
parameter_list|(
name|String
name|group
parameter_list|,
name|TestAccount
modifier|...
name|expectedMembers
parameter_list|)
throws|throws
name|Exception
block|{
name|assertMembers
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|members
argument_list|()
argument_list|,
name|TestAccount
operator|.
name|names
argument_list|(
name|expectedMembers
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
name|assertAccountInfos
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedMembers
argument_list|)
argument_list|,
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|members
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMembers (Iterable<AccountInfo> members, String... expectedNames)
specifier|private
name|void
name|assertMembers
parameter_list|(
name|Iterable
argument_list|<
name|AccountInfo
argument_list|>
name|members
parameter_list|,
name|String
modifier|...
name|expectedNames
parameter_list|)
block|{
name|assertThat
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|members
argument_list|,
name|i
lambda|->
name|i
operator|.
name|name
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedNames
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNoMembers (String group)
specifier|private
name|void
name|assertNoMembers
parameter_list|(
name|String
name|group
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|members
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|assertIncludes (String group, String... expectedNames)
specifier|private
name|void
name|assertIncludes
parameter_list|(
name|String
name|group
parameter_list|,
name|String
modifier|...
name|expectedNames
parameter_list|)
throws|throws
name|Exception
block|{
name|assertIncludes
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|includedGroups
argument_list|()
argument_list|,
name|expectedNames
argument_list|)
expr_stmt|;
block|}
DECL|method|assertIncludes (Iterable<GroupInfo> includes, String... expectedNames)
specifier|private
specifier|static
name|void
name|assertIncludes
parameter_list|(
name|Iterable
argument_list|<
name|GroupInfo
argument_list|>
name|includes
parameter_list|,
name|String
modifier|...
name|expectedNames
parameter_list|)
block|{
name|assertThat
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|includes
argument_list|,
name|i
lambda|->
name|i
operator|.
name|name
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedNames
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNoIncludes (String group)
specifier|private
name|void
name|assertNoIncludes
parameter_list|(
name|String
name|group
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|includedGroups
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|getFromCache (String name)
specifier|private
name|AccountGroup
name|getFromCache
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|groupCache
operator|.
name|get
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createAccount (String name, String group)
specifier|private
name|String
name|createAccount
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|group
parameter_list|)
throws|throws
name|Exception
block|{
name|name
operator|=
name|name
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|accounts
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|group
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

