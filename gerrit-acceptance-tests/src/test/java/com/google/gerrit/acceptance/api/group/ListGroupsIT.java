begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.group
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|group
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|group
operator|.
name|GroupAssert
operator|.
name|assertGroupInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|groups
operator|.
name|GroupInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|ListGroupsIT
specifier|public
class|class
name|ListGroupsIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Test
DECL|method|defaultGroupsCreated ()
specifier|public
name|void
name|defaultGroupsCreated
parameter_list|()
throws|throws
name|Exception
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|names
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|names
argument_list|)
operator|.
name|containsAllOf
argument_list|(
literal|"Administrators"
argument_list|,
literal|"Non-Interactive Users"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListAllGroups ()
specifier|public
name|void
name|testListAllGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expectedGroups
init|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|groupCache
operator|.
name|all
argument_list|()
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|Function
argument_list|<
name|AccountGroup
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|AccountGroup
name|group
parameter_list|)
block|{
return|return
name|group
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|toSortedList
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|expectedGroups
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isAtLeast
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedGroups
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOnlyVisibleGroupsReturned ()
specifier|public
name|void
name|testOnlyVisibleGroupsReturned
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newGroupName
init|=
name|name
argument_list|(
literal|"newGroup"
argument_list|)
decl_stmt|;
name|GroupInput
name|in
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|newGroupName
expr_stmt|;
name|in
operator|.
name|description
operator|=
literal|"a hidden group"
expr_stmt|;
name|in
operator|.
name|visibleToAll
operator|=
literal|false
expr_stmt|;
name|in
operator|.
name|ownerId
operator|=
name|getFromCache
argument_list|(
literal|"Administrators"
argument_list|)
operator|.
name|getGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|getAsMap
argument_list|()
argument_list|)
operator|.
name|doesNotContainKey
argument_list|(
name|newGroupName
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|newGroupName
argument_list|)
operator|.
name|addMembers
argument_list|(
name|user
operator|.
name|username
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|getAsMap
argument_list|()
argument_list|)
operator|.
name|containsKey
argument_list|(
name|newGroupName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllGroupInfoFieldsSetCorrectly ()
specifier|public
name|void
name|testAllGroupInfoFieldsSetCorrectly
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
name|adminGroup
init|=
name|getFromCache
argument_list|(
literal|"Administrators"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GroupInfo
argument_list|>
name|groups
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|addGroup
argument_list|(
name|adminGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"Administrators"
argument_list|)
expr_stmt|;
name|assertGroupInfo
argument_list|(
name|adminGroup
argument_list|,
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|groups
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getFromCache (String name)
specifier|private
name|AccountGroup
name|getFromCache
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|groupCache
operator|.
name|get
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

