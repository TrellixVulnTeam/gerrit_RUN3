begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|pushHead
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|EditInfoSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|RawInputUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|EditInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangesCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|GetRelated
operator|.
name|ChangeAndCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|GetRelated
operator|.
name|RelatedInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdateOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestTimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GetRelatedIT
specifier|public
class|class
name|GetRelatedIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|systemTimeZone
specifier|private
name|String
name|systemTimeZone
decl_stmt|;
annotation|@
name|Before
DECL|method|setTimeForTesting ()
specifier|public
name|void
name|setTimeForTesting
parameter_list|()
block|{
name|systemTimeZone
operator|=
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.timezone"
argument_list|,
literal|"US/Eastern"
argument_list|)
expr_stmt|;
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|resetTime ()
specifier|public
name|void
name|resetTime
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.timezone"
argument_list|,
name|systemTimeZone
argument_list|)
expr_stmt|;
block|}
DECL|field|changes
annotation|@
name|Inject
specifier|private
name|ChangesCollection
name|changes
decl_stmt|;
annotation|@
name|Test
DECL|method|getRelatedNoResult ()
specifier|public
name|void
name|getRelatedNoResult
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|assertRelated
argument_list|(
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getRelatedLinear ()
specifier|public
name|void
name|getRelatedLinear
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1,1---2,1
name|RevCommit
name|c1_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1_1
init|=
name|getPatchSetId
argument_list|(
name|c1_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2_1
init|=
name|getPatchSetId
argument_list|(
name|c2_1
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSet
operator|.
name|Id
name|ps
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ps2_1
argument_list|,
name|ps1_1
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|ps
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_1
argument_list|,
name|c2_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_1
argument_list|,
name|c1_1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|getRelatedLinearSeparatePushes ()
specifier|public
name|void
name|getRelatedLinearSeparatePushes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1,1---2,1
name|RevCommit
name|c1_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c1_1
argument_list|)
expr_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1_1
init|=
name|getPatchSetId
argument_list|(
name|c1_1
argument_list|)
decl_stmt|;
name|String
name|oldETag
init|=
name|changes
operator|.
name|parse
argument_list|(
name|ps1_1
operator|.
name|getParentKey
argument_list|()
argument_list|)
operator|.
name|getETag
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c2_1
argument_list|)
expr_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2_1
init|=
name|getPatchSetId
argument_list|(
name|c2_1
argument_list|)
decl_stmt|;
comment|// Push of change 2 should not affect groups (or anything else) of change 1.
name|assertThat
argument_list|(
name|changes
operator|.
name|parse
argument_list|(
name|ps1_1
operator|.
name|getParentKey
argument_list|()
argument_list|)
operator|.
name|getETag
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|oldETag
argument_list|)
expr_stmt|;
for|for
control|(
name|PatchSet
operator|.
name|Id
name|ps
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ps2_1
argument_list|,
name|ps1_1
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|ps
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_1
argument_list|,
name|c2_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_1
argument_list|,
name|c1_1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|getRelatedReorder ()
specifier|public
name|void
name|getRelatedReorder
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1,1---2,1
comment|//
comment|// 2,2---1,2
comment|// Create two commits and push.
name|RevCommit
name|c1_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1_1
init|=
name|getPatchSetId
argument_list|(
name|c1_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2_1
init|=
name|getPatchSetId
argument_list|(
name|c2_1
argument_list|)
decl_stmt|;
comment|// Swap the order of commits and push again.
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~2"
argument_list|)
expr_stmt|;
name|RevCommit
name|c2_2
init|=
name|testRepo
operator|.
name|cherryPick
argument_list|(
name|c2_1
argument_list|)
decl_stmt|;
name|RevCommit
name|c1_2
init|=
name|testRepo
operator|.
name|cherryPick
argument_list|(
name|c1_1
argument_list|)
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1_2
init|=
name|getPatchSetId
argument_list|(
name|c1_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2_2
init|=
name|getPatchSetId
argument_list|(
name|c2_1
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSet
operator|.
name|Id
name|ps
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ps2_2
argument_list|,
name|ps1_2
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|ps
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_2
argument_list|,
name|c1_2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_2
argument_list|,
name|c2_2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchSet
operator|.
name|Id
name|ps
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ps2_1
argument_list|,
name|ps1_1
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|ps
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_1
argument_list|,
name|c2_1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_1
argument_list|,
name|c1_1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|getRelatedAmendParentChange ()
specifier|public
name|void
name|getRelatedAmendParentChange
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1,1---2,1
comment|//
comment|// 1,2
comment|// Create two commits and push.
name|RevCommit
name|c1_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1_1
init|=
name|getPatchSetId
argument_list|(
name|c1_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2_1
init|=
name|getPatchSetId
argument_list|(
name|c2_1
argument_list|)
decl_stmt|;
comment|// Amend parent change and push.
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~1"
argument_list|)
expr_stmt|;
name|RevCommit
name|c1_2
init|=
name|amendBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"c.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1_2
init|=
name|getPatchSetId
argument_list|(
name|c1_2
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSet
operator|.
name|Id
name|ps
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ps2_1
argument_list|,
name|ps1_1
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|ps
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_1
argument_list|,
name|c2_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_1
argument_list|,
name|c1_1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertRelated
argument_list|(
name|ps1_2
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_1
argument_list|,
name|c2_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_2
argument_list|,
name|c1_2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getRelatedReorderAndExtend ()
specifier|public
name|void
name|getRelatedReorderAndExtend
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1,1---2,1
comment|//
comment|// 2,2---1,2---3,1
comment|// Create two commits and push.
name|ObjectId
name|initial
init|=
name|repo
argument_list|()
operator|.
name|exactRef
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|RevCommit
name|c1_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1_1
init|=
name|getPatchSetId
argument_list|(
name|c1_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2_1
init|=
name|getPatchSetId
argument_list|(
name|c2_1
argument_list|)
decl_stmt|;
comment|// Swap the order of commits, create a new commit on top, and push again.
name|testRepo
operator|.
name|reset
argument_list|(
name|initial
argument_list|)
expr_stmt|;
name|RevCommit
name|c2_2
init|=
name|testRepo
operator|.
name|cherryPick
argument_list|(
name|c2_1
argument_list|)
decl_stmt|;
name|RevCommit
name|c1_2
init|=
name|testRepo
operator|.
name|cherryPick
argument_list|(
name|c1_1
argument_list|)
decl_stmt|;
name|RevCommit
name|c3_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"c.txt"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 3"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1_2
init|=
name|getPatchSetId
argument_list|(
name|c1_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2_2
init|=
name|getPatchSetId
argument_list|(
name|c2_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps3_1
init|=
name|getPatchSetId
argument_list|(
name|c3_1
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSet
operator|.
name|Id
name|ps
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ps3_1
argument_list|,
name|ps2_2
argument_list|,
name|ps1_2
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|ps
argument_list|,
name|changeAndCommit
argument_list|(
name|ps3_1
argument_list|,
name|c3_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_2
argument_list|,
name|c1_2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_2
argument_list|,
name|c2_2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchSet
operator|.
name|Id
name|ps
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ps2_1
argument_list|,
name|ps1_1
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|ps
argument_list|,
name|changeAndCommit
argument_list|(
name|ps3_1
argument_list|,
name|c3_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_1
argument_list|,
name|c2_1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_1
argument_list|,
name|c1_1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|getRelatedReworkSeries ()
specifier|public
name|void
name|getRelatedReworkSeries
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1,1---2,1---3,1
comment|//
comment|// 1,2---2,2---3,2
comment|// Create three commits and push.
name|RevCommit
name|c1_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c3_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 3"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1_1
init|=
name|getPatchSetId
argument_list|(
name|c1_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2_1
init|=
name|getPatchSetId
argument_list|(
name|c2_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps3_1
init|=
name|getPatchSetId
argument_list|(
name|c3_1
argument_list|)
decl_stmt|;
comment|// Amend all changes change and push.
name|testRepo
operator|.
name|reset
argument_list|(
name|c1_1
argument_list|)
expr_stmt|;
name|RevCommit
name|c1_2
init|=
name|amendBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2_2
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|message
argument_list|(
name|parseBody
argument_list|(
name|c2_1
argument_list|)
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c3_2
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|message
argument_list|(
name|parseBody
argument_list|(
name|c3_1
argument_list|)
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1_2
init|=
name|getPatchSetId
argument_list|(
name|c1_2
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2_2
init|=
name|getPatchSetId
argument_list|(
name|c2_2
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps3_2
init|=
name|getPatchSetId
argument_list|(
name|c3_2
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSet
operator|.
name|Id
name|ps
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ps1_1
argument_list|,
name|ps2_1
argument_list|,
name|ps3_1
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|ps
argument_list|,
name|changeAndCommit
argument_list|(
name|ps3_1
argument_list|,
name|c3_1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_1
argument_list|,
name|c2_1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_1
argument_list|,
name|c1_1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchSet
operator|.
name|Id
name|ps
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ps1_2
argument_list|,
name|ps2_2
argument_list|,
name|ps3_2
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|ps
argument_list|,
name|changeAndCommit
argument_list|(
name|ps3_2
argument_list|,
name|c3_2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_2
argument_list|,
name|c2_2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_2
argument_list|,
name|c1_2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|getRelatedReworkThenExtendInTheMiddleOfSeries ()
specifier|public
name|void
name|getRelatedReworkThenExtendInTheMiddleOfSeries
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1,1---2,1---3,1
comment|//
comment|// 1,2---2,2---3,2
comment|//   \---4,1
comment|// Create three commits and push.
name|RevCommit
name|c1_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c3_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 3"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1_1
init|=
name|getPatchSetId
argument_list|(
name|c1_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2_1
init|=
name|getPatchSetId
argument_list|(
name|c2_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps3_1
init|=
name|getPatchSetId
argument_list|(
name|c3_1
argument_list|)
decl_stmt|;
comment|// Amend all changes change and push.
name|testRepo
operator|.
name|reset
argument_list|(
name|c1_1
argument_list|)
expr_stmt|;
name|RevCommit
name|c1_2
init|=
name|amendBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2_2
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|message
argument_list|(
name|parseBody
argument_list|(
name|c2_1
argument_list|)
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c3_2
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|message
argument_list|(
name|parseBody
argument_list|(
name|c3_1
argument_list|)
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1_2
init|=
name|getPatchSetId
argument_list|(
name|c1_2
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2_2
init|=
name|getPatchSetId
argument_list|(
name|c2_2
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps3_2
init|=
name|getPatchSetId
argument_list|(
name|c3_2
argument_list|)
decl_stmt|;
comment|// Add one more commit 4,1 based on 1,2.
name|testRepo
operator|.
name|reset
argument_list|(
name|c1_2
argument_list|)
expr_stmt|;
name|RevCommit
name|c4_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"d.txt"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 4"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps4_1
init|=
name|getPatchSetId
argument_list|(
name|c4_1
argument_list|)
decl_stmt|;
comment|// 1,1 is related indirectly to 4,1.
name|assertRelated
argument_list|(
name|ps1_1
argument_list|,
name|changeAndCommit
argument_list|(
name|ps4_1
argument_list|,
name|c4_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps3_1
argument_list|,
name|c3_1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_1
argument_list|,
name|c2_1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_1
argument_list|,
name|c1_1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2,1 and 3,1 don't include 4,1 since we don't walk forward after walking
comment|// backward.
for|for
control|(
name|PatchSet
operator|.
name|Id
name|ps
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ps2_1
argument_list|,
name|ps3_1
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|ps
argument_list|,
name|changeAndCommit
argument_list|(
name|ps3_1
argument_list|,
name|c3_1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_1
argument_list|,
name|c2_1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_1
argument_list|,
name|c1_1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 1,2 is related directly to 4,1, and the 2-3 parallel branch stays intact.
name|assertRelated
argument_list|(
name|ps1_2
argument_list|,
name|changeAndCommit
argument_list|(
name|ps4_1
argument_list|,
name|c4_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps3_2
argument_list|,
name|c3_2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_2
argument_list|,
name|c2_2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_2
argument_list|,
name|c1_2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4,1 is only related to 1,2, since we don't walk forward after walking
comment|// backward.
name|assertRelated
argument_list|(
name|ps4_1
argument_list|,
name|changeAndCommit
argument_list|(
name|ps4_1
argument_list|,
name|c4_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_2
argument_list|,
name|c1_2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2,2 and 3,2 don't include 4,1 since we don't walk forward after walking
comment|// backward.
for|for
control|(
name|PatchSet
operator|.
name|Id
name|ps
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ps2_2
argument_list|,
name|ps3_2
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|ps
argument_list|,
name|changeAndCommit
argument_list|(
name|ps3_2
argument_list|,
name|c3_2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_2
argument_list|,
name|c2_2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_2
argument_list|,
name|c1_2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|getRelatedCrissCrossDependency ()
specifier|public
name|void
name|getRelatedCrissCrossDependency
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1,1---2,1---3,2
comment|//
comment|// 1,2---2,2---3,1
comment|// Create two commits and push.
name|RevCommit
name|c1_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1_1
init|=
name|getPatchSetId
argument_list|(
name|c1_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2_1
init|=
name|getPatchSetId
argument_list|(
name|c2_1
argument_list|)
decl_stmt|;
comment|// Amend both changes change and push.
name|testRepo
operator|.
name|reset
argument_list|(
name|c1_1
argument_list|)
expr_stmt|;
name|RevCommit
name|c1_2
init|=
name|amendBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2_2
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|message
argument_list|(
name|parseBody
argument_list|(
name|c2_1
argument_list|)
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1_2
init|=
name|getPatchSetId
argument_list|(
name|c1_2
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2_2
init|=
name|getPatchSetId
argument_list|(
name|c2_2
argument_list|)
decl_stmt|;
comment|// PS 3,1 depends on 2,2.
name|RevCommit
name|c3_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"c.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 3"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps3_1
init|=
name|getPatchSetId
argument_list|(
name|c3_1
argument_list|)
decl_stmt|;
comment|// PS 3,2 depends on 2,1.
name|testRepo
operator|.
name|reset
argument_list|(
name|c2_1
argument_list|)
expr_stmt|;
name|RevCommit
name|c3_2
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"c.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|message
argument_list|(
name|parseBody
argument_list|(
name|c3_1
argument_list|)
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps3_2
init|=
name|getPatchSetId
argument_list|(
name|c3_2
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSet
operator|.
name|Id
name|ps
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ps1_1
argument_list|,
name|ps2_1
argument_list|,
name|ps3_2
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|ps
argument_list|,
name|changeAndCommit
argument_list|(
name|ps3_2
argument_list|,
name|c3_2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_1
argument_list|,
name|c2_1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_1
argument_list|,
name|c1_1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchSet
operator|.
name|Id
name|ps
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ps1_2
argument_list|,
name|ps2_2
argument_list|,
name|ps3_1
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|ps
argument_list|,
name|changeAndCommit
argument_list|(
name|ps3_1
argument_list|,
name|c3_1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_2
argument_list|,
name|c2_2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_2
argument_list|,
name|c1_2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|getRelatedParallelDescendentBranches ()
specifier|public
name|void
name|getRelatedParallelDescendentBranches
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1,1---2,1---3,1
comment|//   \---4,1---5,1
comment|//    \--6,1---7,1
name|RevCommit
name|c1_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c3_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"c.txt"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 3"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1_1
init|=
name|getPatchSetId
argument_list|(
name|c1_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2_1
init|=
name|getPatchSetId
argument_list|(
name|c2_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps3_1
init|=
name|getPatchSetId
argument_list|(
name|c3_1
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c1_1
argument_list|)
expr_stmt|;
name|RevCommit
name|c4_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"d.txt"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 4"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c5_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"e.txt"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 5"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps4_1
init|=
name|getPatchSetId
argument_list|(
name|c4_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps5_1
init|=
name|getPatchSetId
argument_list|(
name|c5_1
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c1_1
argument_list|)
expr_stmt|;
name|RevCommit
name|c6_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"f.txt"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 6"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c7_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"g.txt"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 7"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps6_1
init|=
name|getPatchSetId
argument_list|(
name|c6_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps7_1
init|=
name|getPatchSetId
argument_list|(
name|c7_1
argument_list|)
decl_stmt|;
comment|// All changes are related to 1,1, keeping each of the parallel branches
comment|// intact.
name|assertRelated
argument_list|(
name|ps1_1
argument_list|,
name|changeAndCommit
argument_list|(
name|ps7_1
argument_list|,
name|c7_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps6_1
argument_list|,
name|c6_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps5_1
argument_list|,
name|c5_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps4_1
argument_list|,
name|c4_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps3_1
argument_list|,
name|c3_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_1
argument_list|,
name|c2_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_1
argument_list|,
name|c1_1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// The 2-3 branch is only related back to 1, not the other branches.
for|for
control|(
name|PatchSet
operator|.
name|Id
name|ps
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ps2_1
argument_list|,
name|ps3_1
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|ps
argument_list|,
name|changeAndCommit
argument_list|(
name|ps3_1
argument_list|,
name|c3_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_1
argument_list|,
name|c2_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_1
argument_list|,
name|c1_1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The 4-5 branch is only related back to 1, not the other branches.
for|for
control|(
name|PatchSet
operator|.
name|Id
name|ps
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ps4_1
argument_list|,
name|ps5_1
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|ps
argument_list|,
name|changeAndCommit
argument_list|(
name|ps5_1
argument_list|,
name|c5_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps4_1
argument_list|,
name|c4_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_1
argument_list|,
name|c1_1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The 6-7 branch is only related back to 1, not the other branches.
for|for
control|(
name|PatchSet
operator|.
name|Id
name|ps
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ps6_1
argument_list|,
name|ps7_1
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|ps
argument_list|,
name|changeAndCommit
argument_list|(
name|ps7_1
argument_list|,
name|c7_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps6_1
argument_list|,
name|c6_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_1
argument_list|,
name|c1_1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|getRelatedEdit ()
specifier|public
name|void
name|getRelatedEdit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1,1---2,1---3,1
comment|//   \---2,E---/
name|RevCommit
name|c1_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c3_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"c.txt"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 3"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Change
name|ch2
init|=
name|getChange
argument_list|(
name|c2_1
argument_list|)
operator|.
name|change
argument_list|()
decl_stmt|;
name|String
name|changeId2
init|=
name|ch2
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
literal|"a.txt"
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'a'
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|EditInfo
argument_list|>
name|edit
init|=
name|getEdit
argument_list|(
name|changeId2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|ObjectId
name|editRev
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|commit
operator|.
name|commit
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1_1
init|=
name|getPatchSetId
argument_list|(
name|c1_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2_1
init|=
name|getPatchSetId
argument_list|(
name|c2_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2_edit
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|ch2
operator|.
name|getId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps3_1
init|=
name|getPatchSetId
argument_list|(
name|c3_1
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSet
operator|.
name|Id
name|ps
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|ps1_1
argument_list|,
name|ps2_1
argument_list|,
name|ps3_1
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|ps
argument_list|,
name|changeAndCommit
argument_list|(
name|ps3_1
argument_list|,
name|c3_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps2_1
argument_list|,
name|c2_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_1
argument_list|,
name|c1_1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertRelated
argument_list|(
name|ps2_edit
argument_list|,
name|changeAndCommit
argument_list|(
name|ps3_1
argument_list|,
name|c3_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|ch2
operator|.
name|getId
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
name|editRev
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|ps1_1
argument_list|,
name|c1_1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushNewPatchSetWhenParentHasNullGroup ()
specifier|public
name|void
name|pushNewPatchSetWhenParentHasNullGroup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1,1---2,1
comment|//   \---2,2
name|RevCommit
name|c1_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId1_1
init|=
name|getPatchSetId
argument_list|(
name|c1_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2_1
init|=
name|getPatchSetId
argument_list|(
name|c2_1
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSet
operator|.
name|Id
name|psId
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|psId1_1
argument_list|,
name|psId2_1
argument_list|)
control|)
block|{
name|assertRelated
argument_list|(
name|psId
argument_list|,
name|changeAndCommit
argument_list|(
name|psId2_1
argument_list|,
name|c2_1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|psId1_1
argument_list|,
name|c1_1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Pretend PS1,1 was pushed before the groups field was added.
name|clearGroups
argument_list|(
name|psId1_1
argument_list|)
expr_stmt|;
name|indexer
operator|.
name|index
argument_list|(
name|changeDataFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|psId1_1
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// PS1,1 has no groups, so disappeared from related changes.
name|assertRelated
argument_list|(
name|psId2_1
argument_list|)
expr_stmt|;
name|RevCommit
name|c2_2
init|=
name|testRepo
operator|.
name|amend
argument_list|(
name|c2_1
argument_list|)
operator|.
name|add
argument_list|(
literal|"c.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c2_2
argument_list|)
expr_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2_2
init|=
name|getPatchSetId
argument_list|(
name|c2_2
argument_list|)
decl_stmt|;
comment|// Push updated the group for PS1,1, so it shows up in related changes even
comment|// though a new patch set was not pushed.
name|assertRelated
argument_list|(
name|psId2_2
argument_list|,
name|changeAndCommit
argument_list|(
name|psId2_2
argument_list|,
name|c2_2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|psId1_1
argument_list|,
name|c1_1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"index.autoReindexIfStale"
argument_list|,
name|value
operator|=
literal|"false"
argument_list|)
DECL|method|getRelatedForStaleChange ()
specifier|public
name|void
name|getRelatedForStaleChange
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|c1_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2_1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|RevCommit
name|c2_2
init|=
name|testRepo
operator|.
name|amend
argument_list|(
name|c2_1
argument_list|)
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c2_2
argument_list|)
expr_stmt|;
name|disableChangeIndexWrites
argument_list|()
expr_stmt|;
try|try
block|{
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|enableChangeIndexWrites
argument_list|()
expr_stmt|;
block|}
name|PatchSet
operator|.
name|Id
name|psId1_1
init|=
name|getPatchSetId
argument_list|(
name|c1_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2_1
init|=
name|getPatchSetId
argument_list|(
name|c2_1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2_2
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|psId2_1
operator|.
name|changeId
argument_list|,
name|psId2_1
operator|.
name|get
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertRelated
argument_list|(
name|psId2_2
argument_list|,
name|changeAndCommit
argument_list|(
name|psId2_2
argument_list|,
name|c2_2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|changeAndCommit
argument_list|(
name|psId1_1
argument_list|,
name|c1_1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getRelated (PatchSet.Id ps)
specifier|private
name|List
argument_list|<
name|ChangeAndCommit
argument_list|>
name|getRelated
parameter_list|(
name|PatchSet
operator|.
name|Id
name|ps
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getRelated
argument_list|(
name|ps
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|ps
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getRelated (Change.Id changeId, int ps)
specifier|private
name|List
argument_list|<
name|ChangeAndCommit
argument_list|>
name|getRelated
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|int
name|ps
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|String
operator|.
name|format
argument_list|(
literal|"/changes/%d/revisions/%d/related"
argument_list|,
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|ps
argument_list|)
decl_stmt|;
name|RestResponse
name|r
init|=
name|adminRestSession
operator|.
name|get
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOK
argument_list|()
expr_stmt|;
return|return
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
name|RelatedInfo
operator|.
name|class
argument_list|)
operator|.
name|changes
return|;
block|}
DECL|method|parseBody (RevCommit c)
specifier|private
name|RevCommit
name|parseBody
parameter_list|(
name|RevCommit
name|c
parameter_list|)
throws|throws
name|Exception
block|{
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
DECL|method|getPatchSetId (ObjectId c)
specifier|private
name|PatchSet
operator|.
name|Id
name|getPatchSetId
parameter_list|(
name|ObjectId
name|c
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getChange
argument_list|(
name|c
argument_list|)
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
return|;
block|}
DECL|method|getChange (ObjectId c)
specifier|private
name|ChangeData
name|getChange
parameter_list|(
name|ObjectId
name|c
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byCommit
argument_list|(
name|c
argument_list|)
argument_list|)
return|;
block|}
DECL|method|changeAndCommit ( PatchSet.Id psId, ObjectId commitId, int currentRevisionNum)
specifier|private
name|ChangeAndCommit
name|changeAndCommit
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|ObjectId
name|commitId
parameter_list|,
name|int
name|currentRevisionNum
parameter_list|)
block|{
name|ChangeAndCommit
name|result
init|=
operator|new
name|ChangeAndCommit
argument_list|()
decl_stmt|;
name|result
operator|.
name|project
operator|=
name|project
operator|.
name|get
argument_list|()
expr_stmt|;
name|result
operator|.
name|_changeNumber
operator|=
name|psId
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|result
operator|.
name|commit
operator|=
operator|new
name|CommitInfo
argument_list|()
expr_stmt|;
name|result
operator|.
name|commit
operator|.
name|commit
operator|=
name|commitId
operator|.
name|name
argument_list|()
expr_stmt|;
name|result
operator|.
name|_revisionNumber
operator|=
name|psId
operator|.
name|get
argument_list|()
expr_stmt|;
name|result
operator|.
name|_currentRevisionNumber
operator|=
name|currentRevisionNum
expr_stmt|;
name|result
operator|.
name|status
operator|=
literal|"NEW"
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|clearGroups (PatchSet.Id psId)
specifier|private
name|void
name|clearGroups
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|batchUpdateFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|user
argument_list|(
name|user
argument_list|)
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
init|)
block|{
name|bu
operator|.
name|addOp
argument_list|(
name|psId
operator|.
name|getParentKey
argument_list|()
argument_list|,
operator|new
name|BatchUpdateOp
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|OrmException
block|{
name|PatchSet
name|ps
init|=
name|psUtil
operator|.
name|get
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|,
name|psId
argument_list|)
decl_stmt|;
name|psUtil
operator|.
name|setGroups
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getUpdate
argument_list|(
name|psId
argument_list|)
argument_list|,
name|ps
argument_list|,
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|dontBumpLastUpdatedOn
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertRelated (PatchSet.Id psId, ChangeAndCommit... expected)
specifier|private
name|void
name|assertRelated
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|ChangeAndCommit
modifier|...
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ChangeAndCommit
argument_list|>
name|actual
init|=
name|getRelated
argument_list|(
name|psId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|named
argument_list|(
literal|"related to "
operator|+
name|psId
argument_list|)
operator|.
name|hasSize
argument_list|(
name|expected
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actual
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
literal|"index "
operator|+
name|i
operator|+
literal|" related to "
operator|+
name|psId
decl_stmt|;
name|ChangeAndCommit
name|a
init|=
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ChangeAndCommit
name|e
init|=
name|expected
index|[
name|i
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|project
argument_list|)
operator|.
name|named
argument_list|(
literal|"project of "
operator|+
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|e
operator|.
name|project
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|_changeNumber
argument_list|)
operator|.
name|named
argument_list|(
literal|"change ID of "
operator|+
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|e
operator|.
name|_changeNumber
argument_list|)
expr_stmt|;
comment|// Don't bother checking changeId; assume _changeNumber is sufficient.
name|assertThat
argument_list|(
name|a
operator|.
name|_revisionNumber
argument_list|)
operator|.
name|named
argument_list|(
literal|"revision of "
operator|+
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|e
operator|.
name|_revisionNumber
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|commit
operator|.
name|commit
argument_list|)
operator|.
name|named
argument_list|(
literal|"commit of "
operator|+
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|e
operator|.
name|commit
operator|.
name|commit
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|_currentRevisionNumber
argument_list|)
operator|.
name|named
argument_list|(
literal|"current revision of "
operator|+
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|e
operator|.
name|_currentRevisionNumber
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

