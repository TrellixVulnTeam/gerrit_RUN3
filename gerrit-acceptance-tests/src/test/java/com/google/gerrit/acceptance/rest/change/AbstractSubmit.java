begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|getOnlyElement
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assert_
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CURRENT_REVISION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|DETAILED_LABELS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|SUBMITTABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|CHANGE_OWNER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|SubmitInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|InheritableBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|LabelInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BinaryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|UiAction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|RevisionResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|Submit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|ConfigSuite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestTimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|DiffFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|AbstractSubmit
specifier|public
specifier|abstract
class|class
name|AbstractSubmit
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|ConfigSuite
operator|.
name|Config
DECL|method|submitWholeTopicEnabled ()
specifier|public
specifier|static
name|Config
name|submitWholeTopicEnabled
parameter_list|()
block|{
return|return
name|submitWholeTopicEnabledConfig
argument_list|()
return|;
block|}
annotation|@
name|Inject
DECL|field|approvalsUtil
specifier|private
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
annotation|@
name|Inject
DECL|field|submitHandler
specifier|private
name|Submit
name|submitHandler
decl_stmt|;
DECL|field|systemTimeZone
specifier|private
name|String
name|systemTimeZone
decl_stmt|;
annotation|@
name|Before
DECL|method|setTimeForTesting ()
specifier|public
name|void
name|setTimeForTesting
parameter_list|()
block|{
name|systemTimeZone
operator|=
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.timezone"
argument_list|,
literal|"US/Eastern"
argument_list|)
expr_stmt|;
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|resetTime ()
specifier|public
name|void
name|resetTime
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.timezone"
argument_list|,
name|systemTimeZone
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getSubmitType ()
specifier|protected
specifier|abstract
name|SubmitType
name|getSubmitType
parameter_list|()
function_decl|;
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|createEmptyCommit
operator|=
literal|false
argument_list|)
DECL|method|submitToEmptyRepo ()
specifier|public
name|void
name|submitToEmptyRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|initialHead
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|()
decl_stmt|;
name|BinaryResult
name|request
init|=
name|submitPreview
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|headAfterSubmitPreview
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterSubmitPreview
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|RevTree
argument_list|>
name|actual
init|=
name|fetchFromBundles
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getRemoteHead
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertRevTrees
argument_list|(
name|project
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitSingleChange ()
specifier|public
name|void
name|submitSingleChange
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|initialHead
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|()
decl_stmt|;
name|BinaryResult
name|request
init|=
name|submitPreview
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|headAfterSubmit
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterSubmit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|()
expr_stmt|;
name|assertChangeMergedEvents
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|RevTree
argument_list|>
name|actual
init|=
name|fetchFromBundles
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|CHERRY_PICK
operator|)
operator|||
operator|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|REBASE_ALWAYS
operator|)
condition|)
block|{
comment|// The change is updated as well:
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertRevTrees
argument_list|(
name|project
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitMultipleChangesOtherMergeConflictPreview ()
specifier|public
name|void
name|submitMultipleChangesOtherMergeConflictPreview
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|initialHead
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterFirstSubmit
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"Change 2"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"other content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
literal|"Change 3"
argument_list|,
literal|"d"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change4
init|=
name|createChange
argument_list|(
literal|"Change 4"
argument_list|,
literal|"e"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
comment|// change 2 is not approved, but we ignore labels
name|approve
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|BinaryResult
name|request
init|=
literal|null
decl_stmt|;
name|String
name|msg
init|=
literal|null
decl_stmt|;
try|try
block|{
name|request
operator|=
name|submitPreview
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|msg
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|CHERRY_PICK
condition|)
block|{
name|Map
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|RevTree
argument_list|>
name|s
init|=
name|fetchFromBundles
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertRevTrees
argument_list|(
name|project
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|FAST_FORWARD_ONLY
condition|)
block|{
name|assertThat
argument_list|(
name|msg
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Failed to submit 3 changes due to the following problems:\n"
operator|+
literal|"Change "
operator|+
name|change2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": internal error: "
operator|+
literal|"change not processed by merge strategy\n"
operator|+
literal|"Change "
operator|+
name|change3
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": internal error: "
operator|+
literal|"change not processed by merge strategy\n"
operator|+
literal|"Change "
operator|+
name|change4
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": Project policy "
operator|+
literal|"requires all submissions to be a fast-forward. Please "
operator|+
literal|"rebase the change locally and upload again for review."
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterSubmit
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterSubmit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|headAfterFirstSubmit
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|(
name|initialHead
argument_list|,
name|headAfterFirstSubmit
argument_list|)
expr_stmt|;
name|assertChangeMergedEvents
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterFirstSubmit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|REBASE_IF_NECESSARY
operator|)
operator|||
operator|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|REBASE_ALWAYS
operator|)
condition|)
block|{
name|String
name|change2hash
init|=
name|change2
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Cannot rebase "
operator|+
name|change2hash
operator|+
literal|": The change could "
operator|+
literal|"not be rebased due to a conflict during merge."
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterSubmit
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterSubmit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|headAfterFirstSubmit
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|(
name|initialHead
argument_list|,
name|headAfterFirstSubmit
argument_list|)
expr_stmt|;
name|assertChangeMergedEvents
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterFirstSubmit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|msg
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Failed to submit 3 changes due to the following problems:\n"
operator|+
literal|"Change "
operator|+
name|change2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": Change could not be "
operator|+
literal|"merged due to a path conflict. Please rebase the change "
operator|+
literal|"locally and upload the rebased commit for review.\n"
operator|+
literal|"Change "
operator|+
name|change3
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": Change could not be "
operator|+
literal|"merged due to a path conflict. Please rebase the change "
operator|+
literal|"locally and upload the rebased commit for review.\n"
operator|+
literal|"Change "
operator|+
name|change4
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": Change could not be "
operator|+
literal|"merged due to a path conflict. Please rebase the change "
operator|+
literal|"locally and upload the rebased commit for review."
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterSubmit
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterSubmit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|headAfterFirstSubmit
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|(
name|initialHead
argument_list|,
name|headAfterFirstSubmit
argument_list|)
expr_stmt|;
name|assertChangeMergedEvents
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterFirstSubmit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|submitMultipleChangesPreview ()
specifier|public
name|void
name|submitMultipleChangesPreview
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|initialHead
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"Change 2"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"other content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
literal|"Change 3"
argument_list|,
literal|"d"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change4
init|=
name|createChange
argument_list|(
literal|"Change 4"
argument_list|,
literal|"e"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
comment|// change 2 is not approved, but we ignore labels
name|approve
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|BinaryResult
name|request
init|=
name|submitPreview
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|expected
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|.
name|get
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"refs/heads/master"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|RevTree
argument_list|>
name|actual
init|=
name|fetchFromBundles
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|containsKey
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|CHERRY_PICK
condition|)
block|{
comment|// CherryPick ignores dependencies, thus only change and destination
comment|// branch refs are modified.
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|REBASE_ALWAYS
condition|)
block|{
comment|// RebaseAlways takes care of dependencies, therefore Change{2,3,4} and
comment|// destination branch will be modified.
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// check that the submit preview did not actually submit
name|RevCommit
name|headAfterSubmit
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterSubmit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|()
expr_stmt|;
name|assertChangeMergedEvents
argument_list|()
expr_stmt|;
comment|// now check we actually have the same content:
name|approve
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertRevTrees
argument_list|(
name|project
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitNoPermission ()
specifier|public
name|void
name|submitNoPermission
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create project where submit is blocked
name|Project
operator|.
name|NameKey
name|p
init|=
name|createProject
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|block
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|cloneProject
argument_list|(
name|p
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|repo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|submit
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|,
operator|new
name|SubmitInput
argument_list|()
argument_list|,
name|AuthException
operator|.
name|class
argument_list|,
literal|"submit not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noSelfSubmit ()
specifier|public
name|void
name|noSelfSubmit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create project where submit is blocked for the change owner
name|Project
operator|.
name|NameKey
name|p
init|=
name|createProject
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|p
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|Util
operator|.
name|block
argument_list|(
name|cfg
argument_list|,
name|Permission
operator|.
name|SUBMIT
argument_list|,
name|CHANGE_OWNER
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|cfg
argument_list|,
name|Permission
operator|.
name|SUBMIT
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|cfg
argument_list|,
name|Permission
operator|.
name|forLabel
argument_list|(
literal|"Code-Review"
argument_list|)
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|p
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|cloneProject
argument_list|(
name|p
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|repo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|owner
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|,
operator|new
name|SubmitInput
argument_list|()
argument_list|,
name|AuthException
operator|.
name|class
argument_list|,
literal|"submit not permitted"
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onlySelfSubmit ()
specifier|public
name|void
name|onlySelfSubmit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create project where only the change owner can submit
name|Project
operator|.
name|NameKey
name|p
init|=
name|createProject
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|p
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|Util
operator|.
name|block
argument_list|(
name|cfg
argument_list|,
name|Permission
operator|.
name|SUBMIT
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|cfg
argument_list|,
name|Permission
operator|.
name|SUBMIT
argument_list|,
name|CHANGE_OWNER
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|cfg
argument_list|,
name|Permission
operator|.
name|forLabel
argument_list|(
literal|"Code-Review"
argument_list|)
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|p
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|cloneProject
argument_list|(
name|p
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|repo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|owner
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|,
operator|new
name|SubmitInput
argument_list|()
argument_list|,
name|AuthException
operator|.
name|class
argument_list|,
literal|"submit not permitted"
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitWholeTopicMultipleProjects ()
specifier|public
name|void
name|submitWholeTopicMultipleProjects
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|String
name|topic
init|=
literal|"test-topic"
decl_stmt|;
comment|// Create test projects
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repoA
init|=
name|createProjectWithPush
argument_list|(
literal|"project-a"
argument_list|,
literal|null
argument_list|,
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repoB
init|=
name|createProjectWithPush
argument_list|(
literal|"project-b"
argument_list|,
literal|null
argument_list|,
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create changes on project-a
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
name|repoA
argument_list|,
literal|"master"
argument_list|,
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
name|repoA
argument_list|,
literal|"master"
argument_list|,
literal|"Change 2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
comment|// Create changes on project-b
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
name|repoB
argument_list|,
literal|"master"
argument_list|,
literal|"Change 3"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change4
init|=
name|createChange
argument_list|(
name|repoB
argument_list|,
literal|"master"
argument_list|,
literal|"Change 4"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedTopic
init|=
name|name
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|change1
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change2
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change3
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change4
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitWholeTopicMultipleBranchesOnSameProject ()
specifier|public
name|void
name|submitWholeTopicMultipleBranchesOnSameProject
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|String
name|topic
init|=
literal|"test-topic"
decl_stmt|;
comment|// Create test project
name|String
name|projectName
init|=
literal|"project-a"
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repoA
init|=
name|createProjectWithPush
argument_list|(
name|projectName
argument_list|,
literal|null
argument_list|,
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|initialHead
init|=
name|getRemoteHead
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|name
argument_list|(
name|projectName
argument_list|)
argument_list|)
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
comment|// Create the dev branch on the test project
name|BranchInput
name|in
init|=
operator|new
name|BranchInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|revision
operator|=
name|initialHead
operator|.
name|name
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|name
argument_list|(
name|projectName
argument_list|)
argument_list|)
operator|.
name|branch
argument_list|(
literal|"dev"
argument_list|)
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// Create changes on master
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
name|repoA
argument_list|,
literal|"master"
argument_list|,
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
name|repoA
argument_list|,
literal|"master"
argument_list|,
literal|"Change 2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
comment|// Create  changes on dev
name|repoA
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
name|repoA
argument_list|,
literal|"dev"
argument_list|,
literal|"Change 3"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change4
init|=
name|createChange
argument_list|(
name|repoA
argument_list|,
literal|"dev"
argument_list|,
literal|"Change 4"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedTopic
init|=
name|name
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|change1
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change2
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change3
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change4
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitWholeTopic ()
specifier|public
name|void
name|submitWholeTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|String
name|topic
init|=
literal|"test-topic"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"Change 2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
literal|"Change 3"
argument_list|,
literal|"c.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedTopic
init|=
name|name
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|change1
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change2
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change3
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
comment|// Check for the exact change to have the correct submitter.
name|assertSubmitter
argument_list|(
name|change3
argument_list|)
expr_stmt|;
comment|// Also check submitters for changes submitted via the topic relationship.
name|assertSubmitter
argument_list|(
name|change1
argument_list|)
expr_stmt|;
name|assertSubmitter
argument_list|(
name|change2
argument_list|)
expr_stmt|;
comment|// Check that the repo has the expected commits
name|List
argument_list|<
name|RevCommit
argument_list|>
name|log
init|=
name|getRemoteLog
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commitsInRepo
init|=
name|log
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|expectedCommitCount
init|=
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|MERGE_ALWAYS
condition|?
literal|5
comment|// initial commit + 3 commits + merge commit
else|:
literal|4
decl_stmt|;
comment|// initial commit + 3 commits
name|assertThat
argument_list|(
name|log
argument_list|)
operator|.
name|hasSize
argument_list|(
name|expectedCommitCount
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitsInRepo
argument_list|)
operator|.
name|containsAllOf
argument_list|(
literal|"Initial empty repository"
argument_list|,
literal|"Change 1"
argument_list|,
literal|"Change 2"
argument_list|,
literal|"Change 3"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|MERGE_ALWAYS
condition|)
block|{
name|assertThat
argument_list|(
name|commitsInRepo
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Merge changes from topic '"
operator|+
name|expectedTopic
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|submitDraftChange ()
specifier|public
name|void
name|submitDraftChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|draft
init|=
name|createDraftChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|num
init|=
name|draft
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|submitWithConflict
argument_list|(
name|draft
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"Failed to submit 1 change due to the following problems:\n"
operator|+
literal|"Change "
operator|+
name|num
operator|+
literal|": Change "
operator|+
name|num
operator|+
literal|" is draft"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitDraftPatchSet ()
specifier|public
name|void
name|submitDraftPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|draft
init|=
name|amendChangeAsDraft
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|num
init|=
name|draft
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|submitWithConflict
argument_list|(
name|draft
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"Failed to submit 1 change due to the following problems:\n"
operator|+
literal|"Change "
operator|+
name|num
operator|+
literal|": submit rule error: "
operator|+
literal|"Cannot submit draft patch sets"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitWithHiddenBranchInSameTopic ()
specifier|public
name|void
name|submitWithHiddenBranchInSameTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|visible
init|=
name|createChange
argument_list|(
literal|"refs/for/master/"
operator|+
name|name
argument_list|(
literal|"topic"
argument_list|)
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|num
init|=
name|visible
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|createBranch
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
literal|"hidden"
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|hidden
init|=
name|createChange
argument_list|(
literal|"refs/for/hidden/"
operator|+
name|name
argument_list|(
literal|"topic"
argument_list|)
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|hidden
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|blockRead
argument_list|(
literal|"refs/heads/hidden"
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|visible
operator|.
name|getChangeId
argument_list|()
argument_list|,
operator|new
name|SubmitInput
argument_list|()
argument_list|,
name|AuthException
operator|.
name|class
argument_list|,
literal|"A change to be submitted with "
operator|+
name|num
operator|+
literal|" is not visible"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitChangeWhenParentOfOtherBranchTip ()
specifier|public
name|void
name|submitChangeWhenParentOfOtherBranchTip
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Chain of two commits
comment|// Push both to topic-branch
comment|// Push the first commit for review and submit
comment|//
comment|// C2 -- tip of topic branch
comment|//  |
comment|// C1 -- pushed for review
comment|//  |
comment|// C0 -- Master
comment|//
name|ProjectConfig
name|config
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|getProject
argument_list|()
operator|.
name|setCreateNewChangeForAllNotInTarget
argument_list|(
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push1
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|c1
init|=
name|push1
operator|.
name|to
argument_list|(
literal|"refs/heads/topic"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushOneCommit
name|push2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|c2
init|=
name|push2
operator|.
name|to
argument_list|(
literal|"refs/heads/topic"
argument_list|)
decl_stmt|;
name|c2
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|push1
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|change1
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|approve
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitMergeOfNonChangeBranchTip ()
specifier|public
name|void
name|submitMergeOfNonChangeBranchTip
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Merge a branch with commits that have not been submitted as
comment|// changes.
comment|//
comment|// M  -- mergeCommit (pushed for review and submitted)
comment|// | \
comment|// |  S -- stable (pushed directly to refs/heads/stable)
comment|// | /
comment|// I   -- master
comment|//
name|RevCommit
name|master
init|=
name|getRemoteHead
argument_list|(
name|project
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|PushOneCommit
name|stableTip
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"Tip of branch stable"
argument_list|,
literal|"stable.txt"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|stable
init|=
name|stableTip
operator|.
name|to
argument_list|(
literal|"refs/heads/stable"
argument_list|)
decl_stmt|;
name|PushOneCommit
name|mergeCommit
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"The merge commit"
argument_list|,
literal|"merge.txt"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|mergeCommit
operator|.
name|setParents
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|master
argument_list|,
name|stable
operator|.
name|getCommit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|mergeReview
init|=
name|mergeCommit
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|mergeReview
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|mergeReview
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RevCommit
argument_list|>
name|log
init|=
name|getRemoteLog
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|log
argument_list|)
operator|.
name|contains
argument_list|(
name|stable
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
argument_list|)
operator|.
name|contains
argument_list|(
name|mergeReview
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSubmitter (PushOneCommit.Result change)
specifier|private
name|void
name|assertSubmitter
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|change
parameter_list|)
throws|throws
name|Exception
block|{
name|ChangeInfo
name|info
init|=
name|get
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|ListChangesOption
operator|.
name|MESSAGES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|messages
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|info
operator|.
name|messages
argument_list|,
name|i
lambda|->
name|i
operator|.
name|message
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|String
name|last
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|messages
argument_list|)
decl_stmt|;
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|CHERRY_PICK
condition|)
block|{
name|assertThat
argument_list|(
name|last
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Change has been successfully cherry-picked as "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|REBASE_ALWAYS
condition|)
block|{
name|assertThat
argument_list|(
name|last
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Change has been successfully rebased as"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|last
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Change has been successfully merged by Administrator"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateProjectInput (ProjectInput in)
specifier|protected
name|void
name|updateProjectInput
parameter_list|(
name|ProjectInput
name|in
parameter_list|)
block|{
name|in
operator|.
name|submitType
operator|=
name|getSubmitType
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|useContentMerge
operator|==
name|InheritableBoolean
operator|.
name|INHERIT
condition|)
block|{
name|in
operator|.
name|useContentMerge
operator|=
name|InheritableBoolean
operator|.
name|FALSE
expr_stmt|;
block|}
block|}
DECL|method|submit (String changeId)
specifier|protected
name|void
name|submit
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|submit
argument_list|(
name|changeId
argument_list|,
operator|new
name|SubmitInput
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|submit (String changeId, SubmitInput input)
specifier|protected
name|void
name|submit
parameter_list|(
name|String
name|changeId
parameter_list|,
name|SubmitInput
name|input
parameter_list|)
throws|throws
name|Exception
block|{
name|submit
argument_list|(
name|changeId
argument_list|,
name|input
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|submitWithConflict (String changeId, String expectedError)
specifier|protected
name|void
name|submitWithConflict
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|expectedError
parameter_list|)
throws|throws
name|Exception
block|{
name|submit
argument_list|(
name|changeId
argument_list|,
operator|new
name|SubmitInput
argument_list|()
argument_list|,
name|ResourceConflictException
operator|.
name|class
argument_list|,
name|expectedError
argument_list|)
expr_stmt|;
block|}
DECL|method|submit (String changeId, SubmitInput input, Class<? extends RestApiException> expectedExceptionType, String expectedExceptionMsg)
specifier|protected
name|void
name|submit
parameter_list|(
name|String
name|changeId
parameter_list|,
name|SubmitInput
name|input
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|RestApiException
argument_list|>
name|expectedExceptionType
parameter_list|,
name|String
name|expectedExceptionMsg
parameter_list|)
throws|throws
name|Exception
block|{
name|approve
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedExceptionType
operator|==
literal|null
condition|)
block|{
name|assertSubmittable
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|(
name|input
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedExceptionType
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Expected exception of type "
operator|+
name|expectedExceptionType
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RestApiException
name|e
parameter_list|)
block|{
if|if
condition|(
name|expectedExceptionType
operator|==
literal|null
condition|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// More verbose than using assertThat and/or ExpectedException, but gives
comment|// us the stack trace.
if|if
condition|(
operator|!
name|expectedExceptionType
operator|.
name|isAssignableFrom
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
operator|||
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|expectedExceptionMsg
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected exception of type "
operator|+
name|expectedExceptionType
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" with message: \""
operator|+
name|expectedExceptionMsg
operator|+
literal|"\" but got exception of type "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" with message \""
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\""
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return;
block|}
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|info
argument_list|()
decl_stmt|;
name|assertMerged
argument_list|(
name|change
operator|.
name|changeId
argument_list|)
expr_stmt|;
block|}
DECL|method|submitPreview (String changeId)
specifier|protected
name|BinaryResult
name|submitPreview
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submitPreview
argument_list|()
return|;
block|}
DECL|method|submitPreview (String changeId, String format)
specifier|protected
name|BinaryResult
name|submitPreview
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|format
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submitPreview
argument_list|(
name|format
argument_list|)
return|;
block|}
DECL|method|assertSubmittable (String changeId)
specifier|protected
name|void
name|assertSubmittable
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|get
argument_list|(
name|changeId
argument_list|,
name|SUBMITTABLE
argument_list|)
operator|.
name|submittable
argument_list|)
operator|.
name|named
argument_list|(
literal|"submit bit on ChangeInfo"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RevisionResource
name|rsrc
init|=
name|parseCurrentRevisionResource
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|UiAction
operator|.
name|Description
name|desc
init|=
name|submitHandler
operator|.
name|getDescription
argument_list|(
name|rsrc
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|desc
operator|.
name|isVisible
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"visible bit on submit action"
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|desc
operator|.
name|isEnabled
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"enabled bit on submit action"
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertChangeMergedEvents (String... expected)
specifier|protected
name|void
name|assertChangeMergedEvents
parameter_list|(
name|String
modifier|...
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|eventRecorder
operator|.
name|assertChangeMergedEvents
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRefUpdatedEvents (RevCommit... expected)
specifier|protected
name|void
name|assertRefUpdatedEvents
parameter_list|(
name|RevCommit
modifier|...
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|eventRecorder
operator|.
name|assertRefUpdatedEvents
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCurrentRevision (String changeId, int expectedNum, ObjectId expectedId)
specifier|protected
name|void
name|assertCurrentRevision
parameter_list|(
name|String
name|changeId
parameter_list|,
name|int
name|expectedNum
parameter_list|,
name|ObjectId
name|expectedId
parameter_list|)
throws|throws
name|Exception
block|{
name|ChangeInfo
name|c
init|=
name|get
argument_list|(
name|changeId
argument_list|,
name|CURRENT_REVISION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|currentRevision
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedId
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|expectedId
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedNum
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|c
operator|.
name|project
argument_list|)
argument_list|)
init|)
block|{
name|String
name|refName
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|c
operator|.
name|_number
argument_list|)
argument_list|,
name|expectedNum
argument_list|)
operator|.
name|toRefName
argument_list|()
decl_stmt|;
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref
argument_list|)
operator|.
name|named
argument_list|(
name|refName
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertNew (String changeId)
specifier|protected
name|void
name|assertNew
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|get
argument_list|(
name|changeId
argument_list|)
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
DECL|method|assertApproved (String changeId)
specifier|protected
name|void
name|assertApproved
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|ChangeInfo
name|c
init|=
name|get
argument_list|(
name|changeId
argument_list|,
name|DETAILED_LABELS
argument_list|)
decl_stmt|;
name|LabelInfo
name|cr
init|=
name|c
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|_accountId
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMerged (String changeId)
specifier|protected
name|void
name|assertMerged
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|RestApiException
block|{
name|ChangeStatus
name|status
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|status
decl_stmt|;
name|assertThat
argument_list|(
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
DECL|method|assertPersonEquals (PersonIdent expected, PersonIdent actual)
specifier|protected
name|void
name|assertPersonEquals
parameter_list|(
name|PersonIdent
name|expected
parameter_list|,
name|PersonIdent
name|actual
parameter_list|)
block|{
name|assertThat
argument_list|(
name|actual
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|getTimeZone
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|getTimeZone
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSubmitter (String changeId, int psId)
specifier|protected
name|void
name|assertSubmitter
parameter_list|(
name|String
name|changeId
parameter_list|,
name|int
name|psId
parameter_list|)
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|getOnlyElement
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byKeyPrefix
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|change
argument_list|()
decl_stmt|;
name|ChangeNotes
name|cn
init|=
name|notesFactory
operator|.
name|createChecked
argument_list|(
name|db
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|submitter
init|=
name|approvalsUtil
operator|.
name|getSubmitter
argument_list|(
name|db
argument_list|,
name|cn
argument_list|,
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|cn
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|psId
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|submitter
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|submitter
operator|.
name|isLegacySubmit
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoSubmitter (String changeId, int psId)
specifier|protected
name|void
name|assertNoSubmitter
parameter_list|(
name|String
name|changeId
parameter_list|,
name|int
name|psId
parameter_list|)
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|getOnlyElement
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byKeyPrefix
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|change
argument_list|()
decl_stmt|;
name|ChangeNotes
name|cn
init|=
name|notesFactory
operator|.
name|createChecked
argument_list|(
name|db
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|submitter
init|=
name|approvalsUtil
operator|.
name|getSubmitter
argument_list|(
name|db
argument_list|,
name|cn
argument_list|,
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|cn
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|psId
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|submitter
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCherryPick (TestRepository<?> testRepo, boolean contentMerge)
specifier|protected
name|void
name|assertCherryPick
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|testRepo
parameter_list|,
name|boolean
name|contentMerge
parameter_list|)
throws|throws
name|Exception
block|{
name|assertRebase
argument_list|(
name|testRepo
argument_list|,
name|contentMerge
argument_list|)
expr_stmt|;
name|RevCommit
name|remoteHead
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|remoteHead
operator|.
name|getFooterLines
argument_list|(
literal|"Reviewed-On"
argument_list|)
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|remoteHead
operator|.
name|getFooterLines
argument_list|(
literal|"Reviewed-By"
argument_list|)
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|assertRebase (TestRepository<?> testRepo, boolean contentMerge)
specifier|protected
name|void
name|assertRebase
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|testRepo
parameter_list|,
name|boolean
name|contentMerge
parameter_list|)
throws|throws
name|Exception
block|{
name|Repository
name|repo
init|=
name|testRepo
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|RevCommit
name|localHead
init|=
name|getHead
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|RevCommit
name|remoteHead
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|withFailureMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s not equal %s"
argument_list|,
name|localHead
operator|.
name|name
argument_list|()
argument_list|,
name|remoteHead
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
operator|.
name|that
argument_list|(
name|localHead
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|remoteHead
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|remoteHead
operator|.
name|getParentCount
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|contentMerge
condition|)
block|{
name|assertThat
argument_list|(
name|getLatestRemoteDiff
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|getLatestDiff
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|remoteHead
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|localHead
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getRemoteLog (Project.NameKey project, String branch)
specifier|protected
name|List
argument_list|<
name|RevCommit
argument_list|>
name|getRemoteLog
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|branch
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
literal|"refs/heads/"
operator|+
name|branch
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|rw
argument_list|)
return|;
block|}
block|}
DECL|method|getRemoteLog ()
specifier|protected
name|List
argument_list|<
name|RevCommit
argument_list|>
name|getRemoteLog
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getRemoteLog
argument_list|(
name|project
argument_list|,
literal|"master"
argument_list|)
return|;
block|}
DECL|method|getLatestDiff (Repository repo)
specifier|private
name|String
name|getLatestDiff
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectId
name|oldTreeId
init|=
name|repo
operator|.
name|resolve
argument_list|(
literal|"HEAD~1^{tree}"
argument_list|)
decl_stmt|;
name|ObjectId
name|newTreeId
init|=
name|repo
operator|.
name|resolve
argument_list|(
literal|"HEAD^{tree}"
argument_list|)
decl_stmt|;
return|return
name|getLatestDiff
argument_list|(
name|repo
argument_list|,
name|oldTreeId
argument_list|,
name|newTreeId
argument_list|)
return|;
block|}
DECL|method|getLatestRemoteDiff ()
specifier|private
name|String
name|getLatestRemoteDiff
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|ObjectId
name|oldTreeId
init|=
name|repo
operator|.
name|resolve
argument_list|(
literal|"refs/heads/master~1^{tree}"
argument_list|)
decl_stmt|;
name|ObjectId
name|newTreeId
init|=
name|repo
operator|.
name|resolve
argument_list|(
literal|"refs/heads/master^{tree}"
argument_list|)
decl_stmt|;
return|return
name|getLatestDiff
argument_list|(
name|repo
argument_list|,
name|oldTreeId
argument_list|,
name|newTreeId
argument_list|)
return|;
block|}
block|}
DECL|method|getLatestDiff (Repository repo, ObjectId oldTreeId, ObjectId newTreeId)
specifier|private
name|String
name|getLatestDiff
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|ObjectId
name|oldTreeId
parameter_list|,
name|ObjectId
name|newTreeId
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|DiffFormatter
name|fmt
init|=
operator|new
name|DiffFormatter
argument_list|(
name|out
argument_list|)
init|)
block|{
name|fmt
operator|.
name|setRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|format
argument_list|(
name|oldTreeId
argument_list|,
name|newTreeId
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

