begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|getOnlyElement
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assert_
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CURRENT_REVISION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|DETAILED_LABELS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|EventSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|SubmitInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|InheritableBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|LabelInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|ChangeMergedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|ConfigSuite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|DiffFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|AbstractSubmit
specifier|public
specifier|abstract
class|class
name|AbstractSubmit
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|ConfigSuite
operator|.
name|Config
DECL|method|submitWholeTopicEnabled ()
specifier|public
specifier|static
name|Config
name|submitWholeTopicEnabled
parameter_list|()
block|{
return|return
name|submitWholeTopicEnabledConfig
argument_list|()
return|;
block|}
DECL|field|mergeResults
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mergeResults
decl_stmt|;
annotation|@
name|Inject
DECL|field|notesFactory
specifier|private
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
decl_stmt|;
annotation|@
name|Inject
DECL|field|approvalsUtil
specifier|private
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
annotation|@
name|Inject
DECL|field|factory
specifier|private
name|IdentifiedUser
operator|.
name|GenericFactory
name|factory
decl_stmt|;
annotation|@
name|Inject
DECL|field|source
name|EventSource
name|source
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|mergeResults
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|CurrentUser
name|listenerUser
init|=
name|factory
operator|.
name|create
argument_list|(
name|user
operator|.
name|id
argument_list|)
decl_stmt|;
name|source
operator|.
name|addEventListener
argument_list|(
operator|new
name|EventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|ChangeMergedEvent
condition|)
block|{
name|ChangeMergedEvent
name|changeMergedEvent
init|=
operator|(
name|ChangeMergedEvent
operator|)
name|event
decl_stmt|;
name|mergeResults
operator|.
name|put
argument_list|(
name|changeMergedEvent
operator|.
name|change
operator|.
name|get
argument_list|()
operator|.
name|number
argument_list|,
name|changeMergedEvent
operator|.
name|newRev
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|listenerUser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getSubmitType ()
specifier|protected
specifier|abstract
name|SubmitType
name|getSubmitType
parameter_list|()
function_decl|;
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|createEmptyCommit
operator|=
literal|false
argument_list|)
DECL|method|submitToEmptyRepo ()
specifier|public
name|void
name|submitToEmptyRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|()
decl_stmt|;
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getRemoteHead
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change
operator|.
name|getCommitId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitWholeTopic ()
specifier|public
name|void
name|submitWholeTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|,
literal|"test-topic"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"Change 2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content"
argument_list|,
literal|"test-topic"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
literal|"Change 3"
argument_list|,
literal|"c.txt"
argument_list|,
literal|"content"
argument_list|,
literal|"test-topic"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|change1
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
literal|"test-topic"
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change2
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
literal|"test-topic"
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change3
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
literal|"test-topic"
argument_list|,
name|admin
argument_list|)
expr_stmt|;
comment|// Check for the exact change to have the correct submitter.
name|assertSubmitter
argument_list|(
name|change3
argument_list|)
expr_stmt|;
comment|// Also check submitters for changes submitted via the topic relationship.
name|assertSubmitter
argument_list|(
name|change1
argument_list|)
expr_stmt|;
name|assertSubmitter
argument_list|(
name|change2
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSubmitter (PushOneCommit.Result change)
specifier|private
name|void
name|assertSubmitter
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|change
parameter_list|)
throws|throws
name|Exception
block|{
name|ChangeInfo
name|info
init|=
name|get
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|ListChangesOption
operator|.
name|MESSAGES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|CHERRY_PICK
condition|)
block|{
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Change has been successfully cherry-picked as "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Change has been successfully merged by Administrator"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateProjectInput (ProjectInput in)
specifier|protected
name|void
name|updateProjectInput
parameter_list|(
name|ProjectInput
name|in
parameter_list|)
block|{
name|in
operator|.
name|submitType
operator|=
name|getSubmitType
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|useContentMerge
operator|==
name|InheritableBoolean
operator|.
name|INHERIT
condition|)
block|{
name|in
operator|.
name|useContentMerge
operator|=
name|InheritableBoolean
operator|.
name|FALSE
expr_stmt|;
block|}
block|}
DECL|method|createChange (String subject, String fileName, String content)
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|createChange
parameter_list|(
name|String
name|subject
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|subject
argument_list|,
name|fileName
argument_list|,
name|content
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
return|;
block|}
DECL|method|createChange (String subject, String fileName, String content, String topic)
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|createChange
parameter_list|(
name|String
name|subject
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|content
parameter_list|,
name|String
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|subject
argument_list|,
name|fileName
argument_list|,
name|content
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master/"
operator|+
name|topic
argument_list|)
return|;
block|}
DECL|method|createChange (TestRepository<?> repo, String branch, String subject, String fileName, String content, String topic)
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|createChange
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|,
name|String
name|branch
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|content
parameter_list|,
name|String
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|repo
argument_list|,
name|subject
argument_list|,
name|fileName
argument_list|,
name|content
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/"
operator|+
name|branch
operator|+
literal|"/"
operator|+
name|name
argument_list|(
name|topic
argument_list|)
argument_list|)
return|;
block|}
DECL|method|submit (String changeId)
specifier|protected
name|void
name|submit
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|submit
argument_list|(
name|changeId
argument_list|,
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|submitWithConflict (String changeId, String expectedError)
specifier|protected
name|void
name|submitWithConflict
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|expectedError
parameter_list|)
throws|throws
name|Exception
block|{
name|submit
argument_list|(
name|changeId
argument_list|,
name|HttpStatus
operator|.
name|SC_CONFLICT
argument_list|,
name|expectedError
argument_list|)
expr_stmt|;
block|}
DECL|method|submit (String changeId, int expectedStatus, String msg)
specifier|private
name|void
name|submit
parameter_list|(
name|String
name|changeId
parameter_list|,
name|int
name|expectedStatus
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|approve
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|SubmitInput
name|subm
init|=
operator|new
name|SubmitInput
argument_list|()
decl_stmt|;
name|RestResponse
name|r
init|=
name|adminSession
operator|.
name|post
argument_list|(
literal|"/changes/"
operator|+
name|changeId
operator|+
literal|"/submit"
argument_list|,
name|subm
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedStatus
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedStatus
operator|==
name|HttpStatus
operator|.
name|SC_OK
condition|)
block|{
name|checkArgument
argument_list|(
name|msg
operator|==
literal|null
argument_list|,
literal|"msg must be null for successful submits"
argument_list|)
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|checkMergeResult
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkArgument
argument_list|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|msg
argument_list|)
argument_list|,
literal|"msg must be a valid string "
operator|+
literal|"containing an error message for unsuccessful submits"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getEntityContent
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
DECL|method|checkMergeResult (ChangeInfo change)
specifier|private
name|void
name|checkMergeResult
parameter_list|(
name|ChangeInfo
name|change
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the revision of the branch after the submit to compare with the
comment|// newRev of the ChangeMergedEvent.
name|RestResponse
name|b
init|=
name|adminSession
operator|.
name|get
argument_list|(
literal|"/projects/"
operator|+
name|change
operator|.
name|project
operator|+
literal|"/branches/"
operator|+
name|change
operator|.
name|branch
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|getStatusCode
argument_list|()
operator|==
name|HttpStatus
operator|.
name|SC_OK
condition|)
block|{
name|BranchInfo
name|branch
init|=
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|b
operator|.
name|getReader
argument_list|()
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|BranchInfo
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|mergeResults
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|String
name|newRev
init|=
name|mergeResults
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|change
operator|.
name|_number
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newRev
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|branch
operator|.
name|revision
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|newRev
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCurrentRevision (String changeId, int expectedNum, ObjectId expectedId)
specifier|protected
name|void
name|assertCurrentRevision
parameter_list|(
name|String
name|changeId
parameter_list|,
name|int
name|expectedNum
parameter_list|,
name|ObjectId
name|expectedId
parameter_list|)
throws|throws
name|Exception
block|{
name|ChangeInfo
name|c
init|=
name|get
argument_list|(
name|changeId
argument_list|,
name|CURRENT_REVISION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|currentRevision
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedId
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|expectedId
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedNum
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|c
operator|.
name|project
argument_list|)
argument_list|)
init|)
block|{
name|String
name|refName
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|c
operator|.
name|_number
argument_list|)
argument_list|,
name|expectedNum
argument_list|)
operator|.
name|toRefName
argument_list|()
decl_stmt|;
name|Ref
name|ref
init|=
name|repo
operator|.
name|getRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref
argument_list|)
operator|.
name|named
argument_list|(
name|refName
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertNew (String changeId)
specifier|protected
name|void
name|assertNew
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|get
argument_list|(
name|changeId
argument_list|)
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
DECL|method|assertApproved (String changeId)
specifier|protected
name|void
name|assertApproved
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|ChangeInfo
name|c
init|=
name|get
argument_list|(
name|changeId
argument_list|,
name|DETAILED_LABELS
argument_list|)
decl_stmt|;
name|LabelInfo
name|cr
init|=
name|c
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|_accountId
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertPersonEquals (PersonIdent expected, PersonIdent actual)
specifier|protected
name|void
name|assertPersonEquals
parameter_list|(
name|PersonIdent
name|expected
parameter_list|,
name|PersonIdent
name|actual
parameter_list|)
block|{
name|assertThat
argument_list|(
name|actual
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|getTimeZone
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|getTimeZone
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSubmitter (String changeId, int psId)
specifier|protected
name|void
name|assertSubmitter
parameter_list|(
name|String
name|changeId
parameter_list|,
name|int
name|psId
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeNotes
name|cn
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|getOnlyElement
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byKeyPrefix
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|change
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|submitter
init|=
name|approvalsUtil
operator|.
name|getSubmitter
argument_list|(
name|db
argument_list|,
name|cn
argument_list|,
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|cn
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|psId
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|submitter
operator|.
name|isSubmit
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoSubmitter (String changeId, int psId)
specifier|protected
name|void
name|assertNoSubmitter
parameter_list|(
name|String
name|changeId
parameter_list|,
name|int
name|psId
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeNotes
name|cn
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|getOnlyElement
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byKeyPrefix
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|change
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|submitter
init|=
name|approvalsUtil
operator|.
name|getSubmitter
argument_list|(
name|db
argument_list|,
name|cn
argument_list|,
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|cn
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|psId
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|submitter
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCherryPick (TestRepository<?> testRepo, boolean contentMerge)
specifier|protected
name|void
name|assertCherryPick
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|testRepo
parameter_list|,
name|boolean
name|contentMerge
parameter_list|)
throws|throws
name|IOException
block|{
name|assertRebase
argument_list|(
name|testRepo
argument_list|,
name|contentMerge
argument_list|)
expr_stmt|;
name|RevCommit
name|remoteHead
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|remoteHead
operator|.
name|getFooterLines
argument_list|(
literal|"Reviewed-On"
argument_list|)
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|remoteHead
operator|.
name|getFooterLines
argument_list|(
literal|"Reviewed-By"
argument_list|)
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|assertRebase (TestRepository<?> testRepo, boolean contentMerge)
specifier|protected
name|void
name|assertRebase
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|testRepo
parameter_list|,
name|boolean
name|contentMerge
parameter_list|)
throws|throws
name|IOException
block|{
name|Repository
name|repo
init|=
name|testRepo
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|RevCommit
name|localHead
init|=
name|getHead
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|RevCommit
name|remoteHead
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|withFailureMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s not equal %s"
argument_list|,
name|localHead
operator|.
name|name
argument_list|()
argument_list|,
name|remoteHead
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
operator|.
name|that
argument_list|(
name|localHead
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|remoteHead
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|remoteHead
operator|.
name|getParentCount
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|contentMerge
condition|)
block|{
name|assertThat
argument_list|(
name|getLatestRemoteDiff
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|getLatestDiff
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|remoteHead
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|localHead
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getHead (Repository repo)
specifier|private
name|RevCommit
name|getHead
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getHead
argument_list|(
name|repo
argument_list|,
literal|"HEAD"
argument_list|)
return|;
block|}
DECL|method|getRemoteHead (Project.NameKey project, String branch)
specifier|protected
name|RevCommit
name|getRemoteHead
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|branch
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
return|return
name|getHead
argument_list|(
name|repo
argument_list|,
literal|"refs/heads/"
operator|+
name|branch
argument_list|)
return|;
block|}
block|}
DECL|method|getRemoteHead ()
specifier|protected
name|RevCommit
name|getRemoteHead
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getRemoteHead
argument_list|(
name|project
argument_list|,
literal|"master"
argument_list|)
return|;
block|}
DECL|method|getRemoteLog (Project.NameKey project, String branch)
specifier|protected
name|List
argument_list|<
name|RevCommit
argument_list|>
name|getRemoteLog
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|branch
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|repo
operator|.
name|getRef
argument_list|(
literal|"refs/heads/"
operator|+
name|branch
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|rw
argument_list|)
return|;
block|}
block|}
DECL|method|getRemoteLog ()
specifier|protected
name|List
argument_list|<
name|RevCommit
argument_list|>
name|getRemoteLog
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getRemoteLog
argument_list|(
name|project
argument_list|,
literal|"master"
argument_list|)
return|;
block|}
DECL|method|getHead (Repository repo, String name)
specifier|private
name|RevCommit
name|getHead
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
return|return
name|rw
operator|.
name|parseCommit
argument_list|(
name|repo
operator|.
name|getRef
argument_list|(
name|name
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|getLatestDiff (Repository repo)
specifier|private
name|String
name|getLatestDiff
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectId
name|oldTreeId
init|=
name|repo
operator|.
name|resolve
argument_list|(
literal|"HEAD~1^{tree}"
argument_list|)
decl_stmt|;
name|ObjectId
name|newTreeId
init|=
name|repo
operator|.
name|resolve
argument_list|(
literal|"HEAD^{tree}"
argument_list|)
decl_stmt|;
return|return
name|getLatestDiff
argument_list|(
name|repo
argument_list|,
name|oldTreeId
argument_list|,
name|newTreeId
argument_list|)
return|;
block|}
DECL|method|getLatestRemoteDiff ()
specifier|private
name|String
name|getLatestRemoteDiff
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|ObjectId
name|oldTreeId
init|=
name|repo
operator|.
name|resolve
argument_list|(
literal|"refs/heads/master~1^{tree}"
argument_list|)
decl_stmt|;
name|ObjectId
name|newTreeId
init|=
name|repo
operator|.
name|resolve
argument_list|(
literal|"refs/heads/master^{tree}"
argument_list|)
decl_stmt|;
return|return
name|getLatestDiff
argument_list|(
name|repo
argument_list|,
name|oldTreeId
argument_list|,
name|newTreeId
argument_list|)
return|;
block|}
block|}
DECL|method|getLatestDiff (Repository repo, ObjectId oldTreeId, ObjectId newTreeId)
specifier|private
name|String
name|getLatestDiff
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|ObjectId
name|oldTreeId
parameter_list|,
name|ObjectId
name|newTreeId
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|DiffFormatter
name|fmt
init|=
operator|new
name|DiffFormatter
argument_list|(
name|out
argument_list|)
init|)
block|{
name|fmt
operator|.
name|setRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|format
argument_list|(
name|oldTreeId
argument_list|,
name|newTreeId
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

