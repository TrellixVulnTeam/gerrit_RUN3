begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.gpg
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|PublicKeyStore
operator|.
name|keyToString
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestKeys
operator|.
name|expiredKey
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestKeys
operator|.
name|selfRevokedKey
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestKeys
operator|.
name|validKeyWithExpiration
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestKeys
operator|.
name|validKeyWithoutExpiration
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestTrustKeys
operator|.
name|keyA
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestTrustKeys
operator|.
name|keyB
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestTrustKeys
operator|.
name|keyC
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestTrustKeys
operator|.
name|keyD
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestTrustKeys
operator|.
name|keyE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestTrustKeys
operator|.
name|keyF
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestTrustKeys
operator|.
name|keyG
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestTrustKeys
operator|.
name|keyH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestTrustKeys
operator|.
name|keyI
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestTrustKeys
operator|.
name|keyJ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testutil
operator|.
name|TestKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|DfsRepositoryDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|PublicKeyCheckerTest
specifier|public
class|class
name|PublicKeyCheckerTest
block|{
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|repo
specifier|private
name|InMemoryRepository
name|repo
decl_stmt|;
DECL|field|store
specifier|private
name|PublicKeyStore
name|store
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|repo
operator|=
operator|new
name|InMemoryRepository
argument_list|(
operator|new
name|DfsRepositoryDescription
argument_list|(
literal|"repo"
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|PublicKeyStore
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
name|store
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
name|repo
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|validKey ()
specifier|public
name|void
name|validKey
parameter_list|()
throws|throws
name|Exception
block|{
name|assertProblems
argument_list|(
name|validKeyWithoutExpiration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|keyExpiringInFuture ()
specifier|public
name|void
name|keyExpiringInFuture
parameter_list|()
throws|throws
name|Exception
block|{
name|assertProblems
argument_list|(
name|validKeyWithExpiration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|expiredKeyIsExpired ()
specifier|public
name|void
name|expiredKeyIsExpired
parameter_list|()
throws|throws
name|Exception
block|{
name|assertProblems
argument_list|(
name|expiredKey
argument_list|()
argument_list|,
literal|"Key is expired"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|selfRevokedKeyIsRevoked ()
specifier|public
name|void
name|selfRevokedKeyIsRevoked
parameter_list|()
throws|throws
name|Exception
block|{
name|assertProblems
argument_list|(
name|selfRevokedKey
argument_list|()
argument_list|,
literal|"Key is revoked"
argument_list|)
expr_stmt|;
block|}
comment|// Test keys specific to this test are at the bottom of this class. Each test
comment|// has a diagram of the trust network, where:
comment|//  - The notation M---N indicates N trusts M.
comment|//  - An 'x' indicates the key is expired.
annotation|@
name|Test
DECL|method|trustValidPathLength2 ()
specifier|public
name|void
name|trustValidPathLength2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// A---Bx
comment|//  \
comment|//   \---C---D
comment|//        \
comment|//         \---Ex
comment|//
comment|// D and E trust C to be a valid introducer of depth 2.
name|TestKey
name|ka
init|=
name|add
argument_list|(
name|keyA
argument_list|()
argument_list|)
decl_stmt|;
name|TestKey
name|kb
init|=
name|add
argument_list|(
name|keyB
argument_list|()
argument_list|)
decl_stmt|;
name|TestKey
name|kc
init|=
name|add
argument_list|(
name|keyC
argument_list|()
argument_list|)
decl_stmt|;
name|TestKey
name|kd
init|=
name|add
argument_list|(
name|keyD
argument_list|()
argument_list|)
decl_stmt|;
name|TestKey
name|ke
init|=
name|add
argument_list|(
name|keyE
argument_list|()
argument_list|)
decl_stmt|;
name|save
argument_list|()
expr_stmt|;
name|PublicKeyChecker
name|checker
init|=
name|newChecker
argument_list|(
literal|2
argument_list|,
name|kb
argument_list|,
name|kd
argument_list|)
decl_stmt|;
name|assertProblems
argument_list|(
name|checker
argument_list|,
name|ka
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|checker
argument_list|,
name|kb
argument_list|,
literal|"Key is expired"
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|checker
argument_list|,
name|kc
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|checker
argument_list|,
name|kd
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|checker
argument_list|,
name|ke
argument_list|,
literal|"Key is expired"
argument_list|,
literal|"No path to a trusted key"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|trustValidPathLength1 ()
specifier|public
name|void
name|trustValidPathLength1
parameter_list|()
throws|throws
name|Exception
block|{
comment|// A---Bx
comment|//  \
comment|//   \---C---D
comment|//        \
comment|//         \---Ex
comment|//
comment|// D and E trust C to be a valid introducer of depth 2.
name|TestKey
name|ka
init|=
name|add
argument_list|(
name|keyA
argument_list|()
argument_list|)
decl_stmt|;
name|TestKey
name|kb
init|=
name|add
argument_list|(
name|keyB
argument_list|()
argument_list|)
decl_stmt|;
name|TestKey
name|kc
init|=
name|add
argument_list|(
name|keyC
argument_list|()
argument_list|)
decl_stmt|;
name|TestKey
name|kd
init|=
name|add
argument_list|(
name|keyD
argument_list|()
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|keyE
argument_list|()
argument_list|)
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
name|PublicKeyChecker
name|checker
init|=
name|newChecker
argument_list|(
literal|1
argument_list|,
name|kd
argument_list|)
decl_stmt|;
name|assertProblems
argument_list|(
name|checker
argument_list|,
name|ka
argument_list|,
literal|"No path to a trusted key"
argument_list|,
name|notTrusted
argument_list|(
name|kb
argument_list|)
argument_list|,
name|notTrusted
argument_list|(
name|kc
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|trustCycle ()
specifier|public
name|void
name|trustCycle
parameter_list|()
throws|throws
name|Exception
block|{
comment|// F---G---F, in a cycle.
name|TestKey
name|kf
init|=
name|add
argument_list|(
name|keyF
argument_list|()
argument_list|)
decl_stmt|;
name|TestKey
name|kg
init|=
name|add
argument_list|(
name|keyG
argument_list|()
argument_list|)
decl_stmt|;
name|save
argument_list|()
expr_stmt|;
name|PublicKeyChecker
name|checker
init|=
name|newChecker
argument_list|(
literal|10
argument_list|,
name|keyA
argument_list|()
argument_list|)
decl_stmt|;
name|assertProblems
argument_list|(
name|checker
argument_list|,
name|kf
argument_list|,
literal|"No path to a trusted key"
argument_list|,
name|notTrusted
argument_list|(
name|kg
argument_list|)
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|checker
argument_list|,
name|kg
argument_list|,
literal|"No path to a trusted key"
argument_list|,
name|notTrusted
argument_list|(
name|kf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|trustInsufficientDepthInSignature ()
specifier|public
name|void
name|trustInsufficientDepthInSignature
parameter_list|()
throws|throws
name|Exception
block|{
comment|// H---I---J, but J is only trusted to length 1.
name|TestKey
name|kh
init|=
name|add
argument_list|(
name|keyH
argument_list|()
argument_list|)
decl_stmt|;
name|TestKey
name|ki
init|=
name|add
argument_list|(
name|keyI
argument_list|()
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|keyJ
argument_list|()
argument_list|)
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
name|PublicKeyChecker
name|checker
init|=
name|newChecker
argument_list|(
literal|10
argument_list|,
name|keyJ
argument_list|()
argument_list|)
decl_stmt|;
comment|// J trusts I to a depth of 1, so I itself is valid, but I's certification
comment|// of K is not valid.
name|assertProblems
argument_list|(
name|checker
argument_list|,
name|ki
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|checker
argument_list|,
name|kh
argument_list|,
literal|"No path to a trusted key"
argument_list|,
name|notTrusted
argument_list|(
name|ki
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newChecker (int maxTrustDepth, TestKey... trusted)
specifier|private
name|PublicKeyChecker
name|newChecker
parameter_list|(
name|int
name|maxTrustDepth
parameter_list|,
name|TestKey
modifier|...
name|trusted
parameter_list|)
block|{
name|List
argument_list|<
name|Fingerprint
argument_list|>
name|fps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|trusted
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|TestKey
name|k
range|:
name|trusted
control|)
block|{
name|fps
operator|.
name|add
argument_list|(
operator|new
name|Fingerprint
argument_list|(
name|k
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getFingerprint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PublicKeyChecker
argument_list|(
name|maxTrustDepth
argument_list|,
name|fps
argument_list|)
return|;
block|}
DECL|method|add (TestKey k)
specifier|private
name|TestKey
name|add
parameter_list|(
name|TestKey
name|k
parameter_list|)
block|{
name|store
operator|.
name|add
argument_list|(
name|k
operator|.
name|getPublicKeyRing
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|k
return|;
block|}
DECL|method|save ()
specifier|private
name|void
name|save
parameter_list|()
throws|throws
name|Exception
block|{
name|PersonIdent
name|ident
init|=
operator|new
name|PersonIdent
argument_list|(
literal|"A U Thor"
argument_list|,
literal|"author@example.com"
argument_list|)
decl_stmt|;
name|CommitBuilder
name|cb
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|cb
operator|.
name|setAuthor
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setCommitter
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|RefUpdate
operator|.
name|Result
name|result
init|=
name|store
operator|.
name|save
argument_list|(
name|cb
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|FAST_FORWARD
case|:
case|case
name|FORCED
case|:
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|result
argument_list|)
throw|;
block|}
block|}
DECL|method|assertProblems (PublicKeyChecker checker, TestKey k, String... expected)
specifier|private
name|void
name|assertProblems
parameter_list|(
name|PublicKeyChecker
name|checker
parameter_list|,
name|TestKey
name|k
parameter_list|,
name|String
modifier|...
name|expected
parameter_list|)
block|{
name|CheckResult
name|result
init|=
name|checker
operator|.
name|check
argument_list|(
name|k
operator|.
name|getPublicKey
argument_list|()
argument_list|,
name|store
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|result
operator|.
name|getProblems
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertProblems (TestKey tk, String... expected)
specifier|private
name|void
name|assertProblems
parameter_list|(
name|TestKey
name|tk
parameter_list|,
name|String
modifier|...
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|CheckResult
name|result
init|=
operator|new
name|PublicKeyChecker
argument_list|()
operator|.
name|check
argument_list|(
name|tk
operator|.
name|getPublicKey
argument_list|()
argument_list|,
name|store
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|result
operator|.
name|getProblems
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|notTrusted (TestKey k)
specifier|private
specifier|static
name|String
name|notTrusted
parameter_list|(
name|TestKey
name|k
parameter_list|)
block|{
return|return
literal|"Certification by "
operator|+
name|keyToString
argument_list|(
name|k
operator|.
name|getPublicKey
argument_list|()
argument_list|)
operator|+
literal|" is valid, but key is not trusted"
return|;
block|}
block|}
end_class

end_unit

