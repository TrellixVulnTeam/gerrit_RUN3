begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.gpg
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|MagicBranch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PreReceiveHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushCertificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceivePack
import|;
end_import

begin_comment
comment|/**  * Pre-receive hook to check signed pushes.  *  *<p>If configured, prior to processing any push using {@code ReceiveCommits}, requires that any  * push certificate present must be valid.  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|SignedPushPreReceiveHook
specifier|public
class|class
name|SignedPushPreReceiveHook
implements|implements
name|PreReceiveHook
block|{
DECL|class|Required
specifier|public
specifier|static
class|class
name|Required
implements|implements
name|PreReceiveHook
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|Required
name|INSTANCE
init|=
operator|new
name|Required
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|onPreReceive (ReceivePack rp, Collection<ReceiveCommand> commands)
specifier|public
name|void
name|onPreReceive
parameter_list|(
name|ReceivePack
name|rp
parameter_list|,
name|Collection
argument_list|<
name|ReceiveCommand
argument_list|>
name|commands
parameter_list|)
block|{
if|if
condition|(
name|rp
operator|.
name|getPushCertificate
argument_list|()
operator|==
literal|null
condition|)
block|{
name|rp
operator|.
name|sendMessage
argument_list|(
literal|"ERROR: Signed push is required"
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|commands
argument_list|,
literal|"push cert error"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|Required ()
specifier|private
name|Required
parameter_list|()
block|{}
block|}
DECL|field|user
specifier|private
specifier|final
name|Provider
argument_list|<
name|IdentifiedUser
argument_list|>
name|user
decl_stmt|;
DECL|field|checkerFactory
specifier|private
specifier|final
name|GerritPushCertificateChecker
operator|.
name|Factory
name|checkerFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|SignedPushPreReceiveHook ( Provider<IdentifiedUser> user, GerritPushCertificateChecker.Factory checkerFactory)
specifier|public
name|SignedPushPreReceiveHook
parameter_list|(
name|Provider
argument_list|<
name|IdentifiedUser
argument_list|>
name|user
parameter_list|,
name|GerritPushCertificateChecker
operator|.
name|Factory
name|checkerFactory
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|checkerFactory
operator|=
name|checkerFactory
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onPreReceive (ReceivePack rp, Collection<ReceiveCommand> commands)
specifier|public
name|void
name|onPreReceive
parameter_list|(
name|ReceivePack
name|rp
parameter_list|,
name|Collection
argument_list|<
name|ReceiveCommand
argument_list|>
name|commands
parameter_list|)
block|{
name|PushCertificate
name|cert
init|=
name|rp
operator|.
name|getPushCertificate
argument_list|()
decl_stmt|;
if|if
condition|(
name|cert
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|CheckResult
name|result
init|=
name|checkerFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setCheckNonce
argument_list|(
literal|true
argument_list|)
operator|.
name|check
argument_list|(
name|cert
argument_list|)
operator|.
name|getCheckResult
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isAllowed
argument_list|(
name|result
argument_list|,
name|commands
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|problem
range|:
name|result
operator|.
name|getProblems
argument_list|()
control|)
block|{
name|rp
operator|.
name|sendMessage
argument_list|(
name|problem
argument_list|)
expr_stmt|;
block|}
name|reject
argument_list|(
name|commands
argument_list|,
literal|"invalid push cert"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isAllowed (CheckResult result, Collection<ReceiveCommand> commands)
specifier|private
specifier|static
name|boolean
name|isAllowed
parameter_list|(
name|CheckResult
name|result
parameter_list|,
name|Collection
argument_list|<
name|ReceiveCommand
argument_list|>
name|commands
parameter_list|)
block|{
if|if
condition|(
name|onlyMagicBranches
argument_list|(
name|commands
argument_list|)
condition|)
block|{
comment|// Only pushing magic branches: allow a valid push certificate even if the
comment|// key is not ultimately trusted. Assume anyone with Submit permission to
comment|// the branch is able to verify during review that the code is legitimate.
return|return
name|result
operator|.
name|isOk
argument_list|()
return|;
block|}
comment|// Directly updating one or more refs: require a trusted key.
return|return
name|result
operator|.
name|isTrusted
argument_list|()
return|;
block|}
DECL|method|onlyMagicBranches (Iterable<ReceiveCommand> commands)
specifier|private
specifier|static
name|boolean
name|onlyMagicBranches
parameter_list|(
name|Iterable
argument_list|<
name|ReceiveCommand
argument_list|>
name|commands
parameter_list|)
block|{
for|for
control|(
name|ReceiveCommand
name|c
range|:
name|commands
control|)
block|{
if|if
condition|(
operator|!
name|MagicBranch
operator|.
name|isMagicBranch
argument_list|(
name|c
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|reject (Collection<ReceiveCommand> commands, String reason)
specifier|private
specifier|static
name|void
name|reject
parameter_list|(
name|Collection
argument_list|<
name|ReceiveCommand
argument_list|>
name|commands
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
for|for
control|(
name|ReceiveCommand
name|cmd
range|:
name|commands
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|==
name|ReceiveCommand
operator|.
name|Result
operator|.
name|NOT_ATTEMPTED
condition|)
block|{
name|cmd
operator|.
name|setResult
argument_list|(
name|ReceiveCommand
operator|.
name|Result
operator|.
name|REJECTED_OTHER_REASON
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

