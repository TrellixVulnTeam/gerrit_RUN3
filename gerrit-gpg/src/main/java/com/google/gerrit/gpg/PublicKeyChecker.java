begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.gpg
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GpgKeyInfo
operator|.
name|Status
operator|.
name|BAD
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GpgKeyInfo
operator|.
name|Status
operator|.
name|OK
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GpgKeyInfo
operator|.
name|Status
operator|.
name|TRUSTED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|PublicKeyStore
operator|.
name|keyIdToString
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|PublicKeyStore
operator|.
name|keyToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|SignatureSubpacketTags
operator|.
name|REVOCATION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|SignatureSubpacketTags
operator|.
name|REVOCATION_REASON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|sig
operator|.
name|RevocationReasonTags
operator|.
name|KEY_COMPROMISED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|sig
operator|.
name|RevocationReasonTags
operator|.
name|KEY_RETIRED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|sig
operator|.
name|RevocationReasonTags
operator|.
name|KEY_SUPERSEDED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|sig
operator|.
name|RevocationReasonTags
operator|.
name|NO_REASON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignature
operator|.
name|DIRECT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignature
operator|.
name|KEY_REVOCATION
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GpgKeyInfo
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|SignatureSubpacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|SignatureSubpacketTags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|sig
operator|.
name|RevocationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|sig
operator|.
name|RevocationReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKeyRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKeyRingCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|operator
operator|.
name|bc
operator|.
name|BcPGPContentVerifierBuilderProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** Checker for GPG public keys for use in a push certificate. */
end_comment

begin_class
DECL|class|PublicKeyChecker
specifier|public
class|class
name|PublicKeyChecker
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PublicKeyChecker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// https://tools.ietf.org/html/rfc4880#section-5.2.3.13
DECL|field|COMPLETE_TRUST
specifier|private
specifier|static
specifier|final
name|int
name|COMPLETE_TRUST
init|=
literal|120
decl_stmt|;
DECL|field|store
specifier|private
name|PublicKeyStore
name|store
decl_stmt|;
DECL|field|trusted
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Fingerprint
argument_list|>
name|trusted
decl_stmt|;
DECL|field|maxTrustDepth
specifier|private
name|int
name|maxTrustDepth
decl_stmt|;
DECL|field|effectiveTime
specifier|private
name|Date
name|effectiveTime
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
comment|/**    * Enable web-of-trust checks.    *<p>    * If enabled, a store must be set with {@link #setStore(PublicKeyStore)}.    * (These methods are separate since the store is a closeable resource that    * may not be available when reading trusted keys from a config.)    *    * @param maxTrustDepth maximum depth to search while looking for a trusted    *     key.    * @param trusted ultimately trusted key fingerprints, keyed by fingerprint;    *     may not be empty. To construct a map, see {@link    *     Fingerprint#byId(Iterable)}.    * @return a reference to this object.    */
DECL|method|enableTrust (int maxTrustDepth, Map<Long, Fingerprint> trusted)
specifier|public
name|PublicKeyChecker
name|enableTrust
parameter_list|(
name|int
name|maxTrustDepth
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Fingerprint
argument_list|>
name|trusted
parameter_list|)
block|{
if|if
condition|(
name|maxTrustDepth
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxTrustDepth must be positive, got: "
operator|+
name|maxTrustDepth
argument_list|)
throw|;
block|}
if|if
condition|(
name|trusted
operator|==
literal|null
operator|||
name|trusted
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"at least one trusted key is required"
argument_list|)
throw|;
block|}
name|this
operator|.
name|maxTrustDepth
operator|=
name|maxTrustDepth
expr_stmt|;
name|this
operator|.
name|trusted
operator|=
name|trusted
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Disable web-of-trust checks. */
DECL|method|disableTrust ()
specifier|public
name|PublicKeyChecker
name|disableTrust
parameter_list|()
block|{
name|trusted
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Set the public key store for reading keys referenced in signatures. */
DECL|method|setStore (PublicKeyStore store)
specifier|public
name|PublicKeyChecker
name|setStore
parameter_list|(
name|PublicKeyStore
name|store
parameter_list|)
block|{
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"PublicKeyStore is required"
argument_list|)
throw|;
block|}
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Set the effective time for checking the key.    *<p>    * If set, check whether the key should be considered valid (e.g. unexpired)    * as of this time.    *    * @param effectiveTime effective time.    * @return a reference to this object.    */
DECL|method|setEffectiveTime (Date effectiveTime)
specifier|public
name|PublicKeyChecker
name|setEffectiveTime
parameter_list|(
name|Date
name|effectiveTime
parameter_list|)
block|{
name|this
operator|.
name|effectiveTime
operator|=
name|effectiveTime
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getEffectiveTime ()
specifier|protected
name|Date
name|getEffectiveTime
parameter_list|()
block|{
return|return
name|effectiveTime
return|;
block|}
comment|/**    * Check a public key.    *    * @param key the public key.    * @return the result of the check.    */
DECL|method|check (PGPPublicKey key)
specifier|public
specifier|final
name|CheckResult
name|check
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|)
block|{
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"PublicKeyStore is required"
argument_list|)
throw|;
block|}
return|return
name|check
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|trusted
operator|!=
literal|null
condition|?
operator|new
name|HashSet
argument_list|<
name|Fingerprint
argument_list|>
argument_list|()
else|:
literal|null
argument_list|)
return|;
block|}
comment|/**    * Perform custom checks.    *<p>    * Default implementation reports no problems, but may be overridden by    * subclasses.    *    * @param key the public key.    * @param depth the depth from the initial key passed to {@link #check(    *     PGPPublicKey)}: 0 if this was the initial key, up to a maximum of    *     {@code maxTrustDepth}.    * @return the result of the custom check.    */
DECL|method|checkCustom (PGPPublicKey key, int depth)
specifier|public
name|CheckResult
name|checkCustom
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
return|return
name|CheckResult
operator|.
name|ok
argument_list|()
return|;
block|}
DECL|method|check (PGPPublicKey key, int depth, boolean expand, Set<Fingerprint> seen)
specifier|private
name|CheckResult
name|check
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|,
name|int
name|depth
parameter_list|,
name|boolean
name|expand
parameter_list|,
name|Set
argument_list|<
name|Fingerprint
argument_list|>
name|seen
parameter_list|)
block|{
name|CheckResult
name|basicResult
init|=
name|checkBasic
argument_list|(
name|key
argument_list|,
name|effectiveTime
argument_list|)
decl_stmt|;
name|CheckResult
name|customResult
init|=
name|checkCustom
argument_list|(
name|key
argument_list|,
name|depth
argument_list|)
decl_stmt|;
name|CheckResult
name|trustResult
init|=
name|checkWebOfTrust
argument_list|(
name|key
argument_list|,
name|store
argument_list|,
name|depth
argument_list|,
name|seen
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|expand
operator|&&
operator|!
name|trustResult
operator|.
name|isTrusted
argument_list|()
condition|)
block|{
name|trustResult
operator|=
name|CheckResult
operator|.
name|create
argument_list|(
name|trustResult
operator|.
name|getStatus
argument_list|()
argument_list|,
literal|"Key is not trusted"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|problems
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|basicResult
operator|.
name|getProblems
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|customResult
operator|.
name|getProblems
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|trustResult
operator|.
name|getProblems
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|problems
operator|.
name|addAll
argument_list|(
name|basicResult
operator|.
name|getProblems
argument_list|()
argument_list|)
expr_stmt|;
name|problems
operator|.
name|addAll
argument_list|(
name|customResult
operator|.
name|getProblems
argument_list|()
argument_list|)
expr_stmt|;
name|problems
operator|.
name|addAll
argument_list|(
name|trustResult
operator|.
name|getProblems
argument_list|()
argument_list|)
expr_stmt|;
name|Status
name|status
decl_stmt|;
if|if
condition|(
name|basicResult
operator|.
name|getStatus
argument_list|()
operator|==
name|BAD
operator|||
name|customResult
operator|.
name|getStatus
argument_list|()
operator|==
name|BAD
operator|||
name|trustResult
operator|.
name|getStatus
argument_list|()
operator|==
name|BAD
condition|)
block|{
comment|// Any BAD result and the final result is BAD.
name|status
operator|=
name|BAD
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|trustResult
operator|.
name|getStatus
argument_list|()
operator|==
name|TRUSTED
condition|)
block|{
comment|// basicResult is BAD or OK, whereas trustResult is BAD or TRUSTED. If
comment|// TRUSTED, we trust the final result.
name|status
operator|=
name|TRUSTED
expr_stmt|;
block|}
else|else
block|{
comment|// All results were OK or better, but trustResult was not TRUSTED. Don't
comment|// let subclasses bypass checkWebOfTrust by returning TRUSTED; just return
comment|// OK here.
name|status
operator|=
name|OK
expr_stmt|;
block|}
return|return
name|CheckResult
operator|.
name|create
argument_list|(
name|status
argument_list|,
name|problems
argument_list|)
return|;
block|}
DECL|method|checkBasic (PGPPublicKey key, Date now)
specifier|private
name|CheckResult
name|checkBasic
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|,
name|Date
name|now
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|problems
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|gatherRevocationProblems
argument_list|(
name|key
argument_list|,
name|now
argument_list|,
name|problems
argument_list|)
expr_stmt|;
name|long
name|validMs
init|=
name|key
operator|.
name|getValidSeconds
argument_list|()
operator|*
literal|1000
decl_stmt|;
if|if
condition|(
name|validMs
operator|!=
literal|0
condition|)
block|{
name|long
name|msSinceCreation
init|=
name|now
operator|.
name|getTime
argument_list|()
operator|-
name|key
operator|.
name|getCreationTime
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|msSinceCreation
operator|>
name|validMs
condition|)
block|{
name|problems
operator|.
name|add
argument_list|(
literal|"Key is expired"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|CheckResult
operator|.
name|create
argument_list|(
name|problems
argument_list|)
return|;
block|}
DECL|method|gatherRevocationProblems (PGPPublicKey key, Date now, List<String> problems)
specifier|private
name|void
name|gatherRevocationProblems
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|,
name|Date
name|now
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|problems
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|PGPSignature
argument_list|>
name|revocations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|RevocationKey
argument_list|>
name|revokers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|PGPSignature
name|selfRevocation
init|=
name|scanRevocations
argument_list|(
name|key
argument_list|,
name|now
argument_list|,
name|revocations
argument_list|,
name|revokers
argument_list|)
decl_stmt|;
if|if
condition|(
name|selfRevocation
operator|!=
literal|null
condition|)
block|{
name|RevocationReason
name|reason
init|=
name|getRevocationReason
argument_list|(
name|selfRevocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRevocationValid
argument_list|(
name|selfRevocation
argument_list|,
name|reason
argument_list|,
name|now
argument_list|)
condition|)
block|{
name|problems
operator|.
name|add
argument_list|(
name|reasonToString
argument_list|(
name|reason
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|checkRevocations
argument_list|(
name|key
argument_list|,
name|revocations
argument_list|,
name|revokers
argument_list|,
name|problems
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PGPException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|problems
operator|.
name|add
argument_list|(
literal|"Error checking key revocation"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isRevocationValid (PGPSignature revocation, RevocationReason reason, Date now)
specifier|private
specifier|static
name|boolean
name|isRevocationValid
parameter_list|(
name|PGPSignature
name|revocation
parameter_list|,
name|RevocationReason
name|reason
parameter_list|,
name|Date
name|now
parameter_list|)
block|{
comment|// RFC4880 states:
comment|// "If a key has been revoked because of a compromise, all signatures
comment|// created by that key are suspect. However, if it was merely superseded or
comment|// retired, old signatures are still valid."
comment|//
comment|// Note that GnuPG does not implement this correctly, as it does not
comment|// consider the revocation reason and timestamp when checking whether a
comment|// signature (data or certification) is valid.
return|return
name|reason
operator|.
name|getRevocationReason
argument_list|()
operator|==
name|KEY_COMPROMISED
operator|||
name|revocation
operator|.
name|getCreationTime
argument_list|()
operator|.
name|before
argument_list|(
name|now
argument_list|)
return|;
block|}
DECL|method|scanRevocations (PGPPublicKey key, Date now, List<PGPSignature> revocations, Map<Long, RevocationKey> revokers)
specifier|private
name|PGPSignature
name|scanRevocations
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|,
name|Date
name|now
parameter_list|,
name|List
argument_list|<
name|PGPSignature
argument_list|>
name|revocations
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|RevocationKey
argument_list|>
name|revokers
parameter_list|)
throws|throws
name|PGPException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|PGPSignature
argument_list|>
name|allSigs
init|=
name|key
operator|.
name|getSignatures
argument_list|()
decl_stmt|;
while|while
condition|(
name|allSigs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PGPSignature
name|sig
init|=
name|allSigs
operator|.
name|next
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|sig
operator|.
name|getSignatureType
argument_list|()
condition|)
block|{
case|case
name|KEY_REVOCATION
case|:
if|if
condition|(
name|sig
operator|.
name|getKeyID
argument_list|()
operator|==
name|key
operator|.
name|getKeyID
argument_list|()
condition|)
block|{
name|sig
operator|.
name|init
argument_list|(
operator|new
name|BcPGPContentVerifierBuilderProvider
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|sig
operator|.
name|verifyCertification
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|sig
return|;
block|}
block|}
else|else
block|{
name|RevocationReason
name|reason
init|=
name|getRevocationReason
argument_list|(
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|reason
operator|!=
literal|null
operator|&&
name|isRevocationValid
argument_list|(
name|sig
argument_list|,
name|reason
argument_list|,
name|now
argument_list|)
condition|)
block|{
name|revocations
operator|.
name|add
argument_list|(
name|sig
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DIRECT_KEY
case|:
name|RevocationKey
name|r
init|=
name|getRevocationKey
argument_list|(
name|key
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|revokers
operator|.
name|put
argument_list|(
name|Fingerprint
operator|.
name|getId
argument_list|(
name|r
operator|.
name|getFingerprint
argument_list|()
argument_list|)
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getRevocationKey (PGPPublicKey key, PGPSignature sig)
specifier|private
name|RevocationKey
name|getRevocationKey
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|,
name|PGPSignature
name|sig
parameter_list|)
throws|throws
name|PGPException
block|{
if|if
condition|(
name|sig
operator|.
name|getKeyID
argument_list|()
operator|!=
name|key
operator|.
name|getKeyID
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SignatureSubpacket
name|sub
init|=
name|sig
operator|.
name|getHashedSubPackets
argument_list|()
operator|.
name|getSubpacket
argument_list|(
name|REVOCATION_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|sig
operator|.
name|init
argument_list|(
operator|new
name|BcPGPContentVerifierBuilderProvider
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sig
operator|.
name|verifyCertification
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|RevocationKey
argument_list|(
name|sub
operator|.
name|isCritical
argument_list|()
argument_list|,
name|sub
operator|.
name|getData
argument_list|()
argument_list|)
return|;
block|}
DECL|method|checkRevocations (PGPPublicKey key, List<PGPSignature> revocations, Map<Long, RevocationKey> revokers, List<String> problems)
specifier|private
name|void
name|checkRevocations
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|,
name|List
argument_list|<
name|PGPSignature
argument_list|>
name|revocations
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|RevocationKey
argument_list|>
name|revokers
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|problems
parameter_list|)
throws|throws
name|PGPException
throws|,
name|IOException
block|{
for|for
control|(
name|PGPSignature
name|revocation
range|:
name|revocations
control|)
block|{
name|RevocationKey
name|revoker
init|=
name|revokers
operator|.
name|get
argument_list|(
name|revocation
operator|.
name|getKeyID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|revoker
operator|==
literal|null
condition|)
block|{
continue|continue;
comment|// Not a designated revoker.
block|}
name|byte
index|[]
name|rfp
init|=
name|revoker
operator|.
name|getFingerprint
argument_list|()
decl_stmt|;
name|PGPPublicKeyRing
name|revokerKeyRing
init|=
name|store
operator|.
name|get
argument_list|(
name|rfp
argument_list|)
decl_stmt|;
if|if
condition|(
name|revokerKeyRing
operator|==
literal|null
condition|)
block|{
comment|// Revoker is authorized and there is a revocation signature by this
comment|// revoker, but the key is not in the store so we can't verify the
comment|// signature.
name|log
operator|.
name|info
argument_list|(
literal|"Key "
operator|+
name|Fingerprint
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getFingerprint
argument_list|()
argument_list|)
operator|+
literal|" is revoked by "
operator|+
name|Fingerprint
operator|.
name|toString
argument_list|(
name|rfp
argument_list|)
operator|+
literal|", which is not in the store. Assuming revocation is valid."
argument_list|)
expr_stmt|;
name|problems
operator|.
name|add
argument_list|(
name|reasonToString
argument_list|(
name|getRevocationReason
argument_list|(
name|revocation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|PGPPublicKey
name|rk
init|=
name|revokerKeyRing
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|rk
operator|.
name|getAlgorithm
argument_list|()
operator|!=
name|revoker
operator|.
name|getAlgorithm
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|checkBasic
argument_list|(
name|rk
argument_list|,
name|revocation
operator|.
name|getCreationTime
argument_list|()
argument_list|)
operator|.
name|isOk
argument_list|()
condition|)
block|{
comment|// Revoker's key was expired or revoked at time of revocation, so the
comment|// revocation is invalid.
continue|continue;
block|}
name|revocation
operator|.
name|init
argument_list|(
operator|new
name|BcPGPContentVerifierBuilderProvider
argument_list|()
argument_list|,
name|rk
argument_list|)
expr_stmt|;
if|if
condition|(
name|revocation
operator|.
name|verifyCertification
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|problems
operator|.
name|add
argument_list|(
name|reasonToString
argument_list|(
name|getRevocationReason
argument_list|(
name|revocation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getRevocationReason (PGPSignature sig)
specifier|private
specifier|static
name|RevocationReason
name|getRevocationReason
parameter_list|(
name|PGPSignature
name|sig
parameter_list|)
block|{
if|if
condition|(
name|sig
operator|.
name|getSignatureType
argument_list|()
operator|!=
name|KEY_REVOCATION
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected KEY_REVOCATION signature, got "
operator|+
name|sig
operator|.
name|getSignatureType
argument_list|()
argument_list|)
throw|;
block|}
name|SignatureSubpacket
name|sub
init|=
name|sig
operator|.
name|getHashedSubPackets
argument_list|()
operator|.
name|getSubpacket
argument_list|(
name|REVOCATION_REASON
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|RevocationReason
argument_list|(
name|sub
operator|.
name|isCritical
argument_list|()
argument_list|,
name|sub
operator|.
name|getData
argument_list|()
argument_list|)
return|;
block|}
DECL|method|reasonToString (RevocationReason reason)
specifier|private
specifier|static
name|String
name|reasonToString
parameter_list|(
name|RevocationReason
name|reason
parameter_list|)
block|{
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Key is revoked ("
argument_list|)
decl_stmt|;
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
block|{
return|return
name|r
operator|.
name|append
argument_list|(
literal|"no reason provided)"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
switch|switch
condition|(
name|reason
operator|.
name|getRevocationReason
argument_list|()
condition|)
block|{
case|case
name|NO_REASON
case|:
name|r
operator|.
name|append
argument_list|(
literal|"no reason code specified"
argument_list|)
expr_stmt|;
break|break;
case|case
name|KEY_SUPERSEDED
case|:
name|r
operator|.
name|append
argument_list|(
literal|"superseded"
argument_list|)
expr_stmt|;
break|break;
case|case
name|KEY_COMPROMISED
case|:
name|r
operator|.
name|append
argument_list|(
literal|"key material has been compromised"
argument_list|)
expr_stmt|;
break|break;
case|case
name|KEY_RETIRED
case|:
name|r
operator|.
name|append
argument_list|(
literal|"retired and no longer valid"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|r
operator|.
name|append
argument_list|(
literal|"reason code "
argument_list|)
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|reason
operator|.
name|getRevocationReason
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
break|break;
block|}
name|r
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|String
name|desc
init|=
name|reason
operator|.
name|getRevocationDescription
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|desc
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|checkWebOfTrust (PGPPublicKey key, PublicKeyStore store, int depth, Set<Fingerprint> seen)
specifier|private
name|CheckResult
name|checkWebOfTrust
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|,
name|PublicKeyStore
name|store
parameter_list|,
name|int
name|depth
parameter_list|,
name|Set
argument_list|<
name|Fingerprint
argument_list|>
name|seen
parameter_list|)
block|{
if|if
condition|(
name|trusted
operator|==
literal|null
condition|)
block|{
comment|// Trust checking not configured, server trusts all OK keys.
return|return
name|CheckResult
operator|.
name|trusted
argument_list|()
return|;
block|}
name|Fingerprint
name|fp
init|=
operator|new
name|Fingerprint
argument_list|(
name|key
operator|.
name|getFingerprint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|seen
operator|.
name|contains
argument_list|(
name|fp
argument_list|)
condition|)
block|{
return|return
name|CheckResult
operator|.
name|ok
argument_list|(
literal|"Key is trusted in a cycle"
argument_list|)
return|;
block|}
name|seen
operator|.
name|add
argument_list|(
name|fp
argument_list|)
expr_stmt|;
name|Fingerprint
name|trustedFp
init|=
name|trusted
operator|.
name|get
argument_list|(
name|key
operator|.
name|getKeyID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|trustedFp
operator|!=
literal|null
operator|&&
name|trustedFp
operator|.
name|equals
argument_list|(
name|fp
argument_list|)
condition|)
block|{
return|return
name|CheckResult
operator|.
name|trusted
argument_list|()
return|;
comment|// Directly trusted.
block|}
elseif|else
if|if
condition|(
name|depth
operator|>=
name|maxTrustDepth
condition|)
block|{
return|return
name|CheckResult
operator|.
name|ok
argument_list|(
literal|"No path of depth<= "
operator|+
name|maxTrustDepth
operator|+
literal|" to a trusted key"
argument_list|)
return|;
block|}
name|List
argument_list|<
name|CheckResult
argument_list|>
name|signerResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|String
argument_list|>
name|userIds
init|=
name|key
operator|.
name|getUserIDs
argument_list|()
decl_stmt|;
while|while
condition|(
name|userIds
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|userId
init|=
name|userIds
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Don't check the timestamp of these certifications. This allows admins
comment|// to correct untrusted keys by signing them with a trusted key, such that
comment|// older signatures created by those keys retroactively appear valid.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|PGPSignature
argument_list|>
name|sigs
init|=
name|key
operator|.
name|getSignaturesForID
argument_list|(
name|userId
argument_list|)
decl_stmt|;
while|while
condition|(
name|sigs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PGPSignature
name|sig
init|=
name|sigs
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// TODO(dborowitz): Handle CERTIFICATION_REVOCATION.
if|if
condition|(
name|sig
operator|.
name|getSignatureType
argument_list|()
operator|!=
name|PGPSignature
operator|.
name|DEFAULT_CERTIFICATION
operator|&&
name|sig
operator|.
name|getSignatureType
argument_list|()
operator|!=
name|PGPSignature
operator|.
name|POSITIVE_CERTIFICATION
condition|)
block|{
continue|continue;
comment|// Not a certification.
block|}
name|PGPPublicKey
name|signer
init|=
name|getSigner
argument_list|(
name|store
argument_list|,
name|sig
argument_list|,
name|userId
argument_list|,
name|key
argument_list|,
name|signerResults
argument_list|)
decl_stmt|;
comment|// TODO(dborowitz): Require self certification.
if|if
condition|(
name|signer
operator|==
literal|null
operator|||
name|Arrays
operator|.
name|equals
argument_list|(
name|signer
operator|.
name|getFingerprint
argument_list|()
argument_list|,
name|key
operator|.
name|getFingerprint
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|subpacketProblem
init|=
name|checkTrustSubpacket
argument_list|(
name|sig
argument_list|,
name|depth
argument_list|)
decl_stmt|;
if|if
condition|(
name|subpacketProblem
operator|==
literal|null
condition|)
block|{
name|CheckResult
name|signerResult
init|=
name|check
argument_list|(
name|signer
argument_list|,
name|depth
operator|+
literal|1
argument_list|,
literal|false
argument_list|,
name|seen
argument_list|)
decl_stmt|;
if|if
condition|(
name|signerResult
operator|.
name|isTrusted
argument_list|()
condition|)
block|{
return|return
name|CheckResult
operator|.
name|trusted
argument_list|()
return|;
block|}
block|}
name|signerResults
operator|.
name|add
argument_list|(
name|CheckResult
operator|.
name|ok
argument_list|(
literal|"Certification by "
operator|+
name|keyToString
argument_list|(
name|signer
argument_list|)
operator|+
literal|" is valid, but key is not trusted"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|problems
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|problems
operator|.
name|add
argument_list|(
literal|"No path to a trusted key"
argument_list|)
expr_stmt|;
for|for
control|(
name|CheckResult
name|signerResult
range|:
name|signerResults
control|)
block|{
name|problems
operator|.
name|addAll
argument_list|(
name|signerResult
operator|.
name|getProblems
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|CheckResult
operator|.
name|create
argument_list|(
name|OK
argument_list|,
name|problems
argument_list|)
return|;
block|}
DECL|method|getSigner (PublicKeyStore store, PGPSignature sig, String userId, PGPPublicKey key, List<CheckResult> results)
specifier|private
specifier|static
name|PGPPublicKey
name|getSigner
parameter_list|(
name|PublicKeyStore
name|store
parameter_list|,
name|PGPSignature
name|sig
parameter_list|,
name|String
name|userId
parameter_list|,
name|PGPPublicKey
name|key
parameter_list|,
name|List
argument_list|<
name|CheckResult
argument_list|>
name|results
parameter_list|)
block|{
try|try
block|{
name|PGPPublicKeyRingCollection
name|signers
init|=
name|store
operator|.
name|get
argument_list|(
name|sig
operator|.
name|getKeyID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|signers
operator|.
name|getKeyRings
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|CheckResult
operator|.
name|ok
argument_list|(
literal|"Key "
operator|+
name|keyIdToString
argument_list|(
name|sig
operator|.
name|getKeyID
argument_list|()
argument_list|)
operator|+
literal|" used for certification is not in store"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|PGPPublicKey
name|signer
init|=
name|PublicKeyStore
operator|.
name|getSigner
argument_list|(
name|signers
argument_list|,
name|sig
argument_list|,
name|userId
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|signer
operator|==
literal|null
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|CheckResult
operator|.
name|ok
argument_list|(
literal|"Certification by "
operator|+
name|keyIdToString
argument_list|(
name|sig
operator|.
name|getKeyID
argument_list|()
argument_list|)
operator|+
literal|" is not valid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|signer
return|;
block|}
catch|catch
parameter_list|(
name|PGPException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|results
operator|.
name|add
argument_list|(
name|CheckResult
operator|.
name|ok
argument_list|(
literal|"Error checking certification by "
operator|+
name|keyIdToString
argument_list|(
name|sig
operator|.
name|getKeyID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|checkTrustSubpacket (PGPSignature sig, int depth)
specifier|private
name|String
name|checkTrustSubpacket
parameter_list|(
name|PGPSignature
name|sig
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|SignatureSubpacket
name|trustSub
init|=
name|sig
operator|.
name|getHashedSubPackets
argument_list|()
operator|.
name|getSubpacket
argument_list|(
name|SignatureSubpacketTags
operator|.
name|TRUST_SIG
argument_list|)
decl_stmt|;
if|if
condition|(
name|trustSub
operator|==
literal|null
operator|||
name|trustSub
operator|.
name|getData
argument_list|()
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
return|return
literal|"Certification is missing trust information"
return|;
block|}
name|byte
name|amount
init|=
name|trustSub
operator|.
name|getData
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|amount
operator|<
name|COMPLETE_TRUST
condition|)
block|{
return|return
literal|"Certification does not fully trust key"
return|;
block|}
name|byte
name|level
init|=
name|trustSub
operator|.
name|getData
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|int
name|required
init|=
name|depth
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|level
operator|<
name|required
condition|)
block|{
return|return
literal|"Certification trusts to depth "
operator|+
name|level
operator|+
literal|", but depth "
operator|+
name|required
operator|+
literal|" is required"
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

