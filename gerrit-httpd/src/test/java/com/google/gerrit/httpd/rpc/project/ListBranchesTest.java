begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd.rpc.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|rpc
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expectLastCall
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|createStrictMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|HEAD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|R_HEADS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
operator|.
name|Storage
operator|.
name|LOOSE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|KeyUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|StandardKeyEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IExpectationSetters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|LocalDiskRepositoryTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectIdRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|SymbolicRef
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ListBranchesTest
specifier|public
class|class
name|ListBranchesTest
extends|extends
name|LocalDiskRepositoryTestCase
block|{
static|static
block|{
name|KeyUtil
operator|.
name|setEncoderImpl
argument_list|(
operator|new
name|StandardKeyEncoder
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|field|idA
specifier|private
name|ObjectId
name|idA
decl_stmt|;
DECL|field|name
specifier|private
name|Project
operator|.
name|NameKey
name|name
decl_stmt|;
DECL|field|realDb
specifier|private
name|Repository
name|realDb
decl_stmt|;
DECL|field|mockDb
specifier|private
name|Repository
name|mockDb
decl_stmt|;
DECL|field|pcf
specifier|private
name|ProjectControl
operator|.
name|Factory
name|pcf
decl_stmt|;
DECL|field|pc
specifier|private
name|ProjectControl
name|pc
decl_stmt|;
DECL|field|grm
specifier|private
name|GitRepositoryManager
name|grm
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|idA
operator|=
name|ObjectId
operator|.
name|fromString
argument_list|(
literal|"df84c2f4f7ce7e0b25cdeac84b8870bcff319885"
argument_list|)
expr_stmt|;
name|name
operator|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|realDb
operator|=
name|createBareRepository
argument_list|()
expr_stmt|;
name|mockDb
operator|=
name|createStrictMock
argument_list|(
name|Repository
operator|.
name|class
argument_list|)
expr_stmt|;
name|pc
operator|=
name|createStrictMock
argument_list|(
name|ProjectControl
operator|.
name|class
argument_list|)
expr_stmt|;
name|pcf
operator|=
name|createStrictMock
argument_list|(
name|ProjectControl
operator|.
name|Factory
operator|.
name|class
argument_list|)
expr_stmt|;
name|grm
operator|=
name|createStrictMock
argument_list|(
name|GitRepositoryManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|validate ()
specifier|private
name|IExpectationSetters
argument_list|<
name|ProjectControl
argument_list|>
name|validate
parameter_list|()
throws|throws
name|NoSuchProjectException
block|{
return|return
name|expect
argument_list|(
name|pcf
operator|.
name|validateFor
argument_list|(
name|eq
argument_list|(
name|name
argument_list|)
argument_list|,
comment|//
name|eq
argument_list|(
name|ProjectControl
operator|.
name|OWNER
operator||
name|ProjectControl
operator|.
name|VISIBLE
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|doReplay ()
specifier|private
name|void
name|doReplay
parameter_list|()
block|{
name|replay
argument_list|(
name|mockDb
argument_list|,
name|pc
argument_list|,
name|pcf
argument_list|,
name|grm
argument_list|)
expr_stmt|;
block|}
DECL|method|doVerify ()
specifier|private
name|void
name|doVerify
parameter_list|()
block|{
name|verify
argument_list|(
name|mockDb
argument_list|,
name|pc
argument_list|,
name|pcf
argument_list|,
name|grm
argument_list|)
expr_stmt|;
block|}
DECL|method|set (String branch, ObjectId id)
specifier|private
name|void
name|set
parameter_list|(
name|String
name|branch
parameter_list|,
name|ObjectId
name|id
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RefUpdate
name|u
init|=
name|realDb
operator|.
name|updateRef
argument_list|(
name|R_HEADS
operator|+
name|branch
argument_list|)
decl_stmt|;
name|u
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|u
operator|.
name|setNewObjectId
argument_list|(
name|id
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|u
operator|.
name|update
argument_list|()
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|FAST_FORWARD
case|:
case|case
name|FORCED
case|:
break|break;
default|default:
name|fail
argument_list|(
literal|"unexpected update failure "
operator|+
name|branch
operator|+
literal|" "
operator|+
name|u
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testProjectNotVisible ()
specifier|public
name|void
name|testProjectNotVisible
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|NoSuchProjectException
name|err
init|=
operator|new
name|NoSuchProjectException
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|validate
argument_list|()
operator|.
name|andThrow
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|doReplay
argument_list|()
expr_stmt|;
try|try
block|{
operator|new
name|ListBranches
argument_list|(
name|pcf
argument_list|,
name|grm
argument_list|,
name|name
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not throw when expected not authorized"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|e2
parameter_list|)
block|{
name|assertSame
argument_list|(
name|err
argument_list|,
name|e2
argument_list|)
expr_stmt|;
block|}
name|doVerify
argument_list|()
expr_stmt|;
block|}
DECL|method|permitted (boolean getHead)
specifier|private
name|List
argument_list|<
name|Branch
argument_list|>
name|permitted
parameter_list|(
name|boolean
name|getHead
parameter_list|)
throws|throws
name|NoSuchProjectException
throws|,
name|IOException
block|{
name|validate
argument_list|()
operator|.
name|andReturn
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|grm
operator|.
name|openRepository
argument_list|(
name|eq
argument_list|(
name|name
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockDb
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockDb
operator|.
name|getAllRefs
argument_list|()
argument_list|)
operator|.
name|andDelegateTo
argument_list|(
name|realDb
argument_list|)
expr_stmt|;
if|if
condition|(
name|getHead
condition|)
block|{
name|expect
argument_list|(
name|mockDb
operator|.
name|getRef
argument_list|(
name|HEAD
argument_list|)
argument_list|)
operator|.
name|andDelegateTo
argument_list|(
name|realDb
argument_list|)
expr_stmt|;
block|}
name|mockDb
operator|.
name|close
argument_list|()
expr_stmt|;
name|expectLastCall
argument_list|()
expr_stmt|;
name|doReplay
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Branch
argument_list|>
name|r
init|=
operator|new
name|ListBranches
argument_list|(
name|pcf
argument_list|,
name|grm
argument_list|,
name|name
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
name|doVerify
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|testEmptyProject ()
specifier|public
name|void
name|testEmptyProject
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Branch
argument_list|>
name|r
init|=
name|permitted
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Branch
name|b
init|=
name|r
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|b
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|name
argument_list|,
name|b
operator|.
name|getNameKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HEAD
argument_list|,
name|b
operator|.
name|getNameKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HEAD
argument_list|,
name|b
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HEAD
argument_list|,
name|b
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|b
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"master"
argument_list|,
name|b
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMasterBranch ()
specifier|public
name|void
name|testMasterBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|set
argument_list|(
literal|"master"
argument_list|,
name|idA
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Branch
argument_list|>
name|r
init|=
name|permitted
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Branch
name|b
init|=
name|r
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|b
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|name
argument_list|,
name|b
operator|.
name|getNameKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HEAD
argument_list|,
name|b
operator|.
name|getNameKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HEAD
argument_list|,
name|b
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HEAD
argument_list|,
name|b
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|b
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"master"
argument_list|,
name|b
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|=
name|r
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|b
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|name
argument_list|,
name|b
operator|.
name|getNameKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|R_HEADS
operator|+
literal|"master"
argument_list|,
name|b
operator|.
name|getNameKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|R_HEADS
operator|+
literal|"master"
argument_list|,
name|b
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"master"
argument_list|,
name|b
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|b
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|idA
operator|.
name|name
argument_list|()
argument_list|,
name|b
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBranchNotHead ()
specifier|public
name|void
name|testBranchNotHead
parameter_list|()
throws|throws
name|Exception
block|{
name|set
argument_list|(
literal|"foo"
argument_list|,
name|idA
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Branch
argument_list|>
name|r
init|=
name|permitted
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Branch
name|b
init|=
name|r
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|b
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|name
argument_list|,
name|b
operator|.
name|getNameKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HEAD
argument_list|,
name|b
operator|.
name|getNameKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HEAD
argument_list|,
name|b
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HEAD
argument_list|,
name|b
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|b
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"master"
argument_list|,
name|b
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|=
name|r
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|b
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|name
argument_list|,
name|b
operator|.
name|getNameKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|R_HEADS
operator|+
literal|"foo"
argument_list|,
name|b
operator|.
name|getNameKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|R_HEADS
operator|+
literal|"foo"
argument_list|,
name|b
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|b
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|b
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|idA
operator|.
name|name
argument_list|()
argument_list|,
name|b
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSortByName ()
specifier|public
name|void
name|testSortByName
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|u
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
argument_list|()
decl_stmt|;
name|u
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|ObjectIdRef
operator|.
name|Unpeeled
argument_list|(
name|LOOSE
argument_list|,
name|R_HEADS
operator|+
literal|"foo"
argument_list|,
name|idA
argument_list|)
argument_list|)
expr_stmt|;
name|u
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|ObjectIdRef
operator|.
name|Unpeeled
argument_list|(
name|LOOSE
argument_list|,
name|R_HEADS
operator|+
literal|"bar"
argument_list|,
name|idA
argument_list|)
argument_list|)
expr_stmt|;
name|u
operator|.
name|put
argument_list|(
name|HEAD
argument_list|,
operator|new
name|SymbolicRef
argument_list|(
name|HEAD
argument_list|,
operator|new
name|ObjectIdRef
operator|.
name|Unpeeled
argument_list|(
name|LOOSE
argument_list|,
name|R_HEADS
operator|+
literal|"master"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|validate
argument_list|()
operator|.
name|andReturn
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|grm
operator|.
name|openRepository
argument_list|(
name|eq
argument_list|(
name|name
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockDb
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockDb
operator|.
name|getAllRefs
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|mockDb
operator|.
name|close
argument_list|()
expr_stmt|;
name|expectLastCall
argument_list|()
expr_stmt|;
name|doReplay
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Branch
argument_list|>
name|r
init|=
operator|new
name|ListBranches
argument_list|(
name|pcf
argument_list|,
name|grm
argument_list|,
name|name
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
name|doVerify
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HEAD
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

