begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|capture
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|eq
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|ReloadableRegistrationHandle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|util
operator|.
name|http
operator|.
name|testutil
operator|.
name|FakeHttpServletRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|util
operator|.
name|http
operator|.
name|testutil
operator|.
name|FakeHttpServletResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|Capture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMockSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_class
DECL|class|AllRequestFilterFilterProxyTest
specifier|public
class|class
name|AllRequestFilterFilterProxyTest
block|{
comment|/**    * Set of filters for FilterProxy    *<p/>    * This set is used to as set of filters when fetching an    * {@link AllRequestFilter.FilterProxy} instance through    * {@link #getFilterProxy()}.    */
DECL|field|filters
specifier|private
name|DynamicSet
argument_list|<
name|AllRequestFilter
argument_list|>
name|filters
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Force starting each test with an initially empty set of filters.
comment|// Filters get added by the tests themselves.
name|filters
operator|=
operator|new
name|DynamicSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|// The wrapping of {@link #getFilterProxy()} and
comment|// {@link #addFilter(AllRequestFilter)} into separate methods may seem
comment|// overengineered at this point. However, if in the future we decide to not
comment|// test the inner class directly, but rather test from the outside using
comment|// Guice Injectors, it is now sufficient to change only those two methods,
comment|// and we need not mess with the individual tests.
comment|/**    * Obtain a FilterProxy with a known DynamicSet of filters    *<p/>    * The returned {@link AllRequestFilter.FilterProxy} can have new filters    * added dynamically by calling {@link #addFilter(AllRequestFilter)}.    */
DECL|method|getFilterProxy ()
specifier|private
name|AllRequestFilter
operator|.
name|FilterProxy
name|getFilterProxy
parameter_list|()
block|{
return|return
operator|new
name|AllRequestFilter
operator|.
name|FilterProxy
argument_list|(
name|filters
argument_list|)
return|;
block|}
comment|/**    * Add a filter to created FilterProxy instances    *<p/>    * This method adds the given filter to all    * {@link AllRequestFilter.FilterProxy} instances created by    * {@link #getFilterProxy()}.    */
DECL|method|addFilter ( final AllRequestFilter filter)
specifier|private
name|ReloadableRegistrationHandle
argument_list|<
name|AllRequestFilter
argument_list|>
name|addFilter
parameter_list|(
specifier|final
name|AllRequestFilter
name|filter
parameter_list|)
block|{
name|Key
argument_list|<
name|AllRequestFilter
argument_list|>
name|key
init|=
name|Key
operator|.
name|get
argument_list|(
name|AllRequestFilter
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|filters
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|Providers
operator|.
name|of
argument_list|(
name|filter
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testNoFilters ()
specifier|public
name|void
name|testNoFilters
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMockSupport
name|ems
init|=
operator|new
name|EasyMockSupport
argument_list|()
decl_stmt|;
name|FilterConfig
name|config
init|=
name|ems
operator|.
name|createMock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|req
init|=
operator|new
name|FakeHttpServletRequest
argument_list|()
decl_stmt|;
name|HttpServletResponse
name|res
init|=
operator|new
name|FakeHttpServletResponse
argument_list|()
decl_stmt|;
name|FilterChain
name|chain
init|=
name|ems
operator|.
name|createMock
argument_list|(
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|chain
operator|.
name|doFilter
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|ems
operator|.
name|replayAll
argument_list|()
expr_stmt|;
name|AllRequestFilter
operator|.
name|FilterProxy
name|filterProxy
init|=
name|getFilterProxy
argument_list|()
decl_stmt|;
name|filterProxy
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|doFilter
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|ems
operator|.
name|verifyAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleFilterNoBubbling ()
specifier|public
name|void
name|testSingleFilterNoBubbling
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMockSupport
name|ems
init|=
operator|new
name|EasyMockSupport
argument_list|()
decl_stmt|;
name|FilterConfig
name|config
init|=
name|ems
operator|.
name|createMock
argument_list|(
literal|"config"
argument_list|,
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|req
init|=
operator|new
name|FakeHttpServletRequest
argument_list|()
decl_stmt|;
name|HttpServletResponse
name|res
init|=
operator|new
name|FakeHttpServletResponse
argument_list|()
decl_stmt|;
name|FilterChain
name|chain
init|=
name|ems
operator|.
name|createMock
argument_list|(
literal|"chain"
argument_list|,
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|AllRequestFilter
name|filter
init|=
name|ems
operator|.
name|createStrictMock
argument_list|(
literal|"filter"
argument_list|,
name|AllRequestFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|eq
argument_list|(
name|req
argument_list|)
argument_list|,
name|eq
argument_list|(
name|res
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|FilterChain
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|ems
operator|.
name|replayAll
argument_list|()
expr_stmt|;
name|AllRequestFilter
operator|.
name|FilterProxy
name|filterProxy
init|=
name|getFilterProxy
argument_list|()
decl_stmt|;
name|addFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|doFilter
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|ems
operator|.
name|verifyAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleFilterBubbling ()
specifier|public
name|void
name|testSingleFilterBubbling
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMockSupport
name|ems
init|=
operator|new
name|EasyMockSupport
argument_list|()
decl_stmt|;
name|FilterConfig
name|config
init|=
name|ems
operator|.
name|createMock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|req
init|=
operator|new
name|FakeHttpServletRequest
argument_list|()
decl_stmt|;
name|HttpServletResponse
name|res
init|=
operator|new
name|FakeHttpServletResponse
argument_list|()
decl_stmt|;
name|IMocksControl
name|mockControl
init|=
name|ems
operator|.
name|createStrictControl
argument_list|()
decl_stmt|;
name|FilterChain
name|chain
init|=
name|mockControl
operator|.
name|createMock
argument_list|(
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|Capture
argument_list|<
name|FilterChain
argument_list|>
name|capturedChain
init|=
operator|new
name|Capture
argument_list|<>
argument_list|()
decl_stmt|;
name|AllRequestFilter
name|filter
init|=
name|mockControl
operator|.
name|createMock
argument_list|(
name|AllRequestFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|eq
argument_list|(
name|req
argument_list|)
argument_list|,
name|eq
argument_list|(
name|res
argument_list|)
argument_list|,
name|capture
argument_list|(
name|capturedChain
argument_list|)
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doFilter
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|ems
operator|.
name|replayAll
argument_list|()
expr_stmt|;
name|AllRequestFilter
operator|.
name|FilterProxy
name|filterProxy
init|=
name|getFilterProxy
argument_list|()
decl_stmt|;
name|addFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|doFilter
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|capturedChain
operator|.
name|getValue
argument_list|()
operator|.
name|doFilter
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|ems
operator|.
name|verifyAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTwoFiltersNoBubbling ()
specifier|public
name|void
name|testTwoFiltersNoBubbling
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMockSupport
name|ems
init|=
operator|new
name|EasyMockSupport
argument_list|()
decl_stmt|;
name|FilterConfig
name|config
init|=
name|ems
operator|.
name|createMock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|req
init|=
operator|new
name|FakeHttpServletRequest
argument_list|()
decl_stmt|;
name|HttpServletResponse
name|res
init|=
operator|new
name|FakeHttpServletResponse
argument_list|()
decl_stmt|;
name|IMocksControl
name|mockControl
init|=
name|ems
operator|.
name|createStrictControl
argument_list|()
decl_stmt|;
name|FilterChain
name|chain
init|=
name|mockControl
operator|.
name|createMock
argument_list|(
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|AllRequestFilter
name|filterA
init|=
name|mockControl
operator|.
name|createMock
argument_list|(
name|AllRequestFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|AllRequestFilter
name|filterB
init|=
name|mockControl
operator|.
name|createMock
argument_list|(
name|AllRequestFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|filterA
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filterB
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filterA
operator|.
name|doFilter
argument_list|(
name|eq
argument_list|(
name|req
argument_list|)
argument_list|,
name|eq
argument_list|(
name|res
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|FilterChain
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|filterA
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|filterB
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|ems
operator|.
name|replayAll
argument_list|()
expr_stmt|;
name|AllRequestFilter
operator|.
name|FilterProxy
name|filterProxy
init|=
name|getFilterProxy
argument_list|()
decl_stmt|;
name|addFilter
argument_list|(
name|filterA
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
name|filterB
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|doFilter
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|ems
operator|.
name|verifyAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTwoFiltersBubbling ()
specifier|public
name|void
name|testTwoFiltersBubbling
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMockSupport
name|ems
init|=
operator|new
name|EasyMockSupport
argument_list|()
decl_stmt|;
name|FilterConfig
name|config
init|=
name|ems
operator|.
name|createMock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|req
init|=
operator|new
name|FakeHttpServletRequest
argument_list|()
decl_stmt|;
name|HttpServletResponse
name|res
init|=
operator|new
name|FakeHttpServletResponse
argument_list|()
decl_stmt|;
name|IMocksControl
name|mockControl
init|=
name|ems
operator|.
name|createStrictControl
argument_list|()
decl_stmt|;
name|FilterChain
name|chain
init|=
name|mockControl
operator|.
name|createMock
argument_list|(
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|Capture
argument_list|<
name|FilterChain
argument_list|>
name|capturedChainA
init|=
operator|new
name|Capture
argument_list|<>
argument_list|()
decl_stmt|;
name|Capture
argument_list|<
name|FilterChain
argument_list|>
name|capturedChainB
init|=
operator|new
name|Capture
argument_list|<>
argument_list|()
decl_stmt|;
name|AllRequestFilter
name|filterA
init|=
name|mockControl
operator|.
name|createMock
argument_list|(
name|AllRequestFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|AllRequestFilter
name|filterB
init|=
name|mockControl
operator|.
name|createMock
argument_list|(
name|AllRequestFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|filterA
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filterB
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filterA
operator|.
name|doFilter
argument_list|(
name|eq
argument_list|(
name|req
argument_list|)
argument_list|,
name|eq
argument_list|(
name|res
argument_list|)
argument_list|,
name|capture
argument_list|(
name|capturedChainA
argument_list|)
argument_list|)
expr_stmt|;
name|filterB
operator|.
name|doFilter
argument_list|(
name|eq
argument_list|(
name|req
argument_list|)
argument_list|,
name|eq
argument_list|(
name|res
argument_list|)
argument_list|,
name|capture
argument_list|(
name|capturedChainB
argument_list|)
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doFilter
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|filterA
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|filterB
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|ems
operator|.
name|replayAll
argument_list|()
expr_stmt|;
name|AllRequestFilter
operator|.
name|FilterProxy
name|filterProxy
init|=
name|getFilterProxy
argument_list|()
decl_stmt|;
name|addFilter
argument_list|(
name|filterA
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
name|filterB
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|doFilter
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|capturedChainA
operator|.
name|getValue
argument_list|()
operator|.
name|doFilter
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|capturedChainB
operator|.
name|getValue
argument_list|()
operator|.
name|doFilter
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|ems
operator|.
name|verifyAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPostponedLoading ()
specifier|public
name|void
name|testPostponedLoading
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMockSupport
name|ems
init|=
operator|new
name|EasyMockSupport
argument_list|()
decl_stmt|;
name|FilterConfig
name|config
init|=
name|ems
operator|.
name|createMock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|req1
init|=
operator|new
name|FakeHttpServletRequest
argument_list|()
decl_stmt|;
name|HttpServletRequest
name|req2
init|=
operator|new
name|FakeHttpServletRequest
argument_list|()
decl_stmt|;
name|HttpServletResponse
name|res1
init|=
operator|new
name|FakeHttpServletResponse
argument_list|()
decl_stmt|;
name|HttpServletResponse
name|res2
init|=
operator|new
name|FakeHttpServletResponse
argument_list|()
decl_stmt|;
name|IMocksControl
name|mockControl
init|=
name|ems
operator|.
name|createStrictControl
argument_list|()
decl_stmt|;
name|FilterChain
name|chain
init|=
name|mockControl
operator|.
name|createMock
argument_list|(
literal|"chain"
argument_list|,
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|Capture
argument_list|<
name|FilterChain
argument_list|>
name|capturedChainA1
init|=
operator|new
name|Capture
argument_list|<>
argument_list|()
decl_stmt|;
name|Capture
argument_list|<
name|FilterChain
argument_list|>
name|capturedChainA2
init|=
operator|new
name|Capture
argument_list|<>
argument_list|()
decl_stmt|;
name|Capture
argument_list|<
name|FilterChain
argument_list|>
name|capturedChainB
init|=
operator|new
name|Capture
argument_list|<>
argument_list|()
decl_stmt|;
name|AllRequestFilter
name|filterA
init|=
name|mockControl
operator|.
name|createMock
argument_list|(
literal|"filterA"
argument_list|,
name|AllRequestFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|AllRequestFilter
name|filterB
init|=
name|mockControl
operator|.
name|createMock
argument_list|(
literal|"filterB"
argument_list|,
name|AllRequestFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|filterA
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filterA
operator|.
name|doFilter
argument_list|(
name|eq
argument_list|(
name|req1
argument_list|)
argument_list|,
name|eq
argument_list|(
name|res1
argument_list|)
argument_list|,
name|capture
argument_list|(
name|capturedChainA1
argument_list|)
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doFilter
argument_list|(
name|req1
argument_list|,
name|res1
argument_list|)
expr_stmt|;
name|filterA
operator|.
name|doFilter
argument_list|(
name|eq
argument_list|(
name|req2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|res2
argument_list|)
argument_list|,
name|capture
argument_list|(
name|capturedChainA2
argument_list|)
argument_list|)
expr_stmt|;
name|filterB
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|//<-- This is crucial part. filterB got loaded
comment|// after filterProxy's init finished. Nonetheless filterB gets initialized.
name|filterB
operator|.
name|doFilter
argument_list|(
name|eq
argument_list|(
name|req2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|res2
argument_list|)
argument_list|,
name|capture
argument_list|(
name|capturedChainB
argument_list|)
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doFilter
argument_list|(
name|req2
argument_list|,
name|res2
argument_list|)
expr_stmt|;
name|filterA
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|filterB
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|ems
operator|.
name|replayAll
argument_list|()
expr_stmt|;
name|AllRequestFilter
operator|.
name|FilterProxy
name|filterProxy
init|=
name|getFilterProxy
argument_list|()
decl_stmt|;
name|addFilter
argument_list|(
name|filterA
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|doFilter
argument_list|(
name|req1
argument_list|,
name|res1
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|capturedChainA1
operator|.
name|getValue
argument_list|()
operator|.
name|doFilter
argument_list|(
name|req1
argument_list|,
name|res1
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
name|filterB
argument_list|)
expr_stmt|;
comment|//<-- Adds filter after filterProxy's init got called.
name|filterProxy
operator|.
name|doFilter
argument_list|(
name|req2
argument_list|,
name|res2
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|capturedChainA2
operator|.
name|getValue
argument_list|()
operator|.
name|doFilter
argument_list|(
name|req2
argument_list|,
name|res2
argument_list|)
expr_stmt|;
name|capturedChainB
operator|.
name|getValue
argument_list|()
operator|.
name|doFilter
argument_list|(
name|req2
argument_list|,
name|res2
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|ems
operator|.
name|verifyAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDynamicUnloading ()
specifier|public
name|void
name|testDynamicUnloading
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMockSupport
name|ems
init|=
operator|new
name|EasyMockSupport
argument_list|()
decl_stmt|;
name|FilterConfig
name|config
init|=
name|ems
operator|.
name|createMock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|req1
init|=
operator|new
name|FakeHttpServletRequest
argument_list|()
decl_stmt|;
name|HttpServletRequest
name|req2
init|=
operator|new
name|FakeHttpServletRequest
argument_list|()
decl_stmt|;
name|HttpServletRequest
name|req3
init|=
operator|new
name|FakeHttpServletRequest
argument_list|()
decl_stmt|;
name|HttpServletResponse
name|res1
init|=
operator|new
name|FakeHttpServletResponse
argument_list|()
decl_stmt|;
name|HttpServletResponse
name|res2
init|=
operator|new
name|FakeHttpServletResponse
argument_list|()
decl_stmt|;
name|HttpServletResponse
name|res3
init|=
operator|new
name|FakeHttpServletResponse
argument_list|()
decl_stmt|;
name|Plugin
name|plugin
init|=
name|ems
operator|.
name|createMock
argument_list|(
name|Plugin
operator|.
name|class
argument_list|)
decl_stmt|;
name|IMocksControl
name|mockControl
init|=
name|ems
operator|.
name|createStrictControl
argument_list|()
decl_stmt|;
name|FilterChain
name|chain
init|=
name|mockControl
operator|.
name|createMock
argument_list|(
literal|"chain"
argument_list|,
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|Capture
argument_list|<
name|FilterChain
argument_list|>
name|capturedChainA1
init|=
operator|new
name|Capture
argument_list|<>
argument_list|()
decl_stmt|;
name|Capture
argument_list|<
name|FilterChain
argument_list|>
name|capturedChainB1
init|=
operator|new
name|Capture
argument_list|<>
argument_list|()
decl_stmt|;
name|Capture
argument_list|<
name|FilterChain
argument_list|>
name|capturedChainB2
init|=
operator|new
name|Capture
argument_list|<>
argument_list|()
decl_stmt|;
name|AllRequestFilter
name|filterA
init|=
name|mockControl
operator|.
name|createMock
argument_list|(
literal|"filterA"
argument_list|,
name|AllRequestFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|AllRequestFilter
name|filterB
init|=
name|mockControl
operator|.
name|createMock
argument_list|(
literal|"filterB"
argument_list|,
name|AllRequestFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|filterA
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filterB
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filterA
operator|.
name|doFilter
argument_list|(
name|eq
argument_list|(
name|req1
argument_list|)
argument_list|,
name|eq
argument_list|(
name|res1
argument_list|)
argument_list|,
name|capture
argument_list|(
name|capturedChainA1
argument_list|)
argument_list|)
expr_stmt|;
name|filterB
operator|.
name|doFilter
argument_list|(
name|eq
argument_list|(
name|req1
argument_list|)
argument_list|,
name|eq
argument_list|(
name|res1
argument_list|)
argument_list|,
name|capture
argument_list|(
name|capturedChainB1
argument_list|)
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doFilter
argument_list|(
name|req1
argument_list|,
name|res1
argument_list|)
expr_stmt|;
name|filterA
operator|.
name|destroy
argument_list|()
expr_stmt|;
comment|// Cleaning up of filterA after it got unloaded
name|filterB
operator|.
name|doFilter
argument_list|(
name|eq
argument_list|(
name|req2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|res2
argument_list|)
argument_list|,
name|capture
argument_list|(
name|capturedChainB2
argument_list|)
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doFilter
argument_list|(
name|req2
argument_list|,
name|res2
argument_list|)
expr_stmt|;
name|filterB
operator|.
name|destroy
argument_list|()
expr_stmt|;
comment|// Cleaning up of filterA after it got unloaded
name|chain
operator|.
name|doFilter
argument_list|(
name|req3
argument_list|,
name|res3
argument_list|)
expr_stmt|;
name|ems
operator|.
name|replayAll
argument_list|()
expr_stmt|;
name|AllRequestFilter
operator|.
name|FilterProxy
name|filterProxy
init|=
name|getFilterProxy
argument_list|()
decl_stmt|;
name|ReloadableRegistrationHandle
argument_list|<
name|AllRequestFilter
argument_list|>
name|handleFilterA
init|=
name|addFilter
argument_list|(
name|filterA
argument_list|)
decl_stmt|;
name|ReloadableRegistrationHandle
argument_list|<
name|AllRequestFilter
argument_list|>
name|handleFilterB
init|=
name|addFilter
argument_list|(
name|filterB
argument_list|)
decl_stmt|;
name|filterProxy
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|// Request #1 with filterA and filterB
name|filterProxy
operator|.
name|doFilter
argument_list|(
name|req1
argument_list|,
name|res1
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|capturedChainA1
operator|.
name|getValue
argument_list|()
operator|.
name|doFilter
argument_list|(
name|req1
argument_list|,
name|res1
argument_list|)
expr_stmt|;
name|capturedChainB1
operator|.
name|getValue
argument_list|()
operator|.
name|doFilter
argument_list|(
name|req1
argument_list|,
name|res1
argument_list|)
expr_stmt|;
comment|// Unloading filterA
name|handleFilterA
operator|.
name|remove
argument_list|()
expr_stmt|;
name|filterProxy
operator|.
name|onStopPlugin
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
comment|// Request #1 only with filterB
name|filterProxy
operator|.
name|doFilter
argument_list|(
name|req2
argument_list|,
name|res2
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|capturedChainA1
operator|.
name|getValue
argument_list|()
operator|.
name|doFilter
argument_list|(
name|req2
argument_list|,
name|res2
argument_list|)
expr_stmt|;
comment|// Unloading filterB
name|handleFilterB
operator|.
name|remove
argument_list|()
expr_stmt|;
name|filterProxy
operator|.
name|onStopPlugin
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
comment|// Request #1 with no additional filters
name|filterProxy
operator|.
name|doFilter
argument_list|(
name|req3
argument_list|,
name|res3
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|ems
operator|.
name|verifyAll
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

