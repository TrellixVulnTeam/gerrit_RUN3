begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_class
DECL|class|RequestUtilTest
specifier|public
class|class
name|RequestUtilTest
block|{
DECL|field|mocks
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|mocks
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|mocks
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
for|for
control|(
name|Object
name|mock
range|:
name|mocks
control|)
block|{
name|verify
argument_list|(
name|mock
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|emptyContextPath ()
specifier|public
name|void
name|emptyContextPath
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/foo/bar"
argument_list|,
name|RequestUtil
operator|.
name|getEncodedPathInfo
argument_list|(
name|mockRequest
argument_list|(
literal|"/s/foo/bar"
argument_list|,
literal|""
argument_list|,
literal|"/s"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo%2Fbar"
argument_list|,
name|RequestUtil
operator|.
name|getEncodedPathInfo
argument_list|(
name|mockRequest
argument_list|(
literal|"/s/foo%2Fbar"
argument_list|,
literal|""
argument_list|,
literal|"/s"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyServletPath ()
specifier|public
name|void
name|emptyServletPath
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/foo/bar"
argument_list|,
name|RequestUtil
operator|.
name|getEncodedPathInfo
argument_list|(
name|mockRequest
argument_list|(
literal|"/c/foo/bar"
argument_list|,
literal|"/c"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo%2Fbar"
argument_list|,
name|RequestUtil
operator|.
name|getEncodedPathInfo
argument_list|(
name|mockRequest
argument_list|(
literal|"/c/foo%2Fbar"
argument_list|,
literal|"/c"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|trailingSlashes ()
specifier|public
name|void
name|trailingSlashes
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/foo/bar/"
argument_list|,
name|RequestUtil
operator|.
name|getEncodedPathInfo
argument_list|(
name|mockRequest
argument_list|(
literal|"/c/s/foo/bar/"
argument_list|,
literal|"/c"
argument_list|,
literal|"/s"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo/bar/"
argument_list|,
name|RequestUtil
operator|.
name|getEncodedPathInfo
argument_list|(
name|mockRequest
argument_list|(
literal|"/c/s/foo/bar///"
argument_list|,
literal|"/c"
argument_list|,
literal|"/s"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo%2Fbar/"
argument_list|,
name|RequestUtil
operator|.
name|getEncodedPathInfo
argument_list|(
name|mockRequest
argument_list|(
literal|"/c/s/foo%2Fbar/"
argument_list|,
literal|"/c"
argument_list|,
literal|"/s"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo%2Fbar/"
argument_list|,
name|RequestUtil
operator|.
name|getEncodedPathInfo
argument_list|(
name|mockRequest
argument_list|(
literal|"/c/s/foo%2Fbar///"
argument_list|,
literal|"/c"
argument_list|,
literal|"/s"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|servletPathMatchesRequestPath ()
specifier|public
name|void
name|servletPathMatchesRequestPath
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|RequestUtil
operator|.
name|getEncodedPathInfo
argument_list|(
name|mockRequest
argument_list|(
literal|"/c/s"
argument_list|,
literal|"/c"
argument_list|,
literal|"/s"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|mockRequest (String uri, String contextPath, String servletPath)
specifier|private
name|HttpServletRequest
name|mockRequest
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|contextPath
parameter_list|,
name|String
name|servletPath
parameter_list|)
block|{
name|HttpServletRequest
name|req
init|=
name|createMock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|req
operator|.
name|getRequestURI
argument_list|()
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|req
operator|.
name|getContextPath
argument_list|()
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|contextPath
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|req
operator|.
name|getServletPath
argument_list|()
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|servletPath
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|mocks
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
return|return
name|req
return|;
block|}
block|}
end_class

end_unit

