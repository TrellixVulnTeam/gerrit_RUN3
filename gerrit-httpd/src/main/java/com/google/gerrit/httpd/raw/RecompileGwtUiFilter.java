begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd.raw
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|raw
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|Escaper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|html
operator|.
name|HtmlEscapers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|linker
operator|.
name|server
operator|.
name|UserAgentRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|server
operator|.
name|CacheHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|RawParseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_class
DECL|class|RecompileGwtUiFilter
class|class
name|RecompileGwtUiFilter
implements|implements
name|Filter
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RecompileGwtUiFilter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|gwtuiRecompile
specifier|private
specifier|final
name|boolean
name|gwtuiRecompile
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"gerrit.disable-gwtui-recompile"
argument_list|)
operator|==
literal|null
decl_stmt|;
DECL|field|rule
specifier|private
specifier|final
name|UserAgentRule
name|rule
init|=
operator|new
name|UserAgentRule
argument_list|()
decl_stmt|;
DECL|field|uaInitialized
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|uaInitialized
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|unpackedWar
specifier|private
specifier|final
name|Path
name|unpackedWar
decl_stmt|;
DECL|field|gen
specifier|private
specifier|final
name|Path
name|gen
decl_stmt|;
DECL|field|root
specifier|private
specifier|final
name|Path
name|root
decl_stmt|;
DECL|field|lastTarget
specifier|private
name|String
name|lastTarget
decl_stmt|;
DECL|field|lastTime
specifier|private
name|long
name|lastTime
decl_stmt|;
DECL|method|RecompileGwtUiFilter (Path buckOut, Path unpackedWar)
name|RecompileGwtUiFilter
parameter_list|(
name|Path
name|buckOut
parameter_list|,
name|Path
name|unpackedWar
parameter_list|)
block|{
name|this
operator|.
name|unpackedWar
operator|=
name|unpackedWar
expr_stmt|;
name|gen
operator|=
name|buckOut
operator|.
name|resolve
argument_list|(
literal|"gen"
argument_list|)
expr_stmt|;
name|root
operator|=
name|buckOut
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doFilter (ServletRequest request, ServletResponse res, FilterChain chain)
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|res
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|String
name|pkg
init|=
literal|"gerrit-gwtui"
decl_stmt|;
name|String
name|target
init|=
literal|"ui_"
operator|+
name|rule
operator|.
name|select
argument_list|(
operator|(
name|HttpServletRequest
operator|)
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|gwtuiRecompile
operator|||
operator|!
name|uaInitialized
operator|.
name|contains
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|String
name|rule
init|=
literal|"//"
operator|+
name|pkg
operator|+
literal|":"
operator|+
name|target
decl_stmt|;
comment|// TODO(davido): instead of assuming specific Buck's internal
comment|// target directory for gwt_binary() artifacts, ask Buck for
comment|// the location of user agent permutation GWT zip, e. g.:
comment|// $ buck targets --show_output //gerrit-gwtui:ui_safari \
comment|//    | awk '{print $2}'
name|String
name|child
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s/__gwt_binary_%s__"
argument_list|,
name|pkg
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|File
name|zip
init|=
name|gen
operator|.
name|resolve
argument_list|(
name|child
argument_list|)
operator|.
name|resolve
argument_list|(
name|target
operator|+
literal|".zip"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|build
argument_list|(
name|root
argument_list|,
name|gen
argument_list|,
name|rule
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BuildFailureException
name|e
parameter_list|)
block|{
name|displayFailure
argument_list|(
name|rule
argument_list|,
name|e
operator|.
name|why
argument_list|,
operator|(
name|HttpServletResponse
operator|)
name|res
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|target
operator|.
name|equals
argument_list|(
name|lastTarget
argument_list|)
operator|||
name|lastTime
operator|!=
name|zip
operator|.
name|lastModified
argument_list|()
condition|)
block|{
name|lastTarget
operator|=
name|target
expr_stmt|;
name|lastTime
operator|=
name|zip
operator|.
name|lastModified
argument_list|()
expr_stmt|;
name|unpack
argument_list|(
name|zip
argument_list|,
name|unpackedWar
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|uaInitialized
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
DECL|method|displayFailure (String rule, byte[] why, HttpServletResponse res)
specifier|private
name|void
name|displayFailure
parameter_list|(
name|String
name|rule
parameter_list|,
name|byte
index|[]
name|why
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|res
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|res
operator|.
name|setCharacterEncoding
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|CacheHeaders
operator|.
name|setNotCacheable
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|Escaper
name|html
init|=
name|HtmlEscapers
operator|.
name|htmlEscaper
argument_list|()
decl_stmt|;
try|try
init|(
name|PrintWriter
name|w
init|=
name|res
operator|.
name|getWriter
argument_list|()
init|)
block|{
name|w
operator|.
name|write
argument_list|(
literal|"<html><title>BUILD FAILED</title><body>"
argument_list|)
expr_stmt|;
name|w
operator|.
name|format
argument_list|(
literal|"<h1>%s FAILED</h1>"
argument_list|,
name|html
operator|.
name|escape
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"<pre>"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
name|html
operator|.
name|escape
argument_list|(
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|why
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"</pre>"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"</body></html>"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|init (FilterConfig config)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|config
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{   }
DECL|method|unpack (File srcwar, File dstwar)
specifier|private
specifier|static
name|void
name|unpack
parameter_list|(
name|File
name|srcwar
parameter_list|,
name|File
name|dstwar
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ZipFile
name|zf
init|=
operator|new
name|ZipFile
argument_list|(
name|srcwar
argument_list|)
init|)
block|{
specifier|final
name|Enumeration
argument_list|<
name|?
extends|extends
name|ZipEntry
argument_list|>
name|e
init|=
name|zf
operator|.
name|entries
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|ZipEntry
name|ze
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|ze
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|ze
operator|.
name|isDirectory
argument_list|()
operator|||
name|name
operator|.
name|startsWith
argument_list|(
literal|"WEB-INF/"
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
literal|"META-INF/"
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
literal|"com/google/gerrit/launcher/"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"Main.class"
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|File
name|rawtmp
init|=
operator|new
name|File
argument_list|(
name|dstwar
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|mkdir
argument_list|(
name|rawtmp
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|rawtmp
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
try|try
init|(
name|FileOutputStream
name|rawout
init|=
operator|new
name|FileOutputStream
argument_list|(
name|rawtmp
argument_list|)
init|;
name|InputStream
name|in
operator|=
name|zf
operator|.
name|getInputStream
argument_list|(
name|ze
argument_list|)
init|)
block|{
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|rawout
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|build (Path root, Path gen, String target)
specifier|private
specifier|static
name|void
name|build
parameter_list|(
name|Path
name|root
parameter_list|,
name|Path
name|gen
parameter_list|,
name|String
name|target
parameter_list|)
throws|throws
name|IOException
throws|,
name|BuildFailureException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"buck build "
operator|+
name|target
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
name|loadBuckProperties
argument_list|(
name|gen
argument_list|)
decl_stmt|;
name|String
name|buck
init|=
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"buck"
argument_list|)
argument_list|,
literal|"buck"
argument_list|)
decl_stmt|;
name|ProcessBuilder
name|proc
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|buck
argument_list|,
literal|"build"
argument_list|,
name|target
argument_list|)
operator|.
name|directory
argument_list|(
name|root
operator|.
name|toFile
argument_list|()
argument_list|)
operator|.
name|redirectErrorStream
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"PATH"
argument_list|)
condition|)
block|{
name|proc
operator|.
name|environment
argument_list|()
operator|.
name|put
argument_list|(
literal|"PATH"
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"PATH"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|start
init|=
name|TimeUtil
operator|.
name|nowMs
argument_list|()
decl_stmt|;
name|Process
name|rebuild
init|=
name|proc
operator|.
name|start
argument_list|()
decl_stmt|;
name|byte
index|[]
name|out
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
name|rebuild
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|out
operator|=
name|ByteStreams
operator|.
name|toByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rebuild
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|int
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|rebuild
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"interrupted waiting for "
operator|+
name|buck
argument_list|)
throw|;
block|}
if|if
condition|(
name|status
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|BuildFailureException
argument_list|(
name|out
argument_list|)
throw|;
block|}
name|long
name|time
init|=
name|TimeUtil
operator|.
name|nowMs
argument_list|()
operator|-
name|start
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"UPDATED    %s in %.3fs"
argument_list|,
name|target
argument_list|,
name|time
operator|/
literal|1000.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|loadBuckProperties (Path gen)
specifier|private
specifier|static
name|Properties
name|loadBuckProperties
parameter_list|(
name|Path
name|gen
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|gen
operator|.
name|resolve
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"tools/buck/buck.properties"
argument_list|)
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|properties
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|BuildFailureException
specifier|private
specifier|static
class|class
name|BuildFailureException
extends|extends
name|Exception
block|{
DECL|field|why
specifier|final
name|byte
index|[]
name|why
decl_stmt|;
DECL|method|BuildFailureException (byte[] why)
name|BuildFailureException
parameter_list|(
name|byte
index|[]
name|why
parameter_list|)
block|{
name|this
operator|.
name|why
operator|=
name|why
expr_stmt|;
block|}
block|}
DECL|method|mkdir (File dir)
specifier|private
specifier|static
name|void
name|mkdir
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|mkdir
argument_list|(
name|dir
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|mkdir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot mkdir "
operator|+
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|dir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

