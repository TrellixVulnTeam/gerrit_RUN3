begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd.raw
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|raw
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
operator|.
name|exists
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
operator|.
name|isReadable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|UiType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|XsrfCookieFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|raw
operator|.
name|ResourceServlet
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|launcher
operator|.
name|GerritLauncher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|CacheModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provides
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|ProvisionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|StaticModule
specifier|public
class|class
name|StaticModule
extends|extends
name|ServletModule
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StaticModule
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CACHE
specifier|public
specifier|static
specifier|final
name|String
name|CACHE
init|=
literal|"static_content"
decl_stmt|;
DECL|field|GERRIT_UI_COOKIE
specifier|public
specifier|static
specifier|final
name|String
name|GERRIT_UI_COOKIE
init|=
literal|"GERRIT_UI"
decl_stmt|;
comment|/**    * Paths at which we should serve the main PolyGerrit application {@code index.html}.    *    *<p>Supports {@code "/*"} as a trailing wildcard.    */
DECL|field|POLYGERRIT_INDEX_PATHS
specifier|public
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|POLYGERRIT_INDEX_PATHS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/"
argument_list|,
literal|"/c/*"
argument_list|,
literal|"/q/*"
argument_list|,
literal|"/x/*"
argument_list|,
literal|"/admin/*"
argument_list|,
literal|"/dashboard/*"
argument_list|,
literal|"/settings/*"
argument_list|)
decl_stmt|;
comment|// TODO(dborowitz): These fragments conflict with the REST API
comment|// namespace, so they will need to use a different path.
comment|//"/groups/*",
comment|//"/projects/*");
comment|//
comment|/**    * Paths that should be treated as static assets when serving PolyGerrit.    *    *<p>Supports {@code "/*"} as a trailing wildcard.    */
DECL|field|POLYGERRIT_ASSET_PATHS
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|POLYGERRIT_ASSET_PATHS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/behaviors/*"
argument_list|,
literal|"/bower_components/*"
argument_list|,
literal|"/elements/*"
argument_list|,
literal|"/fonts/*"
argument_list|,
literal|"/scripts/*"
argument_list|,
literal|"/styles/*"
argument_list|)
decl_stmt|;
DECL|field|DOC_SERVLET
specifier|private
specifier|static
specifier|final
name|String
name|DOC_SERVLET
init|=
literal|"DocServlet"
decl_stmt|;
DECL|field|FAVICON_SERVLET
specifier|private
specifier|static
specifier|final
name|String
name|FAVICON_SERVLET
init|=
literal|"FaviconServlet"
decl_stmt|;
DECL|field|GWT_UI_SERVLET
specifier|private
specifier|static
specifier|final
name|String
name|GWT_UI_SERVLET
init|=
literal|"GwtUiServlet"
decl_stmt|;
DECL|field|POLYGERRIT_INDEX_SERVLET
specifier|private
specifier|static
specifier|final
name|String
name|POLYGERRIT_INDEX_SERVLET
init|=
literal|"PolyGerritUiIndexServlet"
decl_stmt|;
DECL|field|ROBOTS_TXT_SERVLET
specifier|private
specifier|static
specifier|final
name|String
name|ROBOTS_TXT_SERVLET
init|=
literal|"RobotsTxtServlet"
decl_stmt|;
DECL|field|GERRIT_UI_COOKIE_MAX_AGE
specifier|private
specifier|static
specifier|final
name|int
name|GERRIT_UI_COOKIE_MAX_AGE
init|=
literal|60
operator|*
literal|60
operator|*
literal|24
operator|*
literal|365
decl_stmt|;
DECL|field|options
specifier|private
specifier|final
name|GerritOptions
name|options
decl_stmt|;
DECL|field|paths
specifier|private
name|Paths
name|paths
decl_stmt|;
annotation|@
name|Inject
DECL|method|StaticModule (GerritOptions options)
specifier|public
name|StaticModule
parameter_list|(
name|GerritOptions
name|options
parameter_list|)
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
block|}
annotation|@
name|Provides
annotation|@
name|Singleton
DECL|method|getPaths ()
specifier|private
name|Paths
name|getPaths
parameter_list|()
block|{
if|if
condition|(
name|paths
operator|==
literal|null
condition|)
block|{
name|paths
operator|=
operator|new
name|Paths
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
return|return
name|paths
return|;
block|}
annotation|@
name|Override
DECL|method|configureServlets ()
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|serveRegex
argument_list|(
literal|"^/Documentation/(.+)$"
argument_list|)
operator|.
name|with
argument_list|(
name|named
argument_list|(
name|DOC_SERVLET
argument_list|)
argument_list|)
expr_stmt|;
name|serve
argument_list|(
literal|"/static/*"
argument_list|)
operator|.
name|with
argument_list|(
name|SiteStaticDirectoryServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|install
argument_list|(
operator|new
name|CacheModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|cache
argument_list|(
name|CACHE
argument_list|,
name|Path
operator|.
name|class
argument_list|,
name|Resource
operator|.
name|class
argument_list|)
operator|.
name|maximumWeight
argument_list|(
literal|1
operator|<<
literal|20
argument_list|)
operator|.
name|weigher
argument_list|(
name|ResourceServlet
operator|.
name|Weigher
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|options
operator|.
name|headless
argument_list|()
condition|)
block|{
name|install
argument_list|(
operator|new
name|CoreStaticModule
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|enablePolyGerrit
argument_list|()
condition|)
block|{
name|install
argument_list|(
operator|new
name|PolyGerritModule
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|enableGwtUi
argument_list|()
condition|)
block|{
name|install
argument_list|(
operator|new
name|GwtUiModule
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Provides
annotation|@
name|Singleton
annotation|@
name|Named
argument_list|(
name|DOC_SERVLET
argument_list|)
DECL|method|getDocServlet (@amedCACHE) Cache<Path, Resource> cache)
name|HttpServlet
name|getDocServlet
parameter_list|(
annotation|@
name|Named
argument_list|(
name|CACHE
argument_list|)
name|Cache
argument_list|<
name|Path
argument_list|,
name|Resource
argument_list|>
name|cache
parameter_list|)
block|{
name|Paths
name|p
init|=
name|getPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|warFs
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|WarDocServlet
argument_list|(
name|cache
argument_list|,
name|p
operator|.
name|warFs
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|unpackedWar
operator|!=
literal|null
operator|&&
operator|!
name|p
operator|.
name|isDev
argument_list|()
condition|)
block|{
return|return
operator|new
name|DirectoryDocServlet
argument_list|(
name|cache
argument_list|,
name|p
operator|.
name|unpackedWar
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|HttpServlet
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|service
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
name|resp
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
DECL|class|CoreStaticModule
specifier|private
class|class
name|CoreStaticModule
extends|extends
name|ServletModule
block|{
annotation|@
name|Override
DECL|method|configureServlets ()
specifier|public
name|void
name|configureServlets
parameter_list|()
block|{
name|serve
argument_list|(
literal|"/robots.txt"
argument_list|)
operator|.
name|with
argument_list|(
name|named
argument_list|(
name|ROBOTS_TXT_SERVLET
argument_list|)
argument_list|)
expr_stmt|;
name|serve
argument_list|(
literal|"/favicon.ico"
argument_list|)
operator|.
name|with
argument_list|(
name|named
argument_list|(
name|FAVICON_SERVLET
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Provides
annotation|@
name|Singleton
annotation|@
name|Named
argument_list|(
name|ROBOTS_TXT_SERVLET
argument_list|)
DECL|method|getRobotsTxtServlet ( @erritServerConfig Config cfg, SitePaths sitePaths, @Named(CACHE) Cache<Path, Resource> cache)
name|HttpServlet
name|getRobotsTxtServlet
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|SitePaths
name|sitePaths
parameter_list|,
annotation|@
name|Named
argument_list|(
name|CACHE
argument_list|)
name|Cache
argument_list|<
name|Path
argument_list|,
name|Resource
argument_list|>
name|cache
parameter_list|)
block|{
name|Path
name|configPath
init|=
name|sitePaths
operator|.
name|resolve
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"robotsFile"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|configPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exists
argument_list|(
name|configPath
argument_list|)
operator|&&
name|isReadable
argument_list|(
name|configPath
argument_list|)
condition|)
block|{
return|return
operator|new
name|SingleFileServlet
argument_list|(
name|cache
argument_list|,
name|configPath
argument_list|,
literal|true
argument_list|)
return|;
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot read httpd.robotsFile, using default"
argument_list|)
expr_stmt|;
block|}
name|Paths
name|p
init|=
name|getPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|warFs
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SingleFileServlet
argument_list|(
name|cache
argument_list|,
name|p
operator|.
name|warFs
operator|.
name|getPath
argument_list|(
literal|"/robots.txt"
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
operator|new
name|SingleFileServlet
argument_list|(
name|cache
argument_list|,
name|webappSourcePath
argument_list|(
literal|"robots.txt"
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Provides
annotation|@
name|Singleton
annotation|@
name|Named
argument_list|(
name|FAVICON_SERVLET
argument_list|)
DECL|method|getFaviconServlet (@amedCACHE) Cache<Path, Resource> cache)
name|HttpServlet
name|getFaviconServlet
parameter_list|(
annotation|@
name|Named
argument_list|(
name|CACHE
argument_list|)
name|Cache
argument_list|<
name|Path
argument_list|,
name|Resource
argument_list|>
name|cache
parameter_list|)
block|{
name|Paths
name|p
init|=
name|getPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|warFs
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SingleFileServlet
argument_list|(
name|cache
argument_list|,
name|p
operator|.
name|warFs
operator|.
name|getPath
argument_list|(
literal|"/favicon.ico"
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
operator|new
name|SingleFileServlet
argument_list|(
name|cache
argument_list|,
name|webappSourcePath
argument_list|(
literal|"favicon.ico"
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|webappSourcePath (String name)
specifier|private
name|Path
name|webappSourcePath
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Paths
name|p
init|=
name|getPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|unpackedWar
operator|!=
literal|null
condition|)
block|{
return|return
name|p
operator|.
name|unpackedWar
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
name|p
operator|.
name|sourceRoot
operator|.
name|resolve
argument_list|(
literal|"gerrit-war/src/main/webapp/"
operator|+
name|name
argument_list|)
return|;
block|}
block|}
DECL|class|GwtUiModule
specifier|private
class|class
name|GwtUiModule
extends|extends
name|ServletModule
block|{
annotation|@
name|Override
DECL|method|configureServlets ()
specifier|public
name|void
name|configureServlets
parameter_list|()
block|{
name|serveRegex
argument_list|(
literal|"^/gerrit_ui/(?!rpc/)(.*)$"
argument_list|)
operator|.
name|with
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|HttpServlet
operator|.
name|class
argument_list|,
name|Names
operator|.
name|named
argument_list|(
name|GWT_UI_SERVLET
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Paths
name|p
init|=
name|getPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isDev
argument_list|()
condition|)
block|{
name|filter
argument_list|(
literal|"/"
argument_list|)
operator|.
name|through
argument_list|(
operator|new
name|RecompileGwtUiFilter
argument_list|(
name|p
operator|.
name|builder
argument_list|,
name|p
operator|.
name|unpackedWar
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Provides
annotation|@
name|Singleton
annotation|@
name|Named
argument_list|(
name|GWT_UI_SERVLET
argument_list|)
DECL|method|getGwtUiServlet (@amedCACHE) Cache<Path, Resource> cache)
name|HttpServlet
name|getGwtUiServlet
parameter_list|(
annotation|@
name|Named
argument_list|(
name|CACHE
argument_list|)
name|Cache
argument_list|<
name|Path
argument_list|,
name|Resource
argument_list|>
name|cache
parameter_list|)
throws|throws
name|IOException
block|{
name|Paths
name|p
init|=
name|getPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|warFs
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|WarGwtUiServlet
argument_list|(
name|cache
argument_list|,
name|p
operator|.
name|warFs
argument_list|)
return|;
block|}
return|return
operator|new
name|DirectoryGwtUiServlet
argument_list|(
name|cache
argument_list|,
name|p
operator|.
name|unpackedWar
argument_list|,
name|p
operator|.
name|isDev
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|PolyGerritModule
specifier|private
class|class
name|PolyGerritModule
extends|extends
name|ServletModule
block|{
annotation|@
name|Override
DECL|method|configureServlets ()
specifier|public
name|void
name|configureServlets
parameter_list|()
block|{
for|for
control|(
name|String
name|p
range|:
name|POLYGERRIT_INDEX_PATHS
control|)
block|{
comment|// Skip XsrfCookieFilter for /, since that is already done in the GWT UI
comment|// path (UrlModule).
if|if
condition|(
operator|!
name|p
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|filter
argument_list|(
name|p
argument_list|)
operator|.
name|through
argument_list|(
name|XsrfCookieFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
name|filter
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|through
argument_list|(
name|PolyGerritFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Provides
annotation|@
name|Singleton
annotation|@
name|Named
argument_list|(
name|POLYGERRIT_INDEX_SERVLET
argument_list|)
DECL|method|getPolyGerritUiIndexServlet ( @anonicalWebUrl @ullable String canonicalUrl, @GerritServerConfig Config cfg)
name|HttpServlet
name|getPolyGerritUiIndexServlet
parameter_list|(
annotation|@
name|CanonicalWebUrl
annotation|@
name|Nullable
name|String
name|canonicalUrl
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|cdnPath
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"gerrit"
argument_list|,
literal|null
argument_list|,
literal|"cdnPath"
argument_list|)
decl_stmt|;
return|return
operator|new
name|IndexServlet
argument_list|(
name|canonicalUrl
argument_list|,
name|cdnPath
argument_list|)
return|;
block|}
annotation|@
name|Provides
annotation|@
name|Singleton
DECL|method|getPolyGerritUiServlet (@amedCACHE) Cache<Path, Resource> cache)
name|PolyGerritUiServlet
name|getPolyGerritUiServlet
parameter_list|(
annotation|@
name|Named
argument_list|(
name|CACHE
argument_list|)
name|Cache
argument_list|<
name|Path
argument_list|,
name|Resource
argument_list|>
name|cache
parameter_list|)
block|{
return|return
operator|new
name|PolyGerritUiServlet
argument_list|(
name|cache
argument_list|,
name|polyGerritBasePath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Provides
annotation|@
name|Singleton
DECL|method|getBowerComponentsServlet (@amedCACHE) Cache<Path, Resource> cache)
name|BowerComponentsDevServlet
name|getBowerComponentsServlet
parameter_list|(
annotation|@
name|Named
argument_list|(
name|CACHE
argument_list|)
name|Cache
argument_list|<
name|Path
argument_list|,
name|Resource
argument_list|>
name|cache
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getPaths
argument_list|()
operator|.
name|isDev
argument_list|()
condition|?
operator|new
name|BowerComponentsDevServlet
argument_list|(
name|cache
argument_list|,
name|getPaths
argument_list|()
operator|.
name|builder
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Provides
annotation|@
name|Singleton
DECL|method|getFontsServlet (@amedCACHE) Cache<Path, Resource> cache)
name|FontsDevServlet
name|getFontsServlet
parameter_list|(
annotation|@
name|Named
argument_list|(
name|CACHE
argument_list|)
name|Cache
argument_list|<
name|Path
argument_list|,
name|Resource
argument_list|>
name|cache
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getPaths
argument_list|()
operator|.
name|isDev
argument_list|()
condition|?
operator|new
name|FontsDevServlet
argument_list|(
name|cache
argument_list|,
name|getPaths
argument_list|()
operator|.
name|builder
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|polyGerritBasePath ()
specifier|private
name|Path
name|polyGerritBasePath
parameter_list|()
block|{
name|Paths
name|p
init|=
name|getPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|forcePolyGerritDev
argument_list|()
condition|)
block|{
name|checkArgument
argument_list|(
name|p
operator|.
name|sourceRoot
operator|!=
literal|null
argument_list|,
literal|"no source root directory found for PolyGerrit developer mode"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|isDev
argument_list|()
condition|)
block|{
return|return
name|p
operator|.
name|sourceRoot
operator|.
name|resolve
argument_list|(
literal|"polygerrit-ui"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"app"
argument_list|)
return|;
block|}
return|return
name|p
operator|.
name|warFs
operator|!=
literal|null
condition|?
name|p
operator|.
name|warFs
operator|.
name|getPath
argument_list|(
literal|"/polygerrit_ui"
argument_list|)
else|:
name|p
operator|.
name|unpackedWar
operator|.
name|resolve
argument_list|(
literal|"polygerrit_ui"
argument_list|)
return|;
block|}
block|}
DECL|class|Paths
specifier|private
specifier|static
class|class
name|Paths
block|{
DECL|field|warFs
specifier|private
specifier|final
name|FileSystem
name|warFs
decl_stmt|;
DECL|field|builder
specifier|private
specifier|final
name|BazelBuild
name|builder
decl_stmt|;
DECL|field|sourceRoot
specifier|private
specifier|final
name|Path
name|sourceRoot
decl_stmt|;
DECL|field|unpackedWar
specifier|private
specifier|final
name|Path
name|unpackedWar
decl_stmt|;
DECL|field|development
specifier|private
specifier|final
name|boolean
name|development
decl_stmt|;
DECL|method|Paths (GerritOptions options)
specifier|private
name|Paths
parameter_list|(
name|GerritOptions
name|options
parameter_list|)
block|{
try|try
block|{
name|File
name|launcherLoadedFrom
init|=
name|getLauncherLoadedFrom
argument_list|()
decl_stmt|;
if|if
condition|(
name|launcherLoadedFrom
operator|!=
literal|null
operator|&&
name|launcherLoadedFrom
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
comment|// Special case: unpacked war archive deployed in container.
comment|// The path is something like:
comment|//<container>/<gerrit>/WEB-INF/lib/launcher.jar
comment|// Switch to exploded war case with<container>/webapp>/<gerrit>
comment|// root directory
name|warFs
operator|=
literal|null
expr_stmt|;
name|unpackedWar
operator|=
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
operator|.
name|get
argument_list|(
name|launcherLoadedFrom
operator|.
name|getParentFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|sourceRoot
operator|=
literal|null
expr_stmt|;
name|development
operator|=
literal|false
expr_stmt|;
name|builder
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|warFs
operator|=
name|getDistributionArchive
argument_list|(
name|launcherLoadedFrom
argument_list|)
expr_stmt|;
if|if
condition|(
name|warFs
operator|==
literal|null
condition|)
block|{
name|unpackedWar
operator|=
name|makeWarTempDir
argument_list|()
expr_stmt|;
name|development
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|options
operator|.
name|forcePolyGerritDev
argument_list|()
condition|)
block|{
name|unpackedWar
operator|=
literal|null
expr_stmt|;
name|development
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|unpackedWar
operator|=
literal|null
expr_stmt|;
name|development
operator|=
literal|false
expr_stmt|;
name|sourceRoot
operator|=
literal|null
expr_stmt|;
name|builder
operator|=
literal|null
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"Error initializing static content paths"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|sourceRoot
operator|=
name|getSourceRootOrNull
argument_list|()
expr_stmt|;
name|builder
operator|=
operator|new
name|BazelBuild
argument_list|(
name|sourceRoot
argument_list|)
expr_stmt|;
block|}
DECL|method|getSourceRootOrNull ()
specifier|private
specifier|static
name|Path
name|getSourceRootOrNull
parameter_list|()
block|{
try|try
block|{
return|return
name|GerritLauncher
operator|.
name|resolveInSourceRoot
argument_list|(
literal|"."
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getDistributionArchive (File war)
specifier|private
name|FileSystem
name|getDistributionArchive
parameter_list|(
name|File
name|war
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|war
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|GerritLauncher
operator|.
name|getZipFileSystem
argument_list|(
name|war
operator|.
name|toPath
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getLauncherLoadedFrom ()
specifier|private
name|File
name|getLauncherLoadedFrom
parameter_list|()
block|{
name|File
name|war
decl_stmt|;
try|try
block|{
name|war
operator|=
name|GerritLauncher
operator|.
name|getDistributionArchive
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|instanceof
name|FileNotFoundException
operator|)
operator|&&
name|GerritLauncher
operator|.
name|NOT_ARCHIVED
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ProvisionException
name|pe
init|=
operator|new
name|ProvisionException
argument_list|(
literal|"Error reading gerrit.war"
argument_list|)
decl_stmt|;
name|pe
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|pe
throw|;
block|}
return|return
name|war
return|;
block|}
DECL|method|isDev ()
specifier|private
name|boolean
name|isDev
parameter_list|()
block|{
return|return
name|development
return|;
block|}
DECL|method|makeWarTempDir ()
specifier|private
name|Path
name|makeWarTempDir
parameter_list|()
block|{
comment|// Obtain our local temporary directory, but it comes back as a file
comment|// so we have to switch it to be a directory post creation.
comment|//
try|try
block|{
name|File
name|dstwar
init|=
name|GerritLauncher
operator|.
name|createTempFile
argument_list|(
literal|"gerrit_"
argument_list|,
literal|"war"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dstwar
operator|.
name|delete
argument_list|()
operator|||
operator|!
name|dstwar
operator|.
name|mkdir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot mkdir "
operator|+
name|dstwar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
comment|// Jetty normally refuses to serve out of a symlinked directory, as
comment|// a security feature. Try to resolve out any symlinks in the path.
comment|//
try|try
block|{
return|return
name|dstwar
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|toPath
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|dstwar
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|toPath
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ProvisionException
name|pe
init|=
operator|new
name|ProvisionException
argument_list|(
literal|"Cannot create war tempdir"
argument_list|)
decl_stmt|;
name|pe
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|pe
throw|;
block|}
block|}
block|}
DECL|method|named (String name)
specifier|private
specifier|static
name|Key
argument_list|<
name|HttpServlet
argument_list|>
name|named
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|Key
operator|.
name|get
argument_list|(
name|HttpServlet
operator|.
name|class
argument_list|,
name|Names
operator|.
name|named
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Singleton
DECL|class|PolyGerritFilter
specifier|private
specifier|static
class|class
name|PolyGerritFilter
implements|implements
name|Filter
block|{
DECL|field|options
specifier|private
specifier|final
name|GerritOptions
name|options
decl_stmt|;
DECL|field|paths
specifier|private
specifier|final
name|Paths
name|paths
decl_stmt|;
DECL|field|polyGerritIndex
specifier|private
specifier|final
name|HttpServlet
name|polyGerritIndex
decl_stmt|;
DECL|field|polygerritUI
specifier|private
specifier|final
name|PolyGerritUiServlet
name|polygerritUI
decl_stmt|;
DECL|field|bowerComponentServlet
specifier|private
specifier|final
name|BowerComponentsDevServlet
name|bowerComponentServlet
decl_stmt|;
DECL|field|fontServlet
specifier|private
specifier|final
name|FontsDevServlet
name|fontServlet
decl_stmt|;
annotation|@
name|Inject
DECL|method|PolyGerritFilter ( GerritOptions options, Paths paths, @Named(POLYGERRIT_INDEX_SERVLET) HttpServlet polyGerritIndex, PolyGerritUiServlet polygerritUI, @Nullable BowerComponentsDevServlet bowerComponentServlet, @Nullable FontsDevServlet fontServlet)
name|PolyGerritFilter
parameter_list|(
name|GerritOptions
name|options
parameter_list|,
name|Paths
name|paths
parameter_list|,
annotation|@
name|Named
argument_list|(
name|POLYGERRIT_INDEX_SERVLET
argument_list|)
name|HttpServlet
name|polyGerritIndex
parameter_list|,
name|PolyGerritUiServlet
name|polygerritUI
parameter_list|,
annotation|@
name|Nullable
name|BowerComponentsDevServlet
name|bowerComponentServlet
parameter_list|,
annotation|@
name|Nullable
name|FontsDevServlet
name|fontServlet
parameter_list|)
block|{
name|this
operator|.
name|paths
operator|=
name|paths
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|this
operator|.
name|polyGerritIndex
operator|=
name|polyGerritIndex
expr_stmt|;
name|this
operator|.
name|polygerritUI
operator|=
name|polygerritUI
expr_stmt|;
name|this
operator|.
name|bowerComponentServlet
operator|=
name|bowerComponentServlet
expr_stmt|;
name|this
operator|.
name|fontServlet
operator|=
name|fontServlet
expr_stmt|;
name|checkState
argument_list|(
name|options
operator|.
name|enablePolyGerrit
argument_list|()
argument_list|,
literal|"can't install PolyGerritFilter when PolyGerrit is disabled"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (FilterConfig filterConfig)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{}
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|doFilter (ServletRequest request, ServletResponse response, FilterChain chain)
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|HttpServletRequest
name|req
init|=
operator|(
name|HttpServletRequest
operator|)
name|request
decl_stmt|;
name|HttpServletResponse
name|res
init|=
operator|(
name|HttpServletResponse
operator|)
name|response
decl_stmt|;
if|if
condition|(
name|handlePolyGerritParam
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|isPolyGerritEnabled
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|chain
operator|.
name|doFilter
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return;
block|}
name|GuiceFilterRequestWrapper
name|reqWrapper
init|=
operator|new
name|GuiceFilterRequestWrapper
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|pathInfo
argument_list|(
name|req
argument_list|)
decl_stmt|;
comment|// Special case assets during development that are built by Buck and not
comment|// served out of the source tree.
comment|//
comment|// In the war case, these are either inlined by vulcanize, or live under
comment|// /polygerrit_ui in the war file, so we can just treat them as normal
comment|// assets.
if|if
condition|(
name|paths
operator|.
name|isDev
argument_list|()
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/bower_components/"
argument_list|)
condition|)
block|{
name|bowerComponentServlet
operator|.
name|service
argument_list|(
name|reqWrapper
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/fonts/"
argument_list|)
condition|)
block|{
name|fontServlet
operator|.
name|service
argument_list|(
name|reqWrapper
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|isPolyGerritIndex
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|polyGerritIndex
operator|.
name|service
argument_list|(
name|reqWrapper
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isPolyGerritAsset
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|polygerritUI
operator|.
name|service
argument_list|(
name|reqWrapper
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return;
block|}
name|chain
operator|.
name|doFilter
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
DECL|method|pathInfo (HttpServletRequest req)
specifier|private
specifier|static
name|String
name|pathInfo
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|String
name|uri
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
name|String
name|ctx
init|=
name|req
operator|.
name|getContextPath
argument_list|()
decl_stmt|;
return|return
name|uri
operator|.
name|startsWith
argument_list|(
name|ctx
argument_list|)
condition|?
name|uri
operator|.
name|substring
argument_list|(
name|ctx
operator|.
name|length
argument_list|()
argument_list|)
else|:
name|uri
return|;
block|}
DECL|method|handlePolyGerritParam (HttpServletRequest req, HttpServletResponse res)
specifier|private
name|boolean
name|handlePolyGerritParam
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|options
operator|.
name|enableGwtUi
argument_list|()
operator|||
operator|!
literal|"GET"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|redirect
init|=
literal|false
decl_stmt|;
name|String
name|param
init|=
name|req
operator|.
name|getParameter
argument_list|(
literal|"polygerrit"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|param
argument_list|)
condition|)
block|{
name|setPolyGerritCookie
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|UiType
operator|.
name|POLYGERRIT
argument_list|)
expr_stmt|;
name|redirect
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"0"
operator|.
name|equals
argument_list|(
name|param
argument_list|)
condition|)
block|{
name|setPolyGerritCookie
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|UiType
operator|.
name|GWT
argument_list|)
expr_stmt|;
name|redirect
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|redirect
condition|)
block|{
comment|// Strip polygerrit param from URL. This actually strips all params,
comment|// which is a similar behavior to the JS PolyGerrit redirector code.
comment|// Stripping just one param is frustratingly difficult without the use
comment|// of Apache httpclient, which is a dep we don't want here:
comment|// https://gerrit-review.googlesource.com/#/c/57570/57/gerrit-httpd/BUCK@32
name|res
operator|.
name|sendRedirect
argument_list|(
name|req
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|redirect
return|;
block|}
DECL|method|isPolyGerritEnabled (HttpServletRequest req)
specifier|private
name|boolean
name|isPolyGerritEnabled
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
return|return
operator|!
name|options
operator|.
name|enableGwtUi
argument_list|()
operator|||
name|isPolyGerritCookie
argument_list|(
name|req
argument_list|)
return|;
block|}
DECL|method|isPolyGerritCookie (HttpServletRequest req)
specifier|private
name|boolean
name|isPolyGerritCookie
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|UiType
name|type
init|=
name|options
operator|.
name|defaultUi
argument_list|()
decl_stmt|;
name|Cookie
index|[]
name|all
init|=
name|req
operator|.
name|getCookies
argument_list|()
decl_stmt|;
if|if
condition|(
name|all
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Cookie
name|c
range|:
name|all
control|)
block|{
if|if
condition|(
name|GERRIT_UI_COOKIE
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|UiType
name|t
init|=
name|UiType
operator|.
name|parse
argument_list|(
name|c
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|t
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|type
operator|==
name|UiType
operator|.
name|POLYGERRIT
return|;
block|}
DECL|method|setPolyGerritCookie (HttpServletRequest req, HttpServletResponse res, UiType pref)
specifier|private
name|void
name|setPolyGerritCookie
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|UiType
name|pref
parameter_list|)
block|{
comment|// Only actually set a cookie if both UIs are enabled in the server;
comment|// otherwise clear it.
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
name|GERRIT_UI_COOKIE
argument_list|,
name|pref
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|enablePolyGerrit
argument_list|()
operator|&&
name|options
operator|.
name|enableGwtUi
argument_list|()
condition|)
block|{
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setSecure
argument_list|(
name|isSecure
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setMaxAge
argument_list|(
name|GERRIT_UI_COOKIE_MAX_AGE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cookie
operator|.
name|setValue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setMaxAge
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|addCookie
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
block|}
DECL|method|isSecure (HttpServletRequest req)
specifier|private
specifier|static
name|boolean
name|isSecure
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
return|return
name|req
operator|.
name|isSecure
argument_list|()
operator|||
literal|"https"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getScheme
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isPolyGerritAsset (String path)
specifier|private
specifier|static
name|boolean
name|isPolyGerritAsset
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|matchPath
argument_list|(
name|POLYGERRIT_ASSET_PATHS
argument_list|,
name|path
argument_list|)
return|;
block|}
DECL|method|isPolyGerritIndex (String path)
specifier|private
specifier|static
name|boolean
name|isPolyGerritIndex
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|matchPath
argument_list|(
name|POLYGERRIT_INDEX_PATHS
argument_list|,
name|path
argument_list|)
return|;
block|}
DECL|method|matchPath (Iterable<String> paths, String path)
specifier|private
specifier|static
name|boolean
name|matchPath
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|,
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
if|if
condition|(
name|p
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|regionMatches
argument_list|(
literal|0
argument_list|,
name|p
argument_list|,
literal|0
argument_list|,
name|p
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|GuiceFilterRequestWrapper
specifier|private
specifier|static
class|class
name|GuiceFilterRequestWrapper
extends|extends
name|HttpServletRequestWrapper
block|{
DECL|method|GuiceFilterRequestWrapper (HttpServletRequest req)
name|GuiceFilterRequestWrapper
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|super
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPathInfo ()
specifier|public
name|String
name|getPathInfo
parameter_list|()
block|{
name|String
name|uri
init|=
name|getRequestURI
argument_list|()
decl_stmt|;
name|String
name|ctx
init|=
name|getContextPath
argument_list|()
decl_stmt|;
comment|// This is a workaround for long standing guice filter bug:
comment|// https://github.com/google/guice/issues/807
name|String
name|res
init|=
name|uri
operator|.
name|startsWith
argument_list|(
name|ctx
argument_list|)
condition|?
name|uri
operator|.
name|substring
argument_list|(
name|ctx
operator|.
name|length
argument_list|()
argument_list|)
else|:
name|uri
decl_stmt|;
comment|// Match the logic in the ResourceServlet, that re-add "/"
comment|// for null path info
if|if
condition|(
literal|"/"
operator|.
name|equals
argument_list|(
name|res
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|res
return|;
block|}
block|}
block|}
end_class

end_unit

