begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd.rpc.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|rpc
operator|.
name|project
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ListBranchesResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|InvalidNameException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|InvalidRevisionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|rpc
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ReplicationQueue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|ObjectWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|AddBranch
class|class
name|AddBranch
extends|extends
name|Handler
argument_list|<
name|ListBranchesResult
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AddBranch
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|interface|Factory
interface|interface
name|Factory
block|{
DECL|method|create (@ssisted Project.NameKey projectName, @Assisted(R) String branchName, @Assisted(R) String startingRevision)
name|AddBranch
name|create
parameter_list|(
annotation|@
name|Assisted
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"branchName"
argument_list|)
name|String
name|branchName
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"startingRevision"
argument_list|)
name|String
name|startingRevision
parameter_list|)
function_decl|;
block|}
DECL|field|projectControlFactory
specifier|private
specifier|final
name|ProjectControl
operator|.
name|Factory
name|projectControlFactory
decl_stmt|;
DECL|field|listBranchesFactory
specifier|private
specifier|final
name|ListBranches
operator|.
name|Factory
name|listBranchesFactory
decl_stmt|;
DECL|field|identifiedUser
specifier|private
specifier|final
name|IdentifiedUser
name|identifiedUser
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|replication
specifier|private
specifier|final
name|ReplicationQueue
name|replication
decl_stmt|;
DECL|field|projectName
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|projectName
decl_stmt|;
DECL|field|branchName
specifier|private
specifier|final
name|String
name|branchName
decl_stmt|;
DECL|field|startingRevision
specifier|private
specifier|final
name|String
name|startingRevision
decl_stmt|;
annotation|@
name|Inject
DECL|method|AddBranch (final ProjectControl.Factory projectControlFactory, final ListBranches.Factory listBranchesFactory, final IdentifiedUser identifiedUser, final GitRepositoryManager repoManager, final ReplicationQueue replication, @Assisted Project.NameKey projectName, @Assisted(R) String branchName, @Assisted(R) String startingRevision)
name|AddBranch
parameter_list|(
specifier|final
name|ProjectControl
operator|.
name|Factory
name|projectControlFactory
parameter_list|,
specifier|final
name|ListBranches
operator|.
name|Factory
name|listBranchesFactory
parameter_list|,
specifier|final
name|IdentifiedUser
name|identifiedUser
parameter_list|,
specifier|final
name|GitRepositoryManager
name|repoManager
parameter_list|,
specifier|final
name|ReplicationQueue
name|replication
parameter_list|,
annotation|@
name|Assisted
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"branchName"
argument_list|)
name|String
name|branchName
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"startingRevision"
argument_list|)
name|String
name|startingRevision
parameter_list|)
block|{
name|this
operator|.
name|projectControlFactory
operator|=
name|projectControlFactory
expr_stmt|;
name|this
operator|.
name|listBranchesFactory
operator|=
name|listBranchesFactory
expr_stmt|;
name|this
operator|.
name|identifiedUser
operator|=
name|identifiedUser
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|replication
operator|=
name|replication
expr_stmt|;
name|this
operator|.
name|projectName
operator|=
name|projectName
expr_stmt|;
name|this
operator|.
name|branchName
operator|=
name|branchName
expr_stmt|;
name|this
operator|.
name|startingRevision
operator|=
name|startingRevision
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|ListBranchesResult
name|call
parameter_list|()
throws|throws
name|NoSuchProjectException
throws|,
name|InvalidNameException
throws|,
name|InvalidRevisionException
throws|,
name|IOException
block|{
specifier|final
name|ProjectControl
name|projectControl
init|=
name|projectControlFactory
operator|.
name|controlFor
argument_list|(
name|projectName
argument_list|)
decl_stmt|;
name|String
name|refname
init|=
name|branchName
decl_stmt|;
while|while
condition|(
name|refname
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|refname
operator|=
name|refname
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|refname
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_REFS
argument_list|)
condition|)
block|{
name|refname
operator|=
name|Constants
operator|.
name|R_HEADS
operator|+
name|refname
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Repository
operator|.
name|isValidRefName
argument_list|(
name|refname
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidNameException
argument_list|()
throw|;
block|}
specifier|final
name|Branch
operator|.
name|NameKey
name|name
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|projectName
argument_list|,
name|refname
argument_list|)
decl_stmt|;
specifier|final
name|RefControl
name|refControl
init|=
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|projectName
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|ObjectId
name|revid
init|=
name|parseStartingRevision
argument_list|(
name|repo
argument_list|)
decl_stmt|;
specifier|final
name|RevWalk
name|rw
init|=
name|verifyConnected
argument_list|(
name|repo
argument_list|,
name|revid
argument_list|)
decl_stmt|;
name|RevObject
name|object
init|=
name|rw
operator|.
name|parseAny
argument_list|(
name|revid
argument_list|)
decl_stmt|;
if|if
condition|(
name|refname
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
condition|)
block|{
comment|// Ensure that what we start the branch from is a commit. If we
comment|// were given a tag, deference to the commit instead.
comment|//
try|try
block|{
name|object
operator|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|notCommit
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|startingRevision
operator|+
literal|" not a commit"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|refControl
operator|.
name|canCreate
argument_list|(
name|rw
argument_list|,
name|object
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot create "
operator|+
name|refname
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|RefUpdate
name|u
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|refname
argument_list|)
decl_stmt|;
name|u
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|u
operator|.
name|setNewObjectId
argument_list|(
name|object
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
name|u
operator|.
name|setRefLogIdent
argument_list|(
name|identifiedUser
operator|.
name|newRefLogIdent
argument_list|()
argument_list|)
expr_stmt|;
name|u
operator|.
name|setRefLogMessage
argument_list|(
literal|"created via web from "
operator|+
name|startingRevision
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|RefUpdate
operator|.
name|Result
name|result
init|=
name|u
operator|.
name|update
argument_list|(
name|rw
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|FAST_FORWARD
case|:
case|case
name|NEW
case|:
case|case
name|NO_CHANGE
case|:
name|replication
operator|.
name|scheduleUpdate
argument_list|(
name|name
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|refname
argument_list|)
expr_stmt|;
break|break;
default|default:
block|{
specifier|final
name|String
name|msg
init|=
literal|"Cannot create branch "
operator|+
name|name
operator|+
literal|": "
operator|+
name|result
operator|.
name|name
argument_list|()
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|result
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot create branch "
operator|+
name|name
argument_list|,
name|err
argument_list|)
expr_stmt|;
throw|throw
name|err
throw|;
block|}
block|}
finally|finally
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|listBranchesFactory
operator|.
name|create
argument_list|(
name|projectName
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
DECL|method|parseStartingRevision (final Repository repo)
specifier|private
name|ObjectId
name|parseStartingRevision
parameter_list|(
specifier|final
name|Repository
name|repo
parameter_list|)
throws|throws
name|InvalidRevisionException
block|{
try|try
block|{
specifier|final
name|ObjectId
name|revid
init|=
name|repo
operator|.
name|resolve
argument_list|(
name|startingRevision
argument_list|)
decl_stmt|;
if|if
condition|(
name|revid
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidRevisionException
argument_list|()
throw|;
block|}
return|return
name|revid
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot resolve \""
operator|+
name|startingRevision
operator|+
literal|"\" in project \""
operator|+
name|projectName
operator|+
literal|"\""
argument_list|,
name|err
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidRevisionException
argument_list|()
throw|;
block|}
block|}
DECL|method|verifyConnected (final Repository repo, final ObjectId revid)
specifier|private
name|RevWalk
name|verifyConnected
parameter_list|(
specifier|final
name|Repository
name|repo
parameter_list|,
specifier|final
name|ObjectId
name|revid
parameter_list|)
throws|throws
name|InvalidRevisionException
block|{
try|try
block|{
specifier|final
name|ObjectWalk
name|rw
init|=
operator|new
name|ObjectWalk
argument_list|(
name|repo
argument_list|)
decl_stmt|;
try|try
block|{
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|revid
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidRevisionException
argument_list|()
throw|;
block|}
for|for
control|(
specifier|final
name|Ref
name|r
range|:
name|repo
operator|.
name|getAllRefs
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|rw
operator|.
name|markUninteresting
argument_list|(
name|rw
operator|.
name|parseAny
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingObjectException
name|err
parameter_list|)
block|{
continue|continue;
block|}
block|}
name|rw
operator|.
name|checkConnectivity
argument_list|()
expr_stmt|;
return|return
name|rw
return|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidRevisionException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|MissingObjectException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidRevisionException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Repository \""
operator|+
name|repo
operator|.
name|getDirectory
argument_list|()
operator|+
literal|"\" may be corrupt; suggest running git fsck"
argument_list|,
name|err
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidRevisionException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

