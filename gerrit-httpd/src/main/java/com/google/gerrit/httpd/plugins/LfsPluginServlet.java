begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd.plugins
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|plugins
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|lfs
operator|.
name|LfsDefinitions
operator|.
name|CONTENTTYPE_VND_GIT_LFS_JSON
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_NOT_IMPLEMENTED
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|RegistrationHandle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|resources
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|ReloadPluginListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|StartPluginListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|server
operator|.
name|CacheHeaders
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|LfsPluginServlet
specifier|public
class|class
name|LfsPluginServlet
extends|extends
name|HttpServlet
implements|implements
name|StartPluginListener
implements|,
name|ReloadPluginListener
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LfsPluginServlet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MESSAGE_LFS_NOT_CONFIGURED
specifier|private
specifier|static
specifier|final
name|String
name|MESSAGE_LFS_NOT_CONFIGURED
init|=
literal|"{\"message\":\"No LFS plugin is configured to handle LFS requests.\"}"
decl_stmt|;
DECL|field|pending
specifier|private
name|List
argument_list|<
name|Plugin
argument_list|>
name|pending
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|pluginName
specifier|private
specifier|final
name|String
name|pluginName
decl_stmt|;
DECL|field|chain
specifier|private
specifier|final
name|FilterChain
name|chain
decl_stmt|;
DECL|field|filter
specifier|private
name|AtomicReference
argument_list|<
name|GuiceFilter
argument_list|>
name|filter
decl_stmt|;
annotation|@
name|Inject
DECL|method|LfsPluginServlet (@erritServerConfig Config cfg)
name|LfsPluginServlet
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|)
block|{
name|this
operator|.
name|pluginName
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"lfs"
argument_list|,
literal|null
argument_list|,
literal|"plugin"
argument_list|)
expr_stmt|;
name|this
operator|.
name|chain
operator|=
operator|new
name|FilterChain
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|req
parameter_list|,
name|ServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|Resource
operator|.
name|NOT_FOUND
operator|.
name|send
argument_list|(
operator|(
name|HttpServletRequest
operator|)
name|req
argument_list|,
operator|(
name|HttpServletResponse
operator|)
name|res
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|this
operator|.
name|filter
operator|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|service (HttpServletRequest req, HttpServletResponse res)
specifier|protected
name|void
name|service
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
if|if
condition|(
name|filter
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|responseLfsNotConfigured
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return;
block|}
name|filter
operator|.
name|get
argument_list|()
operator|.
name|doFilter
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (ServletConfig config)
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
for|for
control|(
name|Plugin
name|plugin
range|:
name|pending
control|)
block|{
name|install
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
block|}
name|pending
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onStartPlugin (Plugin plugin)
specifier|public
specifier|synchronized
name|void
name|onStartPlugin
parameter_list|(
name|Plugin
name|plugin
parameter_list|)
block|{
if|if
condition|(
name|pending
operator|!=
literal|null
condition|)
block|{
name|pending
operator|.
name|add
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|install
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onReloadPlugin (Plugin oldPlugin, Plugin newPlugin)
specifier|public
name|void
name|onReloadPlugin
parameter_list|(
name|Plugin
name|oldPlugin
parameter_list|,
name|Plugin
name|newPlugin
parameter_list|)
block|{
name|install
argument_list|(
name|newPlugin
argument_list|)
expr_stmt|;
block|}
DECL|method|responseLfsNotConfigured (HttpServletResponse res)
specifier|private
name|void
name|responseLfsNotConfigured
parameter_list|(
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|CacheHeaders
operator|.
name|setNotCacheable
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContentType
argument_list|(
name|CONTENTTYPE_VND_GIT_LFS_JSON
argument_list|)
expr_stmt|;
name|res
operator|.
name|setStatus
argument_list|(
name|SC_NOT_IMPLEMENTED
argument_list|)
expr_stmt|;
name|Writer
name|w
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|res
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
name|MESSAGE_LFS_NOT_CONFIGURED
argument_list|)
expr_stmt|;
name|w
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|install (Plugin plugin)
specifier|private
name|void
name|install
parameter_list|(
name|Plugin
name|plugin
parameter_list|)
block|{
if|if
condition|(
operator|!
name|plugin
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|pluginName
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|GuiceFilter
name|guiceFilter
init|=
name|load
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
name|plugin
operator|.
name|add
argument_list|(
operator|new
name|RegistrationHandle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|filter
operator|.
name|compareAndSet
argument_list|(
name|guiceFilter
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|filter
operator|.
name|set
argument_list|(
name|guiceFilter
argument_list|)
expr_stmt|;
block|}
DECL|method|load (Plugin plugin)
specifier|private
name|GuiceFilter
name|load
parameter_list|(
name|Plugin
name|plugin
parameter_list|)
block|{
if|if
condition|(
name|plugin
operator|.
name|getHttpInjector
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|name
init|=
name|plugin
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|GuiceFilter
name|guiceFilter
decl_stmt|;
try|try
block|{
name|guiceFilter
operator|=
name|plugin
operator|.
name|getHttpInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|GuiceFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Plugin {} cannot load GuiceFilter"
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|ServletContext
name|ctx
init|=
name|PluginServletContext
operator|.
name|create
argument_list|(
name|plugin
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|guiceFilter
operator|.
name|init
argument_list|(
operator|new
name|WrappedFilterConfig
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Plugin {} failed to initialize HTTP"
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|plugin
operator|.
name|add
argument_list|(
operator|new
name|RegistrationHandle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|guiceFilter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|guiceFilter
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

