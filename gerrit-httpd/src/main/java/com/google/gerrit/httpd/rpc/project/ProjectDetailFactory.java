begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd.rpc.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|rpc
operator|.
name|project
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|InheritedRefRight
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ProjectDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|rpc
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|RefRight
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ProjectDetailFactory
class|class
name|ProjectDetailFactory
extends|extends
name|Handler
argument_list|<
name|ProjectDetail
argument_list|>
block|{
DECL|interface|Factory
interface|interface
name|Factory
block|{
DECL|method|create (@ssisted Project.NameKey name)
name|ProjectDetailFactory
name|create
parameter_list|(
annotation|@
name|Assisted
name|Project
operator|.
name|NameKey
name|name
parameter_list|)
function_decl|;
block|}
DECL|field|approvalTypes
specifier|private
specifier|final
name|ApprovalTypes
name|approvalTypes
decl_stmt|;
DECL|field|groupCache
specifier|private
specifier|final
name|GroupCache
name|groupCache
decl_stmt|;
DECL|field|projectControlFactory
specifier|private
specifier|final
name|ProjectControl
operator|.
name|Factory
name|projectControlFactory
decl_stmt|;
DECL|field|projectName
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|projectName
decl_stmt|;
DECL|field|groups
specifier|private
name|Map
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|,
name|AccountGroup
argument_list|>
name|groups
decl_stmt|;
annotation|@
name|Inject
DECL|method|ProjectDetailFactory (final ApprovalTypes approvalTypes, final GroupCache groupCache, final ProjectControl.Factory projectControlFactory, @Assisted final Project.NameKey name)
name|ProjectDetailFactory
parameter_list|(
specifier|final
name|ApprovalTypes
name|approvalTypes
parameter_list|,
specifier|final
name|GroupCache
name|groupCache
parameter_list|,
specifier|final
name|ProjectControl
operator|.
name|Factory
name|projectControlFactory
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|Project
operator|.
name|NameKey
name|name
parameter_list|)
block|{
name|this
operator|.
name|approvalTypes
operator|=
name|approvalTypes
expr_stmt|;
name|this
operator|.
name|groupCache
operator|=
name|groupCache
expr_stmt|;
name|this
operator|.
name|projectControlFactory
operator|=
name|projectControlFactory
expr_stmt|;
name|this
operator|.
name|projectName
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|ProjectDetail
name|call
parameter_list|()
throws|throws
name|NoSuchProjectException
block|{
specifier|final
name|ProjectState
name|projectState
init|=
name|projectControlFactory
operator|.
name|validateFor
argument_list|(
name|projectName
argument_list|,
name|ProjectControl
operator|.
name|OWNER
operator||
name|ProjectControl
operator|.
name|VISIBLE
argument_list|)
operator|.
name|getProjectState
argument_list|()
decl_stmt|;
specifier|final
name|ProjectDetail
name|detail
init|=
operator|new
name|ProjectDetail
argument_list|()
decl_stmt|;
name|detail
operator|.
name|setProject
argument_list|(
name|projectState
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
name|groups
operator|=
operator|new
name|HashMap
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|,
name|AccountGroup
argument_list|>
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|InheritedRefRight
argument_list|>
name|refRights
init|=
operator|new
name|ArrayList
argument_list|<
name|InheritedRefRight
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|RefRight
name|r
range|:
name|projectState
operator|.
name|getInheritedRights
argument_list|()
control|)
block|{
name|InheritedRefRight
name|refRight
init|=
operator|new
name|InheritedRefRight
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|refRights
operator|.
name|contains
argument_list|(
name|refRight
argument_list|)
condition|)
block|{
name|refRights
operator|.
name|add
argument_list|(
name|refRight
argument_list|)
expr_stmt|;
name|wantGroup
argument_list|(
name|r
operator|.
name|getAccountGroupId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|RefRight
name|r
range|:
name|projectState
operator|.
name|getLocalRights
argument_list|()
control|)
block|{
name|refRights
operator|.
name|add
argument_list|(
operator|new
name|InheritedRefRight
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|wantGroup
argument_list|(
name|r
operator|.
name|getAccountGroupId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|loadGroups
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|refRights
argument_list|,
operator|new
name|Comparator
argument_list|<
name|InheritedRefRight
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|InheritedRefRight
name|a
parameter_list|,
specifier|final
name|InheritedRefRight
name|b
parameter_list|)
block|{
specifier|final
name|RefRight
name|right1
init|=
name|a
operator|.
name|getRight
argument_list|()
decl_stmt|;
specifier|final
name|RefRight
name|right2
init|=
name|b
operator|.
name|getRight
argument_list|()
decl_stmt|;
name|int
name|rc
init|=
name|categoryOf
argument_list|(
name|right1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|categoryOf
argument_list|(
name|right2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|0
condition|)
block|{
name|rc
operator|=
name|right1
operator|.
name|getRefPattern
argument_list|()
operator|.
name|compareTo
argument_list|(
name|right2
operator|.
name|getRefPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|==
literal|0
condition|)
block|{
name|rc
operator|=
name|groupOf
argument_list|(
name|right1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|groupOf
argument_list|(
name|right2
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|private
name|String
name|categoryOf
parameter_list|(
specifier|final
name|RefRight
name|r
parameter_list|)
block|{
specifier|final
name|ApprovalType
name|type
init|=
name|approvalTypes
operator|.
name|getApprovalType
argument_list|(
name|r
operator|.
name|getApprovalCategoryId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
name|r
operator|.
name|getApprovalCategoryId
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
return|return
name|type
operator|.
name|getCategory
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|private
name|String
name|groupOf
parameter_list|(
specifier|final
name|RefRight
name|r
parameter_list|)
block|{
return|return
name|groups
operator|.
name|get
argument_list|(
name|r
operator|.
name|getAccountGroupId
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|detail
operator|.
name|setRights
argument_list|(
name|refRights
argument_list|)
expr_stmt|;
name|detail
operator|.
name|setGroups
argument_list|(
name|groups
argument_list|)
expr_stmt|;
return|return
name|detail
return|;
block|}
DECL|method|wantGroup (final AccountGroup.Id id)
specifier|private
name|void
name|wantGroup
parameter_list|(
specifier|final
name|AccountGroup
operator|.
name|Id
name|id
parameter_list|)
block|{
name|groups
operator|.
name|put
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|loadGroups ()
specifier|private
name|void
name|loadGroups
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|toGet
init|=
name|groups
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|groups
operator|=
operator|new
name|HashMap
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|,
name|AccountGroup
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|AccountGroup
operator|.
name|Id
name|groupId
range|:
name|toGet
control|)
block|{
name|groups
operator|.
name|put
argument_list|(
name|groupId
argument_list|,
name|groupCache
operator|.
name|get
argument_list|(
name|groupId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

