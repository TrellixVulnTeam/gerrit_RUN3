begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License
end_comment

begin_package
DECL|package|com.google.gerrit.httpd.rpc.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|rpc
operator|.
name|project
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|ProjectCreationFailedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|rpc
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|CreateProject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|CreateProjectArgs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|common
operator|.
name|VoidResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_class
DECL|class|CreateProjectHandler
specifier|public
class|class
name|CreateProjectHandler
extends|extends
name|Handler
argument_list|<
name|VoidResult
argument_list|>
block|{
DECL|interface|Factory
interface|interface
name|Factory
block|{
DECL|method|create (@ssistedR) String projectName, @Assisted(R) String parentName, @Assisted(R) boolean emptyCommit, @Assisted(R) boolean permissionsOnly)
name|CreateProjectHandler
name|create
parameter_list|(
annotation|@
name|Assisted
argument_list|(
literal|"projectName"
argument_list|)
name|String
name|projectName
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"parentName"
argument_list|)
name|String
name|parentName
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"emptyCommit"
argument_list|)
name|boolean
name|emptyCommit
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"permissionsOnly"
argument_list|)
name|boolean
name|permissionsOnly
parameter_list|)
function_decl|;
block|}
DECL|field|createProjectFactory
specifier|private
specifier|final
name|CreateProject
operator|.
name|Factory
name|createProjectFactory
decl_stmt|;
DECL|field|projectControlFactory
specifier|private
specifier|final
name|ProjectControl
operator|.
name|Factory
name|projectControlFactory
decl_stmt|;
DECL|field|projectName
specifier|private
specifier|final
name|String
name|projectName
decl_stmt|;
DECL|field|parentName
specifier|private
specifier|final
name|String
name|parentName
decl_stmt|;
DECL|field|emptyCommit
specifier|private
specifier|final
name|boolean
name|emptyCommit
decl_stmt|;
DECL|field|permissionsOnly
specifier|private
specifier|final
name|boolean
name|permissionsOnly
decl_stmt|;
annotation|@
name|Inject
DECL|method|CreateProjectHandler (final CreateProject.Factory createProjectFactory, final ProjectControl.Factory projectControlFactory, @Assisted(R) final String projectName, @Assisted(R) final String parentName, @Assisted(R) final boolean emptyCommit, @Assisted(R) final boolean permissionsOnly)
specifier|public
name|CreateProjectHandler
parameter_list|(
specifier|final
name|CreateProject
operator|.
name|Factory
name|createProjectFactory
parameter_list|,
specifier|final
name|ProjectControl
operator|.
name|Factory
name|projectControlFactory
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"projectName"
argument_list|)
specifier|final
name|String
name|projectName
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"parentName"
argument_list|)
specifier|final
name|String
name|parentName
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"emptyCommit"
argument_list|)
specifier|final
name|boolean
name|emptyCommit
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"permissionsOnly"
argument_list|)
specifier|final
name|boolean
name|permissionsOnly
parameter_list|)
block|{
name|this
operator|.
name|createProjectFactory
operator|=
name|createProjectFactory
expr_stmt|;
name|this
operator|.
name|projectControlFactory
operator|=
name|projectControlFactory
expr_stmt|;
name|this
operator|.
name|projectName
operator|=
name|projectName
expr_stmt|;
name|this
operator|.
name|parentName
operator|=
name|parentName
expr_stmt|;
name|this
operator|.
name|emptyCommit
operator|=
name|emptyCommit
expr_stmt|;
name|this
operator|.
name|permissionsOnly
operator|=
name|permissionsOnly
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|VoidResult
name|call
parameter_list|()
throws|throws
name|ProjectCreationFailedException
block|{
specifier|final
name|CreateProjectArgs
name|args
init|=
operator|new
name|CreateProjectArgs
argument_list|()
decl_stmt|;
name|args
operator|.
name|setProjectName
argument_list|(
name|projectName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parentName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
specifier|final
name|Project
operator|.
name|NameKey
name|nameKey
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|parentName
argument_list|)
decl_stmt|;
try|try
block|{
name|args
operator|.
name|newParent
operator|=
name|projectControlFactory
operator|.
name|validateFor
argument_list|(
name|nameKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProjectCreationFailedException
argument_list|(
literal|"Parent project \""
operator|+
name|parentName
operator|+
literal|"\" does not exist."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|args
operator|.
name|projectDescription
operator|=
literal|""
expr_stmt|;
name|args
operator|.
name|submitType
operator|=
name|SubmitType
operator|.
name|MERGE_IF_NECESSARY
expr_stmt|;
name|args
operator|.
name|branch
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|args
operator|.
name|createEmptyCommit
operator|=
name|emptyCommit
expr_stmt|;
name|args
operator|.
name|permissionsOnly
operator|=
name|permissionsOnly
expr_stmt|;
specifier|final
name|CreateProject
name|createProject
init|=
name|createProjectFactory
operator|.
name|create
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|createProject
operator|.
name|createProject
argument_list|()
expr_stmt|;
return|return
name|VoidResult
operator|.
name|INSTANCE
return|;
block|}
block|}
end_class

end_unit

