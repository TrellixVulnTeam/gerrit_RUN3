begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd.restapi
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|restapi
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|CEILING
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|ISO_8859_1
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_CONFLICT
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_CREATED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_METHOD_NOT_ALLOWED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_NOT_MODIFIED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_OK
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_PRECONDITION_FAILED
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedHashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|BaseEncoding
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|audit
operator|.
name|AuditService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|audit
operator|.
name|HttpAuditEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AcceptsCreate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AcceptsPost
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BinaryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|CacheControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|DefaultInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|IdString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|MethodNotAllowedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|PreconditionFailedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RawInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestModifyView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestReadView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|TopLevelResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|WebSession
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AccessPath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AnonymousUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|OptionUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|CapabilityUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|ExclusionStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|FieldAttributes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|FieldNamingPolicy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|stream
operator|.
name|JsonReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|stream
operator|.
name|JsonToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|stream
operator|.
name|MalformedJsonException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|server
operator|.
name|CacheHeaders
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|TemporaryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|TemporaryBuffer
operator|.
name|Heap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_class
DECL|class|RestApiServlet
specifier|public
class|class
name|RestApiServlet
extends|extends
name|HttpServlet
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RestApiServlet
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** MIME type used for a JSON response body. */
DECL|field|JSON_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|JSON_TYPE
init|=
literal|"application/json"
decl_stmt|;
DECL|field|FORM_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|FORM_TYPE
init|=
literal|"application/x-www-form-urlencoded"
decl_stmt|;
comment|/**    * Garbage prefix inserted before JSON output to prevent XSSI.    *<p>    * This prefix is ")]}'\n" and is designed to prevent a web browser from    * executing the response body if the resource URI were to be referenced using    * a&lt;script src="...&gt; HTML tag from another web site. Clients using the    * HTTP interface will need to always strip the first line of response data to    * remove this magic header.    */
DECL|field|JSON_MAGIC
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|JSON_MAGIC
decl_stmt|;
static|static
block|{
name|JSON_MAGIC
operator|=
literal|")]}'\n"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
expr_stmt|;
block|}
DECL|class|Globals
specifier|public
specifier|static
class|class
name|Globals
block|{
DECL|field|currentUser
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|currentUser
decl_stmt|;
DECL|field|webSession
specifier|final
name|Provider
argument_list|<
name|WebSession
argument_list|>
name|webSession
decl_stmt|;
DECL|field|paramParser
specifier|final
name|Provider
argument_list|<
name|ParameterParser
argument_list|>
name|paramParser
decl_stmt|;
DECL|field|auditService
specifier|final
name|AuditService
name|auditService
decl_stmt|;
annotation|@
name|Inject
DECL|method|Globals (Provider<CurrentUser> currentUser, Provider<WebSession> webSession, Provider<ParameterParser> paramParser, AuditService auditService)
name|Globals
parameter_list|(
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|currentUser
parameter_list|,
name|Provider
argument_list|<
name|WebSession
argument_list|>
name|webSession
parameter_list|,
name|Provider
argument_list|<
name|ParameterParser
argument_list|>
name|paramParser
parameter_list|,
name|AuditService
name|auditService
parameter_list|)
block|{
name|this
operator|.
name|currentUser
operator|=
name|currentUser
expr_stmt|;
name|this
operator|.
name|webSession
operator|=
name|webSession
expr_stmt|;
name|this
operator|.
name|paramParser
operator|=
name|paramParser
expr_stmt|;
name|this
operator|.
name|auditService
operator|=
name|auditService
expr_stmt|;
block|}
block|}
DECL|field|globals
specifier|private
specifier|final
name|Globals
name|globals
decl_stmt|;
DECL|field|members
specifier|private
specifier|final
name|Provider
argument_list|<
name|RestCollection
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|>
argument_list|>
name|members
decl_stmt|;
DECL|method|RestApiServlet (Globals globals, RestCollection<? extends RestResource, ? extends RestResource> members)
specifier|public
name|RestApiServlet
parameter_list|(
name|Globals
name|globals
parameter_list|,
name|RestCollection
argument_list|<
name|?
extends|extends
name|RestResource
argument_list|,
name|?
extends|extends
name|RestResource
argument_list|>
name|members
parameter_list|)
block|{
name|this
argument_list|(
name|globals
argument_list|,
name|Providers
operator|.
name|of
argument_list|(
name|members
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|RestApiServlet (Globals globals, Provider<? extends RestCollection<? extends RestResource, ? extends RestResource>> members)
specifier|public
name|RestApiServlet
parameter_list|(
name|Globals
name|globals
parameter_list|,
name|Provider
argument_list|<
name|?
extends|extends
name|RestCollection
argument_list|<
name|?
extends|extends
name|RestResource
argument_list|,
name|?
extends|extends
name|RestResource
argument_list|>
argument_list|>
name|members
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Provider
argument_list|<
name|RestCollection
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|>
argument_list|>
name|n
init|=
operator|(
name|Provider
argument_list|<
name|RestCollection
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|>
argument_list|>
operator|)
name|checkNotNull
argument_list|(
operator|(
name|Object
operator|)
name|members
argument_list|)
decl_stmt|;
name|this
operator|.
name|globals
operator|=
name|globals
expr_stmt|;
name|this
operator|.
name|members
operator|=
name|n
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|service (HttpServletRequest req, HttpServletResponse res)
specifier|protected
specifier|final
name|void
name|service
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|long
name|auditStartTs
init|=
name|TimeUtil
operator|.
name|nowMs
argument_list|()
decl_stmt|;
name|res
operator|.
name|setHeader
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"attachment"
argument_list|)
expr_stmt|;
name|res
operator|.
name|setHeader
argument_list|(
literal|"X-Content-Type-Options"
argument_list|,
literal|"nosniff"
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|SC_OK
decl_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|Object
name|inputRequestBody
init|=
literal|null
decl_stmt|;
try|try
block|{
name|checkUserSession
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IdString
argument_list|>
name|path
init|=
name|splitPath
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|RestCollection
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|>
name|rc
init|=
name|members
operator|.
name|get
argument_list|()
decl_stmt|;
name|CapabilityUtils
operator|.
name|checkRequiresCapability
argument_list|(
name|globals
operator|.
name|currentUser
argument_list|,
literal|null
argument_list|,
name|rc
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|RestResource
name|rsrc
init|=
name|TopLevelResource
operator|.
name|INSTANCE
decl_stmt|;
name|ViewData
name|viewData
init|=
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"GET"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
name|rc
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rc
operator|instanceof
name|AcceptsPost
operator|&&
literal|"POST"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|AcceptsPost
argument_list|<
name|RestResource
argument_list|>
name|ac
init|=
operator|(
name|AcceptsPost
argument_list|<
name|RestResource
argument_list|>
operator|)
name|rc
decl_stmt|;
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
name|ac
operator|.
name|post
argument_list|(
name|rsrc
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MethodNotAllowedException
argument_list|()
throw|;
block|}
block|}
else|else
block|{
name|IdString
name|id
init|=
name|path
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|rsrc
operator|=
name|rc
operator|.
name|parse
argument_list|(
name|rsrc
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkPreconditions
argument_list|(
name|req
argument_list|,
name|rsrc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|rc
operator|instanceof
name|AcceptsCreate
operator|&&
name|path
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
literal|"POST"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|||
literal|"PUT"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|AcceptsCreate
argument_list|<
name|RestResource
argument_list|>
name|ac
init|=
operator|(
name|AcceptsCreate
argument_list|<
name|RestResource
argument_list|>
operator|)
name|rc
decl_stmt|;
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
name|ac
operator|.
name|create
argument_list|(
name|rsrc
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|SC_CREATED
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|viewData
operator|.
name|view
operator|==
literal|null
condition|)
block|{
name|viewData
operator|=
name|view
argument_list|(
name|rsrc
argument_list|,
name|rc
argument_list|,
name|req
operator|.
name|getMethod
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|checkRequiresCapability
argument_list|(
name|viewData
argument_list|)
expr_stmt|;
while|while
condition|(
name|viewData
operator|.
name|view
operator|instanceof
name|RestCollection
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|RestCollection
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|>
name|c
init|=
operator|(
name|RestCollection
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|>
operator|)
name|viewData
operator|.
name|view
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"GET"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
name|c
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|instanceof
name|AcceptsPost
operator|&&
literal|"POST"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|AcceptsPost
argument_list|<
name|RestResource
argument_list|>
name|ac
init|=
operator|(
name|AcceptsPost
argument_list|<
name|RestResource
argument_list|>
operator|)
name|c
decl_stmt|;
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
name|ac
operator|.
name|post
argument_list|(
name|rsrc
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MethodNotAllowedException
argument_list|()
throw|;
block|}
break|break;
block|}
else|else
block|{
name|IdString
name|id
init|=
name|path
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|rsrc
operator|=
name|c
operator|.
name|parse
argument_list|(
name|rsrc
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|checkPreconditions
argument_list|(
name|req
argument_list|,
name|rsrc
argument_list|)
expr_stmt|;
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|c
operator|instanceof
name|AcceptsCreate
operator|&&
name|path
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
literal|"POST"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|||
literal|"PUT"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|AcceptsCreate
argument_list|<
name|RestResource
argument_list|>
name|ac
init|=
operator|(
name|AcceptsCreate
argument_list|<
name|RestResource
argument_list|>
operator|)
name|c
decl_stmt|;
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
name|ac
operator|.
name|create
argument_list|(
name|rsrc
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|SC_CREATED
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|viewData
operator|.
name|view
operator|==
literal|null
condition|)
block|{
name|viewData
operator|=
name|view
argument_list|(
name|rsrc
argument_list|,
name|c
argument_list|,
name|req
operator|.
name|getMethod
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|checkRequiresCapability
argument_list|(
name|viewData
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|notModified
argument_list|(
name|req
argument_list|,
name|rsrc
argument_list|)
condition|)
block|{
name|res
operator|.
name|sendError
argument_list|(
name|SC_NOT_MODIFIED
argument_list|)
expr_stmt|;
return|return;
block|}
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|ParameterParser
operator|.
name|splitQueryString
argument_list|(
name|req
operator|.
name|getQueryString
argument_list|()
argument_list|,
name|config
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|globals
operator|.
name|paramParser
operator|.
name|get
argument_list|()
operator|.
name|parse
argument_list|(
name|viewData
operator|.
name|view
argument_list|,
name|params
argument_list|,
name|req
argument_list|,
name|res
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|viewData
operator|.
name|view
operator|instanceof
name|RestModifyView
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|RestModifyView
argument_list|<
name|RestResource
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|(
name|RestModifyView
argument_list|<
name|RestResource
argument_list|,
name|Object
argument_list|>
operator|)
name|viewData
operator|.
name|view
decl_stmt|;
name|inputRequestBody
operator|=
name|parseRequest
argument_list|(
name|req
argument_list|,
name|inputType
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|m
operator|.
name|apply
argument_list|(
name|rsrc
argument_list|,
name|inputRequestBody
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|viewData
operator|.
name|view
operator|instanceof
name|RestReadView
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|RestReadView
argument_list|<
name|RestResource
argument_list|>
operator|)
name|viewData
operator|.
name|view
operator|)
operator|.
name|apply
argument_list|(
name|rsrc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|()
throw|;
block|}
if|if
condition|(
name|result
operator|instanceof
name|Response
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Response
argument_list|<
name|?
argument_list|>
name|r
init|=
operator|(
name|Response
operator|)
name|result
decl_stmt|;
name|status
operator|=
name|r
operator|.
name|statusCode
argument_list|()
expr_stmt|;
name|configureCaching
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|rsrc
argument_list|,
name|r
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|instanceof
name|Response
operator|.
name|Redirect
condition|)
block|{
name|CacheHeaders
operator|.
name|setNotCacheable
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|res
operator|.
name|sendRedirect
argument_list|(
operator|(
operator|(
name|Response
operator|.
name|Redirect
operator|)
name|result
operator|)
operator|.
name|location
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|CacheHeaders
operator|.
name|setNotCacheable
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|Response
operator|.
name|none
argument_list|()
condition|)
block|{
name|result
operator|=
name|Response
operator|.
name|unwrap
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|BinaryResult
condition|)
block|{
name|replyBinaryResult
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
operator|(
name|BinaryResult
operator|)
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|replyJson
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|config
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_FORBIDDEN
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRequestException
name|e
parameter_list|)
block|{
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_BAD_REQUEST
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MethodNotAllowedException
name|e
parameter_list|)
block|{
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_METHOD_NOT_ALLOWED
argument_list|,
literal|"Method not allowed"
argument_list|,
name|e
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_CONFLICT
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PreconditionFailedException
name|e
parameter_list|)
block|{
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_PRECONDITION_FAILED
argument_list|,
name|Objects
operator|.
name|firstNonNull
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Precondition failed"
argument_list|)
argument_list|,
name|e
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_NOT_FOUND
argument_list|,
literal|"Not found"
argument_list|,
name|e
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnprocessableEntityException
name|e
parameter_list|)
block|{
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
literal|422
argument_list|,
name|Objects
operator|.
name|firstNonNull
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Unprocessable Entity"
argument_list|)
argument_list|,
name|e
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmbiguousViewException
name|e
parameter_list|)
block|{
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_NOT_FOUND
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedJsonException
name|e
parameter_list|)
block|{
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_BAD_REQUEST
argument_list|,
literal|"Invalid "
operator|+
name|JSON_TYPE
operator|+
literal|" in request"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JsonParseException
name|e
parameter_list|)
block|{
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_BAD_REQUEST
argument_list|,
literal|"Invalid "
operator|+
name|JSON_TYPE
operator|+
literal|" in request"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|status
operator|=
name|SC_INTERNAL_SERVER_ERROR
expr_stmt|;
name|handleException
argument_list|(
name|e
argument_list|,
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|globals
operator|.
name|auditService
operator|.
name|dispatch
argument_list|(
operator|new
name|HttpAuditEvent
argument_list|(
name|globals
operator|.
name|webSession
operator|.
name|get
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|globals
operator|.
name|currentUser
operator|.
name|get
argument_list|()
argument_list|,
name|req
operator|.
name|getRequestURI
argument_list|()
argument_list|,
name|auditStartTs
argument_list|,
name|params
argument_list|,
name|req
operator|.
name|getMethod
argument_list|()
argument_list|,
name|inputRequestBody
argument_list|,
name|status
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_function
DECL|method|notModified (HttpServletRequest req, RestResource rsrc)
specifier|private
specifier|static
name|boolean
name|notModified
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|RestResource
name|rsrc
parameter_list|)
block|{
if|if
condition|(
operator|!
literal|"GET"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|rsrc
operator|instanceof
name|RestResource
operator|.
name|HasETag
condition|)
block|{
name|String
name|have
init|=
name|req
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|IF_NONE_MATCH
argument_list|)
decl_stmt|;
if|if
condition|(
name|have
operator|!=
literal|null
condition|)
block|{
return|return
name|have
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|RestResource
operator|.
name|HasETag
operator|)
name|rsrc
operator|)
operator|.
name|getETag
argument_list|()
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|rsrc
operator|instanceof
name|RestResource
operator|.
name|HasLastModified
condition|)
block|{
name|Timestamp
name|m
init|=
operator|(
operator|(
name|RestResource
operator|.
name|HasLastModified
operator|)
name|rsrc
operator|)
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
name|long
name|d
init|=
name|req
operator|.
name|getDateHeader
argument_list|(
name|HttpHeaders
operator|.
name|IF_MODIFIED_SINCE
argument_list|)
decl_stmt|;
comment|// HTTP times are in seconds, database may have millisecond precision.
return|return
name|d
operator|/
literal|1000L
operator|==
name|m
operator|.
name|getTime
argument_list|()
operator|/
literal|1000L
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
DECL|method|configureCaching (HttpServletRequest req, HttpServletResponse res, RestResource rsrc, CacheControl c)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|configureCaching
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|RestResource
name|rsrc
parameter_list|,
name|CacheControl
name|c
parameter_list|)
block|{
if|if
condition|(
literal|"GET"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|c
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|NONE
case|:
default|default:
name|CacheHeaders
operator|.
name|setNotCacheable
argument_list|(
name|res
argument_list|)
expr_stmt|;
break|break;
case|case
name|PRIVATE
case|:
name|addResourceStateHeaders
argument_list|(
name|res
argument_list|,
name|rsrc
argument_list|)
expr_stmt|;
name|CacheHeaders
operator|.
name|setCacheablePrivate
argument_list|(
name|res
argument_list|,
name|c
operator|.
name|getAge
argument_list|()
argument_list|,
name|c
operator|.
name|getUnit
argument_list|()
argument_list|,
name|c
operator|.
name|isMustRevalidate
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUBLIC
case|:
name|addResourceStateHeaders
argument_list|(
name|res
argument_list|,
name|rsrc
argument_list|)
expr_stmt|;
name|CacheHeaders
operator|.
name|setCacheable
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|c
operator|.
name|getAge
argument_list|()
argument_list|,
name|c
operator|.
name|getUnit
argument_list|()
argument_list|,
name|c
operator|.
name|isMustRevalidate
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|CacheHeaders
operator|.
name|setNotCacheable
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|addResourceStateHeaders ( HttpServletResponse res, RestResource rsrc)
specifier|private
specifier|static
name|void
name|addResourceStateHeaders
parameter_list|(
name|HttpServletResponse
name|res
parameter_list|,
name|RestResource
name|rsrc
parameter_list|)
block|{
if|if
condition|(
name|rsrc
operator|instanceof
name|RestResource
operator|.
name|HasETag
condition|)
block|{
name|res
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|ETAG
argument_list|,
operator|(
operator|(
name|RestResource
operator|.
name|HasETag
operator|)
name|rsrc
operator|)
operator|.
name|getETag
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rsrc
operator|instanceof
name|RestResource
operator|.
name|HasLastModified
condition|)
block|{
name|res
operator|.
name|setDateHeader
argument_list|(
name|HttpHeaders
operator|.
name|LAST_MODIFIED
argument_list|,
operator|(
operator|(
name|RestResource
operator|.
name|HasLastModified
operator|)
name|rsrc
operator|)
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|checkPreconditions (HttpServletRequest req, RestResource rsrc)
specifier|private
name|void
name|checkPreconditions
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|RestResource
name|rsrc
parameter_list|)
throws|throws
name|PreconditionFailedException
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getHeader
argument_list|(
literal|"If-None-Match"
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PreconditionFailedException
argument_list|(
literal|"Resource already exists"
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|inputType (RestModifyView<RestResource, Object> m)
specifier|private
specifier|static
name|Type
name|inputType
parameter_list|(
name|RestModifyView
argument_list|<
name|RestResource
argument_list|,
name|Object
argument_list|>
name|m
parameter_list|)
block|{
name|Type
name|inputType
init|=
name|extractInputType
argument_list|(
name|m
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"View %s does not correctly implement %s"
argument_list|,
name|m
operator|.
name|getClass
argument_list|()
argument_list|,
name|RestModifyView
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|inputType
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|extractInputType (Class clazz)
specifier|private
specifier|static
name|Type
name|extractInputType
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
for|for
control|(
name|Type
name|t
range|:
name|clazz
operator|.
name|getGenericInterfaces
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|ParameterizedType
operator|&&
operator|(
operator|(
name|ParameterizedType
operator|)
name|t
operator|)
operator|.
name|getRawType
argument_list|()
operator|==
name|RestModifyView
operator|.
name|class
condition|)
block|{
return|return
operator|(
operator|(
name|ParameterizedType
operator|)
name|t
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|1
index|]
return|;
block|}
block|}
if|if
condition|(
name|clazz
operator|.
name|getSuperclass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Type
name|i
init|=
name|extractInputType
argument_list|(
name|clazz
operator|.
name|getSuperclass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
for|for
control|(
name|Class
name|t
range|:
name|clazz
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
name|Type
name|i
init|=
name|extractInputType
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
DECL|method|parseRequest (HttpServletRequest req, Type type)
specifier|private
name|Object
name|parseRequest
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadRequestException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|InvocationTargetException
throws|,
name|MethodNotAllowedException
block|{
if|if
condition|(
name|isType
argument_list|(
name|JSON_TYPE
argument_list|,
name|req
operator|.
name|getContentType
argument_list|()
argument_list|)
condition|)
block|{
name|BufferedReader
name|br
init|=
name|req
operator|.
name|getReader
argument_list|()
decl_stmt|;
try|try
block|{
name|JsonReader
name|json
init|=
operator|new
name|JsonReader
argument_list|(
name|br
argument_list|)
decl_stmt|;
name|json
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JsonToken
name|first
decl_stmt|;
try|try
block|{
name|first
operator|=
name|json
operator|.
name|peek
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Expected JSON object"
argument_list|)
throw|;
block|}
if|if
condition|(
name|first
operator|==
name|JsonToken
operator|.
name|STRING
condition|)
block|{
return|return
name|parseString
argument_list|(
name|json
operator|.
name|nextString
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
return|return
name|OutputFormat
operator|.
name|JSON
operator|.
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|json
argument_list|,
name|type
argument_list|)
return|;
block|}
finally|finally
block|{
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
literal|"PUT"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|||
literal|"POST"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|)
operator|&&
name|acceptsRawInput
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|parseRawInput
argument_list|(
name|req
argument_list|,
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"DELETE"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|&&
name|hasNoBody
argument_list|(
name|req
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|hasNoBody
argument_list|(
name|req
argument_list|)
condition|)
block|{
return|return
name|createInstance
argument_list|(
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|isType
argument_list|(
literal|"text/plain"
argument_list|,
name|req
operator|.
name|getContentType
argument_list|()
argument_list|)
condition|)
block|{
name|BufferedReader
name|br
init|=
name|req
operator|.
name|getReader
argument_list|()
decl_stmt|;
try|try
block|{
name|char
index|[]
name|tmp
init|=
operator|new
name|char
index|[
literal|256
index|]
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
literal|0
operator|<
operator|(
name|n
operator|=
name|br
operator|.
name|read
argument_list|(
name|tmp
argument_list|)
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
return|return
name|parseString
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
finally|finally
block|{
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"POST"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|&&
name|isType
argument_list|(
name|FORM_TYPE
argument_list|,
name|req
operator|.
name|getContentType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|OutputFormat
operator|.
name|JSON
operator|.
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|ParameterParser
operator|.
name|formToJson
argument_list|(
name|req
argument_list|)
argument_list|,
name|type
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Expected Content-Type: "
operator|+
name|JSON_TYPE
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|hasNoBody (HttpServletRequest req)
specifier|private
specifier|static
name|boolean
name|hasNoBody
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|int
name|len
init|=
name|req
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|req
operator|.
name|getContentType
argument_list|()
decl_stmt|;
return|return
operator|(
name|len
operator|<=
literal|0
operator|&&
name|type
operator|==
literal|null
operator|)
operator|||
operator|(
name|len
operator|==
literal|0
operator|&&
name|isType
argument_list|(
name|FORM_TYPE
argument_list|,
name|type
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|acceptsRawInput (Type type)
specifier|private
specifier|static
name|boolean
name|acceptsRawInput
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
for|for
control|(
name|Field
name|f
range|:
operator|(
operator|(
name|Class
operator|)
name|type
operator|)
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getType
argument_list|()
operator|==
name|RawInput
operator|.
name|class
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
DECL|method|parseRawInput (final HttpServletRequest req, Type type)
specifier|private
name|Object
name|parseRawInput
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
name|Type
name|type
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|InvocationTargetException
throws|,
name|MethodNotAllowedException
block|{
name|Object
name|obj
init|=
name|createInstance
argument_list|(
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getType
argument_list|()
operator|==
name|RawInput
operator|.
name|class
condition|)
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|obj
argument_list|,
operator|new
name|RawInput
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|req
operator|.
name|getContentType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
return|return
name|req
operator|.
name|getContentLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|req
operator|.
name|getInputStream
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
block|}
throw|throw
operator|new
name|MethodNotAllowedException
argument_list|()
throw|;
block|}
end_function

begin_function
DECL|method|parseString (String value, Type type)
specifier|private
name|Object
name|parseString
parameter_list|(
name|String
name|value
parameter_list|,
name|Type
name|type
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|SecurityException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|InvocationTargetException
block|{
if|if
condition|(
name|type
operator|==
name|String
operator|.
name|class
condition|)
block|{
return|return
name|value
return|;
block|}
name|Object
name|obj
init|=
name|createInstance
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|Field
index|[]
name|fields
init|=
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|length
operator|==
literal|0
operator|&&
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|obj
return|;
block|}
for|for
control|(
name|Field
name|f
range|:
name|fields
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getAnnotation
argument_list|(
name|DefaultInput
operator|.
name|class
argument_list|)
operator|!=
literal|null
operator|&&
name|f
operator|.
name|getType
argument_list|()
operator|==
name|String
operator|.
name|class
condition|)
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
block|}
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Expected JSON object"
argument_list|)
throw|;
block|}
end_function

begin_function
DECL|method|createInstance (Type type)
specifier|private
specifier|static
name|Object
name|createInstance
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|NoSuchMethodException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|InvocationTargetException
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|Object
argument_list|>
name|clazz
init|=
operator|(
name|Class
argument_list|<
name|Object
argument_list|>
operator|)
name|type
decl_stmt|;
name|Constructor
argument_list|<
name|Object
argument_list|>
name|c
init|=
name|clazz
operator|.
name|getDeclaredConstructor
argument_list|()
decl_stmt|;
name|c
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|newInstance
argument_list|()
return|;
block|}
throw|throw
operator|new
name|InstantiationException
argument_list|(
literal|"Cannot make "
operator|+
name|type
argument_list|)
throw|;
block|}
end_function

begin_function
DECL|method|replyJson (@ullable HttpServletRequest req, HttpServletResponse res, Multimap<String, String> config, Object result)
specifier|public
specifier|static
name|void
name|replyJson
parameter_list|(
annotation|@
name|Nullable
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|,
name|Object
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|TemporaryBuffer
operator|.
name|Heap
name|buf
init|=
name|heap
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|buf
operator|.
name|write
argument_list|(
name|JSON_MAGIC
argument_list|)
expr_stmt|;
name|Writer
name|w
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|buf
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|Gson
name|gson
init|=
name|newGson
argument_list|(
name|config
argument_list|,
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|JsonElement
condition|)
block|{
name|gson
operator|.
name|toJson
argument_list|(
operator|(
name|JsonElement
operator|)
name|result
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gson
operator|.
name|toJson
argument_list|(
name|result
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|w
operator|.
name|flush
argument_list|()
expr_stmt|;
name|replyBinaryResult
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|asBinaryResult
argument_list|(
name|buf
argument_list|)
operator|.
name|setContentType
argument_list|(
name|JSON_TYPE
argument_list|)
operator|.
name|setCharacterEncoding
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|newGson (Multimap<String, String> config, @Nullable HttpServletRequest req)
specifier|private
specifier|static
name|Gson
name|newGson
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|,
annotation|@
name|Nullable
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|GsonBuilder
name|gb
init|=
name|OutputFormat
operator|.
name|JSON_COMPACT
operator|.
name|newGsonBuilder
argument_list|()
decl_stmt|;
name|enablePrettyPrint
argument_list|(
name|gb
argument_list|,
name|config
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|enablePartialGetFields
argument_list|(
name|gb
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|gb
operator|.
name|create
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|enablePrettyPrint (GsonBuilder gb, Multimap<String, String> config, @Nullable HttpServletRequest req)
specifier|private
specifier|static
name|void
name|enablePrettyPrint
parameter_list|(
name|GsonBuilder
name|gb
parameter_list|,
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|,
annotation|@
name|Nullable
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|String
name|pp
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|config
operator|.
name|get
argument_list|(
literal|"pp"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|pp
operator|==
literal|null
condition|)
block|{
name|pp
operator|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|config
operator|.
name|get
argument_list|(
literal|"prettyPrint"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|pp
operator|==
literal|null
operator|&&
name|req
operator|!=
literal|null
condition|)
block|{
name|pp
operator|=
name|acceptsJson
argument_list|(
name|req
argument_list|)
condition|?
literal|"0"
else|:
literal|"1"
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|pp
argument_list|)
operator|||
literal|"true"
operator|.
name|equals
argument_list|(
name|pp
argument_list|)
condition|)
block|{
name|gb
operator|.
name|setPrettyPrinting
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|enablePartialGetFields (GsonBuilder gb, Multimap<String, String> config)
specifier|private
specifier|static
name|void
name|enablePartialGetFields
parameter_list|(
name|GsonBuilder
name|gb
parameter_list|,
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|want
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|config
operator|.
name|get
argument_list|(
literal|"fields"
argument_list|)
control|)
block|{
name|Iterables
operator|.
name|addAll
argument_list|(
name|want
argument_list|,
name|OptionUtil
operator|.
name|splitOptionValue
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|want
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|gb
operator|.
name|addSerializationExclusionStrategy
argument_list|(
operator|new
name|ExclusionStrategy
argument_list|()
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|names
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|shouldSkipField
parameter_list|(
name|FieldAttributes
name|field
parameter_list|)
block|{
name|String
name|name
init|=
name|names
operator|.
name|get
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
comment|// Names are supplied by Gson in terms of Java source.
comment|// Translate and cache the JSON lower_case_style used.
try|try
block|{
name|name
operator|=
name|FieldNamingPolicy
operator|.
name|LOWER_CASE_WITH_UNDERSCORES
operator|.
name|translateName
argument_list|(
comment|//
name|field
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|put
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
operator|!
name|want
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldSkipClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|replyBinaryResult ( @ullable HttpServletRequest req, HttpServletResponse res, BinaryResult bin)
specifier|static
name|void
name|replyBinaryResult
parameter_list|(
annotation|@
name|Nullable
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|BinaryResult
name|bin
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BinaryResult
name|appResult
init|=
name|bin
decl_stmt|;
try|try
block|{
if|if
condition|(
name|bin
operator|.
name|getAttachmentName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|setHeader
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"attachment; filename=\""
operator|+
name|bin
operator|.
name|getAttachmentName
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bin
operator|.
name|isBase64
argument_list|()
condition|)
block|{
name|bin
operator|=
name|stackBase64
argument_list|(
name|res
argument_list|,
name|bin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bin
operator|.
name|canGzip
argument_list|()
operator|&&
name|acceptsGzip
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|bin
operator|=
name|stackGzip
argument_list|(
name|res
argument_list|,
name|bin
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|setContentType
argument_list|(
name|bin
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|len
init|=
name|bin
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|len
operator|&&
name|len
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|res
operator|.
name|setContentLength
argument_list|(
operator|(
name|int
operator|)
name|len
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|0
operator|<=
name|len
condition|)
block|{
name|res
operator|.
name|setHeader
argument_list|(
literal|"Content-Length"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|OutputStream
name|dst
init|=
name|res
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|bin
operator|.
name|writeTo
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dst
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|appResult
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|stackBase64 (HttpServletResponse res, final BinaryResult src)
specifier|private
specifier|static
name|BinaryResult
name|stackBase64
parameter_list|(
name|HttpServletResponse
name|res
parameter_list|,
specifier|final
name|BinaryResult
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|BinaryResult
name|b64
decl_stmt|;
name|long
name|len
init|=
name|src
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|len
operator|&&
name|len
operator|<=
operator|(
literal|7
operator|<<
literal|20
operator|)
condition|)
block|{
name|b64
operator|=
name|base64
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b64
operator|=
operator|new
name|BinaryResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|e
init|=
name|BaseEncoding
operator|.
name|base64
argument_list|()
operator|.
name|encodingStream
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|,
name|ISO_8859_1
argument_list|)
argument_list|)
decl_stmt|;
name|src
operator|.
name|writeTo
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
name|res
operator|.
name|setHeader
argument_list|(
literal|"X-FYI-Content-Encoding"
argument_list|,
literal|"base64"
argument_list|)
expr_stmt|;
name|res
operator|.
name|setHeader
argument_list|(
literal|"X-FYI-Content-Type"
argument_list|,
name|src
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|b64
operator|.
name|setContentType
argument_list|(
literal|"text/plain"
argument_list|)
operator|.
name|setCharacterEncoding
argument_list|(
literal|"ISO-8859-1"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|stackGzip (HttpServletResponse res, final BinaryResult src)
specifier|private
specifier|static
name|BinaryResult
name|stackGzip
parameter_list|(
name|HttpServletResponse
name|res
parameter_list|,
specifier|final
name|BinaryResult
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|BinaryResult
name|gz
decl_stmt|;
name|long
name|len
init|=
name|src
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
literal|256
operator|<=
name|len
operator|&&
name|len
operator|<=
operator|(
literal|10
operator|<<
literal|20
operator|)
condition|)
block|{
name|gz
operator|=
name|compress
argument_list|(
name|src
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|<=
name|gz
operator|.
name|getContentLength
argument_list|()
condition|)
block|{
return|return
name|src
return|;
block|}
block|}
else|else
block|{
name|gz
operator|=
operator|new
name|BinaryResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|GZIPOutputStream
name|gz
init|=
operator|new
name|GZIPOutputStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|src
operator|.
name|writeTo
argument_list|(
name|gz
argument_list|)
expr_stmt|;
name|gz
operator|.
name|finish
argument_list|()
expr_stmt|;
name|gz
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
name|res
operator|.
name|setHeader
argument_list|(
literal|"Content-Encoding"
argument_list|,
literal|"gzip"
argument_list|)
expr_stmt|;
return|return
name|gz
operator|.
name|setContentType
argument_list|(
name|src
operator|.
name|getContentType
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|view ( RestResource rsrc, RestCollection<RestResource, RestResource> rc, String method, List<IdString> path)
specifier|private
name|ViewData
name|view
parameter_list|(
name|RestResource
name|rsrc
parameter_list|,
name|RestCollection
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|>
name|rc
parameter_list|,
name|String
name|method
parameter_list|,
name|List
argument_list|<
name|IdString
argument_list|>
name|path
parameter_list|)
throws|throws
name|AmbiguousViewException
throws|,
name|RestApiException
block|{
name|DynamicMap
argument_list|<
name|RestView
argument_list|<
name|RestResource
argument_list|>
argument_list|>
name|views
init|=
name|rc
operator|.
name|views
argument_list|()
decl_stmt|;
specifier|final
name|IdString
name|projection
init|=
name|path
operator|.
name|isEmpty
argument_list|()
condition|?
name|IdString
operator|.
name|fromUrl
argument_list|(
literal|"/"
argument_list|)
else|:
name|path
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If there are path components still remaining after this projection
comment|// is chosen, look for the projection based upon GET as the method as
comment|// the client thinks it is a nested collection.
name|method
operator|=
literal|"GET"
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|p
init|=
name|splitProjection
argument_list|(
name|projection
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|String
name|viewname
init|=
name|p
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|viewname
argument_list|)
condition|)
block|{
name|viewname
operator|=
literal|"/"
expr_stmt|;
block|}
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|view
init|=
name|views
operator|.
name|get
argument_list|(
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|method
operator|+
literal|"."
operator|+
name|viewname
argument_list|)
decl_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ViewData
argument_list|(
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|view
argument_list|)
return|;
block|}
name|view
operator|=
name|views
operator|.
name|get
argument_list|(
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"GET."
operator|+
name|viewname
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|view
operator|instanceof
name|AcceptsPost
operator|&&
literal|"POST"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|AcceptsPost
argument_list|<
name|RestResource
argument_list|>
name|ap
init|=
operator|(
name|AcceptsPost
argument_list|<
name|RestResource
argument_list|>
operator|)
name|view
decl_stmt|;
return|return
operator|new
name|ViewData
argument_list|(
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ap
operator|.
name|post
argument_list|(
name|rsrc
argument_list|)
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
name|projection
argument_list|)
throw|;
block|}
name|String
name|name
init|=
name|method
operator|+
literal|"."
operator|+
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|core
init|=
name|views
operator|.
name|get
argument_list|(
literal|"gerrit"
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
name|core
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RestView
argument_list|<
name|RestResource
argument_list|>
argument_list|>
name|r
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|plugin
range|:
name|views
operator|.
name|plugins
argument_list|()
control|)
block|{
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|action
init|=
name|views
operator|.
name|get
argument_list|(
name|plugin
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|put
argument_list|(
name|plugin
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|r
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RestView
argument_list|<
name|RestResource
argument_list|>
argument_list|>
name|entry
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|r
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ViewData
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
name|projection
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|AmbiguousViewException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Projection %s is ambiguous: %s"
argument_list|,
name|name
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|r
operator|.
name|keySet
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|in
parameter_list|)
block|{
return|return
name|in
operator|+
literal|"~"
operator|+
name|projection
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|splitPath (HttpServletRequest req)
specifier|private
specifier|static
name|List
argument_list|<
name|IdString
argument_list|>
name|splitPath
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|String
name|path
init|=
name|req
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|IdString
argument_list|>
name|out
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|Splitter
operator|.
name|on
argument_list|(
literal|'/'
argument_list|)
operator|.
name|split
argument_list|(
name|path
argument_list|)
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|IdString
operator|.
name|fromUrl
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|out
operator|.
name|get
argument_list|(
name|out
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|remove
argument_list|(
name|out
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
end_function

begin_function
DECL|method|splitProjection (IdString projection)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|splitProjection
parameter_list|(
name|IdString
name|projection
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Iterables
operator|.
name|addAll
argument_list|(
name|p
argument_list|,
name|Splitter
operator|.
name|on
argument_list|(
literal|'~'
argument_list|)
operator|.
name|limit
argument_list|(
literal|2
argument_list|)
operator|.
name|split
argument_list|(
name|projection
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
end_function

begin_function
DECL|method|checkUserSession (HttpServletRequest req)
specifier|private
name|void
name|checkUserSession
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
throws|throws
name|AuthException
block|{
name|CurrentUser
name|user
init|=
name|globals
operator|.
name|currentUser
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|isStateChange
argument_list|(
name|req
argument_list|)
condition|)
block|{
if|if
condition|(
name|user
operator|instanceof
name|AnonymousUser
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"Authentication required"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|globals
operator|.
name|webSession
operator|.
name|get
argument_list|()
operator|.
name|isAccessPathOk
argument_list|(
name|AccessPath
operator|.
name|REST_API
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"Invalid authentication method. In order to authenticate, prefix the REST endpoint URL with /a/ (e.g. http://example.com/a/projects/)."
argument_list|)
throw|;
block|}
block|}
name|user
operator|.
name|setAccessPath
argument_list|(
name|AccessPath
operator|.
name|REST_API
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|isStateChange (HttpServletRequest req)
specifier|private
specifier|static
name|boolean
name|isStateChange
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|String
name|method
init|=
name|req
operator|.
name|getMethod
argument_list|()
decl_stmt|;
return|return
operator|!
operator|(
literal|"GET"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
operator|||
literal|"HEAD"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
DECL|method|checkRequiresCapability (ViewData viewData)
specifier|private
name|void
name|checkRequiresCapability
parameter_list|(
name|ViewData
name|viewData
parameter_list|)
throws|throws
name|AuthException
block|{
name|CapabilityUtils
operator|.
name|checkRequiresCapability
argument_list|(
name|globals
operator|.
name|currentUser
argument_list|,
name|viewData
operator|.
name|pluginName
argument_list|,
name|viewData
operator|.
name|view
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|handleException (Throwable err, HttpServletRequest req, HttpServletResponse res)
specifier|private
specifier|static
name|void
name|handleException
parameter_list|(
name|Throwable
name|err
parameter_list|,
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|uri
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|req
operator|.
name|getQueryString
argument_list|()
argument_list|)
condition|)
block|{
name|uri
operator|+=
literal|"?"
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error in %s %s"
argument_list|,
name|req
operator|.
name|getMethod
argument_list|()
argument_list|,
name|uri
argument_list|)
argument_list|,
name|err
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
name|res
operator|.
name|reset
argument_list|()
expr_stmt|;
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Internal server error"
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|replyError (HttpServletRequest req, HttpServletResponse res, int statusCode, String msg)
specifier|public
specifier|static
name|void
name|replyError
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|int
name|statusCode
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|statusCode
argument_list|,
name|msg
argument_list|,
name|CacheControl
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|replyError (HttpServletRequest req, HttpServletResponse res, int statusCode, String msg, CacheControl c)
specifier|public
specifier|static
name|void
name|replyError
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|int
name|statusCode
parameter_list|,
name|String
name|msg
parameter_list|,
name|CacheControl
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|res
operator|.
name|setStatus
argument_list|(
name|statusCode
argument_list|)
expr_stmt|;
name|configureCaching
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|replyText
argument_list|(
literal|null
argument_list|,
name|res
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|replyText (@ullable HttpServletRequest req, HttpServletResponse res, String text)
specifier|static
name|void
name|replyText
parameter_list|(
annotation|@
name|Nullable
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|req
operator|==
literal|null
operator|||
literal|"GET"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|)
operator|&&
name|isMaybeHTML
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|replyJson
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|ImmutableMultimap
operator|.
name|of
argument_list|(
literal|"pp"
argument_list|,
literal|"0"
argument_list|)
argument_list|,
operator|new
name|JsonPrimitive
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|text
operator|.
name|endsWith
argument_list|(
literal|"\n"
argument_list|)
condition|)
block|{
name|text
operator|+=
literal|"\n"
expr_stmt|;
block|}
name|replyBinaryResult
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|BinaryResult
operator|.
name|create
argument_list|(
name|text
argument_list|)
operator|.
name|setContentType
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_decl_stmt
DECL|field|IS_HTML
specifier|private
specifier|static
specifier|final
name|Pattern
name|IS_HTML
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[<&]"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
DECL|method|isMaybeHTML (String text)
specifier|private
specifier|static
name|boolean
name|isMaybeHTML
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|IS_HTML
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
operator|.
name|find
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|acceptsJson (HttpServletRequest req)
specifier|private
specifier|static
name|boolean
name|acceptsJson
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
return|return
name|req
operator|!=
literal|null
operator|&&
name|isType
argument_list|(
name|JSON_TYPE
argument_list|,
name|req
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|acceptsGzip (HttpServletRequest req)
specifier|private
specifier|static
name|boolean
name|acceptsGzip
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
block|{
name|String
name|accepts
init|=
name|req
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT_ENCODING
argument_list|)
decl_stmt|;
return|return
name|accepts
operator|!=
literal|null
operator|&&
name|accepts
operator|.
name|contains
argument_list|(
literal|"gzip"
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
DECL|method|isType (String expect, String given)
specifier|private
specifier|static
name|boolean
name|isType
parameter_list|(
name|String
name|expect
parameter_list|,
name|String
name|given
parameter_list|)
block|{
if|if
condition|(
name|given
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|expect
operator|.
name|equals
argument_list|(
name|given
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|given
operator|.
name|startsWith
argument_list|(
name|expect
operator|+
literal|","
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|String
name|p
range|:
name|given
operator|.
name|split
argument_list|(
literal|"[ ,;][ ,;]*"
argument_list|)
control|)
block|{
if|if
condition|(
name|expect
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
DECL|method|base64 (BinaryResult bin)
specifier|private
specifier|static
name|BinaryResult
name|base64
parameter_list|(
name|BinaryResult
name|bin
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|max
init|=
literal|4
operator|*
name|IntMath
operator|.
name|divide
argument_list|(
operator|(
name|int
operator|)
name|bin
operator|.
name|getContentLength
argument_list|()
argument_list|,
literal|3
argument_list|,
name|CEILING
argument_list|)
decl_stmt|;
name|TemporaryBuffer
operator|.
name|Heap
name|buf
init|=
name|heap
argument_list|(
name|max
argument_list|)
decl_stmt|;
name|OutputStream
name|encoded
init|=
name|BaseEncoding
operator|.
name|base64
argument_list|()
operator|.
name|encodingStream
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|buf
argument_list|,
name|ISO_8859_1
argument_list|)
argument_list|)
decl_stmt|;
name|bin
operator|.
name|writeTo
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|encoded
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|asBinaryResult
argument_list|(
name|buf
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|compress (BinaryResult bin)
specifier|private
specifier|static
name|BinaryResult
name|compress
parameter_list|(
name|BinaryResult
name|bin
parameter_list|)
throws|throws
name|IOException
block|{
name|TemporaryBuffer
operator|.
name|Heap
name|buf
init|=
name|heap
argument_list|(
literal|20
operator|<<
literal|20
argument_list|)
decl_stmt|;
name|GZIPOutputStream
name|gz
init|=
operator|new
name|GZIPOutputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|bin
operator|.
name|writeTo
argument_list|(
name|gz
argument_list|)
expr_stmt|;
name|gz
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|asBinaryResult
argument_list|(
name|buf
argument_list|)
operator|.
name|setContentType
argument_list|(
name|bin
operator|.
name|getContentType
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
DECL|method|asBinaryResult (final TemporaryBuffer.Heap buf)
specifier|private
specifier|static
name|BinaryResult
name|asBinaryResult
parameter_list|(
specifier|final
name|TemporaryBuffer
operator|.
name|Heap
name|buf
parameter_list|)
block|{
return|return
operator|new
name|BinaryResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|buf
operator|.
name|writeTo
argument_list|(
name|os
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|setContentLength
argument_list|(
name|buf
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|heap (int max)
specifier|private
specifier|static
name|Heap
name|heap
parameter_list|(
name|int
name|max
parameter_list|)
block|{
return|return
operator|new
name|TemporaryBuffer
operator|.
name|Heap
argument_list|(
name|max
argument_list|)
return|;
block|}
end_function

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|AmbiguousViewException
specifier|private
specifier|static
class|class
name|AmbiguousViewException
extends|extends
name|Exception
block|{
DECL|method|AmbiguousViewException (String message)
name|AmbiguousViewException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|ViewData
specifier|private
specifier|static
class|class
name|ViewData
block|{
DECL|field|pluginName
name|String
name|pluginName
decl_stmt|;
DECL|field|view
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|view
decl_stmt|;
DECL|method|ViewData (String pluginName, RestView<RestResource> view)
name|ViewData
parameter_list|(
name|String
name|pluginName
parameter_list|,
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|view
parameter_list|)
block|{
name|this
operator|.
name|pluginName
operator|=
name|pluginName
expr_stmt|;
name|this
operator|.
name|view
operator|=
name|view
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

