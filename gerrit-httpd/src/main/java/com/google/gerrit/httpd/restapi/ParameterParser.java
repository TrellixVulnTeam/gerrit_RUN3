begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd.restapi
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|restapi
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|restapi
operator|.
name|RestApiServlet
operator|.
name|replyError
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|restapi
operator|.
name|RestApiServlet
operator|.
name|replyText
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|util
operator|.
name|cli
operator|.
name|CmdLineParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|CmdLineException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_class
DECL|class|ParameterParser
class|class
name|ParameterParser
block|{
DECL|field|RESERVED_KEYS
specifier|private
specifier|static
specifier|final
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|RESERVED_KEYS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"pp"
argument_list|,
literal|"prettyPrint"
argument_list|,
literal|"strict"
argument_list|,
literal|"callback"
argument_list|,
literal|"alt"
argument_list|,
literal|"fields"
argument_list|)
decl_stmt|;
DECL|field|parserFactory
specifier|private
specifier|final
name|CmdLineParser
operator|.
name|Factory
name|parserFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|ParameterParser (CmdLineParser.Factory pf)
name|ParameterParser
parameter_list|(
name|CmdLineParser
operator|.
name|Factory
name|pf
parameter_list|)
block|{
name|this
operator|.
name|parserFactory
operator|=
name|pf
expr_stmt|;
block|}
DECL|method|parse (T param, Multimap<String, String> in, HttpServletRequest req, HttpServletResponse res)
parameter_list|<
name|T
parameter_list|>
name|boolean
name|parse
parameter_list|(
name|T
name|param
parameter_list|,
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|in
parameter_list|,
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|CmdLineParser
name|clp
init|=
name|parserFactory
operator|.
name|create
argument_list|(
name|param
argument_list|)
decl_stmt|;
try|try
block|{
name|clp
operator|.
name|parseOptionMap
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CmdLineException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|clp
operator|.
name|wasHelpRequestedByOption
argument_list|()
condition|)
block|{
name|replyError
argument_list|(
name|res
argument_list|,
name|SC_BAD_REQUEST
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|clp
operator|.
name|wasHelpRequestedByOption
argument_list|()
condition|)
block|{
name|StringWriter
name|msg
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|clp
operator|.
name|printQueryStringUsage
argument_list|(
name|req
operator|.
name|getRequestURI
argument_list|()
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|msg
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|msg
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|clp
operator|.
name|printUsage
argument_list|(
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|msg
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|replyText
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|splitQueryString (String queryString, Multimap<String, String> config, Multimap<String, String> params)
specifier|static
name|void
name|splitQueryString
parameter_list|(
name|String
name|queryString
parameter_list|,
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|,
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|queryString
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|kvPair
range|:
name|Splitter
operator|.
name|on
argument_list|(
literal|'&'
argument_list|)
operator|.
name|split
argument_list|(
name|queryString
argument_list|)
control|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|'='
argument_list|)
operator|.
name|limit
argument_list|(
literal|2
argument_list|)
operator|.
name|split
argument_list|(
name|kvPair
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|decode
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|i
operator|.
name|hasNext
argument_list|()
condition|?
name|decode
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
else|:
literal|""
decl_stmt|;
if|if
condition|(
name|RESERVED_KEYS
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|decode (String value)
specifier|private
specifier|static
name|String
name|decode
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|value
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

