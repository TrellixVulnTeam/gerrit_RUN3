begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|RestTokenVerifier
operator|.
name|InvalidTokenException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_class
DECL|class|TokenVerifiedRestApiServlet
specifier|public
specifier|abstract
class|class
name|TokenVerifiedRestApiServlet
extends|extends
name|RestApiServlet
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|FORM_ENCODED
specifier|private
specifier|static
specifier|final
name|String
name|FORM_ENCODED
init|=
literal|"application/x-www-form-urlencoded"
decl_stmt|;
DECL|field|UTF_8
specifier|private
specifier|static
specifier|final
name|String
name|UTF_8
init|=
literal|"UTF-8"
decl_stmt|;
DECL|field|AUTHKEY_NAME
specifier|private
specifier|static
specifier|final
name|String
name|AUTHKEY_NAME
init|=
literal|"_authkey"
decl_stmt|;
DECL|field|AUTHKEY_HEADER
specifier|private
specifier|static
specifier|final
name|String
name|AUTHKEY_HEADER
init|=
literal|"X-authkey"
decl_stmt|;
DECL|field|gson
specifier|private
specifier|final
name|Gson
name|gson
decl_stmt|;
DECL|field|userProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|userProvider
decl_stmt|;
DECL|field|verifier
specifier|private
specifier|final
name|RestTokenVerifier
name|verifier
decl_stmt|;
annotation|@
name|Inject
DECL|method|TokenVerifiedRestApiServlet (Provider<CurrentUser> userProvider, RestTokenVerifier verifier)
specifier|protected
name|TokenVerifiedRestApiServlet
parameter_list|(
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|userProvider
parameter_list|,
name|RestTokenVerifier
name|verifier
parameter_list|)
block|{
name|super
argument_list|(
name|userProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|gson
operator|=
name|OutputFormat
operator|.
name|JSON_COMPACT
operator|.
name|newGson
argument_list|()
expr_stmt|;
name|this
operator|.
name|userProvider
operator|=
name|userProvider
expr_stmt|;
name|this
operator|.
name|verifier
operator|=
name|verifier
expr_stmt|;
block|}
comment|/**    * Process the (possibly state changing) request.    *    * @param req incoming HTTP request.    * @param res outgoing response.    * @param requestData JSON object representing the HTTP request parameters.    *        Null if the request body was not supplied in JSON format.    * @throws IOException    * @throws ServletException    */
DECL|method|doRequest (HttpServletRequest req, HttpServletResponse res, @Nullable JsonObject requestData)
specifier|protected
specifier|abstract
name|void
name|doRequest
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|Nullable
name|JsonObject
name|requestData
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
function_decl|;
annotation|@
name|Override
DECL|method|doGet (HttpServletRequest req, HttpServletResponse res)
specifier|protected
specifier|final
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|CurrentUser
name|user
init|=
name|userProvider
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|user
operator|instanceof
name|IdentifiedUser
operator|)
condition|)
block|{
name|sendError
argument_list|(
name|res
argument_list|,
name|SC_UNAUTHORIZED
argument_list|,
literal|"API requires authentication"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TokenInfo
name|info
init|=
operator|new
name|TokenInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|_authkey
operator|=
name|verifier
operator|.
name|sign
argument_list|(
operator|(
operator|(
name|IdentifiedUser
operator|)
name|user
operator|)
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|computeUrl
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|buf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|String
name|type
decl_stmt|;
name|buf
operator|.
name|write
argument_list|(
name|JSON_MAGIC
argument_list|)
expr_stmt|;
if|if
condition|(
name|acceptsJson
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|type
operator|=
name|JSON_TYPE
expr_stmt|;
name|buf
operator|.
name|write
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|info
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|FORM_ENCODED
expr_stmt|;
name|buf
operator|.
name|write
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s=%s"
argument_list|,
name|AUTHKEY_NAME
argument_list|,
name|URLEncoder
operator|.
name|encode
argument_list|(
name|info
operator|.
name|_authkey
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|setContentType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|res
operator|.
name|setCharacterEncoding
argument_list|(
name|UTF_8
argument_list|)
expr_stmt|;
name|res
operator|.
name|setHeader
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"attachment"
argument_list|)
expr_stmt|;
name|send
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|buf
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doPost (HttpServletRequest req, HttpServletResponse res)
specifier|protected
specifier|final
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|CurrentUser
name|user
init|=
name|userProvider
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|user
operator|instanceof
name|IdentifiedUser
operator|)
condition|)
block|{
name|sendError
argument_list|(
name|res
argument_list|,
name|SC_UNAUTHORIZED
argument_list|,
literal|"API requires authentication"
argument_list|)
expr_stmt|;
return|return;
block|}
name|ParsedBody
name|body
decl_stmt|;
if|if
condition|(
name|JSON_TYPE
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getContentType
argument_list|()
argument_list|)
condition|)
block|{
name|body
operator|=
name|parseJson
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FORM_ENCODED
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getContentType
argument_list|()
argument_list|)
condition|)
block|{
name|body
operator|=
name|parseForm
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sendError
argument_list|(
name|res
argument_list|,
name|SC_BAD_REQUEST
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Expected Content-Type: %s or %s"
argument_list|,
name|JSON_TYPE
argument_list|,
name|FORM_ENCODED
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|body
operator|.
name|_authkey
argument_list|)
condition|)
block|{
name|String
name|h
init|=
name|req
operator|.
name|getHeader
argument_list|(
name|AUTHKEY_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|h
argument_list|)
condition|)
block|{
name|sendError
argument_list|(
name|res
argument_list|,
name|SC_BAD_REQUEST
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Expected %s in request body or %s in HTTP headers"
argument_list|,
name|AUTHKEY_NAME
argument_list|,
name|AUTHKEY_HEADER
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|body
operator|.
name|_authkey
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|h
argument_list|,
name|UTF_8
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|verifier
operator|.
name|verify
argument_list|(
operator|(
operator|(
name|IdentifiedUser
operator|)
name|user
operator|)
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|computeUrl
argument_list|(
name|req
argument_list|)
argument_list|,
name|body
operator|.
name|_authkey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidTokenException
name|err
parameter_list|)
block|{
name|sendError
argument_list|(
name|res
argument_list|,
name|SC_BAD_REQUEST
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Invalid or expired %s"
argument_list|,
name|AUTHKEY_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|doRequest
argument_list|(
name|body
operator|.
name|req
argument_list|,
name|res
argument_list|,
name|body
operator|.
name|json
argument_list|)
expr_stmt|;
block|}
DECL|method|parseJson (HttpServletRequest req, HttpServletResponse res)
specifier|private
specifier|static
name|ParsedBody
name|parseJson
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|JsonElement
name|element
init|=
operator|new
name|JsonParser
argument_list|()
operator|.
name|parse
argument_list|(
name|req
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|element
operator|.
name|isJsonObject
argument_list|()
condition|)
block|{
name|sendError
argument_list|(
name|res
argument_list|,
name|SC_BAD_REQUEST
argument_list|,
literal|"Expected JSON object in request body"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ParsedBody
name|body
init|=
operator|new
name|ParsedBody
argument_list|()
decl_stmt|;
name|body
operator|.
name|req
operator|=
name|req
expr_stmt|;
name|body
operator|.
name|json
operator|=
operator|(
name|JsonObject
operator|)
name|element
expr_stmt|;
name|JsonElement
name|authKey
init|=
name|body
operator|.
name|json
operator|.
name|remove
argument_list|(
name|AUTHKEY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|authKey
operator|!=
literal|null
operator|&&
name|authKey
operator|.
name|isJsonPrimitive
argument_list|()
operator|&&
name|authKey
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|isString
argument_list|()
condition|)
block|{
name|body
operator|.
name|_authkey
operator|=
name|authKey
operator|.
name|getAsString
argument_list|()
expr_stmt|;
block|}
return|return
name|body
return|;
block|}
catch|catch
parameter_list|(
name|JsonParseException
name|e
parameter_list|)
block|{
name|sendError
argument_list|(
name|res
argument_list|,
name|SC_BAD_REQUEST
argument_list|,
literal|"Invalid JSON object in request body"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|parseForm (HttpServletRequest req, HttpServletResponse res)
specifier|private
specifier|static
name|ParsedBody
name|parseForm
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|ParsedBody
name|body
init|=
operator|new
name|ParsedBody
argument_list|()
decl_stmt|;
name|body
operator|.
name|req
operator|=
operator|new
name|WrappedRequest
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|body
operator|.
name|_authkey
operator|=
name|req
operator|.
name|getParameter
argument_list|(
name|AUTHKEY_NAME
argument_list|)
expr_stmt|;
return|return
name|body
return|;
block|}
DECL|method|computeUrl (HttpServletRequest req)
specifier|private
specifier|static
name|String
name|computeUrl
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|StringBuffer
name|url
init|=
name|req
operator|.
name|getRequestURL
argument_list|()
decl_stmt|;
name|String
name|qs
init|=
name|req
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|qs
argument_list|)
condition|)
block|{
name|url
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
operator|.
name|append
argument_list|(
name|qs
argument_list|)
expr_stmt|;
block|}
return|return
name|url
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|TokenInfo
specifier|private
specifier|static
class|class
name|TokenInfo
block|{
DECL|field|_authkey
name|String
name|_authkey
decl_stmt|;
block|}
DECL|class|ParsedBody
specifier|private
specifier|static
class|class
name|ParsedBody
block|{
DECL|field|req
name|HttpServletRequest
name|req
decl_stmt|;
DECL|field|_authkey
name|String
name|_authkey
decl_stmt|;
DECL|field|json
name|JsonObject
name|json
decl_stmt|;
block|}
DECL|class|WrappedRequest
specifier|private
specifier|static
class|class
name|WrappedRequest
extends|extends
name|HttpServletRequestWrapper
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|field|parameters
specifier|private
name|Map
name|parameters
decl_stmt|;
DECL|method|WrappedRequest (HttpServletRequest req)
name|WrappedRequest
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|super
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getParameter (String name)
specifier|public
name|String
name|getParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|AUTHKEY_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|super
operator|.
name|getParameter
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getParameterValues (String name)
specifier|public
name|String
index|[]
name|getParameterValues
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|AUTHKEY_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|super
operator|.
name|getParameterValues
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getParameterMap ()
specifier|public
name|Map
name|getParameterMap
parameter_list|()
block|{
name|Map
name|m
init|=
name|parameters
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|m
operator|=
name|super
operator|.
name|getParameterMap
argument_list|()
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|containsKey
argument_list|(
name|AUTHKEY_NAME
argument_list|)
condition|)
block|{
name|m
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|remove
argument_list|(
name|AUTHKEY_NAME
argument_list|)
expr_stmt|;
block|}
name|parameters
operator|=
name|m
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getParameterNames ()
specifier|public
name|Enumeration
name|getParameterNames
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|asEnumeration
argument_list|(
name|getParameterMap
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

