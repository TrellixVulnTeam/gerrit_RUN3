begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd.rpc.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|rpc
operator|.
name|account
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AgreementInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|rpc
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountAgreement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountGroupAgreement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ContributorAgreement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|AgreementInfoFactory
class|class
name|AgreementInfoFactory
extends|extends
name|Handler
argument_list|<
name|AgreementInfo
argument_list|>
block|{
DECL|interface|Factory
interface|interface
name|Factory
block|{
DECL|method|create ()
name|AgreementInfoFactory
name|create
parameter_list|()
function_decl|;
block|}
DECL|field|db
specifier|private
specifier|final
name|ReviewDb
name|db
decl_stmt|;
DECL|field|groupCache
specifier|private
specifier|final
name|GroupCache
name|groupCache
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|IdentifiedUser
name|user
decl_stmt|;
DECL|field|info
specifier|private
name|AgreementInfo
name|info
decl_stmt|;
annotation|@
name|Inject
DECL|method|AgreementInfoFactory (final ReviewDb db, final GroupCache groupCache, final IdentifiedUser user)
name|AgreementInfoFactory
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|GroupCache
name|groupCache
parameter_list|,
specifier|final
name|IdentifiedUser
name|user
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|groupCache
operator|=
name|groupCache
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|AgreementInfo
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|AccountAgreement
argument_list|>
name|userAccepted
init|=
name|db
operator|.
name|accountAgreements
argument_list|()
operator|.
name|byAccount
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|userAccepted
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|AccountGroupAgreement
argument_list|>
name|groupAccepted
init|=
operator|new
name|ArrayList
argument_list|<
name|AccountGroupAgreement
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|AccountGroup
operator|.
name|UUID
name|groupUUID
range|:
name|user
operator|.
name|getEffectiveGroups
argument_list|()
control|)
block|{
name|AccountGroup
name|group
init|=
name|groupCache
operator|.
name|get
argument_list|(
name|groupUUID
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
specifier|final
name|List
argument_list|<
name|AccountGroupAgreement
argument_list|>
name|temp
init|=
name|db
operator|.
name|accountGroupAgreements
argument_list|()
operator|.
name|byGroup
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|temp
argument_list|)
expr_stmt|;
name|groupAccepted
operator|.
name|addAll
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|ContributorAgreement
operator|.
name|Id
argument_list|,
name|ContributorAgreement
argument_list|>
name|agreements
init|=
operator|new
name|HashMap
argument_list|<
name|ContributorAgreement
operator|.
name|Id
argument_list|,
name|ContributorAgreement
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|AccountAgreement
name|a
range|:
name|userAccepted
control|)
block|{
specifier|final
name|ContributorAgreement
operator|.
name|Id
name|id
init|=
name|a
operator|.
name|getAgreementId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|agreements
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|agreements
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|db
operator|.
name|contributorAgreements
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|AccountGroupAgreement
name|a
range|:
name|groupAccepted
control|)
block|{
specifier|final
name|ContributorAgreement
operator|.
name|Id
name|id
init|=
name|a
operator|.
name|getAgreementId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|agreements
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|agreements
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|db
operator|.
name|contributorAgreements
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|info
operator|=
operator|new
name|AgreementInfo
argument_list|()
expr_stmt|;
name|info
operator|.
name|setUserAccepted
argument_list|(
name|userAccepted
argument_list|)
expr_stmt|;
name|info
operator|.
name|setGroupAccepted
argument_list|(
name|groupAccepted
argument_list|)
expr_stmt|;
name|info
operator|.
name|setAgreements
argument_list|(
name|agreements
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
block|}
end_class

end_unit

