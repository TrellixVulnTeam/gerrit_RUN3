begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AnonymousUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|CacheModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ReceiveCommits
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|TransferConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|VisibleRefFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|http
operator|.
name|server
operator|.
name|GitServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|http
operator|.
name|server
operator|.
name|ServletUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|http
operator|.
name|server
operator|.
name|resolver
operator|.
name|AsIsFileService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|storage
operator|.
name|pack
operator|.
name|PackConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceivePack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|UploadPack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|resolver
operator|.
name|ReceivePackFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|resolver
operator|.
name|RepositoryResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|resolver
operator|.
name|ServiceNotAuthorizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|resolver
operator|.
name|ServiceNotEnabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|resolver
operator|.
name|UploadPackFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_comment
comment|/** Serves Git repositories over HTTP. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|ProjectServlet
specifier|public
class|class
name|ProjectServlet
extends|extends
name|GitServlet
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProjectServlet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ATT_CONTROL
specifier|private
specifier|static
specifier|final
name|String
name|ATT_CONTROL
init|=
name|ProjectControl
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|ID_CACHE
specifier|private
specifier|static
specifier|final
name|String
name|ID_CACHE
init|=
literal|"adv_bases"
decl_stmt|;
DECL|class|Module
specifier|static
class|class
name|Module
extends|extends
name|AbstractModule
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|Resolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|Upload
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|Receive
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ReceiveFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|install
argument_list|(
operator|new
name|CacheModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|TypeLiteral
argument_list|<
name|Cache
argument_list|<
name|AdvertisedObjectsCacheKey
argument_list|,
name|Set
argument_list|<
name|ObjectId
argument_list|>
argument_list|>
argument_list|>
name|cache
init|=
operator|new
name|TypeLiteral
argument_list|<
name|Cache
argument_list|<
name|AdvertisedObjectsCacheKey
argument_list|,
name|Set
argument_list|<
name|ObjectId
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|core
argument_list|(
name|cache
argument_list|,
name|ID_CACHE
argument_list|)
operator|.
name|memoryLimit
argument_list|(
literal|4096
argument_list|)
operator|.
name|maxAge
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getProjectControl (ServletRequest req)
specifier|static
name|ProjectControl
name|getProjectControl
parameter_list|(
name|ServletRequest
name|req
parameter_list|)
throws|throws
name|ServiceNotEnabledException
block|{
name|ProjectControl
name|pc
init|=
operator|(
name|ProjectControl
operator|)
name|req
operator|.
name|getAttribute
argument_list|(
name|ATT_CONTROL
argument_list|)
decl_stmt|;
if|if
condition|(
name|pc
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"No "
operator|+
name|ATT_CONTROL
operator|+
literal|" in request"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"here"
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceNotEnabledException
argument_list|()
throw|;
block|}
return|return
name|pc
return|;
block|}
DECL|field|urlProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|String
argument_list|>
name|urlProvider
decl_stmt|;
annotation|@
name|Inject
DECL|method|ProjectServlet (final Resolver resolver, final Upload upload, final Receive receive, final ReceiveFilter receiveFilter, @CanonicalWebUrl @Nullable Provider<String> urlProvider)
name|ProjectServlet
parameter_list|(
specifier|final
name|Resolver
name|resolver
parameter_list|,
specifier|final
name|Upload
name|upload
parameter_list|,
specifier|final
name|Receive
name|receive
parameter_list|,
specifier|final
name|ReceiveFilter
name|receiveFilter
parameter_list|,
annotation|@
name|CanonicalWebUrl
annotation|@
name|Nullable
name|Provider
argument_list|<
name|String
argument_list|>
name|urlProvider
parameter_list|)
block|{
name|this
operator|.
name|urlProvider
operator|=
name|urlProvider
expr_stmt|;
name|setRepositoryResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|setAsIsFileService
argument_list|(
name|AsIsFileService
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
name|setUploadPackFactory
argument_list|(
name|upload
argument_list|)
expr_stmt|;
name|setReceivePackFactory
argument_list|(
name|receive
argument_list|)
expr_stmt|;
name|addReceivePackFilter
argument_list|(
name|receiveFilter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (ServletConfig config)
specifier|public
name|void
name|init
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|serveRegex
argument_list|(
literal|"^/(.*?)/?$"
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|HttpServlet
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
block|{
name|ProjectControl
name|pc
decl_stmt|;
try|try
block|{
name|pc
operator|=
name|getProjectControl
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceNotEnabledException
name|e
parameter_list|)
block|{
name|rsp
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
return|return;
block|}
name|Project
operator|.
name|NameKey
name|dst
init|=
name|pc
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
decl_stmt|;
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|r
operator|.
name|append
argument_list|(
name|urlProvider
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
name|PageLinks
operator|.
name|projectQuery
argument_list|(
name|dst
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|sendRedirect
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|Resolver
specifier|static
class|class
name|Resolver
implements|implements
name|RepositoryResolver
argument_list|<
name|HttpServletRequest
argument_list|>
block|{
DECL|field|manager
specifier|private
specifier|final
name|GitRepositoryManager
name|manager
decl_stmt|;
DECL|field|projectControlFactory
specifier|private
specifier|final
name|ProjectControl
operator|.
name|Factory
name|projectControlFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|Resolver (GitRepositoryManager manager, ProjectControl.Factory projectControlFactory)
name|Resolver
parameter_list|(
name|GitRepositoryManager
name|manager
parameter_list|,
name|ProjectControl
operator|.
name|Factory
name|projectControlFactory
parameter_list|)
block|{
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|projectControlFactory
operator|=
name|projectControlFactory
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|open (HttpServletRequest req, String projectName)
specifier|public
name|Repository
name|open
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|String
name|projectName
parameter_list|)
throws|throws
name|RepositoryNotFoundException
throws|,
name|ServiceNotAuthorizedException
throws|,
name|ServiceNotEnabledException
block|{
if|if
condition|(
name|projectName
operator|.
name|endsWith
argument_list|(
literal|".git"
argument_list|)
condition|)
block|{
comment|// Be nice and drop the trailing ".git" suffix, which we never keep
comment|// in our database, but clients might mistakenly provide anyway.
comment|//
name|projectName
operator|=
name|projectName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|projectName
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|projectName
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// Be nice and drop the leading "/" if supplied by an absolute path.
comment|// We don't have a file system hierarchy, just a flat namespace in
comment|// the database's Project entities. We never encode these with a
comment|// leading '/' but users might accidentally include them in Git URLs.
comment|//
name|projectName
operator|=
name|projectName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ProjectControl
name|pc
decl_stmt|;
try|try
block|{
specifier|final
name|Project
operator|.
name|NameKey
name|nameKey
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|projectName
argument_list|)
decl_stmt|;
name|pc
operator|=
name|projectControlFactory
operator|.
name|controlFor
argument_list|(
name|nameKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryNotFoundException
argument_list|(
name|projectName
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|pc
operator|.
name|isVisible
argument_list|()
condition|)
block|{
if|if
condition|(
name|pc
operator|.
name|getCurrentUser
argument_list|()
operator|instanceof
name|AnonymousUser
condition|)
block|{
throw|throw
operator|new
name|ServiceNotAuthorizedException
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|ServiceNotEnabledException
argument_list|()
throw|;
block|}
block|}
name|req
operator|.
name|setAttribute
argument_list|(
name|ATT_CONTROL
argument_list|,
name|pc
argument_list|)
expr_stmt|;
return|return
name|manager
operator|.
name|openRepository
argument_list|(
name|pc
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|Upload
specifier|static
class|class
name|Upload
implements|implements
name|UploadPackFactory
argument_list|<
name|HttpServletRequest
argument_list|>
block|{
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|packConfig
specifier|private
specifier|final
name|PackConfig
name|packConfig
decl_stmt|;
annotation|@
name|Inject
DECL|method|Upload (final Provider<ReviewDb> db, final TransferConfig tc)
name|Upload
parameter_list|(
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
specifier|final
name|TransferConfig
name|tc
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|packConfig
operator|=
name|tc
operator|.
name|getPackConfig
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create (HttpServletRequest req, Repository repo)
specifier|public
name|UploadPack
name|create
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|Repository
name|repo
parameter_list|)
throws|throws
name|ServiceNotEnabledException
throws|,
name|ServiceNotAuthorizedException
block|{
name|ProjectControl
name|pc
init|=
name|getProjectControl
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pc
operator|.
name|canRunUploadPack
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ServiceNotAuthorizedException
argument_list|()
throw|;
block|}
comment|// The Resolver above already checked READ access for us.
comment|//
name|UploadPack
name|up
init|=
operator|new
name|UploadPack
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|up
operator|.
name|setPackConfig
argument_list|(
name|packConfig
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pc
operator|.
name|allRefsAreVisible
argument_list|()
condition|)
block|{
name|up
operator|.
name|setRefFilter
argument_list|(
operator|new
name|VisibleRefFilter
argument_list|(
name|repo
argument_list|,
name|pc
argument_list|,
name|db
operator|.
name|get
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|up
return|;
block|}
block|}
DECL|class|Receive
specifier|static
class|class
name|Receive
implements|implements
name|ReceivePackFactory
argument_list|<
name|HttpServletRequest
argument_list|>
block|{
DECL|field|factory
specifier|private
specifier|final
name|ReceiveCommits
operator|.
name|Factory
name|factory
decl_stmt|;
annotation|@
name|Inject
DECL|method|Receive (final ReceiveCommits.Factory factory)
name|Receive
parameter_list|(
specifier|final
name|ReceiveCommits
operator|.
name|Factory
name|factory
parameter_list|)
block|{
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create (HttpServletRequest req, Repository db)
specifier|public
name|ReceivePack
name|create
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|Repository
name|db
parameter_list|)
throws|throws
name|ServiceNotEnabledException
throws|,
name|ServiceNotAuthorizedException
block|{
specifier|final
name|ProjectControl
name|pc
init|=
name|getProjectControl
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pc
operator|.
name|canRunReceivePack
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ServiceNotAuthorizedException
argument_list|()
throw|;
block|}
if|if
condition|(
name|pc
operator|.
name|getCurrentUser
argument_list|()
operator|instanceof
name|IdentifiedUser
condition|)
block|{
specifier|final
name|IdentifiedUser
name|user
init|=
operator|(
name|IdentifiedUser
operator|)
name|pc
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
specifier|final
name|ReceiveCommits
name|rc
init|=
name|factory
operator|.
name|create
argument_list|(
name|pc
argument_list|,
name|db
argument_list|)
decl_stmt|;
specifier|final
name|ReceiveCommits
operator|.
name|Capable
name|s
init|=
name|rc
operator|.
name|canUpload
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
name|ReceiveCommits
operator|.
name|Capable
operator|.
name|OK
condition|)
block|{
comment|// TODO We should alert the user to this message on the HTTP
comment|// response channel, assuming Git will even report it to them.
comment|//
specifier|final
name|String
name|who
init|=
name|user
operator|.
name|getUserName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|why
init|=
name|s
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Rejected push from "
operator|+
name|who
operator|+
literal|": "
operator|+
name|why
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceNotEnabledException
argument_list|()
throw|;
block|}
name|rc
operator|.
name|getReceivePack
argument_list|()
operator|.
name|setRefLogIdent
argument_list|(
name|user
operator|.
name|newRefLogIdent
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rc
operator|.
name|getReceivePack
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ServiceNotAuthorizedException
argument_list|()
throw|;
block|}
block|}
block|}
DECL|class|ReceiveFilter
specifier|static
class|class
name|ReceiveFilter
implements|implements
name|Filter
block|{
DECL|field|cache
specifier|private
specifier|final
name|Cache
argument_list|<
name|AdvertisedObjectsCacheKey
argument_list|,
name|Set
argument_list|<
name|ObjectId
argument_list|>
argument_list|>
name|cache
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
annotation|@
name|Inject
DECL|method|ReceiveFilter ( @amedID_CACHE) Cache<AdvertisedObjectsCacheKey, Set<ObjectId>> cache, Provider<ReviewDb> db)
name|ReceiveFilter
parameter_list|(
annotation|@
name|Named
argument_list|(
name|ID_CACHE
argument_list|)
name|Cache
argument_list|<
name|AdvertisedObjectsCacheKey
argument_list|,
name|Set
argument_list|<
name|ObjectId
argument_list|>
argument_list|>
name|cache
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doFilter (ServletRequest request, ServletResponse response, FilterChain chain)
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|boolean
name|isGet
init|=
literal|"GET"
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
operator|(
name|HttpServletRequest
operator|)
name|request
operator|)
operator|.
name|getMethod
argument_list|()
argument_list|)
decl_stmt|;
name|ReceivePack
name|rp
init|=
operator|(
name|ReceivePack
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
name|ServletUtils
operator|.
name|ATTRIBUTE_HANDLER
argument_list|)
decl_stmt|;
name|ProjectControl
name|pc
decl_stmt|;
try|try
block|{
name|pc
operator|=
name|getProjectControl
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceNotEnabledException
name|e
parameter_list|)
block|{
comment|// This shouldn't occur, the parent should have stopped processing.
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Project
operator|.
name|NameKey
name|projectName
init|=
name|pc
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rp
operator|.
name|isCheckReferencedObjectsAreReachable
argument_list|()
condition|)
block|{
if|if
condition|(
name|isGet
condition|)
block|{
name|advertiseHistory
argument_list|(
name|rp
argument_list|,
name|projectName
argument_list|)
expr_stmt|;
block|}
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|pc
operator|.
name|getCurrentUser
argument_list|()
operator|instanceof
name|IdentifiedUser
operator|)
condition|)
block|{
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return;
block|}
name|AdvertisedObjectsCacheKey
name|cacheKey
init|=
operator|new
name|AdvertisedObjectsCacheKey
argument_list|(
operator|(
operator|(
name|IdentifiedUser
operator|)
name|pc
operator|.
name|getCurrentUser
argument_list|()
operator|)
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|projectName
argument_list|)
decl_stmt|;
if|if
condition|(
name|isGet
condition|)
block|{
name|advertiseHistory
argument_list|(
name|rp
argument_list|,
name|projectName
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|ids
init|=
name|cache
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|!=
literal|null
condition|)
block|{
name|rp
operator|.
name|getAdvertisedObjects
argument_list|()
operator|.
name|addAll
argument_list|(
name|ids
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
block|}
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|isGet
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|cacheKey
argument_list|,
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|ObjectId
argument_list|>
argument_list|(
name|rp
operator|.
name|getAdvertisedObjects
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|advertiseHistory (ReceivePack rp, Project.NameKey projectName)
specifier|private
name|void
name|advertiseHistory
parameter_list|(
name|ReceivePack
name|rp
parameter_list|,
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|)
block|{
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|toInclude
init|=
operator|new
name|HashSet
argument_list|<
name|ObjectId
argument_list|>
argument_list|()
decl_stmt|;
comment|// Advertise all open changes, in case a new commit is based on it.
try|try
block|{
name|Set
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|toGet
init|=
operator|new
name|HashSet
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Change
name|change
range|:
name|db
operator|.
name|get
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|byProjectOpenNext
argument_list|(
name|projectName
argument_list|,
literal|"z"
argument_list|,
literal|32
argument_list|)
control|)
block|{
name|PatchSet
operator|.
name|Id
name|id
init|=
name|change
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|toGet
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|PatchSet
name|ps
range|:
name|db
operator|.
name|get
argument_list|()
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|toGet
argument_list|)
control|)
block|{
if|if
condition|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|!=
literal|null
operator|&&
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toInclude
operator|.
name|add
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot list open changes of "
operator|+
name|projectName
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
comment|// Size of an additional ".have" line.
specifier|final
name|int
name|haveLineLen
init|=
literal|4
operator|+
name|Constants
operator|.
name|OBJECT_ID_STRING_LENGTH
operator|+
literal|1
operator|+
literal|5
operator|+
literal|1
decl_stmt|;
comment|// Maximum number of bytes to "waste" in the advertisement with
comment|// a peek at this repository's current reachable history.
specifier|final
name|int
name|maxExtraSize
init|=
literal|8192
decl_stmt|;
comment|// Number of recent commits to advertise immediately, hoping to
comment|// show a client a nearby merge base.
specifier|final
name|int
name|base
init|=
literal|64
decl_stmt|;
comment|// Number of commits to skip once base has already been shown.
specifier|final
name|int
name|step
init|=
literal|16
decl_stmt|;
comment|// Total number of commits to extract from the history.
specifier|final
name|int
name|max
init|=
name|maxExtraSize
operator|/
name|haveLineLen
decl_stmt|;
comment|// Scan history until the advertisement is full.
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|alreadySending
init|=
name|rp
operator|.
name|getAdvertisedObjects
argument_list|()
decl_stmt|;
name|RevWalk
name|rw
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectId
name|haveId
range|:
name|alreadySending
control|)
block|{
try|try
block|{
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|haveId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|badCommit
parameter_list|)
block|{
continue|continue;
block|}
block|}
name|int
name|stepCnt
init|=
literal|0
decl_stmt|;
name|RevCommit
name|c
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|c
operator|=
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
name|toInclude
operator|.
name|size
argument_list|()
operator|<
name|max
condition|)
block|{
if|if
condition|(
name|alreadySending
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
block|{           }
elseif|else
if|if
condition|(
name|toInclude
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
block|{           }
elseif|else
if|if
condition|(
name|c
operator|.
name|getParentCount
argument_list|()
operator|>
literal|1
condition|)
block|{           }
elseif|else
if|if
condition|(
name|toInclude
operator|.
name|size
argument_list|()
operator|<
name|base
condition|)
block|{
name|toInclude
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stepCnt
operator|=
operator|++
name|stepCnt
operator|%
name|step
expr_stmt|;
if|if
condition|(
name|stepCnt
operator|==
literal|0
condition|)
block|{
name|toInclude
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error trying to advertise history on "
operator|+
name|projectName
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rp
operator|.
name|getAdvertisedObjects
argument_list|()
operator|.
name|addAll
argument_list|(
name|toInclude
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (FilterConfig arg0)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|arg0
parameter_list|)
throws|throws
name|ServletException
block|{     }
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{     }
block|}
block|}
end_class

end_unit

