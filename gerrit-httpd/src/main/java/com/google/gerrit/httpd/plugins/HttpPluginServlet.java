begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd.plugins
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|plugins
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|PluginEntry
operator|.
name|ATTR_CHARACTER_ENCODING
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|PluginEntry
operator|.
name|ATTR_CONTENT_TYPE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|RegistrationHandle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|restapi
operator|.
name|RestApiServlet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|MimeUtilFileTypeRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|documentation
operator|.
name|MarkdownFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|Plugin
operator|.
name|ApiType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|PluginContentScanner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|PluginEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|PluginsCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|ReloadPluginListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|StartPluginListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|SshInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|server
operator|.
name|CacheHeaders
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|IO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|RawParseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|HttpPluginServlet
class|class
name|HttpPluginServlet
extends|extends
name|HttpServlet
implements|implements
name|StartPluginListener
implements|,
name|ReloadPluginListener
block|{
DECL|field|SMALL_RESOURCE
specifier|private
specifier|static
specifier|final
name|int
name|SMALL_RESOURCE
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HttpPluginServlet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mimeUtil
specifier|private
specifier|final
name|MimeUtilFileTypeRegistry
name|mimeUtil
decl_stmt|;
DECL|field|webUrl
specifier|private
specifier|final
name|Provider
argument_list|<
name|String
argument_list|>
name|webUrl
decl_stmt|;
DECL|field|resourceCache
specifier|private
specifier|final
name|Cache
argument_list|<
name|ResourceKey
argument_list|,
name|Resource
argument_list|>
name|resourceCache
decl_stmt|;
DECL|field|sshHost
specifier|private
specifier|final
name|String
name|sshHost
decl_stmt|;
DECL|field|sshPort
specifier|private
specifier|final
name|int
name|sshPort
decl_stmt|;
DECL|field|managerApi
specifier|private
specifier|final
name|RestApiServlet
name|managerApi
decl_stmt|;
DECL|field|pending
specifier|private
name|List
argument_list|<
name|Plugin
argument_list|>
name|pending
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|field|wrapper
specifier|private
name|ContextMapper
name|wrapper
decl_stmt|;
DECL|field|plugins
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|PluginHolder
argument_list|>
name|plugins
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|HttpPluginServlet ( MimeUtilFileTypeRegistry mimeUtil, @CanonicalWebUrl Provider<String> webUrl, @Named(HttpPluginModule.PLUGIN_RESOURCES) Cache<ResourceKey, Resource> cache, @GerritServerConfig Config cfg, SshInfo sshInfo, RestApiServlet.Globals globals, PluginsCollection plugins)
name|HttpPluginServlet
parameter_list|(
name|MimeUtilFileTypeRegistry
name|mimeUtil
parameter_list|,
annotation|@
name|CanonicalWebUrl
name|Provider
argument_list|<
name|String
argument_list|>
name|webUrl
parameter_list|,
annotation|@
name|Named
argument_list|(
name|HttpPluginModule
operator|.
name|PLUGIN_RESOURCES
argument_list|)
name|Cache
argument_list|<
name|ResourceKey
argument_list|,
name|Resource
argument_list|>
name|cache
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|SshInfo
name|sshInfo
parameter_list|,
name|RestApiServlet
operator|.
name|Globals
name|globals
parameter_list|,
name|PluginsCollection
name|plugins
parameter_list|)
block|{
name|this
operator|.
name|mimeUtil
operator|=
name|mimeUtil
expr_stmt|;
name|this
operator|.
name|webUrl
operator|=
name|webUrl
expr_stmt|;
name|this
operator|.
name|resourceCache
operator|=
name|cache
expr_stmt|;
name|this
operator|.
name|managerApi
operator|=
operator|new
name|RestApiServlet
argument_list|(
name|globals
argument_list|,
name|plugins
argument_list|)
expr_stmt|;
name|String
name|sshHost
init|=
literal|"review.example.com"
decl_stmt|;
name|int
name|sshPort
init|=
literal|29418
decl_stmt|;
if|if
condition|(
operator|!
name|sshInfo
operator|.
name|getHostKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|host
init|=
name|sshInfo
operator|.
name|getHostKeys
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|c
init|=
name|host
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|c
condition|)
block|{
name|sshHost
operator|=
name|host
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|sshPort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|host
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sshHost
operator|=
name|host
expr_stmt|;
name|sshPort
operator|=
literal|22
expr_stmt|;
block|}
block|}
name|this
operator|.
name|sshHost
operator|=
name|sshHost
expr_stmt|;
name|this
operator|.
name|sshPort
operator|=
name|sshPort
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (ServletConfig config)
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|wrapper
operator|=
operator|new
name|ContextMapper
argument_list|(
name|config
operator|.
name|getServletContext
argument_list|()
operator|.
name|getContextPath
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Plugin
name|plugin
range|:
name|pending
control|)
block|{
name|install
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
block|}
name|pending
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onStartPlugin (Plugin plugin)
specifier|public
specifier|synchronized
name|void
name|onStartPlugin
parameter_list|(
name|Plugin
name|plugin
parameter_list|)
block|{
if|if
condition|(
name|pending
operator|!=
literal|null
condition|)
block|{
name|pending
operator|.
name|add
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|install
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onReloadPlugin (Plugin oldPlugin, Plugin newPlugin)
specifier|public
name|void
name|onReloadPlugin
parameter_list|(
name|Plugin
name|oldPlugin
parameter_list|,
name|Plugin
name|newPlugin
parameter_list|)
block|{
name|install
argument_list|(
name|newPlugin
argument_list|)
expr_stmt|;
block|}
DECL|method|install (Plugin plugin)
specifier|private
name|void
name|install
parameter_list|(
name|Plugin
name|plugin
parameter_list|)
block|{
name|GuiceFilter
name|filter
init|=
name|load
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|plugin
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|PluginHolder
name|holder
init|=
operator|new
name|PluginHolder
argument_list|(
name|plugin
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|plugin
operator|.
name|add
argument_list|(
operator|new
name|RegistrationHandle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|plugins
operator|.
name|remove
argument_list|(
name|name
argument_list|,
name|holder
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|plugins
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|holder
argument_list|)
expr_stmt|;
block|}
DECL|method|load (Plugin plugin)
specifier|private
name|GuiceFilter
name|load
parameter_list|(
name|Plugin
name|plugin
parameter_list|)
block|{
if|if
condition|(
name|plugin
operator|.
name|getHttpInjector
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|name
init|=
name|plugin
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|GuiceFilter
name|filter
decl_stmt|;
try|try
block|{
name|filter
operator|=
name|plugin
operator|.
name|getHttpInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|GuiceFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Plugin %s cannot load GuiceFilter"
argument_list|,
name|name
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|ServletContext
name|ctx
init|=
name|PluginServletContext
operator|.
name|create
argument_list|(
name|plugin
argument_list|,
name|wrapper
operator|.
name|getFullPath
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|filter
operator|.
name|init
argument_list|(
operator|new
name|WrappedFilterConfig
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Plugin %s failed to initialize HTTP"
argument_list|,
name|name
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|plugin
operator|.
name|add
argument_list|(
operator|new
name|RegistrationHandle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|service (HttpServletRequest req, HttpServletResponse res)
specifier|public
name|void
name|service
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|'/'
argument_list|)
operator|.
name|limit
argument_list|(
literal|3
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|req
operator|.
name|getPathInfo
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApiCall
argument_list|(
name|req
argument_list|,
name|parts
argument_list|)
condition|)
block|{
name|managerApi
operator|.
name|service
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|name
init|=
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|PluginHolder
name|holder
init|=
name|plugins
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|holder
operator|==
literal|null
condition|)
block|{
name|CacheHeaders
operator|.
name|setNotCacheable
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|res
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
return|return;
block|}
name|HttpServletRequest
name|wr
init|=
name|wrapper
operator|.
name|create
argument_list|(
name|req
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|FilterChain
name|chain
init|=
operator|new
name|FilterChain
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|req
parameter_list|,
name|ServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|onDefault
argument_list|(
name|holder
argument_list|,
operator|(
name|HttpServletRequest
operator|)
name|req
argument_list|,
operator|(
name|HttpServletResponse
operator|)
name|res
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|holder
operator|.
name|filter
operator|!=
literal|null
condition|)
block|{
name|holder
operator|.
name|filter
operator|.
name|doFilter
argument_list|(
name|wr
argument_list|,
name|res
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|chain
operator|.
name|doFilter
argument_list|(
name|wr
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isApiCall (HttpServletRequest req, List<String> parts)
specifier|private
specifier|static
name|boolean
name|isApiCall
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|parts
parameter_list|)
block|{
name|String
name|method
init|=
name|req
operator|.
name|getMethod
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
name|parts
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|cnt
operator|==
literal|0
operator|||
operator|(
name|cnt
operator|==
literal|1
operator|&&
operator|(
literal|"PUT"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
operator|||
literal|"DELETE"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
operator|)
operator|)
operator|||
operator|(
name|cnt
operator|==
literal|2
operator|&&
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"gerrit~"
argument_list|)
operator|)
return|;
block|}
DECL|method|onDefault (PluginHolder holder, HttpServletRequest req, HttpServletResponse res)
specifier|private
name|void
name|onDefault
parameter_list|(
name|PluginHolder
name|holder
parameter_list|,
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
literal|"GET"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|&&
operator|!
literal|"HEAD"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
name|CacheHeaders
operator|.
name|setNotCacheable
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|res
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_METHOD_NOT_ALLOWED
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|pathInfo
init|=
name|req
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathInfo
operator|.
name|length
argument_list|()
operator|<
literal|1
condition|)
block|{
name|Resource
operator|.
name|NOT_FOUND
operator|.
name|send
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|file
init|=
name|pathInfo
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ResourceKey
name|key
init|=
operator|new
name|ResourceKey
argument_list|(
name|holder
operator|.
name|plugin
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|Resource
name|rsc
init|=
name|resourceCache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsc
operator|!=
literal|null
operator|&&
name|req
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|IF_MODIFIED_SINCE
argument_list|)
operator|==
literal|null
condition|)
block|{
name|rsc
operator|.
name|send
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|uri
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|res
operator|.
name|sendRedirect
argument_list|(
name|uri
operator|+
name|holder
operator|.
name|docPrefix
operator|+
literal|"index.html"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
name|holder
operator|.
name|staticPrefix
argument_list|)
condition|)
block|{
if|if
condition|(
name|holder
operator|.
name|plugin
operator|.
name|getApiType
argument_list|()
operator|==
name|ApiType
operator|.
name|JS
condition|)
block|{
name|sendJsPlugin
argument_list|(
name|holder
operator|.
name|plugin
argument_list|,
name|key
argument_list|,
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PluginContentScanner
name|scanner
init|=
name|holder
operator|.
name|plugin
operator|.
name|getContentScanner
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|PluginEntry
argument_list|>
name|entry
init|=
name|scanner
operator|.
name|getEntry
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
name|hasUpToDateCachedResource
argument_list|(
name|rsc
argument_list|,
name|entry
operator|.
name|get
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|rsc
operator|.
name|send
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sendResource
argument_list|(
name|scanner
argument_list|,
name|entry
operator|.
name|get
argument_list|()
argument_list|,
name|key
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|resourceCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Resource
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|Resource
operator|.
name|NOT_FOUND
operator|.
name|send
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|equals
argument_list|(
name|holder
operator|.
name|docPrefix
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|holder
operator|.
name|docPrefix
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|res
operator|.
name|sendRedirect
argument_list|(
name|uri
operator|+
literal|"/index.html"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
name|holder
operator|.
name|docPrefix
argument_list|)
operator|&&
name|file
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|res
operator|.
name|sendRedirect
argument_list|(
name|uri
operator|+
literal|"index.html"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
name|holder
operator|.
name|docPrefix
argument_list|)
condition|)
block|{
name|PluginContentScanner
name|scanner
init|=
name|holder
operator|.
name|plugin
operator|.
name|getContentScanner
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|PluginEntry
argument_list|>
name|entry
init|=
name|scanner
operator|.
name|getEntry
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|entry
operator|=
name|findSource
argument_list|(
name|scanner
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|entry
operator|.
name|isPresent
argument_list|()
operator|&&
name|file
operator|.
name|endsWith
argument_list|(
literal|"/index.html"
argument_list|)
condition|)
block|{
name|String
name|pfx
init|=
name|file
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|file
operator|.
name|length
argument_list|()
operator|-
literal|"index.html"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|pluginLastModified
init|=
name|holder
operator|.
name|plugin
operator|.
name|getSrcFile
argument_list|()
operator|.
name|lastModified
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasUpToDateCachedResource
argument_list|(
name|rsc
argument_list|,
name|pluginLastModified
argument_list|)
condition|)
block|{
name|rsc
operator|.
name|send
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sendAutoIndex
argument_list|(
name|scanner
argument_list|,
name|pfx
argument_list|,
name|holder
operator|.
name|plugin
operator|.
name|getName
argument_list|()
argument_list|,
name|key
argument_list|,
name|res
argument_list|,
name|pluginLastModified
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|isPresent
argument_list|()
operator|&&
name|entry
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".md"
argument_list|)
condition|)
block|{
if|if
condition|(
name|hasUpToDateCachedResource
argument_list|(
name|rsc
argument_list|,
name|entry
operator|.
name|get
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|rsc
operator|.
name|send
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sendMarkdownAsHtml
argument_list|(
name|scanner
argument_list|,
name|entry
operator|.
name|get
argument_list|()
argument_list|,
name|holder
operator|.
name|plugin
operator|.
name|getName
argument_list|()
argument_list|,
name|key
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
name|hasUpToDateCachedResource
argument_list|(
name|rsc
argument_list|,
name|entry
operator|.
name|get
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|rsc
operator|.
name|send
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sendResource
argument_list|(
name|scanner
argument_list|,
name|entry
operator|.
name|get
argument_list|()
argument_list|,
name|key
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|resourceCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Resource
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|Resource
operator|.
name|NOT_FOUND
operator|.
name|send
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|resourceCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Resource
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|Resource
operator|.
name|NOT_FOUND
operator|.
name|send
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|hasUpToDateCachedResource (Resource cachedResource, long lastUpdateTime)
specifier|private
name|boolean
name|hasUpToDateCachedResource
parameter_list|(
name|Resource
name|cachedResource
parameter_list|,
name|long
name|lastUpdateTime
parameter_list|)
block|{
return|return
name|cachedResource
operator|!=
literal|null
operator|&&
name|cachedResource
operator|.
name|isUnchanged
argument_list|(
name|lastUpdateTime
argument_list|)
return|;
block|}
DECL|method|appendEntriesSection (PluginContentScanner scanner, List<PluginEntry> entries, String sectionTitle, StringBuilder md, String prefix, int nameOffset)
specifier|private
name|void
name|appendEntriesSection
parameter_list|(
name|PluginContentScanner
name|scanner
parameter_list|,
name|List
argument_list|<
name|PluginEntry
argument_list|>
name|entries
parameter_list|,
name|String
name|sectionTitle
parameter_list|,
name|StringBuilder
name|md
parameter_list|,
name|String
name|prefix
parameter_list|,
name|int
name|nameOffset
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|md
operator|.
name|append
argument_list|(
literal|"## "
argument_list|)
operator|.
name|append
argument_list|(
name|sectionTitle
argument_list|)
operator|.
name|append
argument_list|(
literal|" ##\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|PluginEntry
name|entry
range|:
name|entries
control|)
block|{
name|String
name|rsrc
init|=
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|entryTitle
decl_stmt|;
if|if
condition|(
name|rsrc
operator|.
name|endsWith
argument_list|(
literal|".html"
argument_list|)
condition|)
block|{
name|entryTitle
operator|=
name|rsrc
operator|.
name|substring
argument_list|(
name|nameOffset
argument_list|,
name|rsrc
operator|.
name|length
argument_list|()
operator|-
literal|5
argument_list|)
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rsrc
operator|.
name|endsWith
argument_list|(
literal|".md"
argument_list|)
condition|)
block|{
name|entryTitle
operator|=
name|extractTitleFromMarkdown
argument_list|(
name|scanner
argument_list|,
name|entry
argument_list|)
expr_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|entryTitle
argument_list|)
condition|)
block|{
name|entryTitle
operator|=
name|rsrc
operator|.
name|substring
argument_list|(
name|nameOffset
argument_list|,
name|rsrc
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
block|}
name|rsrc
operator|=
name|rsrc
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|rsrc
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
operator|+
literal|".html"
expr_stmt|;
block|}
else|else
block|{
name|entryTitle
operator|=
name|rsrc
operator|.
name|substring
argument_list|(
name|nameOffset
argument_list|)
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
block|}
name|md
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"* [%s](%s)\n"
argument_list|,
name|entryTitle
argument_list|,
name|rsrc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|md
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendAutoIndex (PluginContentScanner scanner, String prefix, String pluginName, ResourceKey cacheKey, HttpServletResponse res,long lastModifiedTime)
specifier|private
name|void
name|sendAutoIndex
parameter_list|(
name|PluginContentScanner
name|scanner
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|pluginName
parameter_list|,
name|ResourceKey
name|cacheKey
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|long
name|lastModifiedTime
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|PluginEntry
argument_list|>
name|cmds
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PluginEntry
argument_list|>
name|servlets
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PluginEntry
argument_list|>
name|restApis
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PluginEntry
argument_list|>
name|docs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|PluginEntry
name|about
init|=
literal|null
decl_stmt|;
name|Enumeration
argument_list|<
name|PluginEntry
argument_list|>
name|entries
init|=
name|scanner
operator|.
name|entries
argument_list|()
decl_stmt|;
while|while
condition|(
name|entries
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|PluginEntry
name|entry
init|=
name|entries
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|Long
argument_list|>
name|size
init|=
name|entry
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
operator|&&
operator|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".md"
argument_list|)
operator|||
name|name
operator|.
name|endsWith
argument_list|(
literal|".html"
argument_list|)
operator|)
operator|&&
name|size
operator|.
name|isPresent
argument_list|()
operator|&&
literal|0
operator|<
name|size
operator|.
name|get
argument_list|()
operator|&&
name|size
operator|.
name|get
argument_list|()
operator|<=
name|SMALL_RESOURCE
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"cmd-"
argument_list|)
condition|)
block|{
name|cmds
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"servlet-"
argument_list|)
condition|)
block|{
name|servlets
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"rest-api-"
argument_list|)
condition|)
block|{
name|restApis
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"about."
argument_list|)
condition|)
block|{
if|if
condition|(
name|about
operator|==
literal|null
condition|)
block|{
name|about
operator|=
name|entry
expr_stmt|;
block|}
block|}
else|else
block|{
name|docs
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|cmds
argument_list|,
name|PluginEntry
operator|.
name|COMPARATOR_BY_NAME
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|docs
argument_list|,
name|PluginEntry
operator|.
name|COMPARATOR_BY_NAME
argument_list|)
expr_stmt|;
name|StringBuilder
name|md
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|md
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"# Plugin %s #\n"
argument_list|,
name|pluginName
argument_list|)
argument_list|)
expr_stmt|;
name|md
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|appendPluginInfoTable
argument_list|(
name|md
argument_list|,
name|scanner
operator|.
name|getManifest
argument_list|()
operator|.
name|getMainAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|about
operator|!=
literal|null
condition|)
block|{
name|InputStreamReader
name|isr
init|=
operator|new
name|InputStreamReader
argument_list|(
name|scanner
operator|.
name|getInputStream
argument_list|(
name|about
argument_list|)
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
name|isr
argument_list|)
decl_stmt|;
name|StringBuilder
name|aboutContent
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|aboutContent
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aboutContent
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Only append the About section if there was anything in it
if|if
condition|(
name|aboutContent
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|md
operator|.
name|append
argument_list|(
literal|"## About ##\n"
argument_list|)
expr_stmt|;
name|md
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|aboutContent
argument_list|)
expr_stmt|;
block|}
block|}
name|appendEntriesSection
argument_list|(
name|scanner
argument_list|,
name|docs
argument_list|,
literal|"Documentation"
argument_list|,
name|md
argument_list|,
name|prefix
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|appendEntriesSection
argument_list|(
name|scanner
argument_list|,
name|servlets
argument_list|,
literal|"Servlets"
argument_list|,
name|md
argument_list|,
name|prefix
argument_list|,
literal|"servlet-"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|appendEntriesSection
argument_list|(
name|scanner
argument_list|,
name|restApis
argument_list|,
literal|"REST APIs"
argument_list|,
name|md
argument_list|,
name|prefix
argument_list|,
literal|"rest-api-"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|appendEntriesSection
argument_list|(
name|scanner
argument_list|,
name|cmds
argument_list|,
literal|"Commands"
argument_list|,
name|md
argument_list|,
name|prefix
argument_list|,
literal|"cmd-"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|sendMarkdownAsHtml
argument_list|(
name|md
operator|.
name|toString
argument_list|()
argument_list|,
name|pluginName
argument_list|,
name|cacheKey
argument_list|,
name|res
argument_list|,
name|lastModifiedTime
argument_list|)
expr_stmt|;
block|}
DECL|method|sendMarkdownAsHtml (String md, String pluginName, ResourceKey cacheKey, HttpServletResponse res, long lastModifiedTime)
specifier|private
name|void
name|sendMarkdownAsHtml
parameter_list|(
name|String
name|md
parameter_list|,
name|String
name|pluginName
parameter_list|,
name|ResourceKey
name|cacheKey
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|long
name|lastModifiedTime
parameter_list|)
throws|throws
name|UnsupportedEncodingException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|macros
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|macros
operator|.
name|put
argument_list|(
literal|"PLUGIN"
argument_list|,
name|pluginName
argument_list|)
expr_stmt|;
name|macros
operator|.
name|put
argument_list|(
literal|"SSH_HOST"
argument_list|,
name|sshHost
argument_list|)
expr_stmt|;
name|macros
operator|.
name|put
argument_list|(
literal|"SSH_PORT"
argument_list|,
literal|""
operator|+
name|sshPort
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|webUrl
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|url
argument_list|)
condition|)
block|{
name|url
operator|=
literal|"http://review.example.com/"
expr_stmt|;
block|}
name|macros
operator|.
name|put
argument_list|(
literal|"URL"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\\\)?@([A-Z_]+)@"
argument_list|)
operator|.
name|matcher
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|macros
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|appendReplacement
argument_list|(
name|sb
argument_list|,
literal|"@"
operator|+
name|key
operator|+
literal|"@"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|appendReplacement
argument_list|(
name|sb
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|appendReplacement
argument_list|(
name|sb
argument_list|,
literal|"@"
operator|+
name|key
operator|+
literal|"@"
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|.
name|appendTail
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|byte
index|[]
name|html
init|=
operator|new
name|MarkdownFormatter
argument_list|()
operator|.
name|markdownToDocHtml
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|resourceCache
operator|.
name|put
argument_list|(
name|cacheKey
argument_list|,
operator|new
name|SmallResource
argument_list|(
name|html
argument_list|)
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|setLastModified
argument_list|(
name|lastModifiedTime
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|res
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContentLength
argument_list|(
name|html
operator|.
name|length
argument_list|)
expr_stmt|;
name|res
operator|.
name|setDateHeader
argument_list|(
literal|"Last-Modified"
argument_list|,
name|lastModifiedTime
argument_list|)
expr_stmt|;
name|res
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
DECL|method|appendPluginInfoTable (StringBuilder html, Attributes main)
specifier|private
specifier|static
name|void
name|appendPluginInfoTable
parameter_list|(
name|StringBuilder
name|html
parameter_list|,
name|Attributes
name|main
parameter_list|)
block|{
if|if
condition|(
name|main
operator|!=
literal|null
condition|)
block|{
name|String
name|t
init|=
name|main
operator|.
name|getValue
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|IMPLEMENTATION_TITLE
argument_list|)
decl_stmt|;
name|String
name|n
init|=
name|main
operator|.
name|getValue
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|IMPLEMENTATION_VENDOR
argument_list|)
decl_stmt|;
name|String
name|v
init|=
name|main
operator|.
name|getValue
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|IMPLEMENTATION_VERSION
argument_list|)
decl_stmt|;
name|String
name|u
init|=
name|main
operator|.
name|getValue
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|IMPLEMENTATION_URL
argument_list|)
decl_stmt|;
name|String
name|a
init|=
name|main
operator|.
name|getValue
argument_list|(
literal|"Gerrit-ApiVersion"
argument_list|)
decl_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|"<table class=\"plugin_info\">"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|html
operator|.
name|append
argument_list|(
literal|"<tr><th>Name</th><td>"
argument_list|)
operator|.
name|append
argument_list|(
name|t
argument_list|)
operator|.
name|append
argument_list|(
literal|"</td></tr>\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|html
operator|.
name|append
argument_list|(
literal|"<tr><th>Vendor</th><td>"
argument_list|)
operator|.
name|append
argument_list|(
name|n
argument_list|)
operator|.
name|append
argument_list|(
literal|"</td></tr>\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|html
operator|.
name|append
argument_list|(
literal|"<tr><th>Version</th><td>"
argument_list|)
operator|.
name|append
argument_list|(
name|v
argument_list|)
operator|.
name|append
argument_list|(
literal|"</td></tr>\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|u
argument_list|)
condition|)
block|{
name|html
operator|.
name|append
argument_list|(
literal|"<tr><th>URL</th><td>"
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"<a href=\"%s\">%s</a>"
argument_list|,
name|u
argument_list|,
name|u
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"</td></tr>\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|a
argument_list|)
condition|)
block|{
name|html
operator|.
name|append
argument_list|(
literal|"<tr><th>API Version</th><td>"
argument_list|)
operator|.
name|append
argument_list|(
name|a
argument_list|)
operator|.
name|append
argument_list|(
literal|"</td></tr>\n"
argument_list|)
expr_stmt|;
block|}
name|html
operator|.
name|append
argument_list|(
literal|"</table>\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|extractTitleFromMarkdown (PluginContentScanner scanner, PluginEntry entry)
specifier|private
specifier|static
name|String
name|extractTitleFromMarkdown
parameter_list|(
name|PluginContentScanner
name|scanner
parameter_list|,
name|PluginEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|charEnc
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|atts
init|=
name|entry
operator|.
name|getAttrs
argument_list|()
decl_stmt|;
if|if
condition|(
name|atts
operator|!=
literal|null
condition|)
block|{
name|charEnc
operator|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|atts
operator|.
name|get
argument_list|(
name|ATTR_CHARACTER_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|charEnc
operator|==
literal|null
condition|)
block|{
name|charEnc
operator|=
literal|"UTF-8"
expr_stmt|;
block|}
return|return
operator|new
name|MarkdownFormatter
argument_list|()
operator|.
name|extractTitleFromMarkdown
argument_list|(
name|readWholeEntry
argument_list|(
name|scanner
argument_list|,
name|entry
argument_list|)
argument_list|,
name|charEnc
argument_list|)
return|;
block|}
DECL|method|findSource ( PluginContentScanner scanner, String file)
specifier|private
specifier|static
name|Optional
argument_list|<
name|PluginEntry
argument_list|>
name|findSource
parameter_list|(
name|PluginContentScanner
name|scanner
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
literal|".html"
argument_list|)
condition|)
block|{
name|int
name|d
init|=
name|file
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
return|return
name|scanner
operator|.
name|getEntry
argument_list|(
name|file
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|d
argument_list|)
operator|+
literal|".md"
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
DECL|method|sendMarkdownAsHtml (PluginContentScanner scanner, PluginEntry entry, String pluginName, ResourceKey key, HttpServletResponse res)
specifier|private
name|void
name|sendMarkdownAsHtml
parameter_list|(
name|PluginContentScanner
name|scanner
parameter_list|,
name|PluginEntry
name|entry
parameter_list|,
name|String
name|pluginName
parameter_list|,
name|ResourceKey
name|key
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|rawmd
init|=
name|readWholeEntry
argument_list|(
name|scanner
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|String
name|encoding
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|atts
init|=
name|entry
operator|.
name|getAttrs
argument_list|()
decl_stmt|;
if|if
condition|(
name|atts
operator|!=
literal|null
condition|)
block|{
name|encoding
operator|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|atts
operator|.
name|get
argument_list|(
name|ATTR_CHARACTER_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|txtmd
init|=
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
name|encoding
operator|!=
literal|null
condition|?
name|encoding
else|:
literal|"UTF-8"
argument_list|)
argument_list|,
name|rawmd
argument_list|)
decl_stmt|;
name|long
name|time
init|=
name|entry
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|time
condition|)
block|{
name|res
operator|.
name|setDateHeader
argument_list|(
literal|"Last-Modified"
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
name|sendMarkdownAsHtml
argument_list|(
name|txtmd
argument_list|,
name|pluginName
argument_list|,
name|key
argument_list|,
name|res
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
DECL|method|sendResource (PluginContentScanner scanner, PluginEntry entry, ResourceKey key, HttpServletResponse res)
specifier|private
name|void
name|sendResource
parameter_list|(
name|PluginContentScanner
name|scanner
parameter_list|,
name|PluginEntry
name|entry
parameter_list|,
name|ResourceKey
name|key
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
name|Optional
argument_list|<
name|Long
argument_list|>
name|size
init|=
name|entry
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|.
name|isPresent
argument_list|()
operator|&&
name|size
operator|.
name|get
argument_list|()
operator|<=
name|SMALL_RESOURCE
condition|)
block|{
name|data
operator|=
name|readWholeEntry
argument_list|(
name|scanner
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
name|String
name|contentType
init|=
literal|null
decl_stmt|;
name|String
name|charEnc
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|atts
init|=
name|entry
operator|.
name|getAttrs
argument_list|()
decl_stmt|;
if|if
condition|(
name|atts
operator|!=
literal|null
condition|)
block|{
name|contentType
operator|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|atts
operator|.
name|get
argument_list|(
name|ATTR_CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|charEnc
operator|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|atts
operator|.
name|get
argument_list|(
name|ATTR_CHARACTER_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
name|contentType
operator|=
name|mimeUtil
operator|.
name|getMimeType
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|data
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"application/octet-stream"
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
operator|&&
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".js"
argument_list|)
condition|)
block|{
name|contentType
operator|=
literal|"application/javascript"
expr_stmt|;
block|}
block|}
name|long
name|time
init|=
name|entry
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|time
condition|)
block|{
name|res
operator|.
name|setDateHeader
argument_list|(
literal|"Last-Modified"
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|res
operator|.
name|setHeader
argument_list|(
literal|"Content-Length"
argument_list|,
name|size
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
if|if
condition|(
name|charEnc
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|setCharacterEncoding
argument_list|(
name|charEnc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|resourceCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|SmallResource
argument_list|(
name|data
argument_list|)
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
operator|.
name|setCharacterEncoding
argument_list|(
name|charEnc
argument_list|)
operator|.
name|setLastModified
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeToResponse
argument_list|(
name|res
argument_list|,
name|scanner
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendJsPlugin (Plugin plugin, ResourceKey key, HttpServletRequest req, HttpServletResponse res)
specifier|private
name|void
name|sendJsPlugin
parameter_list|(
name|Plugin
name|plugin
parameter_list|,
name|ResourceKey
name|key
parameter_list|,
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|pluginFile
init|=
name|plugin
operator|.
name|getSrcFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|getPathInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|getJsPluginPath
argument_list|(
name|plugin
argument_list|)
argument_list|)
operator|&&
name|pluginFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|res
operator|.
name|setHeader
argument_list|(
literal|"Content-Length"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|pluginFile
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContentType
argument_list|(
literal|"application/javascript"
argument_list|)
expr_stmt|;
name|writeToResponse
argument_list|(
name|res
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|pluginFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resourceCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Resource
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|Resource
operator|.
name|NOT_FOUND
operator|.
name|send
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getJsPluginPath (Plugin plugin)
specifier|private
specifier|static
name|String
name|getJsPluginPath
parameter_list|(
name|Plugin
name|plugin
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s/static/%s"
argument_list|,
name|plugin
operator|.
name|getName
argument_list|()
argument_list|,
name|plugin
operator|.
name|getSrcFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|writeToResponse (HttpServletResponse res, InputStream in)
specifier|private
name|void
name|writeToResponse
parameter_list|(
name|HttpServletResponse
name|res
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|OutputStream
name|out
init|=
name|res
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|tmp
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|in
operator|.
name|read
argument_list|(
name|tmp
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|readWholeEntry (PluginContentScanner scanner, PluginEntry entry)
specifier|private
specifier|static
name|byte
index|[]
name|readWholeEntry
parameter_list|(
name|PluginContentScanner
name|scanner
parameter_list|,
name|PluginEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|entry
operator|.
name|getSize
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|intValue
argument_list|()
index|]
decl_stmt|;
name|InputStream
name|in
init|=
name|scanner
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
decl_stmt|;
try|try
block|{
name|IO
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
DECL|class|PluginHolder
specifier|private
specifier|static
class|class
name|PluginHolder
block|{
DECL|field|plugin
specifier|final
name|Plugin
name|plugin
decl_stmt|;
DECL|field|filter
specifier|final
name|GuiceFilter
name|filter
decl_stmt|;
DECL|field|staticPrefix
specifier|final
name|String
name|staticPrefix
decl_stmt|;
DECL|field|docPrefix
specifier|final
name|String
name|docPrefix
decl_stmt|;
DECL|method|PluginHolder (Plugin plugin, GuiceFilter filter)
name|PluginHolder
parameter_list|(
name|Plugin
name|plugin
parameter_list|,
name|GuiceFilter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|plugin
operator|=
name|plugin
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|staticPrefix
operator|=
name|getPrefix
argument_list|(
name|plugin
argument_list|,
literal|"Gerrit-HttpStaticPrefix"
argument_list|,
literal|"static/"
argument_list|)
expr_stmt|;
name|this
operator|.
name|docPrefix
operator|=
name|getPrefix
argument_list|(
name|plugin
argument_list|,
literal|"Gerrit-HttpDocumentationPrefix"
argument_list|,
literal|"Documentation/"
argument_list|)
expr_stmt|;
block|}
DECL|method|getPrefix (Plugin plugin, String attr, String def)
specifier|private
specifier|static
name|String
name|getPrefix
parameter_list|(
name|Plugin
name|plugin
parameter_list|,
name|String
name|attr
parameter_list|,
name|String
name|def
parameter_list|)
block|{
name|File
name|srcFile
init|=
name|plugin
operator|.
name|getSrcFile
argument_list|()
decl_stmt|;
name|PluginContentScanner
name|scanner
init|=
name|plugin
operator|.
name|getContentScanner
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcFile
operator|==
literal|null
operator|||
name|scanner
operator|==
name|PluginContentScanner
operator|.
name|EMPTY
condition|)
block|{
return|return
name|def
return|;
block|}
try|try
block|{
name|String
name|prefix
init|=
name|scanner
operator|.
name|getManifest
argument_list|()
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|getValue
argument_list|(
name|attr
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
return|return
name|CharMatcher
operator|.
name|is
argument_list|(
literal|'/'
argument_list|)
operator|.
name|trimFrom
argument_list|(
name|prefix
argument_list|)
operator|+
literal|"/"
return|;
block|}
else|else
block|{
return|return
name|def
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error getting %s for plugin %s, using default"
argument_list|,
name|attr
argument_list|,
name|plugin
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

