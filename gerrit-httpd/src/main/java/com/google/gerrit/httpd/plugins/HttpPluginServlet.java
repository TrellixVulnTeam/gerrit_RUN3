begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd.plugins
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|MimeUtilFileTypeRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|RegistrationHandle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|ReloadPluginListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|StartPluginListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|medsea
operator|.
name|mimeutil
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|IO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|HttpPluginServlet
class|class
name|HttpPluginServlet
extends|extends
name|HttpServlet
implements|implements
name|StartPluginListener
implements|,
name|ReloadPluginListener
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HttpPluginServlet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mimeUtil
specifier|private
specifier|final
name|MimeUtilFileTypeRegistry
name|mimeUtil
decl_stmt|;
DECL|field|pending
specifier|private
name|List
argument_list|<
name|Plugin
argument_list|>
name|pending
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|field|base
specifier|private
name|String
name|base
decl_stmt|;
DECL|field|plugins
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|PluginHolder
argument_list|>
name|plugins
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|HttpPluginServlet (MimeUtilFileTypeRegistry mimeUtil)
name|HttpPluginServlet
parameter_list|(
name|MimeUtilFileTypeRegistry
name|mimeUtil
parameter_list|)
block|{
name|this
operator|.
name|mimeUtil
operator|=
name|mimeUtil
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (ServletConfig config)
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|config
operator|.
name|getServletContext
argument_list|()
operator|.
name|getContextPath
argument_list|()
decl_stmt|;
name|base
operator|=
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|path
argument_list|)
operator|+
literal|"/plugins/"
expr_stmt|;
for|for
control|(
name|Plugin
name|plugin
range|:
name|pending
control|)
block|{
name|install
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
block|}
name|pending
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onStartPlugin (Plugin plugin)
specifier|public
specifier|synchronized
name|void
name|onStartPlugin
parameter_list|(
name|Plugin
name|plugin
parameter_list|)
block|{
if|if
condition|(
name|pending
operator|!=
literal|null
condition|)
block|{
name|pending
operator|.
name|add
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|install
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onReloadPlugin (Plugin oldPlugin, Plugin newPlugin)
specifier|public
name|void
name|onReloadPlugin
parameter_list|(
name|Plugin
name|oldPlugin
parameter_list|,
name|Plugin
name|newPlugin
parameter_list|)
block|{
name|install
argument_list|(
name|newPlugin
argument_list|)
expr_stmt|;
block|}
DECL|method|install (Plugin plugin)
specifier|private
name|void
name|install
parameter_list|(
name|Plugin
name|plugin
parameter_list|)
block|{
name|GuiceFilter
name|filter
init|=
name|load
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|plugin
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|PluginHolder
name|holder
init|=
operator|new
name|PluginHolder
argument_list|(
name|plugin
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|plugin
operator|.
name|add
argument_list|(
operator|new
name|RegistrationHandle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|plugins
operator|.
name|remove
argument_list|(
name|name
argument_list|,
name|holder
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|plugins
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|holder
argument_list|)
expr_stmt|;
block|}
DECL|method|load (Plugin plugin)
specifier|private
name|GuiceFilter
name|load
parameter_list|(
name|Plugin
name|plugin
parameter_list|)
block|{
if|if
condition|(
name|plugin
operator|.
name|getHttpInjector
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|name
init|=
name|plugin
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|GuiceFilter
name|filter
decl_stmt|;
try|try
block|{
name|filter
operator|=
name|plugin
operator|.
name|getHttpInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|GuiceFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Plugin %s cannot load GuiceFilter"
argument_list|,
name|name
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|WrappedContext
name|ctx
init|=
operator|new
name|WrappedContext
argument_list|(
name|plugin
argument_list|,
name|base
operator|+
name|name
argument_list|)
decl_stmt|;
name|filter
operator|.
name|init
argument_list|(
operator|new
name|WrappedFilterConfig
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Plugin %s failed to initialize HTTP"
argument_list|,
name|name
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|plugin
operator|.
name|add
argument_list|(
operator|new
name|RegistrationHandle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|service (HttpServletRequest req, HttpServletResponse res)
specifier|public
name|void
name|service
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|String
name|name
init|=
name|extractName
argument_list|(
name|req
argument_list|)
decl_stmt|;
specifier|final
name|PluginHolder
name|holder
init|=
name|plugins
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|holder
operator|==
literal|null
condition|)
block|{
name|noCache
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|res
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
return|return;
block|}
name|WrappedRequest
name|wr
init|=
operator|new
name|WrappedRequest
argument_list|(
name|req
argument_list|,
name|base
operator|+
name|name
argument_list|)
decl_stmt|;
name|FilterChain
name|chain
init|=
operator|new
name|FilterChain
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|req
parameter_list|,
name|ServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|onDefault
argument_list|(
name|holder
argument_list|,
operator|(
name|HttpServletRequest
operator|)
name|req
argument_list|,
operator|(
name|HttpServletResponse
operator|)
name|res
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|holder
operator|.
name|filter
operator|!=
literal|null
condition|)
block|{
name|holder
operator|.
name|filter
operator|.
name|doFilter
argument_list|(
name|wr
argument_list|,
name|res
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|chain
operator|.
name|doFilter
argument_list|(
name|wr
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onDefault (PluginHolder holder, HttpServletRequest req, HttpServletResponse res)
specifier|private
name|void
name|onDefault
parameter_list|(
name|PluginHolder
name|holder
parameter_list|,
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|uri
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
name|String
name|ctx
init|=
name|req
operator|.
name|getContextPath
argument_list|()
decl_stmt|;
name|String
name|file
init|=
name|uri
operator|.
name|substring
argument_list|(
name|ctx
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
literal|"Documentation/"
argument_list|)
operator|||
name|file
operator|.
name|startsWith
argument_list|(
literal|"static/"
argument_list|)
condition|)
block|{
name|JarFile
name|jar
init|=
name|holder
operator|.
name|plugin
operator|.
name|getJarFile
argument_list|()
decl_stmt|;
name|JarEntry
name|entry
init|=
name|jar
operator|.
name|getJarEntry
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sendResource
argument_list|(
name|jar
argument_list|,
name|entry
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|noCache
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|res
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
block|}
DECL|method|sendResource (JarFile jar, JarEntry entry, HttpServletResponse res)
specifier|private
name|void
name|sendResource
parameter_list|(
name|JarFile
name|jar
parameter_list|,
name|JarEntry
name|entry
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getSize
argument_list|()
operator|<=
literal|128
operator|*
literal|1024
condition|)
block|{
name|data
operator|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|entry
operator|.
name|getSize
argument_list|()
index|]
expr_stmt|;
name|InputStream
name|in
init|=
name|jar
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
decl_stmt|;
try|try
block|{
name|IO
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|contentType
init|=
literal|null
decl_stmt|;
name|Attributes
name|atts
init|=
name|entry
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|atts
operator|!=
literal|null
condition|)
block|{
name|contentType
operator|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"Content-Type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
name|MimeType
name|type
init|=
name|mimeUtil
operator|.
name|getMimeType
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|contentType
operator|=
name|type
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|long
name|time
init|=
name|entry
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|time
condition|)
block|{
name|res
operator|.
name|setDateHeader
argument_list|(
literal|"Last-Modified"
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
name|res
operator|.
name|setHeader
argument_list|(
literal|"Content-Length"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|InputStream
name|in
init|=
name|jar
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
decl_stmt|;
try|try
block|{
name|OutputStream
name|out
init|=
name|res
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|tmp
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|in
operator|.
name|read
argument_list|(
name|tmp
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|extractName (HttpServletRequest req)
specifier|private
specifier|static
name|String
name|extractName
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|String
name|path
init|=
name|req
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|path
argument_list|)
operator|||
literal|"/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
name|int
name|s
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
literal|0
operator|<=
name|s
condition|?
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|s
argument_list|)
else|:
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|method|noCache (HttpServletResponse res)
specifier|private
specifier|static
name|void
name|noCache
parameter_list|(
name|HttpServletResponse
name|res
parameter_list|)
block|{
name|res
operator|.
name|setHeader
argument_list|(
literal|"Expires"
argument_list|,
literal|"Fri, 01 Jan 1980 00:00:00 GMT"
argument_list|)
expr_stmt|;
name|res
operator|.
name|setHeader
argument_list|(
literal|"Pragma"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
name|res
operator|.
name|setHeader
argument_list|(
literal|"Cache-Control"
argument_list|,
literal|"no-cache, must-revalidate"
argument_list|)
expr_stmt|;
name|res
operator|.
name|setHeader
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"attachment"
argument_list|)
expr_stmt|;
block|}
DECL|class|PluginHolder
specifier|private
specifier|static
class|class
name|PluginHolder
block|{
DECL|field|plugin
specifier|final
name|Plugin
name|plugin
decl_stmt|;
DECL|field|filter
specifier|final
name|GuiceFilter
name|filter
decl_stmt|;
DECL|method|PluginHolder (Plugin plugin, GuiceFilter filter)
name|PluginHolder
parameter_list|(
name|Plugin
name|plugin
parameter_list|,
name|GuiceFilter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|plugin
operator|=
name|plugin
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
block|}
DECL|class|WrappedRequest
specifier|private
specifier|static
class|class
name|WrappedRequest
extends|extends
name|HttpServletRequestWrapper
block|{
DECL|field|contextPath
specifier|private
specifier|final
name|String
name|contextPath
decl_stmt|;
DECL|method|WrappedRequest (HttpServletRequest req, String contextPath)
name|WrappedRequest
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|String
name|contextPath
parameter_list|)
block|{
name|super
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|this
operator|.
name|contextPath
operator|=
name|contextPath
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getContextPath ()
specifier|public
name|String
name|getContextPath
parameter_list|()
block|{
return|return
name|contextPath
return|;
block|}
annotation|@
name|Override
DECL|method|getServletPath ()
specifier|public
name|String
name|getServletPath
parameter_list|()
block|{
return|return
operator|(
operator|(
name|HttpServletRequest
operator|)
name|getRequest
argument_list|()
operator|)
operator|.
name|getRequestURI
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

