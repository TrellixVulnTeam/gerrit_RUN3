begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd.raw
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|raw
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|Escaper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|html
operator|.
name|HtmlEscapers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|server
operator|.
name|CacheHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|RawParseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_class
DECL|class|BuckUtils
class|class
name|BuckUtils
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BuckUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|build (Path root, Path gen, String target)
specifier|static
name|void
name|build
parameter_list|(
name|Path
name|root
parameter_list|,
name|Path
name|gen
parameter_list|,
name|String
name|target
parameter_list|)
throws|throws
name|IOException
throws|,
name|BuildFailureException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"buck build "
operator|+
name|target
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
name|loadBuckProperties
argument_list|(
name|gen
argument_list|)
decl_stmt|;
name|String
name|buck
init|=
name|firstNonNull
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"buck"
argument_list|)
argument_list|,
literal|"buck"
argument_list|)
decl_stmt|;
name|ProcessBuilder
name|proc
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|buck
argument_list|,
literal|"build"
argument_list|,
name|target
argument_list|)
operator|.
name|directory
argument_list|(
name|root
operator|.
name|toFile
argument_list|()
argument_list|)
operator|.
name|redirectErrorStream
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"PATH"
argument_list|)
condition|)
block|{
name|proc
operator|.
name|environment
argument_list|()
operator|.
name|put
argument_list|(
literal|"PATH"
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"PATH"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|start
init|=
name|TimeUtil
operator|.
name|nowMs
argument_list|()
decl_stmt|;
name|Process
name|rebuild
init|=
name|proc
operator|.
name|start
argument_list|()
decl_stmt|;
name|byte
index|[]
name|out
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
name|rebuild
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|out
operator|=
name|ByteStreams
operator|.
name|toByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rebuild
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|int
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|rebuild
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"interrupted waiting for "
operator|+
name|buck
argument_list|)
throw|;
block|}
if|if
condition|(
name|status
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|BuildFailureException
argument_list|(
name|out
argument_list|)
throw|;
block|}
name|long
name|time
init|=
name|TimeUtil
operator|.
name|nowMs
argument_list|()
operator|-
name|start
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"UPDATED    %s in %.3fs"
argument_list|,
name|target
argument_list|,
name|time
operator|/
literal|1000.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|loadBuckProperties (Path gen)
specifier|private
specifier|static
name|Properties
name|loadBuckProperties
parameter_list|(
name|Path
name|gen
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
name|gen
operator|.
name|resolve
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"tools/buck/buck.properties"
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|p
argument_list|)
init|)
block|{
name|properties
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFileException
name|e
parameter_list|)
block|{
comment|// Ignore; will be run from PATH, with a descriptive error if it fails.
block|}
return|return
name|properties
return|;
block|}
DECL|method|displayFailure (String rule, byte[] why, HttpServletResponse res)
specifier|static
name|void
name|displayFailure
parameter_list|(
name|String
name|rule
parameter_list|,
name|byte
index|[]
name|why
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|res
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|res
operator|.
name|setCharacterEncoding
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|CacheHeaders
operator|.
name|setNotCacheable
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|Escaper
name|html
init|=
name|HtmlEscapers
operator|.
name|htmlEscaper
argument_list|()
decl_stmt|;
try|try
init|(
name|PrintWriter
name|w
init|=
name|res
operator|.
name|getWriter
argument_list|()
init|)
block|{
name|w
operator|.
name|write
argument_list|(
literal|"<html><title>BUILD FAILED</title><body>"
argument_list|)
expr_stmt|;
name|w
operator|.
name|format
argument_list|(
literal|"<h1>%s FAILED</h1>"
argument_list|,
name|html
operator|.
name|escape
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"<pre>"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
name|html
operator|.
name|escape
argument_list|(
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|why
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"</pre>"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"</body></html>"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BuildFailureException
specifier|static
class|class
name|BuildFailureException
extends|extends
name|Exception
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|why
specifier|final
name|byte
index|[]
name|why
decl_stmt|;
DECL|method|BuildFailureException (byte[] why)
name|BuildFailureException
parameter_list|(
name|byte
index|[]
name|why
parameter_list|)
block|{
name|this
operator|.
name|why
operator|=
name|why
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

