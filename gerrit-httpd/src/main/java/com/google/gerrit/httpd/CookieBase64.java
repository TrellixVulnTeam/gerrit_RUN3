begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This code is based heavily on Robert Harder's<rob@iharder.net>
end_comment

begin_comment
comment|// public domain Base64 class, version 2.1.
end_comment

begin_comment
comment|//
end_comment

begin_package
DECL|package|com.google.gerrit.httpd
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
package|;
end_package

begin_comment
comment|/** Base64 encoder which uses a language safe within HTTP cookies. */
end_comment

begin_class
DECL|class|CookieBase64
class|class
name|CookieBase64
block|{
DECL|field|enc
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|enc
decl_stmt|;
static|static
block|{
name|enc
operator|=
operator|new
name|char
index|[
literal|64
index|]
expr_stmt|;
name|int
name|o
init|=
literal|0
decl_stmt|;
name|o
operator|=
name|fill
argument_list|(
name|enc
argument_list|,
name|o
argument_list|,
literal|'a'
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
name|o
operator|=
name|fill
argument_list|(
name|enc
argument_list|,
name|o
argument_list|,
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
expr_stmt|;
name|o
operator|=
name|fill
argument_list|(
name|enc
argument_list|,
name|o
argument_list|,
literal|'0'
argument_list|,
literal|'9'
argument_list|)
expr_stmt|;
name|enc
index|[
name|o
operator|++
index|]
operator|=
literal|'-'
expr_stmt|;
name|enc
index|[
name|o
operator|++
index|]
operator|=
literal|'.'
expr_stmt|;
block|}
DECL|method|fill (final char[] out, int o, final char f, final int l)
specifier|private
specifier|static
name|int
name|fill
parameter_list|(
specifier|final
name|char
index|[]
name|out
parameter_list|,
name|int
name|o
parameter_list|,
specifier|final
name|char
name|f
parameter_list|,
specifier|final
name|int
name|l
parameter_list|)
block|{
for|for
control|(
name|char
name|c
init|=
name|f
init|;
name|c
operator|<=
name|l
condition|;
name|c
operator|++
control|)
name|out
index|[
name|o
operator|++
index|]
operator|=
name|c
expr_stmt|;
return|return
name|o
return|;
block|}
DECL|method|encode (final byte[] in)
specifier|static
name|String
name|encode
parameter_list|(
specifier|final
name|byte
index|[]
name|in
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|(
name|in
operator|.
name|length
operator|*
literal|4
operator|/
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len2
init|=
name|in
operator|.
name|length
operator|-
literal|2
decl_stmt|;
name|int
name|d
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|d
operator|<
name|len2
condition|;
name|d
operator|+=
literal|3
control|)
block|{
name|encode3to4
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|d
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|<
name|in
operator|.
name|length
condition|)
block|{
name|encode3to4
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|d
argument_list|,
name|in
operator|.
name|length
operator|-
name|d
argument_list|)
expr_stmt|;
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|encode3to4 (final StringBuilder out, final byte[] in, final int inOffset, final int numSigBytes)
specifier|private
specifier|static
name|void
name|encode3to4
parameter_list|(
specifier|final
name|StringBuilder
name|out
parameter_list|,
specifier|final
name|byte
index|[]
name|in
parameter_list|,
specifier|final
name|int
name|inOffset
parameter_list|,
specifier|final
name|int
name|numSigBytes
parameter_list|)
block|{
comment|//           1         2         3
comment|// 01234567890123456789012345678901 Bit position
comment|// --------000000001111111122222222 Array position from threeBytes
comment|// --------|    ||    ||    ||    | Six bit groups to index ALPHABET
comment|//>>18>>12>> 6>> 0  Right shift necessary
comment|//                0x3f  0x3f  0x3f  Additional AND
comment|// Create buffer with zero-padding if there are only one or two
comment|// significant bytes passed in the array.
comment|// We have to shift left 24 in order to flush out the 1's that appear
comment|// when Java treats a value as negative that is cast from a byte to an int.
comment|//
name|int
name|inBuff
init|=
operator|(
name|numSigBytes
operator|>
literal|0
condition|?
operator|(
operator|(
name|in
index|[
name|inOffset
index|]
operator|<<
literal|24
operator|)
operator|>>>
literal|8
operator|)
else|:
literal|0
operator|)
operator||
operator|(
name|numSigBytes
operator|>
literal|1
condition|?
operator|(
operator|(
name|in
index|[
name|inOffset
operator|+
literal|1
index|]
operator|<<
literal|24
operator|)
operator|>>>
literal|16
operator|)
else|:
literal|0
operator|)
operator||
operator|(
name|numSigBytes
operator|>
literal|2
condition|?
operator|(
operator|(
name|in
index|[
name|inOffset
operator|+
literal|2
index|]
operator|<<
literal|24
operator|)
operator|>>>
literal|24
operator|)
else|:
literal|0
operator|)
decl_stmt|;
switch|switch
condition|(
name|numSigBytes
condition|)
block|{
case|case
literal|3
case|:
name|out
operator|.
name|append
argument_list|(
name|enc
index|[
operator|(
name|inBuff
operator|>>>
literal|18
operator|)
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|enc
index|[
operator|(
name|inBuff
operator|>>>
literal|12
operator|)
operator|&
literal|0x3f
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|enc
index|[
operator|(
name|inBuff
operator|>>>
literal|6
operator|)
operator|&
literal|0x3f
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|enc
index|[
operator|(
name|inBuff
operator|)
operator|&
literal|0x3f
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|out
operator|.
name|append
argument_list|(
name|enc
index|[
operator|(
name|inBuff
operator|>>>
literal|18
operator|)
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|enc
index|[
operator|(
name|inBuff
operator|>>>
literal|12
operator|)
operator|&
literal|0x3f
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|enc
index|[
operator|(
name|inBuff
operator|>>>
literal|6
operator|)
operator|&
literal|0x3f
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|out
operator|.
name|append
argument_list|(
name|enc
index|[
operator|(
name|inBuff
operator|>>>
literal|18
operator|)
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|enc
index|[
operator|(
name|inBuff
operator|>>>
literal|12
operator|)
operator|&
literal|0x3f
index|]
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
DECL|method|CookieBase64 ()
specifier|private
name|CookieBase64
parameter_list|()
block|{   }
block|}
end_class

end_unit

