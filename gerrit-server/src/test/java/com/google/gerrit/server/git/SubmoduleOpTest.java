begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|capture
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|ChangeHooks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|SubmoduleSubscription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|SubmoduleSubscriptionAccess
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|KeyUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|ListResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|StandardKeyEncoder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|Capture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|Git
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|LocalDiskRepositoryTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AnyObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|FileMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_class
DECL|class|SubmoduleOpTest
specifier|public
class|class
name|SubmoduleOpTest
extends|extends
name|LocalDiskRepositoryTestCase
block|{
static|static
block|{
name|KeyUtil
operator|.
name|setEncoderImpl
argument_list|(
operator|new
name|StandardKeyEncoder
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|field|newLine
specifier|private
specifier|static
specifier|final
name|String
name|newLine
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|mockMaker
specifier|private
name|IMocksControl
name|mockMaker
decl_stmt|;
DECL|field|schemaFactory
specifier|private
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
decl_stmt|;
DECL|field|subscriptions
specifier|private
name|SubmoduleSubscriptionAccess
name|subscriptions
decl_stmt|;
DECL|field|schema
specifier|private
name|ReviewDb
name|schema
decl_stmt|;
DECL|field|urlProvider
specifier|private
name|Provider
argument_list|<
name|String
argument_list|>
name|urlProvider
decl_stmt|;
DECL|field|repoManager
specifier|private
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|gitRefUpdated
specifier|private
name|GitReferenceUpdated
name|gitRefUpdated
decl_stmt|;
DECL|field|changeHooks
specifier|private
name|ChangeHooks
name|changeHooks
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|mockMaker
operator|=
name|EasyMock
operator|.
name|createStrictControl
argument_list|()
expr_stmt|;
name|schemaFactory
operator|=
name|mockMaker
operator|.
name|createMock
argument_list|(
name|SchemaFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|schema
operator|=
name|mockMaker
operator|.
name|createMock
argument_list|(
name|ReviewDb
operator|.
name|class
argument_list|)
expr_stmt|;
name|subscriptions
operator|=
name|mockMaker
operator|.
name|createMock
argument_list|(
name|SubmoduleSubscriptionAccess
operator|.
name|class
argument_list|)
expr_stmt|;
name|urlProvider
operator|=
name|mockMaker
operator|.
name|createMock
argument_list|(
name|Provider
operator|.
name|class
argument_list|)
expr_stmt|;
name|repoManager
operator|=
name|mockMaker
operator|.
name|createMock
argument_list|(
name|GitRepositoryManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|gitRefUpdated
operator|=
name|mockMaker
operator|.
name|createMock
argument_list|(
name|GitReferenceUpdated
operator|.
name|class
argument_list|)
expr_stmt|;
name|changeHooks
operator|=
name|mockMaker
operator|.
name|createMock
argument_list|(
name|ChangeHooks
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|doReplay ()
specifier|private
name|void
name|doReplay
parameter_list|()
block|{
name|mockMaker
operator|.
name|replay
argument_list|()
expr_stmt|;
block|}
DECL|method|doVerify ()
specifier|private
name|void
name|doVerify
parameter_list|()
block|{
name|mockMaker
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
comment|/**    * It tests Submodule.update in the scenario a merged commit is an empty one    * (it does not have a .gitmodules file) and the project the commit was merged    * is not a submodule of other project.    *    * @throws Exception If an exception occurs.    */
annotation|@
name|Test
DECL|method|testEmptyCommit ()
specifier|public
name|void
name|testEmptyCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|expect
argument_list|(
name|schemaFactory
operator|.
name|open
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|schema
argument_list|)
expr_stmt|;
specifier|final
name|Repository
name|realDb
init|=
name|createWorkRepository
argument_list|()
decl_stmt|;
specifier|final
name|Git
name|git
init|=
operator|new
name|Git
argument_list|(
name|realDb
argument_list|)
decl_stmt|;
specifier|final
name|RevCommit
name|mergeTip
init|=
name|git
operator|.
name|commit
argument_list|()
operator|.
name|setMessage
argument_list|(
literal|"test"
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
specifier|final
name|Branch
operator|.
name|NameKey
name|branchNameKey
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"test-project"
argument_list|)
argument_list|,
literal|"test-branch"
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|urlProvider
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"http://localhost:8080"
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|schema
operator|.
name|submoduleSubscriptions
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subscriptions
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|emptySubscriptions
init|=
operator|new
name|ListResultSet
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|subscriptions
operator|.
name|bySubmodule
argument_list|(
name|branchNameKey
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|emptySubscriptions
argument_list|)
expr_stmt|;
name|schema
operator|.
name|close
argument_list|()
expr_stmt|;
name|doReplay
argument_list|()
expr_stmt|;
specifier|final
name|SubmoduleOp
name|submoduleOp
init|=
operator|new
name|SubmoduleOp
argument_list|(
name|branchNameKey
argument_list|,
name|mergeTip
argument_list|,
operator|new
name|RevWalk
argument_list|(
name|realDb
argument_list|)
argument_list|,
name|urlProvider
argument_list|,
name|schemaFactory
argument_list|,
name|realDb
argument_list|,
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Change
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|submoduleOp
operator|.
name|update
argument_list|()
expr_stmt|;
name|doVerify
argument_list|()
expr_stmt|;
block|}
comment|/**    * It tests SubmoduleOp.update in a scenario considering:    *<ul>    *<li>no subscriptions existing to destination project</li>    *<li>a commit is merged to "dest-project"</li>    *<li>commit contains .gitmodules file with content</li>    *</ul>    *    *<pre>    *     [submodule "source"]    *       path = source    *       url = http://localhost:8080/source    *       branch = .    *</pre>    *<p>    * It expects to insert a new row in subscriptions table. The row inserted    * specifies:    *<ul>    *<li>target "dest-project" on branch "refs/heads/master"</li>    *<li>source "a" on branch "refs/heads/master"</li>    *<li>path "a"</li>    *</ul>    *</p>    *    * @throws Exception If an exception occurs.    */
annotation|@
name|Test
DECL|method|testNewSubscriptionToDotBranchValue ()
specifier|public
name|void
name|testNewSubscriptionToDotBranchValue
parameter_list|()
throws|throws
name|Exception
block|{
name|doOneSubscriptionInsert
argument_list|(
name|buildSubmoduleSection
argument_list|(
literal|"source"
argument_list|,
literal|"source"
argument_list|,
literal|"http://localhost:8080/source"
argument_list|,
literal|"."
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|doVerify
argument_list|()
expr_stmt|;
block|}
comment|/**    * It tests SubmoduleOp.update in a scenario considering:    *<ul>    *<li>no subscriptions existing to destination project</li>    *<li>a commit is merged to "dest-project"</li>    *<li>commit contains .gitmodules file with content</li>    *</ul>    *    *<pre>    *     [submodule "source"]    *       path = source    *       url = http://localhost:8080/source    *       branch = refs/heads/master    *</pre>    *    *<p>    * It expects to insert a new row in subscriptions table. The row inserted    * specifies:    *<ul>    *<li>target "dest-project" on branch "refs/heads/master"</li>    *<li>source "source" on branch "refs/heads/master"</li>    *<li>path "source"</li>    *</ul>    *</p>    *    * @throws Exception If an exception occurs.    */
annotation|@
name|Test
DECL|method|testNewSubscriptionToSameBranch ()
specifier|public
name|void
name|testNewSubscriptionToSameBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|doOneSubscriptionInsert
argument_list|(
name|buildSubmoduleSection
argument_list|(
literal|"source"
argument_list|,
literal|"source"
argument_list|,
literal|"http://localhost:8080/source"
argument_list|,
literal|"refs/heads/master"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|doVerify
argument_list|()
expr_stmt|;
block|}
comment|/**    * It tests SubmoduleOp.update in a scenario considering:    *<ul>    *<li>no subscriptions existing to destination project</li>    *<li>a commit is merged to "dest-project"</li>    *<li>commit contains .gitmodules file with content</li>    *</ul>    *    *<pre>    *     [submodule "source"]    *       path = source    *       url = http://localhost:8080/source    *       branch = refs/heads/test    *</pre>    *<p>    * It expects to insert a new row in subscriptions table. The row inserted    * specifies:    *<ul>    *<li>target "dest-project" on branch "refs/heads/master"</li>    *<li>source "source" on branch "refs/heads/test"</li>    *<li>path "source"</li>    *</ul>    *</p>    *    * @throws Exception If an exception occurs.    */
annotation|@
name|Test
DECL|method|testNewSubscriptionToDifferentBranch ()
specifier|public
name|void
name|testNewSubscriptionToDifferentBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|doOneSubscriptionInsert
argument_list|(
name|buildSubmoduleSection
argument_list|(
literal|"source"
argument_list|,
literal|"source"
argument_list|,
literal|"http://localhost:8080/source"
argument_list|,
literal|"refs/heads/test"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"refs/heads/test"
argument_list|)
expr_stmt|;
name|doVerify
argument_list|()
expr_stmt|;
block|}
comment|/**    * It tests SubmoduleOp.update in a scenario considering:    *<ul>    *<li>no subscriptions existing to destination project</li>    *<li>a commit is merged to "dest-project" in "refs/heads/master" branch</li>    *<li>commit contains .gitmodules file with content</li>    *</ul>    *    *<pre>    *     [submodule "source-a"]    *       path = source-a    *       url = http://localhost:8080/source-a    *       branch = .    *    *     [submodule "source-b"]    *       path = source-b    *       url = http://localhost:8080/source-b    *       branch = .    *</pre>    *<p>    * It expects to insert new rows in subscriptions table. The rows inserted    * specifies:    *<ul>    *<li>target "dest-project" on branch "refs/heads/master"</li>    *<li>source "source-a" on branch "refs/heads/master" with "source-a" path</li>    *<li>source "source-b" on branch "refs/heads/master" with "source-b" path</li>    *</ul>    *</p>    *    * @throws Exception If an exception occurs.    */
annotation|@
name|Test
DECL|method|testNewSubscriptionsWithDotBranchValue ()
specifier|public
name|void
name|testNewSubscriptionsWithDotBranchValue
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringBuilder
name|sb
init|=
name|buildSubmoduleSection
argument_list|(
literal|"source-a"
argument_list|,
literal|"source-a"
argument_list|,
literal|"http://localhost:8080/source-a"
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|buildSubmoduleSection
argument_list|(
literal|"source-b"
argument_list|,
literal|"source-b"
argument_list|,
literal|"http://localhost:8080/source-b"
argument_list|,
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Branch
operator|.
name|NameKey
name|mergedBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"dest-project"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|subscriptionsToInsert
init|=
operator|new
name|ArrayList
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|()
decl_stmt|;
name|subscriptionsToInsert
operator|.
name|add
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|mergedBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"source-a"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|,
literal|"source-a"
argument_list|)
argument_list|)
expr_stmt|;
name|subscriptionsToInsert
operator|.
name|add
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|mergedBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"source-b"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|,
literal|"source-b"
argument_list|)
argument_list|)
expr_stmt|;
name|doOnlySubscriptionInserts
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|mergedBranch
argument_list|,
name|subscriptionsToInsert
argument_list|)
expr_stmt|;
name|doVerify
argument_list|()
expr_stmt|;
block|}
comment|/**    * It tests SubmoduleOp.update in a scenario considering:    *<ul>    *<li>no subscriptions existing to destination project</li>    *<li>a commit is merged to "dest-project" in "refs/heads/master" branch</li>    *<li>commit contains .gitmodules file with content</li>    *</ul>    *    *<pre>    *     [submodule "source-a"]    *       path = source-a    *       url = http://localhost:8080/source-a    *       branch = .    *    *     [submodule "source-b"]    *       path = source-b    *       url = http://localhost:8080/source-b    *       branch = refs/heads/master    *</pre>    *<p>    * It expects to insert new rows in subscriptions table. The rows inserted    * specifies:    *<ul>    *<li>target "dest-project" on branch "refs/heads/master"</li>    *<li>source "source-a" on branch "refs/heads/master" with "source-a" path</li>    *<li>source "source-b" on branch "refs/heads/master" with "source-b" path</li>    *</ul>    *</p>    *    * @throws Exception If an exception occurs.    */
annotation|@
name|Test
DECL|method|testNewSubscriptionsDotAndSameBranchValues ()
specifier|public
name|void
name|testNewSubscriptionsDotAndSameBranchValues
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringBuilder
name|sb
init|=
name|buildSubmoduleSection
argument_list|(
literal|"source-a"
argument_list|,
literal|"source-a"
argument_list|,
literal|"http://localhost:8080/source-a"
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|buildSubmoduleSection
argument_list|(
literal|"source-b"
argument_list|,
literal|"source-b"
argument_list|,
literal|"http://localhost:8080/source-b"
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Branch
operator|.
name|NameKey
name|mergedBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"dest-project"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|subscriptionsToInsert
init|=
operator|new
name|ArrayList
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|()
decl_stmt|;
name|subscriptionsToInsert
operator|.
name|add
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|mergedBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"source-a"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|,
literal|"source-a"
argument_list|)
argument_list|)
expr_stmt|;
name|subscriptionsToInsert
operator|.
name|add
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|mergedBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"source-b"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|,
literal|"source-b"
argument_list|)
argument_list|)
expr_stmt|;
name|doOnlySubscriptionInserts
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|mergedBranch
argument_list|,
name|subscriptionsToInsert
argument_list|)
expr_stmt|;
name|doVerify
argument_list|()
expr_stmt|;
block|}
comment|/**    * It tests SubmoduleOp.update in a scenario considering:    *<ul>    *<li>no subscriptions existing to destination project</li>    *<li>a commit is merged to "dest-project" in "refs/heads/master" branch</li>    *<li>commit contains .gitmodules file with content</li>    *    *<pre>    *     [submodule "source-a"]    *       path = source-a    *       url = http://localhost:8080/source-a    *       branch = refs/heads/test-a    *    *     [submodule "source-b"]    *       path = source-b    *       url = http://localhost:8080/source-b    *       branch = refs/heads/test-b    *</pre>    *    *<p>    * It expects to insert new rows in subscriptions table. The rows inserted    * specifies:    *<ul>    *<li>target "dest-project" on branch "refs/heads/master"</li>    *<li>source "source-a" on branch "refs/heads/test-a" with "source-a" path</li>    *<li>source "source-b" on branch "refs/heads/test-b" with "source-b" path</li>    *</ul>    *</p>    *    * @throws Exception If an exception occurs.    */
annotation|@
name|Test
DECL|method|testNewSubscriptionsSpecificBranchValues ()
specifier|public
name|void
name|testNewSubscriptionsSpecificBranchValues
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringBuilder
name|sb
init|=
name|buildSubmoduleSection
argument_list|(
literal|"source-a"
argument_list|,
literal|"source-a"
argument_list|,
literal|"http://localhost:8080/source-a"
argument_list|,
literal|"refs/heads/test-a"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|buildSubmoduleSection
argument_list|(
literal|"source-b"
argument_list|,
literal|"source-b"
argument_list|,
literal|"http://localhost:8080/source-b"
argument_list|,
literal|"refs/heads/test-b"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Branch
operator|.
name|NameKey
name|mergedBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"dest-project"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|subscriptionsToInsert
init|=
operator|new
name|ArrayList
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|()
decl_stmt|;
name|subscriptionsToInsert
operator|.
name|add
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|mergedBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"source-a"
argument_list|)
argument_list|,
literal|"refs/heads/test-a"
argument_list|)
argument_list|,
literal|"source-a"
argument_list|)
argument_list|)
expr_stmt|;
name|subscriptionsToInsert
operator|.
name|add
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|mergedBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"source-b"
argument_list|)
argument_list|,
literal|"refs/heads/test-b"
argument_list|)
argument_list|,
literal|"source-b"
argument_list|)
argument_list|)
expr_stmt|;
name|doOnlySubscriptionInserts
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|mergedBranch
argument_list|,
name|subscriptionsToInsert
argument_list|)
expr_stmt|;
name|doVerify
argument_list|()
expr_stmt|;
block|}
comment|/**    * It tests SubmoduleOp.update in a scenario considering:    *<ul>    *<li>one subscription existing to destination project/branch</li>    *<li>a commit is merged to "dest-project" in "refs/heads/master" branch</li>    *<li>commit contains .gitmodules file with content</li>    *</ul>    *    *<pre>    *     [submodule "source"]    *       path = source    *       url = http://localhost:8080/source    *       branch = refs/heads/master    *</pre>    *<p>    * It expects to insert a new row in subscriptions table. The rows inserted    * specifies:    *<ul>    *<li>target "dest-project" on branch "refs/heads/master"</li>    *<li>source "source" on branch "refs/heads/master" with "source" path</li>    *</ul>    *</p>    *<p>    * It also expects to remove the row in subscriptions table specifying another    * project/branch subscribed to merged branch. This one to be removed is:    *<ul>    *<li>target "dest-project" on branch "refs/heads/master"</li>    *<li>source "old-source" on branch "refs/heads/master" with "old-source"    * path</li>    *</ul>    *</p>    *    * @throws Exception If an exception occurs.    */
annotation|@
name|Test
DECL|method|testSubscriptionsInsertOneRemoveOne ()
specifier|public
name|void
name|testSubscriptionsInsertOneRemoveOne
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Branch
operator|.
name|NameKey
name|mergedBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"dest-project"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|subscriptionsToInsert
init|=
operator|new
name|ArrayList
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|()
decl_stmt|;
name|subscriptionsToInsert
operator|.
name|add
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|mergedBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"source"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|,
literal|"source"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|oldOnesToMergedBranch
init|=
operator|new
name|ArrayList
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|()
decl_stmt|;
name|oldOnesToMergedBranch
operator|.
name|add
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|mergedBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"old-source"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|,
literal|"old-source"
argument_list|)
argument_list|)
expr_stmt|;
name|doOnlySubscriptionTableOperations
argument_list|(
name|buildSubmoduleSection
argument_list|(
literal|"source"
argument_list|,
literal|"source"
argument_list|,
literal|"http://localhost:8080/source"
argument_list|,
literal|"refs/heads/master"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|mergedBranch
argument_list|,
name|subscriptionsToInsert
argument_list|,
name|oldOnesToMergedBranch
argument_list|)
expr_stmt|;
name|doVerify
argument_list|()
expr_stmt|;
block|}
comment|/**    * It tests SubmoduleOp.update in a scenario considering:    *<ul>    *<li>one subscription existing to destination project/branch with a source    * called old on refs/heads/master branch</li>    *<li>a commit is merged to "dest-project" in "refs/heads/master" branch</li>    *<li>    * commit contains .gitmodules file with content</li>    *</ul>    *    *<pre>    *     [submodule "new"]    *       path = new    *       url = http://localhost:8080/new    *       branch = refs/heads/master    *    *     [submodule "old"]    *       path = old    *       url = http://localhost:8080/old    *       branch = refs/heads/master    *</pre>    *<p>    * It expects to insert a new row in subscriptions table. It should not remove    * any row. The rows inserted specifies:    *<ul>    *<li>target "dest-project" on branch "refs/heads/master"</li>    *<li>source "new" on branch "refs/heads/master" with "new" path</li>    *</ul>    *</p>    *    * @throws Exception If an exception occurs.    */
annotation|@
name|Test
DECL|method|testSubscriptionAddedAndMantainPreviousOne ()
specifier|public
name|void
name|testSubscriptionAddedAndMantainPreviousOne
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringBuilder
name|sb
init|=
name|buildSubmoduleSection
argument_list|(
literal|"new"
argument_list|,
literal|"new"
argument_list|,
literal|"http://localhost:8080/new"
argument_list|,
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|buildSubmoduleSection
argument_list|(
literal|"old"
argument_list|,
literal|"old"
argument_list|,
literal|"http://localhost:8080/old"
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Branch
operator|.
name|NameKey
name|mergedBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"dest-project"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
specifier|final
name|SubmoduleSubscription
name|old
init|=
operator|new
name|SubmoduleSubscription
argument_list|(
name|mergedBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"old"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|,
literal|"old"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|extractedsubscriptions
init|=
operator|new
name|ArrayList
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|()
decl_stmt|;
name|extractedsubscriptions
operator|.
name|add
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|mergedBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"new"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|,
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
name|extractedsubscriptions
operator|.
name|add
argument_list|(
name|old
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|oldOnesToMergedBranch
init|=
operator|new
name|ArrayList
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|()
decl_stmt|;
name|oldOnesToMergedBranch
operator|.
name|add
argument_list|(
name|old
argument_list|)
expr_stmt|;
name|doOnlySubscriptionTableOperations
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|mergedBranch
argument_list|,
name|extractedsubscriptions
argument_list|,
name|oldOnesToMergedBranch
argument_list|)
expr_stmt|;
name|doVerify
argument_list|()
expr_stmt|;
block|}
comment|/**    * It tests SubmoduleOp.update in a scenario considering an empty .gitmodules    * file is part of a commit to a destination project/branch having two sources    * subscribed.    *<p>    * It expects to remove the subscriptions to destination project/branch.    *</p>    *    * @throws Exception If an exception occurs.    */
annotation|@
name|Test
DECL|method|testRemoveSubscriptions ()
specifier|public
name|void
name|testRemoveSubscriptions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Branch
operator|.
name|NameKey
name|mergedBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"dest-project"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|extractedsubscriptions
init|=
operator|new
name|ArrayList
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|oldOnesToMergedBranch
init|=
operator|new
name|ArrayList
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|()
decl_stmt|;
name|oldOnesToMergedBranch
operator|.
name|add
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|mergedBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"source-a"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|,
literal|"source-a"
argument_list|)
argument_list|)
expr_stmt|;
name|oldOnesToMergedBranch
operator|.
name|add
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|mergedBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"source-b"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|,
literal|"source-b"
argument_list|)
argument_list|)
expr_stmt|;
name|doOnlySubscriptionTableOperations
argument_list|(
literal|""
argument_list|,
name|mergedBranch
argument_list|,
name|extractedsubscriptions
argument_list|,
name|oldOnesToMergedBranch
argument_list|)
expr_stmt|;
block|}
comment|/**    * It tests SubmoduleOp.update in a scenario considering no .gitmodules file    * in a merged commit to a destination project/branch that is a source one to    * one called "target-project".    *<p>    * It expects to update the git link called "source-project" to be in target    * repository.    *</p>    *    * @throws Exception If an exception occurs.    */
annotation|@
name|Test
DECL|method|testOneSubscriberToUpdate ()
specifier|public
name|void
name|testOneSubscriberToUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|expect
argument_list|(
name|schemaFactory
operator|.
name|open
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|schema
argument_list|)
expr_stmt|;
specifier|final
name|Repository
name|sourceRepository
init|=
name|createWorkRepository
argument_list|()
decl_stmt|;
specifier|final
name|Git
name|sourceGit
init|=
operator|new
name|Git
argument_list|(
name|sourceRepository
argument_list|)
decl_stmt|;
name|addRegularFileToIndex
argument_list|(
literal|"file.txt"
argument_list|,
literal|"test content"
argument_list|,
name|sourceRepository
argument_list|)
expr_stmt|;
specifier|final
name|RevCommit
name|sourceMergeTip
init|=
name|sourceGit
operator|.
name|commit
argument_list|()
operator|.
name|setMessage
argument_list|(
literal|"test"
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
specifier|final
name|Branch
operator|.
name|NameKey
name|sourceBranchNameKey
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"source-project"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
specifier|final
name|CodeReviewCommit
name|codeReviewCommit
init|=
operator|new
name|CodeReviewCommit
argument_list|(
name|sourceMergeTip
operator|.
name|toObjectId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Change
name|submittedChange
init|=
operator|new
name|Change
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|sourceMergeTip
operator|.
name|toObjectId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Change
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
argument_list|,
name|sourceBranchNameKey
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|CodeReviewCommit
argument_list|>
name|mergedCommits
init|=
operator|new
name|HashMap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|CodeReviewCommit
argument_list|>
argument_list|()
decl_stmt|;
name|mergedCommits
operator|.
name|put
argument_list|(
name|submittedChange
operator|.
name|getId
argument_list|()
argument_list|,
name|codeReviewCommit
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Change
argument_list|>
name|submitted
init|=
operator|new
name|ArrayList
argument_list|<
name|Change
argument_list|>
argument_list|()
decl_stmt|;
name|submitted
operator|.
name|add
argument_list|(
name|submittedChange
argument_list|)
expr_stmt|;
specifier|final
name|Repository
name|targetRepository
init|=
name|createWorkRepository
argument_list|()
decl_stmt|;
specifier|final
name|Git
name|targetGit
init|=
operator|new
name|Git
argument_list|(
name|targetRepository
argument_list|)
decl_stmt|;
name|addGitLinkToIndex
argument_list|(
literal|"a"
argument_list|,
name|sourceMergeTip
operator|.
name|copy
argument_list|()
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|targetGit
operator|.
name|commit
argument_list|()
operator|.
name|setMessage
argument_list|(
literal|"test"
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
specifier|final
name|Branch
operator|.
name|NameKey
name|targetBranchNameKey
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"target-project"
argument_list|)
argument_list|,
name|sourceBranchNameKey
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|urlProvider
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"http://localhost:8080"
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|schema
operator|.
name|submoduleSubscriptions
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subscriptions
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|subscribers
init|=
operator|new
name|ListResultSet
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranchNameKey
argument_list|,
name|sourceBranchNameKey
argument_list|,
literal|"source-project"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|subscriptions
operator|.
name|bySubmodule
argument_list|(
name|sourceBranchNameKey
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subscribers
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|repoManager
operator|.
name|openRepository
argument_list|(
name|targetBranchNameKey
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|targetRepository
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Capture
argument_list|<
name|RefUpdate
argument_list|>
name|ruCapture
init|=
operator|new
name|Capture
argument_list|<
name|RefUpdate
argument_list|>
argument_list|()
decl_stmt|;
name|gitRefUpdated
operator|.
name|fire
argument_list|(
name|eq
argument_list|(
name|targetBranchNameKey
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|,
name|capture
argument_list|(
name|ruCapture
argument_list|)
argument_list|)
expr_stmt|;
name|changeHooks
operator|.
name|doRefUpdatedHook
argument_list|(
name|eq
argument_list|(
name|targetBranchNameKey
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|RefUpdate
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
expr|<
name|Account
operator|>
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|schema
operator|.
name|submoduleSubscriptions
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subscriptions
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|emptySubscriptions
init|=
operator|new
name|ListResultSet
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|subscriptions
operator|.
name|bySubmodule
argument_list|(
name|targetBranchNameKey
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|emptySubscriptions
argument_list|)
expr_stmt|;
name|schema
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|PersonIdent
name|myIdent
init|=
operator|new
name|PersonIdent
argument_list|(
literal|"test-user"
argument_list|,
literal|"test-user@email.com"
argument_list|)
decl_stmt|;
name|doReplay
argument_list|()
expr_stmt|;
specifier|final
name|SubmoduleOp
name|submoduleOp
init|=
operator|new
name|SubmoduleOp
argument_list|(
name|sourceBranchNameKey
argument_list|,
name|sourceMergeTip
argument_list|,
operator|new
name|RevWalk
argument_list|(
name|sourceRepository
argument_list|)
argument_list|,
name|urlProvider
argument_list|,
name|schemaFactory
argument_list|,
name|sourceRepository
argument_list|,
operator|new
name|Project
argument_list|(
name|sourceBranchNameKey
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|,
name|submitted
argument_list|,
name|mergedCommits
argument_list|,
name|myIdent
argument_list|,
name|repoManager
argument_list|,
name|gitRefUpdated
argument_list|,
literal|null
argument_list|,
name|changeHooks
argument_list|)
decl_stmt|;
name|submoduleOp
operator|.
name|update
argument_list|()
expr_stmt|;
name|doVerify
argument_list|()
expr_stmt|;
name|RefUpdate
name|ru
init|=
name|ruCapture
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ru
operator|.
name|getName
argument_list|()
argument_list|,
name|targetBranchNameKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * It tests SubmoduleOp.update in a scenario considering established circular    * reference in submodule_subscriptions table.    *<p>    * In the tested scenario there is no .gitmodules file in a merged commit to a    * destination project/branch that is a source one to one called    * "target-project".    *<p>    * submodule_subscriptions table will be incorrect due source appearing as a    * subscriber or target-project: according to database target-project has as    * source the source-project, and source-project has as source the    * target-project.    *<p>    * It expects to update the git link called "source-project" to be in target    * repository and ignoring the incorrect row in database establishing the    * circular reference.    *</p>    *    * @throws Exception If an exception occurs.    */
annotation|@
name|Test
DECL|method|testAvoidingCircularReference ()
specifier|public
name|void
name|testAvoidingCircularReference
parameter_list|()
throws|throws
name|Exception
block|{
name|expect
argument_list|(
name|schemaFactory
operator|.
name|open
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|schema
argument_list|)
expr_stmt|;
specifier|final
name|Repository
name|sourceRepository
init|=
name|createWorkRepository
argument_list|()
decl_stmt|;
specifier|final
name|Git
name|sourceGit
init|=
operator|new
name|Git
argument_list|(
name|sourceRepository
argument_list|)
decl_stmt|;
name|addRegularFileToIndex
argument_list|(
literal|"file.txt"
argument_list|,
literal|"test content"
argument_list|,
name|sourceRepository
argument_list|)
expr_stmt|;
specifier|final
name|RevCommit
name|sourceMergeTip
init|=
name|sourceGit
operator|.
name|commit
argument_list|()
operator|.
name|setMessage
argument_list|(
literal|"test"
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
specifier|final
name|Branch
operator|.
name|NameKey
name|sourceBranchNameKey
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"source-project"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
specifier|final
name|CodeReviewCommit
name|codeReviewCommit
init|=
operator|new
name|CodeReviewCommit
argument_list|(
name|sourceMergeTip
operator|.
name|toObjectId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Change
name|submittedChange
init|=
operator|new
name|Change
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|sourceMergeTip
operator|.
name|toObjectId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Change
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
argument_list|,
name|sourceBranchNameKey
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|CodeReviewCommit
argument_list|>
name|mergedCommits
init|=
operator|new
name|HashMap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|CodeReviewCommit
argument_list|>
argument_list|()
decl_stmt|;
name|mergedCommits
operator|.
name|put
argument_list|(
name|submittedChange
operator|.
name|getId
argument_list|()
argument_list|,
name|codeReviewCommit
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Change
argument_list|>
name|submitted
init|=
operator|new
name|ArrayList
argument_list|<
name|Change
argument_list|>
argument_list|()
decl_stmt|;
name|submitted
operator|.
name|add
argument_list|(
name|submittedChange
argument_list|)
expr_stmt|;
specifier|final
name|Repository
name|targetRepository
init|=
name|createWorkRepository
argument_list|()
decl_stmt|;
specifier|final
name|Git
name|targetGit
init|=
operator|new
name|Git
argument_list|(
name|targetRepository
argument_list|)
decl_stmt|;
name|addGitLinkToIndex
argument_list|(
literal|"a"
argument_list|,
name|sourceMergeTip
operator|.
name|copy
argument_list|()
argument_list|,
name|targetRepository
argument_list|)
expr_stmt|;
name|targetGit
operator|.
name|commit
argument_list|()
operator|.
name|setMessage
argument_list|(
literal|"test"
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
specifier|final
name|Branch
operator|.
name|NameKey
name|targetBranchNameKey
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"target-project"
argument_list|)
argument_list|,
name|sourceBranchNameKey
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|urlProvider
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"http://localhost:8080"
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|schema
operator|.
name|submoduleSubscriptions
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subscriptions
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|subscribers
init|=
operator|new
name|ListResultSet
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranchNameKey
argument_list|,
name|sourceBranchNameKey
argument_list|,
literal|"source-project"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|subscriptions
operator|.
name|bySubmodule
argument_list|(
name|sourceBranchNameKey
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subscribers
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|repoManager
operator|.
name|openRepository
argument_list|(
name|targetBranchNameKey
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|targetRepository
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Capture
argument_list|<
name|RefUpdate
argument_list|>
name|ruCapture
init|=
operator|new
name|Capture
argument_list|<
name|RefUpdate
argument_list|>
argument_list|()
decl_stmt|;
name|gitRefUpdated
operator|.
name|fire
argument_list|(
name|eq
argument_list|(
name|targetBranchNameKey
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|,
name|capture
argument_list|(
name|ruCapture
argument_list|)
argument_list|)
expr_stmt|;
name|changeHooks
operator|.
name|doRefUpdatedHook
argument_list|(
name|eq
argument_list|(
name|targetBranchNameKey
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|RefUpdate
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
expr|<
name|Account
operator|>
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|schema
operator|.
name|submoduleSubscriptions
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subscriptions
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|incorrectSubscriptions
init|=
operator|new
name|ListResultSet
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|sourceBranchNameKey
argument_list|,
name|targetBranchNameKey
argument_list|,
literal|"target-project"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|subscriptions
operator|.
name|bySubmodule
argument_list|(
name|targetBranchNameKey
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|incorrectSubscriptions
argument_list|)
expr_stmt|;
name|schema
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|PersonIdent
name|myIdent
init|=
operator|new
name|PersonIdent
argument_list|(
literal|"test-user"
argument_list|,
literal|"test-user@email.com"
argument_list|)
decl_stmt|;
name|doReplay
argument_list|()
expr_stmt|;
specifier|final
name|SubmoduleOp
name|submoduleOp
init|=
operator|new
name|SubmoduleOp
argument_list|(
name|sourceBranchNameKey
argument_list|,
name|sourceMergeTip
argument_list|,
operator|new
name|RevWalk
argument_list|(
name|sourceRepository
argument_list|)
argument_list|,
name|urlProvider
argument_list|,
name|schemaFactory
argument_list|,
name|sourceRepository
argument_list|,
operator|new
name|Project
argument_list|(
name|sourceBranchNameKey
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|,
name|submitted
argument_list|,
name|mergedCommits
argument_list|,
name|myIdent
argument_list|,
name|repoManager
argument_list|,
name|gitRefUpdated
argument_list|,
literal|null
argument_list|,
name|changeHooks
argument_list|)
decl_stmt|;
name|submoduleOp
operator|.
name|update
argument_list|()
expr_stmt|;
name|doVerify
argument_list|()
expr_stmt|;
name|RefUpdate
name|ru
init|=
name|ruCapture
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ru
operator|.
name|getName
argument_list|()
argument_list|,
name|targetBranchNameKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * It calls SubmoduleOp.update considering only one insert on Subscriptions    * table.    *<p>    * It considers a commit containing a .gitmodules file was merged in    * refs/heads/master of a dest-project.    *</p>    *<p>    * The .gitmodules file content should indicate a source project called    * "source".    *</p>    *    * @param gitModulesFileContent The .gitmodules file content. During the test    *        this file is created, so the commit containing it.    * @param sourceBranchName The branch name of source project "pointed by"    *        .gitmodules file.    * @throws Exception If an exception occurs.    */
DECL|method|doOneSubscriptionInsert (final String gitModulesFileContent, final String sourceBranchName)
specifier|private
name|void
name|doOneSubscriptionInsert
parameter_list|(
specifier|final
name|String
name|gitModulesFileContent
parameter_list|,
specifier|final
name|String
name|sourceBranchName
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Branch
operator|.
name|NameKey
name|mergedBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"dest-project"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|subscriptionsToInsert
init|=
operator|new
name|ArrayList
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|()
decl_stmt|;
name|subscriptionsToInsert
operator|.
name|add
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|mergedBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"source"
argument_list|)
argument_list|,
name|sourceBranchName
argument_list|)
argument_list|,
literal|"source"
argument_list|)
argument_list|)
expr_stmt|;
name|doOnlySubscriptionInserts
argument_list|(
name|gitModulesFileContent
argument_list|,
name|mergedBranch
argument_list|,
name|subscriptionsToInsert
argument_list|)
expr_stmt|;
block|}
comment|/**    * It calls SubmoduleOp.update method considering scenario only inserting new    * subscriptions.    *<p>    * In this test a commit is created and considered merged to    * {@code mergedBranch} branch.    *</p>    *<p>    * The destination project the commit was merged is not considered to be a    * source of another project (no subscribers found to this project).    *</p>    *    * @param gitModulesFileContent The .gitmodules file content.    * @param mergedBranch The {@code Branch.NameKey} instance representing the    *        project/branch the commit was merged.    * @param extractedSubscriptions The subscription rows extracted from    *        gitmodules file.    * @throws Exception If an exception occurs.    */
DECL|method|doOnlySubscriptionInserts (final String gitModulesFileContent, final Branch.NameKey mergedBranch, final List<SubmoduleSubscription> extractedSubscriptions)
specifier|private
name|void
name|doOnlySubscriptionInserts
parameter_list|(
specifier|final
name|String
name|gitModulesFileContent
parameter_list|,
specifier|final
name|Branch
operator|.
name|NameKey
name|mergedBranch
parameter_list|,
specifier|final
name|List
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|extractedSubscriptions
parameter_list|)
throws|throws
name|Exception
block|{
name|doOnlySubscriptionTableOperations
argument_list|(
name|gitModulesFileContent
argument_list|,
name|mergedBranch
argument_list|,
name|extractedSubscriptions
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * It calls SubmoduleOp.update method considering scenario only updating    * Subscriptions table.    *<p>    * In this test a commit is created and considered merged to    * {@code mergedBranch} branch.    *</p>    *<p>    * The destination project the commit was merged is not considered to be a    * source of another project (no subscribers found to this project).    *</p>    *    * @param gitModulesFileContent The .gitmodules file content.    * @param mergedBranch The {@code Branch.NameKey} instance representing the    *        project/branch the commit was merged.    * @param extractedSubscriptions The subscription rows extracted from    *        gitmodules file.    * @param previousSubscriptions The subscription rows to be considering as    *        existing and pointing as target to the {@code mergedBranch}    *        before updating the table.    * @throws Exception If an exception occurs.    */
DECL|method|doOnlySubscriptionTableOperations ( final String gitModulesFileContent, final Branch.NameKey mergedBranch, final List<SubmoduleSubscription> extractedSubscriptions, final List<SubmoduleSubscription> previousSubscriptions)
specifier|private
name|void
name|doOnlySubscriptionTableOperations
parameter_list|(
specifier|final
name|String
name|gitModulesFileContent
parameter_list|,
specifier|final
name|Branch
operator|.
name|NameKey
name|mergedBranch
parameter_list|,
specifier|final
name|List
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|extractedSubscriptions
parameter_list|,
specifier|final
name|List
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|previousSubscriptions
parameter_list|)
throws|throws
name|Exception
block|{
name|expect
argument_list|(
name|schemaFactory
operator|.
name|open
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|schema
argument_list|)
expr_stmt|;
specifier|final
name|Repository
name|realDb
init|=
name|createWorkRepository
argument_list|()
decl_stmt|;
specifier|final
name|Git
name|git
init|=
operator|new
name|Git
argument_list|(
name|realDb
argument_list|)
decl_stmt|;
name|addRegularFileToIndex
argument_list|(
literal|".gitmodules"
argument_list|,
name|gitModulesFileContent
argument_list|,
name|realDb
argument_list|)
expr_stmt|;
specifier|final
name|RevCommit
name|mergeTip
init|=
name|git
operator|.
name|commit
argument_list|()
operator|.
name|setMessage
argument_list|(
literal|"test"
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|urlProvider
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|schema
operator|.
name|submoduleSubscriptions
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subscriptions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|subscriptions
operator|.
name|bySuperProject
argument_list|(
name|mergedBranch
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ListResultSet
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|(
name|previousSubscriptions
argument_list|)
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|existingProjects
init|=
operator|new
name|TreeSet
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubmoduleSubscription
name|extracted
range|:
name|extractedSubscriptions
control|)
block|{
name|existingProjects
operator|.
name|add
argument_list|(
name|extracted
operator|.
name|getSubmodule
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|extractedSubscriptions
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|expect
argument_list|(
name|repoManager
operator|.
name|list
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|existingProjects
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|alreadySubscribeds
init|=
operator|new
name|HashSet
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubmoduleSubscription
name|s
range|:
name|extractedSubscriptions
control|)
block|{
if|if
condition|(
name|previousSubscriptions
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|alreadySubscribeds
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|subscriptionsToRemove
init|=
operator|new
name|HashSet
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|(
name|previousSubscriptions
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|subscriptionsToInsert
init|=
operator|new
name|ArrayList
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|(
name|extractedSubscriptions
argument_list|)
decl_stmt|;
name|subscriptionsToRemove
operator|.
name|removeAll
argument_list|(
name|subscriptionsToInsert
argument_list|)
expr_stmt|;
name|subscriptionsToInsert
operator|.
name|removeAll
argument_list|(
name|alreadySubscribeds
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|subscriptionsToRemove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|expect
argument_list|(
name|schema
operator|.
name|submoduleSubscriptions
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subscriptions
argument_list|)
expr_stmt|;
name|subscriptions
operator|.
name|delete
argument_list|(
name|subscriptionsToRemove
argument_list|)
expr_stmt|;
block|}
name|expect
argument_list|(
name|schema
operator|.
name|submoduleSubscriptions
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subscriptions
argument_list|)
expr_stmt|;
name|subscriptions
operator|.
name|insert
argument_list|(
name|subscriptionsToInsert
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|schema
operator|.
name|submoduleSubscriptions
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subscriptions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|subscriptions
operator|.
name|bySubmodule
argument_list|(
name|mergedBranch
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ListResultSet
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|SubmoduleSubscription
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|close
argument_list|()
expr_stmt|;
name|doReplay
argument_list|()
expr_stmt|;
specifier|final
name|SubmoduleOp
name|submoduleOp
init|=
operator|new
name|SubmoduleOp
argument_list|(
name|mergedBranch
argument_list|,
name|mergeTip
argument_list|,
operator|new
name|RevWalk
argument_list|(
name|realDb
argument_list|)
argument_list|,
name|urlProvider
argument_list|,
name|schemaFactory
argument_list|,
name|realDb
argument_list|,
operator|new
name|Project
argument_list|(
name|mergedBranch
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Change
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|repoManager
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|submoduleOp
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
comment|/**    * It creates and adds a regular file to git index of a repository.    *    * @param fileName The file name.    * @param content File content.    * @param repository The Repository instance.    * @throws IOException If an I/O exception occurs.    */
DECL|method|addRegularFileToIndex (final String fileName, final String content, final Repository repository)
specifier|private
name|void
name|addRegularFileToIndex
parameter_list|(
specifier|final
name|String
name|fileName
parameter_list|,
specifier|final
name|String
name|content
parameter_list|,
specifier|final
name|Repository
name|repository
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ObjectInserter
name|oi
init|=
name|repository
operator|.
name|newObjectInserter
argument_list|()
decl_stmt|;
name|AnyObjectId
name|objectId
init|=
name|oi
operator|.
name|insert
argument_list|(
name|Constants
operator|.
name|OBJ_BLOB
argument_list|,
name|Constants
operator|.
name|encode
argument_list|(
name|content
argument_list|)
argument_list|)
decl_stmt|;
name|oi
operator|.
name|flush
argument_list|()
expr_stmt|;
name|addEntryToIndex
argument_list|(
name|fileName
argument_list|,
name|FileMode
operator|.
name|REGULAR_FILE
argument_list|,
name|objectId
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
comment|/**    * It creates and adds a git link to git index of a repository.    *    * @param fileName The file name.    * @param objectId The sha-1 value of git link.    * @param repository The Repository instance.    * @throws IOException If an I/O exception occurs.    */
DECL|method|addGitLinkToIndex (final String fileName, final AnyObjectId objectId, final Repository repository)
specifier|private
name|void
name|addGitLinkToIndex
parameter_list|(
specifier|final
name|String
name|fileName
parameter_list|,
specifier|final
name|AnyObjectId
name|objectId
parameter_list|,
specifier|final
name|Repository
name|repository
parameter_list|)
throws|throws
name|IOException
block|{
name|addEntryToIndex
argument_list|(
name|fileName
argument_list|,
name|FileMode
operator|.
name|GITLINK
argument_list|,
name|objectId
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
comment|/**    * It adds an entry to index.    *    * @param path The entry path.    * @param fileMode The entry file mode.    * @param objectId The ObjectId value of the entry.    * @param repository The repository instance.    * @throws IOException If an I/O exception occurs.    */
DECL|method|addEntryToIndex (final String path, final FileMode fileMode, final AnyObjectId objectId, final Repository repository)
specifier|private
name|void
name|addEntryToIndex
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|FileMode
name|fileMode
parameter_list|,
specifier|final
name|AnyObjectId
name|objectId
parameter_list|,
specifier|final
name|Repository
name|repository
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DirCacheEntry
name|e
init|=
operator|new
name|DirCacheEntry
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|e
operator|.
name|setFileMode
argument_list|(
name|fileMode
argument_list|)
expr_stmt|;
name|e
operator|.
name|setObjectId
argument_list|(
name|objectId
argument_list|)
expr_stmt|;
specifier|final
name|DirCacheBuilder
name|dirCacheBuilder
init|=
name|repository
operator|.
name|lockDirCache
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|dirCacheBuilder
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|dirCacheBuilder
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|buildSubmoduleSection (final String name, final String path, final String url, final String branch)
specifier|private
specifier|static
name|StringBuilder
name|buildSubmoduleSection
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|url
parameter_list|,
specifier|final
name|String
name|branch
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"[submodule \""
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"]"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newLine
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\tpath = "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newLine
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\turl = "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newLine
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\tbranch = "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|branch
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newLine
argument_list|)
expr_stmt|;
return|return
name|sb
return|;
block|}
block|}
end_class

end_unit

