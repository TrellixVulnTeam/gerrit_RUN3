begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.mail.receive
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|receive
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Abstract parser test for HTML messages. Payload will be added through concrete implementations.  */
end_comment

begin_class
annotation|@
name|Ignore
DECL|class|HtmlParserTest
specifier|public
specifier|abstract
class|class
name|HtmlParserTest
extends|extends
name|AbstractParserTest
block|{
annotation|@
name|Test
DECL|method|simpleChangeMessage ()
specifier|public
name|void
name|simpleChangeMessage
parameter_list|()
block|{
name|MailMessage
operator|.
name|Builder
name|b
init|=
name|newMailMessageBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|htmlContent
argument_list|(
name|newHtmlBody
argument_list|(
literal|"Looks good to me"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Comment
argument_list|>
name|comments
init|=
name|defaultComments
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MailComment
argument_list|>
name|parsedComments
init|=
name|HtmlParser
operator|.
name|parse
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|,
name|comments
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedComments
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertChangeMessage
argument_list|(
literal|"Looks good to me"
argument_list|,
name|parsedComments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|simpleInlineComments ()
specifier|public
name|void
name|simpleInlineComments
parameter_list|()
block|{
name|MailMessage
operator|.
name|Builder
name|b
init|=
name|newMailMessageBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|htmlContent
argument_list|(
name|newHtmlBody
argument_list|(
literal|"Looks good to me"
argument_list|,
literal|"I have a comment on this.&nbsp;"
argument_list|,
literal|null
argument_list|,
literal|"Also have a comment here."
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Comment
argument_list|>
name|comments
init|=
name|defaultComments
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MailComment
argument_list|>
name|parsedComments
init|=
name|HtmlParser
operator|.
name|parse
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|,
name|comments
argument_list|,
name|CHANGE_URL
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedComments
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertChangeMessage
argument_list|(
literal|"Looks good to me"
argument_list|,
name|parsedComments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertInlineComment
argument_list|(
literal|"I have a comment on this."
argument_list|,
name|parsedComments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|comments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertInlineComment
argument_list|(
literal|"Also have a comment here."
argument_list|,
name|parsedComments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|comments
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|simpleFileComment ()
specifier|public
name|void
name|simpleFileComment
parameter_list|()
block|{
name|MailMessage
operator|.
name|Builder
name|b
init|=
name|newMailMessageBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|htmlContent
argument_list|(
name|newHtmlBody
argument_list|(
literal|"Looks good to me"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"Also have a comment here."
argument_list|,
literal|"This is a nice file"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Comment
argument_list|>
name|comments
init|=
name|defaultComments
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MailComment
argument_list|>
name|parsedComments
init|=
name|HtmlParser
operator|.
name|parse
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|,
name|comments
argument_list|,
name|CHANGE_URL
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedComments
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertChangeMessage
argument_list|(
literal|"Looks good to me"
argument_list|,
name|parsedComments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFileComment
argument_list|(
literal|"This is a nice file"
argument_list|,
name|parsedComments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|comments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|key
operator|.
name|filename
argument_list|)
expr_stmt|;
name|assertInlineComment
argument_list|(
literal|"Also have a comment here."
argument_list|,
name|parsedComments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|comments
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noComments ()
specifier|public
name|void
name|noComments
parameter_list|()
block|{
name|MailMessage
operator|.
name|Builder
name|b
init|=
name|newMailMessageBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|htmlContent
argument_list|(
name|newHtmlBody
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Comment
argument_list|>
name|comments
init|=
name|defaultComments
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MailComment
argument_list|>
name|parsedComments
init|=
name|HtmlParser
operator|.
name|parse
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|,
name|comments
argument_list|,
name|CHANGE_URL
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedComments
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noChangeMessage ()
specifier|public
name|void
name|noChangeMessage
parameter_list|()
block|{
name|MailMessage
operator|.
name|Builder
name|b
init|=
name|newMailMessageBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|htmlContent
argument_list|(
name|newHtmlBody
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"Also have a comment here."
argument_list|,
literal|"This is a nice file"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Comment
argument_list|>
name|comments
init|=
name|defaultComments
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MailComment
argument_list|>
name|parsedComments
init|=
name|HtmlParser
operator|.
name|parse
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|,
name|comments
argument_list|,
name|CHANGE_URL
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedComments
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertFileComment
argument_list|(
literal|"This is a nice file"
argument_list|,
name|parsedComments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|comments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|key
operator|.
name|filename
argument_list|)
expr_stmt|;
name|assertInlineComment
argument_list|(
literal|"Also have a comment here."
argument_list|,
name|parsedComments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|comments
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commentsSpanningMultipleBlocks ()
specifier|public
name|void
name|commentsSpanningMultipleBlocks
parameter_list|()
block|{
name|String
name|htmlMessage
init|=
literal|"This is a very long test comment.<div><br></div><div>Now this is a new paragraph yay.</div>"
decl_stmt|;
name|String
name|txtMessage
init|=
literal|"This is a very long test comment.\n\nNow this is a new paragraph yay."
decl_stmt|;
name|MailMessage
operator|.
name|Builder
name|b
init|=
name|newMailMessageBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|htmlContent
argument_list|(
name|newHtmlBody
argument_list|(
name|htmlMessage
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|htmlMessage
argument_list|,
name|htmlMessage
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Comment
argument_list|>
name|comments
init|=
name|defaultComments
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MailComment
argument_list|>
name|parsedComments
init|=
name|HtmlParser
operator|.
name|parse
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|,
name|comments
argument_list|,
name|CHANGE_URL
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedComments
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertChangeMessage
argument_list|(
name|txtMessage
argument_list|,
name|parsedComments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFileComment
argument_list|(
name|txtMessage
argument_list|,
name|parsedComments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|comments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|key
operator|.
name|filename
argument_list|)
expr_stmt|;
name|assertInlineComment
argument_list|(
name|txtMessage
argument_list|,
name|parsedComments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|comments
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an html message body with the specified comments.    *    * @param changeMessage    * @param c1 Comment in reply to first comment.    * @param c2 Comment in reply to second comment.    * @param c3 Comment in reply to third comment.    * @param f1 Comment on file one.    * @param f2 Comment on file two.    * @param fc1 Comment in reply to a comment on file 1.    * @return A string with all inline comments and the original quoted email.    */
DECL|method|newHtmlBody ( String changeMessage, String c1, String c2, String c3, String f1, String f2, String fc1)
specifier|protected
specifier|abstract
name|String
name|newHtmlBody
parameter_list|(
name|String
name|changeMessage
parameter_list|,
name|String
name|c1
parameter_list|,
name|String
name|c2
parameter_list|,
name|String
name|c3
parameter_list|,
name|String
name|f1
parameter_list|,
name|String
name|f2
parameter_list|,
name|String
name|fc1
parameter_list|)
function_decl|;
block|}
end_class

end_unit

