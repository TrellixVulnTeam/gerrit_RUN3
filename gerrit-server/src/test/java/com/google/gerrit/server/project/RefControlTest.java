begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|EDIT_TOPIC_NAME
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|LABEL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|OWNER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|PUSH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|READ
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|SUBMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|CHANGE_OWNER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
operator|.
name|ADMIN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
operator|.
name|DEVS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
operator|.
name|allow
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
operator|.
name|block
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
operator|.
name|deny
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
operator|.
name|doNotInherit
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|InMemoryRepositoryManager
operator|.
name|newRepository
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Capable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|InvalidNameException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|RefControlTest
specifier|public
class|class
name|RefControlTest
block|{
DECL|method|assertAdminsAreOwnersAndDevsAreNot ()
specifier|private
name|void
name|assertAdminsAreOwnersAndDevsAreNot
parameter_list|()
block|{
name|ProjectControl
name|uBlah
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|ProjectControl
name|uAdmin
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|,
name|ADMIN
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|uBlah
operator|.
name|isOwner
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"not owner"
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|uAdmin
operator|.
name|isOwner
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"is owner"
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertOwner (String ref, ProjectControl u)
specifier|private
name|void
name|assertOwner
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|isOwner
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"OWN "
operator|+
name|ref
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNotOwner (ProjectControl u)
specifier|private
name|void
name|assertNotOwner
parameter_list|(
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|isOwner
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"not owner"
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertOwnerAnyRef (ProjectControl u)
specifier|private
name|void
name|assertOwnerAnyRef
parameter_list|(
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|isOwnerAnyRef
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"owns ref"
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNotOwner (String ref, ProjectControl u)
specifier|private
name|void
name|assertNotOwner
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|isOwner
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"NOT OWN "
operator|+
name|ref
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanRead (ProjectControl u)
specifier|private
name|void
name|assertCanRead
parameter_list|(
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|isVisible
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"can read"
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotRead (ProjectControl u)
specifier|private
name|void
name|assertCannotRead
parameter_list|(
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|isVisible
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"cannot read"
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanRead (String ref, ProjectControl u)
specifier|private
name|void
name|assertCanRead
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|isVisible
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"can read "
operator|+
name|ref
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotRead (String ref, ProjectControl u)
specifier|private
name|void
name|assertCannotRead
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|isVisible
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"cannot read "
operator|+
name|ref
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanSubmit (String ref, ProjectControl u)
specifier|private
name|void
name|assertCanSubmit
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|canSubmit
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"can submit "
operator|+
name|ref
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotSubmit (String ref, ProjectControl u)
specifier|private
name|void
name|assertCannotSubmit
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|canSubmit
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"can submit "
operator|+
name|ref
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanUpload (ProjectControl u)
specifier|private
name|void
name|assertCanUpload
parameter_list|(
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|canPushToAtLeastOneRef
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"can upload"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Capable
operator|.
name|OK
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCanUpload (String ref, ProjectControl u)
specifier|private
name|void
name|assertCanUpload
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|canUpload
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"can upload "
operator|+
name|ref
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotUpload (ProjectControl u)
specifier|private
name|void
name|assertCannotUpload
parameter_list|(
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|canPushToAtLeastOneRef
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"cannot upload"
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|Capable
operator|.
name|OK
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCannotUpload (String ref, ProjectControl u)
specifier|private
name|void
name|assertCannotUpload
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|canUpload
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"cannot upload "
operator|+
name|ref
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertBlocked (String p, String ref, ProjectControl u)
specifier|private
name|void
name|assertBlocked
parameter_list|(
name|String
name|p
parameter_list|,
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|isBlocked
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
name|p
operator|+
literal|" is blocked for "
operator|+
name|ref
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNotBlocked (String p, String ref, ProjectControl u)
specifier|private
name|void
name|assertNotBlocked
parameter_list|(
name|String
name|p
parameter_list|,
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|isBlocked
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
name|p
operator|+
literal|" is blocked for "
operator|+
name|ref
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanUpdate (String ref, ProjectControl u)
specifier|private
name|void
name|assertCanUpdate
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|canUpdate
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"can update "
operator|+
name|ref
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotUpdate (String ref, ProjectControl u)
specifier|private
name|void
name|assertCannotUpdate
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|canUpdate
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"cannot update "
operator|+
name|ref
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanForceUpdate (String ref, ProjectControl u)
specifier|private
name|void
name|assertCanForceUpdate
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|canForceUpdate
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"can force push "
operator|+
name|ref
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotForceUpdate (String ref, ProjectControl u)
specifier|private
name|void
name|assertCannotForceUpdate
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|canForceUpdate
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"cannot force push "
operator|+
name|ref
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanVote (int score, PermissionRange range)
specifier|private
name|void
name|assertCanVote
parameter_list|(
name|int
name|score
parameter_list|,
name|PermissionRange
name|range
parameter_list|)
block|{
name|assertThat
argument_list|(
name|range
operator|.
name|contains
argument_list|(
name|score
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"can vote "
operator|+
name|score
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotVote (int score, PermissionRange range)
specifier|private
name|void
name|assertCannotVote
parameter_list|(
name|int
name|score
parameter_list|,
name|PermissionRange
name|range
parameter_list|)
block|{
name|assertThat
argument_list|(
name|range
operator|.
name|contains
argument_list|(
name|score
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"cannot vote "
operator|+
name|score
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|field|fixers
specifier|private
specifier|final
name|AccountGroup
operator|.
name|UUID
name|fixers
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"test.fixers"
argument_list|)
decl_stmt|;
DECL|field|localKey
specifier|private
name|Project
operator|.
name|NameKey
name|localKey
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"local"
argument_list|)
decl_stmt|;
DECL|field|local
specifier|private
name|ProjectConfig
name|local
decl_stmt|;
DECL|field|parentKey
specifier|private
name|Project
operator|.
name|NameKey
name|parentKey
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
DECL|field|parent
specifier|private
name|ProjectConfig
name|parent
decl_stmt|;
DECL|field|util
specifier|private
specifier|final
name|Util
name|util
decl_stmt|;
DECL|method|RefControlTest ()
specifier|public
name|RefControlTest
parameter_list|()
block|{
name|util
operator|=
operator|new
name|Util
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|parent
operator|=
operator|new
name|ProjectConfig
argument_list|(
name|parentKey
argument_list|)
expr_stmt|;
name|parent
operator|.
name|load
argument_list|(
name|newRepository
argument_list|(
name|parentKey
argument_list|)
argument_list|)
expr_stmt|;
name|util
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|local
operator|=
operator|new
name|ProjectConfig
argument_list|(
name|localKey
argument_list|)
expr_stmt|;
name|local
operator|.
name|load
argument_list|(
name|newRepository
argument_list|(
name|localKey
argument_list|)
argument_list|)
expr_stmt|;
name|util
operator|.
name|add
argument_list|(
name|local
argument_list|)
expr_stmt|;
name|local
operator|.
name|getProject
argument_list|()
operator|.
name|setParentName
argument_list|(
name|parentKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOwnerProject ()
specifier|public
name|void
name|testOwnerProject
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|ADMIN
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|assertAdminsAreOwnersAndDevsAreNot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDenyOwnerProject ()
specifier|public
name|void
name|testDenyOwnerProject
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|ADMIN
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|DEVS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|assertAdminsAreOwnersAndDevsAreNot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockOwnerProject ()
specifier|public
name|void
name|testBlockOwnerProject
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|ADMIN
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|DEVS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|assertAdminsAreOwnersAndDevsAreNot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBranchDelegation1 ()
specifier|public
name|void
name|testBranchDelegation1
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|ADMIN
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/x/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|uDev
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertNotOwner
argument_list|(
name|uDev
argument_list|)
expr_stmt|;
name|assertOwnerAnyRef
argument_list|(
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBranchDelegation2 ()
specifier|public
name|void
name|testBranchDelegation2
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|ADMIN
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/x/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|fixers
argument_list|,
literal|"refs/heads/x/y/*"
argument_list|)
expr_stmt|;
name|doNotInherit
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
literal|"refs/heads/x/y/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|uDev
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertNotOwner
argument_list|(
name|uDev
argument_list|)
expr_stmt|;
name|assertOwnerAnyRef
argument_list|(
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|ProjectControl
name|uFix
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|fixers
argument_list|)
decl_stmt|;
name|assertNotOwner
argument_list|(
name|uFix
argument_list|)
expr_stmt|;
name|assertOwnerAnyRef
argument_list|(
name|uFix
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y/*"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y/bar"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/heads/x/*"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/heads/x/y"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/*"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInheritRead_SingleBranchDeniesUpload ()
specifier|public
name|void
name|testInheritRead_SingleBranchDeniesUpload
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/for/refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/foobar"
argument_list|)
expr_stmt|;
name|doNotInherit
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
literal|"refs/heads/foobar"
argument_list|)
expr_stmt|;
name|doNotInherit
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
literal|"refs/for/refs/heads/foobar"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|assertCanUpload
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|assertCanUpload
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCannotUpload
argument_list|(
literal|"refs/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockPushDrafts ()
specifier|public
name|void
name|testBlockPushDrafts
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/for/refs/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/drafts/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|assertCanUpload
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertBlocked
argument_list|(
name|PUSH
argument_list|,
literal|"refs/drafts/refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockPushDraftsUnblockAdmin ()
specifier|public
name|void
name|testBlockPushDraftsUnblockAdmin
parameter_list|()
block|{
name|block
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/drafts/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|ADMIN
argument_list|,
literal|"refs/drafts/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|ProjectControl
name|a
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
literal|"a"
argument_list|,
name|ADMIN
argument_list|)
decl_stmt|;
name|assertBlocked
argument_list|(
name|PUSH
argument_list|,
literal|"refs/drafts/refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertNotBlocked
argument_list|(
name|PUSH
argument_list|,
literal|"refs/drafts/refs/heads/master"
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInheritRead_SingleBranchDoesNotOverrideInherited ()
specifier|public
name|void
name|testInheritRead_SingleBranchDoesNotOverrideInherited
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/for/refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/foobar"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|assertCanUpload
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|assertCanUpload
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanUpload
argument_list|(
literal|"refs/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInheritDuplicateSections ()
specifier|public
name|void
name|testInheritDuplicateSections
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|ADMIN
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
literal|"a"
argument_list|,
name|ADMIN
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|=
operator|new
name|ProjectConfig
argument_list|(
name|localKey
argument_list|)
expr_stmt|;
name|local
operator|.
name|load
argument_list|(
name|newRepository
argument_list|(
name|localKey
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|.
name|getProject
argument_list|()
operator|.
name|setParentName
argument_list|(
name|parentKey
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|DEVS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
literal|"d"
argument_list|,
name|DEVS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInheritRead_OverrideWithDeny ()
specifier|public
name|void
name|testInheritRead_OverrideWithDeny
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|assertCannotRead
argument_list|(
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInheritRead_AppendWithDenyOfRef ()
specifier|public
name|void
name|testInheritRead_AppendWithDenyOfRef
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|assertCanRead
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/tags/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInheritRead_OverridesAndDeniesOfRef ()
specifier|public
name|void
name|testInheritRead_OverridesAndDeniesOfRef
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|assertCanRead
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|assertCannotRead
argument_list|(
literal|"refs/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCannotRead
argument_list|(
literal|"refs/tags/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInheritSubmit_OverridesAndDeniesOfRef ()
specifier|public
name|void
name|testInheritSubmit_OverridesAndDeniesOfRef
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|SUBMIT
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|local
argument_list|,
name|SUBMIT
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|SUBMIT
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|assertCannotSubmit
argument_list|(
literal|"refs/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCannotSubmit
argument_list|(
literal|"refs/tags/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanSubmit
argument_list|(
literal|"refs/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCannotUploadToAnyRef ()
specifier|public
name|void
name|testCannotUploadToAnyRef
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/for/refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|assertCannotUpload
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|assertCannotUpload
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUsernamePatternCanUploadToAnyRef ()
specifier|public
name|void
name|testUsernamePatternCanUploadToAnyRef
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/users/${username}/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
literal|"a-registered-user"
argument_list|)
decl_stmt|;
name|assertCanUpload
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUsernamePatternNonRegex ()
specifier|public
name|void
name|testUsernamePatternNonRegex
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|DEVS
argument_list|,
literal|"refs/sb/${username}/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
literal|"u"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|ProjectControl
name|d
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
literal|"d"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotRead
argument_list|(
literal|"refs/sb/d/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/sb/d/heads/foobar"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUsernamePatternWithRegex ()
specifier|public
name|void
name|testUsernamePatternWithRegex
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|DEVS
argument_list|,
literal|"^refs/sb/${username}/heads/.*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
literal|"d.v"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|ProjectControl
name|d
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
literal|"dev"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotRead
argument_list|(
literal|"refs/sb/dev/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/sb/dev/heads/foobar"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUsernameEmailPatternWithRegex ()
specifier|public
name|void
name|testUsernameEmailPatternWithRegex
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|DEVS
argument_list|,
literal|"^refs/sb/${username}/heads/.*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
literal|"d.v@ger-rit.org"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|ProjectControl
name|d
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
literal|"dev@ger-rit.org"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotRead
argument_list|(
literal|"refs/sb/dev@ger-rit.org/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/sb/dev@ger-rit.org/heads/foobar"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSortWithRegex ()
specifier|public
name|void
name|testSortWithRegex
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|DEVS
argument_list|,
literal|"^refs/heads/.*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"^refs/heads/.*-QA-.*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|ProjectControl
name|d
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/heads/foo-QA-bar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/heads/foo-QA-bar"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockRule_ParentBlocksChild ()
specifier|public
name|void
name|testBlockRule_ParentBlocksChild
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/tags/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/tags/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/tags/V10"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockRule_ParentBlocksChildEvenIfAlreadyBlockedInChild ()
specifier|public
name|void
name|testBlockRule_ParentBlocksChildEvenIfAlreadyBlockedInChild
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/tags/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/tags/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/tags/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/tags/V10"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockLabelRange_ParentBlocksChild ()
specifier|public
name|void
name|testBlockLabelRange_ParentBlocksChild
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|parent
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCanVote
argument_list|(
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockLabelRange_ParentBlocksChildEvenIfAlreadyBlockedInChild ()
specifier|public
name|void
name|testBlockLabelRange_ParentBlocksChildEvenIfAlreadyBlockedInChild
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|parent
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCanVote
argument_list|(
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInheritSubmit_AllowInChildDoesntAffectUnblockInParent ()
specifier|public
name|void
name|testInheritSubmit_AllowInChildDoesntAffectUnblockInParent
parameter_list|()
block|{
name|block
argument_list|(
name|parent
argument_list|,
name|SUBMIT
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|parent
argument_list|,
name|SUBMIT
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|SUBMIT
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|assertNotBlocked
argument_list|(
name|SUBMIT
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnblockNoForce ()
specifier|public
name|void
name|testUnblockNoForce
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCanUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnblockForce ()
specifier|public
name|void
name|testUnblockForce
parameter_list|()
block|{
name|PermissionRule
name|r
init|=
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
decl_stmt|;
name|r
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCanForceUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnblockForceWithAllowNoForce_NotPossible ()
specifier|public
name|void
name|testUnblockForceWithAllowNoForce_NotPossible
parameter_list|()
block|{
name|PermissionRule
name|r
init|=
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
decl_stmt|;
name|r
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotForceUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnblockMoreSpecificRef_Fails ()
specifier|public
name|void
name|testUnblockMoreSpecificRef_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnblockLargerScope_Fails ()
specifier|public
name|void
name|testUnblockLargerScope_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnblockInLocal_Fails ()
specifier|public
name|void
name|testUnblockInLocal_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|fixers
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|f
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|fixers
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnblockInParentBlockInLocal ()
specifier|public
name|void
name|testUnblockInParentBlockInLocal
parameter_list|()
block|{
name|block
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|d
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnblockVisibilityByRegisteredUsers ()
specifier|public
name|void
name|testUnblockVisibilityByRegisteredUsers
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|REGISTERED_USERS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|isVisibleByRegisteredUsers
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"u can read"
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnblockInLocalVisibilityByRegisteredUsers_Fails ()
specifier|public
name|void
name|testUnblockInLocalVisibilityByRegisteredUsers_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|REGISTERED_USERS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|isVisibleByRegisteredUsers
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"u can't read"
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnblockForceEditTopicName ()
specifier|public
name|void
name|testUnblockForceEditTopicName
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|EDIT_TOPIC_NAME
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|EDIT_TOPIC_NAME
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|canForceEditTopicName
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"u can edit topic name"
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnblockInLocalForceEditTopicName_Fails ()
specifier|public
name|void
name|testUnblockInLocalForceEditTopicName_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|parent
argument_list|,
name|EDIT_TOPIC_NAME
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|EDIT_TOPIC_NAME
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|REGISTERED_USERS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|canForceEditTopicName
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"u can't edit topic name"
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnblockRange ()
specifier|public
name|void
name|testUnblockRange
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|1
argument_list|,
operator|+
literal|1
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCanVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnblockRangeOnMoreSpecificRef_Fails ()
specifier|public
name|void
name|testUnblockRangeOnMoreSpecificRef_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|1
argument_list|,
operator|+
literal|1
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnblockRangeOnLargerScope_Fails ()
specifier|public
name|void
name|testUnblockRangeOnLargerScope_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|1
argument_list|,
operator|+
literal|1
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnblockInLocalRange_Fails ()
specifier|public
name|void
name|testUnblockInLocalRange_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|parent
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnblockRangeForChangeOwner ()
specifier|public
name|void
name|testUnblockRangeForChangeOwner
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|CHANGE_OWNER
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCanVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnblockRangeForNotChangeOwner ()
specifier|public
name|void
name|testUnblockRangeForNotChangeOwner
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|CHANGE_OWNER
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|util
operator|.
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateRefPatternsOK ()
specifier|public
name|void
name|testValidateRefPatternsOK
parameter_list|()
throws|throws
name|Exception
block|{
name|RefControl
operator|.
name|validateRefPattern
argument_list|(
literal|"refs/*"
argument_list|)
expr_stmt|;
name|RefControl
operator|.
name|validateRefPattern
argument_list|(
literal|"^refs/heads/*"
argument_list|)
expr_stmt|;
name|RefControl
operator|.
name|validateRefPattern
argument_list|(
literal|"^refs/tags/[0-9a-zA-Z-_.]+"
argument_list|)
expr_stmt|;
name|RefControl
operator|.
name|validateRefPattern
argument_list|(
literal|"refs/heads/review/${username}/*"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidNameException
operator|.
name|class
argument_list|)
DECL|method|testValidateBadRefPatternDoubleCaret ()
specifier|public
name|void
name|testValidateBadRefPatternDoubleCaret
parameter_list|()
throws|throws
name|Exception
block|{
name|RefControl
operator|.
name|validateRefPattern
argument_list|(
literal|"^^refs/*"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidNameException
operator|.
name|class
argument_list|)
DECL|method|testValidateBadRefPatternDanglingCharacter ()
specifier|public
name|void
name|testValidateBadRefPatternDanglingCharacter
parameter_list|()
throws|throws
name|Exception
block|{
name|RefControl
operator|.
name|validateRefPattern
argument_list|(
literal|"^refs/heads/tmp/sdk/[0-9]{3,3}_R[1-9][A-Z][0-9]{3,3}*"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateRefPatternNoDanglingCharacter ()
specifier|public
name|void
name|testValidateRefPatternNoDanglingCharacter
parameter_list|()
throws|throws
name|Exception
block|{
name|RefControl
operator|.
name|validateRefPattern
argument_list|(
literal|"^refs/heads/tmp/sdk/[0-9]{3,3}_R[1-9][A-Z][0-9]{3,3}"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

