begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MINUTES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeInserter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeJson
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|RevisionResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|InMemoryModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|LuceneQueryChangesV7Test
specifier|public
class|class
name|LuceneQueryChangesV7Test
extends|extends
name|AbstractQueryChangesTest
block|{
DECL|method|createInjector ()
specifier|protected
name|Injector
name|createInjector
parameter_list|()
block|{
name|Config
name|cfg
init|=
name|InMemoryModule
operator|.
name|newDefaultConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setInt
argument_list|(
literal|"index"
argument_list|,
literal|"lucene"
argument_list|,
literal|"testVersion"
argument_list|,
literal|7
argument_list|)
expr_stmt|;
return|return
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|InMemoryModule
argument_list|(
name|cfg
argument_list|)
argument_list|)
return|;
block|}
comment|// Tests for features not supported in V7.
annotation|@
name|Ignore
annotation|@
name|Override
annotation|@
name|Test
DECL|method|byProjectPrefix ()
specifier|public
name|void
name|byProjectPrefix
parameter_list|()
block|{}
comment|// End tests for features not supported in V7.
annotation|@
name|Test
DECL|method|pagination ()
specifier|public
name|void
name|pagination
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Change
argument_list|>
name|changes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|changes
operator|.
name|add
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Page forward and back through 3 pages of results.
name|QueryChanges
name|q
decl_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
decl_stmt|;
name|results
operator|=
name|query
argument_list|(
literal|"status:new limit:2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
name|newQuery
argument_list|(
literal|"status:new limit:2"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setSortKeyBefore
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|_sortkey
argument_list|)
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
name|newQuery
argument_list|(
literal|"status:new limit:2"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setSortKeyBefore
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|_sortkey
argument_list|)
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
name|newQuery
argument_list|(
literal|"status:new limit:2"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setSortKeyAfter
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|_sortkey
argument_list|)
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
name|newQuery
argument_list|(
literal|"status:new limit:2"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setSortKeyAfter
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|_sortkey
argument_list|)
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|updatedOrderWithSubMinuteResolution ()
specifier|public
name|void
name|updatedOrderWithSubMinuteResolution
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|ins1
operator|.
name|insert
argument_list|()
decl_stmt|;
name|Change
name|change2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
operator|<
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
decl_stmt|;
name|results
operator|=
name|query
argument_list|(
literal|"status:new"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|message
operator|=
literal|"toplevel"
expr_stmt|;
name|postReview
operator|.
name|apply
argument_list|(
operator|new
name|RevisionResource
argument_list|(
name|changes
operator|.
name|parse
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|ins1
operator|.
name|getPatchSet
argument_list|()
argument_list|)
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|change1
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
operator|>
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
operator|-
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
operator|<
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|1
argument_list|,
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
literal|"status:new"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Same order as before change1 was modified.
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sortKeyBreaksTiesOnChangeId ()
specifier|public
name|void
name|sortKeyBreaksTiesOnChangeId
parameter_list|()
throws|throws
name|Exception
block|{
name|clockStepMs
operator|=
literal|0
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|ins1
operator|.
name|insert
argument_list|()
decl_stmt|;
name|Change
name|change2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|message
operator|=
literal|"toplevel"
expr_stmt|;
name|postReview
operator|.
name|apply
argument_list|(
operator|new
name|RevisionResource
argument_list|(
name|changes
operator|.
name|parse
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|ins1
operator|.
name|getPatchSet
argument_list|()
argument_list|)
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|change1
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|change1
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|,
name|change2
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
init|=
name|query
argument_list|(
literal|"status:new"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Updated at the same time, 2> 1.
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

