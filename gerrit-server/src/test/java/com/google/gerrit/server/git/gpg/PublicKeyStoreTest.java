begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git.gpg
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|gpg
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|gpg
operator|.
name|PublicKeyStore
operator|.
name|keyIdToString
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|gpg
operator|.
name|PublicKeyStore
operator|.
name|keyObjectId
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|gpg
operator|.
name|PublicKeyStore
operator|.
name|keyToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKeyRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKeyRingCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|DfsRepositoryDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_class
DECL|class|PublicKeyStoreTest
specifier|public
class|class
name|PublicKeyStoreTest
block|{
DECL|field|tr
specifier|private
name|TestRepository
argument_list|<
name|?
argument_list|>
name|tr
decl_stmt|;
DECL|field|store
specifier|private
name|PublicKeyStore
name|store
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|tr
operator|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
operator|new
name|InMemoryRepository
argument_list|(
operator|new
name|DfsRepositoryDescription
argument_list|(
literal|"pubkeys"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|PublicKeyStore
argument_list|(
name|tr
operator|.
name|getRepository
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeyIdToString ()
specifier|public
name|void
name|testKeyIdToString
parameter_list|()
throws|throws
name|Exception
block|{
name|PGPPublicKey
name|key
init|=
name|TestKey
operator|.
name|key1
argument_list|()
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"46328A8C"
argument_list|,
name|keyIdToString
argument_list|(
name|key
operator|.
name|getKeyID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeyToString ()
specifier|public
name|void
name|testKeyToString
parameter_list|()
throws|throws
name|Exception
block|{
name|PGPPublicKey
name|key
init|=
name|TestKey
operator|.
name|key1
argument_list|()
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"46328A8C Testuser One<test1@example.com>"
operator|+
literal|" (04AE A7ED 2F82 1133 E5B1  28D1 ED06 25DC 4632 8A8C)"
argument_list|,
name|keyToString
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeyObjectId ()
specifier|public
name|void
name|testKeyObjectId
parameter_list|()
throws|throws
name|Exception
block|{
name|PGPPublicKey
name|key
init|=
name|TestKey
operator|.
name|key1
argument_list|()
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
name|String
name|objId
init|=
name|keyObjectId
argument_list|(
name|key
operator|.
name|getKeyID
argument_list|()
argument_list|)
operator|.
name|name
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ed0625dc46328a8c000000000000000000000000"
argument_list|,
name|objId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|keyIdToString
argument_list|(
name|key
operator|.
name|getKeyID
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|objId
operator|.
name|substring
argument_list|(
literal|8
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGet ()
specifier|public
name|void
name|testGet
parameter_list|()
throws|throws
name|Exception
block|{
name|TestKey
name|key1
init|=
name|TestKey
operator|.
name|key1
argument_list|()
decl_stmt|;
name|tr
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|REFS_GPG_KEYS
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
name|keyObjectId
argument_list|(
name|key1
operator|.
name|getKeyId
argument_list|()
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|key1
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|TestKey
name|key2
init|=
name|TestKey
operator|.
name|key2
argument_list|()
decl_stmt|;
name|tr
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|REFS_GPG_KEYS
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
name|keyObjectId
argument_list|(
name|key2
operator|.
name|getKeyId
argument_list|()
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|key2
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertKeys
argument_list|(
name|key1
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|key1
argument_list|)
expr_stmt|;
name|assertKeys
argument_list|(
name|key2
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|key2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetMultiple ()
specifier|public
name|void
name|testGetMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|TestKey
name|key1
init|=
name|TestKey
operator|.
name|key1
argument_list|()
decl_stmt|;
name|TestKey
name|key2
init|=
name|TestKey
operator|.
name|key2
argument_list|()
decl_stmt|;
name|tr
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|REFS_GPG_KEYS
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
name|keyObjectId
argument_list|(
name|key1
operator|.
name|getKeyId
argument_list|()
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|key1
operator|.
name|getPublicKeyArmored
argument_list|()
comment|// Mismatched for this key ID, but we can still read it out.
operator|+
name|key2
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertKeys
argument_list|(
name|key1
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|key1
argument_list|,
name|key2
argument_list|)
expr_stmt|;
block|}
DECL|method|assertKeys (long keyId, TestKey... expected)
specifier|private
name|void
name|assertKeys
parameter_list|(
name|long
name|keyId
parameter_list|,
name|TestKey
modifier|...
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|expectedStrings
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TestKey
name|k
range|:
name|expected
control|)
block|{
name|expectedStrings
operator|.
name|add
argument_list|(
name|keyToString
argument_list|(
name|k
operator|.
name|getPublicKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PGPPublicKeyRingCollection
name|actual
init|=
name|store
operator|.
name|get
argument_list|(
name|keyId
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|actualStrings
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PGPPublicKeyRing
name|k
range|:
name|actual
control|)
block|{
name|actualStrings
operator|.
name|add
argument_list|(
name|keyToString
argument_list|(
name|k
operator|.
name|getPublicKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedStrings
argument_list|,
name|actualStrings
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

