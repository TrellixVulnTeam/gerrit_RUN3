begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|HashtagsTest
specifier|public
class|class
name|HashtagsTest
block|{
annotation|@
name|Test
DECL|method|emptyCommitMessage ()
specifier|public
name|void
name|emptyCommitMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|HashtagsUtil
operator|.
name|extractTags
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nullCommitMessage ()
specifier|public
name|void
name|nullCommitMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|HashtagsUtil
operator|.
name|extractTags
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noHashtags ()
specifier|public
name|void
name|noHashtags
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|commitMessage
init|=
literal|"Subject\n\nLine 1\n\nLine 2"
decl_stmt|;
name|assertThat
argument_list|(
name|HashtagsUtil
operator|.
name|extractTags
argument_list|(
name|commitMessage
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleHashtag ()
specifier|public
name|void
name|singleHashtag
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|commitMessage
init|=
literal|"#Subject\n\nLine 1\n\nLine 2"
decl_stmt|;
name|assertThat
argument_list|(
name|HashtagsUtil
operator|.
name|extractTags
argument_list|(
name|commitMessage
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"Subject"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleHashtagNumeric ()
specifier|public
name|void
name|singleHashtagNumeric
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|commitMessage
init|=
literal|"Subject\n\n#123\n\nLine 2"
decl_stmt|;
name|assertThat
argument_list|(
name|HashtagsUtil
operator|.
name|extractTags
argument_list|(
name|commitMessage
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multipleHashtags ()
specifier|public
name|void
name|multipleHashtags
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|commitMessage
init|=
literal|"#Subject\n\n#Hashtag\n\nLine 2"
decl_stmt|;
name|assertThat
argument_list|(
name|HashtagsUtil
operator|.
name|extractTags
argument_list|(
name|commitMessage
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"Subject"
argument_list|,
literal|"Hashtag"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|repeatedHashtag ()
specifier|public
name|void
name|repeatedHashtag
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|commitMessage
init|=
literal|"#Subject\n\n#Hashtag1\n\n#Hashtag2\n\n#Hashtag1"
decl_stmt|;
name|assertThat
argument_list|(
name|HashtagsUtil
operator|.
name|extractTags
argument_list|(
name|commitMessage
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"Subject"
argument_list|,
literal|"Hashtag1"
argument_list|,
literal|"Hashtag2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multipleHashtagsNoSpaces ()
specifier|public
name|void
name|multipleHashtagsNoSpaces
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|commitMessage
init|=
literal|"Subject\n\n#Hashtag1#Hashtag2"
decl_stmt|;
name|assertThat
argument_list|(
name|HashtagsUtil
operator|.
name|extractTags
argument_list|(
name|commitMessage
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"Hashtag1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hyphenatedHashtag ()
specifier|public
name|void
name|hyphenatedHashtag
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|commitMessage
init|=
literal|"Subject\n\n#Hyphenated-Hashtag"
decl_stmt|;
name|assertThat
argument_list|(
name|HashtagsUtil
operator|.
name|extractTags
argument_list|(
name|commitMessage
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"Hyphenated-Hashtag"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|underscoredHashtag ()
specifier|public
name|void
name|underscoredHashtag
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|commitMessage
init|=
literal|"Subject\n\n#Underscored_Hashtag"
decl_stmt|;
name|assertThat
argument_list|(
name|HashtagsUtil
operator|.
name|extractTags
argument_list|(
name|commitMessage
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"Underscored_Hashtag"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hashtagsWithAccentedCharacters ()
specifier|public
name|void
name|hashtagsWithAccentedCharacters
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|commitMessage
init|=
literal|"Jag #mÃ¥ste #Ã¶va pÃ¥ min #Svenska!\n\n"
operator|+
literal|"Jag behÃ¶ver en #lÃ¤kare."
decl_stmt|;
name|assertThat
argument_list|(
name|HashtagsUtil
operator|.
name|extractTags
argument_list|(
name|commitMessage
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"mÃ¥ste"
argument_list|,
literal|"Ã¶va"
argument_list|,
literal|"Svenska"
argument_list|,
literal|"lÃ¤kare"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hashWithoutHashtag ()
specifier|public
name|void
name|hashWithoutHashtag
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|commitMessage
init|=
literal|"Subject\n\n# Text"
decl_stmt|;
name|assertThat
argument_list|(
name|HashtagsUtil
operator|.
name|extractTags
argument_list|(
name|commitMessage
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

