begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.config
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
operator|.
name|NameKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|RepositoryConfigTest
specifier|public
class|class
name|RepositoryConfigTest
block|{
DECL|field|cfg
specifier|private
name|Config
name|cfg
decl_stmt|;
DECL|field|repoCfg
specifier|private
name|RepositoryConfig
name|repoCfg
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cfg
operator|=
operator|new
name|Config
argument_list|()
expr_stmt|;
name|repoCfg
operator|=
operator|new
name|RepositoryConfig
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultSubmitTypeWhenNotConfigured ()
specifier|public
name|void
name|testDefaultSubmitTypeWhenNotConfigured
parameter_list|()
block|{
name|assertThat
argument_list|(
name|repoCfg
operator|.
name|getDefaultSubmitType
argument_list|(
operator|new
name|NameKey
argument_list|(
literal|"someProject"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SubmitType
operator|.
name|MERGE_IF_NECESSARY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultSubmitTypeForStarFilter ()
specifier|public
name|void
name|testDefaultSubmitTypeForStarFilter
parameter_list|()
block|{
name|configureDefaultSubmitType
argument_list|(
literal|"*"
argument_list|,
name|SubmitType
operator|.
name|CHERRY_PICK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repoCfg
operator|.
name|getDefaultSubmitType
argument_list|(
operator|new
name|NameKey
argument_list|(
literal|"someProject"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SubmitType
operator|.
name|CHERRY_PICK
argument_list|)
expr_stmt|;
name|configureDefaultSubmitType
argument_list|(
literal|"*"
argument_list|,
name|SubmitType
operator|.
name|FAST_FORWARD_ONLY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repoCfg
operator|.
name|getDefaultSubmitType
argument_list|(
operator|new
name|NameKey
argument_list|(
literal|"someProject"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SubmitType
operator|.
name|FAST_FORWARD_ONLY
argument_list|)
expr_stmt|;
name|configureDefaultSubmitType
argument_list|(
literal|"*"
argument_list|,
name|SubmitType
operator|.
name|REBASE_IF_NECESSARY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repoCfg
operator|.
name|getDefaultSubmitType
argument_list|(
operator|new
name|NameKey
argument_list|(
literal|"someProject"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SubmitType
operator|.
name|REBASE_IF_NECESSARY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultSubmitTypeForSpecificFilter ()
specifier|public
name|void
name|testDefaultSubmitTypeForSpecificFilter
parameter_list|()
block|{
name|configureDefaultSubmitType
argument_list|(
literal|"someProject"
argument_list|,
name|SubmitType
operator|.
name|CHERRY_PICK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repoCfg
operator|.
name|getDefaultSubmitType
argument_list|(
operator|new
name|NameKey
argument_list|(
literal|"someOtherProject"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SubmitType
operator|.
name|MERGE_IF_NECESSARY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repoCfg
operator|.
name|getDefaultSubmitType
argument_list|(
operator|new
name|NameKey
argument_list|(
literal|"someProject"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SubmitType
operator|.
name|CHERRY_PICK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultSubmitTypeForStartWithFilter ()
specifier|public
name|void
name|testDefaultSubmitTypeForStartWithFilter
parameter_list|()
block|{
name|configureDefaultSubmitType
argument_list|(
literal|"somePath/somePath/*"
argument_list|,
name|SubmitType
operator|.
name|REBASE_IF_NECESSARY
argument_list|)
expr_stmt|;
name|configureDefaultSubmitType
argument_list|(
literal|"somePath/*"
argument_list|,
name|SubmitType
operator|.
name|CHERRY_PICK
argument_list|)
expr_stmt|;
name|configureDefaultSubmitType
argument_list|(
literal|"*"
argument_list|,
name|SubmitType
operator|.
name|MERGE_ALWAYS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repoCfg
operator|.
name|getDefaultSubmitType
argument_list|(
operator|new
name|NameKey
argument_list|(
literal|"someProject"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SubmitType
operator|.
name|MERGE_ALWAYS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repoCfg
operator|.
name|getDefaultSubmitType
argument_list|(
operator|new
name|NameKey
argument_list|(
literal|"somePath/someProject"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SubmitType
operator|.
name|CHERRY_PICK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repoCfg
operator|.
name|getDefaultSubmitType
argument_list|(
operator|new
name|NameKey
argument_list|(
literal|"somePath/somePath/someProject"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SubmitType
operator|.
name|REBASE_IF_NECESSARY
argument_list|)
expr_stmt|;
block|}
DECL|method|configureDefaultSubmitType (String projectFilter, SubmitType submitType)
specifier|private
name|void
name|configureDefaultSubmitType
parameter_list|(
name|String
name|projectFilter
parameter_list|,
name|SubmitType
name|submitType
parameter_list|)
block|{
name|cfg
operator|.
name|setString
argument_list|(
name|RepositoryConfig
operator|.
name|SECTION_NAME
argument_list|,
name|projectFilter
argument_list|,
name|RepositoryConfig
operator|.
name|DEFAULT_SUBMIT_TYPE_NAME
argument_list|,
name|submitType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOwnerGroupsWhenNotConfigured ()
specifier|public
name|void
name|testOwnerGroupsWhenNotConfigured
parameter_list|()
block|{
name|assertThat
argument_list|(
name|repoCfg
operator|.
name|getOwnerGroups
argument_list|(
operator|new
name|NameKey
argument_list|(
literal|"someProject"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOwnerGroupsForStarFilter ()
specifier|public
name|void
name|testOwnerGroupsForStarFilter
parameter_list|()
block|{
name|String
index|[]
name|ownerGroups
init|=
operator|new
name|String
index|[]
block|{
literal|"group1"
block|,
literal|"group2"
block|}
decl_stmt|;
name|configureOwnerGroups
argument_list|(
literal|"*"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ownerGroups
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repoCfg
operator|.
name|getOwnerGroups
argument_list|(
operator|new
name|NameKey
argument_list|(
literal|"someProject"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ownerGroups
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOwnerGroupsForSpecificFilter ()
specifier|public
name|void
name|testOwnerGroupsForSpecificFilter
parameter_list|()
block|{
name|String
index|[]
name|ownerGroups
init|=
operator|new
name|String
index|[]
block|{
literal|"group1"
block|,
literal|"group2"
block|}
decl_stmt|;
name|configureOwnerGroups
argument_list|(
literal|"someProject"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ownerGroups
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repoCfg
operator|.
name|getOwnerGroups
argument_list|(
operator|new
name|NameKey
argument_list|(
literal|"someOtherProject"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repoCfg
operator|.
name|getOwnerGroups
argument_list|(
operator|new
name|NameKey
argument_list|(
literal|"someProject"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ownerGroups
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOwnerGroupsForStartWithFilter ()
specifier|public
name|void
name|testOwnerGroupsForStartWithFilter
parameter_list|()
block|{
name|String
index|[]
name|ownerGroups1
init|=
operator|new
name|String
index|[]
block|{
literal|"group1"
block|}
decl_stmt|;
name|String
index|[]
name|ownerGroups2
init|=
operator|new
name|String
index|[]
block|{
literal|"group2"
block|}
decl_stmt|;
name|String
index|[]
name|ownerGroups3
init|=
operator|new
name|String
index|[]
block|{
literal|"group3"
block|}
decl_stmt|;
name|configureOwnerGroups
argument_list|(
literal|"*"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ownerGroups1
argument_list|)
argument_list|)
expr_stmt|;
name|configureOwnerGroups
argument_list|(
literal|"somePath/*"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ownerGroups2
argument_list|)
argument_list|)
expr_stmt|;
name|configureOwnerGroups
argument_list|(
literal|"somePath/somePath/*"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ownerGroups3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repoCfg
operator|.
name|getOwnerGroups
argument_list|(
operator|new
name|NameKey
argument_list|(
literal|"someProject"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ownerGroups1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repoCfg
operator|.
name|getOwnerGroups
argument_list|(
operator|new
name|NameKey
argument_list|(
literal|"somePath/someProject"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ownerGroups2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repoCfg
operator|.
name|getOwnerGroups
argument_list|(
operator|new
name|NameKey
argument_list|(
literal|"somePath/somePath/someProject"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ownerGroups3
argument_list|)
expr_stmt|;
block|}
DECL|method|configureOwnerGroups (String projectFilter, List<String> ownerGroups)
specifier|private
name|void
name|configureOwnerGroups
parameter_list|(
name|String
name|projectFilter
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|ownerGroups
parameter_list|)
block|{
name|cfg
operator|.
name|setStringList
argument_list|(
name|RepositoryConfig
operator|.
name|SECTION_NAME
argument_list|,
name|projectFilter
argument_list|,
name|RepositoryConfig
operator|.
name|OWNER_GROUP_NAME
argument_list|,
name|ownerGroups
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

