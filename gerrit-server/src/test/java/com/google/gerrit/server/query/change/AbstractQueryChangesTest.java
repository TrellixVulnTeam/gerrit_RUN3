begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|DAYS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MINUTES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|TopLevelResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lifecycle
operator|.
name|LifecycleManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AuthRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeInserter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeJson
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|PostReview
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|RevisionResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|CreateProject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|SchemaCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|ThreadLocalRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|InMemoryDatabase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|InMemoryRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeUtils
operator|.
name|MillisProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_class
annotation|@
name|Ignore
DECL|class|AbstractQueryChangesTest
specifier|public
specifier|abstract
class|class
name|AbstractQueryChangesTest
block|{
DECL|field|TLR
specifier|private
specifier|static
specifier|final
name|TopLevelResource
name|TLR
init|=
name|TopLevelResource
operator|.
name|INSTANCE
decl_stmt|;
DECL|field|accountManager
annotation|@
name|Inject
specifier|protected
name|AccountManager
name|accountManager
decl_stmt|;
DECL|field|changeControlFactory
annotation|@
name|Inject
specifier|protected
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
DECL|field|changeFactory
annotation|@
name|Inject
specifier|protected
name|ChangeInserter
operator|.
name|Factory
name|changeFactory
decl_stmt|;
DECL|field|projectFactory
annotation|@
name|Inject
specifier|protected
name|CreateProject
operator|.
name|Factory
name|projectFactory
decl_stmt|;
DECL|field|userFactory
annotation|@
name|Inject
specifier|protected
name|IdentifiedUser
operator|.
name|RequestFactory
name|userFactory
decl_stmt|;
DECL|field|schemaFactory
annotation|@
name|Inject
specifier|protected
name|InMemoryDatabase
name|schemaFactory
decl_stmt|;
DECL|field|repoManager
annotation|@
name|Inject
specifier|protected
name|InMemoryRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|postReview
annotation|@
name|Inject
specifier|protected
name|PostReview
name|postReview
decl_stmt|;
DECL|field|projectControlFactory
annotation|@
name|Inject
specifier|protected
name|ProjectControl
operator|.
name|GenericFactory
name|projectControlFactory
decl_stmt|;
DECL|field|queryProvider
annotation|@
name|Inject
specifier|protected
name|Provider
argument_list|<
name|QueryChanges
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|schemaCreator
annotation|@
name|Inject
specifier|protected
name|SchemaCreator
name|schemaCreator
decl_stmt|;
DECL|field|requestContext
annotation|@
name|Inject
specifier|protected
name|ThreadLocalRequestContext
name|requestContext
decl_stmt|;
DECL|field|lifecycle
specifier|protected
name|LifecycleManager
name|lifecycle
decl_stmt|;
DECL|field|db
specifier|protected
name|ReviewDb
name|db
decl_stmt|;
DECL|field|userId
specifier|protected
name|Account
operator|.
name|Id
name|userId
decl_stmt|;
DECL|field|user
specifier|protected
name|CurrentUser
name|user
decl_stmt|;
DECL|field|clockStepMs
specifier|protected
specifier|volatile
name|long
name|clockStepMs
decl_stmt|;
DECL|method|createInjector ()
specifier|protected
specifier|abstract
name|Injector
name|createInjector
parameter_list|()
function_decl|;
annotation|@
name|Before
DECL|method|setUpInjector ()
specifier|public
name|void
name|setUpInjector
parameter_list|()
throws|throws
name|Exception
block|{
name|Injector
name|injector
init|=
name|createInjector
argument_list|()
decl_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|lifecycle
operator|=
operator|new
name|LifecycleManager
argument_list|()
expr_stmt|;
name|lifecycle
operator|.
name|add
argument_list|(
name|injector
argument_list|)
expr_stmt|;
name|lifecycle
operator|.
name|start
argument_list|()
expr_stmt|;
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
expr_stmt|;
name|schemaCreator
operator|.
name|create
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|userId
operator|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"user"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
expr_stmt|;
name|user
operator|=
name|userFactory
operator|.
name|create
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
operator|new
name|RequestContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CurrentUser
name|getCurrentUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
annotation|@
name|Override
specifier|public
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|getReviewDbProvider
parameter_list|()
block|{
return|return
name|Providers
operator|.
name|of
argument_list|(
name|db
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDownInjector ()
specifier|public
name|void
name|tearDownInjector
parameter_list|()
block|{
if|if
condition|(
name|lifecycle
operator|!=
literal|null
condition|)
block|{
name|lifecycle
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|requestContext
operator|.
name|setContext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|InMemoryDatabase
operator|.
name|drop
argument_list|(
name|schemaFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setMillisProvider ()
specifier|public
name|void
name|setMillisProvider
parameter_list|()
block|{
name|clockStepMs
operator|=
literal|1
expr_stmt|;
specifier|final
name|AtomicLong
name|clockMs
init|=
operator|new
name|AtomicLong
argument_list|(
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|ChangeUtil
operator|.
name|SORT_KEY_EPOCH_MINS
argument_list|,
name|MINUTES
argument_list|)
operator|+
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|60
argument_list|,
name|DAYS
argument_list|)
argument_list|)
decl_stmt|;
name|DateTimeUtils
operator|.
name|setCurrentMillisProvider
argument_list|(
operator|new
name|MillisProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getMillis
parameter_list|()
block|{
return|return
name|clockMs
operator|.
name|getAndAdd
argument_list|(
name|clockStepMs
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|resetMillisProvider ()
specifier|public
name|void
name|resetMillisProvider
parameter_list|()
block|{
name|DateTimeUtils
operator|.
name|setCurrentMillisSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byId ()
specifier|public
name|void
name|byId
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|Change
name|change2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"12345"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|queryOne
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|queryOne
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byKey ()
specifier|public
name|void
name|byKey
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"I0000000000000000000000000000000000000000"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|36
condition|;
name|i
operator|++
control|)
block|{
name|String
name|q
init|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|41
operator|-
name|i
argument_list|)
decl_stmt|;
name|assertResultEquals
argument_list|(
literal|"result for "
operator|+
name|q
argument_list|,
name|change
argument_list|,
name|queryOne
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|byStatus ()
specifier|public
name|void
name|byStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|ins1
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change1
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|ins1
operator|.
name|insert
argument_list|()
expr_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|ins2
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change2
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|ins2
operator|.
name|insert
argument_list|()
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|queryOne
argument_list|(
literal|"status:new"
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|queryOne
argument_list|(
literal|"is:new"
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|queryOne
argument_list|(
literal|"status:merged"
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|queryOne
argument_list|(
literal|"is:merged"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byStatusOpen ()
specifier|public
name|void
name|byStatusOpen
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|ins1
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change1
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|ins1
operator|.
name|insert
argument_list|()
expr_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|ins2
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change2
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|DRAFT
argument_list|)
expr_stmt|;
name|ins2
operator|.
name|insert
argument_list|()
expr_stmt|;
name|ChangeInserter
name|ins3
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change3
init|=
name|ins3
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change3
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|ins3
operator|.
name|insert
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
decl_stmt|;
name|results
operator|=
name|query
argument_list|(
literal|"status:open"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
literal|"is:open"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byStatusClosed ()
specifier|public
name|void
name|byStatusClosed
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|ins1
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change1
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|ins1
operator|.
name|insert
argument_list|()
expr_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|ins2
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change2
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
argument_list|)
expr_stmt|;
name|ins2
operator|.
name|insert
argument_list|()
expr_stmt|;
name|ChangeInserter
name|ins3
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change3
init|=
name|ins3
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change3
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|ins3
operator|.
name|insert
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
decl_stmt|;
name|results
operator|=
name|query
argument_list|(
literal|"status:closed"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
literal|"is:closed"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byCommit ()
specifier|public
name|void
name|byCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ins
operator|.
name|insert
argument_list|()
expr_stmt|;
name|String
name|sha
init|=
name|ins
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"0000000000000000000000000000000000000000"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|36
condition|;
name|i
operator|++
control|)
block|{
name|String
name|q
init|=
name|sha
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|40
operator|-
name|i
argument_list|)
decl_stmt|;
name|assertResultEquals
argument_list|(
literal|"result for "
operator|+
name|q
argument_list|,
name|ins
operator|.
name|getChange
argument_list|()
argument_list|,
name|queryOne
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|byOwner ()
specifier|public
name|void
name|byOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|userId
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|int
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|Change
name|change2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|user2
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|queryOne
argument_list|(
literal|"owner:"
operator|+
name|userId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|queryOne
argument_list|(
literal|"owner:"
operator|+
name|user2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byOwnerIn ()
specifier|public
name|void
name|byOwnerIn
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|userId
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|int
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|Change
name|change2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|user2
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|queryOne
argument_list|(
literal|"ownerin:Administrators"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
init|=
name|query
argument_list|(
literal|"ownerin:\"Registered Users\""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|results
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byProject ()
specifier|public
name|void
name|byProject
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo1
init|=
name|createProject
argument_list|(
literal|"repo1"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo2
init|=
name|createProject
argument_list|(
literal|"repo2"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|newChange
argument_list|(
name|repo1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|Change
name|change2
init|=
name|newChange
argument_list|(
name|repo2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"project:foo"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|queryOne
argument_list|(
literal|"project:repo1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|queryOne
argument_list|(
literal|"project:repo2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byBranchAndRef ()
specifier|public
name|void
name|byBranchAndRef
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"master"
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|Change
name|change2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"branch"
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"branch:foo"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|queryOne
argument_list|(
literal|"branch:master"
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|queryOne
argument_list|(
literal|"branch:refs/heads/master"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"ref:master"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|queryOne
argument_list|(
literal|"ref:refs/heads/master"
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|queryOne
argument_list|(
literal|"branch:refs/heads/master"
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|queryOne
argument_list|(
literal|"branch:branch"
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|queryOne
argument_list|(
literal|"branch:refs/heads/branch"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"ref:branch"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|queryOne
argument_list|(
literal|"ref:refs/heads/branch"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byTopic ()
specifier|public
name|void
name|byTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|ins1
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change1
operator|.
name|setTopic
argument_list|(
literal|"feature1"
argument_list|)
expr_stmt|;
name|ins1
operator|.
name|insert
argument_list|()
expr_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|ins2
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change2
operator|.
name|setTopic
argument_list|(
literal|"feature2"
argument_list|)
expr_stmt|;
name|ins2
operator|.
name|insert
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"topic:foo"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|queryOne
argument_list|(
literal|"topic:feature1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|queryOne
argument_list|(
literal|"topic:feature2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byMessageExact ()
specifier|public
name|void
name|byMessageExact
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit1
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"one"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|RevCommit
name|commit2
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"two"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"topic:foo"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|queryOne
argument_list|(
literal|"message:one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|queryOne
argument_list|(
literal|"message:two"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byLabel ()
specifier|public
name|void
name|byLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|ins
operator|.
name|insert
argument_list|()
decl_stmt|;
name|ChangeControl
name|ctl
init|=
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|change
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|PostReview
operator|.
name|Input
name|input
init|=
operator|new
name|PostReview
operator|.
name|Input
argument_list|()
decl_stmt|;
name|input
operator|.
name|message
operator|=
literal|"toplevel"
expr_stmt|;
name|input
operator|.
name|labels
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|Short
operator|>
name|of
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|postReview
operator|.
name|apply
argument_list|(
operator|new
name|RevisionResource
argument_list|(
operator|new
name|ChangeResource
argument_list|(
name|ctl
argument_list|)
argument_list|,
name|ins
operator|.
name|getPatchSet
argument_list|()
argument_list|)
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"label:Code-Review=-2"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"label:Code-Review-2"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"label:Code-Review=-1"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"label:Code-Review-1"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"label:Code-Review=0"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change
argument_list|,
name|queryOne
argument_list|(
literal|"label:Code-Review=+1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change
argument_list|,
name|queryOne
argument_list|(
literal|"label:Code-Review=1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change
argument_list|,
name|queryOne
argument_list|(
literal|"label:Code-Review+1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"label:Code-Review=+2"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"label:Code-Review=2"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"label:Code-Review+2"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO(dborowitz):> and< are broken at head.
name|assertResultEquals
argument_list|(
name|change
argument_list|,
name|queryOne
argument_list|(
literal|"label:Code-Review>=0"
argument_list|)
argument_list|)
expr_stmt|;
comment|//assertResultEquals(change, queryOne("label:Code-Review>0"));
name|assertResultEquals
argument_list|(
name|change
argument_list|,
name|queryOne
argument_list|(
literal|"label:Code-Review>=1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//assertTrue(query("label:Code-Review>1").isEmpty());
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"label:Code-Review>=2"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change
argument_list|,
name|queryOne
argument_list|(
literal|"label: Code-Review<=2"
argument_list|)
argument_list|)
expr_stmt|;
comment|//assertResultEquals(change, queryOne("label: Code-Review<2"));
name|assertResultEquals
argument_list|(
name|change
argument_list|,
name|queryOne
argument_list|(
literal|"label: Code-Review<=1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//assertTrue(query("label: Code-Review<1").isEmpty());
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"label: Code-Review<=0"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"label:Code-Review=+1,anotheruser"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change
argument_list|,
name|queryOne
argument_list|(
literal|"label:Code-Review=+1,user"
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change
argument_list|,
name|queryOne
argument_list|(
literal|"label:Code-Review=+1,user=user"
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change
argument_list|,
name|queryOne
argument_list|(
literal|"label:Code-Review=+1,Administrators"
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change
argument_list|,
name|queryOne
argument_list|(
literal|"label:Code-Review=+1,group=Administrators"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|limit ()
specifier|public
name|void
name|limit
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|last
init|=
literal|null
decl_stmt|;
name|int
name|n
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|last
operator|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|n
operator|+
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|results
operator|=
name|query
argument_list|(
literal|"status:new limit:"
operator|+
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|i
argument_list|,
name|n
argument_list|)
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|last
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pagination ()
specifier|public
name|void
name|pagination
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Change
argument_list|>
name|changes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|changes
operator|.
name|add
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Page forward and back through 3 pages of results.
name|QueryChanges
name|q
decl_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
decl_stmt|;
name|results
operator|=
name|query
argument_list|(
literal|"status:new limit:2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
name|newQuery
argument_list|(
literal|"status:new limit:2"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setSortKeyBefore
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|_sortkey
argument_list|)
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
name|newQuery
argument_list|(
literal|"status:new limit:2"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setSortKeyBefore
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|_sortkey
argument_list|)
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
name|newQuery
argument_list|(
literal|"status:new limit:2"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setSortKeyAfter
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|_sortkey
argument_list|)
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
name|newQuery
argument_list|(
literal|"status:new limit:2"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setSortKeyAfter
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|_sortkey
argument_list|)
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sortKeyWithMinuteResolution ()
specifier|public
name|void
name|sortKeyWithMinuteResolution
parameter_list|()
throws|throws
name|Exception
block|{
name|clockStepMs
operator|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|2
argument_list|,
name|MINUTES
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|ins1
operator|.
name|insert
argument_list|()
decl_stmt|;
name|ChangeControl
name|ctl1
init|=
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|change1
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
operator|<
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
decl_stmt|;
name|results
operator|=
name|query
argument_list|(
literal|"status:new"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|PostReview
operator|.
name|Input
name|input
init|=
operator|new
name|PostReview
operator|.
name|Input
argument_list|()
decl_stmt|;
name|input
operator|.
name|message
operator|=
literal|"toplevel"
expr_stmt|;
name|postReview
operator|.
name|apply
argument_list|(
operator|new
name|RevisionResource
argument_list|(
operator|new
name|ChangeResource
argument_list|(
name|ctl1
argument_list|)
argument_list|,
name|ins1
operator|.
name|getPatchSet
argument_list|()
argument_list|)
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|change1
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
operator|>
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
operator|-
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
operator|>
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|1
argument_list|,
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
literal|"status:new"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// change1 moved to the top.
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sortKeyWithSubMinuteResolution ()
specifier|public
name|void
name|sortKeyWithSubMinuteResolution
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|ins1
operator|.
name|insert
argument_list|()
decl_stmt|;
name|ChangeControl
name|ctl1
init|=
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|change1
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
operator|<
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
decl_stmt|;
name|results
operator|=
name|query
argument_list|(
literal|"status:new"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|PostReview
operator|.
name|Input
name|input
init|=
operator|new
name|PostReview
operator|.
name|Input
argument_list|()
decl_stmt|;
name|input
operator|.
name|message
operator|=
literal|"toplevel"
expr_stmt|;
name|postReview
operator|.
name|apply
argument_list|(
operator|new
name|RevisionResource
argument_list|(
operator|new
name|ChangeResource
argument_list|(
name|ctl1
argument_list|)
argument_list|,
name|ins1
operator|.
name|getPatchSet
argument_list|()
argument_list|)
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|change1
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
operator|>
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
operator|-
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
operator|<
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|1
argument_list|,
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
literal|"status:new"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Same order as before change1 was modified.
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sortKeyBreaksTiesOnChangeId ()
specifier|public
name|void
name|sortKeyBreaksTiesOnChangeId
parameter_list|()
throws|throws
name|Exception
block|{
name|clockStepMs
operator|=
literal|0
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|Change
name|change2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|change1
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|,
name|change2
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
init|=
name|query
argument_list|(
literal|"status:new"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newChange ( TestRepository<InMemoryRepository> repo, @Nullable RevCommit commit, @Nullable String key, @Nullable Integer owner, @Nullable String branch)
specifier|protected
name|ChangeInserter
name|newChange
parameter_list|(
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
parameter_list|,
annotation|@
name|Nullable
name|RevCommit
name|commit
parameter_list|,
annotation|@
name|Nullable
name|String
name|key
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|owner
parameter_list|,
annotation|@
name|Nullable
name|String
name|branch
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|commit
operator|==
literal|null
condition|)
block|{
name|commit
operator|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"message"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Account
operator|.
name|Id
name|ownerId
init|=
name|owner
operator|!=
literal|null
condition|?
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|owner
argument_list|)
else|:
name|userId
decl_stmt|;
name|branch
operator|=
name|Objects
operator|.
name|firstNonNull
argument_list|(
name|branch
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|branch
operator|.
name|startsWith
argument_list|(
literal|"refs/heads/"
argument_list|)
condition|)
block|{
name|branch
operator|=
literal|"refs/heads/"
operator|+
name|branch
expr_stmt|;
block|}
name|Project
operator|.
name|NameKey
name|project
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|repo
operator|.
name|getRepository
argument_list|()
operator|.
name|getDescription
argument_list|()
operator|.
name|getRepositoryName
argument_list|()
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|db
operator|.
name|nextChangeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|key
operator|=
literal|"I"
operator|+
name|Hashing
operator|.
name|sha1
argument_list|()
operator|.
name|newHasher
argument_list|()
operator|.
name|putInt
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|putString
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|putString
argument_list|(
name|commit
operator|.
name|name
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|putInt
argument_list|(
name|ownerId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|putString
argument_list|(
name|branch
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|Change
name|change
init|=
operator|new
name|Change
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|key
argument_list|)
argument_list|,
name|id
argument_list|,
name|ownerId
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
name|branch
argument_list|)
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|changeFactory
operator|.
name|create
argument_list|(
name|projectControlFactory
operator|.
name|controlFor
argument_list|(
name|project
argument_list|,
name|userFactory
operator|.
name|create
argument_list|(
name|ownerId
argument_list|)
argument_list|)
operator|.
name|controlFor
argument_list|(
name|change
argument_list|)
operator|.
name|getRefControl
argument_list|()
argument_list|,
name|change
argument_list|,
name|commit
argument_list|)
return|;
block|}
DECL|method|assertResultEquals (Change expected, ChangeInfo actual)
specifier|protected
name|void
name|assertResultEquals
parameter_list|(
name|Change
name|expected
parameter_list|,
name|ChangeInfo
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|actual
operator|.
name|_number
argument_list|)
expr_stmt|;
block|}
DECL|method|assertResultEquals (String message, Change expected, ChangeInfo actual)
specifier|protected
name|void
name|assertResultEquals
parameter_list|(
name|String
name|message
parameter_list|,
name|Change
name|expected
parameter_list|,
name|ChangeInfo
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|message
argument_list|,
name|expected
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|actual
operator|.
name|_number
argument_list|)
expr_stmt|;
block|}
DECL|method|createProject (String name)
specifier|protected
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|createProject
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|CreateProject
name|create
init|=
name|projectFactory
operator|.
name|create
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|create
operator|.
name|apply
argument_list|(
name|TLR
argument_list|,
operator|new
name|CreateProject
operator|.
name|Input
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
argument_list|(
name|repoManager
operator|.
name|openRepository
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newQuery (Object query)
specifier|protected
name|QueryChanges
name|newQuery
parameter_list|(
name|Object
name|query
parameter_list|)
block|{
name|QueryChanges
name|q
init|=
name|queryProvider
operator|.
name|get
argument_list|()
decl_stmt|;
name|q
operator|.
name|addQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|q
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|query (QueryChanges q)
specifier|protected
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|query
parameter_list|(
name|QueryChanges
name|q
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|result
init|=
name|q
operator|.
name|apply
argument_list|(
name|TLR
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"expected List<ChangeInfo>, found %s for [%s]"
argument_list|,
name|result
argument_list|,
name|q
operator|.
name|getQuery
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|result
operator|instanceof
name|List
argument_list|)
expr_stmt|;
name|List
name|results
init|=
operator|(
name|List
operator|)
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"expected ChangeInfo, found %s for [%s]"
argument_list|,
name|result
argument_list|,
name|q
operator|.
name|getQuery
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ChangeInfo
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|List
argument_list|<
name|ChangeInfo
argument_list|>
operator|)
name|result
return|;
block|}
DECL|method|query (Object query)
specifier|protected
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|query
parameter_list|(
name|Object
name|query
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|query
argument_list|(
name|newQuery
argument_list|(
name|query
argument_list|)
argument_list|)
return|;
block|}
DECL|method|queryOne (Object query)
specifier|protected
name|ChangeInfo
name|queryOne
parameter_list|(
name|Object
name|query
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
init|=
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"expected singleton List<ChangeInfo>, found %s for [%s]"
argument_list|,
name|results
argument_list|,
name|query
argument_list|)
argument_list|,
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
return|return
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|lastUpdatedMs (Change c)
specifier|private
specifier|static
name|long
name|lastUpdatedMs
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
return|return
name|c
operator|.
name|getLastUpdatedOn
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
block|}
end_class

end_unit

