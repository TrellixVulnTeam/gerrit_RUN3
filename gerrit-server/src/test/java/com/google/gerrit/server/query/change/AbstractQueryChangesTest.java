begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|REVIEWED
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|HOURS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MINUTES
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|GerritApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|Changes
operator|.
name|QueryRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|HashtagsInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lifecycle
operator|.
name|LifecycleManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AuthRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeInserter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeTriplet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|PatchSetInserter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|IndexCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|SchemaCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|ThreadLocalRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|ConfigSuite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|DisabledReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|InMemoryDatabase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|InMemoryRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|InMemoryRepositoryManager
operator|.
name|Repo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeUtils
operator|.
name|MillisProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_class
annotation|@
name|Ignore
annotation|@
name|RunWith
argument_list|(
name|ConfigSuite
operator|.
name|class
argument_list|)
DECL|class|AbstractQueryChangesTest
specifier|public
specifier|abstract
class|class
name|AbstractQueryChangesTest
block|{
annotation|@
name|ConfigSuite
operator|.
name|Default
DECL|method|defaultConfig ()
specifier|public
specifier|static
name|Config
name|defaultConfig
parameter_list|()
block|{
return|return
name|updateConfig
argument_list|(
operator|new
name|Config
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|ConfigSuite
operator|.
name|Config
DECL|method|noteDbEnabled ()
specifier|public
specifier|static
name|Config
name|noteDbEnabled
parameter_list|()
block|{
return|return
name|updateConfig
argument_list|(
name|NotesMigration
operator|.
name|allEnabledConfig
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|method|updateConfig (Config cfg)
specifier|private
specifier|static
name|Config
name|updateConfig
parameter_list|(
name|Config
name|cfg
parameter_list|)
block|{
name|cfg
operator|.
name|setInt
argument_list|(
literal|"index"
argument_list|,
literal|null
argument_list|,
literal|"maxPages"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
DECL|field|config
annotation|@
name|ConfigSuite
operator|.
name|Parameter
specifier|public
name|Config
name|config
decl_stmt|;
DECL|field|accountManager
annotation|@
name|Inject
specifier|protected
name|AccountManager
name|accountManager
decl_stmt|;
DECL|field|updateFactory
annotation|@
name|Inject
specifier|protected
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
decl_stmt|;
DECL|field|changeFactory
annotation|@
name|Inject
specifier|protected
name|ChangeInserter
operator|.
name|Factory
name|changeFactory
decl_stmt|;
DECL|field|patchSetFactory
annotation|@
name|Inject
specifier|protected
name|PatchSetInserter
operator|.
name|Factory
name|patchSetFactory
decl_stmt|;
DECL|field|changeControlFactory
annotation|@
name|Inject
specifier|protected
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
DECL|field|gApi
annotation|@
name|Inject
specifier|protected
name|GerritApi
name|gApi
decl_stmt|;
DECL|field|userFactory
annotation|@
name|Inject
specifier|protected
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
DECL|field|indexes
annotation|@
name|Inject
specifier|protected
name|IndexCollection
name|indexes
decl_stmt|;
DECL|field|schemaFactory
annotation|@
name|Inject
specifier|protected
name|InMemoryDatabase
name|schemaFactory
decl_stmt|;
DECL|field|repoManager
annotation|@
name|Inject
specifier|protected
name|InMemoryRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|internalChangeQuery
annotation|@
name|Inject
specifier|protected
name|InternalChangeQuery
name|internalChangeQuery
decl_stmt|;
DECL|field|notesMigration
annotation|@
name|Inject
specifier|protected
name|NotesMigration
name|notesMigration
decl_stmt|;
DECL|field|projectControlFactory
annotation|@
name|Inject
specifier|protected
name|ProjectControl
operator|.
name|GenericFactory
name|projectControlFactory
decl_stmt|;
DECL|field|queryBuilder
annotation|@
name|Inject
specifier|protected
name|ChangeQueryBuilder
name|queryBuilder
decl_stmt|;
DECL|field|queryProcessor
annotation|@
name|Inject
specifier|protected
name|QueryProcessor
name|queryProcessor
decl_stmt|;
DECL|field|schemaCreator
annotation|@
name|Inject
specifier|protected
name|SchemaCreator
name|schemaCreator
decl_stmt|;
DECL|field|requestContext
annotation|@
name|Inject
specifier|protected
name|ThreadLocalRequestContext
name|requestContext
decl_stmt|;
DECL|field|lifecycle
specifier|protected
name|LifecycleManager
name|lifecycle
decl_stmt|;
DECL|field|db
specifier|protected
name|ReviewDb
name|db
decl_stmt|;
DECL|field|userId
specifier|protected
name|Account
operator|.
name|Id
name|userId
decl_stmt|;
DECL|field|user
specifier|protected
name|CurrentUser
name|user
decl_stmt|;
DECL|field|clockStepMs
specifier|protected
specifier|volatile
name|long
name|clockStepMs
decl_stmt|;
DECL|field|systemTimeZone
specifier|private
name|String
name|systemTimeZone
decl_stmt|;
DECL|method|createInjector ()
specifier|protected
specifier|abstract
name|Injector
name|createInjector
parameter_list|()
function_decl|;
annotation|@
name|Before
DECL|method|setUpInjector ()
specifier|public
name|void
name|setUpInjector
parameter_list|()
throws|throws
name|Exception
block|{
name|lifecycle
operator|=
operator|new
name|LifecycleManager
argument_list|()
expr_stmt|;
name|Injector
name|injector
init|=
name|createInjector
argument_list|()
decl_stmt|;
name|lifecycle
operator|.
name|add
argument_list|(
name|injector
argument_list|)
expr_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|lifecycle
operator|.
name|start
argument_list|()
expr_stmt|;
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
expr_stmt|;
name|schemaCreator
operator|.
name|create
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|userId
operator|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"user"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
expr_stmt|;
name|Account
name|userAccount
init|=
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|userId
argument_list|)
decl_stmt|;
name|userAccount
operator|.
name|setPreferredEmail
argument_list|(
literal|"user@example.com"
argument_list|)
expr_stmt|;
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|update
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|userAccount
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|=
name|userFactory
operator|.
name|create
argument_list|(
name|Providers
operator|.
name|of
argument_list|(
name|db
argument_list|)
argument_list|,
name|userId
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|userAccount
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newRequestContext (Account.Id requestUserId)
specifier|protected
name|RequestContext
name|newRequestContext
parameter_list|(
name|Account
operator|.
name|Id
name|requestUserId
parameter_list|)
block|{
specifier|final
name|CurrentUser
name|requestUser
init|=
name|userFactory
operator|.
name|create
argument_list|(
name|Providers
operator|.
name|of
argument_list|(
name|db
argument_list|)
argument_list|,
name|requestUserId
argument_list|)
decl_stmt|;
return|return
operator|new
name|RequestContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CurrentUser
name|getCurrentUser
parameter_list|()
block|{
return|return
name|requestUser
return|;
block|}
annotation|@
name|Override
specifier|public
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|getReviewDbProvider
parameter_list|()
block|{
return|return
name|Providers
operator|.
name|of
argument_list|(
name|db
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|After
DECL|method|tearDownInjector ()
specifier|public
name|void
name|tearDownInjector
parameter_list|()
block|{
if|if
condition|(
name|lifecycle
operator|!=
literal|null
condition|)
block|{
name|lifecycle
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|requestContext
operator|.
name|setContext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|InMemoryDatabase
operator|.
name|drop
argument_list|(
name|schemaFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setTimeForTesting ()
specifier|public
name|void
name|setTimeForTesting
parameter_list|()
block|{
name|systemTimeZone
operator|=
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.timezone"
argument_list|,
literal|"US/Eastern"
argument_list|)
expr_stmt|;
name|clockStepMs
operator|=
literal|1
expr_stmt|;
specifier|final
name|AtomicLong
name|clockMs
init|=
operator|new
name|AtomicLong
argument_list|(
operator|new
name|DateTime
argument_list|(
literal|2009
argument_list|,
literal|9
argument_list|,
literal|30
argument_list|,
literal|17
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|getMillis
argument_list|()
argument_list|)
decl_stmt|;
name|DateTimeUtils
operator|.
name|setCurrentMillisProvider
argument_list|(
operator|new
name|MillisProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getMillis
parameter_list|()
block|{
return|return
name|clockMs
operator|.
name|getAndAdd
argument_list|(
name|clockStepMs
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|resetTime ()
specifier|public
name|void
name|resetTime
parameter_list|()
block|{
name|DateTimeUtils
operator|.
name|setCurrentMillisSystem
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.timezone"
argument_list|,
name|systemTimeZone
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byId ()
specifier|public
name|void
name|byId
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"12345"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byKey ()
specifier|public
name|void
name|byKey
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertQuery
argument_list|(
literal|"I0000000000000000000000000000000000000000"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|36
condition|;
name|i
operator|++
control|)
block|{
name|String
name|q
init|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|41
operator|-
name|i
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
name|q
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|byTriplet ()
specifier|public
name|void
name|byTriplet
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"branch"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|k
init|=
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertQuery
argument_list|(
literal|"repo~branch~"
operator|+
name|k
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"change:repo~branch~"
operator|+
name|k
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"repo~refs/heads/branch~"
operator|+
name|k
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"change:repo~refs/heads/branch~"
operator|+
name|k
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"repo~branch~"
operator|+
name|k
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"change:repo~branch~"
operator|+
name|k
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"foo~bar"
argument_list|)
expr_stmt|;
name|assertBadQuery
argument_list|(
literal|"change:foo~bar"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"otherrepo~branch~"
operator|+
name|k
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"change:otherrepo~branch~"
operator|+
name|k
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"repo~otherbranch~"
operator|+
name|k
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"change:repo~otherbranch~"
operator|+
name|k
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"repo~branch~I0000000000000000000000000000000000000000"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"change:repo~branch~I0000000000000000000000000000000000000000"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byStatus ()
specifier|public
name|void
name|byStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|ins1
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change1
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|ins1
argument_list|)
expr_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|ins2
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change2
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|ins2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:new"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:NEW"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:new"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:merged"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:merged"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byStatusOpen ()
specifier|public
name|void
name|byStatusOpen
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|ins1
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change1
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|ins1
argument_list|)
expr_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|ins2
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change2
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|DRAFT
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|ins2
argument_list|)
expr_stmt|;
name|ChangeInserter
name|ins3
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change3
init|=
name|ins3
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change3
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|ins3
argument_list|)
expr_stmt|;
name|Change
index|[]
name|expected
init|=
operator|new
name|Change
index|[]
block|{
name|change2
block|,
name|change1
block|}
decl_stmt|;
name|assertQuery
argument_list|(
literal|"status:open"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:OPEN"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:o"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:op"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:ope"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:pending"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:PENDING"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:p"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:pe"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:pen"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:open"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byStatusClosed ()
specifier|public
name|void
name|byStatusClosed
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|ins1
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change1
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|ins1
argument_list|)
expr_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|ins2
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change2
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|ins2
argument_list|)
expr_stmt|;
name|ChangeInserter
name|ins3
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change3
init|=
name|ins3
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change3
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|ins3
argument_list|)
expr_stmt|;
name|Change
index|[]
name|expected
init|=
operator|new
name|Change
index|[]
block|{
name|change2
block|,
name|change1
block|}
decl_stmt|;
name|assertQuery
argument_list|(
literal|"status:closed"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:CLOSED"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:c"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:cl"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:clo"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:clos"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:close"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:closed"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:closed"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byStatusPrefix ()
specifier|public
name|void
name|byStatusPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|ins1
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change1
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|ins1
argument_list|)
expr_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|ins2
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change2
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|ins2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:n"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:ne"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:new"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:N"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:nE"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:neW"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertBadQuery
argument_list|(
literal|"status:nx"
argument_list|)
expr_stmt|;
name|assertBadQuery
argument_list|(
literal|"status:newx"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byCommit ()
specifier|public
name|void
name|byCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|ins
argument_list|)
expr_stmt|;
name|String
name|sha
init|=
name|ins
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertQuery
argument_list|(
literal|"0000000000000000000000000000000000000000"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|36
condition|;
name|i
operator|++
control|)
block|{
name|String
name|q
init|=
name|sha
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|40
operator|-
name|i
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
name|q
argument_list|,
name|ins
operator|.
name|getChange
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|byOwner ()
specifier|public
name|void
name|byOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|userId
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|user2
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"owner:"
operator|+
name|userId
operator|.
name|get
argument_list|()
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"owner:"
operator|+
name|user2
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byAuthor ()
specifier|public
name|void
name|byAuthor
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|userId
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
comment|// By exact email address
name|assertQuery
argument_list|(
literal|"author:jauthor@example.com"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// By email address part
name|assertQuery
argument_list|(
literal|"author:jauthor"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"author:example"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"author:example.com"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// By name part
name|assertQuery
argument_list|(
literal|"author:Author"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// By non-existing email address / name / part
name|assertQuery
argument_list|(
literal|"author:jcommitter@example.com"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"author:somewhere.com"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"author:jcommitter"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"author:Committer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byCommitter ()
specifier|public
name|void
name|byCommitter
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|userId
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
comment|// By exact email address
name|assertQuery
argument_list|(
literal|"committer:jcommitter@example.com"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// By email address part
name|assertQuery
argument_list|(
literal|"committer:jcommitter"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"committer:example"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"committer:example.com"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// By name part
name|assertQuery
argument_list|(
literal|"committer:Committer"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// By non-existing email address / name / part
name|assertQuery
argument_list|(
literal|"committer:jauthor@example.com"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"committer:somewhere.com"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"committer:jauthor"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"committer:Author"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byOwnerIn ()
specifier|public
name|void
name|byOwnerIn
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|userId
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|user2
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"ownerin:Administrators"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"ownerin:\"Registered Users\""
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byProject ()
specifier|public
name|void
name|byProject
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo1
init|=
name|createProject
argument_list|(
literal|"repo1"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo2
init|=
name|createProject
argument_list|(
literal|"repo2"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"project:foo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"project:repo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"project:repo1"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"project:repo2"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byProjectPrefix ()
specifier|public
name|void
name|byProjectPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo1
init|=
name|createProject
argument_list|(
literal|"repo1"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo2
init|=
name|createProject
argument_list|(
literal|"repo2"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"projects:foo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"projects:repo1"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"projects:repo2"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"projects:repo"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byBranchAndRef ()
specifier|public
name|void
name|byBranchAndRef
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"master"
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"branch"
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"branch:foo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"branch:master"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"branch:refs/heads/master"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"ref:master"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"ref:refs/heads/master"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"branch:refs/heads/master"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"branch:branch"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"branch:refs/heads/branch"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"ref:branch"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"ref:refs/heads/branch"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byTopic ()
specifier|public
name|void
name|byTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|ins1
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change1
operator|.
name|setTopic
argument_list|(
literal|"feature1"
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|ins1
argument_list|)
expr_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|ins2
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change2
operator|.
name|setTopic
argument_list|(
literal|"feature2"
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|ins2
argument_list|)
expr_stmt|;
name|ChangeInserter
name|ins3
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change3
init|=
name|ins3
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change3
operator|.
name|setTopic
argument_list|(
literal|"Cherrypick-feature2"
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|ins3
argument_list|)
expr_stmt|;
name|ChangeInserter
name|ins4
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change4
init|=
name|ins4
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change4
operator|.
name|setTopic
argument_list|(
literal|"feature2-fixup"
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|ins4
argument_list|)
expr_stmt|;
name|Change
name|change5
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"intopic:foo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"intopic:feature1"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"intopic:feature2"
argument_list|,
name|change4
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"topic:feature2"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"intopic:feature2"
argument_list|,
name|change4
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"intopic:fixup"
argument_list|,
name|change4
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"topic:\"\""
argument_list|,
name|change5
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"intopic:\"\""
argument_list|,
name|change5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byMessageExact ()
specifier|public
name|void
name|byMessageExact
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit1
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"one"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|commit2
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"two"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"message:foo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"message:one"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"message:two"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fullTextWithNumbers ()
specifier|public
name|void
name|fullTextWithNumbers
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit1
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"12345 67890"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|commit2
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"12346 67891"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"message:1234"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"message:12345"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"message:12346"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byLabel ()
specifier|public
name|void
name|byLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|ins
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=-2"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review-2"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=-1"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review-1"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=0"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=1"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review+1"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+2"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=2"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review+2"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>=0"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>0"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>=1"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>1"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>=2"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label: Code-Review<=2"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label: Code-Review<2"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label: Code-Review<=1"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review<1"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review<=0"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,anotheruser"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,user"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,user=user"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,Administrators"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,group=Administrators"
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|limit ()
specifier|public
name|void
name|limit
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|last
init|=
literal|null
decl_stmt|;
name|int
name|n
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|last
operator|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|n
operator|+
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|int
name|expectedSize
decl_stmt|;
name|Boolean
name|expectedMoreChanges
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|n
condition|)
block|{
name|expectedSize
operator|=
name|i
expr_stmt|;
name|expectedMoreChanges
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|expectedSize
operator|=
name|n
expr_stmt|;
name|expectedMoreChanges
operator|=
literal|null
expr_stmt|;
block|}
name|String
name|q
init|=
literal|"status:new limit:"
operator|+
name|i
decl_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
init|=
name|newQuery
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|)
operator|.
name|named
argument_list|(
name|q
argument_list|)
operator|.
name|hasSize
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|results
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|_moreChanges
argument_list|)
operator|.
name|named
argument_list|(
name|q
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMoreChanges
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|last
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Change
argument_list|>
name|changes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|changes
operator|.
name|add
argument_list|(
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertQuery
argument_list|(
literal|"status:new"
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"status:new"
argument_list|)
operator|.
name|withStart
argument_list|(
literal|1
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"status:new"
argument_list|)
operator|.
name|withStart
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"status:new"
argument_list|)
operator|.
name|withStart
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|startWithLimit ()
specifier|public
name|void
name|startWithLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Change
argument_list|>
name|changes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|changes
operator|.
name|add
argument_list|(
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertQuery
argument_list|(
literal|"status:new limit:2"
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"status:new limit:2"
argument_list|)
operator|.
name|withStart
argument_list|(
literal|1
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"status:new limit:2"
argument_list|)
operator|.
name|withStart
argument_list|(
literal|2
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"status:new limit:2"
argument_list|)
operator|.
name|withStart
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|maxPages ()
specifier|public
name|void
name|maxPages
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|QueryRequest
name|query
init|=
name|newQuery
argument_list|(
literal|"status:new"
argument_list|)
operator|.
name|withLimit
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
name|query
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|query
operator|.
name|withStart
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|query
operator|.
name|withStart
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|assertBadQuery
argument_list|(
name|query
operator|.
name|withStart
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|query
operator|.
name|withLimit
argument_list|(
literal|100
argument_list|)
operator|.
name|withStart
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateOrder ()
specifier|public
name|void
name|updateOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|clockStepMs
operator|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|2
argument_list|,
name|MINUTES
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ChangeInserter
argument_list|>
name|inserters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Change
argument_list|>
name|changes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|inserters
operator|.
name|add
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|changes
operator|.
name|add
argument_list|(
name|insert
argument_list|(
name|inserters
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
control|)
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
operator|.
name|message
argument_list|(
literal|"modifying "
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertQuery
argument_list|(
literal|"status:new"
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updatedOrderWithMinuteResolution ()
specifier|public
name|void
name|updatedOrderWithMinuteResolution
parameter_list|()
throws|throws
name|Exception
block|{
name|clockStepMs
operator|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|2
argument_list|,
name|MINUTES
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|ins1
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
argument_list|)
operator|.
name|isLessThan
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:new"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
argument_list|)
expr_stmt|;
name|change1
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
operator|-
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|1
argument_list|,
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
comment|// change1 moved to the top.
name|assertQuery
argument_list|(
literal|"status:new"
argument_list|,
name|change1
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updatedOrderWithSubMinuteResolution ()
specifier|public
name|void
name|updatedOrderWithSubMinuteResolution
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|ins1
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
argument_list|)
operator|.
name|isLessThan
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:new"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
argument_list|)
expr_stmt|;
name|change1
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
operator|-
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
operator|.
name|isLessThan
argument_list|(
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|1
argument_list|,
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
comment|// change1 moved to the top.
name|assertQuery
argument_list|(
literal|"status:new"
argument_list|,
name|change1
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|filterOutMoreThanOnePageOfResults ()
specifier|public
name|void
name|filterOutMoreThanOnePageOfResults
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|userId
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|user2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertQuery
argument_list|(
literal|"status:new ownerin:Administrators"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:new ownerin:Administrators limit:2"
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|filterOutAllResults ()
specifier|public
name|void
name|filterOutAllResults
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|int
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|user2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertQuery
argument_list|(
literal|"status:new ownerin:Administrators"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:new ownerin:Administrators limit:2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byFileExact ()
specifier|public
name|void
name|byFileExact
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"one"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file1"
argument_list|,
literal|"contents1"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file2"
argument_list|,
literal|"contents2"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"file:file"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"file:dir"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"file:file1"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"file:file2"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"file:dir/file1"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"file:dir/file2"
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byFileRegex ()
specifier|public
name|void
name|byFileRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"one"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file1"
argument_list|,
literal|"contents1"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file2"
argument_list|,
literal|"contents2"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"file:.*file.*"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"file:^file.*"
argument_list|)
expr_stmt|;
comment|// Whole path only.
name|assertQuery
argument_list|(
literal|"file:^dir.file.*"
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byPathExact ()
specifier|public
name|void
name|byPathExact
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"one"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file1"
argument_list|,
literal|"contents1"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file2"
argument_list|,
literal|"contents2"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"path:file"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"path:dir"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"path:file1"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"path:file2"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"path:dir/file1"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"path:dir/file2"
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byPathRegex ()
specifier|public
name|void
name|byPathRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"one"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file1"
argument_list|,
literal|"contents1"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file2"
argument_list|,
literal|"contents2"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"path:.*file.*"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"path:^dir.file.*"
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byComment ()
specifier|public
name|void
name|byComment
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|ins
argument_list|)
decl_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|message
operator|=
literal|"toplevel"
expr_stmt|;
name|ReviewInput
operator|.
name|CommentInput
name|comment
init|=
operator|new
name|ReviewInput
operator|.
name|CommentInput
argument_list|()
decl_stmt|;
name|comment
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|comment
operator|.
name|message
operator|=
literal|"inline"
expr_stmt|;
name|input
operator|.
name|comments
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|List
argument_list|<
name|ReviewInput
operator|.
name|CommentInput
argument_list|>
operator|>
name|of
argument_list|(
name|Patch
operator|.
name|COMMIT_MSG
argument_list|,
name|ImmutableList
operator|.
expr|<
name|ReviewInput
operator|.
name|CommentInput
operator|>
name|of
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"comment:foo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"comment:toplevel"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"comment:inline"
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byAge ()
specifier|public
name|void
name|byAge
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|thirtyHours
init|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|30
argument_list|,
name|HOURS
argument_list|)
decl_stmt|;
name|clockStepMs
operator|=
name|thirtyHours
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|clockStepMs
operator|=
literal|0
expr_stmt|;
comment|// Queried by AgePredicate constructor.
name|long
name|now
init|=
name|TimeUtil
operator|.
name|nowMs
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
operator|-
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|thirtyHours
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|now
operator|-
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|thirtyHours
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TimeUtil
operator|.
name|nowMs
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-age:1d"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-age:"
operator|+
operator|(
literal|30
operator|*
literal|60
operator|-
literal|1
operator|)
operator|+
literal|"m"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-age:2d"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-age:3d"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"age:3d"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"age:2d"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"age:1d"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byBefore ()
specifier|public
name|void
name|byBefore
parameter_list|()
throws|throws
name|Exception
block|{
name|clockStepMs
operator|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|30
argument_list|,
name|HOURS
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|clockStepMs
operator|=
literal|0
expr_stmt|;
name|assertQuery
argument_list|(
literal|"before:2009-09-29"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"before:2009-09-30"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"before:\"2009-09-30 16:59:00 -0400\""
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"before:\"2009-09-30 20:59:00 -0000\""
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"before:\"2009-09-30 20:59:00\""
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"before:\"2009-09-30 17:02:00 -0400\""
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"before:\"2009-10-01 21:02:00 -0000\""
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"before:\"2009-10-01 21:02:00\""
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"before:2009-10-01"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"before:2009-10-03"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byAfter ()
specifier|public
name|void
name|byAfter
parameter_list|()
throws|throws
name|Exception
block|{
name|clockStepMs
operator|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|30
argument_list|,
name|HOURS
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|clockStepMs
operator|=
literal|0
expr_stmt|;
name|assertQuery
argument_list|(
literal|"after:2009-10-03"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"after:\"2009-10-01 20:59:59 -0400\""
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"after:\"2009-10-01 20:59:59 -0000\""
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"after:2009-10-01"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"after:2009-09-30"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|bySize ()
specifier|public
name|void
name|bySize
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
comment|// added = 3, deleted = 0, delta = 3
name|RevCommit
name|commit1
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"file1"
argument_list|,
literal|"foo\n\foo\nfoo"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
comment|// added = 0, deleted = 2, delta = 2
name|RevCommit
name|commit2
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|commit1
argument_list|)
operator|.
name|add
argument_list|(
literal|"file1"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"added:>4"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-added:<=4"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"added:3"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-(added:<3 OR added>3)"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"added:>2"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-added:<=2"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"added:>=3"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-added:<3"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"added:<1"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-added:>=1"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"added:<=0"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-added:>0"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"deleted:>3"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-deleted:<=3"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"deleted:2"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-(deleted:<2 OR deleted>2)"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"deleted:>1"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-deleted:<=1"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"deleted:>=2"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-deleted:<2"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"deleted:<1"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-deleted:>=1"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"deleted:<=0"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|str
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"delta"
argument_list|,
literal|"size"
argument_list|)
control|)
block|{
name|assertQuery
argument_list|(
name|str
operator|+
literal|":<2"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|str
operator|+
literal|":3"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|str
operator|+
literal|":>2"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|str
operator|+
literal|":>=3"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|str
operator|+
literal|":<3"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|str
operator|+
literal|":<=2"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setUpHashtagChanges ()
specifier|private
name|List
argument_list|<
name|Change
argument_list|>
name|setUpHashtagChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|HashtagsInput
name|in
init|=
operator|new
name|HashtagsInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|add
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setHashtags
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|in
operator|.
name|add
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"a tag"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setHashtags
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|change1
argument_list|,
name|change2
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|byHashtagWithNotedb ()
specifier|public
name|void
name|byHashtagWithNotedb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|enabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Change
argument_list|>
name|changes
init|=
name|setUpHashtagChanges
argument_list|()
decl_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:foo"
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:bar"
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\"a tag\""
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\"a tag \""
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\" a tag \""
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\"#a tag\""
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\"# #a tag\""
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byHashtagWithoutNotedb ()
specifier|public
name|void
name|byHashtagWithoutNotedb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|enabled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|setUpHashtagChanges
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:foo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:bar"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\" bar \""
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\"a tag\""
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\" a tag \""
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:#foo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\"# #foo\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byDefault ()
specifier|public
name|void
name|byDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|commit2
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"foosubject"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|commit3
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"Foo.java"
argument_list|,
literal|"foo contents"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change3
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins4
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change4
init|=
name|insert
argument_list|(
name|ins4
argument_list|)
decl_stmt|;
name|ReviewInput
name|ri4
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|ri4
operator|.
name|message
operator|=
literal|"toplevel"
expr_stmt|;
name|ri4
operator|.
name|labels
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|Short
operator|>
name|of
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change4
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ri4
argument_list|)
expr_stmt|;
name|ChangeInserter
name|ins5
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change5
init|=
name|ins5
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change5
operator|.
name|setTopic
argument_list|(
literal|"feature5"
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|ins5
argument_list|)
expr_stmt|;
name|Change
name|change6
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"branch6"
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|ChangeTriplet
operator|.
name|format
argument_list|(
name|change1
argument_list|)
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"foosubject"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"Foo.java"
argument_list|,
name|change3
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"Code-Review+1"
argument_list|,
name|change4
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"toplevel"
argument_list|,
name|change4
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"feature5"
argument_list|,
name|change5
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"branch6"
argument_list|,
name|change6
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"refs/heads/branch6"
argument_list|,
name|change6
argument_list|)
expr_stmt|;
name|Change
index|[]
name|expected
init|=
operator|new
name|Change
index|[]
block|{
name|change6
block|,
name|change5
block|,
name|change4
block|,
name|change3
block|,
name|change2
block|,
name|change1
block|}
decl_stmt|;
name|assertQuery
argument_list|(
literal|"user@example.com"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"repo"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|implicitVisibleTo ()
specifier|public
name|void
name|implicitVisibleTo
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|userId
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|userId
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|ins2
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change2
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|DRAFT
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|ins2
argument_list|)
expr_stmt|;
name|String
name|q
init|=
literal|"project:repo"
decl_stmt|;
name|assertQuery
argument_list|(
name|q
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// Second user cannot see first user's drafts.
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|q
argument_list|,
name|change1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|explicitVisibleTo ()
specifier|public
name|void
name|explicitVisibleTo
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|userId
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|userId
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|ins2
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|change2
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|DRAFT
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|ins2
argument_list|)
expr_stmt|;
name|String
name|q
init|=
literal|"project:repo"
decl_stmt|;
name|assertQuery
argument_list|(
name|q
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// Second user cannot see first user's drafts.
name|Account
operator|.
name|Id
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|assertQuery
argument_list|(
name|q
operator|+
literal|" visibleto:"
operator|+
name|user2
operator|.
name|get
argument_list|()
argument_list|,
name|change1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byCommentBy ()
specifier|public
name|void
name|byCommentBy
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|message
operator|=
literal|"toplevel"
expr_stmt|;
name|ReviewInput
operator|.
name|CommentInput
name|comment
init|=
operator|new
name|ReviewInput
operator|.
name|CommentInput
argument_list|()
decl_stmt|;
name|comment
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|comment
operator|.
name|message
operator|=
literal|"inline"
expr_stmt|;
name|input
operator|.
name|comments
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|List
argument_list|<
name|ReviewInput
operator|.
name|CommentInput
argument_list|>
operator|>
name|of
argument_list|(
name|Patch
operator|.
name|COMMIT_MSG
argument_list|,
name|ImmutableList
operator|.
expr|<
name|ReviewInput
operator|.
name|CommentInput
operator|>
name|of
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|input
operator|=
operator|new
name|ReviewInput
argument_list|()
expr_stmt|;
name|input
operator|.
name|message
operator|=
literal|"toplevel"
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"commentby:"
operator|+
name|userId
operator|.
name|get
argument_list|()
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"commentby:"
operator|+
name|user2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byFrom ()
specifier|public
name|void
name|byFrom
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|user2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|ins2
argument_list|)
decl_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|message
operator|=
literal|"toplevel"
expr_stmt|;
name|ReviewInput
operator|.
name|CommentInput
name|comment
init|=
operator|new
name|ReviewInput
operator|.
name|CommentInput
argument_list|()
decl_stmt|;
name|comment
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|comment
operator|.
name|message
operator|=
literal|"inline"
expr_stmt|;
name|input
operator|.
name|comments
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|List
argument_list|<
name|ReviewInput
operator|.
name|CommentInput
argument_list|>
operator|>
name|of
argument_list|(
name|Patch
operator|.
name|COMMIT_MSG
argument_list|,
name|ImmutableList
operator|.
expr|<
name|ReviewInput
operator|.
name|CommentInput
operator|>
name|of
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"from:"
operator|+
name|userId
operator|.
name|get
argument_list|()
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"from:"
operator|+
name|user2
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|conflicts ()
specifier|public
name|void
name|conflicts
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit1
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"file1"
argument_list|,
literal|"contents1"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file2"
argument_list|,
literal|"contents2"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file3"
argument_list|,
literal|"contents3"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|commit2
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"file1"
argument_list|,
literal|"contents1"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|commit3
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"dir/file2"
argument_list|,
literal|"contents2 different"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|commit4
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"file4"
argument_list|,
literal|"contents4"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change3
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change4
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit4
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"conflicts:"
operator|+
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|change3
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"conflicts:"
operator|+
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"conflicts:"
operator|+
name|change3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"conflicts:"
operator|+
name|change4
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewedBy ()
specifier|public
name|void
name|reviewedBy
parameter_list|()
throws|throws
name|Exception
block|{
name|clockStepMs
operator|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|2
argument_list|,
name|MINUTES
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change3
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
operator|.
name|message
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|Account
operator|.
name|Id
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|user2
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
operator|.
name|message
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps3_1
init|=
name|change3
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|change3
operator|=
name|newPatchSet
argument_list|(
name|repo
argument_list|,
name|change3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change3
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|ps3_1
argument_list|)
expr_stmt|;
comment|// Response to previous patch set still counts as reviewing.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|ps3_1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
operator|.
name|message
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|actual
decl_stmt|;
name|actual
operator|=
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"is:reviewed"
argument_list|)
operator|.
name|withOption
argument_list|(
name|REVIEWED
argument_list|)
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reviewed
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|reviewed
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|actual
operator|=
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"-is:reviewed"
argument_list|)
operator|.
name|withOption
argument_list|(
name|REVIEWED
argument_list|)
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reviewed
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|actual
operator|=
name|assertQuery
argument_list|(
literal|"reviewedby:"
operator|+
name|userId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|actual
operator|=
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"reviewedby:"
operator|+
name|user2
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|withOption
argument_list|(
name|REVIEWED
argument_list|)
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reviewed
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|reviewed
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byCommitsOnBranchNotMerged ()
specifier|public
name|void
name|byCommitsOnBranchNotMerged
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|int
name|n
init|=
literal|10
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|shas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expectedIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|Branch
operator|.
name|NameKey
name|dest
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ChangeInserter
name|ins
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|ins
argument_list|)
expr_stmt|;
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
block|{
name|dest
operator|=
name|ins
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
expr_stmt|;
block|}
name|shas
operator|.
name|add
argument_list|(
name|ins
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|expectedIds
operator|.
name|add
argument_list|(
name|ins
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|11
condition|;
name|i
operator|++
control|)
block|{
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|cds
init|=
name|internalChangeQuery
operator|.
name|byCommitsOnBranchNotMerged
argument_list|(
name|repo
operator|.
name|getRepository
argument_list|()
argument_list|,
name|db
argument_list|,
name|dest
argument_list|,
name|shas
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|ids
init|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|cds
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|Function
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|ChangeData
name|in
parameter_list|)
block|{
return|return
name|in
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|"limit "
operator|+
name|i
decl_stmt|;
name|assertThat
argument_list|(
name|ids
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|hasSize
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ids
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedIds
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|prepopulatedFields ()
specifier|public
name|void
name|prepopulatedFields
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|enabled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|db
operator|=
operator|new
name|DisabledReviewDb
argument_list|()
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|userId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Use QueryProcessor directly instead of API so we get ChangeDatas back.
name|List
argument_list|<
name|ChangeData
argument_list|>
name|cds
init|=
name|queryProcessor
operator|.
name|queryChanges
argument_list|(
name|queryBuilder
operator|.
name|parse
argument_list|(
name|change
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|changes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cds
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ChangeData
name|cd
init|=
name|cds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cd
operator|.
name|change
argument_list|()
expr_stmt|;
name|cd
operator|.
name|patchSets
argument_list|()
expr_stmt|;
name|cd
operator|.
name|currentApprovals
argument_list|()
expr_stmt|;
name|cd
operator|.
name|changedLines
argument_list|()
expr_stmt|;
name|cd
operator|.
name|reviewedBy
argument_list|()
expr_stmt|;
comment|// TODO(dborowitz): Swap out GitRepositoryManager somehow? Will probably be
comment|// necessary for notedb anyway.
name|cd
operator|.
name|isMergeable
argument_list|()
expr_stmt|;
comment|// Don't use ExpectedException since that wouldn't distinguish between
comment|// failures here and on the previous calls.
try|try
block|{
name|cd
operator|.
name|messages
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|DisabledReviewDb
operator|.
name|MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newChange ( TestRepository<Repo> repo, @Nullable RevCommit commit, @Nullable String key, @Nullable Integer owner, @Nullable String branch)
specifier|protected
name|ChangeInserter
name|newChange
parameter_list|(
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
parameter_list|,
annotation|@
name|Nullable
name|RevCommit
name|commit
parameter_list|,
annotation|@
name|Nullable
name|String
name|key
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|owner
parameter_list|,
annotation|@
name|Nullable
name|String
name|branch
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|commit
operator|==
literal|null
condition|)
block|{
name|commit
operator|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"message"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Account
operator|.
name|Id
name|ownerId
init|=
name|owner
operator|!=
literal|null
condition|?
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|owner
argument_list|)
else|:
name|userId
decl_stmt|;
name|branch
operator|=
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|branch
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|branch
operator|.
name|startsWith
argument_list|(
literal|"refs/heads/"
argument_list|)
condition|)
block|{
name|branch
operator|=
literal|"refs/heads/"
operator|+
name|branch
expr_stmt|;
block|}
name|Project
operator|.
name|NameKey
name|project
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|repo
operator|.
name|getRepository
argument_list|()
operator|.
name|getDescription
argument_list|()
operator|.
name|getRepositoryName
argument_list|()
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|db
operator|.
name|nextChangeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|key
operator|=
literal|"I"
operator|+
name|Hashing
operator|.
name|sha1
argument_list|()
operator|.
name|newHasher
argument_list|()
operator|.
name|putInt
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|putString
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|putString
argument_list|(
name|commit
operator|.
name|name
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|putInt
argument_list|(
name|ownerId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|putString
argument_list|(
name|branch
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|Change
name|change
init|=
operator|new
name|Change
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|key
argument_list|)
argument_list|,
name|id
argument_list|,
name|ownerId
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
name|branch
argument_list|)
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|IdentifiedUser
name|user
init|=
name|userFactory
operator|.
name|create
argument_list|(
name|Providers
operator|.
name|of
argument_list|(
name|db
argument_list|)
argument_list|,
name|ownerId
argument_list|)
decl_stmt|;
name|RefControl
name|refControl
init|=
name|projectControlFactory
operator|.
name|controlFor
argument_list|(
name|project
argument_list|,
name|user
argument_list|)
operator|.
name|controlForRef
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|changeFactory
operator|.
name|create
argument_list|(
name|refControl
argument_list|,
name|change
argument_list|,
name|commit
argument_list|)
operator|.
name|setValidatePolicy
argument_list|(
name|CommitValidators
operator|.
name|Policy
operator|.
name|NONE
argument_list|)
return|;
block|}
DECL|method|insert (ChangeInserter ins)
specifier|protected
name|Change
name|insert
parameter_list|(
name|ChangeInserter
name|ins
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|ins
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|ins
operator|.
name|getUser
argument_list|()
argument_list|,
name|ins
operator|.
name|getChange
argument_list|()
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
init|)
block|{
name|bu
operator|.
name|insertChange
argument_list|(
name|ins
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|ins
operator|.
name|getChange
argument_list|()
return|;
block|}
block|}
DECL|method|newPatchSet (TestRepository<Repo> repo, Change c)
specifier|protected
name|Change
name|newPatchSet
parameter_list|(
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
parameter_list|,
name|Change
name|c
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Add a new file so the patch set is not a trivial rebase, to avoid default
comment|// Code-Review label copying.
name|int
name|n
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|1
decl_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"message"
argument_list|)
operator|.
name|add
argument_list|(
literal|"file"
operator|+
name|n
argument_list|,
literal|"contents "
operator|+
name|n
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeControl
name|ctl
init|=
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|PatchSetInserter
name|inserter
init|=
name|patchSetFactory
operator|.
name|create
argument_list|(
name|repo
operator|.
name|getRepository
argument_list|()
argument_list|,
name|repo
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|ctl
argument_list|,
name|commit
argument_list|)
operator|.
name|setSendMail
argument_list|(
literal|false
argument_list|)
operator|.
name|setRunHooks
argument_list|(
literal|false
argument_list|)
operator|.
name|setValidatePolicy
argument_list|(
name|CommitValidators
operator|.
name|Policy
operator|.
name|NONE
argument_list|)
decl_stmt|;
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|c
operator|.
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|user
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
init|)
block|{
name|bu
operator|.
name|addOp
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|inserter
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
return|return
name|inserter
operator|.
name|getChange
argument_list|()
return|;
block|}
DECL|method|assertBadQuery (Object query)
specifier|protected
name|void
name|assertBadQuery
parameter_list|(
name|Object
name|query
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBadQuery
argument_list|(
name|newQuery
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertBadQuery (QueryRequest query)
specifier|protected
name|void
name|assertBadQuery
parameter_list|(
name|QueryRequest
name|query
parameter_list|)
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|createProject (String name)
specifier|protected
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|createProject
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repoManager
operator|.
name|openRepository
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newQuery (Object query)
specifier|protected
name|QueryRequest
name|newQuery
parameter_list|(
name|Object
name|query
parameter_list|)
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|assertQuery (Object query, Change... changes)
specifier|protected
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|assertQuery
parameter_list|(
name|Object
name|query
parameter_list|,
name|Change
modifier|...
name|changes
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
name|query
argument_list|)
argument_list|,
name|changes
argument_list|)
return|;
block|}
DECL|method|assertQuery (QueryRequest query, Change... changes)
specifier|protected
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|assertQuery
parameter_list|(
name|QueryRequest
name|query
parameter_list|,
name|Change
modifier|...
name|changes
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|result
init|=
name|query
operator|.
name|get
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|ids
init|=
name|ids
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ids
argument_list|)
operator|.
name|named
argument_list|(
name|query
operator|.
name|getQuery
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|ids
argument_list|(
name|changes
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|ids (Change... changes)
specifier|protected
specifier|static
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|ids
parameter_list|(
name|Change
modifier|...
name|changes
parameter_list|)
block|{
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|changes
argument_list|)
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|Function
argument_list|<
name|Change
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|Change
name|in
parameter_list|)
block|{
return|return
name|in
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|ids (Iterable<ChangeInfo> changes)
specifier|protected
specifier|static
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|ids
parameter_list|(
name|Iterable
argument_list|<
name|ChangeInfo
argument_list|>
name|changes
parameter_list|)
block|{
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|changes
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|Function
argument_list|<
name|ChangeInfo
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|ChangeInfo
name|in
parameter_list|)
block|{
return|return
name|in
operator|.
name|_number
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|lastUpdatedMs (Change c)
specifier|protected
specifier|static
name|long
name|lastUpdatedMs
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
return|return
name|c
operator|.
name|getLastUpdatedOn
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
block|}
end_class

end_unit

