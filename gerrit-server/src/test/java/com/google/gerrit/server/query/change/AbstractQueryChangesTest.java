begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|REVIEWED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
operator|.
name|category
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
operator|.
name|value
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|HOURS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MINUTES
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|ThrowableSubject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|GerritApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|AddReviewerInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|AssigneeInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|Changes
operator|.
name|QueryRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|DraftInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|HashtagsInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
operator|.
name|DraftHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
operator|.
name|RobotCommentInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|StarsInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|groups
operator|.
name|GroupInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ProjectWatchInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeMessageInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lifecycle
operator|.
name|LifecycleManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchSetUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|Sequences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StarredChangesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AuthRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeInserter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeTriplet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|PatchSetInserter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|IndexConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|QueryOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndexCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|IndexedChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|StalenessChecker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbChangeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbChangeState
operator|.
name|PrimaryStorage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|SchemaCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|ThreadLocalRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|ConfigSuite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|DisabledReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|GerritServerTests
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|InMemoryDatabase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|InMemoryRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|InMemoryRepositoryManager
operator|.
name|Repo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestTimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|SystemReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Ignore
DECL|class|AbstractQueryChangesTest
specifier|public
specifier|abstract
class|class
name|AbstractQueryChangesTest
extends|extends
name|GerritServerTests
block|{
annotation|@
name|ConfigSuite
operator|.
name|Default
DECL|method|defaultConfig ()
specifier|public
specifier|static
name|Config
name|defaultConfig
parameter_list|()
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setInt
argument_list|(
literal|"index"
argument_list|,
literal|null
argument_list|,
literal|"maxPages"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
literal|"trackingid"
argument_list|,
literal|"query-bug"
argument_list|,
literal|"footer"
argument_list|,
literal|"Bug:"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
literal|"trackingid"
argument_list|,
literal|"query-bug"
argument_list|,
literal|"match"
argument_list|,
literal|"QUERY\\d{2,8}"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
literal|"trackingid"
argument_list|,
literal|"query-bug"
argument_list|,
literal|"system"
argument_list|,
literal|"querytests"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
literal|"trackingid"
argument_list|,
literal|"query-feature"
argument_list|,
literal|"footer"
argument_list|,
literal|"Feature"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
literal|"trackingid"
argument_list|,
literal|"query-feature"
argument_list|,
literal|"match"
argument_list|,
literal|"QUERY\\d{2,8}"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
literal|"trackingid"
argument_list|,
literal|"query-feature"
argument_list|,
literal|"system"
argument_list|,
literal|"querytests"
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
DECL|field|accountManager
annotation|@
name|Inject
specifier|protected
name|AccountManager
name|accountManager
decl_stmt|;
DECL|field|allUsersName
annotation|@
name|Inject
specifier|protected
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|updateFactory
annotation|@
name|Inject
specifier|protected
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
decl_stmt|;
DECL|field|changeFactory
annotation|@
name|Inject
specifier|protected
name|ChangeInserter
operator|.
name|Factory
name|changeFactory
decl_stmt|;
DECL|field|queryBuilder
annotation|@
name|Inject
specifier|protected
name|ChangeQueryBuilder
name|queryBuilder
decl_stmt|;
DECL|field|gApi
annotation|@
name|Inject
specifier|protected
name|GerritApi
name|gApi
decl_stmt|;
DECL|field|userFactory
annotation|@
name|Inject
specifier|protected
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
DECL|field|indexes
annotation|@
name|Inject
specifier|protected
name|ChangeIndexCollection
name|indexes
decl_stmt|;
DECL|field|indexer
annotation|@
name|Inject
specifier|protected
name|ChangeIndexer
name|indexer
decl_stmt|;
DECL|field|indexConfig
annotation|@
name|Inject
specifier|protected
name|IndexConfig
name|indexConfig
decl_stmt|;
DECL|field|schemaFactory
annotation|@
name|Inject
specifier|protected
name|InMemoryDatabase
name|schemaFactory
decl_stmt|;
DECL|field|repoManager
annotation|@
name|Inject
specifier|protected
name|InMemoryRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|internalChangeQuery
annotation|@
name|Inject
specifier|protected
name|InternalChangeQuery
name|internalChangeQuery
decl_stmt|;
DECL|field|notesFactory
annotation|@
name|Inject
specifier|protected
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
decl_stmt|;
DECL|field|patchSetFactory
annotation|@
name|Inject
specifier|protected
name|PatchSetInserter
operator|.
name|Factory
name|patchSetFactory
decl_stmt|;
DECL|field|psUtil
annotation|@
name|Inject
specifier|protected
name|PatchSetUtil
name|psUtil
decl_stmt|;
DECL|field|changeControlFactory
annotation|@
name|Inject
specifier|protected
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
DECL|field|queryProcessor
annotation|@
name|Inject
specifier|protected
name|ChangeQueryProcessor
name|queryProcessor
decl_stmt|;
DECL|field|schemaCreator
annotation|@
name|Inject
specifier|protected
name|SchemaCreator
name|schemaCreator
decl_stmt|;
DECL|field|seq
annotation|@
name|Inject
specifier|protected
name|Sequences
name|seq
decl_stmt|;
DECL|field|requestContext
annotation|@
name|Inject
specifier|protected
name|ThreadLocalRequestContext
name|requestContext
decl_stmt|;
DECL|field|projectCache
annotation|@
name|Inject
specifier|protected
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|metaDataUpdateFactory
annotation|@
name|Inject
specifier|protected
name|MetaDataUpdate
operator|.
name|Server
name|metaDataUpdateFactory
decl_stmt|;
DECL|field|identifiedUserFactory
annotation|@
name|Inject
specifier|protected
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
decl_stmt|;
DECL|field|injector
specifier|protected
name|Injector
name|injector
decl_stmt|;
DECL|field|lifecycle
specifier|protected
name|LifecycleManager
name|lifecycle
decl_stmt|;
DECL|field|db
specifier|protected
name|ReviewDb
name|db
decl_stmt|;
DECL|field|userId
specifier|protected
name|Account
operator|.
name|Id
name|userId
decl_stmt|;
DECL|field|user
specifier|protected
name|CurrentUser
name|user
decl_stmt|;
DECL|field|systemTimeZone
specifier|private
name|String
name|systemTimeZone
decl_stmt|;
DECL|method|createInjector ()
specifier|protected
specifier|abstract
name|Injector
name|createInjector
parameter_list|()
function_decl|;
annotation|@
name|Before
DECL|method|setUpInjector ()
specifier|public
name|void
name|setUpInjector
parameter_list|()
throws|throws
name|Exception
block|{
name|lifecycle
operator|=
operator|new
name|LifecycleManager
argument_list|()
expr_stmt|;
name|injector
operator|=
name|createInjector
argument_list|()
expr_stmt|;
name|lifecycle
operator|.
name|add
argument_list|(
name|injector
argument_list|)
expr_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|lifecycle
operator|.
name|start
argument_list|()
expr_stmt|;
name|initAfterLifecycleStart
argument_list|()
expr_stmt|;
name|setUpDatabase
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
name|lifecycle
operator|.
name|stop
argument_list|()
expr_stmt|;
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|initAfterLifecycleStart ()
specifier|protected
name|void
name|initAfterLifecycleStart
parameter_list|()
throws|throws
name|Exception
block|{}
DECL|method|setUpDatabase ()
specifier|protected
name|void
name|setUpDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
expr_stmt|;
name|schemaCreator
operator|.
name|create
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|userId
operator|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"user"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
expr_stmt|;
name|Account
name|userAccount
init|=
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|userId
argument_list|)
decl_stmt|;
name|userAccount
operator|.
name|setPreferredEmail
argument_list|(
literal|"user@example.com"
argument_list|)
expr_stmt|;
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|update
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|userAccount
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|=
name|userFactory
operator|.
name|create
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|userAccount
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newRequestContext (Account.Id requestUserId)
specifier|protected
name|RequestContext
name|newRequestContext
parameter_list|(
name|Account
operator|.
name|Id
name|requestUserId
parameter_list|)
block|{
specifier|final
name|CurrentUser
name|requestUser
init|=
name|userFactory
operator|.
name|create
argument_list|(
name|requestUserId
argument_list|)
decl_stmt|;
return|return
operator|new
name|RequestContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CurrentUser
name|getUser
parameter_list|()
block|{
return|return
name|requestUser
return|;
block|}
annotation|@
name|Override
specifier|public
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|getReviewDbProvider
parameter_list|()
block|{
return|return
name|Providers
operator|.
name|of
argument_list|(
name|db
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|After
DECL|method|tearDownInjector ()
specifier|public
name|void
name|tearDownInjector
parameter_list|()
block|{
if|if
condition|(
name|lifecycle
operator|!=
literal|null
condition|)
block|{
name|lifecycle
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|requestContext
operator|.
name|setContext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|InMemoryDatabase
operator|.
name|drop
argument_list|(
name|schemaFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setTimeForTesting ()
specifier|public
name|void
name|setTimeForTesting
parameter_list|()
block|{
name|resetTimeWithClockStep
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|resetTimeWithClockStep (long clockStep, TimeUnit clockStepUnit)
specifier|private
name|void
name|resetTimeWithClockStep
parameter_list|(
name|long
name|clockStep
parameter_list|,
name|TimeUnit
name|clockStepUnit
parameter_list|)
block|{
name|systemTimeZone
operator|=
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.timezone"
argument_list|,
literal|"US/Eastern"
argument_list|)
expr_stmt|;
comment|// TODO(dborowitz): Figure out why tests fail when stubbing out
comment|// SystemReader.
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
name|clockStep
argument_list|,
name|clockStepUnit
argument_list|)
expr_stmt|;
name|SystemReader
operator|.
name|setInstance
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|resetTime ()
specifier|public
name|void
name|resetTime
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.timezone"
argument_list|,
name|systemTimeZone
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byId ()
specifier|public
name|void
name|byId
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"12345"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byKey ()
specifier|public
name|void
name|byKey
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertQuery
argument_list|(
literal|"I0000000000000000000000000000000000000000"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|36
condition|;
name|i
operator|++
control|)
block|{
name|String
name|q
init|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|41
operator|-
name|i
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
name|q
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|byTriplet ()
specifier|public
name|void
name|byTriplet
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"iabcde"
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForBranch
argument_list|(
name|repo
argument_list|,
literal|"branch"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|k
init|=
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertQuery
argument_list|(
literal|"iabcde~branch~"
operator|+
name|k
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"change:iabcde~branch~"
operator|+
name|k
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"iabcde~refs/heads/branch~"
operator|+
name|k
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"change:iabcde~refs/heads/branch~"
operator|+
name|k
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"iabcde~branch~"
operator|+
name|k
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"change:iabcde~branch~"
operator|+
name|k
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"foo~bar"
argument_list|)
expr_stmt|;
name|assertThatQueryException
argument_list|(
literal|"change:foo~bar"
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Invalid change format"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"otherrepo~branch~"
operator|+
name|k
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"change:otherrepo~branch~"
operator|+
name|k
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"iabcde~otherbranch~"
operator|+
name|k
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"change:iabcde~otherbranch~"
operator|+
name|k
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"iabcde~branch~I0000000000000000000000000000000000000000"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"change:iabcde~branch~I0000000000000000000000000000000000000000"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byStatus ()
specifier|public
name|void
name|byStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins1
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins2
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"status:new"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:NEW"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:new"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:merged"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:merged"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byStatusOpen ()
specifier|public
name|void
name|byStatusOpen
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins1
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|DRAFT
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins2
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
argument_list|)
expr_stmt|;
name|Change
index|[]
name|expected
init|=
operator|new
name|Change
index|[]
block|{
name|change2
block|,
name|change1
block|}
decl_stmt|;
name|assertQuery
argument_list|(
literal|"status:open"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:OPEN"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:o"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:op"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:ope"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:pending"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:PENDING"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:p"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:pe"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:pen"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:open"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:pending"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byStatusDraft ()
specifier|public
name|void
name|byStatusDraft
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|DRAFT
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins2
argument_list|)
decl_stmt|;
name|Change
index|[]
name|expected
init|=
operator|new
name|Change
index|[]
block|{
name|change2
block|}
decl_stmt|;
name|assertQuery
argument_list|(
literal|"status:draft"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:DRAFT"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:d"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:dr"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:dra"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:draf"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:draft"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byStatusClosed ()
specifier|public
name|void
name|byStatusClosed
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins1
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins2
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
argument_list|)
expr_stmt|;
name|Change
index|[]
name|expected
init|=
operator|new
name|Change
index|[]
block|{
name|change2
block|,
name|change1
block|}
decl_stmt|;
name|assertQuery
argument_list|(
literal|"status:closed"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:CLOSED"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:c"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:cl"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:clo"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:clos"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:close"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:closed"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:closed"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byStatusAbandoned ()
specifier|public
name|void
name|byStatusAbandoned
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|repo
argument_list|,
name|ins1
argument_list|)
expr_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins2
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:abandoned"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:ABANDONED"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:abandoned"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byStatusPrefix ()
specifier|public
name|void
name|byStatusPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins1
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:n"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:ne"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:new"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:N"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:nE"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:neW"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertThatQueryException
argument_list|(
literal|"status:nx"
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"invalid change status: nx"
argument_list|)
expr_stmt|;
name|assertThatQueryException
argument_list|(
literal|"status:newx"
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"invalid change status: newx"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byCommit ()
specifier|public
name|void
name|byCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins
init|=
name|newChange
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins
argument_list|)
decl_stmt|;
name|String
name|sha
init|=
name|ins
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|assertQuery
argument_list|(
literal|"0000000000000000000000000000000000000000"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"commit:0000000000000000000000000000000000000000"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|36
condition|;
name|i
operator|++
control|)
block|{
name|String
name|q
init|=
name|sha
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|40
operator|-
name|i
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
name|q
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"commit:"
operator|+
name|q
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|byOwner ()
specifier|public
name|void
name|byOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
name|user2
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"is:owner"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"owner:"
operator|+
name|userId
operator|.
name|get
argument_list|()
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"owner:"
operator|+
name|user2
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|String
name|nameEmail
init|=
name|user
operator|.
name|asIdentifiedUser
argument_list|()
operator|.
name|getNameEmail
argument_list|()
decl_stmt|;
name|assertQuery
argument_list|(
literal|"owner: \""
operator|+
name|nameEmail
operator|+
literal|"\""
argument_list|,
name|change1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byAuthor ()
specifier|public
name|void
name|byAuthor
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
name|userId
argument_list|)
decl_stmt|;
comment|// By exact email address
name|assertQuery
argument_list|(
literal|"author:jauthor@example.com"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// By email address part
name|assertQuery
argument_list|(
literal|"author:jauthor"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"author:example"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"author:example.com"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// By name part
name|assertQuery
argument_list|(
literal|"author:Author"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// Case insensitive
name|assertQuery
argument_list|(
literal|"author:jAuThOr"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"author:ExAmPlE"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// By non-existing email address / name / part
name|assertQuery
argument_list|(
literal|"author:jcommitter@example.com"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"author:somewhere.com"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"author:jcommitter"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"author:Committer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byCommitter ()
specifier|public
name|void
name|byCommitter
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
name|userId
argument_list|)
decl_stmt|;
comment|// By exact email address
name|assertQuery
argument_list|(
literal|"committer:jcommitter@example.com"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// By email address part
name|assertQuery
argument_list|(
literal|"committer:jcommitter"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"committer:example"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"committer:example.com"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// By name part
name|assertQuery
argument_list|(
literal|"committer:Committer"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// Case insensitive
name|assertQuery
argument_list|(
literal|"committer:jCoMmItTeR"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"committer:ExAmPlE"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// By non-existing email address / name / part
name|assertQuery
argument_list|(
literal|"committer:jauthor@example.com"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"committer:somewhere.com"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"committer:jauthor"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"committer:Author"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byOwnerIn ()
specifier|public
name|void
name|byOwnerIn
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
name|user2
argument_list|)
decl_stmt|;
name|Change
name|change3
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
name|user2
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"ownerin:Administrators"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"ownerin:\"Registered Users\""
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"ownerin:\"Registered Users\" project:repo"
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"ownerin:\"Registered Users\" status:merged"
argument_list|,
name|change3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byProject ()
specifier|public
name|void
name|byProject
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo1
init|=
name|createProject
argument_list|(
literal|"repo1"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo2
init|=
name|createProject
argument_list|(
literal|"repo2"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo1
argument_list|,
name|newChange
argument_list|(
name|repo1
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo2
argument_list|,
name|newChange
argument_list|(
name|repo2
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"project:foo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"project:repo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"project:repo1"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"project:repo2"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byParentProject ()
specifier|public
name|void
name|byParentProject
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo1
init|=
name|createProject
argument_list|(
literal|"repo1"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo2
init|=
name|createProject
argument_list|(
literal|"repo2"
argument_list|,
literal|"repo1"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo1
argument_list|,
name|newChange
argument_list|(
name|repo1
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo2
argument_list|,
name|newChange
argument_list|(
name|repo2
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"parentproject:repo1"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"parentproject:repo2"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byProjectPrefix ()
specifier|public
name|void
name|byProjectPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo1
init|=
name|createProject
argument_list|(
literal|"repo1"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo2
init|=
name|createProject
argument_list|(
literal|"repo2"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo1
argument_list|,
name|newChange
argument_list|(
name|repo1
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo2
argument_list|,
name|newChange
argument_list|(
name|repo2
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"projects:foo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"projects:repo1"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"projects:repo2"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"projects:repo"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byBranchAndRef ()
specifier|public
name|void
name|byBranchAndRef
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForBranch
argument_list|(
name|repo
argument_list|,
literal|"master"
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForBranch
argument_list|(
name|repo
argument_list|,
literal|"branch"
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"branch:foo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"branch:master"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"branch:refs/heads/master"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"ref:master"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"ref:refs/heads/master"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"branch:refs/heads/master"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"branch:branch"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"branch:refs/heads/branch"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"ref:branch"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"ref:refs/heads/branch"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byTopic ()
specifier|public
name|void
name|byTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChangeWithTopic
argument_list|(
name|repo
argument_list|,
literal|"feature1"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins1
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChangeWithTopic
argument_list|(
name|repo
argument_list|,
literal|"feature2"
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins2
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins3
init|=
name|newChangeWithTopic
argument_list|(
name|repo
argument_list|,
literal|"Cherrypick-feature2"
argument_list|)
decl_stmt|;
name|Change
name|change3
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins3
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins4
init|=
name|newChangeWithTopic
argument_list|(
name|repo
argument_list|,
literal|"feature2-fixup"
argument_list|)
decl_stmt|;
name|Change
name|change4
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins4
argument_list|)
decl_stmt|;
name|Change
name|change5
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"intopic:foo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"intopic:feature1"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"intopic:feature2"
argument_list|,
name|change4
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"topic:feature2"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"intopic:feature2"
argument_list|,
name|change4
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"intopic:fixup"
argument_list|,
name|change4
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"topic:\"\""
argument_list|,
name|change5
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"intopic:\"\""
argument_list|,
name|change5
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"intopic:^feature2.*"
argument_list|,
name|change4
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"intopic:{^.*feature2$}"
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byMessageExact ()
specifier|public
name|void
name|byMessageExact
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit1
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"one"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit1
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|commit2
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"two"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit2
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"message:foo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"message:one"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"message:two"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fullTextWithNumbers ()
specifier|public
name|void
name|fullTextWithNumbers
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit1
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"12345 67890"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit1
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|commit2
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"12346 67891"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit2
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"message:1234"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"message:12345"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"message:12346"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byLabel ()
specifier|public
name|void
name|byLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins3
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins4
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins5
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|reviewMinus2Change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|reviewMinus2Change
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|reject
argument_list|()
argument_list|)
expr_stmt|;
name|Change
name|reviewMinus1Change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins2
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|reviewMinus1Change
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|dislike
argument_list|()
argument_list|)
expr_stmt|;
name|Change
name|noLabelChange
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins3
argument_list|)
decl_stmt|;
name|Change
name|reviewPlus1Change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins4
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|reviewPlus1Change
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
argument_list|)
expr_stmt|;
name|Change
name|reviewPlus2Change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins5
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|reviewPlus2Change
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|m
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|reviewPlus1Change
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|votes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|m
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
argument_list|)
operator|.
name|containsEntry
argument_list|(
literal|"Code-Review"
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Change
argument_list|>
name|changes
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|changes
operator|.
name|put
argument_list|(
literal|2
argument_list|,
name|reviewPlus2Change
argument_list|)
expr_stmt|;
name|changes
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|reviewPlus1Change
argument_list|)
expr_stmt|;
name|changes
operator|.
name|put
argument_list|(
literal|0
argument_list|,
name|noLabelChange
argument_list|)
expr_stmt|;
name|changes
operator|.
name|put
argument_list|(
operator|-
literal|1
argument_list|,
name|reviewMinus1Change
argument_list|)
expr_stmt|;
name|changes
operator|.
name|put
argument_list|(
operator|-
literal|2
argument_list|,
name|reviewMinus2Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=-2"
argument_list|,
name|reviewMinus2Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review-2"
argument_list|,
name|reviewMinus2Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=-1"
argument_list|,
name|reviewMinus1Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review-1"
argument_list|,
name|reviewMinus1Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=0"
argument_list|,
name|noLabelChange
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1"
argument_list|,
name|reviewPlus1Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=1"
argument_list|,
name|reviewPlus1Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review+1"
argument_list|,
name|reviewPlus1Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+2"
argument_list|,
name|reviewPlus2Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=2"
argument_list|,
name|reviewPlus2Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review+2"
argument_list|,
name|reviewPlus2Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>-3"
argument_list|,
name|codeReviewInRange
argument_list|(
name|changes
argument_list|,
operator|-
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>=-2"
argument_list|,
name|codeReviewInRange
argument_list|(
name|changes
argument_list|,
operator|-
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>-2"
argument_list|,
name|codeReviewInRange
argument_list|(
name|changes
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>=-1"
argument_list|,
name|codeReviewInRange
argument_list|(
name|changes
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>-1"
argument_list|,
name|codeReviewInRange
argument_list|(
name|changes
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>=0"
argument_list|,
name|codeReviewInRange
argument_list|(
name|changes
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>0"
argument_list|,
name|codeReviewInRange
argument_list|(
name|changes
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>=1"
argument_list|,
name|codeReviewInRange
argument_list|(
name|changes
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>1"
argument_list|,
name|reviewPlus2Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>=2"
argument_list|,
name|reviewPlus2Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>2"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review<=2"
argument_list|,
name|codeReviewInRange
argument_list|(
name|changes
argument_list|,
operator|-
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review<2"
argument_list|,
name|codeReviewInRange
argument_list|(
name|changes
argument_list|,
operator|-
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review<=1"
argument_list|,
name|codeReviewInRange
argument_list|(
name|changes
argument_list|,
operator|-
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review<1"
argument_list|,
name|codeReviewInRange
argument_list|(
name|changes
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review<=0"
argument_list|,
name|codeReviewInRange
argument_list|(
name|changes
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review<0"
argument_list|,
name|codeReviewInRange
argument_list|(
name|changes
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review<=-1"
argument_list|,
name|codeReviewInRange
argument_list|(
name|changes
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review<-1"
argument_list|,
name|reviewMinus2Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review<=-2"
argument_list|,
name|reviewMinus2Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review<-2"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,anotheruser"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,user"
argument_list|,
name|reviewPlus1Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,user=user"
argument_list|,
name|reviewPlus1Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,Administrators"
argument_list|,
name|reviewPlus1Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,group=Administrators"
argument_list|,
name|reviewPlus1Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,user=owner"
argument_list|,
name|reviewPlus1Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,owner"
argument_list|,
name|reviewPlus1Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+2,owner"
argument_list|,
name|reviewPlus2Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=-2,owner"
argument_list|,
name|reviewMinus2Change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byLabelMulti ()
specifier|public
name|void
name|byLabelMulti
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|project
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|repo
operator|.
name|getRepository
argument_list|()
operator|.
name|getDescription
argument_list|()
operator|.
name|getRepositoryName
argument_list|()
argument_list|)
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|LabelType
name|verified
init|=
name|category
argument_list|(
literal|"Verified"
argument_list|,
name|value
argument_list|(
literal|1
argument_list|,
literal|"Passes"
argument_list|)
argument_list|,
name|value
argument_list|(
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|,
name|value
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Failed"
argument_list|)
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|,
name|verified
argument_list|)
expr_stmt|;
name|String
name|heads
init|=
name|RefNames
operator|.
name|REFS_HEADS
operator|+
literal|"*"
decl_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|cfg
argument_list|,
name|Permission
operator|.
name|forLabel
argument_list|(
name|Util
operator|.
name|verified
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
name|REGISTERED_USERS
argument_list|,
name|heads
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|md
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|project
argument_list|)
init|)
block|{
name|cfg
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
name|projectCache
operator|.
name|evict
argument_list|(
name|cfg
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
name|ReviewInput
name|reviewVerified
init|=
operator|new
name|ReviewInput
argument_list|()
operator|.
name|label
argument_list|(
literal|"Verified"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins3
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins4
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins5
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// CR+1
name|Change
name|reviewCRplus1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|reviewCRplus1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
argument_list|)
expr_stmt|;
comment|// CR+2
name|Change
name|reviewCRplus2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins2
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|reviewCRplus2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
comment|// CR+1 VR+1
name|Change
name|reviewCRplus1VRplus1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins3
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|reviewCRplus1VRplus1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|reviewCRplus1VRplus1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|reviewVerified
argument_list|)
expr_stmt|;
comment|// CR+2 VR+1
name|Change
name|reviewCRplus2VRplus1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins4
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|reviewCRplus2VRplus1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|reviewCRplus2VRplus1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|reviewVerified
argument_list|)
expr_stmt|;
comment|// VR+1
name|Change
name|reviewVRplus1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins5
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|reviewVRplus1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|reviewVerified
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1"
argument_list|,
name|reviewCRplus1VRplus1
argument_list|,
name|reviewCRplus1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>=+1"
argument_list|,
name|reviewCRplus2VRplus1
argument_list|,
name|reviewCRplus1VRplus1
argument_list|,
name|reviewCRplus2
argument_list|,
name|reviewCRplus1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>=+2"
argument_list|,
name|reviewCRplus2VRplus1
argument_list|,
name|reviewCRplus2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>=+1 label:Verified=+1"
argument_list|,
name|reviewCRplus2VRplus1
argument_list|,
name|reviewCRplus1VRplus1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review>=+2 label:Verified=+1"
argument_list|,
name|reviewCRplus2VRplus1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byLabelNotOwner ()
specifier|public
name|void
name|byLabelNotOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|user1
init|=
name|createAccount
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|Change
name|reviewPlus1Change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins
argument_list|)
decl_stmt|;
comment|// post a review with user1
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|user1
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|reviewPlus1Change
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,user=user1"
argument_list|,
name|reviewPlus1Change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,owner"
argument_list|)
expr_stmt|;
block|}
DECL|method|codeReviewInRange (Map<Integer, Change> changes, int start, int end)
specifier|private
name|Change
index|[]
name|codeReviewInRange
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Change
argument_list|>
name|changes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
name|Change
index|[]
name|range
init|=
operator|new
name|Change
index|[
name|end
operator|-
name|start
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|changes
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|>=
name|start
operator|&&
name|i
operator|<=
name|end
condition|)
block|{
name|range
index|[
name|size
index|]
operator|=
name|changes
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|size
operator|++
expr_stmt|;
block|}
block|}
return|return
name|range
return|;
block|}
DECL|method|createGroup (String name, String owner)
specifier|private
name|String
name|createGroup
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|Exception
block|{
name|GroupInput
name|in
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|in
operator|.
name|ownerId
operator|=
name|owner
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
DECL|method|createAccount (String name)
specifier|private
name|Account
operator|.
name|Id
name|createAccount
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|byLabelGroup ()
specifier|public
name|void
name|byLabelGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|user1
init|=
name|createAccount
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|createAccount
argument_list|(
literal|"user2"
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
comment|// create group and add users
name|String
name|g1
init|=
name|createGroup
argument_list|(
literal|"group1"
argument_list|,
literal|"Administrators"
argument_list|)
decl_stmt|;
name|String
name|g2
init|=
name|createGroup
argument_list|(
literal|"group2"
argument_list|,
literal|"Administrators"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|g1
argument_list|)
operator|.
name|addMembers
argument_list|(
literal|"user1"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|g2
argument_list|)
operator|.
name|addMembers
argument_list|(
literal|"user2"
argument_list|)
expr_stmt|;
comment|// create a change
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
name|user1
argument_list|)
decl_stmt|;
comment|// post a review with user1
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|user1
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that query with user1 will return results.
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|userId
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,group1"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,group=group1"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,user=user1"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,user=user2"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:Code-Review=+1,group=group2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|limit ()
specifier|public
name|void
name|limit
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|last
init|=
literal|null
decl_stmt|;
name|int
name|n
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|last
operator|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|n
operator|+
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|int
name|expectedSize
decl_stmt|;
name|Boolean
name|expectedMoreChanges
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|n
condition|)
block|{
name|expectedSize
operator|=
name|i
expr_stmt|;
name|expectedMoreChanges
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|expectedSize
operator|=
name|n
expr_stmt|;
name|expectedMoreChanges
operator|=
literal|null
expr_stmt|;
block|}
name|String
name|q
init|=
literal|"status:new limit:"
operator|+
name|i
decl_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
init|=
name|newQuery
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|)
operator|.
name|named
argument_list|(
name|q
argument_list|)
operator|.
name|hasSize
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|results
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|_moreChanges
argument_list|)
operator|.
name|named
argument_list|(
name|q
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMoreChanges
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|last
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Change
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|changes
operator|.
name|add
argument_list|(
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertQuery
argument_list|(
literal|"status:new"
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"status:new"
argument_list|)
operator|.
name|withStart
argument_list|(
literal|1
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"status:new"
argument_list|)
operator|.
name|withStart
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"status:new"
argument_list|)
operator|.
name|withStart
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|startWithLimit ()
specifier|public
name|void
name|startWithLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Change
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|changes
operator|.
name|add
argument_list|(
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertQuery
argument_list|(
literal|"status:new limit:2"
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"status:new limit:2"
argument_list|)
operator|.
name|withStart
argument_list|(
literal|1
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"status:new limit:2"
argument_list|)
operator|.
name|withStart
argument_list|(
literal|2
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"status:new limit:2"
argument_list|)
operator|.
name|withStart
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|maxPages ()
specifier|public
name|void
name|maxPages
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|QueryRequest
name|query
init|=
name|newQuery
argument_list|(
literal|"status:new"
argument_list|)
operator|.
name|withLimit
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
name|query
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|query
operator|.
name|withStart
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|query
operator|.
name|withStart
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|assertThatQueryException
argument_list|(
name|query
operator|.
name|withStart
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Cannot go beyond page 10 of results"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|query
operator|.
name|withLimit
argument_list|(
literal|100
argument_list|)
operator|.
name|withStart
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateOrder ()
specifier|public
name|void
name|updateOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|resetTimeWithClockStep
argument_list|(
literal|2
argument_list|,
name|MINUTES
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ChangeInserter
argument_list|>
name|inserters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Change
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|inserters
operator|.
name|add
argument_list|(
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
name|changes
operator|.
name|add
argument_list|(
name|insert
argument_list|(
name|repo
argument_list|,
name|inserters
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
control|)
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
operator|.
name|message
argument_list|(
literal|"modifying "
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertQuery
argument_list|(
literal|"status:new"
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updatedOrderWithMinuteResolution ()
specifier|public
name|void
name|updatedOrderWithMinuteResolution
parameter_list|()
throws|throws
name|Exception
block|{
name|resetTimeWithClockStep
argument_list|(
literal|2
argument_list|,
name|MINUTES
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChange
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins1
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
argument_list|)
operator|.
name|isLessThan
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:new"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
literal|"new-topic"
argument_list|)
expr_stmt|;
name|change1
operator|=
name|notesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|change1
operator|.
name|getProject
argument_list|()
argument_list|,
name|change1
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getChange
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
operator|-
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|1
argument_list|,
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
comment|// change1 moved to the top.
name|assertQuery
argument_list|(
literal|"status:new"
argument_list|,
name|change1
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updatedOrderWithSubMinuteResolution ()
specifier|public
name|void
name|updatedOrderWithSubMinuteResolution
parameter_list|()
throws|throws
name|Exception
block|{
name|resetTimeWithClockStep
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChange
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins1
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
argument_list|)
operator|.
name|isLessThan
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:new"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
literal|"new-topic"
argument_list|)
expr_stmt|;
name|change1
operator|=
name|notesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|change1
operator|.
name|getProject
argument_list|()
argument_list|,
name|change1
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getChange
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
operator|-
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
operator|.
name|isLessThan
argument_list|(
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|1
argument_list|,
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
comment|// change1 moved to the top.
name|assertQuery
argument_list|(
literal|"status:new"
argument_list|,
name|change1
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|filterOutMoreThanOnePageOfResults ()
specifier|public
name|void
name|filterOutMoreThanOnePageOfResults
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
name|user2
argument_list|)
expr_stmt|;
block|}
name|assertQuery
argument_list|(
literal|"status:new ownerin:Administrators"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:new ownerin:Administrators limit:2"
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|filterOutAllResults ()
specifier|public
name|void
name|filterOutAllResults
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
name|user2
argument_list|)
expr_stmt|;
block|}
name|assertQuery
argument_list|(
literal|"status:new ownerin:Administrators"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:new ownerin:Administrators limit:2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byFileExact ()
specifier|public
name|void
name|byFileExact
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"one"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file1"
argument_list|,
literal|"contents1"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file2"
argument_list|,
literal|"contents2"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"file:file"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"file:dir"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"file:file1"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"file:file2"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"file:dir/file1"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"file:dir/file2"
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byFileRegex ()
specifier|public
name|void
name|byFileRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"one"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file1"
argument_list|,
literal|"contents1"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file2"
argument_list|,
literal|"contents2"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"file:.*file.*"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"file:^file.*"
argument_list|)
expr_stmt|;
comment|// Whole path only.
name|assertQuery
argument_list|(
literal|"file:^dir.file.*"
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byPathExact ()
specifier|public
name|void
name|byPathExact
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"one"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file1"
argument_list|,
literal|"contents1"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file2"
argument_list|,
literal|"contents2"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"path:file"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"path:dir"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"path:file1"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"path:file2"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"path:dir/file1"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"path:dir/file2"
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byPathRegex ()
specifier|public
name|void
name|byPathRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"one"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file1"
argument_list|,
literal|"contents1"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file2"
argument_list|,
literal|"contents2"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"path:.*file.*"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"path:^dir.file.*"
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byComment ()
specifier|public
name|void
name|byComment
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins
init|=
name|newChange
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins
argument_list|)
decl_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|message
operator|=
literal|"toplevel"
expr_stmt|;
name|ReviewInput
operator|.
name|CommentInput
name|commentInput
init|=
operator|new
name|ReviewInput
operator|.
name|CommentInput
argument_list|()
decl_stmt|;
name|commentInput
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|commentInput
operator|.
name|message
operator|=
literal|"inline"
expr_stmt|;
name|input
operator|.
name|comments
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|List
argument_list|<
name|ReviewInput
operator|.
name|CommentInput
argument_list|>
operator|>
name|of
argument_list|(
name|Patch
operator|.
name|COMMIT_MSG
argument_list|,
name|ImmutableList
operator|.
expr|<
name|ReviewInput
operator|.
name|CommentInput
operator|>
name|of
argument_list|(
name|commentInput
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|comments
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|comments
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|comments
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommentInfo
name|comment
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|comments
operator|.
name|get
argument_list|(
name|Patch
operator|.
name|COMMIT_MSG
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|comment
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commentInput
operator|.
name|message
argument_list|)
expr_stmt|;
name|ChangeMessageInfo
name|lastMsg
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|messages
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lastMsg
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Patch Set 1:\n\n(1 comment)\n\n"
operator|+
name|input
operator|.
name|message
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"comment:foo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"comment:toplevel"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"comment:inline"
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byAge ()
specifier|public
name|void
name|byAge
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|thirtyHoursInMs
init|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|30
argument_list|,
name|HOURS
argument_list|)
decl_stmt|;
name|resetTimeWithClockStep
argument_list|(
name|thirtyHoursInMs
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|long
name|startMs
init|=
name|TestTimeUtil
operator|.
name|START
operator|.
name|getMillis
argument_list|()
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|startMs
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|startMs
operator|+
name|thirtyHoursInMs
argument_list|)
argument_list|)
decl_stmt|;
comment|// Stop time so age queries use the same endpoint.
name|TestTimeUtil
operator|.
name|setClockStep
argument_list|(
literal|0
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|TestTimeUtil
operator|.
name|setClock
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|startMs
operator|+
literal|2
operator|*
name|thirtyHoursInMs
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|nowMs
init|=
name|TimeUtil
operator|.
name|nowMs
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
operator|-
name|lastUpdatedMs
argument_list|(
name|change1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|thirtyHoursInMs
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nowMs
operator|-
name|lastUpdatedMs
argument_list|(
name|change2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|thirtyHoursInMs
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TimeUtil
operator|.
name|nowMs
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|nowMs
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-age:1d"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-age:"
operator|+
operator|(
literal|30
operator|*
literal|60
operator|-
literal|1
operator|)
operator|+
literal|"m"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-age:2d"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-age:3d"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"age:3d"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"age:2d"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"age:1d"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byBeforeUntil ()
specifier|public
name|void
name|byBeforeUntil
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|thirtyHoursInMs
init|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|30
argument_list|,
name|HOURS
argument_list|)
decl_stmt|;
name|resetTimeWithClockStep
argument_list|(
name|thirtyHoursInMs
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|long
name|startMs
init|=
name|TestTimeUtil
operator|.
name|START
operator|.
name|getMillis
argument_list|()
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|startMs
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|startMs
operator|+
name|thirtyHoursInMs
argument_list|)
argument_list|)
decl_stmt|;
name|TestTimeUtil
operator|.
name|setClockStep
argument_list|(
literal|0
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|predicate
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"before:"
argument_list|,
literal|"until:"
argument_list|)
control|)
block|{
name|assertQuery
argument_list|(
name|predicate
operator|+
literal|"2009-09-29"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|predicate
operator|+
literal|"2009-09-30"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|predicate
operator|+
literal|"\"2009-09-30 16:59:00 -0400\""
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|predicate
operator|+
literal|"\"2009-09-30 20:59:00 -0000\""
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|predicate
operator|+
literal|"\"2009-09-30 20:59:00\""
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|predicate
operator|+
literal|"\"2009-09-30 17:02:00 -0400\""
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|predicate
operator|+
literal|"\"2009-10-01 21:02:00 -0000\""
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|predicate
operator|+
literal|"\"2009-10-01 21:02:00\""
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|predicate
operator|+
literal|"2009-10-01"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|predicate
operator|+
literal|"2009-10-03"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|byAfterSince ()
specifier|public
name|void
name|byAfterSince
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|thirtyHoursInMs
init|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|30
argument_list|,
name|HOURS
argument_list|)
decl_stmt|;
name|resetTimeWithClockStep
argument_list|(
name|thirtyHoursInMs
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|long
name|startMs
init|=
name|TestTimeUtil
operator|.
name|START
operator|.
name|getMillis
argument_list|()
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|startMs
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|startMs
operator|+
name|thirtyHoursInMs
argument_list|)
argument_list|)
decl_stmt|;
name|TestTimeUtil
operator|.
name|setClockStep
argument_list|(
literal|0
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|predicate
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"after:"
argument_list|,
literal|"since:"
argument_list|)
control|)
block|{
name|assertQuery
argument_list|(
name|predicate
operator|+
literal|"2009-10-03"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|predicate
operator|+
literal|"\"2009-10-01 20:59:59 -0400\""
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|predicate
operator|+
literal|"\"2009-10-01 20:59:59 -0000\""
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|predicate
operator|+
literal|"2009-10-01"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|predicate
operator|+
literal|"2009-09-30"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|bySize ()
specifier|public
name|void
name|bySize
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
comment|// added = 3, deleted = 0, delta = 3
name|RevCommit
name|commit1
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"file1"
argument_list|,
literal|"foo\n\foo\nfoo"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
comment|// added = 0, deleted = 2, delta = 2
name|RevCommit
name|commit2
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|commit1
argument_list|)
operator|.
name|add
argument_list|(
literal|"file1"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit1
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit2
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"added:>4"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-added:<=4"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"added:3"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-(added:<3 OR added>3)"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"added:>2"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-added:<=2"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"added:>=3"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-added:<3"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"added:<1"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-added:>=1"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"added:<=0"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-added:>0"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"deleted:>3"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-deleted:<=3"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"deleted:2"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-(deleted:<2 OR deleted>2)"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"deleted:>1"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-deleted:<=1"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"deleted:>=2"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-deleted:<2"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"deleted:<1"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-deleted:>=1"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"deleted:<=0"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|str
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"delta:"
argument_list|,
literal|"size:"
argument_list|)
control|)
block|{
name|assertQuery
argument_list|(
name|str
operator|+
literal|"<2"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|str
operator|+
literal|"3"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|str
operator|+
literal|">2"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|str
operator|+
literal|">=3"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|str
operator|+
literal|"<3"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|str
operator|+
literal|"<=2"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setUpHashtagChanges ()
specifier|private
name|List
argument_list|<
name|Change
argument_list|>
name|setUpHashtagChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|HashtagsInput
name|in
init|=
operator|new
name|HashtagsInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|add
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setHashtags
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|in
operator|.
name|add
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"a tag"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setHashtags
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|change1
argument_list|,
name|change2
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|byHashtagWithNoteDb ()
specifier|public
name|void
name|byHashtagWithNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Change
argument_list|>
name|changes
init|=
name|setUpHashtagChanges
argument_list|()
decl_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:foo"
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:bar"
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\"a tag\""
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\"a tag \""
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\" a tag \""
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\"#a tag\""
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\"# #a tag\""
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byHashtagWithoutNoteDb ()
specifier|public
name|void
name|byHashtagWithoutNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|notesMigration
operator|.
name|setWriteChanges
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|notesMigration
operator|.
name|setReadChanges
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Change
argument_list|>
name|changes
decl_stmt|;
try|try
block|{
name|changes
operator|=
name|setUpHashtagChanges
argument_list|()
expr_stmt|;
name|notesMigration
operator|.
name|setWriteChanges
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|notesMigration
operator|.
name|setReadChanges
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
expr_stmt|;
for|for
control|(
name|Change
name|c
range|:
name|changes
control|)
block|{
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|c
argument_list|)
expr_stmt|;
comment|// Reindex without hashtag field.
block|}
name|assertQuery
argument_list|(
literal|"hashtag:foo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:bar"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\" bar \""
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\"a tag\""
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\" a tag \""
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:#foo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"hashtag:\"# #foo\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byDefault ()
specifier|public
name|void
name|byDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|commit2
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"foosubject"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit2
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|commit3
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"Foo.java"
argument_list|,
literal|"foo contents"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change3
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit3
argument_list|)
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins4
init|=
name|newChange
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|Change
name|change4
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins4
argument_list|)
decl_stmt|;
name|ReviewInput
name|ri4
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|ri4
operator|.
name|message
operator|=
literal|"toplevel"
expr_stmt|;
name|ri4
operator|.
name|labels
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|Short
operator|>
name|of
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change4
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ri4
argument_list|)
expr_stmt|;
name|ChangeInserter
name|ins5
init|=
name|newChangeWithTopic
argument_list|(
name|repo
argument_list|,
literal|"feature5"
argument_list|)
decl_stmt|;
name|Change
name|change5
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins5
argument_list|)
decl_stmt|;
name|Change
name|change6
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForBranch
argument_list|(
name|repo
argument_list|,
literal|"branch6"
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|ChangeTriplet
operator|.
name|format
argument_list|(
name|change1
argument_list|)
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"foosubject"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"Foo.java"
argument_list|,
name|change3
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"Code-Review+1"
argument_list|,
name|change4
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"toplevel"
argument_list|,
name|change4
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"feature5"
argument_list|,
name|change5
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"branch6"
argument_list|,
name|change6
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"refs/heads/branch6"
argument_list|,
name|change6
argument_list|)
expr_stmt|;
name|Change
index|[]
name|expected
init|=
operator|new
name|Change
index|[]
block|{
name|change6
block|,
name|change5
block|,
name|change4
block|,
name|change3
block|,
name|change2
block|,
name|change1
block|}
decl_stmt|;
name|assertQuery
argument_list|(
literal|"user@example.com"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"repo"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byDefaultWithCommitPrefix ()
specifier|public
name|void
name|byDefaultWithCommitPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"message"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
name|commit
operator|.
name|getId
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|)
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|implicitVisibleTo ()
specifier|public
name|void
name|implicitVisibleTo
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|DRAFT
argument_list|)
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|String
name|q
init|=
literal|"project:repo"
decl_stmt|;
name|assertQuery
argument_list|(
name|q
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// Second user cannot see first user's drafts.
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|q
argument_list|,
name|change1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|explicitVisibleTo ()
specifier|public
name|void
name|explicitVisibleTo
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|DRAFT
argument_list|)
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|String
name|q
init|=
literal|"project:repo"
decl_stmt|;
name|assertQuery
argument_list|(
name|q
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// Second user cannot see first user's drafts.
name|Account
operator|.
name|Id
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|assertQuery
argument_list|(
name|q
operator|+
literal|" visibleto:"
operator|+
name|user2
operator|.
name|get
argument_list|()
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:visible"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byCommentBy ()
specifier|public
name|void
name|byCommentBy
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|message
operator|=
literal|"toplevel"
expr_stmt|;
name|ReviewInput
operator|.
name|CommentInput
name|comment
init|=
operator|new
name|ReviewInput
operator|.
name|CommentInput
argument_list|()
decl_stmt|;
name|comment
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|comment
operator|.
name|message
operator|=
literal|"inline"
expr_stmt|;
name|input
operator|.
name|comments
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|List
argument_list|<
name|ReviewInput
operator|.
name|CommentInput
argument_list|>
operator|>
name|of
argument_list|(
name|Patch
operator|.
name|COMMIT_MSG
argument_list|,
name|ImmutableList
operator|.
expr|<
name|ReviewInput
operator|.
name|CommentInput
operator|>
name|of
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|input
operator|=
operator|new
name|ReviewInput
argument_list|()
expr_stmt|;
name|input
operator|.
name|message
operator|=
literal|"toplevel"
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"commentby:"
operator|+
name|userId
operator|.
name|get
argument_list|()
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"commentby:"
operator|+
name|user2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byDraftBy ()
specifier|public
name|void
name|byDraftBy
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"has:draft"
argument_list|)
expr_stmt|;
name|DraftInput
name|in
init|=
operator|new
name|DraftInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"nit: trailing whitespace"
expr_stmt|;
name|in
operator|.
name|path
operator|=
name|Patch
operator|.
name|COMMIT_MSG
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|createDraft
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|DraftInput
argument_list|()
expr_stmt|;
name|in
operator|.
name|line
operator|=
literal|2
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"nit: point in the end of the statement"
expr_stmt|;
name|in
operator|.
name|path
operator|=
name|Patch
operator|.
name|COMMIT_MSG
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|createDraft
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertQuery
argument_list|(
literal|"has:draft"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"draftby:"
operator|+
name|userId
operator|.
name|get
argument_list|()
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"draftby:"
operator|+
name|user2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byDraftByExcludesZombieDrafts ()
specifier|public
name|void
name|byDraftByExcludesZombieDrafts
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|Project
operator|.
name|NameKey
name|project
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|change
operator|.
name|getId
argument_list|()
decl_stmt|;
name|DraftInput
name|in
init|=
operator|new
name|DraftInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"nit: trailing whitespace"
expr_stmt|;
name|in
operator|.
name|path
operator|=
name|Patch
operator|.
name|COMMIT_MSG
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|createDraft
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"draftby:"
operator|+
name|userId
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"commentby:"
operator|+
name|userId
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|allUsers
init|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
argument_list|)
decl_stmt|;
name|Ref
name|draftsRef
init|=
name|allUsers
operator|.
name|getRepository
argument_list|()
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|refsDraftComments
argument_list|(
name|id
argument_list|,
name|userId
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|draftsRef
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|ReviewInput
name|rin
init|=
name|ReviewInput
operator|.
name|dislike
argument_list|()
decl_stmt|;
name|rin
operator|.
name|drafts
operator|=
name|DraftHandling
operator|.
name|PUBLISH_ALL_REVISIONS
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|rin
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"draftby:"
operator|+
name|userId
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"commentby:"
operator|+
name|userId
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allUsers
operator|.
name|getRepository
argument_list|()
operator|.
name|exactRef
argument_list|(
name|draftsRef
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// Re-add drafts ref and ensure it gets filtered out during indexing.
name|allUsers
operator|.
name|update
argument_list|(
name|draftsRef
operator|.
name|getName
argument_list|()
argument_list|,
name|draftsRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allUsers
operator|.
name|getRepository
argument_list|()
operator|.
name|exactRef
argument_list|(
name|draftsRef
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
if|if
condition|(
name|PrimaryStorage
operator|.
name|of
argument_list|(
name|change
argument_list|)
operator|==
name|PrimaryStorage
operator|.
name|REVIEW_DB
condition|)
block|{
comment|// Record draft ref in noteDbState as well.
name|ReviewDb
name|db
init|=
name|ReviewDbUtil
operator|.
name|unwrapDb
argument_list|(
name|this
operator|.
name|db
argument_list|)
decl_stmt|;
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|NoteDbChangeState
operator|.
name|applyDelta
argument_list|(
name|change
argument_list|,
name|NoteDbChangeState
operator|.
name|Delta
operator|.
name|create
argument_list|(
name|id
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|userId
argument_list|,
name|draftsRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"draftby:"
operator|+
name|userId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byStarredBy ()
specifier|public
name|void
name|byStarredBy
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|starChange
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|starChange
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertQuery
argument_list|(
literal|"starredby:self"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"starredby:"
operator|+
name|user2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byStar ()
specifier|public
name|void
name|byStar
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|StarsInput
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|StarsInput
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|StarredChangesUtil
operator|.
name|DEFAULT_LABEL
argument_list|,
literal|"green"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check labeled stars
name|assertQuery
argument_list|(
literal|"star:red"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"star:blue"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"has:stars"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// check default star
name|assertQuery
argument_list|(
literal|"has:star"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:starred"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"starredby:self"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"star:"
operator|+
name|StarredChangesUtil
operator|.
name|DEFAULT_LABEL
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byFrom ()
specifier|public
name|void
name|byFrom
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
name|user2
argument_list|)
decl_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|message
operator|=
literal|"toplevel"
expr_stmt|;
name|ReviewInput
operator|.
name|CommentInput
name|comment
init|=
operator|new
name|ReviewInput
operator|.
name|CommentInput
argument_list|()
decl_stmt|;
name|comment
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|comment
operator|.
name|message
operator|=
literal|"inline"
expr_stmt|;
name|input
operator|.
name|comments
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|List
argument_list|<
name|ReviewInput
operator|.
name|CommentInput
argument_list|>
operator|>
name|of
argument_list|(
name|Patch
operator|.
name|COMMIT_MSG
argument_list|,
name|ImmutableList
operator|.
expr|<
name|ReviewInput
operator|.
name|CommentInput
operator|>
name|of
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"from:"
operator|+
name|userId
operator|.
name|get
argument_list|()
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"from:"
operator|+
name|user2
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|conflicts ()
specifier|public
name|void
name|conflicts
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit1
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"file1"
argument_list|,
literal|"contents1"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file2"
argument_list|,
literal|"contents2"
argument_list|)
operator|.
name|add
argument_list|(
literal|"dir/file3"
argument_list|,
literal|"contents3"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|commit2
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"file1"
argument_list|,
literal|"contents1"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|commit3
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"dir/file2"
argument_list|,
literal|"contents2 different"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|commit4
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"file4"
argument_list|,
literal|"contents4"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit1
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit2
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change3
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit3
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change4
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit4
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"conflicts:"
operator|+
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|change3
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"conflicts:"
operator|+
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"conflicts:"
operator|+
name|change3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"conflicts:"
operator|+
name|change4
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeable ()
specifier|public
name|void
name|mergeable
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit1
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"file1"
argument_list|,
literal|"contents1"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|commit2
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"file1"
argument_list|,
literal|"contents2"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit1
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit2
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"conflicts:"
operator|+
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"conflicts:"
operator|+
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:mergeable"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
literal|"current"
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
literal|"current"
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"conflicts:"
operator|+
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:open is:mergeable"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:open -is:mergeable"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewedBy ()
specifier|public
name|void
name|reviewedBy
parameter_list|()
throws|throws
name|Exception
block|{
name|resetTimeWithClockStep
argument_list|(
literal|2
argument_list|,
name|MINUTES
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change3
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
operator|.
name|message
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|Account
operator|.
name|Id
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|user2
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
operator|.
name|message
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps3_1
init|=
name|change3
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|change3
operator|=
name|newPatchSet
argument_list|(
name|repo
argument_list|,
name|change3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change3
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|ps3_1
argument_list|)
expr_stmt|;
comment|// Response to previous patch set still counts as reviewing.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|ps3_1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
operator|.
name|message
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|actual
decl_stmt|;
name|actual
operator|=
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"is:reviewed"
argument_list|)
operator|.
name|withOption
argument_list|(
name|REVIEWED
argument_list|)
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reviewed
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|reviewed
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|actual
operator|=
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"-is:reviewed"
argument_list|)
operator|.
name|withOption
argument_list|(
name|REVIEWED
argument_list|)
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reviewed
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|actual
operator|=
name|assertQuery
argument_list|(
literal|"reviewedby:"
operator|+
name|userId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|actual
operator|=
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
literal|"reviewedby:"
operator|+
name|user2
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|withOption
argument_list|(
name|REVIEWED
argument_list|)
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reviewed
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|reviewed
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewerAndCc ()
specifier|public
name|void
name|reviewerAndCc
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|user1
init|=
name|createAccount
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change3
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
name|AddReviewerInput
name|rin
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|rin
operator|.
name|reviewer
operator|=
name|user1
operator|.
name|toString
argument_list|()
expr_stmt|;
name|rin
operator|.
name|state
operator|=
name|ReviewerState
operator|.
name|REVIEWER
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|rin
argument_list|)
expr_stmt|;
name|rin
operator|=
operator|new
name|AddReviewerInput
argument_list|()
expr_stmt|;
name|rin
operator|.
name|reviewer
operator|=
name|user1
operator|.
name|toString
argument_list|()
expr_stmt|;
name|rin
operator|.
name|state
operator|=
name|ReviewerState
operator|.
name|CC
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|rin
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:reviewer"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"reviewer:self"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
literal|"current"
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:reviewer"
argument_list|,
name|change3
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"reviewer:self"
argument_list|,
name|change3
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|user1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
name|assertQuery
argument_list|(
literal|"reviewer:"
operator|+
name|user1
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"cc:"
operator|+
name|user1
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:cc"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"cc:self"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertQuery
argument_list|(
literal|"reviewer:"
operator|+
name|user1
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"cc:"
operator|+
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:cc"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"cc:self"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|byReviewed ()
specifier|public
name|void
name|byReviewed
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|otherUser
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"anotheruser"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"is:reviewed"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:reviewed"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-is:reviewed"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-status:reviewed"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|otherUser
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:reviewed"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:reviewed"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-is:reviewed"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-status:reviewed"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewerin ()
specifier|public
name|void
name|reviewerin
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|user1
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"user1"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|user2
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"user2"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|user3
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"user3"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change3
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|AddReviewerInput
name|rin
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|rin
operator|.
name|reviewer
operator|=
name|user1
operator|.
name|toString
argument_list|()
expr_stmt|;
name|rin
operator|.
name|state
operator|=
name|ReviewerState
operator|.
name|REVIEWER
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|rin
argument_list|)
expr_stmt|;
name|rin
operator|=
operator|new
name|AddReviewerInput
argument_list|()
expr_stmt|;
name|rin
operator|.
name|reviewer
operator|=
name|user2
operator|.
name|toString
argument_list|()
expr_stmt|;
name|rin
operator|.
name|state
operator|=
name|ReviewerState
operator|.
name|REVIEWER
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|rin
argument_list|)
expr_stmt|;
name|rin
operator|=
operator|new
name|AddReviewerInput
argument_list|()
expr_stmt|;
name|rin
operator|.
name|reviewer
operator|=
name|user3
operator|.
name|toString
argument_list|()
expr_stmt|;
name|rin
operator|.
name|state
operator|=
name|ReviewerState
operator|.
name|CC
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|rin
argument_list|)
expr_stmt|;
name|String
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|name
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|addMembers
argument_list|(
name|user2
operator|.
name|toString
argument_list|()
argument_list|,
name|user3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|members
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|members
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|_accountId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|members
argument_list|)
operator|.
name|contains
argument_list|(
name|user2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
comment|// CC and REVIEWER are separate in NoteDB
name|assertQuery
argument_list|(
literal|"reviewerin:\"Registered Users\""
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"reviewerin:"
operator|+
name|group
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// CC and REVIEWER are the same in ReviewDb
name|assertQuery
argument_list|(
literal|"reviewerin:\"Registered Users\""
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"reviewerin:"
operator|+
name|group
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
if|if
condition|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
comment|// CC and REVIEWER are separate in NoteDB
name|assertQuery
argument_list|(
literal|"reviewerin:"
operator|+
name|group
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"project:repo reviewerin:"
operator|+
name|group
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:merged reviewerin:"
operator|+
name|group
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// CC and REVIEWER are the same in ReviewDb
name|assertQuery
argument_list|(
literal|"reviewerin:"
operator|+
name|group
argument_list|,
name|change3
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"project:repo reviewerin:"
operator|+
name|group
argument_list|,
name|change2
argument_list|,
name|change3
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"status:merged reviewerin:"
operator|+
name|group
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|submitRecords ()
specifier|public
name|void
name|submitRecords
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|user1
init|=
name|createAccount
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|user1
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:submittable"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-is:submittable"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"submittable:ok"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"submittable:not_ready"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:CodE-RevieW=ok"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:CodE-RevieW=ok,user=user"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:CodE-RevieW=ok,Administrators"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:CodE-RevieW=ok,group=Administrators"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:CodE-RevieW=ok,owner"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:CodE-RevieW=ok,user1"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:CodE-RevieW=need"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
comment|// NEED records don't have associated users.
name|assertQuery
argument_list|(
literal|"label:CodE-RevieW=need,user1"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"label:CodE-RevieW=need,user"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"submittable:ok"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"submittable:closed"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hasEdit ()
specifier|public
name|void
name|hasEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|user1
init|=
name|createAccount
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|user2
init|=
name|createAccount
argument_list|(
literal|"user2"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|changeId1
init|=
name|change1
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|changeId2
init|=
name|change2
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|user1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"has:edit"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId1
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|user2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"has:edit"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|user1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"has:edit"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|user2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"has:edit"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byUnresolved ()
specifier|public
name|void
name|byUnresolved
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change3
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
comment|// Change1 has one resolved comment (unresolvedcount = 0)
comment|// Change2 has one unresolved comment (unresolvedcount = 1)
comment|// Change3 has one resolved comment and one unresolved comment (unresolvedcount = 1)
name|addComment
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"comment 1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addComment
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"comment 2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addComment
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"comment 3"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addComment
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"comment 4"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"has:unresolved"
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"unresolved:0"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|changeInfos
init|=
name|assertQuery
argument_list|(
literal|"unresolved:>=0"
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changeInfos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|unresolvedCommentCount
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Change3
name|assertThat
argument_list|(
name|changeInfos
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|unresolvedCommentCount
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Change2
name|assertThat
argument_list|(
name|changeInfos
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|unresolvedCommentCount
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Change1
name|assertQuery
argument_list|(
literal|"unresolved:>0"
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"unresolved:<1"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"unresolved:<=1"
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"unresolved:1"
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"unresolved:>1"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"unresolved:>=1"
argument_list|,
name|change3
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byCommitsOnBranchNotMerged ()
specifier|public
name|void
name|byCommitsOnBranchNotMerged
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|int
name|n
init|=
literal|10
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|shas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expectedIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|Branch
operator|.
name|NameKey
name|dest
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ChangeInserter
name|ins
init|=
name|newChange
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|repo
argument_list|,
name|ins
argument_list|)
expr_stmt|;
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
block|{
name|dest
operator|=
name|ins
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
expr_stmt|;
block|}
name|shas
operator|.
name|add
argument_list|(
name|ins
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|expectedIds
operator|.
name|add
argument_list|(
name|ins
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|11
condition|;
name|i
operator|++
control|)
block|{
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|cds
init|=
name|internalChangeQuery
operator|.
name|byCommitsOnBranchNotMerged
argument_list|(
name|repo
operator|.
name|getRepository
argument_list|()
argument_list|,
name|db
argument_list|,
name|dest
argument_list|,
name|shas
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|ids
init|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|cds
argument_list|)
operator|.
name|transform
argument_list|(
name|in
lambda|->
name|in
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|"limit "
operator|+
name|i
decl_stmt|;
name|assertThat
argument_list|(
name|ids
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|hasSize
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ids
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedIds
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|prepopulatedFields ()
specifier|public
name|void
name|prepopulatedFields
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|db
operator|=
operator|new
name|DisabledReviewDb
argument_list|()
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|userId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Use QueryProcessor directly instead of API so we get ChangeDatas back.
name|List
argument_list|<
name|ChangeData
argument_list|>
name|cds
init|=
name|queryProcessor
operator|.
name|query
argument_list|(
name|queryBuilder
operator|.
name|parse
argument_list|(
name|change
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|entities
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cds
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ChangeData
name|cd
init|=
name|cds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cd
operator|.
name|change
argument_list|()
expr_stmt|;
name|cd
operator|.
name|patchSets
argument_list|()
expr_stmt|;
name|cd
operator|.
name|currentApprovals
argument_list|()
expr_stmt|;
name|cd
operator|.
name|changedLines
argument_list|()
expr_stmt|;
name|cd
operator|.
name|reviewedBy
argument_list|()
expr_stmt|;
name|cd
operator|.
name|reviewers
argument_list|()
expr_stmt|;
name|cd
operator|.
name|unresolvedCommentCount
argument_list|()
expr_stmt|;
comment|// TODO(dborowitz): Swap out GitRepositoryManager somehow? Will probably be
comment|// necessary for NoteDb anyway.
name|cd
operator|.
name|isMergeable
argument_list|()
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|DisabledReviewDb
operator|.
name|Disabled
operator|.
name|class
argument_list|)
expr_stmt|;
name|cd
operator|.
name|messages
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|prepopulateOnlyRequestedFields ()
specifier|public
name|void
name|prepopulateOnlyRequestedFields
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|db
operator|=
operator|new
name|DisabledReviewDb
argument_list|()
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|userId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Use QueryProcessor directly instead of API so we get ChangeDatas back.
name|List
argument_list|<
name|ChangeData
argument_list|>
name|cds
init|=
name|queryProcessor
operator|.
name|setRequestedFields
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ChangeField
operator|.
name|PATCH_SET
operator|.
name|getName
argument_list|()
argument_list|,
name|ChangeField
operator|.
name|CHANGE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
name|queryBuilder
operator|.
name|parse
argument_list|(
name|change
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|entities
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cds
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ChangeData
name|cd
init|=
name|cds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cd
operator|.
name|change
argument_list|()
expr_stmt|;
name|cd
operator|.
name|patchSets
argument_list|()
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|DisabledReviewDb
operator|.
name|Disabled
operator|.
name|class
argument_list|)
expr_stmt|;
name|cd
operator|.
name|currentApprovals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reindexIfStale ()
specifier|public
name|void
name|reindexIfStale
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|user
init|=
name|createAccount
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|project
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|ChangeNotes
name|notes
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSet
name|ps
init|=
name|psUtil
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|notes
argument_list|,
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"has:edit"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexer
operator|.
name|reindexIfStale
argument_list|(
name|project
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
comment|// Delete edit ref behind index's back.
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|getRepository
argument_list|()
operator|.
name|updateRef
argument_list|(
name|RefNames
operator|.
name|refsEdit
argument_list|(
name|user
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|delete
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
comment|// Index is stale.
name|assertQuery
argument_list|(
literal|"has:edit"
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexer
operator|.
name|reindexIfStale
argument_list|(
name|project
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"has:edit"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|refStateFields ()
specifier|public
name|void
name|refStateFields
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test method manages primary storage manually.
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|changePrimaryStorage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|PrimaryStorage
operator|.
name|REVIEW_DB
argument_list|)
expr_stmt|;
name|Account
operator|.
name|Id
name|user
init|=
name|createAccount
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|project
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|"file"
decl_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"one"
argument_list|)
operator|.
name|add
argument_list|(
name|path
argument_list|,
literal|"contents"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit
argument_list|)
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|change
operator|.
name|getId
argument_list|()
decl_stmt|;
name|int
name|c
init|=
name|id
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure one of each type of supported ref is present for the change. If
comment|// any more refs are added, update this test to reflect them.
comment|// Edit
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// Star
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|starChange
argument_list|(
name|change
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
comment|// Robot comment.
name|ReviewInput
name|rin
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|RobotCommentInput
name|rcin
init|=
operator|new
name|RobotCommentInput
argument_list|()
decl_stmt|;
name|rcin
operator|.
name|robotId
operator|=
literal|"happyRobot"
expr_stmt|;
name|rcin
operator|.
name|robotRunId
operator|=
literal|"1"
expr_stmt|;
name|rcin
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|rcin
operator|.
name|message
operator|=
literal|"nit: trailing whitespace"
expr_stmt|;
name|rcin
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|rin
operator|.
name|robotComments
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|path
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rcin
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|c
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|rin
argument_list|)
expr_stmt|;
block|}
comment|// Draft.
name|DraftInput
name|din
init|=
operator|new
name|DraftInput
argument_list|()
decl_stmt|;
name|din
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|din
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|din
operator|.
name|message
operator|=
literal|"draft"
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|c
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|createDraft
argument_list|(
name|din
argument_list|)
expr_stmt|;
if|if
condition|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
comment|// Force NoteDb primary.
name|change
operator|=
name|ReviewDbUtil
operator|.
name|unwrapDb
argument_list|(
name|db
argument_list|)
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|change
operator|.
name|setNoteDbState
argument_list|(
name|NoteDbChangeState
operator|.
name|NOTE_DB_PRIMARY_STATE
argument_list|)
expr_stmt|;
name|ReviewDbUtil
operator|.
name|unwrapDb
argument_list|(
name|db
argument_list|)
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
name|QueryOptions
name|opts
init|=
name|IndexedChangeQuery
operator|.
name|createOptions
argument_list|(
name|indexConfig
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|StalenessChecker
operator|.
name|FIELDS
argument_list|)
decl_stmt|;
name|ChangeData
name|cd
init|=
name|indexes
operator|.
name|getSearchIndex
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|,
name|opts
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|cs
init|=
name|RefNames
operator|.
name|shard
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|int
name|u
init|=
name|user
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|us
init|=
name|RefNames
operator|.
name|shard
argument_list|(
name|u
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedStates
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"repo:refs/users/"
operator|+
name|us
operator|+
literal|"/edit-"
operator|+
name|c
operator|+
literal|"/1"
argument_list|,
literal|"All-Users:refs/starred-changes/"
operator|+
name|cs
operator|+
literal|"/"
operator|+
name|u
argument_list|)
decl_stmt|;
if|if
condition|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
name|expectedStates
operator|.
name|add
argument_list|(
literal|"repo:refs/changes/"
operator|+
name|cs
operator|+
literal|"/meta"
argument_list|)
expr_stmt|;
name|expectedStates
operator|.
name|add
argument_list|(
literal|"repo:refs/changes/"
operator|+
name|cs
operator|+
literal|"/robot-comments"
argument_list|)
expr_stmt|;
name|expectedStates
operator|.
name|add
argument_list|(
literal|"All-Users:refs/draft-comments/"
operator|+
name|cs
operator|+
literal|"/"
operator|+
name|u
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|cd
operator|.
name|getRefStates
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|String
operator|::
operator|new
argument_list|)
comment|// Omit SHA-1, we're just concerned with the project/ref names.
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedStates
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedPatterns
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"repo:refs/users/*/edit-"
operator|+
name|c
operator|+
literal|"/*"
argument_list|)
decl_stmt|;
name|expectedPatterns
operator|.
name|add
argument_list|(
literal|"All-Users:refs/starred-changes/"
operator|+
name|cs
operator|+
literal|"/*"
argument_list|)
expr_stmt|;
if|if
condition|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
name|expectedPatterns
operator|.
name|add
argument_list|(
literal|"All-Users:refs/draft-comments/"
operator|+
name|cs
operator|+
literal|"/*"
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|cd
operator|.
name|getRefStatePatterns
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|String
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedPatterns
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|watched ()
specifier|public
name|void
name|watched
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins1
init|=
name|newChangeWithStatus
argument_list|(
name|repo
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|ins1
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo2
init|=
name|createProject
argument_list|(
literal|"repo2"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins2
init|=
name|newChangeWithStatus
argument_list|(
name|repo2
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|repo2
argument_list|,
name|ins2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:watched"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"watchedby:self"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ProjectWatchInfo
argument_list|>
name|projectsToWatch
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ProjectWatchInfo
name|pwi
init|=
operator|new
name|ProjectWatchInfo
argument_list|()
decl_stmt|;
name|pwi
operator|.
name|project
operator|=
literal|"repo"
expr_stmt|;
name|pwi
operator|.
name|filter
operator|=
literal|null
expr_stmt|;
name|pwi
operator|.
name|notifyAbandonedChanges
operator|=
literal|true
expr_stmt|;
name|pwi
operator|.
name|notifyNewChanges
operator|=
literal|true
expr_stmt|;
name|pwi
operator|.
name|notifyAllComments
operator|=
literal|true
expr_stmt|;
name|projectsToWatch
operator|.
name|add
argument_list|(
name|pwi
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setWatchedProjects
argument_list|(
name|projectsToWatch
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:watched"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"watchedby:self"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|trackingid ()
specifier|public
name|void
name|trackingid
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit1
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Change one\n\nBug:QUERY123"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit1
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|commit2
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Change two\n\nFeature:QUERY456"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForCommit
argument_list|(
name|repo
argument_list|,
name|commit2
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"tr:QUERY123"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"bug:QUERY123"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"tr:QUERY456"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"bug:QUERY456"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"tr:QUERY-123"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"bug:QUERY-123"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"tr:QUERY12"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"bug:QUERY12"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"tr:QUERY789"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"bug:QUERY789"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|assignee ()
specifier|public
name|void
name|assignee
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|AssigneeInput
name|input
init|=
operator|new
name|AssigneeInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|assignee
operator|=
name|user
operator|.
name|getUserName
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|setAssignee
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:assigned"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-is:assigned"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:unassigned"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-is:unassigned"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"assignee:"
operator|+
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"-assignee:"
operator|+
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
name|change2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|userDestination ()
specifier|public
name|void
name|userDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo1
init|=
name|createProject
argument_list|(
literal|"repo1"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo1
argument_list|,
name|newChange
argument_list|(
name|repo1
argument_list|)
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo2
init|=
name|createProject
argument_list|(
literal|"repo2"
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo2
argument_list|,
name|newChange
argument_list|(
name|repo2
argument_list|)
argument_list|)
decl_stmt|;
name|assertThatQueryException
argument_list|(
literal|"destination:foo"
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Unknown named destination: foo"
argument_list|)
expr_stmt|;
name|String
name|destination1
init|=
literal|"refs/heads/master\trepo1"
decl_stmt|;
name|String
name|destination2
init|=
literal|"refs/heads/master\trepo2"
decl_stmt|;
name|String
name|destination3
init|=
literal|"refs/heads/master\trepo1\nrefs/heads/master\trepo2"
decl_stmt|;
name|String
name|destination4
init|=
literal|"refs/heads/master\trepo3"
decl_stmt|;
name|String
name|destination5
init|=
literal|"refs/heads/other\trepo1"
decl_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|allUsers
init|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|refsUsers
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|userId
argument_list|)
decl_stmt|;
name|allUsers
operator|.
name|branch
argument_list|(
name|refsUsers
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"destinations/destination1"
argument_list|,
name|destination1
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|allUsers
operator|.
name|branch
argument_list|(
name|refsUsers
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"destinations/destination2"
argument_list|,
name|destination2
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|allUsers
operator|.
name|branch
argument_list|(
name|refsUsers
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"destinations/destination3"
argument_list|,
name|destination3
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|allUsers
operator|.
name|branch
argument_list|(
name|refsUsers
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"destinations/destination4"
argument_list|,
name|destination4
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|allUsers
operator|.
name|branch
argument_list|(
name|refsUsers
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"destinations/destination5"
argument_list|,
name|destination5
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|Ref
name|userRef
init|=
name|allUsers
operator|.
name|getRepository
argument_list|()
operator|.
name|exactRef
argument_list|(
name|refsUsers
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|userRef
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"destination:destination1"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"destination:destination2"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"destination:destination3"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"destination:destination4"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"destination:destination5"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|userQuery ()
specifier|public
name|void
name|userQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change1
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change2
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChangeForBranch
argument_list|(
name|repo
argument_list|,
literal|"stable"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|queries
init|=
literal|"query1\tproject:repo\n"
operator|+
literal|"query2\tproject:repo status:open\n"
operator|+
literal|"query3\tproject:repo branch:stable\n"
operator|+
literal|"query4\tproject:repo branch:other"
decl_stmt|;
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|allUsers
init|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|refsUsers
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|userId
argument_list|)
decl_stmt|;
name|allUsers
operator|.
name|branch
argument_list|(
name|refsUsers
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"queries"
argument_list|,
name|queries
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|Ref
name|userRef
init|=
name|allUsers
operator|.
name|getRepository
argument_list|()
operator|.
name|exactRef
argument_list|(
name|refsUsers
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|userRef
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThatQueryException
argument_list|(
literal|"query:foo"
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Unknown named query: foo"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"query:query1"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"query:query2"
argument_list|,
name|change2
argument_list|,
name|change1
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
literal|"current"
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
literal|"current"
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"query:query2"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"query:query3"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"query:query4"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byOwnerInvalidQuery ()
specifier|public
name|void
name|byOwnerInvalidQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|,
name|userId
argument_list|)
expr_stmt|;
name|String
name|nameEmail
init|=
name|user
operator|.
name|asIdentifiedUser
argument_list|()
operator|.
name|getNameEmail
argument_list|()
decl_stmt|;
name|assertQuery
argument_list|(
literal|"owner: \""
operator|+
name|nameEmail
operator|+
literal|"\"\\"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byDeletedChange ()
specifier|public
name|void
name|byDeletedChange
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|insert
argument_list|(
name|repo
argument_list|,
name|newChange
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"change:"
operator|+
name|change
operator|.
name|getId
argument_list|()
decl_stmt|;
name|assertQuery
argument_list|(
name|query
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
DECL|method|newChange (TestRepository<Repo> repo)
specifier|protected
name|ChangeInserter
name|newChange
parameter_list|(
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|newChangeForCommit (TestRepository<Repo> repo, RevCommit commit)
specifier|protected
name|ChangeInserter
name|newChangeForCommit
parameter_list|(
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
parameter_list|,
name|RevCommit
name|commit
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|newChangeForBranch (TestRepository<Repo> repo, String branch)
specifier|protected
name|ChangeInserter
name|newChangeForBranch
parameter_list|(
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
parameter_list|,
name|String
name|branch
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
name|branch
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|newChangeWithStatus (TestRepository<Repo> repo, Change.Status status)
specifier|protected
name|ChangeInserter
name|newChangeWithStatus
parameter_list|(
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
parameter_list|,
name|Change
operator|.
name|Status
name|status
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|status
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|newChangeWithTopic (TestRepository<Repo> repo, String topic)
specifier|protected
name|ChangeInserter
name|newChangeWithTopic
parameter_list|(
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
parameter_list|,
name|String
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|topic
argument_list|)
return|;
block|}
DECL|method|newChange ( TestRepository<Repo> repo, @Nullable RevCommit commit, @Nullable String branch, @Nullable Change.Status status, @Nullable String topic)
specifier|protected
name|ChangeInserter
name|newChange
parameter_list|(
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
parameter_list|,
annotation|@
name|Nullable
name|RevCommit
name|commit
parameter_list|,
annotation|@
name|Nullable
name|String
name|branch
parameter_list|,
annotation|@
name|Nullable
name|Change
operator|.
name|Status
name|status
parameter_list|,
annotation|@
name|Nullable
name|String
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|commit
operator|==
literal|null
condition|)
block|{
name|commit
operator|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"message"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|branch
operator|=
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|branch
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|branch
operator|.
name|startsWith
argument_list|(
literal|"refs/heads/"
argument_list|)
condition|)
block|{
name|branch
operator|=
literal|"refs/heads/"
operator|+
name|branch
expr_stmt|;
block|}
name|Change
operator|.
name|Id
name|id
init|=
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|seq
operator|.
name|nextChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins
init|=
name|changeFactory
operator|.
name|create
argument_list|(
name|id
argument_list|,
name|commit
argument_list|,
name|branch
argument_list|)
operator|.
name|setValidatePolicy
argument_list|(
name|CommitValidators
operator|.
name|Policy
operator|.
name|NONE
argument_list|)
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
operator|.
name|setTopic
argument_list|(
name|topic
argument_list|)
decl_stmt|;
return|return
name|ins
return|;
block|}
DECL|method|insert (TestRepository<Repo> repo, ChangeInserter ins)
specifier|protected
name|Change
name|insert
parameter_list|(
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
parameter_list|,
name|ChangeInserter
name|ins
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|insert
argument_list|(
name|repo
argument_list|,
name|ins
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
return|;
block|}
DECL|method|insert (TestRepository<Repo> repo, ChangeInserter ins, @Nullable Account.Id owner)
specifier|protected
name|Change
name|insert
parameter_list|(
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
parameter_list|,
name|ChangeInserter
name|ins
parameter_list|,
annotation|@
name|Nullable
name|Account
operator|.
name|Id
name|owner
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|insert
argument_list|(
name|repo
argument_list|,
name|ins
argument_list|,
name|owner
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
return|;
block|}
DECL|method|insert ( TestRepository<Repo> repo, ChangeInserter ins, @Nullable Account.Id owner, Timestamp createdOn)
specifier|protected
name|Change
name|insert
parameter_list|(
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
parameter_list|,
name|ChangeInserter
name|ins
parameter_list|,
annotation|@
name|Nullable
name|Account
operator|.
name|Id
name|owner
parameter_list|,
name|Timestamp
name|createdOn
parameter_list|)
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|project
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|repo
operator|.
name|getRepository
argument_list|()
operator|.
name|getDescription
argument_list|()
operator|.
name|getRepositoryName
argument_list|()
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|ownerId
init|=
name|owner
operator|!=
literal|null
condition|?
name|owner
else|:
name|userId
decl_stmt|;
name|IdentifiedUser
name|user
init|=
name|userFactory
operator|.
name|create
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|user
argument_list|,
name|createdOn
argument_list|)
init|)
block|{
name|bu
operator|.
name|insertChange
argument_list|(
name|ins
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|ins
operator|.
name|getChange
argument_list|()
return|;
block|}
block|}
DECL|method|newPatchSet (TestRepository<Repo> repo, Change c)
specifier|protected
name|Change
name|newPatchSet
parameter_list|(
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|repo
parameter_list|,
name|Change
name|c
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Add a new file so the patch set is not a trivial rebase, to avoid default
comment|// Code-Review label copying.
name|int
name|n
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|1
decl_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"message"
argument_list|)
operator|.
name|add
argument_list|(
literal|"file"
operator|+
name|n
argument_list|,
literal|"contents "
operator|+
name|n
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeControl
name|ctl
init|=
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|db
argument_list|,
name|c
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|PatchSetInserter
name|inserter
init|=
name|patchSetFactory
operator|.
name|create
argument_list|(
name|ctl
argument_list|,
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|n
argument_list|)
argument_list|,
name|commit
argument_list|)
operator|.
name|setNotify
argument_list|(
name|NotifyHandling
operator|.
name|NONE
argument_list|)
operator|.
name|setFireRevisionCreated
argument_list|(
literal|false
argument_list|)
operator|.
name|setValidatePolicy
argument_list|(
name|CommitValidators
operator|.
name|Policy
operator|.
name|NONE
argument_list|)
decl_stmt|;
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|c
operator|.
name|getProject
argument_list|()
argument_list|,
name|user
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
init|;
name|ObjectInserter
name|oi
operator|=
name|repo
operator|.
name|getRepository
argument_list|()
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
name|bu
operator|.
name|setRepository
argument_list|(
name|repo
operator|.
name|getRepository
argument_list|()
argument_list|,
name|repo
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|oi
argument_list|)
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|inserter
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
return|return
name|inserter
operator|.
name|getChange
argument_list|()
return|;
block|}
DECL|method|assertThatQueryException (Object query)
specifier|protected
name|ThrowableSubject
name|assertThatQueryException
parameter_list|(
name|Object
name|query
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|assertThatQueryException
argument_list|(
name|newQuery
argument_list|(
name|query
argument_list|)
argument_list|)
return|;
block|}
DECL|method|assertThatQueryException (QueryRequest query)
specifier|protected
name|ThrowableSubject
name|assertThatQueryException
parameter_list|(
name|QueryRequest
name|query
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|query
operator|.
name|get
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"expected BadRequestException for query: "
operator|+
name|query
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|BadRequestException
name|e
parameter_list|)
block|{
return|return
name|assertThat
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
DECL|method|createProject (String name)
specifier|protected
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|createProject
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repoManager
operator|.
name|openRepository
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createProject (String name, String parent)
specifier|protected
name|TestRepository
argument_list|<
name|Repo
argument_list|>
name|createProject
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|parent
parameter_list|)
throws|throws
name|Exception
block|{
name|ProjectInput
name|input
init|=
operator|new
name|ProjectInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|input
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|create
argument_list|(
name|input
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repoManager
operator|.
name|openRepository
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newQuery (Object query)
specifier|protected
name|QueryRequest
name|newQuery
parameter_list|(
name|Object
name|query
parameter_list|)
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|assertQuery (Object query, Change... changes)
specifier|protected
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|assertQuery
parameter_list|(
name|Object
name|query
parameter_list|,
name|Change
modifier|...
name|changes
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
name|query
argument_list|)
argument_list|,
name|changes
argument_list|)
return|;
block|}
DECL|method|assertQuery (QueryRequest query, Change... changes)
specifier|protected
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|assertQuery
parameter_list|(
name|QueryRequest
name|query
parameter_list|,
name|Change
modifier|...
name|changes
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|result
init|=
name|query
operator|.
name|get
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|ids
init|=
name|ids
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ids
argument_list|)
operator|.
name|named
argument_list|(
name|format
argument_list|(
name|query
argument_list|,
name|ids
argument_list|,
name|changes
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|ids
argument_list|(
name|changes
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|format (QueryRequest query, Iterable<Integer> actualIds, Change... expectedChanges)
specifier|private
name|String
name|format
parameter_list|(
name|QueryRequest
name|query
parameter_list|,
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|actualIds
parameter_list|,
name|Change
modifier|...
name|expectedChanges
parameter_list|)
throws|throws
name|RestApiException
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"query '"
argument_list|)
operator|.
name|append
argument_list|(
name|query
operator|.
name|getQuery
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"' with expected changes "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|format
argument_list|(
name|Arrays
operator|.
name|stream
argument_list|(
name|expectedChanges
argument_list|)
operator|.
name|map
argument_list|(
name|Change
operator|::
name|getChangeId
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" and result "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|format
argument_list|(
name|actualIds
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|format (Iterable<Integer> changeIds)
specifier|private
name|String
name|format
parameter_list|(
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|changeIds
parameter_list|)
throws|throws
name|RestApiException
block|{
return|return
name|format
argument_list|(
name|changeIds
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
DECL|method|format (Iterator<Integer> changeIds)
specifier|private
name|String
name|format
parameter_list|(
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|changeIds
parameter_list|)
throws|throws
name|RestApiException
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
while|while
condition|(
name|changeIds
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|id
init|=
name|changeIds
operator|.
name|next
argument_list|()
decl_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|c
operator|.
name|changeId
argument_list|)
operator|.
name|append
argument_list|(
literal|"), "
argument_list|)
operator|.
name|append
argument_list|(
literal|"dest="
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|c
operator|.
name|project
argument_list|)
argument_list|,
name|c
operator|.
name|branch
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"status="
argument_list|)
operator|.
name|append
argument_list|(
name|c
operator|.
name|status
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"lastUpdated="
argument_list|)
operator|.
name|append
argument_list|(
name|c
operator|.
name|updated
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
if|if
condition|(
name|changeIds
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|b
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|ids (Change... changes)
specifier|protected
specifier|static
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|ids
parameter_list|(
name|Change
modifier|...
name|changes
parameter_list|)
block|{
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|changes
argument_list|)
argument_list|)
operator|.
name|transform
argument_list|(
name|in
lambda|->
name|in
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|ids (Iterable<ChangeInfo> changes)
specifier|protected
specifier|static
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|ids
parameter_list|(
name|Iterable
argument_list|<
name|ChangeInfo
argument_list|>
name|changes
parameter_list|)
block|{
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|changes
argument_list|)
operator|.
name|transform
argument_list|(
name|in
lambda|->
name|in
operator|.
name|_number
argument_list|)
return|;
block|}
DECL|method|lastUpdatedMs (Change c)
specifier|protected
specifier|static
name|long
name|lastUpdatedMs
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
return|return
name|c
operator|.
name|getLastUpdatedOn
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
DECL|method|addComment (int changeId, String message, Boolean unresolved)
specifier|private
name|void
name|addComment
parameter_list|(
name|int
name|changeId
parameter_list|,
name|String
name|message
parameter_list|,
name|Boolean
name|unresolved
parameter_list|)
throws|throws
name|Exception
block|{
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|ReviewInput
operator|.
name|CommentInput
name|comment
init|=
operator|new
name|ReviewInput
operator|.
name|CommentInput
argument_list|()
decl_stmt|;
name|comment
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|comment
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|comment
operator|.
name|unresolved
operator|=
name|unresolved
expr_stmt|;
name|input
operator|.
name|comments
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|List
argument_list|<
name|ReviewInput
operator|.
name|CommentInput
argument_list|>
operator|>
name|of
argument_list|(
name|Patch
operator|.
name|COMMIT_MSG
argument_list|,
name|ImmutableList
operator|.
expr|<
name|ReviewInput
operator|.
name|CommentInput
operator|>
name|of
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

