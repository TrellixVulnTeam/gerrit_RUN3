begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|READ
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
operator|.
name|allow
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|Util
operator|.
name|deny
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lifecycle
operator|.
name|LifecycleManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AuthRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|SchemaCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|InMemoryDatabase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|InMemoryModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|InMemoryRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Unit tests for {@link ProjectControl}. */
end_comment

begin_class
DECL|class|ProjectControlTest
specifier|public
class|class
name|ProjectControlTest
block|{
DECL|field|accountManager
annotation|@
name|Inject
specifier|private
name|AccountManager
name|accountManager
decl_stmt|;
DECL|field|userFactory
annotation|@
name|Inject
specifier|private
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
DECL|field|schemaFactory
annotation|@
name|Inject
specifier|private
name|InMemoryDatabase
name|schemaFactory
decl_stmt|;
DECL|field|repoManager
annotation|@
name|Inject
specifier|private
name|InMemoryRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|projectControlFactory
annotation|@
name|Inject
specifier|private
name|ProjectControl
operator|.
name|GenericFactory
name|projectControlFactory
decl_stmt|;
DECL|field|schemaCreator
annotation|@
name|Inject
specifier|private
name|SchemaCreator
name|schemaCreator
decl_stmt|;
DECL|field|lifecycle
specifier|private
name|LifecycleManager
name|lifecycle
decl_stmt|;
DECL|field|db
specifier|private
name|ReviewDb
name|db
decl_stmt|;
DECL|field|repo
specifier|private
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
decl_stmt|;
DECL|field|project
specifier|private
name|ProjectConfig
name|project
decl_stmt|;
DECL|field|user
specifier|private
name|IdentifiedUser
name|user
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Injector
name|injector
init|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|InMemoryModule
argument_list|()
argument_list|)
decl_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|lifecycle
operator|=
operator|new
name|LifecycleManager
argument_list|()
expr_stmt|;
name|lifecycle
operator|.
name|add
argument_list|(
name|injector
argument_list|)
expr_stmt|;
name|lifecycle
operator|.
name|start
argument_list|()
expr_stmt|;
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
expr_stmt|;
name|schemaCreator
operator|.
name|create
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Account
operator|.
name|Id
name|userId
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"user"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|user
operator|=
name|userFactory
operator|.
name|create
argument_list|(
name|Providers
operator|.
name|of
argument_list|(
name|db
argument_list|)
argument_list|,
name|userId
argument_list|)
expr_stmt|;
name|Project
operator|.
name|NameKey
name|name
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project"
argument_list|)
decl_stmt|;
name|InMemoryRepository
name|inMemoryRepo
init|=
name|repoManager
operator|.
name|createRepository
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|project
operator|=
operator|new
name|ProjectConfig
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|project
operator|.
name|load
argument_list|(
name|inMemoryRepo
argument_list|)
expr_stmt|;
name|repo
operator|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|inMemoryRepo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|repo
operator|.
name|getRepository
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lifecycle
operator|!=
literal|null
condition|)
block|{
name|lifecycle
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|InMemoryDatabase
operator|.
name|drop
argument_list|(
name|schemaFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|canReadCommitWhenAllRefsVisible ()
specifier|public
name|void
name|canReadCommitWhenAllRefsVisible
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|project
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|ObjectId
name|id
init|=
name|repo
operator|.
name|branch
argument_list|(
literal|"master"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectControl
name|pc
init|=
name|newProjectControl
argument_list|()
decl_stmt|;
name|RevWalk
name|rw
init|=
name|repo
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|pc
operator|.
name|canReadCommit
argument_list|(
name|db
argument_list|,
name|rw
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|canReadCommitIfRefVisible ()
specifier|public
name|void
name|canReadCommitIfRefVisible
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|project
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/branch1"
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|project
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/branch2"
argument_list|)
expr_stmt|;
name|ObjectId
name|id1
init|=
name|repo
operator|.
name|branch
argument_list|(
literal|"branch1"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|ObjectId
name|id2
init|=
name|repo
operator|.
name|branch
argument_list|(
literal|"branch2"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectControl
name|pc
init|=
name|newProjectControl
argument_list|()
decl_stmt|;
name|RevWalk
name|rw
init|=
name|repo
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|pc
operator|.
name|canReadCommit
argument_list|(
name|db
argument_list|,
name|rw
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|id1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pc
operator|.
name|canReadCommit
argument_list|(
name|db
argument_list|,
name|rw
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|id2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|canReadCommitIfReachableFromVisibleRef ()
specifier|public
name|void
name|canReadCommitIfReachableFromVisibleRef
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|project
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/branch1"
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|project
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/branch2"
argument_list|)
expr_stmt|;
name|RevCommit
name|parent1
init|=
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|repo
operator|.
name|branch
argument_list|(
literal|"branch1"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|parent1
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|RevCommit
name|parent2
init|=
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|repo
operator|.
name|branch
argument_list|(
literal|"branch2"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|parent2
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|ProjectControl
name|pc
init|=
name|newProjectControl
argument_list|()
decl_stmt|;
name|RevWalk
name|rw
init|=
name|repo
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|pc
operator|.
name|canReadCommit
argument_list|(
name|db
argument_list|,
name|rw
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|parent1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pc
operator|.
name|canReadCommit
argument_list|(
name|db
argument_list|,
name|rw
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|parent2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotReadAfterRollbackWithRestrictedRead ()
specifier|public
name|void
name|cannotReadAfterRollbackWithRestrictedRead
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|project
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/branch1"
argument_list|)
expr_stmt|;
name|RevCommit
name|parent1
init|=
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|ObjectId
name|id1
init|=
name|repo
operator|.
name|branch
argument_list|(
literal|"branch1"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|parent1
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectControl
name|pc
init|=
name|newProjectControl
argument_list|()
decl_stmt|;
name|RevWalk
name|rw
init|=
name|repo
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|pc
operator|.
name|canReadCommit
argument_list|(
name|db
argument_list|,
name|rw
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|parent1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pc
operator|.
name|canReadCommit
argument_list|(
name|db
argument_list|,
name|rw
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|id1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|repo
operator|.
name|branch
argument_list|(
literal|"branch1"
argument_list|)
operator|.
name|update
argument_list|(
name|parent1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pc
operator|.
name|canReadCommit
argument_list|(
name|db
argument_list|,
name|rw
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|parent1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pc
operator|.
name|canReadCommit
argument_list|(
name|db
argument_list|,
name|rw
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|id1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|canReadAfterRollbackWithAllRefsVisible ()
specifier|public
name|void
name|canReadAfterRollbackWithAllRefsVisible
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|project
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|RevCommit
name|parent1
init|=
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|ObjectId
name|id1
init|=
name|repo
operator|.
name|branch
argument_list|(
literal|"branch1"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|parent1
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectControl
name|pc
init|=
name|newProjectControl
argument_list|()
decl_stmt|;
name|RevWalk
name|rw
init|=
name|repo
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|pc
operator|.
name|canReadCommit
argument_list|(
name|db
argument_list|,
name|rw
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|parent1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pc
operator|.
name|canReadCommit
argument_list|(
name|db
argument_list|,
name|rw
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|id1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|repo
operator|.
name|branch
argument_list|(
literal|"branch1"
argument_list|)
operator|.
name|update
argument_list|(
name|parent1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pc
operator|.
name|canReadCommit
argument_list|(
name|db
argument_list|,
name|rw
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|parent1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pc
operator|.
name|canReadCommit
argument_list|(
name|db
argument_list|,
name|rw
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|id1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newProjectControl ()
specifier|private
name|ProjectControl
name|newProjectControl
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|projectControlFactory
operator|.
name|controlFor
argument_list|(
name|project
operator|.
name|getName
argument_list|()
argument_list|,
name|user
argument_list|)
return|;
block|}
block|}
end_class

end_unit

