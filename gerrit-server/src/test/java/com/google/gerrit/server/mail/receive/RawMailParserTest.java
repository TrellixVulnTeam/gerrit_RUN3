begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.mail.receive
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|receive
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|receive
operator|.
name|data
operator|.
name|AttachmentMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|receive
operator|.
name|data
operator|.
name|Base64HeaderMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|receive
operator|.
name|data
operator|.
name|HtmlMimeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|receive
operator|.
name|data
operator|.
name|NonUTF8Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|receive
operator|.
name|data
operator|.
name|QuotedPrintableHeaderMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|receive
operator|.
name|data
operator|.
name|RawMailMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|receive
operator|.
name|data
operator|.
name|SimpleTextMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|GerritBaseTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|RawMailParserTest
specifier|public
class|class
name|RawMailParserTest
extends|extends
name|GerritBaseTests
block|{
annotation|@
name|Test
DECL|method|testParseEmail ()
specifier|public
name|void
name|testParseEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|RawMailMessage
index|[]
name|messages
init|=
operator|new
name|RawMailMessage
index|[]
block|{
operator|new
name|SimpleTextMessage
argument_list|()
block|,
operator|new
name|Base64HeaderMessage
argument_list|()
block|,
operator|new
name|QuotedPrintableHeaderMessage
argument_list|()
block|,
operator|new
name|HtmlMimeMessage
argument_list|()
block|,
operator|new
name|AttachmentMessage
argument_list|()
block|,
operator|new
name|NonUTF8Message
argument_list|()
block|,     }
decl_stmt|;
for|for
control|(
name|RawMailMessage
name|rawMailMessage
range|:
name|messages
control|)
block|{
if|if
condition|(
name|rawMailMessage
operator|.
name|rawChars
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Assert Character to Mail Parser
name|MailMessage
name|parsedMailMessage
init|=
name|RawMailParser
operator|.
name|parse
argument_list|(
name|rawMailMessage
operator|.
name|rawChars
argument_list|()
argument_list|)
decl_stmt|;
name|assertMail
argument_list|(
name|parsedMailMessage
argument_list|,
name|rawMailMessage
operator|.
name|expectedMailMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rawMailMessage
operator|.
name|raw
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Assert String to Mail Parser
name|MailMessage
name|parsedMailMessage
init|=
name|RawMailParser
operator|.
name|parse
argument_list|(
name|rawMailMessage
operator|.
name|raw
argument_list|()
argument_list|)
decl_stmt|;
name|assertMail
argument_list|(
name|parsedMailMessage
argument_list|,
name|rawMailMessage
operator|.
name|expectedMailMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    *  This method makes it easier to debug failing tests by checking each    *  property individual instead of calling equals as it will immediately    *  reveal the property that diverges between the two objects.    * @param have MailMessage retrieved from the parser    * @param want MailMessage that would be expected    */
DECL|method|assertMail (MailMessage have, MailMessage want)
specifier|private
name|void
name|assertMail
parameter_list|(
name|MailMessage
name|have
parameter_list|,
name|MailMessage
name|want
parameter_list|)
block|{
name|assertThat
argument_list|(
name|have
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|want
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|have
operator|.
name|to
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|want
operator|.
name|to
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|have
operator|.
name|from
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|want
operator|.
name|from
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|have
operator|.
name|cc
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|want
operator|.
name|cc
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|have
operator|.
name|dateReceived
argument_list|()
operator|.
name|getMillis
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|want
operator|.
name|dateReceived
argument_list|()
operator|.
name|getMillis
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|have
operator|.
name|additionalHeaders
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|want
operator|.
name|additionalHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|have
operator|.
name|subject
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|want
operator|.
name|subject
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|have
operator|.
name|textContent
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|want
operator|.
name|textContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|have
operator|.
name|htmlContent
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|want
operator|.
name|htmlContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

