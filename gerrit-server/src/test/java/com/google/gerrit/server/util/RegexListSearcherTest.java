begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.util
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|RegexListSearcherTest
specifier|public
class|class
name|RegexListSearcherTest
block|{
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|EMPTY
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|emptyList ()
specifier|public
name|void
name|emptyList
parameter_list|()
block|{
name|assertSearchReturns
argument_list|(
name|EMPTY
argument_list|,
literal|"pat"
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hasMatch ()
specifier|public
name|void
name|hasMatch
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"bar"
argument_list|,
literal|"foo"
argument_list|,
literal|"quux"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|RegexListSearcher
operator|.
name|ofStrings
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|hasMatch
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|RegexListSearcher
operator|.
name|ofStrings
argument_list|(
literal|"xyz"
argument_list|)
operator|.
name|hasMatch
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|anchors ()
specifier|public
name|void
name|anchors
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertSearchReturns
argument_list|(
name|list
argument_list|,
literal|"^f.*"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertSearchReturns
argument_list|(
name|list
argument_list|,
literal|"^f.*o$"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertSearchReturns
argument_list|(
name|list
argument_list|,
literal|"f.*o$"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertSearchReturns
argument_list|(
name|list
argument_list|,
literal|"f.*o$"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertSearchReturns
argument_list|(
name|EMPTY
argument_list|,
literal|"^.*\\$"
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noCommonPrefix ()
specifier|public
name|void
name|noCommonPrefix
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"bar"
argument_list|,
literal|"foo"
argument_list|,
literal|"quux"
argument_list|)
decl_stmt|;
name|assertSearchReturns
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"f.*"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertSearchReturns
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|".*o.*"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertSearchReturns
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"bar"
argument_list|,
literal|"foo"
argument_list|,
literal|"quux"
argument_list|)
argument_list|,
literal|".*[aou].*"
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commonPrefix ()
specifier|public
name|void
name|commonPrefix
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|,
literal|"foo1"
argument_list|,
literal|"foo2"
argument_list|,
literal|"foo3"
argument_list|,
literal|"quux"
argument_list|)
decl_stmt|;
name|assertSearchReturns
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|,
literal|"b.*"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertSearchReturns
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"foo1"
argument_list|,
literal|"foo2"
argument_list|)
argument_list|,
literal|"foo[12]"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertSearchReturns
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"foo1"
argument_list|,
literal|"foo2"
argument_list|,
literal|"foo3"
argument_list|)
argument_list|,
literal|"foo.*"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertSearchReturns
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"quux"
argument_list|)
argument_list|,
literal|"q.*"
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSearchReturns (List<?> expected, String re, List<String> inputs)
specifier|private
name|void
name|assertSearchReturns
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|expected
parameter_list|,
name|String
name|re
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|inputs
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|isOrdered
argument_list|(
name|inputs
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|RegexListSearcher
operator|.
name|ofStrings
argument_list|(
name|re
argument_list|)
operator|.
name|search
argument_list|(
name|inputs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

