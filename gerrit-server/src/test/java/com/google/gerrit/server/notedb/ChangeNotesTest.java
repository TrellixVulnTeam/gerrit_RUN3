begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|changeMetaRef
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|refsDraftComments
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ReviewerStateInternal
operator|.
name|CC
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ReviewerStateInternal
operator|.
name|REVIEWER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestChanges
operator|.
name|incrementPatchSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|OBJ_BLOB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|CommentRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ReviewerSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotesCommit
operator|.
name|ChangeNotesRevWalk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestChanges
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|Note
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ChangeNotesTest
specifier|public
class|class
name|ChangeNotesTest
extends|extends
name|AbstractChangeNotesTest
block|{
annotation|@
name|Inject
DECL|field|draftNotesFactory
specifier|private
name|DraftCommentNotes
operator|.
name|Factory
name|draftNotesFactory
decl_stmt|;
annotation|@
name|Inject
DECL|field|noteUtil
specifier|private
name|ChangeNoteUtil
name|noteUtil
decl_stmt|;
annotation|@
name|Inject
DECL|field|serverId
specifier|private
annotation|@
name|GerritServerId
name|String
name|serverId
decl_stmt|;
annotation|@
name|Test
DECL|method|tagChangeMessage ()
specifier|public
name|void
name|tagChangeMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tag
init|=
literal|"jenkins"
decl_stmt|;
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
literal|"verification from jenkins"
argument_list|)
expr_stmt|;
name|update
operator|.
name|setTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChangeMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChangeMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTag
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|tagInlineCommenrts ()
specifier|public
name|void
name|tagInlineCommenrts
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tag
init|=
literal|"jenkins"
decl_stmt|;
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|RevCommit
name|commit
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"PS2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|newComment
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
literal|"a.txt"
argument_list|,
literal|"uuid1"
argument_list|,
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
name|changeOwner
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
literal|"Comment"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|setTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ImmutableListMultimap
argument_list|<
name|RevId
argument_list|,
name|Comment
argument_list|>
name|comments
init|=
name|notes
operator|.
name|getComments
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|comments
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|comments
operator|.
name|entries
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|tag
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|tagApprovals ()
specifier|public
name|void
name|tagApprovals
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tag1
init|=
literal|"jenkins"
decl_stmt|;
name|String
name|tag2
init|=
literal|"ip"
decl_stmt|;
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Verified"
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|setTag
argument_list|(
name|tag1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Verified"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|setTag
argument_list|(
name|tag2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|approvals
init|=
name|notes
operator|.
name|getApprovals
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|approvals
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|entries
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getTag
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|tag1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|entries
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getTag
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|tag2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multipleTags ()
specifier|public
name|void
name|multipleTags
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ipTag
init|=
literal|"ip"
decl_stmt|;
name|String
name|coverageTag
init|=
literal|"coverage"
decl_stmt|;
name|String
name|integrationTag
init|=
literal|"integration"
decl_stmt|;
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Verified"
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
literal|"integration verification"
argument_list|)
expr_stmt|;
name|update
operator|.
name|setTag
argument_list|(
name|integrationTag
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|RevCommit
name|commit
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"PS2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|newComment
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
literal|"a.txt"
argument_list|,
literal|"uuid1"
argument_list|,
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
name|changeOwner
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
literal|"Comment"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
literal|"coverage verification"
argument_list|)
expr_stmt|;
name|update
operator|.
name|setTag
argument_list|(
name|coverageTag
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
literal|"ip clear"
argument_list|)
expr_stmt|;
name|update
operator|.
name|setTag
argument_list|(
name|ipTag
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|approvals
init|=
name|notes
operator|.
name|getApprovals
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|approvals
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|PatchSetApproval
name|approval
init|=
name|approvals
operator|.
name|entries
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|getTag
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|integrationTag
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ImmutableListMultimap
argument_list|<
name|RevId
argument_list|,
name|Comment
argument_list|>
name|comments
init|=
name|notes
operator|.
name|getComments
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|comments
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|comments
operator|.
name|entries
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|tag
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|coverageTag
argument_list|)
expr_stmt|;
name|ImmutableList
argument_list|<
name|ChangeMessage
argument_list|>
name|messages
init|=
name|notes
operator|.
name|getChangeMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTag
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|integrationTag
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTag
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|coverageTag
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getTag
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ipTag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|approvalsOnePatchSet ()
specifier|public
name|void
name|approvalsOnePatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Verified"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getApprovals
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|psas
init|=
name|notes
operator|.
name|getApprovals
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|psas
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGranted
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|truncate
argument_list|(
name|after
argument_list|(
name|c
argument_list|,
literal|2000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Verified"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getGranted
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGranted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|approvalsMultiplePatchSets ()
specifier|public
name|void
name|approvalsMultiplePatchSets
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|psas
init|=
name|notes
operator|.
name|getApprovals
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|psas
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|PatchSetApproval
name|psa1
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|psas
operator|.
name|get
argument_list|(
name|ps1
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|psa1
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ps1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa1
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa1
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa1
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa1
operator|.
name|getGranted
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|truncate
argument_list|(
name|after
argument_list|(
name|c
argument_list|,
literal|2000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PatchSetApproval
name|psa2
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|psas
operator|.
name|get
argument_list|(
name|ps2
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|psa2
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ps2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa2
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa2
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa2
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa2
operator|.
name|getGranted
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|truncate
argument_list|(
name|after
argument_list|(
name|c
argument_list|,
literal|3000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|approvalsMultipleApprovals ()
specifier|public
name|void
name|approvalsMultipleApprovals
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|psa
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|notes
operator|.
name|getApprovals
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|psa
operator|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|notes
operator|.
name|getApprovals
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|approvalsMultipleUsers ()
specifier|public
name|void
name|approvalsMultipleUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getApprovals
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|psas
init|=
name|notes
operator|.
name|getApprovals
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|psas
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGranted
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|truncate
argument_list|(
name|after
argument_list|(
name|c
argument_list|,
literal|2000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getGranted
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|truncate
argument_list|(
name|after
argument_list|(
name|c
argument_list|,
literal|3000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|approvalsTombstone ()
specifier|public
name|void
name|approvalsTombstone
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Not-For-Long"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|psa
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|notes
operator|.
name|getApprovals
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Not-For-Long"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|removeApproval
argument_list|(
literal|"Not-For-Long"
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getApprovals
argument_list|()
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
name|psa
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
operator|new
name|PatchSetApproval
argument_list|(
name|psa
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
name|update
operator|.
name|getWhen
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeOtherUsersApprovals ()
specifier|public
name|void
name|removeOtherUsersApprovals
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Not-For-Long"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|psa
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|notes
operator|.
name|getApprovals
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|otherUserId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Not-For-Long"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|removeApprovalFor
argument_list|(
name|otherUserId
argument_list|,
literal|"Not-For-Long"
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getApprovals
argument_list|()
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
name|psa
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
operator|new
name|PatchSetApproval
argument_list|(
name|psa
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
name|update
operator|.
name|getWhen
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add back approval on same label.
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Not-For-Long"
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|psa
operator|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|notes
operator|.
name|getApprovals
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|otherUserId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Not-For-Long"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putOtherUsersApprovals ()
specifier|public
name|void
name|putOtherUsersApprovals
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApprovalFor
argument_list|(
name|otherUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvals
init|=
name|ReviewDbUtil
operator|.
name|intKeyOrdering
argument_list|()
operator|.
name|onResultOf
argument_list|(
name|PatchSetApproval
operator|::
name|getAccountId
argument_list|)
operator|.
name|sortedCopy
argument_list|(
name|notes
operator|.
name|getApprovals
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|approvals
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|otherUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|approvalsPostSubmit ()
specifier|public
name|void
name|approvalsPostSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|RequestId
name|submissionId
init|=
name|RequestId
operator|.
name|forChange
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Verified"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|merge
argument_list|(
name|submissionId
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|submitRecord
argument_list|(
literal|"NOT_READY"
argument_list|,
literal|null
argument_list|,
name|submitLabel
argument_list|(
literal|"Verified"
argument_list|,
literal|"OK"
argument_list|,
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|,
name|submitLabel
argument_list|(
literal|"Code-Review"
argument_list|,
literal|"NEED"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvals
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|notes
operator|.
name|getApprovals
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|approvals
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Verified"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isPostSubmit
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isPostSubmit
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|approvalsDuringSubmit ()
specifier|public
name|void
name|approvalsDuringSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|RequestId
name|submissionId
init|=
name|RequestId
operator|.
name|forChange
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Verified"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Account
operator|.
name|Id
name|ownerId
init|=
name|changeOwner
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|otherId
init|=
name|otherUser
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|update
operator|.
name|merge
argument_list|(
name|submissionId
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|submitRecord
argument_list|(
literal|"NOT_READY"
argument_list|,
literal|null
argument_list|,
name|submitLabel
argument_list|(
literal|"Verified"
argument_list|,
literal|"OK"
argument_list|,
name|ownerId
argument_list|)
argument_list|,
name|submitLabel
argument_list|(
literal|"Code-Review"
argument_list|,
literal|"NEED"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Other-Label"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApprovalFor
argument_list|(
name|ownerId
argument_list|,
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Other-Label"
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvals
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|notes
operator|.
name|getApprovals
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|approvals
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ownerId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Verified"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isPostSubmit
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ownerId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isPostSubmit
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
comment|// During submit.
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|otherId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Other-Label"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approvals
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isPostSubmit
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multipleReviewers ()
specifier|public
name|void
name|multipleReviewers
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putReviewer
argument_list|(
name|changeOwner
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|REVIEWER
argument_list|)
expr_stmt|;
name|update
operator|.
name|putReviewer
argument_list|(
name|otherUser
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|REVIEWER
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Timestamp
name|ts
init|=
operator|new
name|Timestamp
argument_list|(
name|update
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getReviewers
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ReviewerSet
operator|.
name|fromTable
argument_list|(
name|ImmutableTable
operator|.
expr|<
name|ReviewerStateInternal
argument_list|,
name|Account
operator|.
name|Id
argument_list|,
name|Timestamp
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|REVIEWER
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ts
argument_list|)
operator|.
name|put
argument_list|(
name|REVIEWER
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|2
argument_list|)
argument_list|,
name|ts
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewerTypes ()
specifier|public
name|void
name|reviewerTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putReviewer
argument_list|(
name|changeOwner
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|REVIEWER
argument_list|)
expr_stmt|;
name|update
operator|.
name|putReviewer
argument_list|(
name|otherUser
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|CC
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Timestamp
name|ts
init|=
operator|new
name|Timestamp
argument_list|(
name|update
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getReviewers
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ReviewerSet
operator|.
name|fromTable
argument_list|(
name|ImmutableTable
operator|.
expr|<
name|ReviewerStateInternal
argument_list|,
name|Account
operator|.
name|Id
argument_list|,
name|Timestamp
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|REVIEWER
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ts
argument_list|)
operator|.
name|put
argument_list|(
name|CC
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|2
argument_list|)
argument_list|,
name|ts
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|oneReviewerMultipleTypes ()
specifier|public
name|void
name|oneReviewerMultipleTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putReviewer
argument_list|(
name|otherUser
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|REVIEWER
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Timestamp
name|ts
init|=
operator|new
name|Timestamp
argument_list|(
name|update
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getReviewers
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ReviewerSet
operator|.
name|fromTable
argument_list|(
name|ImmutableTable
operator|.
name|of
argument_list|(
name|REVIEWER
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|2
argument_list|)
argument_list|,
name|ts
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|update
operator|.
name|putReviewer
argument_list|(
name|otherUser
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|CC
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|ts
operator|=
operator|new
name|Timestamp
argument_list|(
name|update
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getReviewers
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ReviewerSet
operator|.
name|fromTable
argument_list|(
name|ImmutableTable
operator|.
name|of
argument_list|(
name|CC
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|2
argument_list|)
argument_list|,
name|ts
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeReviewer ()
specifier|public
name|void
name|removeReviewer
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putReviewer
argument_list|(
name|otherUser
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|REVIEWER
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|psas
init|=
name|notes
operator|.
name|getApprovals
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|psas
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeOwner
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|otherUser
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|removeReviewer
argument_list|(
name|otherUser
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|psas
operator|=
name|notes
operator|.
name|getApprovals
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeOwner
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitRecords ()
specifier|public
name|void
name|submitRecords
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|RequestId
name|submissionId
init|=
name|RequestId
operator|.
name|forChange
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setSubjectForCommit
argument_list|(
literal|"Submit patch set 1"
argument_list|)
expr_stmt|;
name|update
operator|.
name|merge
argument_list|(
name|submissionId
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|submitRecord
argument_list|(
literal|"NOT_READY"
argument_list|,
literal|null
argument_list|,
name|submitLabel
argument_list|(
literal|"Verified"
argument_list|,
literal|"OK"
argument_list|,
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|,
name|submitLabel
argument_list|(
literal|"Code-Review"
argument_list|,
literal|"NEED"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|submitRecord
argument_list|(
literal|"NOT_READY"
argument_list|,
literal|null
argument_list|,
name|submitLabel
argument_list|(
literal|"Verified"
argument_list|,
literal|"OK"
argument_list|,
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|,
name|submitLabel
argument_list|(
literal|"Alternative-Code-Review"
argument_list|,
literal|"NEED"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|recs
init|=
name|notes
operator|.
name|getSubmitRecords
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|recs
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|recs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|submitRecord
argument_list|(
literal|"NOT_READY"
argument_list|,
literal|null
argument_list|,
name|submitLabel
argument_list|(
literal|"Verified"
argument_list|,
literal|"OK"
argument_list|,
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|,
name|submitLabel
argument_list|(
literal|"Code-Review"
argument_list|,
literal|"NEED"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|recs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|submitRecord
argument_list|(
literal|"NOT_READY"
argument_list|,
literal|null
argument_list|,
name|submitLabel
argument_list|(
literal|"Verified"
argument_list|,
literal|"OK"
argument_list|,
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|,
name|submitLabel
argument_list|(
literal|"Alternative-Code-Review"
argument_list|,
literal|"NEED"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getSubmissionId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|submissionId
operator|.
name|toStringForStorage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|latestSubmitRecordsOnly ()
specifier|public
name|void
name|latestSubmitRecordsOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|RequestId
name|submissionId
init|=
name|RequestId
operator|.
name|forChange
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setSubjectForCommit
argument_list|(
literal|"Submit patch set 1"
argument_list|)
expr_stmt|;
name|update
operator|.
name|merge
argument_list|(
name|submissionId
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|submitRecord
argument_list|(
literal|"OK"
argument_list|,
literal|null
argument_list|,
name|submitLabel
argument_list|(
literal|"Code-Review"
argument_list|,
literal|"OK"
argument_list|,
name|otherUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setSubjectForCommit
argument_list|(
literal|"Submit patch set 2"
argument_list|)
expr_stmt|;
name|update
operator|.
name|merge
argument_list|(
name|submissionId
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|submitRecord
argument_list|(
literal|"OK"
argument_list|,
literal|null
argument_list|,
name|submitLabel
argument_list|(
literal|"Code-Review"
argument_list|,
literal|"OK"
argument_list|,
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getSubmitRecords
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|submitRecord
argument_list|(
literal|"OK"
argument_list|,
literal|null
argument_list|,
name|submitLabel
argument_list|(
literal|"Code-Review"
argument_list|,
literal|"OK"
argument_list|,
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getSubmissionId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|submissionId
operator|.
name|toStringForStorage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyChangeUpdate ()
specifier|public
name|void
name|emptyChangeUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|Ref
name|initial
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|changeMetaRef
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|initial
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
comment|// Empty update doesn't create a new commit.
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|update
operator|.
name|getResult
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|Ref
name|updated
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|changeMetaRef
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updated
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|initial
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|assigneeCommit ()
specifier|public
name|void
name|assigneeCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setAssignee
argument_list|(
name|otherUserId
argument_list|)
expr_stmt|;
name|ObjectId
name|result
init|=
name|update
operator|.
name|commit
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
try|try
init|(
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RevCommit
name|commit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|update
operator|.
name|getResult
argument_list|()
argument_list|)
decl_stmt|;
name|rw
operator|.
name|parseBody
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|String
name|strIdent
init|=
name|otherUser
operator|.
name|getName
argument_list|()
operator|+
literal|"<"
operator|+
name|otherUserId
operator|+
literal|"@"
operator|+
name|serverId
operator|+
literal|">"
decl_stmt|;
name|assertThat
argument_list|(
name|commit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Assignee: "
operator|+
name|strIdent
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|assigneeChangeNotes ()
specifier|public
name|void
name|assigneeChangeNotes
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setAssignee
argument_list|(
name|otherUserId
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getAssignee
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|otherUserId
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setAssignee
argument_list|(
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getAssignee
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pastAssigneesChangeNotes ()
specifier|public
name|void
name|pastAssigneesChangeNotes
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setAssignee
argument_list|(
name|otherUserId
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setAssignee
argument_list|(
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setAssignee
argument_list|(
name|otherUserId
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|removeAssignee
argument_list|()
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getPastAssignees
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hashtagCommit ()
specifier|public
name|void
name|hashtagCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|hashtags
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|hashtags
operator|.
name|add
argument_list|(
literal|"tag1"
argument_list|)
expr_stmt|;
name|hashtags
operator|.
name|add
argument_list|(
literal|"tag2"
argument_list|)
expr_stmt|;
name|update
operator|.
name|setHashtags
argument_list|(
name|hashtags
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
init|(
name|RevWalk
name|walk
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RevCommit
name|commit
init|=
name|walk
operator|.
name|parseCommit
argument_list|(
name|update
operator|.
name|getResult
argument_list|()
argument_list|)
decl_stmt|;
name|walk
operator|.
name|parseBody
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"Hashtags: tag1,tag2\n"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|hashtagChangeNotes ()
specifier|public
name|void
name|hashtagChangeNotes
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|hashtags
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|hashtags
operator|.
name|add
argument_list|(
literal|"tag1"
argument_list|)
expr_stmt|;
name|hashtags
operator|.
name|add
argument_list|(
literal|"tag2"
argument_list|)
expr_stmt|;
name|update
operator|.
name|setHashtags
argument_list|(
name|hashtags
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getHashtags
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|hashtags
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|topicChangeNotes ()
specifier|public
name|void
name|topicChangeNotes
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
comment|// initially topic is not set
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// set topic
name|String
name|topic
init|=
literal|"myTopic"
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setTopic
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|topic
argument_list|)
expr_stmt|;
comment|// clear topic by setting empty string
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setTopic
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// set other topic
name|topic
operator|=
literal|"otherTopic"
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setTopic
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|topic
argument_list|)
expr_stmt|;
comment|// clear topic by setting null
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setTopic
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeIdChangeNotes ()
specifier|public
name|void
name|changeIdChangeNotes
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// An update doesn't affect the Change-Id
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setTopic
argument_list|(
literal|"topic"
argument_list|)
expr_stmt|;
comment|// Change something to get a new commit.
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// Trying to set another Change-Id fails
name|String
name|otherChangeId
init|=
literal|"I577fb248e474018276351785930358ec0450e9f7"
decl_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"The Change-Id was already set to "
operator|+
name|c
operator|.
name|getKey
argument_list|()
operator|+
literal|", so we cannot set this Change-Id: "
operator|+
name|otherChangeId
argument_list|)
expr_stmt|;
name|update
operator|.
name|setChangeId
argument_list|(
name|otherChangeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|branchChangeNotes ()
specifier|public
name|void
name|branchChangeNotes
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Branch
operator|.
name|NameKey
name|expectedBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedBranch
argument_list|)
expr_stmt|;
comment|// An update doesn't affect the branch
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setTopic
argument_list|(
literal|"topic"
argument_list|)
expr_stmt|;
comment|// Change something to get a new commit.
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedBranch
argument_list|)
expr_stmt|;
comment|// Set another branch
name|String
name|otherBranch
init|=
literal|"refs/heads/stable"
decl_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setBranch
argument_list|(
name|otherBranch
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
name|otherBranch
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ownerChangeNotes ()
specifier|public
name|void
name|ownerChangeNotes
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
comment|// An update doesn't affect the owner
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|update
operator|.
name|setTopic
argument_list|(
literal|"topic"
argument_list|)
expr_stmt|;
comment|// Change something to get a new commit.
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createdOnChangeNotes ()
specifier|public
name|void
name|createdOnChangeNotes
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|Timestamp
name|createdOn
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|getCreatedOn
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|createdOn
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
comment|// An update doesn't affect the createdOn timestamp.
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setTopic
argument_list|(
literal|"topic"
argument_list|)
expr_stmt|;
comment|// Change something to get a new commit.
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|createdOn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lastUpdatedOnChangeNotes ()
specifier|public
name|void
name|lastUpdatedOnChangeNotes
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Timestamp
name|ts1
init|=
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ts1
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
comment|// Various kinds of updates that update the timestamp.
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setTopic
argument_list|(
literal|"topic"
argument_list|)
expr_stmt|;
comment|// Change something to get a new commit.
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Timestamp
name|ts2
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ts2
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|ts1
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
literal|"Some message"
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Timestamp
name|ts3
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ts3
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|ts2
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setHashtags
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Timestamp
name|ts4
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ts4
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|ts3
argument_list|)
expr_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|RevCommit
name|commit
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"PS2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setCommit
argument_list|(
name|rw
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Timestamp
name|ts5
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ts5
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|ts4
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Timestamp
name|ts6
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ts6
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|ts5
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Timestamp
name|ts7
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ts7
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|ts6
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|putReviewer
argument_list|(
name|otherUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|ReviewerStateInternal
operator|.
name|REVIEWER
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Timestamp
name|ts8
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ts8
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|ts7
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setGroups
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Timestamp
name|ts9
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ts9
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|ts8
argument_list|)
expr_stmt|;
comment|// Finish off by merging the change.
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|merge
argument_list|(
name|RequestId
operator|.
name|forChange
argument_list|(
name|c
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|submitRecord
argument_list|(
literal|"NOT_READY"
argument_list|,
literal|null
argument_list|,
name|submitLabel
argument_list|(
literal|"Verified"
argument_list|,
literal|"OK"
argument_list|,
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|,
name|submitLabel
argument_list|(
literal|"Alternative-Code-Review"
argument_list|,
literal|"NEED"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Timestamp
name|ts10
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ts10
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|ts9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subjectLeadingWhitespaceChangeNotes ()
specifier|public
name|void
name|subjectLeadingWhitespaceChangeNotes
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|trimmedSubj
init|=
name|c
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|c
operator|.
name|setCurrentPatchSet
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
literal|"  "
operator|+
name|trimmedSubj
argument_list|,
name|c
operator|.
name|getOriginalSubject
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setChangeId
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setBranch
argument_list|(
name|c
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|trimmedSubj
argument_list|)
expr_stmt|;
name|String
name|tabSubj
init|=
literal|"\t\t"
operator|+
name|trimmedSubj
decl_stmt|;
name|c
operator|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setCurrentPatchSet
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|tabSubj
argument_list|,
name|c
operator|.
name|getOriginalSubject
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setChangeId
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setBranch
argument_list|(
name|c
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|tabSubj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitChangeNotesUnique ()
specifier|public
name|void
name|commitChangeNotesUnique
parameter_list|()
throws|throws
name|Exception
block|{
comment|// PatchSetId -> RevId must be a one to one mapping
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|PatchSet
name|ps
init|=
name|notes
operator|.
name|getCurrentPatchSet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ps
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
comment|// new revId for the same patch set, ps1
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|RevCommit
name|commit
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"PS1 again"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|update
operator|.
name|setCommit
argument_list|(
name|rw
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
block|{
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|assertCause
argument_list|(
name|e
argument_list|,
name|ConfigInvalidException
operator|.
name|class
argument_list|,
literal|"Multiple revisions parsed for patch set 1:"
operator|+
literal|" RevId{"
operator|+
name|commit
operator|.
name|name
argument_list|()
operator|+
literal|"} and "
operator|+
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|patchSetChangeNotes ()
specifier|public
name|void
name|patchSetChangeNotes
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
comment|// ps1 created by newChange()
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|PatchSet
name|ps1
init|=
name|notes
operator|.
name|getCurrentPatchSet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ps1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Change subject"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getOriginalSubject
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Change subject"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps1
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps1
operator|.
name|getUploader
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
comment|// ps2 by other user
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|RevCommit
name|commit
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"PS2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|update
operator|.
name|setCommit
argument_list|(
name|rw
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|PatchSet
name|ps2
init|=
name|notes
operator|.
name|getCurrentPatchSet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ps2
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"PS2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getOriginalSubject
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Change subject"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ps2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps2
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|ps1
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps2
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps2
operator|.
name|getUploader
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|otherUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps2
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|update
operator|.
name|getWhen
argument_list|()
argument_list|)
expr_stmt|;
comment|// comment on ps1, current patch set is still ps2
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|ps1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
literal|"Comment on old patch set."
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ps2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchSetStates ()
specifier|public
name|void
name|patchSetStates
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
comment|// ps2
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|RevCommit
name|commit
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"PS2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setCommit
argument_list|(
name|rw
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPatchSetState
argument_list|(
name|PatchSetState
operator|.
name|DRAFT
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
literal|"This is a message"
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|newComment
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
literal|"a.txt"
argument_list|,
literal|"uuid1"
argument_list|,
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
name|changeOwner
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
literal|"Comment"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getPatchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psId2
argument_list|)
operator|.
name|isDraft
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getPatchSets
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|psId1
argument_list|,
name|psId2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getApprovals
argument_list|()
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChangeMessagesByPatchSet
argument_list|()
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChangeMessages
argument_list|()
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
comment|// publish ps2
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPatchSetState
argument_list|(
name|PatchSetState
operator|.
name|PUBLISHED
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getPatchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psId2
argument_list|)
operator|.
name|isDraft
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
comment|// delete ps2
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPatchSetState
argument_list|(
name|PatchSetState
operator|.
name|DELETED
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getPatchSets
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|psId1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getApprovals
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChangeMessagesByPatchSet
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChangeMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchSetGroups ()
specifier|public
name|void
name|patchSetGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getPatchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psId1
argument_list|)
operator|.
name|getGroups
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// ps1
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setGroups
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getPatchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psId1
argument_list|)
operator|.
name|getGroups
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
comment|// ps2
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setCommit
argument_list|(
name|rw
argument_list|,
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"PS2"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setGroups
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getPatchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psId2
argument_list|)
operator|.
name|getGroups
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getPatchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psId1
argument_list|)
operator|.
name|getGroups
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushCertificate ()
specifier|public
name|void
name|pushCertificate
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pushCert
init|=
literal|"certificate version 0.1\n"
operator|+
literal|"pusher This is not a real push cert\n"
operator|+
literal|"-----BEGIN PGP SIGNATURE-----\n"
operator|+
literal|"Version: GnuPG v1\n"
operator|+
literal|"\n"
operator|+
literal|"Nor is this a real signature.\n"
operator|+
literal|"-----END PGP SIGNATURE-----\n"
decl_stmt|;
comment|// ps2 with push cert
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId2
argument_list|)
expr_stmt|;
name|RevCommit
name|commit
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"PS2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|update
operator|.
name|setCommit
argument_list|(
name|rw
argument_list|,
name|commit
argument_list|,
name|pushCert
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|String
name|note
init|=
name|readNote
argument_list|(
name|notes
argument_list|,
name|commit
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|testJson
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|note
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|pushCert
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|patchSets
init|=
name|notes
operator|.
name|getPatchSets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|patchSets
operator|.
name|get
argument_list|(
name|psId1
argument_list|)
operator|.
name|getPushCertificate
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|patchSets
operator|.
name|get
argument_list|(
name|psId2
argument_list|)
operator|.
name|getPushCertificate
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|pushCert
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// comment on ps2
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId2
argument_list|)
expr_stmt|;
name|Timestamp
name|ts
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|newComment
argument_list|(
name|psId2
argument_list|,
literal|"a.txt"
argument_list|,
literal|"uuid1"
argument_list|,
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
name|changeOwner
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
literal|"Comment"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|patchSets
operator|=
name|notes
operator|.
name|getPatchSets
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|patchSets
operator|.
name|get
argument_list|(
name|psId1
argument_list|)
operator|.
name|getPushCertificate
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|patchSets
operator|.
name|get
argument_list|(
name|psId2
argument_list|)
operator|.
name|getPushCertificate
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|pushCert
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|testJson
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|readNote
argument_list|(
name|notes
argument_list|,
name|commit
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|pushCert
operator|+
literal|"Revision: "
operator|+
name|commit
operator|.
name|name
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Patch-set: 2\n"
operator|+
literal|"File: a.txt\n"
operator|+
literal|"\n"
operator|+
literal|"1:2-3:4\n"
operator|+
name|ChangeNoteUtil
operator|.
name|formatTime
argument_list|(
name|serverIdent
argument_list|,
name|ts
argument_list|)
operator|+
literal|"\n"
operator|+
literal|"Author: Change Owner<1@gerrit>\n"
operator|+
literal|"UUID: uuid1\n"
operator|+
literal|"Bytes: 7\n"
operator|+
literal|"Comment\n"
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|emptyExceptSubject ()
specifier|public
name|void
name|emptyExceptSubject
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|newChange
argument_list|()
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setSubjectForCommit
argument_list|(
literal|"Create change"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|update
operator|.
name|commit
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multipleUpdatesInManager ()
specifier|public
name|void
name|multipleUpdatesInManager
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update1
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update1
operator|.
name|putApproval
argument_list|(
literal|"Verified"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|ChangeUpdate
name|update2
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|update2
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
try|try
init|(
name|NoteDbUpdateManager
name|updateManager
init|=
name|updateManagerFactory
operator|.
name|create
argument_list|(
name|project
argument_list|)
init|)
block|{
name|updateManager
operator|.
name|add
argument_list|(
name|update1
argument_list|)
expr_stmt|;
name|updateManager
operator|.
name|add
argument_list|(
name|update2
argument_list|)
expr_stmt|;
name|updateManager
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|psas
init|=
name|notes
operator|.
name|getApprovals
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|psas
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeOwner
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Verified"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|otherUser
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multipleUpdatesIncludingComments ()
specifier|public
name|void
name|multipleUpdatesIncludingComments
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update1
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|String
name|uuid1
init|=
literal|"uuid1"
decl_stmt|;
name|String
name|message1
init|=
literal|"comment 1"
decl_stmt|;
name|CommentRange
name|range1
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Timestamp
name|time1
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|RevCommit
name|tipCommit
decl_stmt|;
try|try
init|(
name|NoteDbUpdateManager
name|updateManager
init|=
name|updateManagerFactory
operator|.
name|create
argument_list|(
name|project
argument_list|)
init|)
block|{
name|Comment
name|comment1
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
literal|"file1"
argument_list|,
name|uuid1
argument_list|,
name|range1
argument_list|,
name|range1
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|time1
argument_list|,
name|message1
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
argument_list|)
decl_stmt|;
name|update1
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update1
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|updateManager
operator|.
name|add
argument_list|(
name|update1
argument_list|)
expr_stmt|;
name|ChangeUpdate
name|update2
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|update2
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|updateManager
operator|.
name|add
argument_list|(
name|update2
argument_list|)
expr_stmt|;
name|updateManager
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ObjectId
name|tip
init|=
name|notes
operator|.
name|getRevision
argument_list|()
decl_stmt|;
name|tipCommit
operator|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|tip
argument_list|)
expr_stmt|;
name|RevCommit
name|commitWithApprovals
init|=
name|tipCommit
decl_stmt|;
name|assertThat
argument_list|(
name|commitWithApprovals
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|RevCommit
name|commitWithComments
init|=
name|commitWithApprovals
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitWithComments
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
try|try
init|(
name|ChangeNotesRevWalk
name|rw
init|=
name|ChangeNotesCommit
operator|.
name|newRevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|ChangeNotesParser
name|notesWithComments
init|=
operator|new
name|ChangeNotesParser
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|commitWithComments
operator|.
name|copy
argument_list|()
argument_list|,
name|rw
argument_list|,
name|noteUtil
argument_list|,
name|args
operator|.
name|metrics
argument_list|)
decl_stmt|;
name|ChangeNotesState
name|state
init|=
name|notesWithComments
operator|.
name|parseAll
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|approvals
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|publishedComments
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|ChangeNotesRevWalk
name|rw
init|=
name|ChangeNotesCommit
operator|.
name|newRevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|ChangeNotesParser
name|notesWithApprovals
init|=
operator|new
name|ChangeNotesParser
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|commitWithApprovals
operator|.
name|copy
argument_list|()
argument_list|,
name|rw
argument_list|,
name|noteUtil
argument_list|,
name|args
operator|.
name|metrics
argument_list|)
decl_stmt|;
name|ChangeNotesState
name|state
init|=
name|notesWithApprovals
operator|.
name|parseAll
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|approvals
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|publishedComments
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|multipleUpdatesAcrossRefs ()
specifier|public
name|void
name|multipleUpdatesAcrossRefs
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c1
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update1
init|=
name|newUpdate
argument_list|(
name|c1
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update1
operator|.
name|putApproval
argument_list|(
literal|"Verified"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|Change
name|c2
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update2
init|=
name|newUpdate
argument_list|(
name|c2
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|update2
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|Ref
name|initial1
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|update1
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|initial1
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|Ref
name|initial2
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|update2
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|initial2
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
try|try
init|(
name|NoteDbUpdateManager
name|updateManager
init|=
name|updateManagerFactory
operator|.
name|create
argument_list|(
name|project
argument_list|)
init|)
block|{
name|updateManager
operator|.
name|add
argument_list|(
name|update1
argument_list|)
expr_stmt|;
name|updateManager
operator|.
name|add
argument_list|(
name|update2
argument_list|)
expr_stmt|;
name|updateManager
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|Ref
name|ref1
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|update1
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref1
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|update1
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref1
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|initial1
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|Ref
name|ref2
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|update2
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref2
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|update2
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref2
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|initial2
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|PatchSetApproval
name|approval1
init|=
name|newNotes
argument_list|(
name|c1
argument_list|)
operator|.
name|getApprovals
argument_list|()
operator|.
name|get
argument_list|(
name|c1
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|approval1
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Verified"
argument_list|)
expr_stmt|;
name|PatchSetApproval
name|approval2
init|=
name|newNotes
argument_list|(
name|c2
argument_list|)
operator|.
name|getApprovals
argument_list|()
operator|.
name|get
argument_list|(
name|c2
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|approval2
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeMessageOnePatchSet ()
specifier|public
name|void
name|changeMessageOnePatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putReviewer
argument_list|(
name|changeOwner
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|REVIEWER
argument_list|)
expr_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
literal|"Just a little code change.\n"
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|ChangeMessage
argument_list|>
name|changeMessages
init|=
name|notes
operator|.
name|getChangeMessagesByPatchSet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|changeMessages
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ps1
argument_list|)
expr_stmt|;
name|ChangeMessage
name|cm
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|changeMessages
operator|.
name|get
argument_list|(
name|ps1
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cm
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Just a little code change.\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cm
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeOwner
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cm
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ps1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noChangeMessage ()
specifier|public
name|void
name|noChangeMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putReviewer
argument_list|(
name|changeOwner
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|REVIEWER
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getChangeMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeMessageWithTrailingDoubleNewline ()
specifier|public
name|void
name|changeMessageWithTrailingDoubleNewline
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
literal|"Testing trailing double newline\n"
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|ChangeMessage
argument_list|>
name|changeMessages
init|=
name|notes
operator|.
name|getChangeMessagesByPatchSet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|changeMessages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ChangeMessage
name|cm1
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|changeMessages
operator|.
name|get
argument_list|(
name|ps1
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cm1
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Testing trailing double newline\n"
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cm1
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeOwner
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeMessageWithMultipleParagraphs ()
specifier|public
name|void
name|changeMessageWithMultipleParagraphs
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
literal|"Testing paragraph 1\n"
operator|+
literal|"\n"
operator|+
literal|"Testing paragraph 2\n"
operator|+
literal|"\n"
operator|+
literal|"Testing paragraph 3"
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|ChangeMessage
argument_list|>
name|changeMessages
init|=
name|notes
operator|.
name|getChangeMessagesByPatchSet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|changeMessages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ChangeMessage
name|cm1
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|changeMessages
operator|.
name|get
argument_list|(
name|ps1
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cm1
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Testing paragraph 1\n"
operator|+
literal|"\n"
operator|+
literal|"Testing paragraph 2\n"
operator|+
literal|"\n"
operator|+
literal|"Testing paragraph 3"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cm1
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeOwner
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeMessagesMultiplePatchSets ()
specifier|public
name|void
name|changeMessagesMultiplePatchSets
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putReviewer
argument_list|(
name|changeOwner
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|REVIEWER
argument_list|)
expr_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
literal|"This is the change message for the first PS."
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
literal|"This is the change message for the second PS."
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|ChangeMessage
argument_list|>
name|changeMessages
init|=
name|notes
operator|.
name|getChangeMessagesByPatchSet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|changeMessages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ChangeMessage
name|cm1
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|changeMessages
operator|.
name|get
argument_list|(
name|ps1
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cm1
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"This is the change message for the first PS."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cm1
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeOwner
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeMessage
name|cm2
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|changeMessages
operator|.
name|get
argument_list|(
name|ps2
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cm1
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ps1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cm2
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"This is the change message for the second PS."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cm2
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeOwner
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cm2
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ps2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeMessageMultipleInOnePatchSet ()
specifier|public
name|void
name|changeMessageMultipleInOnePatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|putReviewer
argument_list|(
name|changeOwner
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|REVIEWER
argument_list|)
expr_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
literal|"First change message.\n"
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|update
operator|.
name|putReviewer
argument_list|(
name|changeOwner
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|REVIEWER
argument_list|)
expr_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
literal|"Second change message.\n"
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|ChangeMessage
argument_list|>
name|changeMessages
init|=
name|notes
operator|.
name|getChangeMessagesByPatchSet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|changeMessages
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|cm
init|=
name|changeMessages
operator|.
name|get
argument_list|(
name|ps1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cm
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cm
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"First change message.\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cm
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeOwner
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cm
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ps1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cm
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Second change message.\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cm
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeOwner
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cm
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ps1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchLineCommentsFileComment ()
specifier|public
name|void
name|patchLineCommentsFileComment
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|RevId
name|revId
init|=
operator|new
name|RevId
argument_list|(
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
argument_list|)
decl_stmt|;
name|Comment
name|comment
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
literal|"file1"
argument_list|,
literal|"uuid"
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
literal|"message"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|revId
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
name|revId
argument_list|,
name|comment
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchLineCommentsZeroColumns ()
specifier|public
name|void
name|patchLineCommentsZeroColumns
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|RevId
name|revId
init|=
operator|new
name|RevId
argument_list|(
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
argument_list|)
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Comment
name|comment
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
literal|"file1"
argument_list|,
literal|"uuid"
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
literal|"message"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|revId
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
name|revId
argument_list|,
name|comment
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchLineCommentZeroRange ()
specifier|public
name|void
name|patchLineCommentZeroRange
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|RevId
name|revId
init|=
operator|new
name|RevId
argument_list|(
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
argument_list|)
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Comment
name|comment
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
literal|"file"
argument_list|,
literal|"uuid"
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
literal|"message"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|revId
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
name|revId
argument_list|,
name|comment
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchLineCommentEmptyFilename ()
specifier|public
name|void
name|patchLineCommentEmptyFilename
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|RevId
name|revId
init|=
operator|new
name|RevId
argument_list|(
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
argument_list|)
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Comment
name|comment
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
literal|""
argument_list|,
literal|"uuid"
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
literal|"message"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|revId
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
name|revId
argument_list|,
name|comment
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchLineCommentNotesFormatSide1 ()
specifier|public
name|void
name|patchLineCommentNotesFormatSide1
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|String
name|uuid1
init|=
literal|"uuid1"
decl_stmt|;
name|String
name|uuid2
init|=
literal|"uuid2"
decl_stmt|;
name|String
name|uuid3
init|=
literal|"uuid3"
decl_stmt|;
name|String
name|message1
init|=
literal|"comment 1"
decl_stmt|;
name|String
name|message2
init|=
literal|"comment 2"
decl_stmt|;
name|String
name|message3
init|=
literal|"comment 3"
decl_stmt|;
name|CommentRange
name|range1
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Timestamp
name|time1
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|Timestamp
name|time2
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|Timestamp
name|time3
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|Comment
name|comment1
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
literal|"file1"
argument_list|,
name|uuid1
argument_list|,
name|range1
argument_list|,
name|range1
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|time1
argument_list|,
name|message1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|CommentRange
name|range2
init|=
operator|new
name|CommentRange
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Comment
name|comment2
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
literal|"file1"
argument_list|,
name|uuid2
argument_list|,
name|range2
argument_list|,
name|range2
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|time2
argument_list|,
name|message2
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|CommentRange
name|range3
init|=
operator|new
name|CommentRange
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Comment
name|comment3
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
literal|"file2"
argument_list|,
name|uuid3
argument_list|,
name|range3
argument_list|,
name|range3
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|time3
argument_list|,
name|message3
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment3
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
try|try
init|(
name|RevWalk
name|walk
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|ArrayList
argument_list|<
name|Note
argument_list|>
name|notesInTree
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|notes
operator|.
name|revisionNoteMap
operator|.
name|noteMap
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|Note
name|note
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|notesInTree
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|walk
operator|.
name|getObjectReader
argument_list|()
operator|.
name|open
argument_list|(
name|note
operator|.
name|getData
argument_list|()
argument_list|,
name|Constants
operator|.
name|OBJ_BLOB
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|String
name|noteString
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|testJson
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|noteString
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Revision: abcd1234abcd1234abcd1234abcd1234abcd1234\n"
operator|+
literal|"Patch-set: 1\n"
operator|+
literal|"File: file1\n"
operator|+
literal|"\n"
operator|+
literal|"1:1-2:1\n"
operator|+
name|ChangeNoteUtil
operator|.
name|formatTime
argument_list|(
name|serverIdent
argument_list|,
name|time1
argument_list|)
operator|+
literal|"\n"
operator|+
literal|"Author: Other Account<2@gerrit>\n"
operator|+
literal|"UUID: uuid1\n"
operator|+
literal|"Bytes: 9\n"
operator|+
literal|"comment 1\n"
operator|+
literal|"\n"
operator|+
literal|"2:1-3:1\n"
operator|+
name|ChangeNoteUtil
operator|.
name|formatTime
argument_list|(
name|serverIdent
argument_list|,
name|time2
argument_list|)
operator|+
literal|"\n"
operator|+
literal|"Author: Other Account<2@gerrit>\n"
operator|+
literal|"UUID: uuid2\n"
operator|+
literal|"Bytes: 9\n"
operator|+
literal|"comment 2\n"
operator|+
literal|"\n"
operator|+
literal|"File: file2\n"
operator|+
literal|"\n"
operator|+
literal|"3:0-4:1\n"
operator|+
name|ChangeNoteUtil
operator|.
name|formatTime
argument_list|(
name|serverIdent
argument_list|,
name|time3
argument_list|)
operator|+
literal|"\n"
operator|+
literal|"Author: Other Account<2@gerrit>\n"
operator|+
literal|"UUID: uuid3\n"
operator|+
literal|"Bytes: 9\n"
operator|+
literal|"comment 3\n"
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|patchLineCommentNotesFormatSide0 ()
specifier|public
name|void
name|patchLineCommentNotesFormatSide0
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|String
name|uuid1
init|=
literal|"uuid1"
decl_stmt|;
name|String
name|uuid2
init|=
literal|"uuid2"
decl_stmt|;
name|String
name|message1
init|=
literal|"comment 1"
decl_stmt|;
name|String
name|message2
init|=
literal|"comment 2"
decl_stmt|;
name|CommentRange
name|range1
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Timestamp
name|time1
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|Timestamp
name|time2
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|Comment
name|comment1
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
literal|"file1"
argument_list|,
name|uuid1
argument_list|,
name|range1
argument_list|,
name|range1
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|time1
argument_list|,
name|message1
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|CommentRange
name|range2
init|=
operator|new
name|CommentRange
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Comment
name|comment2
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
literal|"file1"
argument_list|,
name|uuid2
argument_list|,
name|range2
argument_list|,
name|range2
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|time2
argument_list|,
name|message2
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
try|try
init|(
name|RevWalk
name|walk
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|ArrayList
argument_list|<
name|Note
argument_list|>
name|notesInTree
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|notes
operator|.
name|revisionNoteMap
operator|.
name|noteMap
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|Note
name|note
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|notesInTree
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|walk
operator|.
name|getObjectReader
argument_list|()
operator|.
name|open
argument_list|(
name|note
operator|.
name|getData
argument_list|()
argument_list|,
name|Constants
operator|.
name|OBJ_BLOB
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|String
name|noteString
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|testJson
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|noteString
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Revision: abcd1234abcd1234abcd1234abcd1234abcd1234\n"
operator|+
literal|"Base-for-patch-set: 1\n"
operator|+
literal|"File: file1\n"
operator|+
literal|"\n"
operator|+
literal|"1:1-2:1\n"
operator|+
name|ChangeNoteUtil
operator|.
name|formatTime
argument_list|(
name|serverIdent
argument_list|,
name|time1
argument_list|)
operator|+
literal|"\n"
operator|+
literal|"Author: Other Account<2@gerrit>\n"
operator|+
literal|"UUID: uuid1\n"
operator|+
literal|"Bytes: 9\n"
operator|+
literal|"comment 1\n"
operator|+
literal|"\n"
operator|+
literal|"2:1-3:1\n"
operator|+
name|ChangeNoteUtil
operator|.
name|formatTime
argument_list|(
name|serverIdent
argument_list|,
name|time2
argument_list|)
operator|+
literal|"\n"
operator|+
literal|"Author: Other Account<2@gerrit>\n"
operator|+
literal|"UUID: uuid2\n"
operator|+
literal|"Bytes: 9\n"
operator|+
literal|"comment 2\n"
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|patchLineCommentNotesFormatMultiplePatchSetsSameRevId ()
specifier|public
name|void
name|patchLineCommentNotesFormatMultiplePatchSetsSameRevId
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|String
name|uuid1
init|=
literal|"uuid1"
decl_stmt|;
name|String
name|uuid2
init|=
literal|"uuid2"
decl_stmt|;
name|String
name|uuid3
init|=
literal|"uuid3"
decl_stmt|;
name|String
name|message1
init|=
literal|"comment 1"
decl_stmt|;
name|String
name|message2
init|=
literal|"comment 2"
decl_stmt|;
name|String
name|message3
init|=
literal|"comment 3"
decl_stmt|;
name|CommentRange
name|range1
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|CommentRange
name|range2
init|=
operator|new
name|CommentRange
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Timestamp
name|time
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|RevId
name|revId
init|=
operator|new
name|RevId
argument_list|(
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|psId1
operator|.
name|get
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Comment
name|comment1
init|=
name|newComment
argument_list|(
name|psId1
argument_list|,
literal|"file1"
argument_list|,
name|uuid1
argument_list|,
name|range1
argument_list|,
name|range1
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|time
argument_list|,
name|message1
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
name|revId
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|Comment
name|comment2
init|=
name|newComment
argument_list|(
name|psId1
argument_list|,
literal|"file1"
argument_list|,
name|uuid2
argument_list|,
name|range2
argument_list|,
name|range2
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|time
argument_list|,
name|message2
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
name|revId
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|Comment
name|comment3
init|=
name|newComment
argument_list|(
name|psId2
argument_list|,
literal|"file1"
argument_list|,
name|uuid3
argument_list|,
name|range1
argument_list|,
name|range1
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|time
argument_list|,
name|message3
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
name|revId
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId2
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment3
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
try|try
init|(
name|RevWalk
name|walk
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|ArrayList
argument_list|<
name|Note
argument_list|>
name|notesInTree
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|notes
operator|.
name|revisionNoteMap
operator|.
name|noteMap
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|Note
name|note
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|notesInTree
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|walk
operator|.
name|getObjectReader
argument_list|()
operator|.
name|open
argument_list|(
name|note
operator|.
name|getData
argument_list|()
argument_list|,
name|Constants
operator|.
name|OBJ_BLOB
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|String
name|noteString
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|String
name|timeStr
init|=
name|ChangeNoteUtil
operator|.
name|formatTime
argument_list|(
name|serverIdent
argument_list|,
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|testJson
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|noteString
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Revision: abcd1234abcd1234abcd1234abcd1234abcd1234\n"
operator|+
literal|"Base-for-patch-set: 1\n"
operator|+
literal|"File: file1\n"
operator|+
literal|"\n"
operator|+
literal|"1:1-2:1\n"
operator|+
name|timeStr
operator|+
literal|"\n"
operator|+
literal|"Author: Other Account<2@gerrit>\n"
operator|+
literal|"UUID: uuid1\n"
operator|+
literal|"Bytes: 9\n"
operator|+
literal|"comment 1\n"
operator|+
literal|"\n"
operator|+
literal|"2:1-3:1\n"
operator|+
name|timeStr
operator|+
literal|"\n"
operator|+
literal|"Author: Other Account<2@gerrit>\n"
operator|+
literal|"UUID: uuid2\n"
operator|+
literal|"Bytes: 9\n"
operator|+
literal|"comment 2\n"
operator|+
literal|"\n"
operator|+
literal|"Base-for-patch-set: 2\n"
operator|+
literal|"File: file1\n"
operator|+
literal|"\n"
operator|+
literal|"1:1-2:1\n"
operator|+
name|timeStr
operator|+
literal|"\n"
operator|+
literal|"Author: Other Account<2@gerrit>\n"
operator|+
literal|"UUID: uuid3\n"
operator|+
literal|"Bytes: 9\n"
operator|+
literal|"comment 3\n"
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
name|revId
argument_list|,
name|comment1
argument_list|,
name|revId
argument_list|,
name|comment2
argument_list|,
name|revId
argument_list|,
name|comment3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchLineCommentNotesFormatRealAuthor ()
specifier|public
name|void
name|patchLineCommentNotesFormatRealAuthor
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|CurrentUser
name|ownerAsOtherUser
init|=
name|userFactory
operator|.
name|runAs
argument_list|(
literal|null
argument_list|,
name|otherUserId
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|ownerAsOtherUser
argument_list|)
decl_stmt|;
name|String
name|uuid
init|=
literal|"uuid"
decl_stmt|;
name|String
name|message
init|=
literal|"comment"
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Timestamp
name|time
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|RevId
name|revId
init|=
operator|new
name|RevId
argument_list|(
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
argument_list|)
decl_stmt|;
name|Comment
name|comment
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
literal|"file"
argument_list|,
name|uuid
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|time
argument_list|,
name|message
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|revId
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|comment
operator|.
name|setRealAuthor
argument_list|(
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
try|try
init|(
name|RevWalk
name|walk
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|ArrayList
argument_list|<
name|Note
argument_list|>
name|notesInTree
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|notes
operator|.
name|revisionNoteMap
operator|.
name|noteMap
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|Note
name|note
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|notesInTree
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|walk
operator|.
name|getObjectReader
argument_list|()
operator|.
name|open
argument_list|(
name|note
operator|.
name|getData
argument_list|()
argument_list|,
name|Constants
operator|.
name|OBJ_BLOB
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|String
name|noteString
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|testJson
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|noteString
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Revision: abcd1234abcd1234abcd1234abcd1234abcd1234\n"
operator|+
literal|"Patch-set: 1\n"
operator|+
literal|"File: file\n"
operator|+
literal|"\n"
operator|+
literal|"1:1-2:1\n"
operator|+
name|ChangeNoteUtil
operator|.
name|formatTime
argument_list|(
name|serverIdent
argument_list|,
name|time
argument_list|)
operator|+
literal|"\n"
operator|+
literal|"Author: Other Account<2@gerrit>\n"
operator|+
literal|"Real-author: Change Owner<1@gerrit>\n"
operator|+
literal|"UUID: uuid\n"
operator|+
literal|"Bytes: 7\n"
operator|+
literal|"comment\n"
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
name|revId
argument_list|,
name|comment
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchLineCommentNotesFormatWeirdUser ()
specifier|public
name|void
name|patchLineCommentNotesFormatWeirdUser
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
name|account
init|=
operator|new
name|Account
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|3
argument_list|)
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|account
operator|.
name|setFullName
argument_list|(
literal|"Weird\n\u0002<User>\n"
argument_list|)
expr_stmt|;
name|account
operator|.
name|setPreferredEmail
argument_list|(
literal|" we\r\nird@ex>ample<.com"
argument_list|)
expr_stmt|;
name|accountCache
operator|.
name|put
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|IdentifiedUser
name|user
init|=
name|userFactory
operator|.
name|create
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|String
name|uuid
init|=
literal|"uuid"
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Timestamp
name|time
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|Comment
name|comment
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
literal|"file1"
argument_list|,
name|uuid
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
name|time
argument_list|,
literal|"comment"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
try|try
init|(
name|RevWalk
name|walk
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|ArrayList
argument_list|<
name|Note
argument_list|>
name|notesInTree
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|notes
operator|.
name|revisionNoteMap
operator|.
name|noteMap
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|Note
name|note
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|notesInTree
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|walk
operator|.
name|getObjectReader
argument_list|()
operator|.
name|open
argument_list|(
name|note
operator|.
name|getData
argument_list|()
argument_list|,
name|Constants
operator|.
name|OBJ_BLOB
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|String
name|noteString
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|String
name|timeStr
init|=
name|ChangeNoteUtil
operator|.
name|formatTime
argument_list|(
name|serverIdent
argument_list|,
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|testJson
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|noteString
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Revision: abcd1234abcd1234abcd1234abcd1234abcd1234\n"
operator|+
literal|"Patch-set: 1\n"
operator|+
literal|"File: file1\n"
operator|+
literal|"\n"
operator|+
literal|"1:1-2:1\n"
operator|+
name|timeStr
operator|+
literal|"\n"
operator|+
literal|"Author: Weird\u0002User<3@gerrit>\n"
operator|+
literal|"UUID: uuid\n"
operator|+
literal|"Bytes: 7\n"
operator|+
literal|"comment\n"
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
operator|new
name|RevId
argument_list|(
name|comment
operator|.
name|revId
argument_list|)
argument_list|,
name|comment
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchLineCommentMultipleOnePatchsetOneFileBothSides ()
specifier|public
name|void
name|patchLineCommentMultipleOnePatchsetOneFileBothSides
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|String
name|uuid1
init|=
literal|"uuid1"
decl_stmt|;
name|String
name|uuid2
init|=
literal|"uuid2"
decl_stmt|;
name|String
name|rev1
init|=
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
decl_stmt|;
name|String
name|rev2
init|=
literal|"abcd4567abcd4567abcd4567abcd4567abcd4567"
decl_stmt|;
name|String
name|messageForBase
init|=
literal|"comment for base"
decl_stmt|;
name|String
name|messageForPS
init|=
literal|"comment for ps"
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Timestamp
name|now
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|Comment
name|commentForBase
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
literal|"filename"
argument_list|,
name|uuid1
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
name|messageForBase
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
name|rev1
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|commentForBase
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|Comment
name|commentForPS
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
literal|"filename"
argument_list|,
name|uuid2
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
name|messageForPS
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|rev2
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|commentForPS
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
operator|new
name|RevId
argument_list|(
name|rev1
argument_list|)
argument_list|,
name|commentForBase
argument_list|,
operator|new
name|RevId
argument_list|(
name|rev2
argument_list|)
argument_list|,
name|commentForPS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchLineCommentMultipleOnePatchsetOneFile ()
specifier|public
name|void
name|patchLineCommentMultipleOnePatchsetOneFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|String
name|uuid1
init|=
literal|"uuid1"
decl_stmt|;
name|String
name|uuid2
init|=
literal|"uuid2"
decl_stmt|;
name|String
name|rev
init|=
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
literal|"filename"
decl_stmt|;
name|short
name|side
init|=
operator|(
name|short
operator|)
literal|1
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|Timestamp
name|timeForComment1
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|Timestamp
name|timeForComment2
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|Comment
name|comment1
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
name|filename
argument_list|,
name|uuid1
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|timeForComment1
argument_list|,
literal|"comment 1"
argument_list|,
name|side
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|Comment
name|comment2
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
name|filename
argument_list|,
name|uuid2
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|timeForComment2
argument_list|,
literal|"comment 2"
argument_list|,
name|side
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
operator|new
name|RevId
argument_list|(
name|rev
argument_list|)
argument_list|,
name|comment1
argument_list|,
operator|new
name|RevId
argument_list|(
name|rev
argument_list|)
argument_list|,
name|comment2
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchLineCommentMultipleOnePatchsetMultipleFiles ()
specifier|public
name|void
name|patchLineCommentMultipleOnePatchsetMultipleFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|String
name|uuid
init|=
literal|"uuid"
decl_stmt|;
name|String
name|rev
init|=
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|String
name|filename1
init|=
literal|"filename1"
decl_stmt|;
name|String
name|filename2
init|=
literal|"filename2"
decl_stmt|;
name|short
name|side
init|=
operator|(
name|short
operator|)
literal|1
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|Timestamp
name|now
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|Comment
name|comment1
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
name|filename1
argument_list|,
name|uuid
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment 1"
argument_list|,
name|side
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|Comment
name|comment2
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
name|filename2
argument_list|,
name|uuid
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment 2"
argument_list|,
name|side
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
operator|new
name|RevId
argument_list|(
name|rev
argument_list|)
argument_list|,
name|comment1
argument_list|,
operator|new
name|RevId
argument_list|(
name|rev
argument_list|)
argument_list|,
name|comment2
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchLineCommentMultiplePatchsets ()
specifier|public
name|void
name|patchLineCommentMultiplePatchsets
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|String
name|uuid
init|=
literal|"uuid"
decl_stmt|;
name|String
name|rev1
init|=
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
decl_stmt|;
name|String
name|rev2
init|=
literal|"abcd4567abcd4567abcd4567abcd4567abcd4567"
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
literal|"filename1"
decl_stmt|;
name|short
name|side
init|=
operator|(
name|short
operator|)
literal|1
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|Timestamp
name|now
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|Comment
name|comment1
init|=
name|newComment
argument_list|(
name|ps1
argument_list|,
name|filename
argument_list|,
name|uuid
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment on ps1"
argument_list|,
name|side
argument_list|,
name|rev1
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|ps1
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|now
operator|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
expr_stmt|;
name|Comment
name|comment2
init|=
name|newComment
argument_list|(
name|ps2
argument_list|,
name|filename
argument_list|,
name|uuid
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment on ps2"
argument_list|,
name|side
argument_list|,
name|rev2
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|ps2
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
operator|new
name|RevId
argument_list|(
name|rev1
argument_list|)
argument_list|,
name|comment1
argument_list|,
operator|new
name|RevId
argument_list|(
name|rev2
argument_list|)
argument_list|,
name|comment2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchLineCommentSingleDraftToPublished ()
specifier|public
name|void
name|patchLineCommentSingleDraftToPublished
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|String
name|uuid
init|=
literal|"uuid"
decl_stmt|;
name|String
name|rev
init|=
literal|"abcd4567abcd4567abcd4567abcd4567abcd4567"
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
literal|"filename1"
decl_stmt|;
name|short
name|side
init|=
operator|(
name|short
operator|)
literal|1
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|Timestamp
name|now
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|Comment
name|comment1
init|=
name|newComment
argument_list|(
name|ps1
argument_list|,
name|filename
argument_list|,
name|uuid
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment on ps1"
argument_list|,
name|side
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|ps1
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|DRAFT
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|otherUserId
argument_list|)
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
operator|new
name|RevId
argument_list|(
name|rev
argument_list|)
argument_list|,
name|comment1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|ps1
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|otherUserId
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
operator|new
name|RevId
argument_list|(
name|rev
argument_list|)
argument_list|,
name|comment1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchLineCommentMultipleDraftsSameSidePublishOne ()
specifier|public
name|void
name|patchLineCommentMultipleDraftsSameSidePublishOne
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|String
name|uuid1
init|=
literal|"uuid1"
decl_stmt|;
name|String
name|uuid2
init|=
literal|"uuid2"
decl_stmt|;
name|String
name|rev
init|=
literal|"abcd4567abcd4567abcd4567abcd4567abcd4567"
decl_stmt|;
name|CommentRange
name|range1
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|CommentRange
name|range2
init|=
operator|new
name|CommentRange
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
literal|"filename1"
decl_stmt|;
name|short
name|side
init|=
operator|(
name|short
operator|)
literal|1
decl_stmt|;
name|Timestamp
name|now
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
comment|// Write two drafts on the same side of one patch set.
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|Comment
name|comment1
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
name|filename
argument_list|,
name|uuid1
argument_list|,
name|range1
argument_list|,
name|range1
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment on ps1"
argument_list|,
name|side
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|Comment
name|comment2
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
name|filename
argument_list|,
name|uuid2
argument_list|,
name|range2
argument_list|,
name|range2
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"other on ps1"
argument_list|,
name|side
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|DRAFT
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|DRAFT
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|otherUserId
argument_list|)
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
operator|new
name|RevId
argument_list|(
name|rev
argument_list|)
argument_list|,
name|comment1
argument_list|,
operator|new
name|RevId
argument_list|(
name|rev
argument_list|)
argument_list|,
name|comment2
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// Publish first draft.
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|otherUserId
argument_list|)
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
operator|new
name|RevId
argument_list|(
name|rev
argument_list|)
argument_list|,
name|comment2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
operator|new
name|RevId
argument_list|(
name|rev
argument_list|)
argument_list|,
name|comment1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchLineCommentsMultipleDraftsBothSidesPublishAll ()
specifier|public
name|void
name|patchLineCommentsMultipleDraftsBothSidesPublishAll
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|String
name|uuid1
init|=
literal|"uuid1"
decl_stmt|;
name|String
name|uuid2
init|=
literal|"uuid2"
decl_stmt|;
name|String
name|rev1
init|=
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
decl_stmt|;
name|String
name|rev2
init|=
literal|"abcd4567abcd4567abcd4567abcd4567abcd4567"
decl_stmt|;
name|CommentRange
name|range1
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|CommentRange
name|range2
init|=
operator|new
name|CommentRange
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
literal|"filename1"
decl_stmt|;
name|Timestamp
name|now
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
comment|// Write two drafts, one on each side of the patchset.
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|Comment
name|baseComment
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
name|filename
argument_list|,
name|uuid1
argument_list|,
name|range1
argument_list|,
name|range1
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment on base"
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
name|rev1
argument_list|)
decl_stmt|;
name|Comment
name|psComment
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
name|filename
argument_list|,
name|uuid2
argument_list|,
name|range2
argument_list|,
name|range2
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment on ps"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|rev2
argument_list|)
decl_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|DRAFT
argument_list|,
name|baseComment
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|DRAFT
argument_list|,
name|psComment
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|otherUserId
argument_list|)
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
operator|new
name|RevId
argument_list|(
name|rev1
argument_list|)
argument_list|,
name|baseComment
argument_list|,
operator|new
name|RevId
argument_list|(
name|rev2
argument_list|)
argument_list|,
name|psComment
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// Publish both comments.
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|baseComment
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|psComment
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|otherUserId
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
operator|new
name|RevId
argument_list|(
name|rev1
argument_list|)
argument_list|,
name|baseComment
argument_list|,
operator|new
name|RevId
argument_list|(
name|rev2
argument_list|)
argument_list|,
name|psComment
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchLineCommentsDeleteAllDrafts ()
specifier|public
name|void
name|patchLineCommentsDeleteAllDrafts
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|String
name|uuid
init|=
literal|"uuid"
decl_stmt|;
name|String
name|rev
init|=
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
decl_stmt|;
name|ObjectId
name|objId
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
literal|"filename"
decl_stmt|;
name|short
name|side
init|=
operator|(
name|short
operator|)
literal|1
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|Timestamp
name|now
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|Comment
name|comment
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
name|filename
argument_list|,
name|uuid
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment on ps1"
argument_list|,
name|side
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|DRAFT
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|otherUserId
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getDraftCommentNotes
argument_list|()
operator|.
name|getNoteMap
argument_list|()
operator|.
name|contains
argument_list|(
name|objId
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|now
operator|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
expr_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|deleteComment
argument_list|(
name|comment
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|otherUserId
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getDraftCommentNotes
argument_list|()
operator|.
name|getNoteMap
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchLineCommentsDeleteAllDraftsForOneRevision ()
specifier|public
name|void
name|patchLineCommentsDeleteAllDraftsForOneRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|String
name|uuid
init|=
literal|"uuid"
decl_stmt|;
name|String
name|rev1
init|=
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
decl_stmt|;
name|String
name|rev2
init|=
literal|"abcd4567abcd4567abcd4567abcd4567abcd4567"
decl_stmt|;
name|ObjectId
name|objId1
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev1
argument_list|)
decl_stmt|;
name|ObjectId
name|objId2
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev2
argument_list|)
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
literal|"filename1"
decl_stmt|;
name|short
name|side
init|=
operator|(
name|short
operator|)
literal|1
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|Timestamp
name|now
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|Comment
name|comment1
init|=
name|newComment
argument_list|(
name|ps1
argument_list|,
name|filename
argument_list|,
name|uuid
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment on ps1"
argument_list|,
name|side
argument_list|,
name|rev1
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|ps1
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|DRAFT
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|now
operator|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
expr_stmt|;
name|Comment
name|comment2
init|=
name|newComment
argument_list|(
name|ps2
argument_list|,
name|filename
argument_list|,
name|uuid
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment on ps2"
argument_list|,
name|side
argument_list|,
name|rev2
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|ps2
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|DRAFT
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|otherUserId
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|now
operator|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
expr_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|ps2
argument_list|)
expr_stmt|;
name|update
operator|.
name|deleteComment
argument_list|(
name|comment2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|otherUserId
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|NoteMap
name|noteMap
init|=
name|notes
operator|.
name|getDraftCommentNotes
argument_list|()
operator|.
name|getNoteMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|noteMap
operator|.
name|contains
argument_list|(
name|objId1
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|noteMap
operator|.
name|contains
argument_list|(
name|objId2
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addingPublishedCommentDoesNotCreateNoOpCommitOnEmptyDraftRef ()
specifier|public
name|void
name|addingPublishedCommentDoesNotCreateNoOpCommitOnEmptyDraftRef
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|String
name|uuid
init|=
literal|"uuid"
decl_stmt|;
name|String
name|rev
init|=
literal|"abcd4567abcd4567abcd4567abcd4567abcd4567"
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
literal|"filename1"
decl_stmt|;
name|short
name|side
init|=
operator|(
name|short
operator|)
literal|1
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|Timestamp
name|now
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|Comment
name|comment
init|=
name|newComment
argument_list|(
name|ps1
argument_list|,
name|filename
argument_list|,
name|uuid
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment on ps1"
argument_list|,
name|side
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|changeMetaRef
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|String
name|draftRef
init|=
name|refsDraftComments
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|otherUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exactRefAllUsers
argument_list|(
name|draftRef
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addingPublishedCommentDoesNotCreateNoOpCommitOnNonEmptyDraftRef ()
specifier|public
name|void
name|addingPublishedCommentDoesNotCreateNoOpCommitOnNonEmptyDraftRef
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
literal|"abcd4567abcd4567abcd4567abcd4567abcd4567"
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
literal|"filename1"
decl_stmt|;
name|short
name|side
init|=
operator|(
name|short
operator|)
literal|1
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|Timestamp
name|now
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|Comment
name|draft
init|=
name|newComment
argument_list|(
name|ps1
argument_list|,
name|filename
argument_list|,
literal|"uuid1"
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"draft comment on ps1"
argument_list|,
name|side
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|DRAFT
argument_list|,
name|draft
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|draftRef
init|=
name|refsDraftComments
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|otherUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectId
name|old
init|=
name|exactRefAllUsers
argument_list|(
name|draftRef
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|old
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|Comment
name|pub
init|=
name|newComment
argument_list|(
name|ps1
argument_list|,
name|filename
argument_list|,
literal|"uuid2"
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment on ps1"
argument_list|,
name|side
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|pub
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|exactRefAllUsers
argument_list|(
name|draftRef
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|old
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fileComment ()
specifier|public
name|void
name|fileComment
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|String
name|uuid
init|=
literal|"uuid"
decl_stmt|;
name|String
name|rev
init|=
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
decl_stmt|;
name|String
name|messageForBase
init|=
literal|"comment for base"
decl_stmt|;
name|Timestamp
name|now
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|Comment
name|comment
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
literal|"filename"
argument_list|,
name|uuid
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
name|messageForBase
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
operator|new
name|RevId
argument_list|(
name|rev
argument_list|)
argument_list|,
name|comment
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchLineCommentNoRange ()
specifier|public
name|void
name|patchLineCommentNoRange
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|String
name|uuid
init|=
literal|"uuid"
decl_stmt|;
name|String
name|rev
init|=
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
decl_stmt|;
name|String
name|messageForBase
init|=
literal|"comment for base"
decl_stmt|;
name|Timestamp
name|now
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|Comment
name|comment
init|=
name|newComment
argument_list|(
name|psId
argument_list|,
literal|"filename"
argument_list|,
name|uuid
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
name|messageForBase
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
operator|new
name|RevId
argument_list|(
name|rev
argument_list|)
argument_list|,
name|comment
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putCommentsForMultipleRevisions ()
specifier|public
name|void
name|putCommentsForMultipleRevisions
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|String
name|uuid
init|=
literal|"uuid"
decl_stmt|;
name|String
name|rev1
init|=
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
decl_stmt|;
name|String
name|rev2
init|=
literal|"abcd4567abcd4567abcd4567abcd4567abcd4567"
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
literal|"filename1"
decl_stmt|;
name|short
name|side
init|=
operator|(
name|short
operator|)
literal|1
decl_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|ps2
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|ps2
argument_list|)
expr_stmt|;
name|Timestamp
name|now
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|Comment
name|comment1
init|=
name|newComment
argument_list|(
name|ps1
argument_list|,
name|filename
argument_list|,
name|uuid
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment on ps1"
argument_list|,
name|side
argument_list|,
name|rev1
argument_list|)
decl_stmt|;
name|Comment
name|comment2
init|=
name|newComment
argument_list|(
name|ps2
argument_list|,
name|filename
argument_list|,
name|uuid
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment on ps2"
argument_list|,
name|side
argument_list|,
name|rev2
argument_list|)
decl_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|DRAFT
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|DRAFT
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|otherUserId
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|ps2
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|otherUserId
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishSubsetOfCommentsOnRevision ()
specifier|public
name|void
name|publishSubsetOfCommentsOnRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|RevId
name|rev1
init|=
operator|new
name|RevId
argument_list|(
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
argument_list|)
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|short
name|side
init|=
operator|(
name|short
operator|)
literal|1
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|ps1
argument_list|)
expr_stmt|;
name|Timestamp
name|now
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|Comment
name|comment1
init|=
name|newComment
argument_list|(
name|ps1
argument_list|,
literal|"file1"
argument_list|,
literal|"uuid1"
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment1"
argument_list|,
name|side
argument_list|,
name|rev1
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|Comment
name|comment2
init|=
name|newComment
argument_list|(
name|ps1
argument_list|,
literal|"file2"
argument_list|,
literal|"uuid2"
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment2"
argument_list|,
name|side
argument_list|,
name|rev1
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|DRAFT
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|DRAFT
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|otherUserId
argument_list|)
operator|.
name|get
argument_list|(
name|rev1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|comment1
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|ps1
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|otherUserId
argument_list|)
operator|.
name|get
argument_list|(
name|rev1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|comment1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
operator|.
name|get
argument_list|(
name|rev1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|comment2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateWithServerIdent ()
specifier|public
name|void
name|updateWithServerIdent
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|internalUser
argument_list|)
decl_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
literal|"A message."
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeMessage
name|msg
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getChangeMessages
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|msg
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"A message."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|internalUser
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|filterOutAndFixUpZombieDraftComments ()
specifier|public
name|void
name|filterOutAndFixUpZombieDraftComments
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|RevId
name|rev1
init|=
operator|new
name|RevId
argument_list|(
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
argument_list|)
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps1
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|short
name|side
init|=
operator|(
name|short
operator|)
literal|1
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|Timestamp
name|now
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|Comment
name|comment1
init|=
name|newComment
argument_list|(
name|ps1
argument_list|,
literal|"file1"
argument_list|,
literal|"uuid1"
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"comment on ps1"
argument_list|,
name|side
argument_list|,
name|rev1
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|Comment
name|comment2
init|=
name|newComment
argument_list|(
name|ps1
argument_list|,
literal|"file2"
argument_list|,
literal|"uuid2"
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
literal|"another comment"
argument_list|,
name|side
argument_list|,
name|rev1
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|DRAFT
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|DRAFT
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|refName
init|=
name|refsDraftComments
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|otherUserId
argument_list|)
decl_stmt|;
name|ObjectId
name|oldDraftId
init|=
name|exactRefAllUsers
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|ps1
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|exactRefAllUsers
argument_list|(
name|refName
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|exactRefAllUsers
argument_list|(
name|refName
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldDraftId
argument_list|)
expr_stmt|;
comment|// Re-add draft version of comment2 back to draft ref without updating
comment|// change ref. Simulates the case where deleting the draft failed
comment|// non-atomically after adding the published comment succeeded.
name|ChangeDraftUpdate
name|draftUpdate
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
operator|.
name|createDraftUpdateIfNull
argument_list|()
decl_stmt|;
name|draftUpdate
operator|.
name|putComment
argument_list|(
name|comment2
argument_list|)
expr_stmt|;
try|try
init|(
name|NoteDbUpdateManager
name|manager
init|=
name|updateManagerFactory
operator|.
name|create
argument_list|(
name|c
operator|.
name|getProject
argument_list|()
argument_list|)
init|)
block|{
name|manager
operator|.
name|add
argument_list|(
name|draftUpdate
argument_list|)
expr_stmt|;
name|manager
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
comment|// Looking at drafts directly shows the zombie comment.
name|DraftCommentNotes
name|draftNotes
init|=
name|draftNotesFactory
operator|.
name|create
argument_list|(
name|c
argument_list|,
name|otherUserId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|draftNotes
operator|.
name|load
argument_list|()
operator|.
name|getComments
argument_list|()
operator|.
name|get
argument_list|(
name|rev1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|comment1
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
comment|// Zombie comment is filtered out of drafts via ChangeNotes.
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|otherUserId
argument_list|)
operator|.
name|get
argument_list|(
name|rev1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|comment1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
operator|.
name|get
argument_list|(
name|rev1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|comment2
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|ps1
argument_list|)
expr_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Updating an unrelated comment causes the zombie comment to get fixed up.
name|assertThat
argument_list|(
name|exactRefAllUsers
argument_list|(
name|refName
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateCommentsInSequentialUpdates ()
specifier|public
name|void
name|updateCommentsInSequentialUpdates
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
literal|"abcd1234abcd1234abcd1234abcd1234abcd1234"
decl_stmt|;
name|ChangeUpdate
name|update1
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|Comment
name|comment1
init|=
name|newComment
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
literal|"filename"
argument_list|,
literal|"uuid1"
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|update1
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|,
literal|"comment 1"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|update1
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|ChangeUpdate
name|update2
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|Comment
name|comment2
init|=
name|newComment
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
literal|"filename"
argument_list|,
literal|"uuid2"
argument_list|,
name|range
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|otherUser
argument_list|,
literal|null
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|update2
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|,
literal|"comment 2"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|update2
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
try|try
init|(
name|NoteDbUpdateManager
name|manager
init|=
name|updateManagerFactory
operator|.
name|create
argument_list|(
name|project
argument_list|)
init|)
block|{
name|manager
operator|.
name|add
argument_list|(
name|update1
argument_list|)
expr_stmt|;
name|manager
operator|.
name|add
argument_list|(
name|update2
argument_list|)
expr_stmt|;
name|manager
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Comment
argument_list|>
name|comments
init|=
name|notes
operator|.
name|getComments
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|RevId
argument_list|(
name|rev
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|comments
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|comments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"comment 1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|comments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"comment 2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|realUser ()
specifier|public
name|void
name|realUser
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|CurrentUser
name|ownerAsOtherUser
init|=
name|userFactory
operator|.
name|runAs
argument_list|(
literal|null
argument_list|,
name|otherUserId
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|ownerAsOtherUser
argument_list|)
decl_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
literal|"Message on behalf of other user"
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeMessage
name|msg
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|newNotes
argument_list|(
name|c
argument_list|)
operator|.
name|getChangeMessages
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|msg
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Message on behalf of other user"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|otherUserId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
operator|.
name|getRealAuthor
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testJson ()
specifier|private
name|boolean
name|testJson
parameter_list|()
block|{
return|return
name|noteUtil
operator|.
name|getWriteJson
argument_list|()
return|;
block|}
DECL|method|readNote (ChangeNotes notes, ObjectId noteId)
specifier|private
name|String
name|readNote
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|ObjectId
name|noteId
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectId
name|dataId
init|=
name|notes
operator|.
name|revisionNoteMap
operator|.
name|noteMap
operator|.
name|getNote
argument_list|(
name|noteId
argument_list|)
operator|.
name|getData
argument_list|()
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|rw
operator|.
name|getObjectReader
argument_list|()
operator|.
name|open
argument_list|(
name|dataId
argument_list|,
name|OBJ_BLOB
argument_list|)
operator|.
name|getCachedBytes
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
DECL|method|exactRefAllUsers (String refName)
specifier|private
name|ObjectId
name|exactRefAllUsers
parameter_list|(
name|String
name|refName
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|allUsersRepo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|allUsersRepo
operator|.
name|exactRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
return|return
name|ref
operator|!=
literal|null
condition|?
name|ref
operator|.
name|getObjectId
argument_list|()
else|:
literal|null
return|;
block|}
block|}
DECL|method|assertCause (Throwable e, Class<? extends Throwable> expectedClass, String expectedMsg)
specifier|private
name|void
name|assertCause
parameter_list|(
name|Throwable
name|e
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|expectedClass
parameter_list|,
name|String
name|expectedMsg
parameter_list|)
block|{
name|Throwable
name|cause
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Throwable
name|t
range|:
name|Throwables
operator|.
name|getCausalChain
argument_list|(
name|e
argument_list|)
control|)
block|{
if|if
condition|(
name|expectedClass
operator|.
name|isAssignableFrom
argument_list|(
name|t
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|cause
operator|=
name|t
expr_stmt|;
break|break;
block|}
block|}
name|assertThat
argument_list|(
name|cause
argument_list|)
operator|.
name|named
argument_list|(
name|expectedClass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" in causal chain of:\n"
operator|+
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|e
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMsg
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

