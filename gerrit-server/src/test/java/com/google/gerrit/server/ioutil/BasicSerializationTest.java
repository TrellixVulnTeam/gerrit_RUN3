begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.ioutil
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ioutil
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ioutil
operator|.
name|BasicSerialization
operator|.
name|readFixInt64
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ioutil
operator|.
name|BasicSerialization
operator|.
name|readString
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ioutil
operator|.
name|BasicSerialization
operator|.
name|readVarInt32
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ioutil
operator|.
name|BasicSerialization
operator|.
name|writeFixInt64
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ioutil
operator|.
name|BasicSerialization
operator|.
name|writeString
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ioutil
operator|.
name|BasicSerialization
operator|.
name|writeVarInt32
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|BasicSerializationTest
specifier|public
class|class
name|BasicSerializationTest
block|{
annotation|@
name|Test
DECL|method|testReadVarInt32 ()
specifier|public
name|void
name|testReadVarInt32
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|0x00000000
argument_list|,
name|readVarInt32
argument_list|(
name|r
argument_list|(
name|b
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x00000003
argument_list|,
name|readVarInt32
argument_list|(
name|r
argument_list|(
name|b
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x000000ff
argument_list|,
name|readVarInt32
argument_list|(
name|r
argument_list|(
name|b
argument_list|(
literal|0x80
operator||
literal|0x7f
argument_list|,
literal|0x01
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteVarInt32 ()
specifier|public
name|void
name|testWriteVarInt32
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|out
decl_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|writeVarInt32
argument_list|(
name|out
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertOutput
argument_list|(
name|b
argument_list|(
literal|0
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|writeVarInt32
argument_list|(
name|out
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertOutput
argument_list|(
name|b
argument_list|(
literal|3
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|writeVarInt32
argument_list|(
name|out
argument_list|,
literal|0xff
argument_list|)
expr_stmt|;
name|assertOutput
argument_list|(
name|b
argument_list|(
literal|0x80
operator||
literal|0x7f
argument_list|,
literal|0x01
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadFixInt64 ()
specifier|public
name|void
name|testReadFixInt64
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|readFixInt64
argument_list|(
name|r
argument_list|(
name|b
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|readFixInt64
argument_list|(
name|r
argument_list|(
name|b
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0xdeadbeefL
argument_list|,
name|readFixInt64
argument_list|(
name|r
argument_list|(
name|b
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0xde
argument_list|,
literal|0xad
argument_list|,
literal|0xbe
argument_list|,
literal|0xef
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x0310adefL
argument_list|,
name|readFixInt64
argument_list|(
name|r
argument_list|(
name|b
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0x03
argument_list|,
literal|0x10
argument_list|,
literal|0xad
argument_list|,
literal|0xef
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0xc0ffee78deadbeefL
argument_list|,
name|readFixInt64
argument_list|(
name|r
argument_list|(
name|b
argument_list|(
literal|0xc0
argument_list|,
literal|0xff
argument_list|,
literal|0xee
argument_list|,
literal|0x78
argument_list|,
literal|0xde
argument_list|,
literal|0xad
argument_list|,
literal|0xbe
argument_list|,
literal|0xef
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x00000000ffffffffL
argument_list|,
name|readFixInt64
argument_list|(
name|r
argument_list|(
name|b
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0xffffffffffffffffL
argument_list|,
name|readFixInt64
argument_list|(
name|r
argument_list|(
name|b
argument_list|(
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteFixInt64 ()
specifier|public
name|void
name|testWriteFixInt64
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|out
decl_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|writeFixInt64
argument_list|(
name|out
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|assertOutput
argument_list|(
name|b
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|writeFixInt64
argument_list|(
name|out
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|assertOutput
argument_list|(
name|b
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|writeFixInt64
argument_list|(
name|out
argument_list|,
literal|0xdeacL
argument_list|)
expr_stmt|;
name|assertOutput
argument_list|(
name|b
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0xde
argument_list|,
literal|0xac
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|writeFixInt64
argument_list|(
name|out
argument_list|,
literal|0xdeac9853L
argument_list|)
expr_stmt|;
name|assertOutput
argument_list|(
name|b
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0xde
argument_list|,
literal|0xac
argument_list|,
literal|0x98
argument_list|,
literal|0x53
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|writeFixInt64
argument_list|(
name|out
argument_list|,
literal|0xac431242deac9853L
argument_list|)
expr_stmt|;
name|assertOutput
argument_list|(
name|b
argument_list|(
literal|0xac
argument_list|,
literal|0x43
argument_list|,
literal|0x12
argument_list|,
literal|0x42
argument_list|,
literal|0xde
argument_list|,
literal|0xac
argument_list|,
literal|0x98
argument_list|,
literal|0x53
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|writeFixInt64
argument_list|(
name|out
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|assertOutput
argument_list|(
name|b
argument_list|(
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadString ()
specifier|public
name|void
name|testReadString
parameter_list|()
throws|throws
name|IOException
block|{
name|assertNull
argument_list|(
name|readString
argument_list|(
name|r
argument_list|(
name|b
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|readString
argument_list|(
name|r
argument_list|(
name|b
argument_list|(
literal|1
argument_list|,
literal|'a'
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"coffee4"
argument_list|,
name|readString
argument_list|(
name|r
argument_list|(
name|b
argument_list|(
literal|7
argument_list|,
literal|'c'
argument_list|,
literal|'o'
argument_list|,
literal|'f'
argument_list|,
literal|'f'
argument_list|,
literal|'e'
argument_list|,
literal|'e'
argument_list|,
literal|'4'
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteString ()
specifier|public
name|void
name|testWriteString
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|out
decl_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|writeString
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertOutput
argument_list|(
name|b
argument_list|(
literal|0
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|writeString
argument_list|(
name|out
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertOutput
argument_list|(
name|b
argument_list|(
literal|0
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|writeString
argument_list|(
name|out
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertOutput
argument_list|(
name|b
argument_list|(
literal|1
argument_list|,
literal|'a'
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|writeString
argument_list|(
name|out
argument_list|,
literal|"coffee4"
argument_list|)
expr_stmt|;
name|assertOutput
argument_list|(
name|b
argument_list|(
literal|7
argument_list|,
literal|'c'
argument_list|,
literal|'o'
argument_list|,
literal|'f'
argument_list|,
literal|'f'
argument_list|,
literal|'e'
argument_list|,
literal|'e'
argument_list|,
literal|'4'
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|assertOutput (final byte[] expect, final ByteArrayOutputStream out)
specifier|private
specifier|static
name|void
name|assertOutput
parameter_list|(
specifier|final
name|byte
index|[]
name|expect
parameter_list|,
specifier|final
name|ByteArrayOutputStream
name|out
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|buf
init|=
name|out
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expect
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expect
index|[
name|i
index|]
argument_list|,
name|buf
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|r (final byte[] buf)
specifier|private
specifier|static
name|InputStream
name|r
parameter_list|(
specifier|final
name|byte
index|[]
name|buf
parameter_list|)
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
argument_list|)
return|;
block|}
DECL|method|b (int a)
specifier|private
specifier|static
name|byte
index|[]
name|b
parameter_list|(
name|int
name|a
parameter_list|)
block|{
return|return
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|a
block|}
return|;
block|}
DECL|method|b (int a, int b)
specifier|private
specifier|static
name|byte
index|[]
name|b
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|a
block|,
operator|(
name|byte
operator|)
name|b
block|}
return|;
block|}
DECL|method|b (int a, int b, int c, int d, int e, int f, int g, int h)
specifier|private
specifier|static
name|byte
index|[]
name|b
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|c
parameter_list|,
name|int
name|d
parameter_list|,
name|int
name|e
parameter_list|,
name|int
name|f
parameter_list|,
name|int
name|g
parameter_list|,
name|int
name|h
parameter_list|)
block|{
return|return
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|a
block|,
operator|(
name|byte
operator|)
name|b
block|,
operator|(
name|byte
operator|)
name|c
block|,
operator|(
name|byte
operator|)
name|d
block|,
comment|//
operator|(
name|byte
operator|)
name|e
block|,
operator|(
name|byte
operator|)
name|f
block|,
operator|(
name|byte
operator|)
name|g
block|,
operator|(
name|byte
operator|)
name|h
block|,     }
return|;
block|}
block|}
end_class

end_unit

