begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|DfsRepositoryDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GroupCollectorTest
specifier|public
class|class
name|GroupCollectorTest
block|{
DECL|field|tr
specifier|private
name|TestRepository
argument_list|<
name|?
argument_list|>
name|tr
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|tr
operator|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
operator|new
name|InMemoryRepository
argument_list|(
operator|new
name|DfsRepositoryDescription
argument_list|(
literal|"repo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitWhoseParentIsUninterestingGetsNewGroup ()
specifier|public
name|void
name|commitWhoseParentIsUninterestingGetsNewGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|branchTip
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|a
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|String
argument_list|>
name|groups
init|=
name|collectGroups
argument_list|(
name|newWalk
argument_list|(
name|a
argument_list|,
name|branchTip
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|groups
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|a
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitWhoseParentIsNewPatchSetGetsParentsGroup ()
specifier|public
name|void
name|commitWhoseParentIsNewPatchSetGetsParentsGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|branchTip
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|a
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|b
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|a
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|String
argument_list|>
name|groups
init|=
name|collectGroups
argument_list|(
name|newWalk
argument_list|(
name|b
argument_list|,
name|branchTip
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|groups
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|a
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|b
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitWhoseParentIsExistingPatchSetGetsParentsGroup ()
specifier|public
name|void
name|commitWhoseParentIsExistingPatchSetGetsParentsGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|branchTip
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|a
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|b
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|a
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|group
init|=
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
decl_stmt|;
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|String
argument_list|>
name|groups
init|=
name|collectGroups
argument_list|(
name|newWalk
argument_list|(
name|b
argument_list|,
name|branchTip
argument_list|)
argument_list|,
name|patchSets
argument_list|()
operator|.
name|put
argument_list|(
name|a
argument_list|,
name|psId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|groups
argument_list|()
operator|.
name|put
argument_list|(
name|psId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|group
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|a
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|b
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitWhoseParentIsExistingPatchSetWithNoGroup ()
specifier|public
name|void
name|commitWhoseParentIsExistingPatchSetWithNoGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|branchTip
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|a
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|b
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|a
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|String
argument_list|>
name|groups
init|=
name|collectGroups
argument_list|(
name|newWalk
argument_list|(
name|b
argument_list|,
name|branchTip
argument_list|)
argument_list|,
name|patchSets
argument_list|()
operator|.
name|put
argument_list|(
name|a
argument_list|,
name|psId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|groups
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|a
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|b
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeCommitAndNewParentsAllGetSameGroup ()
specifier|public
name|void
name|mergeCommitAndNewParentsAllGetSameGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|branchTip
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|a
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|b
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|m
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|a
argument_list|)
operator|.
name|parent
argument_list|(
name|b
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|String
argument_list|>
name|groups
init|=
name|collectGroups
argument_list|(
name|newWalk
argument_list|(
name|m
argument_list|,
name|branchTip
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|groups
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|a
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|b
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|m
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeCommitWhereOneParentHasExistingGroup ()
specifier|public
name|void
name|mergeCommitWhereOneParentHasExistingGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|branchTip
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|a
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|b
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|m
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|a
argument_list|)
operator|.
name|parent
argument_list|(
name|b
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|group
init|=
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
decl_stmt|;
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|String
argument_list|>
name|groups
init|=
name|collectGroups
argument_list|(
name|newWalk
argument_list|(
name|m
argument_list|,
name|branchTip
argument_list|)
argument_list|,
name|patchSets
argument_list|()
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|psId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|groups
argument_list|()
operator|.
name|put
argument_list|(
name|psId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|group
argument_list|)
argument_list|)
decl_stmt|;
comment|// Merge commit and other parent get the existing group.
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|a
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|b
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|m
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeCommitWhereBothParentsHaveDifferentGroups ()
specifier|public
name|void
name|mergeCommitWhereBothParentsHaveDifferentGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|branchTip
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|a
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|b
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|m
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|a
argument_list|)
operator|.
name|parent
argument_list|(
name|b
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|group1
init|=
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
decl_stmt|;
name|String
name|group2
init|=
literal|"1234567812345678123456781234567812345678"
decl_stmt|;
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|String
argument_list|>
name|groups
init|=
name|collectGroups
argument_list|(
name|newWalk
argument_list|(
name|m
argument_list|,
name|branchTip
argument_list|)
argument_list|,
name|patchSets
argument_list|()
operator|.
name|put
argument_list|(
name|a
argument_list|,
name|psId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|psId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|groups
argument_list|()
operator|.
name|put
argument_list|(
name|psId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|group1
argument_list|)
operator|.
name|put
argument_list|(
name|psId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|group2
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|a
argument_list|,
name|group1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|b
argument_list|,
name|group2
argument_list|)
expr_stmt|;
comment|// Merge commit gets joined group of parents.
name|assertThat
argument_list|(
name|groups
operator|.
name|asMap
argument_list|()
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|m
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|group1
argument_list|,
name|group2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeCommitMergesGroupsFromParent ()
specifier|public
name|void
name|mergeCommitMergesGroupsFromParent
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|branchTip
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|a
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|b
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|m
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|a
argument_list|)
operator|.
name|parent
argument_list|(
name|b
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|group1
init|=
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
decl_stmt|;
name|String
name|group2a
init|=
literal|"1234567812345678123456781234567812345678"
decl_stmt|;
name|String
name|group2b
init|=
literal|"ef123456ef123456ef123456ef123456ef123456"
decl_stmt|;
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|String
argument_list|>
name|groups
init|=
name|collectGroups
argument_list|(
name|newWalk
argument_list|(
name|m
argument_list|,
name|branchTip
argument_list|)
argument_list|,
name|patchSets
argument_list|()
operator|.
name|put
argument_list|(
name|a
argument_list|,
name|psId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|psId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|groups
argument_list|()
operator|.
name|put
argument_list|(
name|psId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|group1
argument_list|)
operator|.
name|put
argument_list|(
name|psId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|group2a
argument_list|)
operator|.
name|put
argument_list|(
name|psId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|group2b
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|a
argument_list|,
name|group1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
operator|.
name|asMap
argument_list|()
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|b
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|group2a
argument_list|,
name|group2b
argument_list|)
argument_list|)
expr_stmt|;
comment|// Joined parent groups are split and resorted.
name|assertThat
argument_list|(
name|groups
operator|.
name|asMap
argument_list|()
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|m
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|group1
argument_list|,
name|group2a
argument_list|,
name|group2b
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeCommitWithOneUninterestingParentAndOtherParentIsExisting ()
specifier|public
name|void
name|mergeCommitWithOneUninterestingParentAndOtherParentIsExisting
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|branchTip
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|a
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|m
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|parent
argument_list|(
name|a
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|group
init|=
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
decl_stmt|;
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|String
argument_list|>
name|groups
init|=
name|collectGroups
argument_list|(
name|newWalk
argument_list|(
name|m
argument_list|,
name|branchTip
argument_list|)
argument_list|,
name|patchSets
argument_list|()
operator|.
name|put
argument_list|(
name|a
argument_list|,
name|psId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|groups
argument_list|()
operator|.
name|put
argument_list|(
name|psId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|group
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|a
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|m
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeCommitWithOneUninterestingParentAndOtherParentIsNew ()
specifier|public
name|void
name|mergeCommitWithOneUninterestingParentAndOtherParentIsNew
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|branchTip
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|a
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|m
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|parent
argument_list|(
name|a
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|String
argument_list|>
name|groups
init|=
name|collectGroups
argument_list|(
name|newWalk
argument_list|(
name|m
argument_list|,
name|branchTip
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|groups
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|a
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|m
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multipleMergeCommitsInHistoryAllResolveToSameGroup ()
specifier|public
name|void
name|multipleMergeCommitsInHistoryAllResolveToSameGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|branchTip
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|a
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|b
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|m1
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|b
argument_list|)
operator|.
name|parent
argument_list|(
name|c
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|m2
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|a
argument_list|)
operator|.
name|parent
argument_list|(
name|m1
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|String
argument_list|>
name|groups
init|=
name|collectGroups
argument_list|(
name|newWalk
argument_list|(
name|m2
argument_list|,
name|branchTip
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|groups
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|a
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|b
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|c
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|m1
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|m2
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeCommitWithDuplicatedParentGetsParentsGroup ()
specifier|public
name|void
name|mergeCommitWithDuplicatedParentGetsParentsGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|branchTip
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|a
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|m
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|a
argument_list|)
operator|.
name|parent
argument_list|(
name|a
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|tr
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|getParentCount
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|m
operator|.
name|getParent
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|String
argument_list|>
name|groups
init|=
name|collectGroups
argument_list|(
name|newWalk
argument_list|(
name|m
argument_list|,
name|branchTip
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|groups
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|a
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|m
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeCommitWithOneNewParentAndTwoExistingPatchSets ()
specifier|public
name|void
name|mergeCommitWithOneNewParentAndTwoExistingPatchSets
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|branchTip
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|a
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|b
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|b
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|m
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|a
argument_list|)
operator|.
name|parent
argument_list|(
name|c
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|group1
init|=
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
decl_stmt|;
name|String
name|group2
init|=
literal|"1234567812345678123456781234567812345678"
decl_stmt|;
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|String
argument_list|>
name|groups
init|=
name|collectGroups
argument_list|(
name|newWalk
argument_list|(
name|m
argument_list|,
name|branchTip
argument_list|)
argument_list|,
name|patchSets
argument_list|()
operator|.
name|put
argument_list|(
name|a
argument_list|,
name|psId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|psId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|groups
argument_list|()
operator|.
name|put
argument_list|(
name|psId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|group1
argument_list|)
operator|.
name|put
argument_list|(
name|psId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|group2
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|a
argument_list|,
name|group1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|b
argument_list|,
name|group2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|c
argument_list|,
name|group2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
operator|.
name|asMap
argument_list|()
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|m
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|group1
argument_list|,
name|group2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|collectGroupsForMultipleTipsInParallel ()
specifier|public
name|void
name|collectGroupsForMultipleTipsInParallel
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|branchTip
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|a
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|b
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|a
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|branchTip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|d
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|c
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevWalk
name|rw
init|=
name|newWalk
argument_list|(
name|b
argument_list|,
name|branchTip
argument_list|)
decl_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
comment|// Schema upgrade case: all commits are existing patch sets, but none have
comment|// groups assigned yet.
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|String
argument_list|>
name|groups
init|=
name|collectGroups
argument_list|(
name|rw
argument_list|,
name|patchSets
argument_list|()
operator|.
name|put
argument_list|(
name|branchTip
argument_list|,
name|psId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|a
argument_list|,
name|psId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|psId
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|psId
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|d
argument_list|,
name|psId
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|groups
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|a
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|b
argument_list|,
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|c
argument_list|,
name|c
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsEntry
argument_list|(
name|d
argument_list|,
name|c
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO(dborowitz): Tests for octopus merges.
DECL|method|psId (int c, int p)
specifier|private
specifier|static
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|(
name|int
name|c
parameter_list|,
name|int
name|p
parameter_list|)
block|{
return|return
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|c
argument_list|)
argument_list|,
name|p
argument_list|)
return|;
block|}
DECL|method|newWalk (ObjectId start, ObjectId branchTip)
specifier|private
name|RevWalk
name|newWalk
parameter_list|(
name|ObjectId
name|start
parameter_list|,
name|ObjectId
name|branchTip
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Match RevWalk conditions from ReceiveCommits.
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|tr
operator|.
name|getRepository
argument_list|()
argument_list|)
decl_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markUninteresting
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|branchTip
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rw
return|;
block|}
DECL|method|collectGroups ( RevWalk rw, ImmutableMultimap.Builder<ObjectId, PatchSet.Id> patchSetsBySha, ImmutableListMultimap.Builder<PatchSet.Id, String> groupLookup)
specifier|private
specifier|static
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|String
argument_list|>
name|collectGroups
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|ImmutableMultimap
operator|.
name|Builder
argument_list|<
name|ObjectId
argument_list|,
name|PatchSet
operator|.
name|Id
argument_list|>
name|patchSetsBySha
parameter_list|,
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|groupLookup
parameter_list|)
throws|throws
name|Exception
block|{
name|GroupCollector
name|gc
init|=
operator|new
name|GroupCollector
argument_list|(
name|patchSetsBySha
operator|.
name|build
argument_list|()
argument_list|,
name|groupLookup
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|gc
operator|.
name|visit
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|gc
operator|.
name|getGroups
argument_list|()
return|;
block|}
comment|// Helper methods for constructing various map arguments, to avoid lots of
comment|// type specifications.
DECL|method|patchSets ()
specifier|private
specifier|static
name|ImmutableMultimap
operator|.
name|Builder
argument_list|<
name|ObjectId
argument_list|,
name|PatchSet
operator|.
name|Id
argument_list|>
name|patchSets
parameter_list|()
block|{
return|return
name|ImmutableMultimap
operator|.
name|builder
argument_list|()
return|;
block|}
DECL|method|groups ()
specifier|private
specifier|static
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|groups
parameter_list|()
block|{
return|return
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
return|;
block|}
block|}
end_class

end_unit

