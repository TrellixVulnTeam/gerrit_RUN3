begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeInserter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|RevisionResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|Ignore
DECL|class|AbstractIndexQueryChangesTest
specifier|public
specifier|abstract
class|class
name|AbstractIndexQueryChangesTest
extends|extends
name|AbstractQueryChangesTest
block|{
annotation|@
name|Test
DECL|method|byFileExact ()
specifier|public
name|void
name|byFileExact
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"one"
argument_list|)
operator|.
name|add
argument_list|(
literal|"file1"
argument_list|,
literal|"contents1"
argument_list|)
operator|.
name|add
argument_list|(
literal|"file2"
argument_list|,
literal|"contents2"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"file:file"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change
argument_list|,
name|queryOne
argument_list|(
literal|"file:file1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change
argument_list|,
name|queryOne
argument_list|(
literal|"file:file2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byFileRegex ()
specifier|public
name|void
name|byFileRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|parseBody
argument_list|(
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"one"
argument_list|)
operator|.
name|add
argument_list|(
literal|"file1"
argument_list|,
literal|"contents1"
argument_list|)
operator|.
name|add
argument_list|(
literal|"file2"
argument_list|,
literal|"contents2"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
name|commit
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|insert
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"file:file.*"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change
argument_list|,
name|queryOne
argument_list|(
literal|"file:^file.*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byComment ()
specifier|public
name|void
name|byComment
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|createProject
argument_list|(
literal|"repo"
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins
init|=
name|newChange
argument_list|(
name|repo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|ins
operator|.
name|insert
argument_list|()
decl_stmt|;
name|ChangeControl
name|ctl
init|=
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|change
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|message
operator|=
literal|"toplevel"
expr_stmt|;
name|ReviewInput
operator|.
name|Comment
name|comment
init|=
operator|new
name|ReviewInput
operator|.
name|Comment
argument_list|()
decl_stmt|;
name|comment
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|comment
operator|.
name|message
operator|=
literal|"inline"
expr_stmt|;
name|input
operator|.
name|comments
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|List
argument_list|<
name|ReviewInput
operator|.
name|Comment
argument_list|>
operator|>
name|of
argument_list|(
literal|"Foo.java"
argument_list|,
name|ImmutableList
operator|.
expr|<
name|ReviewInput
operator|.
name|Comment
operator|>
name|of
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|postReview
operator|.
name|apply
argument_list|(
operator|new
name|RevisionResource
argument_list|(
operator|new
name|ChangeResource
argument_list|(
name|ctl
argument_list|)
argument_list|,
name|ins
operator|.
name|getPatchSet
argument_list|()
argument_list|)
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
argument_list|(
literal|"comment:foo"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change
argument_list|,
name|queryOne
argument_list|(
literal|"comment:toplevel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|change
argument_list|,
name|queryOne
argument_list|(
literal|"comment:inline"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

