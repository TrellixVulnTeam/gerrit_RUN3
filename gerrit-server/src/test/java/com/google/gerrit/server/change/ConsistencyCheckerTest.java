begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestChanges
operator|.
name|newChange
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestChanges
operator|.
name|newPatchSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|FixInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ProblemInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lifecycle
operator|.
name|LifecycleManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|InternalUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|FakeAccountByEmailCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|InMemoryDatabase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|InMemoryRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestChanges
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|ConsistencyCheckerTest
specifier|public
class|class
name|ConsistencyCheckerTest
block|{
DECL|field|lifecycle
specifier|private
name|LifecycleManager
name|lifecycle
decl_stmt|;
DECL|field|schemaFactory
specifier|private
name|InMemoryDatabase
name|schemaFactory
decl_stmt|;
DECL|field|db
specifier|private
name|ReviewDb
name|db
decl_stmt|;
DECL|field|repoManager
specifier|private
name|InMemoryRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|checker
specifier|private
name|ConsistencyChecker
name|checker
decl_stmt|;
DECL|field|repo
specifier|private
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
decl_stmt|;
DECL|field|project
specifier|private
name|Project
operator|.
name|NameKey
name|project
decl_stmt|;
DECL|field|userId
specifier|private
name|Account
operator|.
name|Id
name|userId
decl_stmt|;
DECL|field|tip
specifier|private
name|RevCommit
name|tip
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|FakeAccountByEmailCache
name|accountCache
init|=
operator|new
name|FakeAccountByEmailCache
argument_list|()
decl_stmt|;
name|lifecycle
operator|=
operator|new
name|LifecycleManager
argument_list|()
expr_stmt|;
name|schemaFactory
operator|=
name|InMemoryDatabase
operator|.
name|newDatabase
argument_list|(
name|lifecycle
argument_list|)
expr_stmt|;
name|lifecycle
operator|.
name|start
argument_list|()
expr_stmt|;
name|schemaFactory
operator|.
name|create
argument_list|()
expr_stmt|;
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
expr_stmt|;
name|repoManager
operator|=
operator|new
name|InMemoryRepositoryManager
argument_list|()
expr_stmt|;
name|checker
operator|=
operator|new
name|ConsistencyChecker
argument_list|(
name|Providers
operator|.
expr|<
name|ReviewDb
operator|>
name|of
argument_list|(
name|db
argument_list|)
argument_list|,
name|repoManager
argument_list|,
name|Providers
operator|.
expr|<
name|CurrentUser
operator|>
name|of
argument_list|(
operator|new
name|InternalUser
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|,
name|Providers
operator|.
name|of
argument_list|(
operator|new
name|PersonIdent
argument_list|(
literal|"server"
argument_list|,
literal|"noreply@example.com"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PatchSetInfoFactory
argument_list|(
name|repoManager
argument_list|,
name|accountCache
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"repo"
argument_list|)
expr_stmt|;
name|repo
operator|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repoManager
operator|.
name|createRepository
argument_list|(
name|project
argument_list|)
argument_list|)
expr_stmt|;
name|userId
operator|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|accountCache
operator|.
name|putAny
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|insert
argument_list|(
name|singleton
argument_list|(
operator|new
name|Account
argument_list|(
name|userId
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tip
operator|=
name|repo
operator|.
name|branch
argument_list|(
literal|"master"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lifecycle
operator|!=
literal|null
condition|)
block|{
name|lifecycle
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|schemaFactory
operator|!=
literal|null
condition|)
block|{
name|InMemoryDatabase
operator|.
name|drop
argument_list|(
name|schemaFactory
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|validNewChange ()
specifier|public
name|void
name|validNewChange
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|insertPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|insertPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|validMergedChange ()
specifier|public
name|void
name|validMergedChange
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|c
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|insertPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|RevCommit
name|commit2
init|=
name|repo
operator|.
name|branch
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|tip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|PatchSet
name|ps2
init|=
name|newPatchSet
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|commit2
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|singleton
argument_list|(
name|ps2
argument_list|)
argument_list|)
expr_stmt|;
name|repo
operator|.
name|branch
argument_list|(
name|c
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|update
argument_list|(
name|commit2
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|missingOwner ()
specifier|public
name|void
name|missingOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|(
name|project
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|insert
argument_list|(
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|branch
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|tip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|PatchSet
name|ps
init|=
name|newPatchSet
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|commit
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|c
argument_list|,
literal|"Missing change owner: 2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|missingRepo ()
specifier|public
name|void
name|missingRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"otherproject"
argument_list|)
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|insert
argument_list|(
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|insertMissingPatchSet
argument_list|(
name|c
argument_list|,
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|c
argument_list|,
literal|"Destination repository not found: otherproject"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|invalidRevision ()
specifier|public
name|void
name|invalidRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|singleton
argument_list|(
name|newPatchSet
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
literal|"fooooooooooooooooooooooooooooooooooooooo"
argument_list|,
name|userId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|insertPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|c
argument_list|,
literal|"Invalid revision on patch set 1:"
operator|+
literal|" fooooooooooooooooooooooooooooooooooooooo"
argument_list|)
expr_stmt|;
block|}
comment|// No test for ref existing but object missing; InMemoryRepository won't let
comment|// us do such a thing.
annotation|@
name|Test
DECL|method|patchSetObjectAndRefMissing ()
specifier|public
name|void
name|patchSetObjectAndRefMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
name|ps
init|=
name|newPatchSet
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|fromString
argument_list|(
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|c
argument_list|,
literal|"Ref missing: "
operator|+
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|,
literal|"Object missing: patch set 1: deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchSetObjectAndRefMissingWithFix ()
specifier|public
name|void
name|patchSetObjectAndRefMissingWithFix
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
name|ps
init|=
name|newPatchSet
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|fromString
argument_list|(
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|refName
init|=
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProblemInfo
argument_list|>
name|problems
init|=
name|checker
operator|.
name|check
argument_list|(
name|c
argument_list|,
operator|new
name|FixInput
argument_list|()
argument_list|)
operator|.
name|problems
argument_list|()
decl_stmt|;
name|ProblemInfo
name|p
init|=
name|problems
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Ref missing: "
operator|+
name|refName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|status
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchSetRefMissing ()
specifier|public
name|void
name|patchSetRefMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
name|ps
init|=
name|insertPatchSet
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|String
name|refName
init|=
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
decl_stmt|;
name|repo
operator|.
name|update
argument_list|(
literal|"refs/other/foo"
argument_list|,
name|ObjectId
operator|.
name|fromString
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|deleteRef
argument_list|(
name|refName
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|c
argument_list|,
literal|"Ref missing: "
operator|+
name|refName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchSetRefMissingWithFix ()
specifier|public
name|void
name|patchSetRefMissingWithFix
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
name|ps
init|=
name|insertPatchSet
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|String
name|refName
init|=
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
decl_stmt|;
name|repo
operator|.
name|update
argument_list|(
literal|"refs/other/foo"
argument_list|,
name|ObjectId
operator|.
name|fromString
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|deleteRef
argument_list|(
name|refName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ProblemInfo
argument_list|>
name|problems
init|=
name|checker
operator|.
name|check
argument_list|(
name|c
argument_list|,
operator|new
name|FixInput
argument_list|()
argument_list|)
operator|.
name|problems
argument_list|()
decl_stmt|;
name|ProblemInfo
name|p
init|=
name|problems
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Ref missing: "
operator|+
name|refName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ProblemInfo
operator|.
name|Status
operator|.
name|FIXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|outcome
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Repaired patch set ref"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repo
operator|.
name|getRepository
argument_list|()
operator|.
name|getRef
argument_list|(
name|refName
argument_list|)
operator|.
name|getObjectId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchSetObjectAndRefMissingWithDeletingPatchSet ()
specifier|public
name|void
name|patchSetObjectAndRefMissingWithDeletingPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
name|ps1
init|=
name|insertPatchSet
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|PatchSet
name|ps2
init|=
name|insertMissingPatchSet
argument_list|(
name|c
argument_list|,
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
decl_stmt|;
name|FixInput
name|fix
init|=
operator|new
name|FixInput
argument_list|()
decl_stmt|;
name|fix
operator|.
name|deletePatchSetIfCommitMissing
operator|=
literal|true
expr_stmt|;
name|List
argument_list|<
name|ProblemInfo
argument_list|>
name|problems
init|=
name|checker
operator|.
name|check
argument_list|(
name|c
argument_list|,
name|fix
argument_list|)
operator|.
name|problems
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|problems
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ProblemInfo
name|p
init|=
name|problems
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Ref missing: "
operator|+
name|ps2
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|status
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|p
operator|=
name|problems
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Object missing: patch set 2: deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ProblemInfo
operator|.
name|Status
operator|.
name|FIXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|outcome
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Deleted patch set"
argument_list|)
expr_stmt|;
name|c
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|ps1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|ps2
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchSetMultipleObjectsMissingWithDeletingPatchSets ()
specifier|public
name|void
name|patchSetMultipleObjectsMissingWithDeletingPatchSets
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
name|ps1
init|=
name|insertPatchSet
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|PatchSet
name|ps2
init|=
name|insertMissingPatchSet
argument_list|(
name|c
argument_list|,
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
decl_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|PatchSet
name|ps3
init|=
name|insertPatchSet
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|PatchSet
name|ps4
init|=
name|insertMissingPatchSet
argument_list|(
name|c
argument_list|,
literal|"c0ffeeeec0ffeeeec0ffeeeec0ffeeeec0ffeeee"
argument_list|)
decl_stmt|;
name|FixInput
name|fix
init|=
operator|new
name|FixInput
argument_list|()
decl_stmt|;
name|fix
operator|.
name|deletePatchSetIfCommitMissing
operator|=
literal|true
expr_stmt|;
name|List
argument_list|<
name|ProblemInfo
argument_list|>
name|problems
init|=
name|checker
operator|.
name|check
argument_list|(
name|c
argument_list|,
name|fix
argument_list|)
operator|.
name|problems
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|problems
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|ProblemInfo
name|p
init|=
name|problems
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Ref missing: "
operator|+
name|ps4
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|status
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|p
operator|=
name|problems
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Object missing: patch set 4: c0ffeeeec0ffeeeec0ffeeeec0ffeeeec0ffeeee"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ProblemInfo
operator|.
name|Status
operator|.
name|FIXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|outcome
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Deleted patch set"
argument_list|)
expr_stmt|;
name|p
operator|=
name|problems
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Ref missing: "
operator|+
name|ps2
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|status
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|p
operator|=
name|problems
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Object missing: patch set 2: deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ProblemInfo
operator|.
name|Status
operator|.
name|FIXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|outcome
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Deleted patch set"
argument_list|)
expr_stmt|;
name|c
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|ps1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|ps2
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|ps3
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|ps4
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onlyPatchSetObjectMissingWithFix ()
specifier|public
name|void
name|onlyPatchSetObjectMissingWithFix
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
name|ps1
init|=
name|insertMissingPatchSet
argument_list|(
name|c
argument_list|,
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
decl_stmt|;
name|FixInput
name|fix
init|=
operator|new
name|FixInput
argument_list|()
decl_stmt|;
name|fix
operator|.
name|deletePatchSetIfCommitMissing
operator|=
literal|true
expr_stmt|;
name|List
argument_list|<
name|ProblemInfo
argument_list|>
name|problems
init|=
name|checker
operator|.
name|check
argument_list|(
name|c
argument_list|,
name|fix
argument_list|)
operator|.
name|problems
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|problems
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ProblemInfo
name|p
init|=
name|problems
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Ref missing: "
operator|+
name|ps1
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|status
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|p
operator|=
name|problems
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Object missing: patch set 1: deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ProblemInfo
operator|.
name|Status
operator|.
name|FIX_FAILED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|outcome
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Cannot delete patch set; no patch sets would remain"
argument_list|)
expr_stmt|;
name|c
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|ps1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|currentPatchSetMissing ()
specifier|public
name|void
name|currentPatchSetMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|assertProblems
argument_list|(
name|c
argument_list|,
literal|"Current patch set 1 not found"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|duplicatePatchSetRevisions ()
specifier|public
name|void
name|duplicatePatchSetRevisions
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|PatchSet
name|ps1
init|=
name|insertPatchSet
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
name|ps1
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|PatchSet
name|ps2
init|=
name|insertMissingPatchSet
argument_list|(
name|c
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|updatePatchSetRef
argument_list|(
name|ps2
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|c
argument_list|,
literal|"Multiple patch sets pointing to "
operator|+
name|rev
operator|+
literal|": [1, 2]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|missingDestRef ()
specifier|public
name|void
name|missingDestRef
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ref
init|=
literal|"refs/heads/master"
decl_stmt|;
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|getRepository
argument_list|()
operator|.
name|updateRef
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|delete
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|Change
name|c
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|PatchSet
name|ps
init|=
name|newPatchSet
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|commit
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|updatePatchSetRef
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|c
argument_list|,
literal|"Destination ref not found (may be new branch): "
operator|+
name|ref
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergedChangeIsNotMerged ()
specifier|public
name|void
name|mergedChangeIsNotMerged
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|c
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|PatchSet
name|ps
init|=
name|insertPatchSet
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertProblems
argument_list|(
name|c
argument_list|,
literal|"Patch set 1 ("
operator|+
name|rev
operator|+
literal|") is not merged into destination ref"
operator|+
literal|" refs/heads/master ("
operator|+
name|tip
operator|.
name|name
argument_list|()
operator|+
literal|"), but change status is MERGED"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newChangeIsMerged ()
specifier|public
name|void
name|newChangeIsMerged
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|branch
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|tip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|PatchSet
name|ps
init|=
name|newPatchSet
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|commit
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|repo
operator|.
name|branch
argument_list|(
name|c
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|update
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|c
argument_list|,
literal|"Patch set 1 ("
operator|+
name|commit
operator|.
name|name
argument_list|()
operator|+
literal|") is merged into destination ref"
operator|+
literal|" refs/heads/master ("
operator|+
name|commit
operator|.
name|name
argument_list|()
operator|+
literal|"), but change status is NEW"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newChangeIsMergedWithFix ()
specifier|public
name|void
name|newChangeIsMergedWithFix
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|insertChange
argument_list|()
decl_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|branch
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|tip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|PatchSet
name|ps
init|=
name|newPatchSet
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|commit
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|repo
operator|.
name|branch
argument_list|(
name|c
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|update
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ProblemInfo
argument_list|>
name|problems
init|=
name|checker
operator|.
name|check
argument_list|(
name|c
argument_list|,
operator|new
name|FixInput
argument_list|()
argument_list|)
operator|.
name|problems
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|problems
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ProblemInfo
name|p
init|=
name|problems
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Patch set 1 ("
operator|+
name|commit
operator|.
name|name
argument_list|()
operator|+
literal|") is merged into destination ref"
operator|+
literal|" refs/heads/master ("
operator|+
name|commit
operator|.
name|name
argument_list|()
operator|+
literal|"), but change status is NEW"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ProblemInfo
operator|.
name|Status
operator|.
name|FIXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|outcome
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Marked change as merged"
argument_list|)
expr_stmt|;
name|c
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|assertProblems
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|insertChange ()
specifier|private
name|Change
name|insertChange
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|(
name|project
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|insert
argument_list|(
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
DECL|method|incrementPatchSet (Change c)
specifier|private
name|void
name|incrementPatchSet
parameter_list|(
name|Change
name|c
parameter_list|)
throws|throws
name|Exception
block|{
name|TestChanges
operator|.
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|upsert
argument_list|(
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|insertPatchSet (Change c)
specifier|private
name|PatchSet
name|insertPatchSet
parameter_list|(
name|Change
name|c
parameter_list|)
throws|throws
name|Exception
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|upsert
argument_list|(
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|RevCommit
name|commit
init|=
name|repo
operator|.
name|branch
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|tip
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|PatchSet
name|ps
init|=
name|newPatchSet
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|commit
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|updatePatchSetRef
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ps
return|;
block|}
DECL|method|insertMissingPatchSet (Change c, String id)
specifier|private
name|PatchSet
name|insertMissingPatchSet
parameter_list|(
name|Change
name|c
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|PatchSet
name|ps
init|=
name|newPatchSet
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|fromString
argument_list|(
name|id
argument_list|)
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ps
return|;
block|}
DECL|method|updatePatchSetRef (PatchSet ps)
specifier|private
name|void
name|updatePatchSetRef
parameter_list|(
name|PatchSet
name|ps
parameter_list|)
throws|throws
name|Exception
block|{
name|repo
operator|.
name|update
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|fromString
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteRef (String refName)
specifier|private
name|void
name|deleteRef
parameter_list|(
name|String
name|refName
parameter_list|)
throws|throws
name|Exception
block|{
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|getRepository
argument_list|()
operator|.
name|updateRef
argument_list|(
name|refName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|delete
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
DECL|method|assertProblems (Change c, String... expected)
specifier|private
name|void
name|assertProblems
parameter_list|(
name|Change
name|c
parameter_list|,
name|String
modifier|...
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|checker
operator|.
name|check
argument_list|(
name|c
argument_list|)
operator|.
name|problems
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|ProblemInfo
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|ProblemInfo
name|in
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|in
operator|.
name|status
operator|==
literal|null
argument_list|,
literal|"Status is not null: "
operator|+
name|in
operator|.
name|message
argument_list|)
expr_stmt|;
return|return
name|in
operator|.
name|message
return|;
block|}
block|}
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

