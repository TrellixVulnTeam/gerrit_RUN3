begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
operator|.
name|roundToSecond
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeBundle
operator|.
name|Source
operator|.
name|NOTE_DB
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeBundle
operator|.
name|Source
operator|.
name|REVIEW_DB
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|LabelId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestChanges
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|TestTimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|KeyUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|protobuf
operator|.
name|CodecFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|protobuf
operator|.
name|ProtobufCodec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|StandardKeyEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_class
DECL|class|ChangeBundleTest
specifier|public
class|class
name|ChangeBundleTest
block|{
static|static
block|{
name|KeyUtil
operator|.
name|setEncoderImpl
argument_list|(
operator|new
name|StandardKeyEncoder
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|field|CHANGE_CODEC
specifier|private
specifier|static
specifier|final
name|ProtobufCodec
argument_list|<
name|Change
argument_list|>
name|CHANGE_CODEC
init|=
name|CodecFactory
operator|.
name|encoder
argument_list|(
name|Change
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CHANGE_MESSAGE_CODEC
specifier|private
specifier|static
specifier|final
name|ProtobufCodec
argument_list|<
name|ChangeMessage
argument_list|>
name|CHANGE_MESSAGE_CODEC
init|=
name|CodecFactory
operator|.
name|encoder
argument_list|(
name|ChangeMessage
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATCH_SET_CODEC
specifier|private
specifier|static
specifier|final
name|ProtobufCodec
argument_list|<
name|PatchSet
argument_list|>
name|PATCH_SET_CODEC
init|=
name|CodecFactory
operator|.
name|encoder
argument_list|(
name|PatchSet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ProtobufCodec
argument_list|<
name|PatchSetApproval
argument_list|>
DECL|field|PATCH_SET_APPROVAL_CODEC
name|PATCH_SET_APPROVAL_CODEC
init|=
name|CodecFactory
operator|.
name|encoder
argument_list|(
name|PatchSetApproval
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ProtobufCodec
argument_list|<
name|PatchLineComment
argument_list|>
DECL|field|PATCH_LINE_COMMENT_CODEC
name|PATCH_LINE_COMMENT_CODEC
init|=
name|CodecFactory
operator|.
name|encoder
argument_list|(
name|PatchLineComment
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|systemTimeZoneProperty
specifier|private
name|String
name|systemTimeZoneProperty
decl_stmt|;
DECL|field|systemTimeZone
specifier|private
name|TimeZone
name|systemTimeZone
decl_stmt|;
DECL|field|project
specifier|private
name|Project
operator|.
name|NameKey
name|project
decl_stmt|;
DECL|field|accountId
specifier|private
name|Account
operator|.
name|Id
name|accountId
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|String
name|tz
init|=
literal|"US/Eastern"
decl_stmt|;
name|systemTimeZoneProperty
operator|=
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.timezone"
argument_list|,
name|tz
argument_list|)
expr_stmt|;
name|systemTimeZone
operator|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
expr_stmt|;
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|maxMs
init|=
name|ChangeRebuilderImpl
operator|.
name|MAX_WINDOW_MS
decl_stmt|;
name|assertThat
argument_list|(
name|maxMs
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
name|maxMs
operator|*
literal|2
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|project
operator|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project"
argument_list|)
expr_stmt|;
name|accountId
operator|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.timezone"
argument_list|,
name|systemTimeZoneProperty
argument_list|)
expr_stmt|;
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|systemTimeZone
argument_list|)
expr_stmt|;
block|}
DECL|method|superWindowResolution ()
specifier|private
name|void
name|superWindowResolution
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|setClockStep
argument_list|(
name|ChangeRebuilderImpl
operator|.
name|MAX_WINDOW_MS
operator|*
literal|2
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|TimeUtil
operator|.
name|nowTs
argument_list|()
expr_stmt|;
block|}
DECL|method|subWindowResolution ()
specifier|private
name|void
name|subWindowResolution
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|setClockStep
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|TimeUtil
operator|.
name|nowTs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffChangesDifferentIds ()
specifier|public
name|void
name|diffChangesDifferentIds
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c1
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|int
name|id1
init|=
name|c1
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|Change
name|c2
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|int
name|id2
init|=
name|c2
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c1
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c2
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"changeId differs for Changes: {"
operator|+
name|id1
operator|+
literal|"} != {"
operator|+
name|id2
operator|+
literal|"}"
argument_list|,
literal|"createdOn differs for Changes:"
operator|+
literal|" {2009-09-30 17:00:00.0} != {2009-09-30 17:00:06.0}"
argument_list|,
literal|"lastUpdatedOn differs for Changes:"
operator|+
literal|" {2009-09-30 17:00:00.0} != {2009-09-30 17:00:06.0}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffChangesSameId ()
specifier|public
name|void
name|diffChangesSameId
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c1
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project"
argument_list|)
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|c2
init|=
name|clone
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c1
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c2
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|assertNoDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|c2
operator|.
name|setTopic
argument_list|(
literal|"topic"
argument_list|)
expr_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"topic differs for Change.Id "
operator|+
name|c1
operator|.
name|getId
argument_list|()
operator|+
literal|": {null} != {topic}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffChangesMixedSourcesAllowsSlop ()
specifier|public
name|void
name|diffChangesMixedSourcesAllowsSlop
parameter_list|()
throws|throws
name|Exception
block|{
name|subWindowResolution
argument_list|()
expr_stmt|;
name|Change
name|c1
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project"
argument_list|)
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|c2
init|=
name|clone
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|c2
operator|.
name|setCreatedOn
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
name|c2
operator|.
name|setLastUpdatedOn
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
comment|// Both are ReviewDb, exact timestamp match is required.
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c1
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c2
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"createdOn differs for Change.Id "
operator|+
name|c1
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
literal|" {2009-09-30 17:00:01.0} != {2009-09-30 17:00:02.0}"
argument_list|,
literal|"lastUpdatedOn differs for Change.Id "
operator|+
name|c1
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
literal|" {2009-09-30 17:00:01.0} != {2009-09-30 17:00:03.0}"
argument_list|)
expr_stmt|;
comment|// One NoteDb, slop is allowed.
name|b1
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c1
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|NOTE_DB
argument_list|)
expr_stmt|;
name|b2
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c2
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
expr_stmt|;
name|assertNoDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|assertNoDiffs
argument_list|(
name|b2
argument_list|,
name|b1
argument_list|)
expr_stmt|;
comment|// But not too much slop.
name|superWindowResolution
argument_list|()
expr_stmt|;
name|Change
name|c3
init|=
name|clone
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|c3
operator|.
name|setLastUpdatedOn
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
name|b1
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c1
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|NOTE_DB
argument_list|)
expr_stmt|;
name|ChangeBundle
name|b3
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c3
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"lastUpdatedOn differs for Change.Id "
operator|+
name|c1
operator|.
name|getId
argument_list|()
operator|+
literal|" in NoteDb vs. ReviewDb:"
operator|+
literal|" {2009-09-30 17:00:01.0} != {2009-09-30 17:00:10.0}"
decl_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b3
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertDiffs
argument_list|(
name|b3
argument_list|,
name|b1
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffChangeMessageKeySets ()
specifier|public
name|void
name|diffChangeMessageKeySets
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|int
name|id
init|=
name|c
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|ChangeMessage
name|cm1
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
literal|"uuid1"
argument_list|)
argument_list|,
name|accountId
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeMessage
name|cm2
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
literal|"uuid2"
argument_list|)
argument_list|,
name|accountId
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm1
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm2
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"ChangeMessage.Key sets differ:"
operator|+
literal|" ["
operator|+
name|id
operator|+
literal|",uuid1] only in A; ["
operator|+
name|id
operator|+
literal|",uuid2] only in B"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffChangeMessages ()
specifier|public
name|void
name|diffChangeMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|ChangeMessage
name|cm1
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
literal|"uuid"
argument_list|)
argument_list|,
name|accountId
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|cm1
operator|.
name|setMessage
argument_list|(
literal|"message 1"
argument_list|)
expr_stmt|;
name|ChangeMessage
name|cm2
init|=
name|clone
argument_list|(
name|cm1
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm1
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm2
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|assertNoDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|cm2
operator|.
name|setMessage
argument_list|(
literal|"message 2"
argument_list|)
expr_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"message differs for ChangeMessage.Key "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|+
literal|",uuid:"
operator|+
literal|" {message 1} != {message 2}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffChangeMessagesIgnoresUuids ()
specifier|public
name|void
name|diffChangeMessagesIgnoresUuids
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|int
name|id
init|=
name|c
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|ChangeMessage
name|cm1
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
literal|"uuid1"
argument_list|)
argument_list|,
name|accountId
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|cm1
operator|.
name|setMessage
argument_list|(
literal|"message 1"
argument_list|)
expr_stmt|;
name|ChangeMessage
name|cm2
init|=
name|clone
argument_list|(
name|cm1
argument_list|)
decl_stmt|;
name|cm2
operator|.
name|getKey
argument_list|()
operator|.
name|set
argument_list|(
literal|"uuid2"
argument_list|)
expr_stmt|;
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm1
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm2
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
comment|// Both are ReviewDb, exact UUID match is required.
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"ChangeMessage.Key sets differ:"
operator|+
literal|" ["
operator|+
name|id
operator|+
literal|",uuid1] only in A; ["
operator|+
name|id
operator|+
literal|",uuid2] only in B"
argument_list|)
expr_stmt|;
comment|// One NoteDb, UUIDs are ignored.
name|b1
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm1
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
expr_stmt|;
name|b2
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm2
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|NOTE_DB
argument_list|)
expr_stmt|;
name|assertNoDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffChangeMessagesWithDifferentCounts ()
specifier|public
name|void
name|diffChangeMessagesWithDifferentCounts
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|int
name|id
init|=
name|c
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|ChangeMessage
name|cm1
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
literal|"uuid1"
argument_list|)
argument_list|,
name|accountId
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|cm1
operator|.
name|setMessage
argument_list|(
literal|"message 1"
argument_list|)
expr_stmt|;
name|ChangeMessage
name|cm2
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
literal|"uuid2"
argument_list|)
argument_list|,
name|accountId
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|cm1
operator|.
name|setMessage
argument_list|(
literal|"message 2"
argument_list|)
expr_stmt|;
comment|// Both ReviewDb: Uses same keySet diff as other types.
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm1
argument_list|,
name|cm2
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm1
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"ChangeMessage.Key sets differ: ["
operator|+
name|id
operator|+
literal|",uuid2] only in A; [] only in B"
argument_list|)
expr_stmt|;
comment|// One NoteDb: UUIDs in keys can't be used for comparison, just diff counts.
name|b1
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm1
argument_list|,
name|cm2
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
expr_stmt|;
name|b2
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm1
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|NOTE_DB
argument_list|)
expr_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"Differing numbers of ChangeMessages for Change.Id "
operator|+
name|id
operator|+
literal|":\n"
operator|+
literal|"ChangeMessage{key="
operator|+
name|id
operator|+
literal|",uuid1, author=100,"
operator|+
literal|" writtenOn=2009-09-30 17:00:06.0, patchset="
operator|+
name|id
operator|+
literal|",1,"
operator|+
literal|" message=[message 2]}\n"
operator|+
literal|"ChangeMessage{key="
operator|+
name|id
operator|+
literal|",uuid2, author=100,"
operator|+
literal|" writtenOn=2009-09-30 17:00:12.0, patchset="
operator|+
name|id
operator|+
literal|",1,"
operator|+
literal|" message=[null]}\n"
operator|+
literal|"--- vs. ---\n"
operator|+
literal|"ChangeMessage{key="
operator|+
name|id
operator|+
literal|",uuid1, author=100,"
operator|+
literal|" writtenOn=2009-09-30 17:00:06.0, patchset="
operator|+
name|id
operator|+
literal|",1,"
operator|+
literal|" message=[message 2]}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffChangeMessagesMixedSourcesWithDifferences ()
specifier|public
name|void
name|diffChangeMessagesMixedSourcesWithDifferences
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|int
name|id
init|=
name|c
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|ChangeMessage
name|cm1
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
literal|"uuid1"
argument_list|)
argument_list|,
name|accountId
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|cm1
operator|.
name|setMessage
argument_list|(
literal|"message 1"
argument_list|)
expr_stmt|;
name|ChangeMessage
name|cm2
init|=
name|clone
argument_list|(
name|cm1
argument_list|)
decl_stmt|;
name|cm2
operator|.
name|setMessage
argument_list|(
literal|"message 2"
argument_list|)
expr_stmt|;
name|ChangeMessage
name|cm3
init|=
name|clone
argument_list|(
name|cm1
argument_list|)
decl_stmt|;
name|cm3
operator|.
name|getKey
argument_list|()
operator|.
name|set
argument_list|(
literal|"uuid2"
argument_list|)
expr_stmt|;
comment|// Differs only in UUID.
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm1
argument_list|,
name|cm3
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm2
argument_list|,
name|cm3
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|NOTE_DB
argument_list|)
decl_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"message differs for ChangeMessage on "
operator|+
name|id
operator|+
literal|" at index 1:"
operator|+
literal|" {message 1} != {message 2}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffChangeMessagesMixedSourcesAllowsSlop ()
specifier|public
name|void
name|diffChangeMessagesMixedSourcesAllowsSlop
parameter_list|()
throws|throws
name|Exception
block|{
name|subWindowResolution
argument_list|()
expr_stmt|;
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|ChangeMessage
name|cm1
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
literal|"uuid1"
argument_list|)
argument_list|,
name|accountId
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeMessage
name|cm2
init|=
name|clone
argument_list|(
name|cm1
argument_list|)
decl_stmt|;
name|cm2
operator|.
name|setWrittenOn
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
comment|// Both are ReviewDb, exact timestamp match is required.
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm1
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm2
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"writtenOn differs for ChangeMessage.Key "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|+
literal|",uuid1:"
operator|+
literal|" {2009-09-30 17:00:02.0} != {2009-09-30 17:00:03.0}"
argument_list|)
expr_stmt|;
comment|// One NoteDb, slop is allowed.
name|b1
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm1
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|NOTE_DB
argument_list|)
expr_stmt|;
name|b2
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm2
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
expr_stmt|;
name|assertNoDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|assertNoDiffs
argument_list|(
name|b2
argument_list|,
name|b1
argument_list|)
expr_stmt|;
comment|// But not too much slop.
name|superWindowResolution
argument_list|()
expr_stmt|;
name|ChangeMessage
name|cm3
init|=
name|clone
argument_list|(
name|cm1
argument_list|)
decl_stmt|;
name|cm3
operator|.
name|setWrittenOn
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
name|b1
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm1
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|NOTE_DB
argument_list|)
expr_stmt|;
name|ChangeBundle
name|b3
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|(
name|cm3
argument_list|)
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"writtenOn differs for ChangeMessage on "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|+
literal|" at index 0 in NoteDb vs. ReviewDb:"
operator|+
literal|" {2009-09-30 17:00:02.0} != {2009-09-30 17:00:10.0}"
decl_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b3
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertDiffs
argument_list|(
name|b3
argument_list|,
name|b1
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffPatchSetIdSets ()
specifier|public
name|void
name|diffPatchSetIdSets
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|TestChanges
operator|.
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|PatchSet
name|ps1
init|=
operator|new
name|PatchSet
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ps1
operator|.
name|setRevision
argument_list|(
operator|new
name|RevId
argument_list|(
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
argument_list|)
expr_stmt|;
name|ps1
operator|.
name|setUploader
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|ps1
operator|.
name|setCreatedOn
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
name|PatchSet
name|ps2
init|=
operator|new
name|PatchSet
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|ps2
operator|.
name|setRevision
argument_list|(
operator|new
name|RevId
argument_list|(
literal|"badc0feebadc0feebadc0feebadc0feebadc0fee"
argument_list|)
argument_list|)
expr_stmt|;
name|ps2
operator|.
name|setUploader
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|ps2
operator|.
name|setCreatedOn
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|(
name|ps2
argument_list|)
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|(
name|ps1
argument_list|,
name|ps2
argument_list|)
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"PatchSet.Id sets differ:"
operator|+
literal|" [] only in A; ["
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|+
literal|",1] only in B"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffPatchSets ()
specifier|public
name|void
name|diffPatchSets
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|PatchSet
name|ps1
init|=
operator|new
name|PatchSet
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|ps1
operator|.
name|setRevision
argument_list|(
operator|new
name|RevId
argument_list|(
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
argument_list|)
expr_stmt|;
name|ps1
operator|.
name|setUploader
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|ps1
operator|.
name|setCreatedOn
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
name|PatchSet
name|ps2
init|=
name|clone
argument_list|(
name|ps1
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|(
name|ps1
argument_list|)
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|(
name|ps2
argument_list|)
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|assertNoDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|ps2
operator|.
name|setRevision
argument_list|(
operator|new
name|RevId
argument_list|(
literal|"badc0feebadc0feebadc0feebadc0feebadc0fee"
argument_list|)
argument_list|)
expr_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"revision differs for PatchSet.Id "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|+
literal|",1:"
operator|+
literal|" {RevId{deadbeefdeadbeefdeadbeefdeadbeefdeadbeef}}"
operator|+
literal|" != {RevId{badc0feebadc0feebadc0feebadc0feebadc0fee}}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffPatchSetsMixedSourcesAllowsSlop ()
specifier|public
name|void
name|diffPatchSetsMixedSourcesAllowsSlop
parameter_list|()
throws|throws
name|Exception
block|{
name|subWindowResolution
argument_list|()
expr_stmt|;
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|PatchSet
name|ps1
init|=
operator|new
name|PatchSet
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|ps1
operator|.
name|setRevision
argument_list|(
operator|new
name|RevId
argument_list|(
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
argument_list|)
expr_stmt|;
name|ps1
operator|.
name|setUploader
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|ps1
operator|.
name|setCreatedOn
argument_list|(
name|roundToSecond
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PatchSet
name|ps2
init|=
name|clone
argument_list|(
name|ps1
argument_list|)
decl_stmt|;
name|ps2
operator|.
name|setCreatedOn
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
comment|// Both are ReviewDb, exact timestamp match is required.
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|(
name|ps1
argument_list|)
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|(
name|ps2
argument_list|)
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"createdOn differs for PatchSet.Id "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|+
literal|",1:"
operator|+
literal|" {2009-09-30 17:00:02.0} != {2009-09-30 17:00:03.0}"
argument_list|)
expr_stmt|;
comment|// One NoteDb, slop is allowed.
name|b1
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|(
name|ps1
argument_list|)
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|NOTE_DB
argument_list|)
expr_stmt|;
name|b2
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|(
name|ps2
argument_list|)
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
expr_stmt|;
name|assertNoDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
comment|// But not too much slop.
name|superWindowResolution
argument_list|()
expr_stmt|;
name|PatchSet
name|ps3
init|=
name|clone
argument_list|(
name|ps1
argument_list|)
decl_stmt|;
name|ps3
operator|.
name|setCreatedOn
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
name|b1
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|(
name|ps1
argument_list|)
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|NOTE_DB
argument_list|)
expr_stmt|;
name|ChangeBundle
name|b3
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|(
name|ps3
argument_list|)
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"createdOn differs for PatchSet.Id "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|+
literal|",1 in NoteDb vs. ReviewDb:"
operator|+
literal|" {2009-09-30 17:00:02.0} != {2009-09-30 17:00:10.0}"
decl_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b3
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertDiffs
argument_list|(
name|b3
argument_list|,
name|b1
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffPatchSetApprovalKeySets ()
specifier|public
name|void
name|diffPatchSetApprovalKeySets
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|int
name|id
init|=
name|c
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|PatchSetApproval
name|a1
init|=
operator|new
name|PatchSetApproval
argument_list|(
operator|new
name|PatchSetApproval
operator|.
name|Key
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|accountId
argument_list|,
operator|new
name|LabelId
argument_list|(
literal|"Code-Review"
argument_list|)
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|a2
init|=
operator|new
name|PatchSetApproval
argument_list|(
operator|new
name|PatchSetApproval
operator|.
name|Key
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|accountId
argument_list|,
operator|new
name|LabelId
argument_list|(
literal|"Verified"
argument_list|)
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|(
name|a1
argument_list|)
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|(
name|a2
argument_list|)
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"PatchSetApproval.Key sets differ:"
operator|+
literal|" ["
operator|+
name|id
operator|+
literal|"%2C1,100,Code-Review] only in A;"
operator|+
literal|" ["
operator|+
name|id
operator|+
literal|"%2C1,100,Verified] only in B"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffPatchSetApprovals ()
specifier|public
name|void
name|diffPatchSetApprovals
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|a1
init|=
operator|new
name|PatchSetApproval
argument_list|(
operator|new
name|PatchSetApproval
operator|.
name|Key
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|accountId
argument_list|,
operator|new
name|LabelId
argument_list|(
literal|"Code-Review"
argument_list|)
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|a2
init|=
name|clone
argument_list|(
name|a1
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|(
name|a1
argument_list|)
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|(
name|a2
argument_list|)
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|assertNoDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|a2
operator|.
name|setValue
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"value differs for PatchSetApproval.Key "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|+
literal|"%2C1,100,Code-Review: {1} != {-1}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffPatchSetApprovalsMixedSourcesAllowsSlop ()
specifier|public
name|void
name|diffPatchSetApprovalsMixedSourcesAllowsSlop
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|subWindowResolution
argument_list|()
expr_stmt|;
name|PatchSetApproval
name|a1
init|=
operator|new
name|PatchSetApproval
argument_list|(
operator|new
name|PatchSetApproval
operator|.
name|Key
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|accountId
argument_list|,
operator|new
name|LabelId
argument_list|(
literal|"Code-Review"
argument_list|)
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|roundToSecond
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|a2
init|=
name|clone
argument_list|(
name|a1
argument_list|)
decl_stmt|;
name|a2
operator|.
name|setGranted
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
comment|// Both are ReviewDb, exact timestamp match is required.
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|(
name|a1
argument_list|)
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|(
name|a2
argument_list|)
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"granted differs for PatchSetApproval.Key "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|+
literal|"%2C1,100,Code-Review:"
operator|+
literal|" {2009-09-30 17:00:07.0} != {2009-09-30 17:00:08.0}"
argument_list|)
expr_stmt|;
comment|// One NoteDb, slop is allowed.
name|b1
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|(
name|a1
argument_list|)
argument_list|,
name|comments
argument_list|()
argument_list|,
name|NOTE_DB
argument_list|)
expr_stmt|;
name|b2
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|(
name|a2
argument_list|)
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
expr_stmt|;
name|assertNoDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
comment|// But not too much slop.
name|superWindowResolution
argument_list|()
expr_stmt|;
name|PatchSetApproval
name|a3
init|=
name|clone
argument_list|(
name|a1
argument_list|)
decl_stmt|;
name|a3
operator|.
name|setGranted
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
name|b1
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|(
name|a1
argument_list|)
argument_list|,
name|comments
argument_list|()
argument_list|,
name|NOTE_DB
argument_list|)
expr_stmt|;
name|ChangeBundle
name|b3
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|(
name|a3
argument_list|)
argument_list|,
name|comments
argument_list|()
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"granted differs for PatchSetApproval.Key "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|+
literal|"%2C1,100,Code-Review in NoteDb vs. ReviewDb:"
operator|+
literal|" {2009-09-30 17:00:07.0} != {2009-09-30 17:00:15.0}"
decl_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b3
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertDiffs
argument_list|(
name|b3
argument_list|,
name|b1
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffPatchLineCommentKeySets ()
specifier|public
name|void
name|diffPatchLineCommentKeySets
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|int
name|id
init|=
name|c
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|PatchLineComment
name|c1
init|=
operator|new
name|PatchLineComment
argument_list|(
operator|new
name|PatchLineComment
operator|.
name|Key
argument_list|(
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
literal|"filename1"
argument_list|)
argument_list|,
literal|"uuid1"
argument_list|)
argument_list|,
literal|5
argument_list|,
name|accountId
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|PatchLineComment
name|c2
init|=
operator|new
name|PatchLineComment
argument_list|(
operator|new
name|PatchLineComment
operator|.
name|Key
argument_list|(
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
literal|"filename2"
argument_list|)
argument_list|,
literal|"uuid2"
argument_list|)
argument_list|,
literal|5
argument_list|,
name|accountId
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|(
name|c1
argument_list|)
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|(
name|c2
argument_list|)
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"PatchLineComment.Key sets differ:"
operator|+
literal|" ["
operator|+
name|id
operator|+
literal|",1,filename1,uuid1] only in A;"
operator|+
literal|" ["
operator|+
name|id
operator|+
literal|",1,filename2,uuid2] only in B"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffPatchLineComments ()
specifier|public
name|void
name|diffPatchLineComments
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|PatchLineComment
name|c1
init|=
operator|new
name|PatchLineComment
argument_list|(
operator|new
name|PatchLineComment
operator|.
name|Key
argument_list|(
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
literal|"filename"
argument_list|)
argument_list|,
literal|"uuid"
argument_list|)
argument_list|,
literal|5
argument_list|,
name|accountId
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|PatchLineComment
name|c2
init|=
name|clone
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|(
name|c1
argument_list|)
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|(
name|c2
argument_list|)
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|assertNoDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|c2
operator|.
name|setStatus
argument_list|(
name|PatchLineComment
operator|.
name|Status
operator|.
name|PUBLISHED
argument_list|)
expr_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"status differs for PatchLineComment.Key "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|+
literal|",1,filename,uuid: {d} != {P}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffPatchLineCommentsMixedSourcesAllowsSlop ()
specifier|public
name|void
name|diffPatchLineCommentsMixedSourcesAllowsSlop
parameter_list|()
throws|throws
name|Exception
block|{
name|subWindowResolution
argument_list|()
expr_stmt|;
name|Change
name|c
init|=
name|TestChanges
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|PatchLineComment
name|c1
init|=
operator|new
name|PatchLineComment
argument_list|(
operator|new
name|PatchLineComment
operator|.
name|Key
argument_list|(
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
literal|"filename"
argument_list|)
argument_list|,
literal|"uuid"
argument_list|)
argument_list|,
literal|5
argument_list|,
name|accountId
argument_list|,
literal|null
argument_list|,
name|roundToSecond
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|PatchLineComment
name|c2
init|=
name|clone
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|c2
operator|.
name|setWrittenOn
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
comment|// Both are ReviewDb, exact timestamp match is required.
name|ChangeBundle
name|b1
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|(
name|c1
argument_list|)
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|ChangeBundle
name|b2
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|(
name|c2
argument_list|)
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
literal|"writtenOn differs for PatchLineComment.Key "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|+
literal|",1,filename,uuid:"
operator|+
literal|" {2009-09-30 17:00:02.0} != {2009-09-30 17:00:03.0}"
argument_list|)
expr_stmt|;
comment|// One NoteDb, slop is allowed.
name|b1
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|(
name|c1
argument_list|)
argument_list|,
name|NOTE_DB
argument_list|)
expr_stmt|;
name|b2
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|(
name|c2
argument_list|)
argument_list|,
name|REVIEW_DB
argument_list|)
expr_stmt|;
name|assertNoDiffs
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
comment|// But not too much slop.
name|superWindowResolution
argument_list|()
expr_stmt|;
name|PatchLineComment
name|c3
init|=
name|clone
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|c3
operator|.
name|setWrittenOn
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
name|b1
operator|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|(
name|c1
argument_list|)
argument_list|,
name|NOTE_DB
argument_list|)
expr_stmt|;
name|ChangeBundle
name|b3
init|=
operator|new
name|ChangeBundle
argument_list|(
name|c
argument_list|,
name|messages
argument_list|()
argument_list|,
name|patchSets
argument_list|()
argument_list|,
name|approvals
argument_list|()
argument_list|,
name|comments
argument_list|(
name|c3
argument_list|)
argument_list|,
name|REVIEW_DB
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"writtenOn differs for PatchLineComment.Key "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|+
literal|",1,filename,uuid in NoteDb vs. ReviewDb:"
operator|+
literal|" {2009-09-30 17:00:02.0} != {2009-09-30 17:00:10.0}"
decl_stmt|;
name|assertDiffs
argument_list|(
name|b1
argument_list|,
name|b3
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertDiffs
argument_list|(
name|b3
argument_list|,
name|b1
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoDiffs (ChangeBundle a, ChangeBundle b)
specifier|private
specifier|static
name|void
name|assertNoDiffs
parameter_list|(
name|ChangeBundle
name|a
parameter_list|,
name|ChangeBundle
name|b
parameter_list|)
block|{
name|assertThat
argument_list|(
name|a
operator|.
name|differencesFrom
argument_list|(
name|b
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|b
operator|.
name|differencesFrom
argument_list|(
name|a
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|assertDiffs (ChangeBundle a, ChangeBundle b, String first, String... rest)
specifier|private
specifier|static
name|void
name|assertDiffs
parameter_list|(
name|ChangeBundle
name|a
parameter_list|,
name|ChangeBundle
name|b
parameter_list|,
name|String
name|first
parameter_list|,
name|String
modifier|...
name|rest
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|actual
init|=
name|a
operator|.
name|differencesFrom
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|actual
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|rest
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// This error message is much easier to read.
name|assertThat
argument_list|(
name|actual
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|first
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
operator|+
name|rest
operator|.
name|length
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|expected
argument_list|,
name|rest
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|a
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|messages (ChangeMessage... ents)
specifier|private
specifier|static
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|messages
parameter_list|(
name|ChangeMessage
modifier|...
name|ents
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|ents
argument_list|)
return|;
block|}
DECL|method|patchSets (PatchSet... ents)
specifier|private
specifier|static
name|List
argument_list|<
name|PatchSet
argument_list|>
name|patchSets
parameter_list|(
name|PatchSet
modifier|...
name|ents
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|ents
argument_list|)
return|;
block|}
DECL|method|approvals (PatchSetApproval... ents)
specifier|private
specifier|static
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvals
parameter_list|(
name|PatchSetApproval
modifier|...
name|ents
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|ents
argument_list|)
return|;
block|}
DECL|method|comments (PatchLineComment... ents)
specifier|private
specifier|static
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|comments
parameter_list|(
name|PatchLineComment
modifier|...
name|ents
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|ents
argument_list|)
return|;
block|}
DECL|method|clone (Change ent)
specifier|private
specifier|static
name|Change
name|clone
parameter_list|(
name|Change
name|ent
parameter_list|)
block|{
return|return
name|clone
argument_list|(
name|CHANGE_CODEC
argument_list|,
name|ent
argument_list|)
return|;
block|}
DECL|method|clone (ChangeMessage ent)
specifier|private
specifier|static
name|ChangeMessage
name|clone
parameter_list|(
name|ChangeMessage
name|ent
parameter_list|)
block|{
return|return
name|clone
argument_list|(
name|CHANGE_MESSAGE_CODEC
argument_list|,
name|ent
argument_list|)
return|;
block|}
DECL|method|clone (PatchSet ent)
specifier|private
specifier|static
name|PatchSet
name|clone
parameter_list|(
name|PatchSet
name|ent
parameter_list|)
block|{
return|return
name|clone
argument_list|(
name|PATCH_SET_CODEC
argument_list|,
name|ent
argument_list|)
return|;
block|}
DECL|method|clone (PatchSetApproval ent)
specifier|private
specifier|static
name|PatchSetApproval
name|clone
parameter_list|(
name|PatchSetApproval
name|ent
parameter_list|)
block|{
return|return
name|clone
argument_list|(
name|PATCH_SET_APPROVAL_CODEC
argument_list|,
name|ent
argument_list|)
return|;
block|}
DECL|method|clone (PatchLineComment ent)
specifier|private
specifier|static
name|PatchLineComment
name|clone
parameter_list|(
name|PatchLineComment
name|ent
parameter_list|)
block|{
return|return
name|clone
argument_list|(
name|PATCH_LINE_COMMENT_CODEC
argument_list|,
name|ent
argument_list|)
return|;
block|}
DECL|method|clone (ProtobufCodec<T> codec, T obj)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|clone
parameter_list|(
name|ProtobufCodec
argument_list|<
name|T
argument_list|>
name|codec
parameter_list|,
name|T
name|obj
parameter_list|)
block|{
return|return
name|codec
operator|.
name|decode
argument_list|(
name|codec
operator|.
name|encodeToByteArray
argument_list|(
name|obj
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

