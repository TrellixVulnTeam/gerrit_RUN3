begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.testutil
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|IndexVersions
operator|.
name|ALL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|IndexVersions
operator|.
name|CURRENT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
operator|.
name|IndexVersions
operator|.
name|PREVIOUS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeSchemaDefinitions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|IndexVersionsTest
specifier|public
class|class
name|IndexVersionsTest
extends|extends
name|GerritBaseTests
block|{
DECL|field|SCHEMA_DEF
specifier|private
specifier|static
specifier|final
name|ChangeSchemaDefinitions
name|SCHEMA_DEF
init|=
name|ChangeSchemaDefinitions
operator|.
name|INSTANCE
decl_stmt|;
annotation|@
name|Test
DECL|method|noValue ()
specifier|public
name|void
name|noValue
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|SCHEMA_DEF
operator|.
name|getPrevious
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|SCHEMA_DEF
operator|.
name|getPrevious
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|expected
operator|.
name|add
argument_list|(
name|SCHEMA_DEF
operator|.
name|getLatest
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyValue ()
specifier|public
name|void
name|emptyValue
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|SCHEMA_DEF
operator|.
name|getPrevious
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|SCHEMA_DEF
operator|.
name|getPrevious
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|expected
operator|.
name|add
argument_list|(
name|SCHEMA_DEF
operator|.
name|getLatest
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|get
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|all ()
specifier|public
name|void
name|all
parameter_list|()
block|{
name|assertThat
argument_list|(
name|get
argument_list|(
name|ALL
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|SCHEMA_DEF
operator|.
name|getSchemas
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|current ()
specifier|public
name|void
name|current
parameter_list|()
block|{
name|assertThat
argument_list|(
name|get
argument_list|(
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|SCHEMA_DEF
operator|.
name|getLatest
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|previous ()
specifier|public
name|void
name|previous
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|SCHEMA_DEF
operator|.
name|getPrevious
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|get
argument_list|(
name|PREVIOUS
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|SCHEMA_DEF
operator|.
name|getPrevious
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|versionNumber ()
specifier|public
name|void
name|versionNumber
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|SCHEMA_DEF
operator|.
name|getPrevious
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|get
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|SCHEMA_DEF
operator|.
name|getPrevious
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|SCHEMA_DEF
operator|.
name|getPrevious
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|invalid ()
specifier|public
name|void
name|invalid
parameter_list|()
block|{
name|assertIllegalArgument
argument_list|(
literal|"foo"
argument_list|,
literal|"Invalid value for test: foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|currentAndPrevious ()
specifier|public
name|void
name|currentAndPrevious
parameter_list|()
block|{
if|if
condition|(
name|SCHEMA_DEF
operator|.
name|getPrevious
argument_list|()
operator|==
literal|null
condition|)
block|{
name|assertIllegalArgument
argument_list|(
name|CURRENT
operator|+
literal|","
operator|+
name|PREVIOUS
argument_list|,
literal|"previous version does not exist"
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertThat
argument_list|(
name|get
argument_list|(
name|CURRENT
operator|+
literal|","
operator|+
name|PREVIOUS
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|SCHEMA_DEF
operator|.
name|getLatest
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|SCHEMA_DEF
operator|.
name|getPrevious
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|get
argument_list|(
name|PREVIOUS
operator|+
literal|","
operator|+
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|SCHEMA_DEF
operator|.
name|getPrevious
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|SCHEMA_DEF
operator|.
name|getLatest
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|currentAndVersionNumber ()
specifier|public
name|void
name|currentAndVersionNumber
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|SCHEMA_DEF
operator|.
name|getPrevious
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|get
argument_list|(
name|CURRENT
operator|+
literal|","
operator|+
name|SCHEMA_DEF
operator|.
name|getPrevious
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|SCHEMA_DEF
operator|.
name|getLatest
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|SCHEMA_DEF
operator|.
name|getPrevious
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|get
argument_list|(
name|SCHEMA_DEF
operator|.
name|getPrevious
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|+
literal|","
operator|+
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|SCHEMA_DEF
operator|.
name|getPrevious
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|SCHEMA_DEF
operator|.
name|getLatest
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|currentAndAll ()
specifier|public
name|void
name|currentAndAll
parameter_list|()
block|{
name|assertIllegalArgument
argument_list|(
name|CURRENT
operator|+
literal|","
operator|+
name|ALL
argument_list|,
literal|"Invalid value for test: "
operator|+
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|currentAndInvalid ()
specifier|public
name|void
name|currentAndInvalid
parameter_list|()
block|{
name|assertIllegalArgument
argument_list|(
name|CURRENT
operator|+
literal|",foo"
argument_list|,
literal|"Invalid value for test: foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nonExistingVersion ()
specifier|public
name|void
name|nonExistingVersion
parameter_list|()
block|{
name|int
name|nonExistingVersion
init|=
name|SCHEMA_DEF
operator|.
name|getLatest
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|+
literal|1
decl_stmt|;
name|assertIllegalArgument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|nonExistingVersion
argument_list|)
argument_list|,
literal|"Index version "
operator|+
name|nonExistingVersion
operator|+
literal|" that was specified by test not found. Possible versions are: "
operator|+
name|SCHEMA_DEF
operator|.
name|getSchemas
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|get (String value)
specifier|private
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|IndexVersions
operator|.
name|get
argument_list|(
name|ChangeSchemaDefinitions
operator|.
name|INSTANCE
argument_list|,
literal|"test"
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|assertIllegalArgument (String value, String expectedMessage)
specifier|private
name|void
name|assertIllegalArgument
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|expectedMessage
parameter_list|)
block|{
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|expectedMessage
argument_list|)
expr_stmt|;
name|get
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

