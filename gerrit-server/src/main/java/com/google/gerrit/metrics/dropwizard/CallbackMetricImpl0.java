begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.metrics.dropwizard
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|dropwizard
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|CallbackMetric0
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_class
DECL|class|CallbackMetricImpl0
class|class
name|CallbackMetricImpl0
parameter_list|<
name|V
parameter_list|>
extends|extends
name|CallbackMetric0
argument_list|<
name|V
argument_list|>
implements|implements
name|CallbackMetricGlue
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|zeroFor (Class<V> valueClass)
specifier|static
parameter_list|<
name|V
parameter_list|>
name|V
name|zeroFor
parameter_list|(
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
parameter_list|)
block|{
if|if
condition|(
name|valueClass
operator|==
name|Integer
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|V
operator|)
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|valueClass
operator|==
name|Long
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|V
operator|)
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|valueClass
operator|==
name|Double
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|V
operator|)
name|Double
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|valueClass
operator|==
name|Float
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|V
operator|)
name|Float
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|valueClass
operator|==
name|String
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|V
operator|)
literal|""
return|;
block|}
elseif|else
if|if
condition|(
name|valueClass
operator|==
name|Boolean
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|V
operator|)
name|Boolean
operator|.
name|FALSE
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unsupported value type "
operator|+
name|valueClass
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|field|metrics
specifier|private
specifier|final
name|DropWizardMetricMaker
name|metrics
decl_stmt|;
DECL|field|registry
specifier|private
specifier|final
name|MetricRegistry
name|registry
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|value
specifier|private
specifier|volatile
name|V
name|value
decl_stmt|;
DECL|method|CallbackMetricImpl0 (DropWizardMetricMaker metrics, MetricRegistry registry, String name, Class<V> valueType)
name|CallbackMetricImpl0
parameter_list|(
name|DropWizardMetricMaker
name|metrics
parameter_list|,
name|MetricRegistry
name|registry
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueType
parameter_list|)
block|{
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|zeroFor
argument_list|(
name|valueType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|set (V value)
specifier|public
name|void
name|set
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|metrics
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|register (final Runnable trigger)
specifier|public
name|void
name|register
parameter_list|(
specifier|final
name|Runnable
name|trigger
parameter_list|)
block|{
name|registry
operator|.
name|register
argument_list|(
name|name
argument_list|,
operator|new
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|V
name|getValue
parameter_list|()
block|{
name|trigger
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

