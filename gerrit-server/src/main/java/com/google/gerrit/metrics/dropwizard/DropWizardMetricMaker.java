begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.metrics.dropwizard
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|dropwizard
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|dropwizard
operator|.
name|MetricResource
operator|.
name|METRIC_KIND
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ConfigResource
operator|.
name|CONFIG_KIND
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|RegistrationHandle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|CallbackMetric
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|CallbackMetric0
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|CallbackMetric1
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Counter0
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Counter1
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Counter2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Counter3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Description
operator|.
name|FieldOrdering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|MetricMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Timer0
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Timer1
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Timer2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Timer3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|proc
operator|.
name|JGitMetricModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|proc
operator|.
name|ProcMetricModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|CacheMetrics
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Scopes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Connects Gerrit metric package onto DropWizard.  *  * @see<a href="http://www.dropwizard.io/">DropWizard</a>  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|DropWizardMetricMaker
specifier|public
class|class
name|DropWizardMetricMaker
extends|extends
name|MetricMaker
block|{
DECL|class|ApiModule
specifier|public
specifier|static
class|class
name|ApiModule
extends|extends
name|RestApiModule
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|MetricRegistry
operator|.
name|class
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|DropWizardMetricMaker
operator|.
name|class
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|MetricMaker
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|DropWizardMetricMaker
operator|.
name|class
argument_list|)
expr_stmt|;
name|install
argument_list|(
operator|new
name|ProcMetricModule
argument_list|()
argument_list|)
expr_stmt|;
name|install
argument_list|(
operator|new
name|JGitMetricModule
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|CacheMetrics
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RestModule
specifier|public
specifier|static
class|class
name|RestModule
extends|extends
name|RestApiModule
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|DynamicMap
operator|.
name|mapOf
argument_list|(
name|binder
argument_list|()
argument_list|,
name|METRIC_KIND
argument_list|)
expr_stmt|;
name|child
argument_list|(
name|CONFIG_KIND
argument_list|,
literal|"metrics"
argument_list|)
operator|.
name|to
argument_list|(
name|MetricsCollection
operator|.
name|class
argument_list|)
expr_stmt|;
name|get
argument_list|(
name|METRIC_KIND
argument_list|)
operator|.
name|to
argument_list|(
name|GetMetric
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|registry
specifier|private
specifier|final
name|MetricRegistry
name|registry
decl_stmt|;
DECL|field|bucketed
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|BucketedMetric
argument_list|>
name|bucketed
decl_stmt|;
DECL|field|descriptions
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|descriptions
decl_stmt|;
annotation|@
name|Inject
DECL|method|DropWizardMetricMaker (MetricRegistry registry)
name|DropWizardMetricMaker
parameter_list|(
name|MetricRegistry
name|registry
parameter_list|)
block|{
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
name|this
operator|.
name|bucketed
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|descriptions
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|getMetricNames ()
name|Iterable
argument_list|<
name|String
argument_list|>
name|getMetricNames
parameter_list|()
block|{
return|return
name|descriptions
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/** Get the underlying metric implementation. */
DECL|method|getMetric (String name)
specifier|public
name|Metric
name|getMetric
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Metric
name|m
init|=
name|bucketed
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|m
operator|!=
literal|null
condition|?
name|m
else|:
name|registry
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/** Lookup annotations from a metric's {@link Description}. */
DECL|method|getAnnotations (String name)
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAnnotations
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|descriptions
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newCounter (String name, Description desc)
specifier|public
specifier|synchronized
name|Counter0
name|newCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|)
block|{
name|checkCounterDescription
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|define
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
return|return
name|newCounterImpl
argument_list|(
name|name
argument_list|,
name|desc
operator|.
name|isRate
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newCounter ( String name, Description desc, Field<F1> field1)
specifier|public
specifier|synchronized
parameter_list|<
name|F1
parameter_list|>
name|Counter1
argument_list|<
name|F1
argument_list|>
name|newCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Field
argument_list|<
name|F1
argument_list|>
name|field1
parameter_list|)
block|{
name|checkCounterDescription
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|CounterImpl1
argument_list|<
name|F1
argument_list|>
name|m
init|=
operator|new
name|CounterImpl1
argument_list|<>
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|desc
argument_list|,
name|field1
argument_list|)
decl_stmt|;
name|define
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|bucketed
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|m
operator|.
name|counter
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|newCounter ( String name, Description desc, Field<F1> field1, Field<F2> field2)
specifier|public
specifier|synchronized
parameter_list|<
name|F1
parameter_list|,
name|F2
parameter_list|>
name|Counter2
argument_list|<
name|F1
argument_list|,
name|F2
argument_list|>
name|newCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Field
argument_list|<
name|F1
argument_list|>
name|field1
parameter_list|,
name|Field
argument_list|<
name|F2
argument_list|>
name|field2
parameter_list|)
block|{
name|checkCounterDescription
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|CounterImplN
name|m
init|=
operator|new
name|CounterImplN
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|desc
argument_list|,
name|field1
argument_list|,
name|field2
argument_list|)
decl_stmt|;
name|define
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|bucketed
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|m
operator|.
name|counter2
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|newCounter ( String name, Description desc, Field<F1> field1, Field<F2> field2, Field<F3> field3)
specifier|public
specifier|synchronized
parameter_list|<
name|F1
parameter_list|,
name|F2
parameter_list|,
name|F3
parameter_list|>
name|Counter3
argument_list|<
name|F1
argument_list|,
name|F2
argument_list|,
name|F3
argument_list|>
name|newCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Field
argument_list|<
name|F1
argument_list|>
name|field1
parameter_list|,
name|Field
argument_list|<
name|F2
argument_list|>
name|field2
parameter_list|,
name|Field
argument_list|<
name|F3
argument_list|>
name|field3
parameter_list|)
block|{
name|checkCounterDescription
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|CounterImplN
name|m
init|=
operator|new
name|CounterImplN
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|desc
argument_list|,
name|field1
argument_list|,
name|field2
argument_list|,
name|field3
argument_list|)
decl_stmt|;
name|define
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|bucketed
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|m
operator|.
name|counter3
argument_list|()
return|;
block|}
DECL|method|checkCounterDescription (String name, Description desc)
specifier|private
specifier|static
name|void
name|checkCounterDescription
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|)
block|{
name|checkMetricName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|desc
operator|.
name|isConstant
argument_list|()
argument_list|,
literal|"counters must not be constant"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|desc
operator|.
name|isGauge
argument_list|()
argument_list|,
literal|"counters must not be gauge"
argument_list|)
expr_stmt|;
block|}
DECL|method|newCounterImpl (String name, boolean isRate)
name|CounterImpl
name|newCounterImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|isRate
parameter_list|)
block|{
if|if
condition|(
name|isRate
condition|)
block|{
specifier|final
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Meter
name|m
init|=
name|registry
operator|.
name|meter
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|new
name|CounterImpl
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|incrementBy
parameter_list|(
name|long
name|delta
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|delta
operator|>=
literal|0
argument_list|,
literal|"counter delta must be>= 0"
argument_list|)
expr_stmt|;
name|m
operator|.
name|mark
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
else|else
block|{
specifier|final
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
name|m
init|=
name|registry
operator|.
name|counter
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|new
name|CounterImpl
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|incrementBy
parameter_list|(
name|long
name|delta
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|delta
operator|>=
literal|0
argument_list|,
literal|"counter delta must be>= 0"
argument_list|)
expr_stmt|;
name|m
operator|.
name|inc
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|newTimer (String name, Description desc)
specifier|public
specifier|synchronized
name|Timer0
name|newTimer
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|)
block|{
name|checkTimerDescription
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|define
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
return|return
name|newTimerImpl
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newTimer (String name, Description desc, Field<F1> field1)
specifier|public
specifier|synchronized
parameter_list|<
name|F1
parameter_list|>
name|Timer1
argument_list|<
name|F1
argument_list|>
name|newTimer
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Field
argument_list|<
name|F1
argument_list|>
name|field1
parameter_list|)
block|{
name|checkTimerDescription
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|TimerImpl1
argument_list|<
name|F1
argument_list|>
name|m
init|=
operator|new
name|TimerImpl1
argument_list|<>
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|desc
argument_list|,
name|field1
argument_list|)
decl_stmt|;
name|define
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|bucketed
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|m
operator|.
name|timer
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|newTimer (String name, Description desc, Field<F1> field1, Field<F2> field2)
specifier|public
specifier|synchronized
parameter_list|<
name|F1
parameter_list|,
name|F2
parameter_list|>
name|Timer2
argument_list|<
name|F1
argument_list|,
name|F2
argument_list|>
name|newTimer
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Field
argument_list|<
name|F1
argument_list|>
name|field1
parameter_list|,
name|Field
argument_list|<
name|F2
argument_list|>
name|field2
parameter_list|)
block|{
name|checkTimerDescription
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|TimerImplN
name|m
init|=
operator|new
name|TimerImplN
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|desc
argument_list|,
name|field1
argument_list|,
name|field2
argument_list|)
decl_stmt|;
name|define
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|bucketed
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|m
operator|.
name|timer2
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|newTimer ( String name, Description desc, Field<F1> field1, Field<F2> field2, Field<F3> field3)
specifier|public
specifier|synchronized
parameter_list|<
name|F1
parameter_list|,
name|F2
parameter_list|,
name|F3
parameter_list|>
name|Timer3
argument_list|<
name|F1
argument_list|,
name|F2
argument_list|,
name|F3
argument_list|>
name|newTimer
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Field
argument_list|<
name|F1
argument_list|>
name|field1
parameter_list|,
name|Field
argument_list|<
name|F2
argument_list|>
name|field2
parameter_list|,
name|Field
argument_list|<
name|F3
argument_list|>
name|field3
parameter_list|)
block|{
name|checkTimerDescription
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|TimerImplN
name|m
init|=
operator|new
name|TimerImplN
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|desc
argument_list|,
name|field1
argument_list|,
name|field2
argument_list|,
name|field3
argument_list|)
decl_stmt|;
name|define
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|bucketed
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|m
operator|.
name|timer3
argument_list|()
return|;
block|}
DECL|method|checkTimerDescription (String name, Description desc)
specifier|private
specifier|static
name|void
name|checkTimerDescription
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|)
block|{
name|checkMetricName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|desc
operator|.
name|isConstant
argument_list|()
argument_list|,
literal|"timer must not be constant"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|desc
operator|.
name|isGauge
argument_list|()
argument_list|,
literal|"timer must not be a gauge"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|desc
operator|.
name|isRate
argument_list|()
argument_list|,
literal|"timer must not be a rate"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|desc
operator|.
name|isCumulative
argument_list|()
argument_list|,
literal|"timer must be cumulative"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|desc
operator|.
name|getTimeUnit
argument_list|()
operator|!=
literal|null
argument_list|,
literal|"timer must have a unit"
argument_list|)
expr_stmt|;
block|}
DECL|method|newTimerImpl (String name)
name|TimerImpl
name|newTimerImpl
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|TimerImpl
argument_list|(
name|name
argument_list|,
name|registry
operator|.
name|timer
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newCallbackMetric ( String name, Class<V> valueClass, Description desc)
specifier|public
parameter_list|<
name|V
parameter_list|>
name|CallbackMetric0
argument_list|<
name|V
argument_list|>
name|newCallbackMetric
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
parameter_list|,
name|Description
name|desc
parameter_list|)
block|{
name|checkMetricName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|define
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
return|return
operator|new
name|CallbackMetricImpl0
argument_list|<>
argument_list|(
name|this
argument_list|,
name|registry
argument_list|,
name|name
argument_list|,
name|valueClass
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newCallbackMetric ( String name, Class<V> valueClass, Description desc, Field<F1> field1)
specifier|public
parameter_list|<
name|F1
parameter_list|,
name|V
parameter_list|>
name|CallbackMetric1
argument_list|<
name|F1
argument_list|,
name|V
argument_list|>
name|newCallbackMetric
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Field
argument_list|<
name|F1
argument_list|>
name|field1
parameter_list|)
block|{
name|checkMetricName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|CallbackMetricImpl1
argument_list|<
name|F1
argument_list|,
name|V
argument_list|>
name|m
init|=
operator|new
name|CallbackMetricImpl1
argument_list|<>
argument_list|(
name|this
argument_list|,
name|registry
argument_list|,
name|name
argument_list|,
name|valueClass
argument_list|,
name|desc
argument_list|,
name|field1
argument_list|)
decl_stmt|;
name|define
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|bucketed
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|m
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|newTrigger ( Set<CallbackMetric<?>> metrics, Runnable trigger)
specifier|public
specifier|synchronized
name|RegistrationHandle
name|newTrigger
parameter_list|(
name|Set
argument_list|<
name|CallbackMetric
argument_list|<
name|?
argument_list|>
argument_list|>
name|metrics
parameter_list|,
name|Runnable
name|trigger
parameter_list|)
block|{
specifier|final
name|ImmutableSet
argument_list|<
name|CallbackMetricGlue
argument_list|>
name|all
init|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|metrics
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|Function
argument_list|<
name|CallbackMetric
argument_list|<
name|?
argument_list|>
argument_list|,
name|CallbackMetricGlue
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CallbackMetricGlue
name|apply
parameter_list|(
name|CallbackMetric
argument_list|<
name|?
argument_list|>
name|input
parameter_list|)
block|{
return|return
operator|(
name|CallbackMetricGlue
operator|)
name|input
return|;
block|}
block|}
block|)
function|.toSet
parameter_list|()
function|;
name|trigger
operator|=
operator|new
name|CallbackGroup
argument_list|(
name|trigger
argument_list|,
name|all
argument_list|)
expr_stmt|;
for|for
control|(
name|CallbackMetricGlue
name|m
range|:
name|all
control|)
block|{
name|m
operator|.
name|register
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
block|}
name|trigger
operator|.
name|run
parameter_list|()
constructor_decl|;
return|return
operator|new
name|RegistrationHandle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
for|for
control|(
name|CallbackMetricGlue
name|m
range|:
name|all
control|)
block|{
name|m
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
end_class

begin_function
DECL|method|remove (String name)
specifier|synchronized
name|void
name|remove
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|bucketed
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|descriptions
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|define (String name, Description desc)
specifier|private
specifier|synchronized
name|void
name|define
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|)
block|{
if|if
condition|(
name|descriptions
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"metric %s already defined"
argument_list|,
name|name
argument_list|)
argument_list|)
throw|;
block|}
name|descriptions
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|desc
operator|.
name|getAnnotations
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
DECL|field|METRIC_NAME_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|METRIC_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[a-zA-Z0-9_-]+(/[a-zA-Z0-9_-]+)*"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
DECL|method|checkMetricName (String name)
specifier|private
specifier|static
name|void
name|checkMetricName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|METRIC_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|,
literal|"metric name must match %s"
argument_list|,
name|METRIC_NAME_PATTERN
operator|.
name|pattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|name (Description.FieldOrdering ordering, String codeName, String fieldValues)
specifier|static
name|String
name|name
parameter_list|(
name|Description
operator|.
name|FieldOrdering
name|ordering
parameter_list|,
name|String
name|codeName
parameter_list|,
name|String
name|fieldValues
parameter_list|)
block|{
if|if
condition|(
name|ordering
operator|==
name|FieldOrdering
operator|.
name|PREFIX_FIELDS_BASENAME
condition|)
block|{
name|int
name|s
init|=
name|codeName
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|>
literal|0
condition|)
block|{
name|String
name|prefix
init|=
name|codeName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|String
name|metric
init|=
name|codeName
operator|.
name|substring
argument_list|(
name|s
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|prefix
operator|+
literal|'/'
operator|+
name|fieldValues
operator|+
literal|'/'
operator|+
name|metric
return|;
block|}
block|}
return|return
name|codeName
operator|+
literal|'/'
operator|+
name|fieldValues
return|;
block|}
end_function

begin_class
DECL|class|CounterImpl
specifier|abstract
class|class
name|CounterImpl
extends|extends
name|Counter0
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|metric
specifier|final
name|Metric
name|metric
decl_stmt|;
DECL|method|CounterImpl (String name, Metric metric)
name|CounterImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|Metric
name|metric
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|metric
operator|=
name|metric
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|descriptions
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|TimerImpl
class|class
name|TimerImpl
extends|extends
name|Timer0
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|metric
specifier|final
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
name|metric
decl_stmt|;
DECL|method|TimerImpl (String name, com.codahale.metrics.Timer metric)
specifier|private
name|TimerImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
name|metric
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|metric
operator|=
name|metric
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|record (long value, TimeUnit unit)
specifier|public
name|void
name|record
parameter_list|(
name|long
name|value
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|value
operator|>=
literal|0
argument_list|,
literal|"timer delta must be>= 0"
argument_list|)
expr_stmt|;
name|metric
operator|.
name|update
argument_list|(
name|value
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|descriptions
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

