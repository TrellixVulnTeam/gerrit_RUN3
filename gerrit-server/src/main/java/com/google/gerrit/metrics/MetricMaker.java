begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.metrics
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|RegistrationHandle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** Factory to create metrics for monitoring. */
end_comment

begin_class
DECL|class|MetricMaker
specifier|public
specifier|abstract
class|class
name|MetricMaker
block|{
comment|/**    * Metric whose value increments during the life of the process.    *    * @param name field name    * @param desc field description    * @return counter    */
DECL|method|newCounter (String name, Description desc)
specifier|public
specifier|abstract
name|Counter0
name|newCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|)
function_decl|;
DECL|method|newCounter (String name, Description desc, Field<F1> field1)
specifier|public
specifier|abstract
parameter_list|<
name|F1
parameter_list|>
name|Counter1
argument_list|<
name|F1
argument_list|>
name|newCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Field
argument_list|<
name|F1
argument_list|>
name|field1
parameter_list|)
function_decl|;
DECL|method|newCounter ( String name, Description desc, Field<F1> field1, Field<F2> field2)
specifier|public
specifier|abstract
parameter_list|<
name|F1
parameter_list|,
name|F2
parameter_list|>
name|Counter2
argument_list|<
name|F1
argument_list|,
name|F2
argument_list|>
name|newCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Field
argument_list|<
name|F1
argument_list|>
name|field1
parameter_list|,
name|Field
argument_list|<
name|F2
argument_list|>
name|field2
parameter_list|)
function_decl|;
DECL|method|newCounter ( String name, Description desc, Field<F1> field1, Field<F2> field2, Field<F3> field3)
specifier|public
specifier|abstract
parameter_list|<
name|F1
parameter_list|,
name|F2
parameter_list|,
name|F3
parameter_list|>
name|Counter3
argument_list|<
name|F1
argument_list|,
name|F2
argument_list|,
name|F3
argument_list|>
name|newCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Field
argument_list|<
name|F1
argument_list|>
name|field1
parameter_list|,
name|Field
argument_list|<
name|F2
argument_list|>
name|field2
parameter_list|,
name|Field
argument_list|<
name|F3
argument_list|>
name|field3
parameter_list|)
function_decl|;
comment|/**    * Metric recording time spent on an operation.    *    * @param name field name    * @param desc field description    * @return timer    */
DECL|method|newTimer (String name, Description desc)
specifier|public
specifier|abstract
name|Timer0
name|newTimer
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|)
function_decl|;
DECL|method|newTimer (String name, Description desc, Field<F1> field1)
specifier|public
specifier|abstract
parameter_list|<
name|F1
parameter_list|>
name|Timer1
argument_list|<
name|F1
argument_list|>
name|newTimer
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Field
argument_list|<
name|F1
argument_list|>
name|field1
parameter_list|)
function_decl|;
DECL|method|newTimer ( String name, Description desc, Field<F1> field1, Field<F2> field2)
specifier|public
specifier|abstract
parameter_list|<
name|F1
parameter_list|,
name|F2
parameter_list|>
name|Timer2
argument_list|<
name|F1
argument_list|,
name|F2
argument_list|>
name|newTimer
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Field
argument_list|<
name|F1
argument_list|>
name|field1
parameter_list|,
name|Field
argument_list|<
name|F2
argument_list|>
name|field2
parameter_list|)
function_decl|;
DECL|method|newTimer ( String name, Description desc, Field<F1> field1, Field<F2> field2, Field<F3> field3)
specifier|public
specifier|abstract
parameter_list|<
name|F1
parameter_list|,
name|F2
parameter_list|,
name|F3
parameter_list|>
name|Timer3
argument_list|<
name|F1
argument_list|,
name|F2
argument_list|,
name|F3
argument_list|>
name|newTimer
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Field
argument_list|<
name|F1
argument_list|>
name|field1
parameter_list|,
name|Field
argument_list|<
name|F2
argument_list|>
name|field2
parameter_list|,
name|Field
argument_list|<
name|F3
argument_list|>
name|field3
parameter_list|)
function_decl|;
comment|/**    * Metric recording statistical distribution of values.    *    * @param name field name    * @param desc field description    * @return histogram    */
DECL|method|newHistogram (String name, Description desc)
specifier|public
specifier|abstract
name|Histogram0
name|newHistogram
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|)
function_decl|;
DECL|method|newHistogram (String name, Description desc, Field<F1> field1)
specifier|public
specifier|abstract
parameter_list|<
name|F1
parameter_list|>
name|Histogram1
argument_list|<
name|F1
argument_list|>
name|newHistogram
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Field
argument_list|<
name|F1
argument_list|>
name|field1
parameter_list|)
function_decl|;
DECL|method|newHistogram ( String name, Description desc, Field<F1> field1, Field<F2> field2)
specifier|public
specifier|abstract
parameter_list|<
name|F1
parameter_list|,
name|F2
parameter_list|>
name|Histogram2
argument_list|<
name|F1
argument_list|,
name|F2
argument_list|>
name|newHistogram
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Field
argument_list|<
name|F1
argument_list|>
name|field1
parameter_list|,
name|Field
argument_list|<
name|F2
argument_list|>
name|field2
parameter_list|)
function_decl|;
DECL|method|newHistogram ( String name, Description desc, Field<F1> field1, Field<F2> field2, Field<F3> field3)
specifier|public
specifier|abstract
parameter_list|<
name|F1
parameter_list|,
name|F2
parameter_list|,
name|F3
parameter_list|>
name|Histogram3
argument_list|<
name|F1
argument_list|,
name|F2
argument_list|,
name|F3
argument_list|>
name|newHistogram
parameter_list|(
name|String
name|name
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Field
argument_list|<
name|F1
argument_list|>
name|field1
parameter_list|,
name|Field
argument_list|<
name|F2
argument_list|>
name|field2
parameter_list|,
name|Field
argument_list|<
name|F3
argument_list|>
name|field3
parameter_list|)
function_decl|;
comment|/**    * Constant value that does not change.    *    * @param name unique name of the metric.    * @param value only value of the metric.    * @param desc description of the metric.    */
DECL|method|newConstantMetric (String name, V value, Description desc)
specifier|public
parameter_list|<
name|V
parameter_list|>
name|void
name|newConstantMetric
parameter_list|(
name|String
name|name
parameter_list|,
name|V
name|value
parameter_list|,
name|Description
name|desc
parameter_list|)
block|{
name|desc
operator|.
name|setConstant
argument_list|()
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|V
argument_list|>
name|type
init|=
operator|(
name|Class
argument_list|<
name|V
argument_list|>
operator|)
name|value
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|CallbackMetric0
argument_list|<
name|V
argument_list|>
name|metric
init|=
name|newCallbackMetric
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|newTrigger
argument_list|(
name|metric
argument_list|,
parameter_list|()
lambda|->
name|metric
operator|.
name|set
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Instantaneous reading of a value.    *    *<pre>    * metricMaker.newCallbackMetric(&quot;memory&quot;,    *     new Description(&quot;Total bytes of memory used&quot;)    *        .setGauge()    *        .setUnit(Units.BYTES),    *     new Supplier&lt;Long&gt;() {    *       public Long get() {    *         return Runtime.getRuntime().totalMemory();    *       }    *     });    *</pre>    *    * @param name unique name of the metric.    * @param valueClass type of value recorded by the metric.    * @param desc description of the metric.    * @param trigger function to compute the value of the metric.    */
DECL|method|newCallbackMetric ( String name, Class<V> valueClass, Description desc, Supplier<V> trigger)
specifier|public
parameter_list|<
name|V
parameter_list|>
name|void
name|newCallbackMetric
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Supplier
argument_list|<
name|V
argument_list|>
name|trigger
parameter_list|)
block|{
name|CallbackMetric0
argument_list|<
name|V
argument_list|>
name|metric
init|=
name|newCallbackMetric
argument_list|(
name|name
argument_list|,
name|valueClass
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|newTrigger
argument_list|(
name|metric
argument_list|,
parameter_list|()
lambda|->
name|metric
operator|.
name|set
argument_list|(
name|trigger
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Instantaneous reading of a single value.    *    * @param name field name    * @param valueClass field type    * @param desc field description    * @return callback    */
DECL|method|newCallbackMetric ( String name, Class<V> valueClass, Description desc)
specifier|public
specifier|abstract
parameter_list|<
name|V
parameter_list|>
name|CallbackMetric0
argument_list|<
name|V
argument_list|>
name|newCallbackMetric
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
parameter_list|,
name|Description
name|desc
parameter_list|)
function_decl|;
DECL|method|newCallbackMetric ( String name, Class<V> valueClass, Description desc, Field<F1> field1)
specifier|public
specifier|abstract
parameter_list|<
name|F1
parameter_list|,
name|V
parameter_list|>
name|CallbackMetric1
argument_list|<
name|F1
argument_list|,
name|V
argument_list|>
name|newCallbackMetric
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
parameter_list|,
name|Description
name|desc
parameter_list|,
name|Field
argument_list|<
name|F1
argument_list|>
name|field1
parameter_list|)
function_decl|;
comment|/**    * Connect logic to populate a previously created {@link CallbackMetric}.    *    * @param metric1 previously created callback    * @param trigger trigger to connect    * @return registration handle    */
DECL|method|newTrigger (CallbackMetric<?> metric1, Runnable trigger)
specifier|public
name|RegistrationHandle
name|newTrigger
parameter_list|(
name|CallbackMetric
argument_list|<
name|?
argument_list|>
name|metric1
parameter_list|,
name|Runnable
name|trigger
parameter_list|)
block|{
return|return
name|newTrigger
argument_list|(
name|ImmutableSet
operator|.
expr|<
name|CallbackMetric
argument_list|<
name|?
argument_list|>
operator|>
name|of
argument_list|(
name|metric1
argument_list|)
operator|,
name|trigger
argument_list|)
return|;
block|}
DECL|method|newTrigger ( CallbackMetric<?> metric1, CallbackMetric<?> metric2, Runnable trigger)
specifier|public
name|RegistrationHandle
name|newTrigger
parameter_list|(
name|CallbackMetric
argument_list|<
name|?
argument_list|>
name|metric1
parameter_list|,
name|CallbackMetric
argument_list|<
name|?
argument_list|>
name|metric2
parameter_list|,
name|Runnable
name|trigger
parameter_list|)
block|{
return|return
name|newTrigger
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|metric1
argument_list|,
name|metric2
argument_list|)
argument_list|,
name|trigger
argument_list|)
return|;
block|}
DECL|method|newTrigger ( CallbackMetric<?> metric1, CallbackMetric<?> metric2, CallbackMetric<?> metric3, Runnable trigger)
specifier|public
name|RegistrationHandle
name|newTrigger
parameter_list|(
name|CallbackMetric
argument_list|<
name|?
argument_list|>
name|metric1
parameter_list|,
name|CallbackMetric
argument_list|<
name|?
argument_list|>
name|metric2
parameter_list|,
name|CallbackMetric
argument_list|<
name|?
argument_list|>
name|metric3
parameter_list|,
name|Runnable
name|trigger
parameter_list|)
block|{
return|return
name|newTrigger
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|metric1
argument_list|,
name|metric2
argument_list|,
name|metric3
argument_list|)
argument_list|,
name|trigger
argument_list|)
return|;
block|}
DECL|method|newTrigger (Set<CallbackMetric<?>> metrics, Runnable trigger)
specifier|public
specifier|abstract
name|RegistrationHandle
name|newTrigger
parameter_list|(
name|Set
argument_list|<
name|CallbackMetric
argument_list|<
name|?
argument_list|>
argument_list|>
name|metrics
parameter_list|,
name|Runnable
name|trigger
parameter_list|)
function_decl|;
comment|/**    * Sanitize the given metric name.    *    * @param name the name to sanitize.    * @return sanitized version of the name.    */
DECL|method|sanitizeMetricName (String name)
specifier|public
name|String
name|sanitizeMetricName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

