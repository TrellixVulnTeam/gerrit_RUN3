begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.metrics.dropwizard
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|dropwizard
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_class
DECL|class|MetricJson
class|class
name|MetricJson
block|{
DECL|field|description
name|String
name|description
decl_stmt|;
DECL|field|unit
name|String
name|unit
decl_stmt|;
DECL|field|rate
name|Boolean
name|rate
decl_stmt|;
DECL|field|gauge
name|Boolean
name|gauge
decl_stmt|;
DECL|field|cumulative
name|Boolean
name|cumulative
decl_stmt|;
DECL|field|count
name|Long
name|count
decl_stmt|;
DECL|field|value
name|Object
name|value
decl_stmt|;
DECL|field|rate_1m
name|Double
name|rate_1m
decl_stmt|;
DECL|field|rate_5m
name|Double
name|rate_5m
decl_stmt|;
DECL|field|rate_15m
name|Double
name|rate_15m
decl_stmt|;
DECL|field|rate_mean
name|Double
name|rate_mean
decl_stmt|;
DECL|field|p50
name|Double
name|p50
decl_stmt|;
DECL|field|p75
name|Double
name|p75
decl_stmt|;
DECL|field|p95
name|Double
name|p95
decl_stmt|;
DECL|field|p98
name|Double
name|p98
decl_stmt|;
DECL|field|p99
name|Double
name|p99
decl_stmt|;
DECL|field|p99_9
name|Double
name|p99_9
decl_stmt|;
DECL|field|min
name|Double
name|min
decl_stmt|;
DECL|field|max
name|Double
name|max
decl_stmt|;
DECL|field|std_dev
name|Double
name|std_dev
decl_stmt|;
DECL|method|MetricJson (Metric metric, ImmutableMap<String, String> atts, boolean dataOnly)
name|MetricJson
parameter_list|(
name|Metric
name|metric
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|atts
parameter_list|,
name|boolean
name|dataOnly
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dataOnly
condition|)
block|{
name|description
operator|=
name|atts
operator|.
name|get
argument_list|(
name|Description
operator|.
name|DESCRIPTION
argument_list|)
expr_stmt|;
name|unit
operator|=
name|atts
operator|.
name|get
argument_list|(
name|Description
operator|.
name|UNIT
argument_list|)
expr_stmt|;
name|rate
operator|=
name|toBool
argument_list|(
name|atts
argument_list|,
name|Description
operator|.
name|RATE
argument_list|)
expr_stmt|;
name|gauge
operator|=
name|toBool
argument_list|(
name|atts
argument_list|,
name|Description
operator|.
name|GAUGE
argument_list|)
expr_stmt|;
name|cumulative
operator|=
name|toBool
argument_list|(
name|atts
argument_list|,
name|Description
operator|.
name|CUMULATIVE
argument_list|)
expr_stmt|;
block|}
name|init
argument_list|(
name|metric
argument_list|,
name|atts
argument_list|)
expr_stmt|;
block|}
DECL|method|init (Metric metric, ImmutableMap<String, String> atts)
specifier|private
name|void
name|init
parameter_list|(
name|Metric
name|metric
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|atts
parameter_list|)
block|{
if|if
condition|(
name|metric
operator|instanceof
name|Counter
condition|)
block|{
name|Counter
name|c
init|=
operator|(
name|Counter
operator|)
name|metric
decl_stmt|;
name|count
operator|=
name|c
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|metric
operator|instanceof
name|Gauge
condition|)
block|{
name|Gauge
argument_list|<
name|?
argument_list|>
name|g
init|=
operator|(
name|Gauge
argument_list|<
name|?
argument_list|>
operator|)
name|metric
decl_stmt|;
name|value
operator|=
name|g
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|metric
operator|instanceof
name|Meter
condition|)
block|{
name|Meter
name|m
init|=
operator|(
name|Meter
operator|)
name|metric
decl_stmt|;
name|count
operator|=
name|m
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|rate_1m
operator|=
name|m
operator|.
name|getOneMinuteRate
argument_list|()
expr_stmt|;
name|rate_5m
operator|=
name|m
operator|.
name|getFiveMinuteRate
argument_list|()
expr_stmt|;
name|rate_15m
operator|=
name|m
operator|.
name|getFifteenMinuteRate
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|metric
operator|instanceof
name|Timer
condition|)
block|{
name|Timer
name|m
init|=
operator|(
name|Timer
operator|)
name|metric
decl_stmt|;
name|Snapshot
name|s
init|=
name|m
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|count
operator|=
name|m
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|rate_1m
operator|=
name|m
operator|.
name|getOneMinuteRate
argument_list|()
expr_stmt|;
name|rate_5m
operator|=
name|m
operator|.
name|getFiveMinuteRate
argument_list|()
expr_stmt|;
name|rate_15m
operator|=
name|m
operator|.
name|getFifteenMinuteRate
argument_list|()
expr_stmt|;
name|double
name|div
init|=
name|Description
operator|.
name|getTimeUnit
argument_list|(
name|atts
operator|.
name|get
argument_list|(
name|Description
operator|.
name|UNIT
argument_list|)
argument_list|)
operator|.
name|toNanos
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|p50
operator|=
name|s
operator|.
name|getMedian
argument_list|()
operator|/
name|div
expr_stmt|;
name|p75
operator|=
name|s
operator|.
name|get75thPercentile
argument_list|()
operator|/
name|div
expr_stmt|;
name|p95
operator|=
name|s
operator|.
name|get95thPercentile
argument_list|()
operator|/
name|div
expr_stmt|;
name|p98
operator|=
name|s
operator|.
name|get98thPercentile
argument_list|()
operator|/
name|div
expr_stmt|;
name|p99
operator|=
name|s
operator|.
name|get99thPercentile
argument_list|()
operator|/
name|div
expr_stmt|;
name|p99_9
operator|=
name|s
operator|.
name|get999thPercentile
argument_list|()
operator|/
name|div
expr_stmt|;
name|min
operator|=
name|s
operator|.
name|getMin
argument_list|()
operator|/
name|div
expr_stmt|;
name|max
operator|=
name|s
operator|.
name|getMax
argument_list|()
operator|/
name|div
expr_stmt|;
name|std_dev
operator|=
name|s
operator|.
name|getStdDev
argument_list|()
operator|/
name|div
expr_stmt|;
block|}
block|}
DECL|method|toBool (ImmutableMap<String, String> atts, String key)
specifier|private
specifier|static
name|Boolean
name|toBool
parameter_list|(
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|atts
parameter_list|,
name|String
name|key
parameter_list|)
block|{
return|return
name|Description
operator|.
name|TRUE_VALUE
operator|.
name|equals
argument_list|(
name|atts
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
condition|?
literal|true
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

