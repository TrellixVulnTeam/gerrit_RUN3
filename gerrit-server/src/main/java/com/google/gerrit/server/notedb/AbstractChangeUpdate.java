begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|InternalUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_comment
comment|/** A single delta related to a specific patch-set of a change. */
end_comment

begin_class
DECL|class|AbstractChangeUpdate
specifier|public
specifier|abstract
class|class
name|AbstractChangeUpdate
block|{
DECL|field|migration
specifier|protected
specifier|final
name|NotesMigration
name|migration
decl_stmt|;
DECL|field|repoManager
specifier|protected
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|ctl
specifier|protected
specifier|final
name|ChangeControl
name|ctl
decl_stmt|;
DECL|field|anonymousCowardName
specifier|protected
specifier|final
name|String
name|anonymousCowardName
decl_stmt|;
DECL|field|changeNoteUtil
specifier|protected
specifier|final
name|ChangeNoteUtil
name|changeNoteUtil
decl_stmt|;
DECL|field|when
specifier|protected
specifier|final
name|Date
name|when
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|PersonIdent
name|serverIdent
decl_stmt|;
DECL|field|psId
specifier|protected
name|PatchSet
operator|.
name|Id
name|psId
decl_stmt|;
DECL|field|result
specifier|private
name|ObjectId
name|result
decl_stmt|;
DECL|method|AbstractChangeUpdate (NotesMigration migration, GitRepositoryManager repoManager, ChangeControl ctl, PersonIdent serverIdent, String anonymousCowardName, ChangeNoteUtil changeNoteUtil, Date when)
specifier|protected
name|AbstractChangeUpdate
parameter_list|(
name|NotesMigration
name|migration
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|ChangeControl
name|ctl
parameter_list|,
name|PersonIdent
name|serverIdent
parameter_list|,
name|String
name|anonymousCowardName
parameter_list|,
name|ChangeNoteUtil
name|changeNoteUtil
parameter_list|,
name|Date
name|when
parameter_list|)
block|{
name|this
operator|.
name|migration
operator|=
name|migration
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|ctl
operator|=
name|ctl
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
name|this
operator|.
name|anonymousCowardName
operator|=
name|anonymousCowardName
expr_stmt|;
name|this
operator|.
name|changeNoteUtil
operator|=
name|changeNoteUtil
expr_stmt|;
name|this
operator|.
name|when
operator|=
name|when
expr_stmt|;
name|checkArgument
argument_list|(
operator|(
name|ctl
operator|.
name|getUser
argument_list|()
operator|instanceof
name|IdentifiedUser
operator|)
operator|||
operator|(
name|ctl
operator|.
name|getUser
argument_list|()
operator|instanceof
name|InternalUser
operator|)
argument_list|,
literal|"user must be IdentifiedUser or InternalUser: %s"
argument_list|,
name|ctl
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getChangeNotes ()
specifier|public
name|ChangeNotes
name|getChangeNotes
parameter_list|()
block|{
return|return
name|ctl
operator|.
name|getNotes
argument_list|()
return|;
block|}
DECL|method|getChange ()
specifier|public
name|Change
name|getChange
parameter_list|()
block|{
return|return
name|ctl
operator|.
name|getChange
argument_list|()
return|;
block|}
DECL|method|getWhen ()
specifier|public
name|Date
name|getWhen
parameter_list|()
block|{
return|return
name|when
return|;
block|}
DECL|method|getUser ()
specifier|public
name|CurrentUser
name|getUser
parameter_list|()
block|{
return|return
name|ctl
operator|.
name|getUser
argument_list|()
return|;
block|}
DECL|method|getPatchSetId ()
specifier|public
name|PatchSet
operator|.
name|Id
name|getPatchSetId
parameter_list|()
block|{
return|return
name|psId
return|;
block|}
DECL|method|setPatchSetId (PatchSet.Id psId)
specifier|public
name|void
name|setPatchSetId
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|psId
operator|==
literal|null
operator|||
name|psId
operator|.
name|getParentKey
argument_list|()
operator|.
name|equals
argument_list|(
name|ctl
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|psId
operator|=
name|psId
expr_stmt|;
block|}
DECL|method|newAuthorIdent ()
specifier|private
name|PersonIdent
name|newAuthorIdent
parameter_list|()
block|{
name|CurrentUser
name|u
init|=
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|u
operator|instanceof
name|IdentifiedUser
condition|)
block|{
return|return
name|changeNoteUtil
operator|.
name|newIdent
argument_list|(
name|u
operator|.
name|asIdentifiedUser
argument_list|()
operator|.
name|getAccount
argument_list|()
argument_list|,
name|when
argument_list|,
name|serverIdent
argument_list|,
name|anonymousCowardName
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|u
operator|instanceof
name|InternalUser
condition|)
block|{
return|return
name|serverIdent
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
DECL|method|newIdent (Account author, Date when)
specifier|protected
name|PersonIdent
name|newIdent
parameter_list|(
name|Account
name|author
parameter_list|,
name|Date
name|when
parameter_list|)
block|{
return|return
name|changeNoteUtil
operator|.
name|newIdent
argument_list|(
name|author
argument_list|,
name|when
argument_list|,
name|serverIdent
argument_list|,
name|anonymousCowardName
argument_list|)
return|;
block|}
comment|/** Whether no updates have been done. */
DECL|method|isEmpty ()
specifier|public
specifier|abstract
name|boolean
name|isEmpty
parameter_list|()
function_decl|;
comment|/**    * @return the NameKey for the project where the update will be stored,    *    which is not necessarily the same as the change's project.    */
DECL|method|getProjectName ()
specifier|protected
specifier|abstract
name|Project
operator|.
name|NameKey
name|getProjectName
parameter_list|()
function_decl|;
DECL|method|getRefName ()
specifier|protected
specifier|abstract
name|String
name|getRefName
parameter_list|()
function_decl|;
comment|/**    * Apply this update to the given inserter.    *    * @param rw walk for reading back any objects needed for the update.    * @param ins inserter to write to; callers should not flush.    * @param curr the current tip of the branch prior to this update.    * @return commit ID produced by inserting this update's commit, or null if    *     this update is a no-op and should be skipped. The zero ID is a valid    *     return value, and indicates the ref should be deleted.    * @throws OrmException if a Gerrit-level error occurred.    * @throws IOException if a lower-level error occurred.    */
DECL|method|apply (RevWalk rw, ObjectInserter ins, ObjectId curr)
specifier|final
name|ObjectId
name|apply
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|ObjectInserter
name|ins
parameter_list|,
name|ObjectId
name|curr
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ObjectId
name|z
init|=
name|ObjectId
operator|.
name|zeroId
argument_list|()
decl_stmt|;
name|CommitBuilder
name|cb
init|=
name|applyImpl
argument_list|(
name|rw
argument_list|,
name|ins
argument_list|,
name|curr
argument_list|)
decl_stmt|;
if|if
condition|(
name|cb
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|z
expr_stmt|;
return|return
name|z
return|;
comment|// Impl intends to delete the ref.
block|}
name|cb
operator|.
name|setAuthor
argument_list|(
name|newAuthorIdent
argument_list|()
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setCommitter
argument_list|(
operator|new
name|PersonIdent
argument_list|(
name|serverIdent
argument_list|,
name|when
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|curr
operator|.
name|equals
argument_list|(
name|z
argument_list|)
condition|)
block|{
name|cb
operator|.
name|setParentId
argument_list|(
name|curr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cb
operator|.
name|setParentIds
argument_list|()
expr_stmt|;
comment|// Ref is currently nonexistent, commit has no parents.
block|}
if|if
condition|(
name|cb
operator|.
name|getTreeId
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|curr
operator|.
name|equals
argument_list|(
name|z
argument_list|)
condition|)
block|{
name|cb
operator|.
name|setTreeId
argument_list|(
name|emptyTree
argument_list|(
name|ins
argument_list|)
argument_list|)
expr_stmt|;
comment|// No parent, assume empty tree.
block|}
else|else
block|{
name|RevCommit
name|p
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|curr
argument_list|)
decl_stmt|;
name|cb
operator|.
name|setTreeId
argument_list|(
name|p
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
comment|// Copy tree from parent.
block|}
block|}
name|result
operator|=
name|ins
operator|.
name|insert
argument_list|(
name|cb
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Create a commit containing the contents of this update.    *    * @param ins inserter to write to; callers should not flush.    * @return a new commit builder representing this commit, or null to indicate    *     the meta ref should be deleted as a result of this update. The parent,    *     author, and committer fields in the return value are always    *     overwritten. The tree ID may be unset by this method, which indicates    *     to the caller that it should be copied from the parent commit.    * @throws OrmException if a Gerrit-level error occurred.    * @throws IOException if a lower-level error occurred.    */
DECL|method|applyImpl (RevWalk rw, ObjectInserter ins, ObjectId curr)
specifier|protected
specifier|abstract
name|CommitBuilder
name|applyImpl
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|ObjectInserter
name|ins
parameter_list|,
name|ObjectId
name|curr
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
function_decl|;
DECL|method|getResult ()
name|ObjectId
name|getResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
DECL|method|emptyTree (ObjectInserter ins)
specifier|private
specifier|static
name|ObjectId
name|emptyTree
parameter_list|(
name|ObjectInserter
name|ins
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ins
operator|.
name|insert
argument_list|(
name|Constants
operator|.
name|OBJ_TREE
argument_list|,
operator|new
name|byte
index|[]
block|{}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

