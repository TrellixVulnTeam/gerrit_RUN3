begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|NANOSECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|RepoRefCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbChangeState
operator|.
name|PrimaryStorage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|rebuild
operator|.
name|ChangeRebuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|AtomicUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmRuntimeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|RetryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|Retryer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|RetryerBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|StopStrategies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|WaitStrategies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/** Helper to migrate the {@link PrimaryStorage} of individual changes. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|PrimaryStorageMigrator
specifier|public
class|class
name|PrimaryStorageMigrator
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PrimaryStorageMigrator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsers
specifier|private
specifier|final
name|AllUsersName
name|allUsers
decl_stmt|;
DECL|field|rebuilder
specifier|private
specifier|final
name|ChangeRebuilder
name|rebuilder
decl_stmt|;
DECL|field|skewMs
specifier|private
specifier|final
name|long
name|skewMs
decl_stmt|;
DECL|field|timeoutMs
specifier|private
specifier|final
name|long
name|timeoutMs
decl_stmt|;
DECL|field|testEnsureRebuiltRetryer
specifier|private
specifier|final
name|Retryer
argument_list|<
name|NoteDbChangeState
argument_list|>
name|testEnsureRebuiltRetryer
decl_stmt|;
annotation|@
name|Inject
DECL|method|PrimaryStorageMigrator (@erritServerConfig Config cfg, Provider<ReviewDb> db, GitRepositoryManager repoManager, AllUsersName allUsers, ChangeRebuilder rebuilder)
name|PrimaryStorageMigrator
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsers
parameter_list|,
name|ChangeRebuilder
name|rebuilder
parameter_list|)
block|{
name|this
argument_list|(
name|cfg
argument_list|,
name|db
argument_list|,
name|repoManager
argument_list|,
name|allUsers
argument_list|,
name|rebuilder
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|PrimaryStorageMigrator (Config cfg, Provider<ReviewDb> db, GitRepositoryManager repoManager, AllUsersName allUsers, ChangeRebuilder rebuilder, @Nullable Retryer<NoteDbChangeState> testEnsureRebuiltRetryer)
specifier|public
name|PrimaryStorageMigrator
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsers
parameter_list|,
name|ChangeRebuilder
name|rebuilder
parameter_list|,
annotation|@
name|Nullable
name|Retryer
argument_list|<
name|NoteDbChangeState
argument_list|>
name|testEnsureRebuiltRetryer
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsers
operator|=
name|allUsers
expr_stmt|;
name|this
operator|.
name|rebuilder
operator|=
name|rebuilder
expr_stmt|;
name|this
operator|.
name|testEnsureRebuiltRetryer
operator|=
name|testEnsureRebuiltRetryer
expr_stmt|;
name|skewMs
operator|=
name|NoteDbChangeState
operator|.
name|getReadOnlySkew
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|String
name|s
init|=
literal|"notedb"
decl_stmt|;
name|timeoutMs
operator|=
name|cfg
operator|.
name|getTimeUnit
argument_list|(
name|s
argument_list|,
literal|null
argument_list|,
literal|"primaryStorageMigrationTimeout"
argument_list|,
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|60
argument_list|,
name|SECONDS
argument_list|)
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Migrate a change's primary storage from ReviewDb to NoteDb.    *<p>    * This method will return only if the primary storage of the change is NoteDb    * afterwards. (It may return early if the primary storage was already    * NoteDb.)    *<p>    * If this method throws an exception, then the primary storage of the change    * is probably not NoteDb. (It is possible that the primary storage of the    * change is NoteDb in this case, but there was an error reading the state.)    * Moreover, after an exception, the change may be read-only until a lease    * expires. If the caller chooses to retry, they should wait until the    * read-only lease expires; this method will fail relatively quickly if called    * on a read-only change.    *<p>    * Note that if the change is read-only after this method throws an exception,    * that does not necessarily guarantee that the read-only lease was acquired    * during that particular method invocation; this call may have in fact failed    * because another thread acquired the lease first.    *    * @param id change ID.    *    * @throws OrmException if a ReviewDb-level error occurs.    * @throws IOException if a repo-level error occurs.    */
DECL|method|migrateToNoteDbPrimary (Change.Id id)
specifier|public
name|void
name|migrateToNoteDbPrimary
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
comment|// Since there are multiple non-atomic steps in this method, we need to
comment|// consider what happens when there is another writer concurrent with the
comment|// thread executing this method.
comment|//
comment|// Let:
comment|// * OR = other writer writes noteDbState& new data to ReviewDb (in one
comment|//        transaction)
comment|// * ON = other writer writes to NoteDb
comment|// * MRO = migrator sets state to read-only
comment|// * MR = ensureRebuilt writes rebuilt noteDbState to ReviewDb (but does not
comment|//        otherwise update ReviewDb in this transaction)
comment|// * MN = ensureRebuilt writes rebuilt state to NoteDb
comment|//
comment|// Consider all the interleavings of these operations.
comment|//
comment|// * OR,ON,MRO,...
comment|//   Other writer completes before migrator begins; this is not a concurrent
comment|//   write.
comment|// * MRO,...,OR,...
comment|//   OR will fail, since it atomically checks that the noteDbState is not
comment|//   read-only before proceeding. This results in an exception, but not a
comment|//   concurrent write.
comment|//
comment|// Thus all the "interesting" interleavings start with OR,MRO, and differ on
comment|// where ON falls relative to MR/MN.
comment|//
comment|// * OR,MRO,ON,MR,MN
comment|//   The other NoteDb write succeeds despite the noteDbState being
comment|//   read-only. Because the read-only state from MRO includes the update
comment|//   from OR, the change is up-to-date at this point. Thus MR,MN is a no-op.
comment|//   The end result is an up-to-date, read-only change.
comment|//
comment|// * OR,MRO,MR,ON,MN
comment|//   The change is out-of-date when ensureRebuilt begins, because OR
comment|//   succeeded but the corresponding ON has not happened yet. ON will
comment|//   succeed, because there have been no intervening NoteDb writes. MN will
comment|//   fail, because ON updated the state in NoteDb to something other than
comment|//   what MR claimed. This leaves the change in an out-of-date, read-only
comment|//   state.
comment|//
comment|//   If this method threw an exception in this case, the change would
comment|//   eventually switch back to read-write when the read-only lease expires,
comment|//   so this situation is recoverable. However, it would be inconvenient for
comment|//   a change to be read-only for so long.
comment|//
comment|//   Thus, as an optimization, we have a retry loop that attempts
comment|//   ensureRebuilt while still holding the same read-only lease. This
comment|//   effectively results in the interleaving OR,MR,ON,MR,MN; in contrast
comment|//   with the previous case, here, MR/MN actually rebuilds the change. In
comment|//   the case of a write failure, MR/MN might fail and get retried again. If
comment|//   it exceeds the maximum number of retries, an exception is thrown.
comment|//
comment|// * OR,MRO,MR,MN,ON
comment|//   The change is out-of-date when ensureRebuilt begins. The change is
comment|//   rebuilt, leaving a new state in NoteDb. ON will fail, because the old
comment|//   NoteDb state has changed since the ref state was read when the update
comment|//   began (prior to OR). This results in an exception from ON, but the end
comment|//   result is still an up-to-date, read-only change. The end user that
comment|//   initiated the other write observes an error, but this is no different
comment|//   from other errors that need retrying, e.g. due to a backend write
comment|//   failure.
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|Change
name|readOnlyChange
init|=
name|setReadOnly
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// MRO
if|if
condition|(
name|readOnlyChange
operator|==
literal|null
condition|)
block|{
return|return;
comment|// Already migrated.
block|}
name|NoteDbChangeState
name|rebuiltState
decl_stmt|;
try|try
block|{
comment|// MR,MN
name|rebuiltState
operator|=
name|ensureRebuiltRetryer
argument_list|(
name|sw
argument_list|)
operator|.
name|call
argument_list|(
parameter_list|()
lambda|->
name|ensureRebuilt
argument_list|(
name|readOnlyChange
operator|.
name|getProject
argument_list|()
argument_list|,
name|id
argument_list|,
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|readOnlyChange
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetryException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// At this point, the noteDbState in ReviewDb is read-only, and it is
comment|// guaranteed to match the state actually in NoteDb. Now it is safe to set
comment|// the primary storage to NoteDb.
name|setPrimaryStorageNoteDb
argument_list|(
name|id
argument_list|,
name|rebuiltState
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Migrated change {} to NoteDb primary in {}ms"
argument_list|,
name|id
argument_list|,
name|sw
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setReadOnly (Change.Id id)
specifier|private
name|Change
name|setReadOnly
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|OrmException
block|{
name|AtomicBoolean
name|alreadyMigrated
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Change
name|result
init|=
name|db
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|id
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
name|NoteDbChangeState
name|state
init|=
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|change
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
comment|// Could rebuild the change here, but that's more complexity, and this
comment|// really shouldn't happen.
throw|throw
operator|new
name|OrmRuntimeException
argument_list|(
literal|"change "
operator|+
name|id
operator|+
literal|" has no note_db_state; rebuild it first"
argument_list|)
throw|;
block|}
comment|// If the change is already read-only, then the lease is held by another
comment|// (likely failed) migrator thread. Fail early, as we can't take over
comment|// the lease.
name|NoteDbChangeState
operator|.
name|checkNotReadOnly
argument_list|(
name|change
argument_list|,
name|skewMs
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|getPrimaryStorage
argument_list|()
operator|!=
name|PrimaryStorage
operator|.
name|NOTE_DB
condition|)
block|{
name|Timestamp
name|now
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|Timestamp
name|until
init|=
operator|new
name|Timestamp
argument_list|(
name|now
operator|.
name|getTime
argument_list|()
operator|+
name|timeoutMs
argument_list|)
decl_stmt|;
name|change
operator|.
name|setNoteDbState
argument_list|(
name|state
operator|.
name|withReadOnlyUntil
argument_list|(
name|until
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|alreadyMigrated
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|change
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|alreadyMigrated
operator|.
name|get
argument_list|()
condition|?
literal|null
else|:
name|result
return|;
block|}
DECL|method|ensureRebuiltRetryer (Stopwatch sw)
specifier|private
name|Retryer
argument_list|<
name|NoteDbChangeState
argument_list|>
name|ensureRebuiltRetryer
parameter_list|(
name|Stopwatch
name|sw
parameter_list|)
block|{
if|if
condition|(
name|testEnsureRebuiltRetryer
operator|!=
literal|null
condition|)
block|{
return|return
name|testEnsureRebuiltRetryer
return|;
block|}
comment|// Retry the ensureRebuilt step with backoff until half the timeout has
comment|// expired, leaving the remaining half for the rest of the steps.
name|long
name|remainingNanos
init|=
operator|(
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
name|timeoutMs
argument_list|)
operator|/
literal|2
operator|)
operator|-
name|sw
operator|.
name|elapsed
argument_list|(
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|remainingNanos
operator|=
name|Math
operator|.
name|max
argument_list|(
name|remainingNanos
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|RetryerBuilder
operator|.
expr|<
name|NoteDbChangeState
operator|>
name|newBuilder
argument_list|()
operator|.
name|retryIfException
argument_list|(
name|e
lambda|->
operator|(
name|e
operator|instanceof
name|IOException
operator|)
operator|||
operator|(
name|e
operator|instanceof
name|OrmException
operator|)
argument_list|)
operator|.
name|withWaitStrategy
argument_list|(
name|WaitStrategies
operator|.
name|join
argument_list|(
name|WaitStrategies
operator|.
name|exponentialWait
argument_list|(
literal|250
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|,
name|WaitStrategies
operator|.
name|randomWait
argument_list|(
literal|50
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
argument_list|)
operator|.
name|withStopStrategy
argument_list|(
name|StopStrategies
operator|.
name|stopAfterDelay
argument_list|(
name|remainingNanos
argument_list|,
name|NANOSECONDS
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|ensureRebuilt (Project.NameKey project, Change.Id id, NoteDbChangeState readOnlyState)
specifier|private
name|NoteDbChangeState
name|ensureRebuilt
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|NoteDbChangeState
name|readOnlyState
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
throws|,
name|RepositoryNotFoundException
block|{
try|try
init|(
name|Repository
name|changeRepo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|Repository
name|allUsersRepo
operator|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
if|if
condition|(
operator|!
name|readOnlyState
operator|.
name|isUpToDate
argument_list|(
operator|new
name|RepoRefCache
argument_list|(
name|changeRepo
argument_list|)
argument_list|,
operator|new
name|RepoRefCache
argument_list|(
name|allUsersRepo
argument_list|)
argument_list|)
condition|)
block|{
name|NoteDbUpdateManager
operator|.
name|Result
name|r
init|=
name|rebuilder
operator|.
name|rebuildEvenIfReadOnly
argument_list|(
name|db
argument_list|()
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|r
operator|.
name|newState
argument_list|()
operator|.
name|getReadOnlyUntil
argument_list|()
operator|.
name|equals
argument_list|(
name|readOnlyState
operator|.
name|getReadOnlyUntil
argument_list|()
argument_list|)
argument_list|,
literal|"state after rebuilding has different read-only lease: %s != %s"
argument_list|,
name|r
operator|.
name|newState
argument_list|()
argument_list|,
name|readOnlyState
argument_list|)
expr_stmt|;
name|readOnlyState
operator|=
name|r
operator|.
name|newState
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|readOnlyState
return|;
block|}
DECL|method|setPrimaryStorageNoteDb (Change.Id id, NoteDbChangeState expectedState)
specifier|private
name|void
name|setPrimaryStorageNoteDb
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|NoteDbChangeState
name|expectedState
parameter_list|)
throws|throws
name|OrmException
block|{
name|db
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|id
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
name|NoteDbChangeState
name|state
init|=
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|change
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|state
argument_list|,
name|expectedState
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OrmRuntimeException
argument_list|(
name|badState
argument_list|(
name|state
argument_list|,
name|expectedState
argument_list|)
argument_list|)
throw|;
block|}
name|Timestamp
name|until
init|=
name|state
operator|.
name|getReadOnlyUntil
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
operator|.
name|after
argument_list|(
name|until
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OrmRuntimeException
argument_list|(
literal|"read-only lease on change "
operator|+
name|id
operator|+
literal|" expired at "
operator|+
name|until
argument_list|)
throw|;
block|}
name|change
operator|.
name|setNoteDbState
argument_list|(
name|NoteDbChangeState
operator|.
name|NOTE_DB_PRIMARY_STATE
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|db ()
specifier|private
name|ReviewDb
name|db
parameter_list|()
block|{
return|return
name|ReviewDbUtil
operator|.
name|unwrapDb
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|badState (NoteDbChangeState actual, NoteDbChangeState expected)
specifier|private
name|String
name|badState
parameter_list|(
name|NoteDbChangeState
name|actual
parameter_list|,
name|NoteDbChangeState
name|expected
parameter_list|)
block|{
return|return
literal|"state changed unexpectedly: "
operator|+
name|actual
operator|+
literal|" != "
operator|+
name|expected
return|;
block|}
block|}
end_class

end_unit

