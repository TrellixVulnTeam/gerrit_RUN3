begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_comment
comment|/** A set of changes grouped together to be submitted atomically.*/
end_comment

begin_class
annotation|@
name|AutoValue
DECL|class|ChangeSet
specifier|public
specifier|abstract
class|class
name|ChangeSet
block|{
DECL|method|create (Iterable<Change> changes)
specifier|public
specifier|static
name|ChangeSet
name|create
parameter_list|(
name|Iterable
argument_list|<
name|Change
argument_list|>
name|changes
parameter_list|)
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|pb
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|bb
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|ib
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|psb
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ImmutableSetMultimap
operator|.
name|Builder
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Branch
operator|.
name|NameKey
argument_list|>
name|pbb
init|=
name|ImmutableSetMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ImmutableSetMultimap
operator|.
name|Builder
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|pcb
init|=
name|ImmutableSetMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ImmutableSetMultimap
operator|.
name|Builder
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|cbb
init|=
name|ImmutableSetMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|Change
argument_list|>
name|cb
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Change
name|c
range|:
name|changes
control|)
block|{
name|Branch
operator|.
name|NameKey
name|branch
init|=
name|c
operator|.
name|getDest
argument_list|()
decl_stmt|;
name|Project
operator|.
name|NameKey
name|project
init|=
name|branch
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|pb
operator|.
name|add
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|bb
operator|.
name|add
argument_list|(
name|branch
argument_list|)
expr_stmt|;
name|ib
operator|.
name|add
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|psb
operator|.
name|add
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|pbb
operator|.
name|put
argument_list|(
name|project
argument_list|,
name|branch
argument_list|)
expr_stmt|;
name|pcb
operator|.
name|put
argument_list|(
name|project
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|cbb
operator|.
name|put
argument_list|(
name|branch
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|cb
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AutoValue_ChangeSet
argument_list|(
name|pb
operator|.
name|build
argument_list|()
argument_list|,
name|bb
operator|.
name|build
argument_list|()
argument_list|,
name|ib
operator|.
name|build
argument_list|()
argument_list|,
name|psb
operator|.
name|build
argument_list|()
argument_list|,
name|pbb
operator|.
name|build
argument_list|()
argument_list|,
name|pcb
operator|.
name|build
argument_list|()
argument_list|,
name|cbb
operator|.
name|build
argument_list|()
argument_list|,
name|cb
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|create (Change change)
specifier|public
specifier|static
name|ChangeSet
name|create
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|change
argument_list|)
argument_list|)
return|;
block|}
DECL|method|projects ()
specifier|public
specifier|abstract
name|ImmutableSet
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projects
parameter_list|()
function_decl|;
DECL|method|branches ()
specifier|public
specifier|abstract
name|ImmutableSet
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|branches
parameter_list|()
function_decl|;
DECL|method|ids ()
specifier|public
specifier|abstract
name|ImmutableSet
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|ids
parameter_list|()
function_decl|;
DECL|method|patchIds ()
specifier|public
specifier|abstract
name|ImmutableSet
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|patchIds
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|ImmutableSetMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Branch
operator|.
name|NameKey
argument_list|>
DECL|method|branchesByProject ()
name|branchesByProject
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|ImmutableSetMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
DECL|method|changesByProject ()
name|changesByProject
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|ImmutableSetMultimap
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
DECL|method|changesByBranch ()
name|changesByBranch
parameter_list|()
function_decl|;
DECL|method|changes ()
specifier|public
specifier|abstract
name|ImmutableSet
argument_list|<
name|Change
argument_list|>
name|changes
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|ids
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|ids
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

