begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb.rebuild
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|rebuild
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|changeMetaRef
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_HASHTAGS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_PATCH_SET
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CommentsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AnonymousCowardName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ChainedReceiveCommands
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeBundle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeBundleReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeDraftUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbChangeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbChangeState
operator|.
name|PrimaryStorage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbUpdateManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbUpdateManager
operator|.
name|OpenRepo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbUpdateManager
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ReviewerStateInternal
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|AtomicUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ChangeRebuilderImpl
specifier|public
class|class
name|ChangeRebuilderImpl
extends|extends
name|ChangeRebuilder
block|{
comment|/**    * The maximum amount of time between the ReviewDb timestamp of the first and    * last events batched together into a single NoteDb update.    *<p>    * Used to account for the fact that different records with their own    * timestamps (e.g. {@link PatchSetApproval} and {@link ChangeMessage})    * historically didn't necessarily use the same timestamp, and tended to call    * {@code System.currentTimeMillis()} independently.    */
DECL|field|MAX_WINDOW_MS
specifier|public
specifier|static
specifier|final
name|long
name|MAX_WINDOW_MS
init|=
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|/**    * The maximum amount of time between two consecutive events to consider them    * to be in the same batch.    */
DECL|field|MAX_DELTA_MS
specifier|static
specifier|final
name|long
name|MAX_DELTA_MS
init|=
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|bundleReader
specifier|private
specifier|final
name|ChangeBundleReader
name|bundleReader
decl_stmt|;
DECL|field|draftUpdateFactory
specifier|private
specifier|final
name|ChangeDraftUpdate
operator|.
name|Factory
name|draftUpdateFactory
decl_stmt|;
DECL|field|changeNoteUtil
specifier|private
specifier|final
name|ChangeNoteUtil
name|changeNoteUtil
decl_stmt|;
DECL|field|updateFactory
specifier|private
specifier|final
name|ChangeUpdate
operator|.
name|Factory
name|updateFactory
decl_stmt|;
DECL|field|updateManagerFactory
specifier|private
specifier|final
name|NoteDbUpdateManager
operator|.
name|Factory
name|updateManagerFactory
decl_stmt|;
DECL|field|migration
specifier|private
specifier|final
name|NotesMigration
name|migration
decl_stmt|;
DECL|field|patchListCache
specifier|private
specifier|final
name|PatchListCache
name|patchListCache
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|PersonIdent
name|serverIdent
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|anonymousCowardName
specifier|private
specifier|final
name|String
name|anonymousCowardName
decl_stmt|;
DECL|field|serverId
specifier|private
specifier|final
name|String
name|serverId
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChangeRebuilderImpl (SchemaFactory<ReviewDb> schemaFactory, AccountCache accountCache, ChangeBundleReader bundleReader, ChangeDraftUpdate.Factory draftUpdateFactory, ChangeNoteUtil changeNoteUtil, ChangeUpdate.Factory updateFactory, NoteDbUpdateManager.Factory updateManagerFactory, NotesMigration migration, PatchListCache patchListCache, @GerritPersonIdent PersonIdent serverIdent, @Nullable ProjectCache projectCache, @AnonymousCowardName String anonymousCowardName, @GerritServerId String serverId)
name|ChangeRebuilderImpl
parameter_list|(
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
parameter_list|,
name|AccountCache
name|accountCache
parameter_list|,
name|ChangeBundleReader
name|bundleReader
parameter_list|,
name|ChangeDraftUpdate
operator|.
name|Factory
name|draftUpdateFactory
parameter_list|,
name|ChangeNoteUtil
name|changeNoteUtil
parameter_list|,
name|ChangeUpdate
operator|.
name|Factory
name|updateFactory
parameter_list|,
name|NoteDbUpdateManager
operator|.
name|Factory
name|updateManagerFactory
parameter_list|,
name|NotesMigration
name|migration
parameter_list|,
name|PatchListCache
name|patchListCache
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverIdent
parameter_list|,
annotation|@
name|Nullable
name|ProjectCache
name|projectCache
parameter_list|,
annotation|@
name|AnonymousCowardName
name|String
name|anonymousCowardName
parameter_list|,
annotation|@
name|GerritServerId
name|String
name|serverId
parameter_list|)
block|{
name|super
argument_list|(
name|schemaFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|bundleReader
operator|=
name|bundleReader
expr_stmt|;
name|this
operator|.
name|draftUpdateFactory
operator|=
name|draftUpdateFactory
expr_stmt|;
name|this
operator|.
name|changeNoteUtil
operator|=
name|changeNoteUtil
expr_stmt|;
name|this
operator|.
name|updateFactory
operator|=
name|updateFactory
expr_stmt|;
name|this
operator|.
name|updateManagerFactory
operator|=
name|updateManagerFactory
expr_stmt|;
name|this
operator|.
name|migration
operator|=
name|migration
expr_stmt|;
name|this
operator|.
name|patchListCache
operator|=
name|patchListCache
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|anonymousCowardName
operator|=
name|anonymousCowardName
expr_stmt|;
name|this
operator|.
name|serverId
operator|=
name|serverId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rebuild (ReviewDb db, Change.Id changeId)
specifier|public
name|Result
name|rebuild
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|IOException
throws|,
name|OrmException
block|{
name|db
operator|=
name|ReviewDbUtil
operator|.
name|unwrapDb
argument_list|(
name|db
argument_list|)
expr_stmt|;
comment|// Read change just to get project; this instance is then discarded so we
comment|// can read a consistent ChangeBundle inside a transaction.
name|Change
name|change
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
try|try
init|(
name|NoteDbUpdateManager
name|manager
init|=
name|updateManagerFactory
operator|.
name|create
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
init|)
block|{
name|buildUpdates
argument_list|(
name|manager
argument_list|,
name|bundleReader
operator|.
name|fromReviewDb
argument_list|(
name|db
argument_list|,
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|execute
argument_list|(
name|db
argument_list|,
name|changeId
argument_list|,
name|manager
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|rebuild (NoteDbUpdateManager manager, ChangeBundle bundle)
specifier|public
name|Result
name|rebuild
parameter_list|(
name|NoteDbUpdateManager
name|manager
parameter_list|,
name|ChangeBundle
name|bundle
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|IOException
throws|,
name|OrmException
block|{
name|Change
name|change
init|=
operator|new
name|Change
argument_list|(
name|bundle
operator|.
name|getChange
argument_list|()
argument_list|)
decl_stmt|;
name|buildUpdates
argument_list|(
name|manager
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
return|return
name|manager
operator|.
name|stageAndApplyDelta
argument_list|(
name|change
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|stage (ReviewDb db, Change.Id changeId)
specifier|public
name|NoteDbUpdateManager
name|stage
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|IOException
throws|,
name|OrmException
block|{
name|db
operator|=
name|ReviewDbUtil
operator|.
name|unwrapDb
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Change
name|change
init|=
name|checkNoteDbState
argument_list|(
name|ChangeNotes
operator|.
name|readOneReviewDbChange
argument_list|(
name|db
argument_list|,
name|changeId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
name|NoteDbUpdateManager
name|manager
init|=
name|updateManagerFactory
operator|.
name|create
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
decl_stmt|;
name|buildUpdates
argument_list|(
name|manager
argument_list|,
name|bundleReader
operator|.
name|fromReviewDb
argument_list|(
name|db
argument_list|,
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|stage
argument_list|()
expr_stmt|;
return|return
name|manager
return|;
block|}
annotation|@
name|Override
DECL|method|execute (ReviewDb db, Change.Id changeId, NoteDbUpdateManager manager)
specifier|public
name|Result
name|execute
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|NoteDbUpdateManager
name|manager
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|OrmException
throws|,
name|IOException
block|{
name|db
operator|=
name|ReviewDbUtil
operator|.
name|unwrapDb
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Change
name|change
init|=
name|checkNoteDbState
argument_list|(
name|ChangeNotes
operator|.
name|readOneReviewDbChange
argument_list|(
name|db
argument_list|,
name|changeId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
specifier|final
name|String
name|oldNoteDbState
init|=
name|change
operator|.
name|getNoteDbState
argument_list|()
decl_stmt|;
name|Result
name|r
init|=
name|manager
operator|.
name|stageAndApplyDelta
argument_list|(
name|change
argument_list|)
decl_stmt|;
specifier|final
name|String
name|newNoteDbState
init|=
name|change
operator|.
name|getNoteDbState
argument_list|()
decl_stmt|;
try|try
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|changeId
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
name|String
name|currNoteDbState
init|=
name|change
operator|.
name|getNoteDbState
argument_list|()
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|currNoteDbState
argument_list|,
name|newNoteDbState
argument_list|)
condition|)
block|{
comment|// Another thread completed the same rebuild we were about to.
throw|throw
operator|new
name|AbortUpdateException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|oldNoteDbState
argument_list|,
name|currNoteDbState
argument_list|)
condition|)
block|{
comment|// Another thread updated the state to something else.
throw|throw
operator|new
name|ConflictingUpdateException
argument_list|(
name|change
argument_list|,
name|oldNoteDbState
argument_list|)
throw|;
block|}
name|change
operator|.
name|setNoteDbState
argument_list|(
name|newNoteDbState
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConflictingUpdateException
name|e
parameter_list|)
block|{
comment|// Rethrow as an OrmException so the caller knows to use staged results.
comment|// Strictly speaking they are not completely up to date, but result we
comment|// send to the caller is the same as if this rebuild had executed before
comment|// the other thread.
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AbortUpdateException
name|e
parameter_list|)
block|{
if|if
condition|(
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|changeId
argument_list|,
name|newNoteDbState
argument_list|)
operator|.
name|isUpToDate
argument_list|(
name|manager
operator|.
name|getChangeRepo
argument_list|()
operator|.
name|cmds
operator|.
name|getRepoRefCache
argument_list|()
argument_list|,
name|manager
operator|.
name|getAllUsersRepo
argument_list|()
operator|.
name|cmds
operator|.
name|getRepoRefCache
argument_list|()
argument_list|)
condition|)
block|{
comment|// If the state in ReviewDb matches NoteDb at this point, it means
comment|// another thread successfully completed this rebuild. It's ok to not
comment|// execute the update in this case, since the object referenced in the
comment|// Result was flushed to the repo by whatever thread won the race.
return|return
name|r
return|;
block|}
comment|// If the state doesn't match, that means another thread attempted this
comment|// rebuild, but failed. Fall through and try to update the ref again.
block|}
if|if
condition|(
name|migration
operator|.
name|failChangeWrites
argument_list|()
condition|)
block|{
comment|// Don't even attempt to execute if read-only, it would fail anyway. But
comment|// do throw an exception to the caller so they know to use the staged
comment|// results instead of reading from the repo.
throw|throw
operator|new
name|OrmException
argument_list|(
name|NoteDbUpdateManager
operator|.
name|CHANGES_READ_ONLY
argument_list|)
throw|;
block|}
name|manager
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|checkNoteDbState (Change c)
specifier|private
specifier|static
name|Change
name|checkNoteDbState
parameter_list|(
name|Change
name|c
parameter_list|)
throws|throws
name|OrmException
block|{
comment|// Can only rebuild a change if its primary storage is ReviewDb.
name|NoteDbChangeState
name|s
init|=
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|s
operator|.
name|getPrimaryStorage
argument_list|()
operator|!=
name|PrimaryStorage
operator|.
name|REVIEW_DB
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"cannot rebuild change "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|+
literal|" with state "
operator|+
name|s
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|c
return|;
block|}
annotation|@
name|Override
DECL|method|buildUpdates (NoteDbUpdateManager manager, ChangeBundle bundle)
specifier|public
name|void
name|buildUpdates
parameter_list|(
name|NoteDbUpdateManager
name|manager
parameter_list|,
name|ChangeBundle
name|bundle
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
block|{
name|manager
operator|.
name|setCheckExpectedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Change
name|change
init|=
operator|new
name|Change
argument_list|(
name|bundle
operator|.
name|getChange
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|.
name|getPatchSets
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoPatchSetsException
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
comment|// We will rebuild all events, except for draft comments, in buckets based
comment|// on author and timestamp.
name|List
argument_list|<
name|Event
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|DraftCommentEvent
argument_list|>
name|draftCommentEvents
init|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|events
operator|.
name|addAll
argument_list|(
name|getHashtagsEvents
argument_list|(
name|change
argument_list|,
name|manager
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete ref only after hashtags have been read
name|deleteChangeMetaRef
argument_list|(
name|change
argument_list|,
name|manager
operator|.
name|getChangeRepo
argument_list|()
operator|.
name|cmds
argument_list|)
expr_stmt|;
name|deleteDraftRefs
argument_list|(
name|change
argument_list|,
name|manager
operator|.
name|getAllUsersRepo
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|minPsNum
init|=
name|getMinPatchSetNum
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetEvent
argument_list|>
name|patchSetEvents
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|bundle
operator|.
name|getPatchSets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSet
name|ps
range|:
name|bundle
operator|.
name|getPatchSets
argument_list|()
control|)
block|{
name|PatchSetEvent
name|pse
init|=
operator|new
name|PatchSetEvent
argument_list|(
name|change
argument_list|,
name|ps
argument_list|,
name|manager
operator|.
name|getChangeRepo
argument_list|()
operator|.
name|rw
argument_list|)
decl_stmt|;
name|patchSetEvents
operator|.
name|put
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|pse
argument_list|)
expr_stmt|;
name|events
operator|.
name|add
argument_list|(
name|pse
argument_list|)
expr_stmt|;
for|for
control|(
name|Comment
name|c
range|:
name|getComments
argument_list|(
name|bundle
argument_list|,
name|serverId
argument_list|,
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|ps
argument_list|)
control|)
block|{
name|CommentEvent
name|e
init|=
operator|new
name|CommentEvent
argument_list|(
name|c
argument_list|,
name|change
argument_list|,
name|ps
argument_list|,
name|patchListCache
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
name|e
operator|.
name|addDep
argument_list|(
name|pse
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Comment
name|c
range|:
name|getComments
argument_list|(
name|bundle
argument_list|,
name|serverId
argument_list|,
name|Status
operator|.
name|DRAFT
argument_list|,
name|ps
argument_list|)
control|)
block|{
name|DraftCommentEvent
name|e
init|=
operator|new
name|DraftCommentEvent
argument_list|(
name|c
argument_list|,
name|change
argument_list|,
name|ps
argument_list|,
name|patchListCache
argument_list|)
decl_stmt|;
name|draftCommentEvents
operator|.
name|put
argument_list|(
name|c
operator|.
name|author
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|bundle
operator|.
name|getPatchSetApprovals
argument_list|()
control|)
block|{
name|PatchSetEvent
name|pse
init|=
name|patchSetEvents
operator|.
name|get
argument_list|(
name|psa
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pse
operator|!=
literal|null
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
operator|new
name|ApprovalEvent
argument_list|(
name|psa
argument_list|,
name|change
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|.
name|addDep
argument_list|(
name|pse
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Table
operator|.
name|Cell
argument_list|<
name|ReviewerStateInternal
argument_list|,
name|Account
operator|.
name|Id
argument_list|,
name|Timestamp
argument_list|>
name|r
range|:
name|bundle
operator|.
name|getReviewers
argument_list|()
operator|.
name|asTable
argument_list|()
operator|.
name|cellSet
argument_list|()
control|)
block|{
name|events
operator|.
name|add
argument_list|(
operator|new
name|ReviewerEvent
argument_list|(
name|r
argument_list|,
name|change
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Change
name|noteDbChange
init|=
operator|new
name|Change
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeMessage
name|msg
range|:
name|bundle
operator|.
name|getChangeMessages
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Event
argument_list|>
name|msgEvents
init|=
name|parseChangeMessage
argument_list|(
name|msg
argument_list|,
name|change
argument_list|,
name|noteDbChange
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|getPatchSetId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PatchSetEvent
name|pse
init|=
name|patchSetEvents
operator|.
name|get
argument_list|(
name|msg
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pse
operator|==
literal|null
condition|)
block|{
continue|continue;
comment|// Ignore events for missing patch sets.
block|}
for|for
control|(
name|Event
name|e
range|:
name|msgEvents
control|)
block|{
name|e
operator|.
name|addDep
argument_list|(
name|pse
argument_list|)
expr_stmt|;
block|}
block|}
name|events
operator|.
name|addAll
argument_list|(
name|msgEvents
argument_list|)
expr_stmt|;
block|}
name|sortAndFillEvents
argument_list|(
name|change
argument_list|,
name|noteDbChange
argument_list|,
name|bundle
operator|.
name|getPatchSets
argument_list|()
argument_list|,
name|events
argument_list|,
name|minPsNum
argument_list|)
expr_stmt|;
name|EventList
argument_list|<
name|Event
argument_list|>
name|el
init|=
operator|new
name|EventList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Event
name|e
range|:
name|events
control|)
block|{
if|if
condition|(
operator|!
name|el
operator|.
name|canAdd
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|flushEventsToUpdate
argument_list|(
name|manager
argument_list|,
name|el
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|el
operator|.
name|canAdd
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|el
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|flushEventsToUpdate
argument_list|(
name|manager
argument_list|,
name|el
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|EventList
argument_list|<
name|DraftCommentEvent
argument_list|>
name|plcel
init|=
operator|new
name|EventList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|author
range|:
name|draftCommentEvents
operator|.
name|keys
argument_list|()
control|)
block|{
for|for
control|(
name|DraftCommentEvent
name|e
range|:
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|draftCommentEvents
operator|.
name|get
argument_list|(
name|author
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|plcel
operator|.
name|canAdd
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|flushEventsToDraftUpdate
argument_list|(
name|manager
argument_list|,
name|plcel
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|plcel
operator|.
name|canAdd
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|plcel
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|flushEventsToDraftUpdate
argument_list|(
name|manager
argument_list|,
name|plcel
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseChangeMessage (ChangeMessage msg, Change change, Change noteDbChange)
specifier|private
name|List
argument_list|<
name|Event
argument_list|>
name|parseChangeMessage
parameter_list|(
name|ChangeMessage
name|msg
parameter_list|,
name|Change
name|change
parameter_list|,
name|Change
name|noteDbChange
parameter_list|)
block|{
name|List
argument_list|<
name|Event
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
operator|new
name|ChangeMessageEvent
argument_list|(
name|msg
argument_list|,
name|noteDbChange
argument_list|,
name|change
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|StatusChangeEvent
argument_list|>
name|sce
init|=
name|StatusChangeEvent
operator|.
name|parseFromMessage
argument_list|(
name|msg
argument_list|,
name|change
argument_list|,
name|noteDbChange
argument_list|)
decl_stmt|;
if|if
condition|(
name|sce
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
name|sce
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|events
return|;
block|}
DECL|method|getMinPatchSetNum (ChangeBundle bundle)
specifier|private
specifier|static
name|Integer
name|getMinPatchSetNum
parameter_list|(
name|ChangeBundle
name|bundle
parameter_list|)
block|{
name|Integer
name|minPsNum
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PatchSet
name|ps
range|:
name|bundle
operator|.
name|getPatchSets
argument_list|()
control|)
block|{
name|int
name|n
init|=
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|minPsNum
operator|==
literal|null
operator|||
name|n
operator|<
name|minPsNum
condition|)
block|{
name|minPsNum
operator|=
name|n
expr_stmt|;
block|}
block|}
return|return
name|minPsNum
return|;
block|}
DECL|method|getComments (ChangeBundle bundle, String serverId, PatchLineComment.Status status, PatchSet ps)
specifier|private
specifier|static
name|List
argument_list|<
name|Comment
argument_list|>
name|getComments
parameter_list|(
name|ChangeBundle
name|bundle
parameter_list|,
name|String
name|serverId
parameter_list|,
name|PatchLineComment
operator|.
name|Status
name|status
parameter_list|,
name|PatchSet
name|ps
parameter_list|)
block|{
return|return
name|bundle
operator|.
name|getPatchLineComments
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|c
lambda|->
name|c
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|equals
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
operator|&&
name|c
operator|.
name|getStatus
argument_list|()
operator|==
name|status
argument_list|)
operator|.
name|map
argument_list|(
name|plc
lambda|->
name|plc
operator|.
name|asComment
argument_list|(
name|serverId
argument_list|)
argument_list|)
operator|.
name|sorted
argument_list|(
name|CommentsUtil
operator|.
name|COMMENT_ORDER
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|sortAndFillEvents (Change change, Change noteDbChange, ImmutableCollection<PatchSet> patchSets, List<Event> events, Integer minPsNum)
specifier|private
name|void
name|sortAndFillEvents
parameter_list|(
name|Change
name|change
parameter_list|,
name|Change
name|noteDbChange
parameter_list|,
name|ImmutableCollection
argument_list|<
name|PatchSet
argument_list|>
name|patchSets
parameter_list|,
name|List
argument_list|<
name|Event
argument_list|>
name|events
parameter_list|,
name|Integer
name|minPsNum
parameter_list|)
block|{
name|Event
name|finalUpdates
init|=
operator|new
name|FinalUpdatesEvent
argument_list|(
name|change
argument_list|,
name|noteDbChange
argument_list|,
name|patchSets
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
name|finalUpdates
argument_list|)
expr_stmt|;
name|setPostSubmitDeps
argument_list|(
name|events
argument_list|)
expr_stmt|;
operator|new
name|EventSorter
argument_list|(
name|events
argument_list|)
operator|.
name|sort
argument_list|()
expr_stmt|;
comment|// Ensure the first event in the list creates the change, setting the author
comment|// and any required footers.
name|Event
name|first
init|=
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|instanceof
name|PatchSetEvent
operator|&&
name|change
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|first
operator|.
name|user
argument_list|)
condition|)
block|{
operator|(
operator|(
name|PatchSetEvent
operator|)
name|first
operator|)
operator|.
name|createChange
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|events
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|CreateChangeEvent
argument_list|(
name|change
argument_list|,
name|minPsNum
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Final pass to correct some inconsistencies.
comment|//
comment|// First, fill in any missing patch set IDs using the latest patch set of
comment|// the change at the time of the event, because NoteDb can't represent
comment|// actions with no associated patch set ID. This workaround is as if a user
comment|// added a ChangeMessage on the change by replying from the latest patch
comment|// set.
comment|//
comment|// Start with the first patch set that actually exists. If there are no
comment|// patch sets at all, minPsNum will be null, so just bail and use 1 as the
comment|// patch set ID. The corresponding patch set won't exist, but this change is
comment|// probably corrupt anyway, as deleting the last draft patch set should have
comment|// deleted the whole change.
comment|//
comment|// Second, ensure timestamps are nondecreasing, by copying the previous
comment|// timestamp if this happens. This assumes that the only way this can happen
comment|// is due to dependency constraints, and it is ok to give an event the same
comment|// timestamp as one of its dependencies.
name|int
name|ps
init|=
name|firstNonNull
argument_list|(
name|minPsNum
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|events
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Event
name|e
init|=
name|events
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|psId
operator|==
literal|null
condition|)
block|{
name|e
operator|.
name|psId
operator|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ps
operator|=
name|Math
operator|.
name|max
argument_list|(
name|ps
argument_list|,
name|e
operator|.
name|psId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|Event
name|p
init|=
name|events
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|when
operator|.
name|before
argument_list|(
name|p
operator|.
name|when
argument_list|)
condition|)
block|{
name|e
operator|.
name|when
operator|=
name|p
operator|.
name|when
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|setPostSubmitDeps (List<Event> events)
specifier|private
name|void
name|setPostSubmitDeps
parameter_list|(
name|List
argument_list|<
name|Event
argument_list|>
name|events
parameter_list|)
block|{
name|Optional
argument_list|<
name|Event
argument_list|>
name|submitEvent
init|=
name|Lists
operator|.
name|reverse
argument_list|(
name|events
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|Event
operator|::
name|isSubmit
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|submitEvent
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|events
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|Event
operator|::
name|isPostSubmitApproval
argument_list|)
operator|.
name|forEach
argument_list|(
name|e
lambda|->
name|e
operator|.
name|addDep
argument_list|(
name|submitEvent
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|flushEventsToUpdate (NoteDbUpdateManager manager, EventList<Event> events, Change change)
specifier|private
name|void
name|flushEventsToUpdate
parameter_list|(
name|NoteDbUpdateManager
name|manager
parameter_list|,
name|EventList
argument_list|<
name|Event
argument_list|>
name|events
parameter_list|,
name|Change
name|change
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
if|if
condition|(
name|events
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Comparator
argument_list|<
name|String
argument_list|>
name|labelNameComparator
decl_stmt|;
if|if
condition|(
name|projectCache
operator|!=
literal|null
condition|)
block|{
name|labelNameComparator
operator|=
name|projectCache
operator|.
name|get
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|nameComparator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// No project cache available, bail and use natural ordering; there's no
comment|// semantic difference anyway difference.
name|labelNameComparator
operator|=
name|Ordering
operator|.
name|natural
argument_list|()
expr_stmt|;
block|}
name|ChangeUpdate
name|update
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|change
argument_list|,
name|events
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|events
operator|.
name|getRealAccountId
argument_list|()
argument_list|,
name|newAuthorIdent
argument_list|(
name|events
argument_list|)
argument_list|,
name|events
operator|.
name|getWhen
argument_list|()
argument_list|,
name|labelNameComparator
argument_list|)
decl_stmt|;
name|update
operator|.
name|setAllowWriteToNewRef
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|events
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setTag
argument_list|(
name|events
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Event
name|e
range|:
name|events
control|)
block|{
name|e
operator|.
name|apply
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|add
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|flushEventsToDraftUpdate (NoteDbUpdateManager manager, EventList<DraftCommentEvent> events, Change change)
specifier|private
name|void
name|flushEventsToDraftUpdate
parameter_list|(
name|NoteDbUpdateManager
name|manager
parameter_list|,
name|EventList
argument_list|<
name|DraftCommentEvent
argument_list|>
name|events
parameter_list|,
name|Change
name|change
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|events
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|ChangeDraftUpdate
name|update
init|=
name|draftUpdateFactory
operator|.
name|create
argument_list|(
name|change
argument_list|,
name|events
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|events
operator|.
name|getRealAccountId
argument_list|()
argument_list|,
name|newAuthorIdent
argument_list|(
name|events
argument_list|)
argument_list|,
name|events
operator|.
name|getWhen
argument_list|()
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|events
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DraftCommentEvent
name|e
range|:
name|events
control|)
block|{
name|e
operator|.
name|applyDraft
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|add
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|newAuthorIdent (EventList<?> events)
specifier|private
name|PersonIdent
name|newAuthorIdent
parameter_list|(
name|EventList
argument_list|<
name|?
argument_list|>
name|events
parameter_list|)
block|{
name|Account
operator|.
name|Id
name|id
init|=
name|events
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|PersonIdent
argument_list|(
name|serverIdent
argument_list|,
name|events
operator|.
name|getWhen
argument_list|()
argument_list|)
return|;
block|}
return|return
name|changeNoteUtil
operator|.
name|newIdent
argument_list|(
name|accountCache
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getAccount
argument_list|()
argument_list|,
name|events
operator|.
name|getWhen
argument_list|()
argument_list|,
name|serverIdent
argument_list|,
name|anonymousCowardName
argument_list|)
return|;
block|}
DECL|method|getHashtagsEvents (Change change, NoteDbUpdateManager manager)
specifier|private
name|List
argument_list|<
name|HashtagsEvent
argument_list|>
name|getHashtagsEvents
parameter_list|(
name|Change
name|change
parameter_list|,
name|NoteDbUpdateManager
name|manager
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|refName
init|=
name|changeMetaRef
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ObjectId
argument_list|>
name|old
init|=
name|manager
operator|.
name|getChangeRepo
argument_list|()
operator|.
name|getObjectId
argument_list|(
name|refName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|old
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|RevWalk
name|rw
init|=
name|manager
operator|.
name|getChangeRepo
argument_list|()
operator|.
name|rw
decl_stmt|;
name|List
argument_list|<
name|HashtagsEvent
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|old
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RevCommit
name|commit
range|:
name|rw
control|)
block|{
name|Account
operator|.
name|Id
name|authorId
decl_stmt|;
try|try
block|{
name|authorId
operator|=
name|changeNoteUtil
operator|.
name|parseIdent
argument_list|(
name|commit
operator|.
name|getAuthorIdent
argument_list|()
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|e
parameter_list|)
block|{
continue|continue;
comment|// Corrupt data, no valid hashtags in this commit.
block|}
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|parsePatchSetId
argument_list|(
name|change
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
init|=
name|parseHashtags
argument_list|(
name|commit
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorId
operator|==
literal|null
operator|||
name|psId
operator|==
literal|null
operator|||
name|hashtags
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Timestamp
name|commitTime
init|=
operator|new
name|Timestamp
argument_list|(
name|commit
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
operator|new
name|HashtagsEvent
argument_list|(
name|psId
argument_list|,
name|authorId
argument_list|,
name|commitTime
argument_list|,
name|hashtags
argument_list|,
name|change
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|events
return|;
block|}
DECL|method|parseHashtags (RevCommit commit)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|parseHashtags
parameter_list|(
name|RevCommit
name|commit
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|hashtagsLines
init|=
name|commit
operator|.
name|getFooterLines
argument_list|(
name|FOOTER_HASHTAGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|hashtagsLines
operator|.
name|isEmpty
argument_list|()
operator|||
name|hashtagsLines
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|hashtagsLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|split
argument_list|(
name|hashtagsLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parsePatchSetId (Change change, RevCommit commit)
specifier|private
name|PatchSet
operator|.
name|Id
name|parsePatchSetId
parameter_list|(
name|Change
name|change
parameter_list|,
name|RevCommit
name|commit
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|psIdLines
init|=
name|commit
operator|.
name|getFooterLines
argument_list|(
name|FOOTER_PATCH_SET
argument_list|)
decl_stmt|;
if|if
condition|(
name|psIdLines
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Integer
name|psId
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|psIdLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|psId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|psId
argument_list|)
return|;
block|}
DECL|method|deleteChangeMetaRef (Change change, ChainedReceiveCommands cmds)
specifier|private
name|void
name|deleteChangeMetaRef
parameter_list|(
name|Change
name|change
parameter_list|,
name|ChainedReceiveCommands
name|cmds
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|refName
init|=
name|changeMetaRef
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ObjectId
argument_list|>
name|old
init|=
name|cmds
operator|.
name|get
argument_list|(
name|refName
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|cmds
operator|.
name|add
argument_list|(
operator|new
name|ReceiveCommand
argument_list|(
name|old
operator|.
name|get
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|refName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteDraftRefs (Change change, OpenRepo allUsersRepo)
specifier|private
name|void
name|deleteDraftRefs
parameter_list|(
name|Change
name|change
parameter_list|,
name|OpenRepo
name|allUsersRepo
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Ref
name|r
range|:
name|allUsersRepo
operator|.
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|RefNames
operator|.
name|refsDraftCommentsPrefix
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
name|allUsersRepo
operator|.
name|cmds
operator|.
name|add
argument_list|(
operator|new
name|ReceiveCommand
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|r
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createChange (ChangeUpdate update, Change change)
specifier|static
name|void
name|createChange
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|,
name|Change
name|change
parameter_list|)
block|{
name|update
operator|.
name|setSubjectForCommit
argument_list|(
literal|"Create change"
argument_list|)
expr_stmt|;
name|update
operator|.
name|setChangeId
argument_list|(
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setBranch
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setSubject
argument_list|(
name|change
operator|.
name|getOriginalSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

