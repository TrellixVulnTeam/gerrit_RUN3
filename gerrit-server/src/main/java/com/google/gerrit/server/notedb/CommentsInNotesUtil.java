begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|GERRIT_PLACEHOLDER_HOST
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
operator|.
name|parseException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|OBJ_BLOB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|CommentRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AnonymousCowardName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|Note
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|GitDateFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|GitDateFormatter
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|GitDateParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|MutableInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|QuotedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|RawParseUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Utility functions to parse PatchLineComments out of a note byte array and  * store a list of PatchLineComments in the form of a note (in a byte array).  **/
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|CommentsInNotesUtil
specifier|public
class|class
name|CommentsInNotesUtil
block|{
DECL|field|AUTHOR
specifier|private
specifier|static
specifier|final
name|String
name|AUTHOR
init|=
literal|"Author"
decl_stmt|;
DECL|field|BASE_PATCH_SET
specifier|private
specifier|static
specifier|final
name|String
name|BASE_PATCH_SET
init|=
literal|"Base-for-patch-set"
decl_stmt|;
DECL|field|COMMENT_RANGE
specifier|private
specifier|static
specifier|final
name|String
name|COMMENT_RANGE
init|=
literal|"Comment-range"
decl_stmt|;
DECL|field|FILE
specifier|private
specifier|static
specifier|final
name|String
name|FILE
init|=
literal|"File"
decl_stmt|;
DECL|field|LENGTH
specifier|private
specifier|static
specifier|final
name|String
name|LENGTH
init|=
literal|"Bytes"
decl_stmt|;
DECL|field|PARENT
specifier|private
specifier|static
specifier|final
name|String
name|PARENT
init|=
literal|"Parent"
decl_stmt|;
DECL|field|PATCH_SET
specifier|private
specifier|static
specifier|final
name|String
name|PATCH_SET
init|=
literal|"Patch-set"
decl_stmt|;
DECL|field|REVISION
specifier|private
specifier|static
specifier|final
name|String
name|REVISION
init|=
literal|"Revision"
decl_stmt|;
DECL|field|UUID
specifier|private
specifier|static
specifier|final
name|String
name|UUID
init|=
literal|"UUID"
decl_stmt|;
DECL|field|MAX_NOTE_SZ
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NOTE_SZ
init|=
literal|25
operator|<<
literal|20
decl_stmt|;
DECL|method|parseCommentsFromNotes (Repository repo, String refName, RevWalk walk, Change.Id changeId, Multimap<PatchSet.Id, PatchLineComment> commentsForBase, Multimap<PatchSet.Id, PatchLineComment> commentsForPs, Status status)
specifier|public
specifier|static
name|NoteMap
name|parseCommentsFromNotes
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|String
name|refName
parameter_list|,
name|RevWalk
name|walk
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|Multimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchLineComment
argument_list|>
name|commentsForBase
parameter_list|,
name|Multimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchLineComment
argument_list|>
name|commentsForPs
parameter_list|,
name|Status
name|status
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|getRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ObjectReader
name|reader
init|=
name|walk
operator|.
name|getObjectReader
argument_list|()
decl_stmt|;
name|RevCommit
name|commit
init|=
name|walk
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|NoteMap
name|noteMap
init|=
name|NoteMap
operator|.
name|read
argument_list|(
name|reader
argument_list|,
name|commit
argument_list|)
decl_stmt|;
for|for
control|(
name|Note
name|note
range|:
name|noteMap
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|reader
operator|.
name|open
argument_list|(
name|note
operator|.
name|getData
argument_list|()
argument_list|,
name|OBJ_BLOB
argument_list|)
operator|.
name|getCachedBytes
argument_list|(
name|MAX_NOTE_SZ
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|result
init|=
name|parseNote
argument_list|(
name|bytes
argument_list|,
name|changeId
argument_list|,
name|status
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|short
name|side
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSide
argument_list|()
decl_stmt|;
if|if
condition|(
name|side
operator|==
literal|0
condition|)
block|{
name|commentsForBase
operator|.
name|putAll
argument_list|(
name|psId
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commentsForPs
operator|.
name|putAll
argument_list|(
name|psId
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|noteMap
return|;
block|}
DECL|method|parseNote (byte[] note, Change.Id changeId, Status status)
specifier|public
specifier|static
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|parseNote
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|Status
name|status
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|int
name|sizeOfNote
init|=
name|note
operator|.
name|length
decl_stmt|;
name|Charset
name|enc
init|=
name|RawParseUtils
operator|.
name|parseEncoding
argument_list|(
name|note
argument_list|)
decl_stmt|;
name|MutableInteger
name|curr
init|=
operator|new
name|MutableInteger
argument_list|()
decl_stmt|;
name|curr
operator|.
name|value
operator|=
literal|0
expr_stmt|;
name|boolean
name|isForBase
init|=
operator|(
name|RawParseUtils
operator|.
name|match
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|PATCH_SET
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
operator|)
operator|<
literal|0
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|parsePsId
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|enc
argument_list|,
name|isForBase
condition|?
name|BASE_PATCH_SET
else|:
name|PATCH_SET
argument_list|)
decl_stmt|;
name|RevId
name|revId
init|=
operator|new
name|RevId
argument_list|(
name|parseStringField
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|enc
argument_list|,
name|REVISION
argument_list|)
argument_list|)
decl_stmt|;
name|PatchLineComment
name|c
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|curr
operator|.
name|value
operator|<
name|sizeOfNote
condition|)
block|{
name|String
name|previousFileName
init|=
name|c
operator|==
literal|null
condition|?
literal|null
else|:
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|getFileName
argument_list|()
decl_stmt|;
name|c
operator|=
name|parseComment
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|previousFileName
argument_list|,
name|psId
argument_list|,
name|revId
argument_list|,
name|isForBase
argument_list|,
name|enc
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|formatTime (PersonIdent ident, Timestamp t)
specifier|public
specifier|static
name|String
name|formatTime
parameter_list|(
name|PersonIdent
name|ident
parameter_list|,
name|Timestamp
name|t
parameter_list|)
block|{
name|GitDateFormatter
name|dateFormatter
init|=
operator|new
name|GitDateFormatter
argument_list|(
name|Format
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
comment|// TODO(dborowitz): Use a ThreadLocal or use Joda.
name|PersonIdent
name|newIdent
init|=
operator|new
name|PersonIdent
argument_list|(
name|ident
argument_list|,
name|t
argument_list|)
decl_stmt|;
return|return
name|dateFormatter
operator|.
name|formatDate
argument_list|(
name|newIdent
argument_list|)
return|;
block|}
DECL|method|getCommentPsId (PatchLineComment plc)
specifier|public
specifier|static
name|PatchSet
operator|.
name|Id
name|getCommentPsId
parameter_list|(
name|PatchLineComment
name|plc
parameter_list|)
block|{
return|return
name|plc
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
return|;
block|}
DECL|method|parseComment (byte[] note, MutableInteger curr, String currentFileName, PatchSet.Id psId, RevId revId, boolean isForBase, Charset enc, Status status)
specifier|private
specifier|static
name|PatchLineComment
name|parseComment
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|String
name|currentFileName
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|RevId
name|revId
parameter_list|,
name|boolean
name|isForBase
parameter_list|,
name|Charset
name|enc
parameter_list|,
name|Status
name|status
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|Change
operator|.
name|Id
name|changeId
init|=
name|psId
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
comment|// Check if there is a new file.
name|boolean
name|newFile
init|=
operator|(
name|RawParseUtils
operator|.
name|match
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|FILE
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
operator|)
operator|!=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|newFile
condition|)
block|{
comment|// If so, parse the new file name.
name|currentFileName
operator|=
name|parseFilename
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|enc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFileName
operator|==
literal|null
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|FILE
argument_list|)
throw|;
block|}
name|CommentRange
name|range
init|=
name|parseCommentRange
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|==
literal|null
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|COMMENT_RANGE
argument_list|)
throw|;
block|}
name|Timestamp
name|commentTime
init|=
name|parseTimestamp
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|enc
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|aId
init|=
name|parseAuthor
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|enc
argument_list|)
decl_stmt|;
name|boolean
name|hasParent
init|=
operator|(
name|RawParseUtils
operator|.
name|match
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|PARENT
operator|.
name|getBytes
argument_list|(
name|enc
argument_list|)
argument_list|)
operator|)
operator|!=
operator|-
literal|1
decl_stmt|;
name|String
name|parentUUID
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasParent
condition|)
block|{
name|parentUUID
operator|=
name|parseStringField
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|enc
argument_list|,
name|PARENT
argument_list|)
expr_stmt|;
block|}
name|String
name|uuid
init|=
name|parseStringField
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|enc
argument_list|,
name|UUID
argument_list|)
decl_stmt|;
name|int
name|commentLength
init|=
name|parseCommentLength
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|enc
argument_list|)
decl_stmt|;
name|String
name|message
init|=
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|enc
argument_list|,
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|curr
operator|.
name|value
operator|+
name|commentLength
argument_list|)
decl_stmt|;
name|checkResult
argument_list|(
name|message
argument_list|,
literal|"message contents"
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|PatchLineComment
name|plc
init|=
operator|new
name|PatchLineComment
argument_list|(
operator|new
name|PatchLineComment
operator|.
name|Key
argument_list|(
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|psId
argument_list|,
name|currentFileName
argument_list|)
argument_list|,
name|uuid
argument_list|)
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|aId
argument_list|,
name|parentUUID
argument_list|,
name|commentTime
argument_list|)
decl_stmt|;
name|plc
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|plc
operator|.
name|setSide
argument_list|(
call|(
name|short
call|)
argument_list|(
name|isForBase
condition|?
literal|0
else|:
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|range
operator|.
name|getStartCharacter
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|plc
operator|.
name|setRange
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
name|plc
operator|.
name|setRevId
argument_list|(
name|revId
argument_list|)
expr_stmt|;
name|plc
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|curr
operator|.
name|value
operator|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
operator|+
name|commentLength
argument_list|)
expr_stmt|;
name|curr
operator|.
name|value
operator|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
expr_stmt|;
return|return
name|plc
return|;
block|}
DECL|method|parseStringField (byte[] note, MutableInteger curr, Change.Id changeId, Charset enc, String fieldName)
specifier|private
specifier|static
name|String
name|parseStringField
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|Charset
name|enc
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|int
name|endOfLine
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
decl_stmt|;
name|checkHeaderLineFormat
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|fieldName
argument_list|,
name|enc
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|int
name|startOfField
init|=
name|RawParseUtils
operator|.
name|endOfFooterLineKey
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
operator|+
literal|2
decl_stmt|;
name|curr
operator|.
name|value
operator|=
name|endOfLine
expr_stmt|;
return|return
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|enc
argument_list|,
name|note
argument_list|,
name|startOfField
argument_list|,
name|endOfLine
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * @return a comment range. If the comment range line in the note only has    *    one number, we return a CommentRange with that one number as the end    *    line and the other fields as -1. If the comment range line in the note    *    contains a whole comment range, then we return a CommentRange with all    *    fields set. If the line is not correctly formatted, return null.    */
DECL|method|parseCommentRange (byte[] note, MutableInteger ptr, Change.Id changeId)
specifier|private
specifier|static
name|CommentRange
name|parseCommentRange
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|ptr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|startLine
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|ptr
operator|.
name|value
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|startLine
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|note
index|[
name|ptr
operator|.
name|value
index|]
operator|==
literal|'\n'
condition|)
block|{
name|range
operator|.
name|setEndLine
argument_list|(
name|startLine
argument_list|)
expr_stmt|;
name|ptr
operator|.
name|value
operator|+=
literal|1
expr_stmt|;
return|return
name|range
return|;
block|}
elseif|else
if|if
condition|(
name|note
index|[
name|ptr
operator|.
name|value
index|]
operator|==
literal|':'
condition|)
block|{
name|range
operator|.
name|setStartLine
argument_list|(
name|startLine
argument_list|)
expr_stmt|;
name|ptr
operator|.
name|value
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
name|int
name|startChar
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|ptr
operator|.
name|value
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|startChar
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|note
index|[
name|ptr
operator|.
name|value
index|]
operator|==
literal|'-'
condition|)
block|{
name|range
operator|.
name|setStartCharacter
argument_list|(
name|startChar
argument_list|)
expr_stmt|;
name|ptr
operator|.
name|value
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
name|int
name|endLine
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|ptr
operator|.
name|value
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|endLine
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|note
index|[
name|ptr
operator|.
name|value
index|]
operator|==
literal|':'
condition|)
block|{
name|range
operator|.
name|setEndLine
argument_list|(
name|endLine
argument_list|)
expr_stmt|;
name|ptr
operator|.
name|value
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
name|int
name|endChar
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|ptr
operator|.
name|value
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|endChar
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|note
index|[
name|ptr
operator|.
name|value
index|]
operator|==
literal|'\n'
condition|)
block|{
name|range
operator|.
name|setEndCharacter
argument_list|(
name|endChar
argument_list|)
expr_stmt|;
name|ptr
operator|.
name|value
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
return|return
name|range
return|;
block|}
DECL|method|parsePsId (byte[] note, MutableInteger curr, Change.Id changeId, Charset enc, String fieldName)
specifier|private
specifier|static
name|PatchSet
operator|.
name|Id
name|parsePsId
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|Charset
name|enc
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|checkHeaderLineFormat
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|fieldName
argument_list|,
name|enc
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|int
name|startOfPsId
init|=
name|RawParseUtils
operator|.
name|endOfFooterLineKey
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
operator|+
literal|1
decl_stmt|;
name|MutableInteger
name|i
init|=
operator|new
name|MutableInteger
argument_list|()
decl_stmt|;
name|int
name|patchSetId
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|startOfPsId
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|int
name|endOfLine
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|value
operator|!=
name|endOfLine
operator|-
literal|1
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|fieldName
argument_list|)
throw|;
block|}
name|checkResult
argument_list|(
name|patchSetId
argument_list|,
literal|"patchset id"
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|curr
operator|.
name|value
operator|=
name|endOfLine
expr_stmt|;
return|return
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|changeId
argument_list|,
name|patchSetId
argument_list|)
return|;
block|}
DECL|method|parseFilename (byte[] note, MutableInteger curr, Change.Id changeId, Charset enc)
specifier|private
specifier|static
name|String
name|parseFilename
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|Charset
name|enc
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|checkHeaderLineFormat
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|FILE
argument_list|,
name|enc
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|int
name|startOfFileName
init|=
name|RawParseUtils
operator|.
name|endOfFooterLineKey
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
operator|+
literal|2
decl_stmt|;
name|int
name|endOfLine
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
decl_stmt|;
name|curr
operator|.
name|value
operator|=
name|endOfLine
expr_stmt|;
name|curr
operator|.
name|value
operator|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
expr_stmt|;
return|return
name|QuotedString
operator|.
name|GIT_PATH
operator|.
name|dequote
argument_list|(
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|enc
argument_list|,
name|note
argument_list|,
name|startOfFileName
argument_list|,
name|endOfLine
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseTimestamp (byte[] note, MutableInteger curr, Change.Id changeId, Charset enc)
specifier|private
specifier|static
name|Timestamp
name|parseTimestamp
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|Charset
name|enc
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|int
name|endOfLine
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
decl_stmt|;
name|Timestamp
name|commentTime
decl_stmt|;
name|String
name|dateString
init|=
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|enc
argument_list|,
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|endOfLine
operator|-
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|commentTime
operator|=
operator|new
name|Timestamp
argument_list|(
name|GitDateParser
operator|.
name|parse
argument_list|(
name|dateString
argument_list|,
literal|null
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigInvalidException
argument_list|(
literal|"could not parse comment timestamp"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|curr
operator|.
name|value
operator|=
name|endOfLine
expr_stmt|;
return|return
name|checkResult
argument_list|(
name|commentTime
argument_list|,
literal|"comment timestamp"
argument_list|,
name|changeId
argument_list|)
return|;
block|}
DECL|method|parseAuthor (byte[] note, MutableInteger curr, Change.Id changeId, Charset enc)
specifier|private
specifier|static
name|Account
operator|.
name|Id
name|parseAuthor
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|Charset
name|enc
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|checkHeaderLineFormat
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|AUTHOR
argument_list|,
name|enc
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|int
name|startOfAccountId
init|=
name|RawParseUtils
operator|.
name|endOfFooterLineKey
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
operator|+
literal|2
decl_stmt|;
name|PersonIdent
name|ident
init|=
name|RawParseUtils
operator|.
name|parsePersonIdent
argument_list|(
name|note
argument_list|,
name|startOfAccountId
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|aId
init|=
name|parseIdent
argument_list|(
name|ident
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
name|curr
operator|.
name|value
operator|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
expr_stmt|;
return|return
name|checkResult
argument_list|(
name|aId
argument_list|,
literal|"comment author"
argument_list|,
name|changeId
argument_list|)
return|;
block|}
DECL|method|parseCommentLength (byte[] note, MutableInteger curr, Change.Id changeId, Charset enc)
specifier|private
specifier|static
name|int
name|parseCommentLength
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|Charset
name|enc
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|checkHeaderLineFormat
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|LENGTH
argument_list|,
name|enc
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|int
name|startOfLength
init|=
name|RawParseUtils
operator|.
name|endOfFooterLineKey
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
operator|+
literal|1
decl_stmt|;
name|MutableInteger
name|i
init|=
operator|new
name|MutableInteger
argument_list|()
decl_stmt|;
name|int
name|commentLength
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|startOfLength
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|int
name|endOfLine
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|value
operator|!=
name|endOfLine
operator|-
literal|1
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|PATCH_SET
argument_list|)
throw|;
block|}
name|curr
operator|.
name|value
operator|=
name|endOfLine
expr_stmt|;
return|return
name|checkResult
argument_list|(
name|commentLength
argument_list|,
literal|"comment length"
argument_list|,
name|changeId
argument_list|)
return|;
block|}
DECL|method|checkResult (T o, String fieldName, Change.Id changeId)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|checkResult
parameter_list|(
name|T
name|o
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|fieldName
argument_list|)
throw|;
block|}
return|return
name|o
return|;
block|}
DECL|method|checkResult (int i, String fieldName, Change.Id changeId)
specifier|private
specifier|static
name|int
name|checkResult
parameter_list|(
name|int
name|i
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
if|if
condition|(
name|i
operator|<=
literal|0
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|fieldName
argument_list|)
throw|;
block|}
return|return
name|i
return|;
block|}
DECL|method|newIdent (Account author, Date when)
specifier|private
name|PersonIdent
name|newIdent
parameter_list|(
name|Account
name|author
parameter_list|,
name|Date
name|when
parameter_list|)
block|{
return|return
operator|new
name|PersonIdent
argument_list|(
operator|new
name|AccountInfo
argument_list|(
name|author
argument_list|)
operator|.
name|getName
argument_list|(
name|anonymousCowardName
argument_list|)
argument_list|,
name|author
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"@"
operator|+
name|GERRIT_PLACEHOLDER_HOST
argument_list|,
name|when
argument_list|,
name|serverIdent
operator|.
name|getTimeZone
argument_list|()
argument_list|)
return|;
block|}
DECL|method|parseIdent (PersonIdent ident, Change.Id changeId)
specifier|private
specifier|static
name|Account
operator|.
name|Id
name|parseIdent
parameter_list|(
name|PersonIdent
name|ident
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|String
name|email
init|=
name|ident
operator|.
name|getEmailAddress
argument_list|()
decl_stmt|;
name|int
name|at
init|=
name|email
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|>=
literal|0
condition|)
block|{
name|String
name|host
init|=
name|email
operator|.
name|substring
argument_list|(
name|at
operator|+
literal|1
argument_list|,
name|email
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|id
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|email
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|at
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
name|host
operator|.
name|equals
argument_list|(
name|GERRIT_PLACEHOLDER_HOST
argument_list|)
condition|)
block|{
return|return
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"invalid identity, expected<id>@%s: %s"
argument_list|,
name|GERRIT_PLACEHOLDER_HOST
argument_list|,
name|email
argument_list|)
throw|;
block|}
DECL|method|appendHeaderField (PrintWriter writer, String field, String value)
specifier|private
name|void
name|appendHeaderField
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|print
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
DECL|method|checkHeaderLineFormat (byte[] note, MutableInteger curr, String fieldName, Charset enc, Change.Id changeId)
specifier|private
specifier|static
name|void
name|checkHeaderLineFormat
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Charset
name|enc
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|boolean
name|correct
init|=
name|RawParseUtils
operator|.
name|match
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|fieldName
operator|.
name|getBytes
argument_list|(
name|enc
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
decl_stmt|;
name|correct
operator|&=
operator|(
name|note
index|[
name|curr
operator|.
name|value
operator|+
name|fieldName
operator|.
name|length
argument_list|()
index|]
operator|==
literal|':'
operator|)
expr_stmt|;
name|correct
operator|&=
operator|(
name|note
index|[
name|curr
operator|.
name|value
operator|+
name|fieldName
operator|.
name|length
argument_list|()
operator|+
literal|1
index|]
operator|==
literal|' '
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|correct
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|fieldName
argument_list|)
throw|;
block|}
block|}
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|PersonIdent
name|serverIdent
decl_stmt|;
DECL|field|anonymousCowardName
specifier|private
specifier|final
name|String
name|anonymousCowardName
decl_stmt|;
annotation|@
name|Inject
DECL|method|CommentsInNotesUtil (AccountCache accountCache, @GerritPersonIdent PersonIdent serverIdent, @AnonymousCowardName String anonymousCowardName)
specifier|public
name|CommentsInNotesUtil
parameter_list|(
name|AccountCache
name|accountCache
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverIdent
parameter_list|,
annotation|@
name|AnonymousCowardName
name|String
name|anonymousCowardName
parameter_list|)
block|{
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
name|this
operator|.
name|anonymousCowardName
operator|=
name|anonymousCowardName
expr_stmt|;
block|}
comment|/**    * Build a note that contains the metadata for and the contents of all of the    * comments in the given list of comments.    *    * @param comments    *            A list of the comments to be written to the returned note    *            byte array.    *            All of the comments in this list must have the same side and    *            must share the same PatchSet.Id.    *            This list must not be empty because we cannot build a note    *            for no comments.    * @return the note. Null if there are no comments in the list.    */
DECL|method|buildNote (List<PatchLineComment> comments)
specifier|public
name|byte
index|[]
name|buildNote
parameter_list|(
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|comments
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
name|ByteArrayOutputStream
name|buf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStreamWriter
name|streamWriter
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|buf
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|streamWriter
argument_list|)
decl_stmt|;
name|PatchLineComment
name|first
init|=
name|comments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|short
name|side
init|=
name|first
operator|.
name|getSide
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|getCommentPsId
argument_list|(
name|first
argument_list|)
decl_stmt|;
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|side
operator|==
literal|0
condition|?
name|BASE_PATCH_SET
else|:
name|PATCH_SET
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|psId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|REVISION
argument_list|,
name|first
operator|.
name|getRevId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|currentFilename
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PatchLineComment
name|c
range|:
name|comments
control|)
block|{
name|PatchSet
operator|.
name|Id
name|currentPsId
init|=
name|getCommentPsId
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|psId
operator|.
name|equals
argument_list|(
name|currentPsId
argument_list|)
argument_list|,
literal|"All comments being added must all have the same PatchSet.Id. The"
operator|+
literal|"comment below does not have the same PatchSet.Id as the others "
operator|+
literal|"(%s).\n%s"
argument_list|,
name|psId
operator|.
name|toString
argument_list|()
argument_list|,
name|c
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|side
operator|==
name|c
operator|.
name|getSide
argument_list|()
argument_list|,
literal|"All comments being added must all have the same side. The"
operator|+
literal|"comment below does not have the same side as the others "
operator|+
literal|"(%s).\n%s"
argument_list|,
name|side
argument_list|,
name|c
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|commentFilename
init|=
name|QuotedString
operator|.
name|GIT_PATH
operator|.
name|quote
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|getFileName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|commentFilename
operator|.
name|equals
argument_list|(
name|currentFilename
argument_list|)
condition|)
block|{
name|currentFilename
operator|=
name|commentFilename
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"File: "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|commentFilename
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
comment|// The CommentRange field for a comment is allowed to be null.
comment|// If it is indeed null, then in the first line, we simply use the line
comment|// number field for a comment instead. If it isn't null, we write the
comment|// comment range itself.
name|CommentRange
name|range
init|=
name|c
operator|.
name|getRange
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|print
argument_list|(
name|range
operator|.
name|getStartLine
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|range
operator|.
name|getStartCharacter
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|range
operator|.
name|getEndCharacter
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|print
argument_list|(
name|c
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|formatTime
argument_list|(
name|serverIdent
argument_list|,
name|c
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|PersonIdent
name|ident
init|=
name|newIdent
argument_list|(
name|accountCache
operator|.
name|get
argument_list|(
name|c
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
argument_list|,
name|c
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|nameString
init|=
name|ident
operator|.
name|getName
argument_list|()
operator|+
literal|"<"
operator|+
name|ident
operator|.
name|getEmailAddress
argument_list|()
operator|+
literal|">"
decl_stmt|;
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|AUTHOR
argument_list|,
name|nameString
argument_list|)
expr_stmt|;
name|String
name|parent
init|=
name|c
operator|.
name|getParentUuid
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|PARENT
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|UUID
argument_list|,
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|messageBytes
init|=
name|c
operator|.
name|getMessage
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|LENGTH
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|messageBytes
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|c
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|buf
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|writeCommentsToNoteMap (NoteMap noteMap, List<PatchLineComment> allComments, ObjectInserter inserter)
specifier|public
name|void
name|writeCommentsToNoteMap
parameter_list|(
name|NoteMap
name|noteMap
parameter_list|,
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|allComments
parameter_list|,
name|ObjectInserter
name|inserter
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
name|checkArgument
argument_list|(
operator|!
name|allComments
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"No comments to write; to delete, use removeNoteFromNoteMap()."
argument_list|)
expr_stmt|;
name|ObjectId
name|commit
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|allComments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRevId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|allComments
argument_list|,
name|ChangeNotes
operator|.
name|PatchLineCommentComparator
argument_list|)
expr_stmt|;
name|noteMap
operator|.
name|set
argument_list|(
name|commit
argument_list|,
name|inserter
operator|.
name|insert
argument_list|(
name|OBJ_BLOB
argument_list|,
name|buildNote
argument_list|(
name|allComments
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|removeNote (NoteMap noteMap, RevId commitId)
specifier|public
name|void
name|removeNote
parameter_list|(
name|NoteMap
name|noteMap
parameter_list|,
name|RevId
name|commitId
parameter_list|)
throws|throws
name|IOException
block|{
name|noteMap
operator|.
name|remove
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|commitId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

