begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefControl
operator|.
name|isRE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ParameterizedString
import|;
end_import

begin_import
import|import
name|dk
operator|.
name|brics
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Matches an AccessSection against a reference name.  *<p>  * These matchers are "compiled" versions of the AccessSection name, supporting  * faster selection of which sections are relevant to any given input reference.  */
end_comment

begin_class
DECL|class|SectionMatcher
specifier|abstract
class|class
name|SectionMatcher
block|{
DECL|method|wrap (AccessSection section)
specifier|static
name|SectionMatcher
name|wrap
parameter_list|(
name|AccessSection
name|section
parameter_list|)
block|{
name|String
name|ref
init|=
name|section
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|AccessSection
operator|.
name|isValid
argument_list|(
name|ref
argument_list|)
condition|)
block|{
return|return
name|wrap
argument_list|(
name|ref
argument_list|,
name|section
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|wrap (String pattern, AccessSection section)
specifier|static
name|SectionMatcher
name|wrap
parameter_list|(
name|String
name|pattern
parameter_list|,
name|AccessSection
name|section
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|.
name|contains
argument_list|(
literal|"${"
argument_list|)
condition|)
block|{
return|return
operator|new
name|ExpandParameters
argument_list|(
name|pattern
argument_list|,
name|section
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|isRE
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
return|return
operator|new
name|Regexp
argument_list|(
name|pattern
argument_list|,
name|section
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pattern
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Prefix
argument_list|(
name|pattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pattern
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|section
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Exact
argument_list|(
name|pattern
argument_list|,
name|section
argument_list|)
return|;
block|}
block|}
DECL|field|section
specifier|final
name|AccessSection
name|section
decl_stmt|;
DECL|method|SectionMatcher (AccessSection section)
name|SectionMatcher
parameter_list|(
name|AccessSection
name|section
parameter_list|)
block|{
name|this
operator|.
name|section
operator|=
name|section
expr_stmt|;
block|}
DECL|method|match (String ref, String username)
specifier|abstract
name|boolean
name|match
parameter_list|(
name|String
name|ref
parameter_list|,
name|String
name|username
parameter_list|)
function_decl|;
DECL|class|Exact
specifier|private
specifier|static
class|class
name|Exact
extends|extends
name|SectionMatcher
block|{
DECL|field|expect
specifier|private
specifier|final
name|String
name|expect
decl_stmt|;
DECL|method|Exact (String name, AccessSection section)
name|Exact
parameter_list|(
name|String
name|name
parameter_list|,
name|AccessSection
name|section
parameter_list|)
block|{
name|super
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|expect
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match (String ref, String username)
name|boolean
name|match
parameter_list|(
name|String
name|ref
parameter_list|,
name|String
name|username
parameter_list|)
block|{
return|return
name|expect
operator|.
name|equals
argument_list|(
name|ref
argument_list|)
return|;
block|}
block|}
DECL|class|Prefix
specifier|private
specifier|static
class|class
name|Prefix
extends|extends
name|SectionMatcher
block|{
DECL|field|prefix
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
DECL|method|Prefix (String pfx, AccessSection section)
name|Prefix
parameter_list|(
name|String
name|pfx
parameter_list|,
name|AccessSection
name|section
parameter_list|)
block|{
name|super
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|prefix
operator|=
name|pfx
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match (String ref, String username)
name|boolean
name|match
parameter_list|(
name|String
name|ref
parameter_list|,
name|String
name|username
parameter_list|)
block|{
return|return
name|ref
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
return|;
block|}
block|}
DECL|class|Regexp
specifier|private
specifier|static
class|class
name|Regexp
extends|extends
name|SectionMatcher
block|{
DECL|field|pattern
specifier|private
specifier|final
name|Pattern
name|pattern
decl_stmt|;
DECL|method|Regexp (String re, AccessSection section)
name|Regexp
parameter_list|(
name|String
name|re
parameter_list|,
name|AccessSection
name|section
parameter_list|)
block|{
name|super
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|re
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match (String ref, String username)
name|boolean
name|match
parameter_list|(
name|String
name|ref
parameter_list|,
name|String
name|username
parameter_list|)
block|{
return|return
name|pattern
operator|.
name|matcher
argument_list|(
name|ref
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
block|}
DECL|class|ExpandParameters
specifier|static
class|class
name|ExpandParameters
extends|extends
name|SectionMatcher
block|{
DECL|field|template
specifier|private
specifier|final
name|ParameterizedString
name|template
decl_stmt|;
DECL|field|prefix
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
DECL|method|ExpandParameters (String pattern, AccessSection section)
name|ExpandParameters
parameter_list|(
name|String
name|pattern
parameter_list|,
name|AccessSection
name|section
parameter_list|)
block|{
name|super
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|template
operator|=
operator|new
name|ParameterizedString
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRE
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
comment|// Replace ${username} with ":USERNAME:" as : is not legal
comment|// in a reference and the string :USERNAME: is not likely to
comment|// be a valid part of the regex. This later allows the pattern
comment|// prefix to be clipped, saving time on evaluation.
name|Automaton
name|am
init|=
name|RefControl
operator|.
name|toRegExp
argument_list|(
name|template
operator|.
name|replace
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"username"
argument_list|,
literal|":USERNAME:"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toAutomaton
argument_list|()
decl_stmt|;
name|String
name|rePrefix
init|=
name|am
operator|.
name|getCommonPrefix
argument_list|()
decl_stmt|;
name|prefix
operator|=
name|rePrefix
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|rePrefix
operator|.
name|indexOf
argument_list|(
literal|":USERNAME:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
name|pattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pattern
operator|.
name|indexOf
argument_list|(
literal|"${"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|match (String ref, String username)
name|boolean
name|match
parameter_list|(
name|String
name|ref
parameter_list|,
name|String
name|username
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
operator|||
name|username
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|u
decl_stmt|;
if|if
condition|(
name|isRE
argument_list|(
name|template
operator|.
name|getPattern
argument_list|()
argument_list|)
condition|)
block|{
name|u
operator|=
name|username
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"\\."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|u
operator|=
name|username
expr_stmt|;
block|}
name|SectionMatcher
name|next
init|=
name|wrap
argument_list|(
name|template
operator|.
name|replace
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"username"
argument_list|,
name|u
argument_list|)
argument_list|)
argument_list|,
name|section
argument_list|)
decl_stmt|;
return|return
name|next
operator|!=
literal|null
condition|?
name|next
operator|.
name|match
argument_list|(
name|ref
argument_list|,
name|username
argument_list|)
else|:
literal|false
return|;
block|}
DECL|method|matchPrefix (String ref)
name|boolean
name|matchPrefix
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
return|return
name|ref
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

