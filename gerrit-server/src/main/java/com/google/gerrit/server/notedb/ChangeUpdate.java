begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_LABEL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_PATCH_SET
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|GERRIT_PLACEHOLDER_HOST
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|VersionedMetaData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|LabelVote
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A single delta to apply atomically to a change.  *<p>  * This delta becomes a single commit on the notes branch, so there are  * limitations on the set of modifications that can be handled in a single  * update. In particular, there is a single author and timestamp for each  * update.  */
end_comment

begin_class
DECL|class|ChangeUpdate
specifier|public
class|class
name|ChangeUpdate
extends|extends
name|VersionedMetaData
block|{
annotation|@
name|Singleton
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|updateFactory
specifier|private
specifier|final
name|MetaDataUpdate
operator|.
name|User
name|updateFactory
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|Provider
argument_list|<
name|IdentifiedUser
argument_list|>
name|user
decl_stmt|;
annotation|@
name|Inject
DECL|method|Factory ( GitRepositoryManager repoManager, MetaDataUpdate.User updateFactory, ProjectCache projectCache, Provider<IdentifiedUser> user)
name|Factory
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|MetaDataUpdate
operator|.
name|User
name|updateFactory
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|Provider
argument_list|<
name|IdentifiedUser
argument_list|>
name|user
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|updateFactory
operator|=
name|updateFactory
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
DECL|method|create (Change change)
specifier|public
name|ChangeUpdate
name|create
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|change
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
return|;
block|}
DECL|method|create (Change change, Timestamp when)
specifier|public
name|ChangeUpdate
name|create
parameter_list|(
name|Change
name|change
parameter_list|,
name|Timestamp
name|when
parameter_list|)
block|{
return|return
operator|new
name|ChangeUpdate
argument_list|(
name|repoManager
argument_list|,
name|updateFactory
argument_list|,
name|projectCache
operator|.
name|get
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
operator|.
name|getLabelTypes
argument_list|()
argument_list|,
name|change
argument_list|,
name|user
operator|.
name|get
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|when
argument_list|)
return|;
block|}
block|}
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|updateFactory
specifier|private
specifier|final
name|MetaDataUpdate
operator|.
name|User
name|updateFactory
decl_stmt|;
DECL|field|labelTypes
specifier|private
specifier|final
name|LabelTypes
name|labelTypes
decl_stmt|;
DECL|field|change
specifier|private
specifier|final
name|Change
name|change
decl_stmt|;
DECL|field|accountId
specifier|private
specifier|final
name|Account
operator|.
name|Id
name|accountId
decl_stmt|;
DECL|field|when
specifier|private
specifier|final
name|Timestamp
name|when
decl_stmt|;
DECL|field|approvals
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|approvals
decl_stmt|;
DECL|field|subject
specifier|private
name|String
name|subject
decl_stmt|;
DECL|field|psId
specifier|private
name|PatchSet
operator|.
name|Id
name|psId
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|ChangeUpdate (GitRepositoryManager repoManager, LabelTypes labelTypes, Change change, Account.Id accountId, @Nullable Timestamp when)
name|ChangeUpdate
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|Change
name|change
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
annotation|@
name|Nullable
name|Timestamp
name|when
parameter_list|)
block|{
name|this
argument_list|(
name|repoManager
argument_list|,
literal|null
argument_list|,
name|labelTypes
argument_list|,
name|change
argument_list|,
name|accountId
argument_list|,
name|when
argument_list|)
expr_stmt|;
block|}
DECL|method|ChangeUpdate (GitRepositoryManager repoManager, @Nullable MetaDataUpdate.User updateFactory, LabelTypes labelTypes, Change change, Account.Id accountId, @Nullable Timestamp when)
specifier|private
name|ChangeUpdate
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
annotation|@
name|Nullable
name|MetaDataUpdate
operator|.
name|User
name|updateFactory
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|Change
name|change
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
annotation|@
name|Nullable
name|Timestamp
name|when
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|updateFactory
operator|=
name|updateFactory
expr_stmt|;
name|this
operator|.
name|labelTypes
operator|=
name|labelTypes
expr_stmt|;
name|this
operator|.
name|change
operator|=
name|change
expr_stmt|;
name|this
operator|.
name|accountId
operator|=
name|accountId
expr_stmt|;
name|this
operator|.
name|when
operator|=
name|when
expr_stmt|;
name|this
operator|.
name|approvals
operator|=
name|Maps
operator|.
name|newTreeMap
argument_list|(
name|labelTypes
operator|.
name|nameComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|putApproval (String label, short value)
specifier|public
name|void
name|putApproval
parameter_list|(
name|String
name|label
parameter_list|,
name|short
name|value
parameter_list|)
block|{
name|approvals
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setSubject (String subject)
specifier|public
name|void
name|setSubject
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
block|}
DECL|method|setPatchSetId (PatchSet.Id psId)
specifier|public
name|void
name|setPatchSetId
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|psId
operator|==
literal|null
operator|||
name|psId
operator|.
name|getParentKey
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|psId
operator|=
name|psId
expr_stmt|;
block|}
DECL|method|commit ()
specifier|public
name|RevCommit
name|commit
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|commit
argument_list|(
name|checkNotNull
argument_list|(
name|updateFactory
argument_list|,
literal|"MetaDataUpdate.Factory"
argument_list|)
operator|.
name|create
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|commit (MetaDataUpdate md)
specifier|public
name|RevCommit
name|commit
parameter_list|(
name|MetaDataUpdate
name|md
parameter_list|)
throws|throws
name|IOException
block|{
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|load
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|md
operator|.
name|setAllowEmpty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|CommitBuilder
name|cb
init|=
name|md
operator|.
name|getCommitBuilder
argument_list|()
decl_stmt|;
name|cb
operator|.
name|setCommitter
argument_list|(
operator|new
name|PersonIdent
argument_list|(
name|cb
operator|.
name|getAuthor
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|accountId
operator|.
name|get
argument_list|()
operator|+
literal|"@"
operator|+
name|GERRIT_PLACEHOLDER_HOST
argument_list|,
name|when
operator|!=
literal|null
condition|?
name|when
else|:
name|cb
operator|.
name|getCommitter
argument_list|()
operator|.
name|getWhen
argument_list|()
argument_list|,
name|cb
operator|.
name|getCommitter
argument_list|()
operator|.
name|getTimeZone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|when
operator|!=
literal|null
condition|)
block|{
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
operator|new
name|PersonIdent
argument_list|(
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|when
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|commit
argument_list|(
name|md
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRefName ()
specifier|protected
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|ChangeNoteUtil
operator|.
name|changeRefName
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|onSave (CommitBuilder commit)
specifier|protected
name|void
name|onSave
parameter_list|(
name|CommitBuilder
name|commit
parameter_list|)
block|{
if|if
condition|(
name|approvals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|int
name|ps
init|=
name|psId
operator|!=
literal|null
condition|?
name|psId
operator|.
name|get
argument_list|()
else|:
name|change
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"Update patch set "
argument_list|)
operator|.
name|append
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_PATCH_SET
argument_list|,
name|ps
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|e
range|:
name|approvals
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LabelType
name|lt
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lt
operator|!=
literal|null
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_LABEL
argument_list|,
operator|new
name|LabelVote
argument_list|(
name|lt
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|formatWithEquals
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|commit
operator|.
name|setMessage
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addFooter (StringBuilder sb, FooterKey footer, Object value)
specifier|private
specifier|static
name|void
name|addFooter
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|FooterKey
name|footer
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|footer
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
comment|// Do nothing; just reads current revision.
block|}
block|}
end_class

end_unit

