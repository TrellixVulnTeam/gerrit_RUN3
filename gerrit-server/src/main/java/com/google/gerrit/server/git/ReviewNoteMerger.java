begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010, Sasa Zivkov<sasa.zivkov@sap.com> and other copyright  * owners as documented in the project's IP log.  *  * This program and the accompanying materials are made available under the  * terms of the Eclipse Distribution License v1.0 which accompanies this  * distribution, is reproduced below, and is available at  * http://www.eclipse.org/org/documents/edl-v10.php  *  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * - Redistributions of source code must retain the above copyright notice, this  * list of conditions and the following disclaimer.  *  * - Redistributions in binary form must reproduce the above copyright notice,  * this list of conditions and the following disclaimer in the documentation  * and/or other materials provided with the distribution.  *  * - Neither the name of the Eclipse Foundation, Inc. nor the names of its  * contributors may be used to endorse or promote products derived from this  * software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|Note
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|io
operator|.
name|UnionInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|ReviewNoteMerger
class|class
name|ReviewNoteMerger
implements|implements
name|NoteMerger
block|{
annotation|@
name|Override
DECL|method|merge (Note base, Note ours, Note theirs, ObjectReader reader, ObjectInserter inserter)
specifier|public
name|Note
name|merge
parameter_list|(
name|Note
name|base
parameter_list|,
name|Note
name|ours
parameter_list|,
name|Note
name|theirs
parameter_list|,
name|ObjectReader
name|reader
parameter_list|,
name|ObjectInserter
name|inserter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ours
operator|==
literal|null
condition|)
block|{
return|return
name|theirs
return|;
block|}
if|if
condition|(
name|theirs
operator|==
literal|null
condition|)
block|{
return|return
name|ours
return|;
block|}
if|if
condition|(
name|ours
operator|.
name|getData
argument_list|()
operator|.
name|equals
argument_list|(
name|theirs
operator|.
name|getData
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|ours
return|;
block|}
name|ObjectLoader
name|lo
init|=
name|reader
operator|.
name|open
argument_list|(
name|ours
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sep
init|=
operator|new
name|byte
index|[]
block|{
literal|'\n'
block|}
decl_stmt|;
name|ObjectLoader
name|lt
init|=
name|reader
operator|.
name|open
argument_list|(
name|theirs
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|ObjectStream
name|os
init|=
name|lo
operator|.
name|openStream
argument_list|()
init|;
name|ByteArrayInputStream
name|b
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|sep
argument_list|)
init|;
name|ObjectStream
name|ts
operator|=
name|lt
operator|.
name|openStream
argument_list|()
init|;
name|UnionInputStream
name|union
operator|=
operator|new
name|UnionInputStream
argument_list|(
name|os
argument_list|,
name|b
argument_list|,
name|ts
argument_list|)
init|)
block|{
name|ObjectId
name|noteData
init|=
name|inserter
operator|.
name|insert
argument_list|(
name|Constants
operator|.
name|OBJ_BLOB
argument_list|,
name|lo
operator|.
name|getSize
argument_list|()
operator|+
name|sep
operator|.
name|length
operator|+
name|lt
operator|.
name|getSize
argument_list|()
argument_list|,
name|union
argument_list|)
decl_stmt|;
return|return
operator|new
name|Note
argument_list|(
name|ours
argument_list|,
name|noteData
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

