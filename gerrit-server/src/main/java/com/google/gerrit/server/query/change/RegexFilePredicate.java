begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|OperatorPredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|dk
operator|.
name|brics
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import

begin_import
import|import
name|dk
operator|.
name|brics
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import

begin_import
import|import
name|dk
operator|.
name|brics
operator|.
name|automaton
operator|.
name|RunAutomaton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|RegexFilePredicate
class|class
name|RegexFilePredicate
extends|extends
name|OperatorPredicate
argument_list|<
name|ChangeData
argument_list|>
block|{
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|PatchListCache
name|cache
decl_stmt|;
DECL|field|pattern
specifier|private
specifier|final
name|RunAutomaton
name|pattern
decl_stmt|;
DECL|field|prefixBegin
specifier|private
specifier|final
name|String
name|prefixBegin
decl_stmt|;
DECL|field|prefixEnd
specifier|private
specifier|final
name|String
name|prefixEnd
decl_stmt|;
DECL|field|prefixLen
specifier|private
specifier|final
name|int
name|prefixLen
decl_stmt|;
DECL|field|prefixOnly
specifier|private
specifier|final
name|boolean
name|prefixOnly
decl_stmt|;
DECL|method|RegexFilePredicate (Provider<ReviewDb> db, PatchListCache plc, String re)
name|RegexFilePredicate
parameter_list|(
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|PatchListCache
name|plc
parameter_list|,
name|String
name|re
parameter_list|)
block|{
name|super
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_FILE
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|plc
expr_stmt|;
if|if
condition|(
name|re
operator|.
name|startsWith
argument_list|(
literal|"^"
argument_list|)
condition|)
block|{
name|re
operator|=
name|re
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|re
operator|.
name|endsWith
argument_list|(
literal|"$"
argument_list|)
operator|&&
operator|!
name|re
operator|.
name|endsWith
argument_list|(
literal|"\\$"
argument_list|)
condition|)
block|{
name|re
operator|=
name|re
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|re
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|Automaton
name|automaton
init|=
operator|new
name|RegExp
argument_list|(
name|re
argument_list|)
operator|.
name|toAutomaton
argument_list|()
decl_stmt|;
name|prefixBegin
operator|=
name|automaton
operator|.
name|getCommonPrefix
argument_list|()
expr_stmt|;
name|prefixLen
operator|=
name|prefixBegin
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
literal|0
operator|<
name|prefixLen
condition|)
block|{
name|char
name|max
init|=
call|(
name|char
call|)
argument_list|(
name|prefixBegin
operator|.
name|charAt
argument_list|(
name|prefixLen
operator|-
literal|1
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|prefixEnd
operator|=
name|prefixBegin
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|prefixLen
operator|-
literal|1
argument_list|)
operator|+
name|max
expr_stmt|;
name|prefixOnly
operator|=
name|re
operator|.
name|equals
argument_list|(
name|prefixBegin
operator|+
literal|".*"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefixEnd
operator|=
literal|""
expr_stmt|;
name|prefixOnly
operator|=
literal|false
expr_stmt|;
block|}
name|pattern
operator|=
name|prefixOnly
condition|?
literal|null
else|:
operator|new
name|RunAutomaton
argument_list|(
name|automaton
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match (ChangeData object)
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|object
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|object
operator|.
name|currentFilePaths
argument_list|(
name|db
argument_list|,
name|cache
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|int
name|begin
decl_stmt|,
name|end
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|prefixLen
condition|)
block|{
name|begin
operator|=
name|find
argument_list|(
name|files
argument_list|,
name|prefixBegin
argument_list|)
expr_stmt|;
name|end
operator|=
name|find
argument_list|(
name|files
argument_list|,
name|prefixEnd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|begin
operator|=
literal|0
expr_stmt|;
name|end
operator|=
name|files
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|prefixOnly
condition|)
block|{
return|return
name|begin
operator|<
name|end
return|;
block|}
while|while
condition|(
name|begin
operator|<
name|end
condition|)
block|{
if|if
condition|(
name|pattern
operator|.
name|run
argument_list|(
name|files
operator|.
name|get
argument_list|(
name|begin
operator|++
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// The ChangeData can't do expensive lookups right now. Bypass
comment|// them and include the result anyway. We might be able to do
comment|// a narrow later on to a smaller set.
comment|//
return|return
literal|true
return|;
block|}
block|}
DECL|method|find (List<String> files, String p)
specifier|private
specifier|static
name|int
name|find
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|,
name|String
name|p
parameter_list|)
block|{
name|int
name|r
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|files
argument_list|,
name|p
argument_list|)
decl_stmt|;
return|return
name|r
operator|<
literal|0
condition|?
operator|-
operator|(
name|r
operator|+
literal|1
operator|)
else|:
name|r
return|;
block|}
annotation|@
name|Override
DECL|method|getCost ()
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
end_class

end_unit

