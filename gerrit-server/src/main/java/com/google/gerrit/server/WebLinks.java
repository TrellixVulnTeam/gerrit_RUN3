begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|WebLinkInfoCommon
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|DiffWebLinkInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|WebLinkInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|BranchWebLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|DiffWebLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|FileHistoryWebLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|FileWebLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|ParentWebLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|PatchSetWebLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|ProjectWebLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|WebLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|WebLinks
specifier|public
class|class
name|WebLinks
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WebLinks
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|INVALID_WEBLINK
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|WebLinkInfo
argument_list|>
name|INVALID_WEBLINK
init|=
name|link
lambda|->
block|{
if|if
condition|(
name|link
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|link
operator|.
name|name
argument_list|)
operator|||
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|link
operator|.
name|url
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s is missing name and/or url"
argument_list|,
name|link
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
decl_stmt|;
DECL|field|INVALID_WEBLINK_COMMON
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|WebLinkInfoCommon
argument_list|>
name|INVALID_WEBLINK_COMMON
init|=
name|link
lambda|->
block|{
if|if
condition|(
name|link
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|link
operator|.
name|name
argument_list|)
operator|||
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|link
operator|.
name|url
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s is missing name and/or url"
argument_list|,
name|link
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
decl_stmt|;
DECL|field|patchSetLinks
specifier|private
specifier|final
name|DynamicSet
argument_list|<
name|PatchSetWebLink
argument_list|>
name|patchSetLinks
decl_stmt|;
DECL|field|parentLinks
specifier|private
specifier|final
name|DynamicSet
argument_list|<
name|ParentWebLink
argument_list|>
name|parentLinks
decl_stmt|;
DECL|field|fileLinks
specifier|private
specifier|final
name|DynamicSet
argument_list|<
name|FileWebLink
argument_list|>
name|fileLinks
decl_stmt|;
DECL|field|fileHistoryLinks
specifier|private
specifier|final
name|DynamicSet
argument_list|<
name|FileHistoryWebLink
argument_list|>
name|fileHistoryLinks
decl_stmt|;
DECL|field|diffLinks
specifier|private
specifier|final
name|DynamicSet
argument_list|<
name|DiffWebLink
argument_list|>
name|diffLinks
decl_stmt|;
DECL|field|projectLinks
specifier|private
specifier|final
name|DynamicSet
argument_list|<
name|ProjectWebLink
argument_list|>
name|projectLinks
decl_stmt|;
DECL|field|branchLinks
specifier|private
specifier|final
name|DynamicSet
argument_list|<
name|BranchWebLink
argument_list|>
name|branchLinks
decl_stmt|;
annotation|@
name|Inject
DECL|method|WebLinks ( DynamicSet<PatchSetWebLink> patchSetLinks, DynamicSet<ParentWebLink> parentLinks, DynamicSet<FileWebLink> fileLinks, DynamicSet<FileHistoryWebLink> fileLogLinks, DynamicSet<DiffWebLink> diffLinks, DynamicSet<ProjectWebLink> projectLinks, DynamicSet<BranchWebLink> branchLinks)
specifier|public
name|WebLinks
parameter_list|(
name|DynamicSet
argument_list|<
name|PatchSetWebLink
argument_list|>
name|patchSetLinks
parameter_list|,
name|DynamicSet
argument_list|<
name|ParentWebLink
argument_list|>
name|parentLinks
parameter_list|,
name|DynamicSet
argument_list|<
name|FileWebLink
argument_list|>
name|fileLinks
parameter_list|,
name|DynamicSet
argument_list|<
name|FileHistoryWebLink
argument_list|>
name|fileLogLinks
parameter_list|,
name|DynamicSet
argument_list|<
name|DiffWebLink
argument_list|>
name|diffLinks
parameter_list|,
name|DynamicSet
argument_list|<
name|ProjectWebLink
argument_list|>
name|projectLinks
parameter_list|,
name|DynamicSet
argument_list|<
name|BranchWebLink
argument_list|>
name|branchLinks
parameter_list|)
block|{
name|this
operator|.
name|patchSetLinks
operator|=
name|patchSetLinks
expr_stmt|;
name|this
operator|.
name|parentLinks
operator|=
name|parentLinks
expr_stmt|;
name|this
operator|.
name|fileLinks
operator|=
name|fileLinks
expr_stmt|;
name|this
operator|.
name|fileHistoryLinks
operator|=
name|fileLogLinks
expr_stmt|;
name|this
operator|.
name|diffLinks
operator|=
name|diffLinks
expr_stmt|;
name|this
operator|.
name|projectLinks
operator|=
name|projectLinks
expr_stmt|;
name|this
operator|.
name|branchLinks
operator|=
name|branchLinks
expr_stmt|;
block|}
comment|/**    * @param project Project name.    * @param commit SHA1 of commit.    * @return Links for patch sets.    */
DECL|method|getPatchSetLinks (Project.NameKey project, String commit)
specifier|public
name|List
argument_list|<
name|WebLinkInfo
argument_list|>
name|getPatchSetLinks
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|commit
parameter_list|)
block|{
return|return
name|filterLinks
argument_list|(
name|patchSetLinks
argument_list|,
name|webLink
lambda|->
name|webLink
operator|.
name|getPatchSetWebLink
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|commit
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param project Project name.    * @param revision SHA1 of the parent revision.    * @return Links for patch sets.    */
DECL|method|getParentLinks (Project.NameKey project, String revision)
specifier|public
name|List
argument_list|<
name|WebLinkInfo
argument_list|>
name|getParentLinks
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|revision
parameter_list|)
block|{
return|return
name|filterLinks
argument_list|(
name|parentLinks
argument_list|,
name|webLink
lambda|->
name|webLink
operator|.
name|getParentWebLink
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|revision
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param project Project name.    * @param revision SHA1 of revision.    * @param file File name.    * @return Links for files.    */
DECL|method|getFileLinks (String project, String revision, String file)
specifier|public
name|List
argument_list|<
name|WebLinkInfo
argument_list|>
name|getFileLinks
parameter_list|(
name|String
name|project
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
name|file
parameter_list|)
block|{
return|return
name|filterLinks
argument_list|(
name|fileLinks
argument_list|,
name|webLink
lambda|->
name|webLink
operator|.
name|getFileWebLink
argument_list|(
name|project
argument_list|,
name|revision
argument_list|,
name|file
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param project Project name.    * @param revision SHA1 of revision.    * @param file File name.    * @return Links for file history    */
DECL|method|getFileHistoryLinks (String project, String revision, String file)
specifier|public
name|List
argument_list|<
name|WebLinkInfoCommon
argument_list|>
name|getFileHistoryLinks
parameter_list|(
name|String
name|project
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
name|file
parameter_list|)
block|{
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|fileHistoryLinks
argument_list|)
operator|.
name|transform
argument_list|(
name|webLink
lambda|->
block|{
name|WebLinkInfo
name|info
init|=
name|webLink
operator|.
name|getFileHistoryWebLink
argument_list|(
name|project
argument_list|,
name|revision
argument_list|,
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|WebLinkInfoCommon
name|commonInfo
init|=
operator|new
name|WebLinkInfoCommon
argument_list|()
decl_stmt|;
name|commonInfo
operator|.
name|name
operator|=
name|info
operator|.
name|name
expr_stmt|;
name|commonInfo
operator|.
name|imageUrl
operator|=
name|info
operator|.
name|imageUrl
expr_stmt|;
name|commonInfo
operator|.
name|url
operator|=
name|info
operator|.
name|url
expr_stmt|;
name|commonInfo
operator|.
name|target
operator|=
name|info
operator|.
name|target
expr_stmt|;
return|return
name|commonInfo
return|;
block|}
argument_list|)
operator|.
name|filter
argument_list|(
name|INVALID_WEBLINK_COMMON
argument_list|)
operator|.
name|toList
argument_list|()
return|;
block|}
comment|/**    * @param project Project name.    * @param patchSetIdA Patch set ID of side A,<code>null</code> if no base patch set was selected.    * @param revisionA SHA1 of revision of side A.    * @param fileA File name of side A.    * @param patchSetIdB Patch set ID of side B.    * @param revisionB SHA1 of revision of side B.    * @param fileB File name of side B.    * @return Links for file diffs.    */
DECL|method|getDiffLinks ( final String project, final int changeId, final Integer patchSetIdA, final String revisionA, final String fileA, final int patchSetIdB, final String revisionB, final String fileB)
specifier|public
name|List
argument_list|<
name|DiffWebLinkInfo
argument_list|>
name|getDiffLinks
parameter_list|(
specifier|final
name|String
name|project
parameter_list|,
specifier|final
name|int
name|changeId
parameter_list|,
specifier|final
name|Integer
name|patchSetIdA
parameter_list|,
specifier|final
name|String
name|revisionA
parameter_list|,
specifier|final
name|String
name|fileA
parameter_list|,
specifier|final
name|int
name|patchSetIdB
parameter_list|,
specifier|final
name|String
name|revisionB
parameter_list|,
specifier|final
name|String
name|fileB
parameter_list|)
block|{
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|diffLinks
argument_list|)
operator|.
name|transform
argument_list|(
name|webLink
lambda|->
name|webLink
operator|.
name|getDiffLink
argument_list|(
name|project
argument_list|,
name|changeId
argument_list|,
name|patchSetIdA
argument_list|,
name|revisionA
argument_list|,
name|fileA
argument_list|,
name|patchSetIdB
argument_list|,
name|revisionB
argument_list|,
name|fileB
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|INVALID_WEBLINK
argument_list|)
operator|.
name|toList
argument_list|()
return|;
block|}
comment|/**    * @param project Project name.    * @return Links for projects.    */
DECL|method|getProjectLinks (String project)
specifier|public
name|List
argument_list|<
name|WebLinkInfo
argument_list|>
name|getProjectLinks
parameter_list|(
name|String
name|project
parameter_list|)
block|{
return|return
name|filterLinks
argument_list|(
name|projectLinks
argument_list|,
name|webLink
lambda|->
name|webLink
operator|.
name|getProjectWeblink
argument_list|(
name|project
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param project Project name    * @param branch Branch name    * @return Links for branches.    */
DECL|method|getBranchLinks (String project, String branch)
specifier|public
name|List
argument_list|<
name|WebLinkInfo
argument_list|>
name|getBranchLinks
parameter_list|(
name|String
name|project
parameter_list|,
name|String
name|branch
parameter_list|)
block|{
return|return
name|filterLinks
argument_list|(
name|branchLinks
argument_list|,
name|webLink
lambda|->
name|webLink
operator|.
name|getBranchWebLink
argument_list|(
name|project
argument_list|,
name|branch
argument_list|)
argument_list|)
return|;
block|}
DECL|method|filterLinks ( DynamicSet<T> links, Function<T, WebLinkInfo> transformer)
specifier|private
parameter_list|<
name|T
extends|extends
name|WebLink
parameter_list|>
name|List
argument_list|<
name|WebLinkInfo
argument_list|>
name|filterLinks
parameter_list|(
name|DynamicSet
argument_list|<
name|T
argument_list|>
name|links
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|,
name|WebLinkInfo
argument_list|>
name|transformer
parameter_list|)
block|{
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|links
argument_list|)
operator|.
name|transform
argument_list|(
name|transformer
argument_list|)
operator|.
name|filter
argument_list|(
name|INVALID_WEBLINK
argument_list|)
operator|.
name|toList
argument_list|()
return|;
block|}
block|}
end_class

end_unit

