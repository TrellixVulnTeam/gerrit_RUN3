begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|CacheModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|InternalGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|group
operator|.
name|GroupIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|group
operator|.
name|InternalGroupQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** Tracks group objects in memory for efficient access. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|GroupCacheImpl
specifier|public
class|class
name|GroupCacheImpl
implements|implements
name|GroupCache
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GroupCacheImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BYID_NAME
specifier|private
specifier|static
specifier|final
name|String
name|BYID_NAME
init|=
literal|"groups"
decl_stmt|;
DECL|field|BYNAME_NAME
specifier|private
specifier|static
specifier|final
name|String
name|BYNAME_NAME
init|=
literal|"groups_byname"
decl_stmt|;
DECL|field|BYUUID_NAME
specifier|private
specifier|static
specifier|final
name|String
name|BYUUID_NAME
init|=
literal|"groups_byuuid"
decl_stmt|;
DECL|method|module ()
specifier|public
specifier|static
name|Module
name|module
parameter_list|()
block|{
return|return
operator|new
name|CacheModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|cache
argument_list|(
name|BYID_NAME
argument_list|,
name|AccountGroup
operator|.
name|Id
operator|.
name|class
argument_list|,
operator|new
name|TypeLiteral
argument_list|<
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
operator|.
name|loader
argument_list|(
name|ByIdLoader
operator|.
name|class
argument_list|)
expr_stmt|;
name|cache
argument_list|(
name|BYNAME_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|,
operator|new
name|TypeLiteral
argument_list|<
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
operator|.
name|loader
argument_list|(
name|ByNameLoader
operator|.
name|class
argument_list|)
expr_stmt|;
name|cache
argument_list|(
name|BYUUID_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|,
operator|new
name|TypeLiteral
argument_list|<
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
operator|.
name|loader
argument_list|(
name|ByUUIDLoader
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GroupCacheImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GroupCache
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|GroupCacheImpl
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|field|byId
specifier|private
specifier|final
name|LoadingCache
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|,
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
argument_list|>
name|byId
decl_stmt|;
DECL|field|byName
specifier|private
specifier|final
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
argument_list|>
name|byName
decl_stmt|;
DECL|field|byUUID
specifier|private
specifier|final
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
argument_list|>
name|byUUID
decl_stmt|;
DECL|field|schema
specifier|private
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schema
decl_stmt|;
DECL|field|indexer
specifier|private
specifier|final
name|Provider
argument_list|<
name|GroupIndexer
argument_list|>
name|indexer
decl_stmt|;
DECL|field|groups
specifier|private
specifier|final
name|Groups
name|groups
decl_stmt|;
annotation|@
name|Inject
DECL|method|GroupCacheImpl ( @amedBYID_NAME) LoadingCache<AccountGroup.Id, Optional<InternalGroup>> byId, @Named(BYNAME_NAME) LoadingCache<String, Optional<InternalGroup>> byName, @Named(BYUUID_NAME) LoadingCache<String, Optional<InternalGroup>> byUUID, SchemaFactory<ReviewDb> schema, Provider<GroupIndexer> indexer, Groups groups)
name|GroupCacheImpl
parameter_list|(
annotation|@
name|Named
argument_list|(
name|BYID_NAME
argument_list|)
name|LoadingCache
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|,
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
argument_list|>
name|byId
parameter_list|,
annotation|@
name|Named
argument_list|(
name|BYNAME_NAME
argument_list|)
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
argument_list|>
name|byName
parameter_list|,
annotation|@
name|Named
argument_list|(
name|BYUUID_NAME
argument_list|)
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
argument_list|>
name|byUUID
parameter_list|,
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schema
parameter_list|,
name|Provider
argument_list|<
name|GroupIndexer
argument_list|>
name|indexer
parameter_list|,
name|Groups
name|groups
parameter_list|)
block|{
name|this
operator|.
name|byId
operator|=
name|byId
expr_stmt|;
name|this
operator|.
name|byName
operator|=
name|byName
expr_stmt|;
name|this
operator|.
name|byUUID
operator|=
name|byUUID
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
name|this
operator|.
name|groups
operator|=
name|groups
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get (AccountGroup.Id groupId)
specifier|public
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|get
parameter_list|(
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|)
block|{
try|try
block|{
return|return
name|byId
operator|.
name|get
argument_list|(
name|groupId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot load group "
operator|+
name|groupId
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|evict ( AccountGroup.UUID groupUuid, AccountGroup.Id groupId, AccountGroup.NameKey groupName)
specifier|public
name|void
name|evict
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|,
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|,
name|AccountGroup
operator|.
name|NameKey
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|groupId
operator|!=
literal|null
condition|)
block|{
name|byId
operator|.
name|invalidate
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupName
operator|!=
literal|null
condition|)
block|{
name|byName
operator|.
name|invalidate
argument_list|(
name|groupName
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupUuid
operator|!=
literal|null
condition|)
block|{
name|byUUID
operator|.
name|invalidate
argument_list|(
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexer
operator|.
name|get
argument_list|()
operator|.
name|index
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|evictAfterRename (AccountGroup.NameKey oldName)
specifier|public
name|void
name|evictAfterRename
parameter_list|(
name|AccountGroup
operator|.
name|NameKey
name|oldName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|oldName
operator|!=
literal|null
condition|)
block|{
name|byName
operator|.
name|invalidate
argument_list|(
name|oldName
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|get (AccountGroup.NameKey name)
specifier|public
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|get
parameter_list|(
name|AccountGroup
operator|.
name|NameKey
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
try|try
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot look up group %s by name"
argument_list|,
name|name
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|get (AccountGroup.UUID groupUuid)
specifier|public
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|get
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
block|{
if|if
condition|(
name|groupUuid
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
try|try
block|{
return|return
name|byUUID
operator|.
name|get
argument_list|(
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot look up group %s by uuid"
argument_list|,
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|all ()
specifier|public
name|ImmutableList
argument_list|<
name|AccountGroup
argument_list|>
name|all
parameter_list|()
block|{
try|try
init|(
name|ReviewDb
name|db
init|=
name|schema
operator|.
name|open
argument_list|()
init|)
block|{
return|return
name|groups
operator|.
name|getAll
argument_list|(
name|db
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot list internal groups"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|onCreateGroup (AccountGroup group)
specifier|public
name|void
name|onCreateGroup
parameter_list|(
name|AccountGroup
name|group
parameter_list|)
throws|throws
name|IOException
block|{
name|indexer
operator|.
name|get
argument_list|()
operator|.
name|index
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|ByIdLoader
specifier|static
class|class
name|ByIdLoader
extends|extends
name|CacheLoader
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|,
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
argument_list|>
block|{
DECL|field|groupQueryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalGroupQuery
argument_list|>
name|groupQueryProvider
decl_stmt|;
annotation|@
name|Inject
DECL|method|ByIdLoader (Provider<InternalGroupQuery> groupQueryProvider)
name|ByIdLoader
parameter_list|(
name|Provider
argument_list|<
name|InternalGroupQuery
argument_list|>
name|groupQueryProvider
parameter_list|)
block|{
name|this
operator|.
name|groupQueryProvider
operator|=
name|groupQueryProvider
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load (AccountGroup.Id key)
specifier|public
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|load
parameter_list|(
name|AccountGroup
operator|.
name|Id
name|key
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|groupQueryProvider
operator|.
name|get
argument_list|()
operator|.
name|byId
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
DECL|class|ByNameLoader
specifier|static
class|class
name|ByNameLoader
extends|extends
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
argument_list|>
block|{
DECL|field|groupQueryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalGroupQuery
argument_list|>
name|groupQueryProvider
decl_stmt|;
annotation|@
name|Inject
DECL|method|ByNameLoader (Provider<InternalGroupQuery> groupQueryProvider)
name|ByNameLoader
parameter_list|(
name|Provider
argument_list|<
name|InternalGroupQuery
argument_list|>
name|groupQueryProvider
parameter_list|)
block|{
name|this
operator|.
name|groupQueryProvider
operator|=
name|groupQueryProvider
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load (String name)
specifier|public
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|load
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|groupQueryProvider
operator|.
name|get
argument_list|()
operator|.
name|byName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|ByUUIDLoader
specifier|static
class|class
name|ByUUIDLoader
extends|extends
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
argument_list|>
block|{
DECL|field|schema
specifier|private
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schema
decl_stmt|;
DECL|field|groups
specifier|private
specifier|final
name|Groups
name|groups
decl_stmt|;
annotation|@
name|Inject
DECL|method|ByUUIDLoader (SchemaFactory<ReviewDb> sf, Groups groups)
name|ByUUIDLoader
parameter_list|(
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|sf
parameter_list|,
name|Groups
name|groups
parameter_list|)
block|{
name|schema
operator|=
name|sf
expr_stmt|;
name|this
operator|.
name|groups
operator|=
name|groups
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load (String uuid)
specifier|public
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|load
parameter_list|(
name|String
name|uuid
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|ReviewDb
name|db
init|=
name|schema
operator|.
name|open
argument_list|()
init|)
block|{
return|return
name|groups
operator|.
name|getGroup
argument_list|(
name|db
argument_list|,
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|uuid
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

