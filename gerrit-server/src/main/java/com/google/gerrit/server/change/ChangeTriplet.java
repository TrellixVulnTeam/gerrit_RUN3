begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Url
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_class
DECL|class|ChangeTriplet
specifier|public
class|class
name|ChangeTriplet
block|{
DECL|field|changeKey
specifier|private
specifier|final
name|Change
operator|.
name|Key
name|changeKey
decl_stmt|;
DECL|field|projectNameKey
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|projectNameKey
decl_stmt|;
DECL|field|branchNameKey
specifier|private
specifier|final
name|Branch
operator|.
name|NameKey
name|branchNameKey
decl_stmt|;
DECL|method|ChangeTriplet (final String triplet)
specifier|public
name|ChangeTriplet
parameter_list|(
specifier|final
name|String
name|triplet
parameter_list|)
throws|throws
name|ParseException
block|{
name|int
name|t2
init|=
name|triplet
operator|.
name|lastIndexOf
argument_list|(
literal|'~'
argument_list|)
decl_stmt|;
name|int
name|t1
init|=
name|triplet
operator|.
name|lastIndexOf
argument_list|(
literal|'~'
argument_list|,
name|t2
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|t1
operator|<
literal|0
operator|||
name|t2
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|String
name|project
init|=
name|Url
operator|.
name|decode
argument_list|(
name|triplet
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|t1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|branch
init|=
name|Url
operator|.
name|decode
argument_list|(
name|triplet
operator|.
name|substring
argument_list|(
name|t1
operator|+
literal|1
argument_list|,
name|t2
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|Url
operator|.
name|decode
argument_list|(
name|triplet
operator|.
name|substring
argument_list|(
name|t2
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|branch
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_REFS
argument_list|)
condition|)
block|{
name|branch
operator|=
name|Constants
operator|.
name|R_HEADS
operator|+
name|branch
expr_stmt|;
block|}
name|changeKey
operator|=
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|projectNameKey
operator|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|branchNameKey
operator|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|projectNameKey
argument_list|,
name|branch
argument_list|)
expr_stmt|;
block|}
DECL|method|getChangeKey ()
specifier|public
name|Change
operator|.
name|Key
name|getChangeKey
parameter_list|()
block|{
return|return
name|changeKey
return|;
block|}
DECL|method|getBranchNameKey ()
specifier|public
name|Branch
operator|.
name|NameKey
name|getBranchNameKey
parameter_list|()
block|{
return|return
name|branchNameKey
return|;
block|}
DECL|method|format (final Change change)
specifier|public
specifier|static
name|String
name|format
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|)
block|{
return|return
name|change
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"~"
operator|+
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|getShortName
argument_list|()
operator|+
literal|"~"
operator|+
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
DECL|class|ParseException
specifier|public
specifier|static
class|class
name|ParseException
extends|extends
name|Exception
block|{
DECL|method|ParseException ()
name|ParseException
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

