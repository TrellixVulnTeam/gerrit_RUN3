begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|RefRight
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AnonymousUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|WildProjectName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** Cached information on a project. */
end_comment

begin_class
DECL|class|ProjectState
specifier|public
class|class
name|ProjectState
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (Project project, Collection<RefRight> localRights)
name|ProjectState
name|create
parameter_list|(
name|Project
name|project
parameter_list|,
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|localRights
parameter_list|)
function_decl|;
block|}
DECL|field|anonymousUser
specifier|private
specifier|final
name|AnonymousUser
name|anonymousUser
decl_stmt|;
DECL|field|wildProject
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|wildProject
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|projectControlFactory
specifier|private
specifier|final
name|ProjectControl
operator|.
name|AssistedFactory
name|projectControlFactory
decl_stmt|;
DECL|field|project
specifier|private
specifier|final
name|Project
name|project
decl_stmt|;
DECL|field|localRights
specifier|private
specifier|final
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|localRights
decl_stmt|;
DECL|field|localOwners
specifier|private
specifier|final
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|localOwners
decl_stmt|;
DECL|field|inheritedRights
specifier|private
specifier|volatile
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|inheritedRights
decl_stmt|;
annotation|@
name|Inject
DECL|method|ProjectState (final AnonymousUser anonymousUser, final ProjectCache projectCache, @WildProjectName final Project.NameKey wildProject, final ProjectControl.AssistedFactory projectControlFactory, @Assisted final Project project, @Assisted Collection<RefRight> rights)
specifier|protected
name|ProjectState
parameter_list|(
specifier|final
name|AnonymousUser
name|anonymousUser
parameter_list|,
specifier|final
name|ProjectCache
name|projectCache
parameter_list|,
annotation|@
name|WildProjectName
specifier|final
name|Project
operator|.
name|NameKey
name|wildProject
parameter_list|,
specifier|final
name|ProjectControl
operator|.
name|AssistedFactory
name|projectControlFactory
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|Project
name|project
parameter_list|,
annotation|@
name|Assisted
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|rights
parameter_list|)
block|{
name|this
operator|.
name|anonymousUser
operator|=
name|anonymousUser
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|wildProject
operator|=
name|wildProject
expr_stmt|;
name|this
operator|.
name|projectControlFactory
operator|=
name|projectControlFactory
expr_stmt|;
if|if
condition|(
name|wildProject
operator|.
name|equals
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
condition|)
block|{
name|rights
operator|=
operator|new
name|ArrayList
argument_list|<
name|RefRight
argument_list|>
argument_list|(
name|rights
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RefRight
argument_list|>
name|itr
init|=
name|rights
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|itr
operator|.
name|next
argument_list|()
operator|.
name|getApprovalCategoryId
argument_list|()
operator|.
name|canBeOnWildProject
argument_list|()
condition|)
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|rights
operator|=
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|rights
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
name|this
operator|.
name|localRights
operator|=
name|rights
expr_stmt|;
specifier|final
name|HashSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groups
init|=
operator|new
name|HashSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|RefRight
name|right
range|:
name|rights
control|)
block|{
if|if
condition|(
name|ApprovalCategory
operator|.
name|OWN
operator|.
name|equals
argument_list|(
name|right
operator|.
name|getApprovalCategoryId
argument_list|()
argument_list|)
operator|&&
name|right
operator|.
name|getMaxValue
argument_list|()
operator|>
literal|0
operator|&&
name|right
operator|.
name|getRefPattern
argument_list|()
operator|.
name|equals
argument_list|(
name|RefRight
operator|.
name|ALL
argument_list|)
condition|)
block|{
name|groups
operator|.
name|add
argument_list|(
name|right
operator|.
name|getAccountGroupUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|localOwners
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|groups
argument_list|)
expr_stmt|;
block|}
DECL|method|getProject ()
specifier|public
name|Project
name|getProject
parameter_list|()
block|{
return|return
name|project
return|;
block|}
comment|/** Get the rights that pertain only to this project. */
DECL|method|getLocalRights ()
specifier|public
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|getLocalRights
parameter_list|()
block|{
return|return
name|localRights
return|;
block|}
comment|/**    * Get the rights that pertain only to this project.    *    * @param action the category requested.    * @return immutable collection of rights for the requested category.    */
DECL|method|getLocalRights (ApprovalCategory.Id action)
specifier|public
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|getLocalRights
parameter_list|(
name|ApprovalCategory
operator|.
name|Id
name|action
parameter_list|)
block|{
return|return
name|filter
argument_list|(
name|getLocalRights
argument_list|()
argument_list|,
name|action
argument_list|)
return|;
block|}
comment|/** Get the rights this project inherits from the wild project. */
DECL|method|getInheritedRights ()
specifier|public
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|getInheritedRights
parameter_list|()
block|{
if|if
condition|(
name|inheritedRights
operator|==
literal|null
condition|)
block|{
name|inheritedRights
operator|=
name|computeInheritedRights
argument_list|()
expr_stmt|;
block|}
return|return
name|inheritedRights
return|;
block|}
DECL|method|setInheritedRights (Collection<RefRight> all)
name|void
name|setInheritedRights
parameter_list|(
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|all
parameter_list|)
block|{
name|inheritedRights
operator|=
name|all
expr_stmt|;
block|}
DECL|method|computeInheritedRights ()
specifier|private
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|computeInheritedRights
parameter_list|()
block|{
if|if
condition|(
name|isSpecialWildProject
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|RefRight
argument_list|>
name|inherited
init|=
operator|new
name|ArrayList
argument_list|<
name|RefRight
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
argument_list|()
decl_stmt|;
name|Project
operator|.
name|NameKey
name|parent
init|=
name|project
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|seen
operator|.
name|add
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|ProjectState
name|s
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|inherited
operator|.
name|addAll
argument_list|(
name|s
operator|.
name|getLocalRights
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|=
name|s
operator|.
name|getProject
argument_list|()
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
comment|// Wild project is the parent, or the root of the tree
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|inherited
operator|.
name|addAll
argument_list|(
name|getWildProjectRights
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|inherited
argument_list|)
return|;
block|}
DECL|method|getWildProjectRights ()
specifier|private
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|getWildProjectRights
parameter_list|()
block|{
specifier|final
name|ProjectState
name|s
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|wildProject
argument_list|)
decl_stmt|;
return|return
name|s
operator|!=
literal|null
condition|?
name|s
operator|.
name|getLocalRights
argument_list|()
else|:
name|Collections
operator|.
expr|<
name|RefRight
operator|>
name|emptyList
argument_list|()
return|;
block|}
comment|/**    * Utility class that is needed to filter overridden refrights    */
DECL|class|Grant
specifier|private
specifier|static
class|class
name|Grant
block|{
DECL|field|group
specifier|final
name|AccountGroup
operator|.
name|Id
name|group
decl_stmt|;
DECL|field|pattern
specifier|final
name|String
name|pattern
decl_stmt|;
DECL|method|Grant (AccountGroup.Id group, String pattern)
specifier|private
name|Grant
parameter_list|(
name|AccountGroup
operator|.
name|Id
name|group
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|Grant
name|grant
init|=
operator|(
name|Grant
operator|)
name|o
decl_stmt|;
return|return
name|group
operator|.
name|equals
argument_list|(
name|grant
operator|.
name|group
argument_list|)
operator|&&
name|pattern
operator|.
name|equals
argument_list|(
name|grant
operator|.
name|pattern
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|group
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|pattern
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
comment|/**    * Get the rights this project has and inherits from the wild project.    *    * @param action the category requested.    * @param dropOverridden whether to remove inherited permissions in case if we have a    *     local one that matches (action,group,ref)    * @return immutable collection of rights for the requested category.    */
DECL|method|getAllRights (ApprovalCategory.Id action, boolean dropOverridden)
specifier|public
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|getAllRights
parameter_list|(
name|ApprovalCategory
operator|.
name|Id
name|action
parameter_list|,
name|boolean
name|dropOverridden
parameter_list|)
block|{
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|rights
init|=
operator|new
name|LinkedList
argument_list|<
name|RefRight
argument_list|>
argument_list|(
name|getLocalRights
argument_list|(
name|action
argument_list|)
argument_list|)
decl_stmt|;
name|rights
operator|.
name|addAll
argument_list|(
name|filter
argument_list|(
name|getInheritedRights
argument_list|()
argument_list|,
name|action
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dropOverridden
condition|)
block|{
name|Set
argument_list|<
name|Grant
argument_list|>
name|grants
init|=
operator|new
name|HashSet
argument_list|<
name|Grant
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|RefRight
argument_list|>
name|iter
init|=
name|rights
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RefRight
name|right
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Grant
name|grant
init|=
operator|new
name|Grant
argument_list|(
name|right
operator|.
name|getAccountGroupId
argument_list|()
argument_list|,
name|right
operator|.
name|getRefPattern
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|grants
operator|.
name|contains
argument_list|(
name|grant
argument_list|)
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|grants
operator|.
name|add
argument_list|(
name|grant
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|rights
argument_list|)
return|;
block|}
comment|/** Is this the special wild project which manages inherited rights? */
DECL|method|isSpecialWildProject ()
specifier|public
name|boolean
name|isSpecialWildProject
parameter_list|()
block|{
return|return
name|project
operator|.
name|getNameKey
argument_list|()
operator|.
name|equals
argument_list|(
name|wildProject
argument_list|)
return|;
block|}
comment|/**    * @return all {@link AccountGroup}'s to which the owner privilege for    *         'refs/*' is assigned for this project (the local owners), if there    *         are no local owners the local owners of the nearest parent project    *         that has local owners are returned    */
DECL|method|getOwners ()
specifier|public
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|getOwners
parameter_list|()
block|{
if|if
condition|(
operator|!
name|localOwners
operator|.
name|isEmpty
argument_list|()
operator|||
name|isSpecialWildProject
argument_list|()
operator|||
name|project
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|localOwners
return|;
block|}
specifier|final
name|ProjectState
name|parent
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|project
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
return|return
name|parent
operator|.
name|getOwners
argument_list|()
return|;
block|}
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
comment|/**    * @return all {@link AccountGroup}'s that are allowed to administrate the    *         complete project. This includes all groups to which the owner    *         privilege for 'refs/*' is assigned for this project (the local    *         owners) and all groups to which the owner privilege for 'refs/*' is    *         assigned for one of the parent projects (the inherited owners).    */
DECL|method|getAllOwners ()
specifier|public
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|getAllOwners
parameter_list|()
block|{
specifier|final
name|HashSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|owners
init|=
operator|new
name|HashSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|RefRight
name|right
range|:
name|getAllRights
argument_list|(
name|ApprovalCategory
operator|.
name|OWN
argument_list|,
literal|true
argument_list|)
control|)
block|{
if|if
condition|(
name|right
operator|.
name|getMaxValue
argument_list|()
operator|>
literal|0
operator|&&
name|right
operator|.
name|getRefPattern
argument_list|()
operator|.
name|equals
argument_list|(
name|RefRight
operator|.
name|ALL
argument_list|)
condition|)
block|{
name|owners
operator|.
name|add
argument_list|(
name|right
operator|.
name|getAccountGroupUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|owners
argument_list|)
return|;
block|}
DECL|method|controlForAnonymousUser ()
specifier|public
name|ProjectControl
name|controlForAnonymousUser
parameter_list|()
block|{
return|return
name|controlFor
argument_list|(
name|anonymousUser
argument_list|)
return|;
block|}
DECL|method|controlFor (final CurrentUser user)
specifier|public
name|ProjectControl
name|controlFor
parameter_list|(
specifier|final
name|CurrentUser
name|user
parameter_list|)
block|{
return|return
name|projectControlFactory
operator|.
name|create
argument_list|(
name|user
argument_list|,
name|this
argument_list|)
return|;
block|}
DECL|method|filter (Collection<RefRight> all, ApprovalCategory.Id actionId)
specifier|private
specifier|static
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|filter
parameter_list|(
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|all
parameter_list|,
name|ApprovalCategory
operator|.
name|Id
name|actionId
parameter_list|)
block|{
if|if
condition|(
name|all
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|final
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|mine
init|=
operator|new
name|ArrayList
argument_list|<
name|RefRight
argument_list|>
argument_list|(
name|all
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|RefRight
name|right
range|:
name|all
control|)
block|{
if|if
condition|(
name|right
operator|.
name|getApprovalCategoryId
argument_list|()
operator|.
name|equals
argument_list|(
name|actionId
argument_list|)
condition|)
block|{
name|mine
operator|.
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mine
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|mine
argument_list|)
return|;
block|}
block|}
end_class

end_unit

