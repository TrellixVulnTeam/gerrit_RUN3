begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.config
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGeneralPreferences
operator|.
name|DownloadCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGeneralPreferences
operator|.
name|DownloadScheme
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ArchiveFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Download protocol from {@code gerrit.config}. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|DownloadConfig
specifier|public
class|class
name|DownloadConfig
block|{
DECL|field|downloadSchemes
specifier|private
specifier|final
name|ImmutableSet
argument_list|<
name|DownloadScheme
argument_list|>
name|downloadSchemes
decl_stmt|;
DECL|field|downloadCommands
specifier|private
specifier|final
name|ImmutableSet
argument_list|<
name|DownloadCommand
argument_list|>
name|downloadCommands
decl_stmt|;
DECL|field|archiveFormats
specifier|private
specifier|final
name|ImmutableSet
argument_list|<
name|ArchiveFormat
argument_list|>
name|archiveFormats
decl_stmt|;
annotation|@
name|Inject
DECL|method|DownloadConfig (@erritServerConfig final Config cfg)
name|DownloadConfig
parameter_list|(
annotation|@
name|GerritServerConfig
specifier|final
name|Config
name|cfg
parameter_list|)
block|{
name|List
argument_list|<
name|DownloadScheme
argument_list|>
name|allSchemes
init|=
name|ConfigUtil
operator|.
name|getEnumList
argument_list|(
name|cfg
argument_list|,
literal|"download"
argument_list|,
literal|null
argument_list|,
literal|"scheme"
argument_list|,
name|DownloadScheme
operator|.
name|values
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|isOnlyNull
argument_list|(
name|allSchemes
argument_list|)
condition|)
block|{
name|downloadSchemes
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|DownloadScheme
operator|.
name|SSH
argument_list|,
name|DownloadScheme
operator|.
name|HTTP
argument_list|,
name|DownloadScheme
operator|.
name|ANON_HTTP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|downloadSchemes
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|allSchemes
argument_list|)
expr_stmt|;
block|}
name|DownloadCommand
index|[]
name|downloadCommandValues
init|=
name|DownloadCommand
operator|.
name|values
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DownloadCommand
argument_list|>
name|allCommands
init|=
name|ConfigUtil
operator|.
name|getEnumList
argument_list|(
name|cfg
argument_list|,
literal|"download"
argument_list|,
literal|null
argument_list|,
literal|"command"
argument_list|,
name|downloadCommandValues
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|isOnlyNull
argument_list|(
name|allCommands
argument_list|)
condition|)
block|{
name|downloadCommands
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|downloadCommandValues
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|downloadCommands
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|allCommands
argument_list|)
expr_stmt|;
block|}
name|String
name|v
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"download"
argument_list|,
literal|null
argument_list|,
literal|"archive"
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|archiveFormats
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|ArchiveFormat
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|.
name|isEmpty
argument_list|()
operator|||
literal|"off"
operator|.
name|equalsIgnoreCase
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|archiveFormats
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|archiveFormats
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|ConfigUtil
operator|.
name|getEnumList
argument_list|(
name|cfg
argument_list|,
literal|"download"
argument_list|,
literal|null
argument_list|,
literal|"archive"
argument_list|,
name|ArchiveFormat
operator|.
name|TGZ
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isOnlyNull (List<?> list)
specifier|private
specifier|static
name|boolean
name|isOnlyNull
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
literal|null
return|;
block|}
comment|/** Scheme used to download. */
DECL|method|getDownloadSchemes ()
specifier|public
name|ImmutableSet
argument_list|<
name|DownloadScheme
argument_list|>
name|getDownloadSchemes
parameter_list|()
block|{
return|return
name|downloadSchemes
return|;
block|}
comment|/** Command used to download. */
DECL|method|getDownloadCommands ()
specifier|public
name|ImmutableSet
argument_list|<
name|DownloadCommand
argument_list|>
name|getDownloadCommands
parameter_list|()
block|{
return|return
name|downloadCommands
return|;
block|}
comment|/** Archive formats for downloading. */
DECL|method|getArchiveFormats ()
specifier|public
name|ImmutableSet
argument_list|<
name|ArchiveFormat
argument_list|>
name|getArchiveFormats
parameter_list|()
block|{
return|return
name|archiveFormats
return|;
block|}
block|}
end_class

end_unit

