begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|UserConfigSections
operator|.
name|KEY_URL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|UserConfigSections
operator|.
name|MY
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|Accounts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|VersionedAccountPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|TextProgressMonitor
import|;
end_import

begin_comment
comment|/**  * Remove "My Drafts" menu items for all users and server-wide default preferences.  *  *<p>Since draft changes no longer exist, these menu items are obsolete.  *  *<p>Only matches menu items (with any name) where the URL exactly matches the<a  * href="https://gerrit.googlesource.com/gerrit/+/v2.14.4/gerrit-server/src/main/java/com/google/gerrit/server/account/GeneralPreferencesLoader.java#144">default  * version from 2.14 and earlier</a>. Other menus containing {@code is:draft} in other positions are  * not affected; this is still a valid predicate that matches no changes.  */
end_comment

begin_class
DECL|class|Schema_160
specifier|public
class|class
name|Schema_160
extends|extends
name|SchemaVersion
block|{
DECL|field|DEFAULT_DRAFT_ITEM
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|String
name|DEFAULT_DRAFT_ITEM
init|=
literal|"#/q/owner:self+is:draft"
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
decl_stmt|;
annotation|@
name|Inject
DECL|method|Schema_160 ( Provider<Schema_159> prior, GitRepositoryManager repoManager, AllUsersName allUsersName, @GerritPersonIdent Provider<PersonIdent> serverIdent)
name|Schema_160
parameter_list|(
name|Provider
argument_list|<
name|Schema_159
argument_list|>
name|prior
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
annotation|@
name|GerritPersonIdent
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
parameter_list|)
block|{
name|super
argument_list|(
name|prior
argument_list|)
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|migrateData (ReviewDb db, UpdateUI ui)
specifier|protected
name|void
name|migrateData
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|UpdateUI
name|ui
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
name|ProgressMonitor
name|pm
init|=
operator|new
name|TextProgressMonitor
argument_list|()
decl_stmt|;
name|pm
operator|.
name|beginTask
argument_list|(
literal|"Removing \"My Drafts\" menu items"
argument_list|,
name|ProgressMonitor
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
operator|(
name|Iterable
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
operator|)
name|Accounts
operator|.
name|readUserRefs
argument_list|(
name|repo
argument_list|)
operator|::
name|iterator
control|)
block|{
name|removeMyDrafts
argument_list|(
name|repo
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|id
argument_list|)
argument_list|,
name|pm
argument_list|)
expr_stmt|;
block|}
name|removeMyDrafts
argument_list|(
name|repo
argument_list|,
name|RefNames
operator|.
name|REFS_USERS_DEFAULT
argument_list|,
name|pm
argument_list|)
expr_stmt|;
name|pm
operator|.
name|endTask
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Removing \"My Drafts\" menu items failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|removeMyDrafts (Repository repo, String ref, ProgressMonitor pm)
specifier|private
name|void
name|removeMyDrafts
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|String
name|ref
parameter_list|,
name|ProgressMonitor
name|pm
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|MetaDataUpdate
name|md
init|=
operator|new
name|MetaDataUpdate
argument_list|(
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|,
name|allUsersName
argument_list|,
name|repo
argument_list|)
decl_stmt|;
name|PersonIdent
name|ident
init|=
name|serverIdent
operator|.
name|get
argument_list|()
decl_stmt|;
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|Prefs
name|prefs
init|=
operator|new
name|Prefs
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|prefs
operator|.
name|load
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|removeMyDrafts
argument_list|()
expr_stmt|;
name|prefs
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|dirty
argument_list|()
condition|)
block|{
name|pm
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Prefs
specifier|private
specifier|static
class|class
name|Prefs
extends|extends
name|VersionedAccountPreferences
block|{
DECL|field|dirty
specifier|private
name|boolean
name|dirty
decl_stmt|;
DECL|method|Prefs (String ref)
name|Prefs
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|super
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onSave (CommitBuilder commit)
specifier|protected
name|boolean
name|onSave
parameter_list|(
name|CommitBuilder
name|commit
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
if|if
condition|(
operator|!
name|dirty
condition|)
block|{
return|return
literal|false
return|;
block|}
name|commit
operator|.
name|setMessage
argument_list|(
literal|"Remove \"My Drafts\" menu items"
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|onSave
argument_list|(
name|commit
argument_list|)
return|;
block|}
DECL|method|removeMyDrafts ()
name|void
name|removeMyDrafts
parameter_list|()
block|{
name|Config
name|cfg
init|=
name|getConfig
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|item
range|:
name|cfg
operator|.
name|getSubsections
argument_list|(
name|MY
argument_list|)
control|)
block|{
if|if
condition|(
name|DEFAULT_DRAFT_ITEM
operator|.
name|equals
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
name|MY
argument_list|,
name|item
argument_list|,
name|KEY_URL
argument_list|)
argument_list|)
condition|)
block|{
name|cfg
operator|.
name|unsetSection
argument_list|(
name|MY
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
DECL|method|dirty ()
name|boolean
name|dirty
parameter_list|()
block|{
return|return
name|dirty
return|;
block|}
block|}
block|}
end_class

end_unit

