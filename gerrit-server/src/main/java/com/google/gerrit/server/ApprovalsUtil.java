begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
operator|.
name|LabelId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeKind
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Utility functions to manipulate patchset approvals.  *<p>  * Approvals are overloaded, they represent both approvals and reviewers  * which should be CCed on a change.  To ensure that reviewers are not lost  * there must always be an approval on each patchset for each reviewer,  * even if the reviewer hasn't actually given a score to the change.  To  * mark the "no score" case, a dummy approval, which may live in any of  * the available categories, with a score of 0 is used.  *<p>  * The methods in this class do not begin/commit transactions.  */
end_comment

begin_class
DECL|class|ApprovalsUtil
specifier|public
class|class
name|ApprovalsUtil
block|{
annotation|@
name|Inject
DECL|method|ApprovalsUtil ()
name|ApprovalsUtil
parameter_list|()
block|{   }
comment|/**    * Copy min/max scores from one patch set to another.    *    * @throws OrmException    */
DECL|method|copyLabels (ReviewDb db, LabelTypes labelTypes, PatchSet.Id source, PatchSet dest, ChangeKind changeKind)
specifier|public
name|void
name|copyLabels
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|PatchSet
operator|.
name|Id
name|source
parameter_list|,
name|PatchSet
name|dest
parameter_list|,
name|ChangeKind
name|changeKind
parameter_list|)
throws|throws
name|OrmException
block|{
name|Iterable
argument_list|<
name|PatchSetApproval
argument_list|>
name|sourceApprovals
init|=
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|copyLabels
argument_list|(
name|db
argument_list|,
name|labelTypes
argument_list|,
name|sourceApprovals
argument_list|,
name|source
argument_list|,
name|dest
argument_list|,
name|changeKind
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy a set's min/max scores from one patch set to another.    *    * @throws OrmException    */
DECL|method|copyLabels (ReviewDb db, LabelTypes labelTypes, Iterable<PatchSetApproval> sourceApprovals, PatchSet.Id source, PatchSet dest, ChangeKind changeKind)
specifier|public
name|void
name|copyLabels
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|Iterable
argument_list|<
name|PatchSetApproval
argument_list|>
name|sourceApprovals
parameter_list|,
name|PatchSet
operator|.
name|Id
name|source
parameter_list|,
name|PatchSet
name|dest
parameter_list|,
name|ChangeKind
name|changeKind
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|copied
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|sourceApprovals
control|)
block|{
if|if
condition|(
name|source
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
name|LabelType
name|type
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|a
operator|.
name|getLabelId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|isCopyMinScore
argument_list|()
operator|&&
name|type
operator|.
name|isMaxNegative
argument_list|(
name|a
argument_list|)
condition|)
block|{
name|copied
operator|.
name|add
argument_list|(
operator|new
name|PatchSetApproval
argument_list|(
name|dest
operator|.
name|getId
argument_list|()
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|isCopyMaxScore
argument_list|()
operator|&&
name|type
operator|.
name|isMaxPositive
argument_list|(
name|a
argument_list|)
condition|)
block|{
name|copied
operator|.
name|add
argument_list|(
operator|new
name|PatchSetApproval
argument_list|(
name|dest
operator|.
name|getId
argument_list|()
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|isCopyAllScoresOnTrivialRebase
argument_list|()
operator|&&
name|ChangeKind
operator|.
name|TRIVIAL_REBASE
operator|.
name|equals
argument_list|(
name|changeKind
argument_list|)
condition|)
block|{
name|copied
operator|.
name|add
argument_list|(
operator|new
name|PatchSetApproval
argument_list|(
name|dest
operator|.
name|getId
argument_list|()
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|isCopyAllScoresIfNoCodeChange
argument_list|()
operator|&&
name|ChangeKind
operator|.
name|NO_CODE_CHANGE
operator|.
name|equals
argument_list|(
name|changeKind
argument_list|)
condition|)
block|{
name|copied
operator|.
name|add
argument_list|(
operator|new
name|PatchSetApproval
argument_list|(
name|dest
operator|.
name|getId
argument_list|()
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|insert
argument_list|(
name|copied
argument_list|)
expr_stmt|;
block|}
DECL|method|addReviewers (ReviewDb db, LabelTypes labelTypes, Change change, PatchSet ps, PatchSetInfo info, Iterable<Account.Id> wantReviewers, Set<Account.Id> existingReviewers)
specifier|public
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|addReviewers
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|Change
name|change
parameter_list|,
name|PatchSet
name|ps
parameter_list|,
name|PatchSetInfo
name|info
parameter_list|,
name|Iterable
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|wantReviewers
parameter_list|,
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|existingReviewers
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|addReviewers
argument_list|(
name|db
argument_list|,
name|labelTypes
argument_list|,
name|change
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|ps
operator|.
name|isDraft
argument_list|()
argument_list|,
name|info
operator|.
name|getAuthor
argument_list|()
operator|.
name|getAccount
argument_list|()
argument_list|,
name|info
operator|.
name|getCommitter
argument_list|()
operator|.
name|getAccount
argument_list|()
argument_list|,
name|wantReviewers
argument_list|,
name|existingReviewers
argument_list|)
return|;
block|}
DECL|method|addReviewers (ReviewDb db, LabelTypes labelTypes, Change change, Iterable<Account.Id> wantReviewers)
specifier|public
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|addReviewers
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|Change
name|change
parameter_list|,
name|Iterable
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|wantReviewers
parameter_list|)
throws|throws
name|OrmException
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|change
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|existing
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|psId
argument_list|)
control|)
block|{
name|existing
operator|.
name|add
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|addReviewers
argument_list|(
name|db
argument_list|,
name|labelTypes
argument_list|,
name|change
argument_list|,
name|psId
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|wantReviewers
argument_list|,
name|existing
argument_list|)
return|;
block|}
DECL|method|addReviewers (ReviewDb db, LabelTypes labelTypes, Change change, PatchSet.Id psId, boolean isDraft, Account.Id authorId, Account.Id committerId, Iterable<Account.Id> wantReviewers, Set<Account.Id> existingReviewers)
specifier|private
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|addReviewers
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|Change
name|change
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|boolean
name|isDraft
parameter_list|,
name|Account
operator|.
name|Id
name|authorId
parameter_list|,
name|Account
operator|.
name|Id
name|committerId
parameter_list|,
name|Iterable
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|wantReviewers
parameter_list|,
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|existingReviewers
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|LabelType
argument_list|>
name|allTypes
init|=
name|labelTypes
operator|.
name|getLabelTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|allTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|need
init|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|wantReviewers
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorId
operator|!=
literal|null
operator|&&
operator|!
name|isDraft
condition|)
block|{
name|need
operator|.
name|add
argument_list|(
name|authorId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|committerId
operator|!=
literal|null
operator|&&
operator|!
name|isDraft
condition|)
block|{
name|need
operator|.
name|add
argument_list|(
name|committerId
argument_list|)
expr_stmt|;
block|}
name|need
operator|.
name|remove
argument_list|(
name|change
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|need
operator|.
name|removeAll
argument_list|(
name|existingReviewers
argument_list|)
expr_stmt|;
if|if
condition|(
name|need
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|cells
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|need
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|LabelId
name|labelId
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|allTypes
argument_list|)
operator|.
name|getLabelId
argument_list|()
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|account
range|:
name|need
control|)
block|{
name|cells
operator|.
name|add
argument_list|(
operator|new
name|PatchSetApproval
argument_list|(
operator|new
name|PatchSetApproval
operator|.
name|Key
argument_list|(
name|psId
argument_list|,
name|account
argument_list|,
name|labelId
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|insert
argument_list|(
name|cells
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|cells
argument_list|)
return|;
block|}
block|}
end_class

end_unit

