begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.patch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ioutil
operator|.
name|BasicSerialization
operator|.
name|readEnum
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ioutil
operator|.
name|BasicSerialization
operator|.
name|readVarInt32
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ioutil
operator|.
name|BasicSerialization
operator|.
name|writeEnum
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ioutil
operator|.
name|BasicSerialization
operator|.
name|writeVarInt32
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|CodedEnum
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|Edit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|ReplaceEdit
import|;
end_import

begin_class
DECL|class|IntraLineDiff
specifier|public
class|class
name|IntraLineDiff
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
name|IntraLineDiffKey
operator|.
name|serialVersionUID
decl_stmt|;
DECL|enum|Status
specifier|public
enum|enum
name|Status
implements|implements
name|CodedEnum
block|{
DECL|enumConstant|EDIT_LIST
name|EDIT_LIST
argument_list|(
literal|'e'
argument_list|)
block|,
DECL|enumConstant|DISABLED
name|DISABLED
argument_list|(
literal|'D'
argument_list|)
block|,
DECL|enumConstant|TIMEOUT
name|TIMEOUT
argument_list|(
literal|'T'
argument_list|)
block|,
DECL|enumConstant|ERROR
name|ERROR
argument_list|(
literal|'E'
argument_list|)
block|;
DECL|field|code
specifier|private
specifier|final
name|char
name|code
decl_stmt|;
DECL|method|Status (char code)
name|Status
parameter_list|(
name|char
name|code
parameter_list|)
block|{
name|this
operator|.
name|code
operator|=
name|code
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCode ()
specifier|public
name|char
name|getCode
parameter_list|()
block|{
return|return
name|code
return|;
block|}
block|}
DECL|field|status
specifier|private
specifier|transient
name|Status
name|status
decl_stmt|;
DECL|field|edits
specifier|private
specifier|transient
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|edits
decl_stmt|;
DECL|method|IntraLineDiff (Status status)
name|IntraLineDiff
parameter_list|(
name|Status
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|edits
operator|=
name|ImmutableList
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
DECL|method|IntraLineDiff (List<Edit> edits)
name|IntraLineDiff
parameter_list|(
name|List
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|Status
operator|.
name|EDIT_LIST
expr_stmt|;
name|this
operator|.
name|edits
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|edits
argument_list|)
expr_stmt|;
block|}
DECL|method|getStatus ()
specifier|public
name|Status
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
DECL|method|getEdits ()
specifier|public
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|getEdits
parameter_list|()
block|{
comment|// Edits are mutable objects. As we serialize IntraLineDiff asynchronously in H2CacheImpl, we
comment|// must ensure that its state isn't modified until it was properly stored in the cache.
return|return
name|deepCopyEdits
argument_list|(
name|edits
argument_list|)
return|;
block|}
DECL|method|writeObject (final ObjectOutputStream out)
specifier|private
name|void
name|writeObject
parameter_list|(
specifier|final
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|writeEnum
argument_list|(
name|out
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|writeVarInt32
argument_list|(
name|out
argument_list|,
name|edits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Edit
name|e
range|:
name|edits
control|)
block|{
name|writeEdit
argument_list|(
name|out
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|ReplaceEdit
condition|)
block|{
name|ReplaceEdit
name|r
init|=
operator|(
name|ReplaceEdit
operator|)
name|e
decl_stmt|;
name|writeVarInt32
argument_list|(
name|out
argument_list|,
name|r
operator|.
name|getInternalEdits
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Edit
name|i
range|:
name|r
operator|.
name|getInternalEdits
argument_list|()
control|)
block|{
name|writeEdit
argument_list|(
name|out
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|writeVarInt32
argument_list|(
name|out
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|readObject (final ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
specifier|final
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|status
operator|=
name|readEnum
argument_list|(
name|in
argument_list|,
name|Status
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|editCount
init|=
name|readVarInt32
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Edit
index|[]
name|editArray
init|=
operator|new
name|Edit
index|[
name|editCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|editCount
condition|;
name|i
operator|++
control|)
block|{
name|editArray
index|[
name|i
index|]
operator|=
name|readEdit
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|innerCount
init|=
name|readVarInt32
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|innerCount
condition|)
block|{
name|Edit
index|[]
name|inner
init|=
operator|new
name|Edit
index|[
name|innerCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|innerCount
condition|;
name|j
operator|++
control|)
block|{
name|inner
index|[
name|j
index|]
operator|=
name|readEdit
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|editArray
index|[
name|i
index|]
operator|=
operator|new
name|ReplaceEdit
argument_list|(
name|editArray
index|[
name|i
index|]
argument_list|,
name|toList
argument_list|(
name|inner
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|edits
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|editArray
argument_list|)
expr_stmt|;
block|}
DECL|method|deepCopyEdits (List<Edit> edits)
specifier|private
specifier|static
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|deepCopyEdits
parameter_list|(
name|List
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|)
block|{
return|return
name|edits
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|IntraLineDiff
operator|::
name|copy
argument_list|)
operator|.
name|collect
argument_list|(
name|ImmutableList
operator|.
name|toImmutableList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|copy (Edit edit)
specifier|private
specifier|static
name|Edit
name|copy
parameter_list|(
name|Edit
name|edit
parameter_list|)
block|{
if|if
condition|(
name|edit
operator|instanceof
name|ReplaceEdit
condition|)
block|{
return|return
name|copy
argument_list|(
operator|(
name|ReplaceEdit
operator|)
name|edit
argument_list|)
return|;
block|}
return|return
operator|new
name|Edit
argument_list|(
name|edit
operator|.
name|getBeginA
argument_list|()
argument_list|,
name|edit
operator|.
name|getEndA
argument_list|()
argument_list|,
name|edit
operator|.
name|getBeginB
argument_list|()
argument_list|,
name|edit
operator|.
name|getEndB
argument_list|()
argument_list|)
return|;
block|}
DECL|method|copy (ReplaceEdit edit)
specifier|private
specifier|static
name|ReplaceEdit
name|copy
parameter_list|(
name|ReplaceEdit
name|edit
parameter_list|)
block|{
name|List
argument_list|<
name|Edit
argument_list|>
name|internalEdits
init|=
name|edit
operator|.
name|getInternalEdits
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|IntraLineDiff
operator|::
name|copy
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ReplaceEdit
argument_list|(
name|edit
operator|.
name|getBeginA
argument_list|()
argument_list|,
name|edit
operator|.
name|getEndA
argument_list|()
argument_list|,
name|edit
operator|.
name|getBeginB
argument_list|()
argument_list|,
name|edit
operator|.
name|getEndB
argument_list|()
argument_list|,
name|internalEdits
argument_list|)
return|;
block|}
DECL|method|writeEdit (OutputStream out, Edit e)
specifier|private
specifier|static
name|void
name|writeEdit
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Edit
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|writeVarInt32
argument_list|(
name|out
argument_list|,
name|e
operator|.
name|getBeginA
argument_list|()
argument_list|)
expr_stmt|;
name|writeVarInt32
argument_list|(
name|out
argument_list|,
name|e
operator|.
name|getEndA
argument_list|()
argument_list|)
expr_stmt|;
name|writeVarInt32
argument_list|(
name|out
argument_list|,
name|e
operator|.
name|getBeginB
argument_list|()
argument_list|)
expr_stmt|;
name|writeVarInt32
argument_list|(
name|out
argument_list|,
name|e
operator|.
name|getEndB
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|readEdit (InputStream in)
specifier|private
specifier|static
name|Edit
name|readEdit
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|beginA
init|=
name|readVarInt32
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|endA
init|=
name|readVarInt32
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|beginB
init|=
name|readVarInt32
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|endB
init|=
name|readVarInt32
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
operator|new
name|Edit
argument_list|(
name|beginA
argument_list|,
name|endA
argument_list|,
name|beginB
argument_list|,
name|endB
argument_list|)
return|;
block|}
DECL|method|toList (Edit[] l)
specifier|private
specifier|static
name|List
argument_list|<
name|Edit
argument_list|>
name|toList
parameter_list|(
name|Edit
index|[]
name|l
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|l
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

