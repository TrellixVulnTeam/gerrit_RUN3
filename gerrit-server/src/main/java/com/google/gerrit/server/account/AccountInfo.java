begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|AccountInfo
specifier|public
class|class
name|AccountInfo
block|{
DECL|class|Loader
specifier|public
specifier|static
class|class
name|Loader
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (boolean detailed)
name|Loader
name|create
parameter_list|(
name|boolean
name|detailed
parameter_list|)
function_decl|;
block|}
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|detailed
specifier|private
specifier|final
name|boolean
name|detailed
decl_stmt|;
DECL|field|created
specifier|private
specifier|final
name|Map
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|AccountInfo
argument_list|>
name|created
decl_stmt|;
DECL|field|provided
specifier|private
specifier|final
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|provided
decl_stmt|;
annotation|@
name|Inject
DECL|method|Loader (Provider<ReviewDb> db, AccountCache accountCache, @Assisted boolean detailed)
name|Loader
parameter_list|(
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|AccountCache
name|accountCache
parameter_list|,
annotation|@
name|Assisted
name|boolean
name|detailed
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|detailed
operator|=
name|detailed
expr_stmt|;
name|created
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|provided
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
DECL|method|get (Account.Id id)
specifier|public
name|AccountInfo
name|get
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|AccountInfo
name|info
init|=
name|created
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|info
operator|=
operator|new
name|AccountInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|created
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
DECL|method|put (AccountInfo info)
specifier|public
name|void
name|put
parameter_list|(
name|AccountInfo
name|info
parameter_list|)
block|{
name|provided
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
DECL|method|fill ()
specifier|public
name|void
name|fill
parameter_list|()
throws|throws
name|OrmException
block|{
name|Multimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|AccountInfo
argument_list|>
name|missing
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountInfo
name|info
range|:
name|Iterables
operator|.
name|concat
argument_list|(
name|created
operator|.
name|values
argument_list|()
argument_list|,
name|provided
argument_list|)
control|)
block|{
name|AccountState
name|state
init|=
name|accountCache
operator|.
name|getIfPresent
argument_list|(
name|info
operator|.
name|_id
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|fill
argument_list|(
name|state
operator|.
name|getAccount
argument_list|()
argument_list|,
name|detailed
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|missing
operator|.
name|put
argument_list|(
name|info
operator|.
name|_id
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|missing
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Account
name|account
range|:
name|db
operator|.
name|get
argument_list|()
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|missing
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|AccountInfo
name|info
range|:
name|missing
operator|.
name|get
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|)
control|)
block|{
name|info
operator|.
name|fill
argument_list|(
name|account
argument_list|,
name|detailed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|fill (Collection<? extends AccountInfo> infos)
specifier|public
name|void
name|fill
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|AccountInfo
argument_list|>
name|infos
parameter_list|)
throws|throws
name|OrmException
block|{
for|for
control|(
name|AccountInfo
name|info
range|:
name|infos
control|)
block|{
name|put
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|fill
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|parse (Account a, boolean detailed)
specifier|public
specifier|static
name|AccountInfo
name|parse
parameter_list|(
name|Account
name|a
parameter_list|,
name|boolean
name|detailed
parameter_list|)
block|{
name|AccountInfo
name|ai
init|=
operator|new
name|AccountInfo
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|ai
operator|.
name|fill
argument_list|(
name|a
argument_list|,
name|detailed
argument_list|)
expr_stmt|;
return|return
name|ai
return|;
block|}
DECL|field|_id
specifier|public
specifier|transient
name|Account
operator|.
name|Id
name|_id
decl_stmt|;
DECL|method|AccountInfo (Account.Id id)
specifier|public
name|AccountInfo
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
name|_id
operator|=
name|id
expr_stmt|;
block|}
DECL|field|_account_id
specifier|public
name|Integer
name|_account_id
decl_stmt|;
DECL|field|name
specifier|public
name|String
name|name
decl_stmt|;
DECL|field|email
specifier|public
name|String
name|email
decl_stmt|;
DECL|field|username
specifier|public
name|String
name|username
decl_stmt|;
DECL|method|fill (Account account, boolean detailed)
specifier|private
name|void
name|fill
parameter_list|(
name|Account
name|account
parameter_list|,
name|boolean
name|detailed
parameter_list|)
block|{
name|name
operator|=
name|account
operator|.
name|getFullName
argument_list|()
expr_stmt|;
if|if
condition|(
name|detailed
condition|)
block|{
name|_account_id
operator|=
name|account
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|email
operator|=
name|account
operator|.
name|getPreferredEmail
argument_list|()
expr_stmt|;
name|username
operator|=
name|account
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

