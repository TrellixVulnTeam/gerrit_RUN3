begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.patch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchScriptSettings
operator|.
name|Whitespace
operator|.
name|IGNORE_NONE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchScriptSettings
operator|.
name|Whitespace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|CacheModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|EvictionPolicy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|SelfPopulatingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|Edit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|MyersDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|ReplaceEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AnyObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|FileMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|patch
operator|.
name|FileHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|patch
operator|.
name|FileHeader
operator|.
name|PatchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|treewalk
operator|.
name|TreeWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Provides a cached list of {@link PatchListEntry}. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|PatchListCacheImpl
specifier|public
class|class
name|PatchListCacheImpl
implements|implements
name|PatchListCache
block|{
DECL|field|CACHE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CACHE_NAME
init|=
literal|"diff"
decl_stmt|;
DECL|method|module ()
specifier|public
specifier|static
name|Module
name|module
parameter_list|()
block|{
return|return
operator|new
name|CacheModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
specifier|final
name|TypeLiteral
argument_list|<
name|Cache
argument_list|<
name|PatchListKey
argument_list|,
name|PatchList
argument_list|>
argument_list|>
name|type
init|=
operator|new
name|TypeLiteral
argument_list|<
name|Cache
argument_list|<
name|PatchListKey
argument_list|,
name|PatchList
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|disk
argument_list|(
name|type
argument_list|,
name|CACHE_NAME
argument_list|)
comment|//
operator|.
name|memoryLimit
argument_list|(
literal|128
argument_list|)
comment|// very large items, cache only a few
operator|.
name|evictionPolicy
argument_list|(
name|EvictionPolicy
operator|.
name|LRU
argument_list|)
comment|// prefer most recent
expr_stmt|;
name|bind
argument_list|(
name|PatchListCacheImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|PatchListCache
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|PatchListCacheImpl
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|self
specifier|private
specifier|final
name|SelfPopulatingCache
argument_list|<
name|PatchListKey
argument_list|,
name|PatchList
argument_list|>
name|self
decl_stmt|;
annotation|@
name|Inject
DECL|method|PatchListCacheImpl (final GitRepositoryManager grm, @Named(CACHE_NAME) final Cache<PatchListKey, PatchList> raw)
name|PatchListCacheImpl
parameter_list|(
specifier|final
name|GitRepositoryManager
name|grm
parameter_list|,
annotation|@
name|Named
argument_list|(
name|CACHE_NAME
argument_list|)
specifier|final
name|Cache
argument_list|<
name|PatchListKey
argument_list|,
name|PatchList
argument_list|>
name|raw
parameter_list|)
block|{
name|repoManager
operator|=
name|grm
expr_stmt|;
name|self
operator|=
operator|new
name|SelfPopulatingCache
argument_list|<
name|PatchListKey
argument_list|,
name|PatchList
argument_list|>
argument_list|(
name|raw
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|PatchList
name|createEntry
parameter_list|(
specifier|final
name|PatchListKey
name|key
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|compute
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
DECL|method|get (final PatchListKey key)
specifier|public
name|PatchList
name|get
parameter_list|(
specifier|final
name|PatchListKey
name|key
parameter_list|)
block|{
return|return
name|self
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|get (final Change change, final PatchSet patchSet)
specifier|public
name|PatchList
name|get
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|,
specifier|final
name|PatchSet
name|patchSet
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|change
argument_list|,
name|patchSet
argument_list|,
name|IGNORE_NONE
argument_list|)
return|;
block|}
DECL|method|get (final Change change, final PatchSet patchSet, final Whitespace whitespace)
specifier|public
name|PatchList
name|get
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|,
specifier|final
name|PatchSet
name|patchSet
parameter_list|,
specifier|final
name|Whitespace
name|whitespace
parameter_list|)
block|{
specifier|final
name|Project
operator|.
name|NameKey
name|projectKey
init|=
name|change
operator|.
name|getProject
argument_list|()
decl_stmt|;
specifier|final
name|ObjectId
name|a
init|=
literal|null
decl_stmt|;
specifier|final
name|ObjectId
name|b
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|patchSet
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|get
argument_list|(
operator|new
name|PatchListKey
argument_list|(
name|projectKey
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|whitespace
argument_list|)
argument_list|)
return|;
block|}
DECL|method|compute (final PatchListKey key)
specifier|private
name|PatchList
name|compute
parameter_list|(
specifier|final
name|PatchListKey
name|key
parameter_list|)
throws|throws
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
throws|,
name|IOException
block|{
specifier|final
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|key
operator|.
name|projectKey
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|readPatchList
argument_list|(
name|key
argument_list|,
name|repo
argument_list|)
return|;
block|}
finally|finally
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|readPatchList (final PatchListKey key, final Repository repo)
specifier|private
name|PatchList
name|readPatchList
parameter_list|(
specifier|final
name|PatchListKey
name|key
parameter_list|,
specifier|final
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
decl_stmt|;
specifier|final
name|RevCommit
name|b
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|key
operator|.
name|getNewId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AnyObjectId
name|a
init|=
name|aFor
argument_list|(
name|key
argument_list|,
name|repo
argument_list|,
name|b
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"git"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"--git-dir=."
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"diff-tree"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-M"
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|key
operator|.
name|getWhitespace
argument_list|()
condition|)
block|{
case|case
name|IGNORE_NONE
case|:
break|break;
case|case
name|IGNORE_SPACE_AT_EOL
case|:
name|args
operator|.
name|add
argument_list|(
literal|"--ignore-space-at-eol"
argument_list|)
expr_stmt|;
break|break;
case|case
name|IGNORE_SPACE_CHANGE
case|:
name|args
operator|.
name|add
argument_list|(
literal|"--ignore-space-change"
argument_list|)
expr_stmt|;
break|break;
case|case
name|IGNORE_ALL_SPACE
case|:
name|args
operator|.
name|add
argument_list|(
literal|"--ignore-all-space"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unsupported whitespace "
operator|+
name|key
operator|.
name|getWhitespace
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|a
operator|==
literal|null
comment|/* want combined diff */
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"--cc"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|b
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|args
operator|.
name|add
argument_list|(
literal|"--unified=1"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|a
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|b
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|patch
operator|.
name|Patch
name|p
init|=
operator|new
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|patch
operator|.
name|Patch
argument_list|()
decl_stmt|;
specifier|final
name|Process
name|diffProcess
init|=
name|exec
argument_list|(
name|repo
argument_list|,
name|args
argument_list|)
decl_stmt|;
try|try
block|{
name|diffProcess
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|diffProcess
operator|.
name|getErrorStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|InputStream
name|in
init|=
name|diffProcess
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|p
operator|.
name|parse
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
specifier|final
name|int
name|rc
init|=
name|diffProcess
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"git diff-tree exited abnormally: "
operator|+
name|rc
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{       }
block|}
name|RevTree
name|aTree
init|=
name|a
operator|!=
literal|null
condition|?
name|rw
operator|.
name|parseTree
argument_list|(
name|a
argument_list|)
else|:
literal|null
decl_stmt|;
name|RevTree
name|bTree
init|=
name|b
operator|.
name|getTree
argument_list|()
decl_stmt|;
specifier|final
name|int
name|cnt
init|=
name|p
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|PatchListEntry
index|[]
name|entries
init|=
operator|new
name|PatchListEntry
index|[
name|cnt
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|entries
index|[
name|i
index|]
operator|=
name|newEntry
argument_list|(
name|repo
argument_list|,
name|aTree
argument_list|,
name|bTree
argument_list|,
name|p
operator|.
name|getFiles
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PatchList
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|entries
argument_list|)
return|;
block|}
DECL|method|newEntry (Repository repo, RevTree aTree, RevTree bTree, FileHeader fileHeader)
specifier|private
specifier|static
name|PatchListEntry
name|newEntry
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RevTree
name|aTree
parameter_list|,
name|RevTree
name|bTree
parameter_list|,
name|FileHeader
name|fileHeader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileHeader
operator|.
name|getHunks
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|PatchListEntry
argument_list|(
name|fileHeader
argument_list|,
name|Collections
operator|.
expr|<
name|Edit
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
specifier|final
name|FileMode
name|oldMode
init|=
name|fileHeader
operator|.
name|getOldMode
argument_list|()
decl_stmt|;
specifier|final
name|FileMode
name|newMode
init|=
name|fileHeader
operator|.
name|getNewMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldMode
operator|==
name|FileMode
operator|.
name|GITLINK
operator|||
name|newMode
operator|==
name|FileMode
operator|.
name|GITLINK
condition|)
block|{
return|return
operator|new
name|PatchListEntry
argument_list|(
name|fileHeader
argument_list|,
name|Collections
operator|.
expr|<
name|Edit
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Edit
argument_list|>
name|edits
init|=
name|fileHeader
operator|.
name|toEditList
argument_list|()
decl_stmt|;
comment|// Bypass the longer task of looking for replacement edits if
comment|// there cannot be a replacement within plain text.
comment|//
if|if
condition|(
name|aTree
operator|==
literal|null
comment|/* want combined diff */
condition|)
block|{
return|return
operator|new
name|PatchListEntry
argument_list|(
name|fileHeader
argument_list|,
name|edits
argument_list|)
return|;
block|}
if|if
condition|(
name|fileHeader
operator|.
name|getPatchType
argument_list|()
operator|!=
name|PatchType
operator|.
name|UNIFIED
operator|||
name|edits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|PatchListEntry
argument_list|(
name|fileHeader
argument_list|,
name|edits
argument_list|)
return|;
block|}
switch|switch
condition|(
name|fileHeader
operator|.
name|getChangeType
argument_list|()
condition|)
block|{
case|case
name|ADD
case|:
case|case
name|DELETE
case|:
return|return
operator|new
name|PatchListEntry
argument_list|(
name|fileHeader
argument_list|,
name|edits
argument_list|)
return|;
block|}
name|Text
name|aContent
init|=
literal|null
decl_stmt|;
name|Text
name|bContent
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|edits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Edit
name|e
init|=
name|edits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|Edit
operator|.
name|Type
operator|.
name|REPLACE
condition|)
block|{
if|if
condition|(
name|aContent
operator|==
literal|null
condition|)
block|{
name|edits
operator|=
operator|new
name|ArrayList
argument_list|<
name|Edit
argument_list|>
argument_list|(
name|edits
argument_list|)
expr_stmt|;
name|aContent
operator|=
name|read
argument_list|(
name|repo
argument_list|,
name|fileHeader
operator|.
name|getOldName
argument_list|()
argument_list|,
name|aTree
argument_list|)
expr_stmt|;
name|bContent
operator|=
name|read
argument_list|(
name|repo
argument_list|,
name|fileHeader
operator|.
name|getNewName
argument_list|()
argument_list|,
name|bTree
argument_list|)
expr_stmt|;
block|}
name|CharText
name|a
init|=
operator|new
name|CharText
argument_list|(
name|aContent
argument_list|,
name|e
operator|.
name|getBeginA
argument_list|()
argument_list|,
name|e
operator|.
name|getEndA
argument_list|()
argument_list|)
decl_stmt|;
name|CharText
name|b
init|=
operator|new
name|CharText
argument_list|(
name|bContent
argument_list|,
name|e
operator|.
name|getBeginB
argument_list|()
argument_list|,
name|e
operator|.
name|getEndB
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Edit
argument_list|>
name|wordEdits
init|=
operator|new
name|MyersDiff
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|.
name|getEdits
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|wordEdits
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
control|)
block|{
name|Edit
name|c
init|=
name|wordEdits
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Edit
name|n
init|=
name|wordEdits
operator|.
name|get
argument_list|(
name|j
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|getBeginA
argument_list|()
operator|-
name|c
operator|.
name|getEndA
argument_list|()
operator|<=
literal|2
operator|||
name|n
operator|.
name|getBeginB
argument_list|()
operator|-
name|c
operator|.
name|getEndB
argument_list|()
operator|<=
literal|2
condition|)
block|{
comment|// This edit is incredibly close to the start of the next.
comment|// Combine them together.
comment|//
name|wordEdits
operator|.
name|set
argument_list|(
name|j
argument_list|,
operator|new
name|Edit
argument_list|(
name|c
operator|.
name|getBeginA
argument_list|()
argument_list|,
name|n
operator|.
name|getEndA
argument_list|()
argument_list|,
name|c
operator|.
name|getBeginB
argument_list|()
argument_list|,
name|n
operator|.
name|getEndB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|wordEdits
operator|.
name|remove
argument_list|(
name|j
operator|+
literal|1
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|j
operator|++
expr_stmt|;
block|}
name|edits
operator|.
name|set
argument_list|(
name|i
argument_list|,
operator|new
name|ReplaceEdit
argument_list|(
name|e
argument_list|,
name|wordEdits
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|PatchListEntry
argument_list|(
name|fileHeader
argument_list|,
name|edits
argument_list|)
return|;
block|}
DECL|method|read (Repository repo, String path, RevTree tree)
specifier|private
specifier|static
name|Text
name|read
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|String
name|path
parameter_list|,
name|RevTree
name|tree
parameter_list|)
throws|throws
name|IOException
block|{
name|TreeWalk
name|tw
init|=
name|TreeWalk
operator|.
name|forPath
argument_list|(
name|repo
argument_list|,
name|path
argument_list|,
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|tw
operator|==
literal|null
operator|||
name|tw
operator|.
name|getFileMode
argument_list|(
literal|0
argument_list|)
operator|.
name|getObjectType
argument_list|()
operator|!=
name|Constants
operator|.
name|OBJ_BLOB
condition|)
block|{
return|return
name|Text
operator|.
name|EMPTY
return|;
block|}
name|ObjectLoader
name|ldr
init|=
name|repo
operator|.
name|openObject
argument_list|(
name|tw
operator|.
name|getObjectId
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ldr
operator|==
literal|null
condition|)
block|{
return|return
name|Text
operator|.
name|EMPTY
return|;
block|}
return|return
operator|new
name|Text
argument_list|(
name|ldr
operator|.
name|getCachedBytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|aFor (final PatchListKey key, final Repository repo, final RevCommit b)
specifier|private
specifier|static
name|AnyObjectId
name|aFor
parameter_list|(
specifier|final
name|PatchListKey
name|key
parameter_list|,
specifier|final
name|Repository
name|repo
parameter_list|,
specifier|final
name|RevCommit
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|key
operator|.
name|getOldId
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|key
operator|.
name|getOldId
argument_list|()
return|;
block|}
switch|switch
condition|(
name|b
operator|.
name|getParentCount
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|emptyTree
argument_list|(
name|repo
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|b
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
return|;
default|default:
comment|// merge commit, return null to force combined diff behavior
return|return
literal|null
return|;
block|}
block|}
DECL|method|exec (final Repository repo, final List<String> args)
specifier|private
specifier|static
name|Process
name|exec
parameter_list|(
specifier|final
name|Repository
name|repo
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
index|[]
name|argv
init|=
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|args
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|argv
argument_list|,
literal|null
argument_list|,
name|repo
operator|.
name|getDirectory
argument_list|()
argument_list|)
return|;
block|}
DECL|method|emptyTree (final Repository repo)
specifier|private
specifier|static
name|ObjectId
name|emptyTree
parameter_list|(
specifier|final
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ObjectWriter
argument_list|(
name|repo
argument_list|)
operator|.
name|writeCanonicalTree
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

