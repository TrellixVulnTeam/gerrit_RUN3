begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Some portions (e.g. outputDiff) below are:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Copyright (C) 2009, Christian Halstrick<christian.halstrick@sap.com>
end_comment

begin_comment
comment|// Copyright (C) 2009, Johannes E. Schindelin
end_comment

begin_comment
comment|// Copyright (C) 2009, Johannes Schindelin<johannes.schindelin@gmx.de>
end_comment

begin_comment
comment|// and other copyright owners as documented in the project's IP log.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This program and the accompanying materials are made available
end_comment

begin_comment
comment|// under the terms of the Eclipse Distribution License v1.0 which
end_comment

begin_comment
comment|// accompanies this distribution, is reproduced below, and is
end_comment

begin_comment
comment|// available at http://www.eclipse.org/org/documents/edl-v10.php
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// All rights reserved.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or
end_comment

begin_comment
comment|// without modification, are permitted provided that the following
end_comment

begin_comment
comment|// conditions are met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// - Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// - Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following
end_comment

begin_comment
comment|// disclaimer in the documentation and/or other materials provided
end_comment

begin_comment
comment|// with the distribution.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// - Neither the name of the Eclipse Foundation, Inc. nor the
end_comment

begin_comment
comment|// names of its contributors may be used to endorse or promote
end_comment

begin_comment
comment|// products derived from this software without specific prior
end_comment

begin_comment
comment|// written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
end_comment

begin_comment
comment|// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
end_comment

begin_comment
comment|// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
end_comment

begin_comment
comment|// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
end_comment

begin_comment
comment|// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
end_comment

begin_comment
comment|// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
end_comment

begin_comment
comment|// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
end_comment

begin_comment
comment|// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
end_comment

begin_comment
comment|// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
end_comment

begin_comment
comment|// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
end_comment

begin_comment
comment|// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
end_comment

begin_comment
comment|// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_comment
comment|//
end_comment

begin_package
DECL|package|com.google.gerrit.server.patch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountDiffPreference
operator|.
name|Whitespace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|CacheModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|EntryCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|EvictionPolicy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|DiffEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|DiffFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|Edit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|EditList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|MyersDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|RawText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|RawTextComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|ReplaceEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|FileMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|patch
operator|.
name|FileHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|patch
operator|.
name|FileHeader
operator|.
name|PatchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|treewalk
operator|.
name|TreeWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|treewalk
operator|.
name|filter
operator|.
name|TreeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|io
operator|.
name|DisabledOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/** Provides a cached list of {@link PatchListEntry}. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|PatchListCacheImpl
specifier|public
class|class
name|PatchListCacheImpl
implements|implements
name|PatchListCache
block|{
DECL|field|CACHE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CACHE_NAME
init|=
literal|"diff"
decl_stmt|;
DECL|field|BLANK_LINE_RE
specifier|private
specifier|static
specifier|final
name|Pattern
name|BLANK_LINE_RE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[ \\t]*(|[{}]|/\\*\\*?|\\*)[ \\t]*$"
argument_list|)
decl_stmt|;
DECL|field|CONTROL_BLOCK_START_RE
specifier|private
specifier|static
specifier|final
name|Pattern
name|CONTROL_BLOCK_START_RE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[{:][ \\t]*$"
argument_list|)
decl_stmt|;
DECL|method|module ()
specifier|public
specifier|static
name|Module
name|module
parameter_list|()
block|{
return|return
operator|new
name|CacheModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
specifier|final
name|TypeLiteral
argument_list|<
name|Cache
argument_list|<
name|PatchListKey
argument_list|,
name|PatchList
argument_list|>
argument_list|>
name|type
init|=
operator|new
name|TypeLiteral
argument_list|<
name|Cache
argument_list|<
name|PatchListKey
argument_list|,
name|PatchList
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|disk
argument_list|(
name|type
argument_list|,
name|CACHE_NAME
argument_list|)
comment|//
operator|.
name|memoryLimit
argument_list|(
literal|128
argument_list|)
comment|// very large items, cache only a few
operator|.
name|evictionPolicy
argument_list|(
name|EvictionPolicy
operator|.
name|LRU
argument_list|)
comment|// prefer most recent
operator|.
name|populateWith
argument_list|(
name|Loader
operator|.
name|class
argument_list|)
comment|//
expr_stmt|;
name|bind
argument_list|(
name|PatchListCacheImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|PatchListCache
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|PatchListCacheImpl
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|field|cache
specifier|private
specifier|final
name|Cache
argument_list|<
name|PatchListKey
argument_list|,
name|PatchList
argument_list|>
name|cache
decl_stmt|;
annotation|@
name|Inject
DECL|method|PatchListCacheImpl ( @amedCACHE_NAME) final Cache<PatchListKey, PatchList> thecache)
name|PatchListCacheImpl
parameter_list|(
annotation|@
name|Named
argument_list|(
name|CACHE_NAME
argument_list|)
specifier|final
name|Cache
argument_list|<
name|PatchListKey
argument_list|,
name|PatchList
argument_list|>
name|thecache
parameter_list|)
block|{
name|cache
operator|=
name|thecache
expr_stmt|;
block|}
DECL|method|get (final PatchListKey key)
specifier|public
name|PatchList
name|get
parameter_list|(
specifier|final
name|PatchListKey
name|key
parameter_list|)
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|get (final Change change, final PatchSet patchSet)
specifier|public
name|PatchList
name|get
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|,
specifier|final
name|PatchSet
name|patchSet
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|change
argument_list|,
name|patchSet
argument_list|,
name|Whitespace
operator|.
name|IGNORE_NONE
argument_list|)
return|;
block|}
DECL|method|get (final Change change, final PatchSet patchSet, final Whitespace whitespace)
specifier|public
name|PatchList
name|get
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|,
specifier|final
name|PatchSet
name|patchSet
parameter_list|,
specifier|final
name|Whitespace
name|whitespace
parameter_list|)
block|{
specifier|final
name|Project
operator|.
name|NameKey
name|projectKey
init|=
name|change
operator|.
name|getProject
argument_list|()
decl_stmt|;
specifier|final
name|ObjectId
name|a
init|=
literal|null
decl_stmt|;
specifier|final
name|ObjectId
name|b
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|patchSet
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|get
argument_list|(
operator|new
name|PatchListKey
argument_list|(
name|projectKey
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|whitespace
argument_list|)
argument_list|)
return|;
block|}
DECL|class|Loader
specifier|static
class|class
name|Loader
extends|extends
name|EntryCreator
argument_list|<
name|PatchListKey
argument_list|,
name|PatchList
argument_list|>
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|computeIntraline
specifier|private
specifier|final
name|boolean
name|computeIntraline
decl_stmt|;
annotation|@
name|Inject
DECL|method|Loader (GitRepositoryManager mgr, @GerritServerConfig Config config)
name|Loader
parameter_list|(
name|GitRepositoryManager
name|mgr
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|config
parameter_list|)
block|{
name|repoManager
operator|=
name|mgr
expr_stmt|;
name|computeIntraline
operator|=
name|config
operator|.
name|getBoolean
argument_list|(
literal|"cache"
argument_list|,
literal|"diff"
argument_list|,
literal|"intraline"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEntry (final PatchListKey key)
specifier|public
name|PatchList
name|createEntry
parameter_list|(
specifier|final
name|PatchListKey
name|key
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|key
operator|.
name|projectKey
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|readPatchList
argument_list|(
name|key
argument_list|,
name|repo
argument_list|)
return|;
block|}
finally|finally
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|readPatchList (final PatchListKey key, final Repository repo)
specifier|private
name|PatchList
name|readPatchList
parameter_list|(
specifier|final
name|PatchListKey
name|key
parameter_list|,
specifier|final
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO(jeffschu) correctly handle merge commits
name|RawTextComparator
name|cmp
decl_stmt|;
switch|switch
condition|(
name|key
operator|.
name|getWhitespace
argument_list|()
condition|)
block|{
case|case
name|IGNORE_ALL_SPACE
case|:
name|cmp
operator|=
name|RawTextComparator
operator|.
name|WS_IGNORE_ALL
expr_stmt|;
break|break;
case|case
name|IGNORE_SPACE_AT_EOL
case|:
name|cmp
operator|=
name|RawTextComparator
operator|.
name|WS_IGNORE_TRAILING
expr_stmt|;
break|break;
case|case
name|IGNORE_SPACE_CHANGE
case|:
name|cmp
operator|=
name|RawTextComparator
operator|.
name|WS_IGNORE_CHANGE
expr_stmt|;
break|break;
case|case
name|IGNORE_NONE
case|:
default|default:
name|cmp
operator|=
name|RawTextComparator
operator|.
name|DEFAULT
expr_stmt|;
break|break;
block|}
specifier|final
name|ObjectReader
name|reader
init|=
name|repo
operator|.
name|newObjectReader
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|RevCommit
name|b
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|key
operator|.
name|getNewId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RevObject
name|a
init|=
name|aFor
argument_list|(
name|key
argument_list|,
name|repo
argument_list|,
name|rw
argument_list|,
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
comment|// This is a merge commit, compared to its ancestor.
comment|//
specifier|final
name|PatchListEntry
index|[]
name|entries
init|=
operator|new
name|PatchListEntry
index|[
literal|1
index|]
decl_stmt|;
name|entries
index|[
literal|0
index|]
operator|=
name|newCommitMessage
argument_list|(
name|cmp
argument_list|,
name|repo
argument_list|,
name|reader
argument_list|,
literal|null
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
operator|new
name|PatchList
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|computeIntraline
argument_list|,
literal|true
argument_list|,
name|entries
argument_list|)
return|;
block|}
specifier|final
name|boolean
name|againstParent
init|=
name|b
operator|.
name|getParentCount
argument_list|()
operator|>
literal|0
operator|&&
name|b
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
operator|==
name|a
decl_stmt|;
name|RevCommit
name|aCommit
decl_stmt|;
name|RevTree
name|aTree
decl_stmt|;
if|if
condition|(
name|a
operator|instanceof
name|RevCommit
condition|)
block|{
name|aCommit
operator|=
operator|(
name|RevCommit
operator|)
name|a
expr_stmt|;
name|aTree
operator|=
name|aCommit
operator|.
name|getTree
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|a
operator|instanceof
name|RevTree
condition|)
block|{
name|aCommit
operator|=
literal|null
expr_stmt|;
name|aTree
operator|=
operator|(
name|RevTree
operator|)
name|a
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected type: "
operator|+
name|a
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|RevTree
name|bTree
init|=
name|b
operator|.
name|getTree
argument_list|()
decl_stmt|;
specifier|final
name|TreeWalk
name|walk
init|=
operator|new
name|TreeWalk
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|walk
operator|.
name|reset
argument_list|()
expr_stmt|;
name|walk
operator|.
name|setRecursive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|walk
operator|.
name|addTree
argument_list|(
name|aTree
argument_list|)
expr_stmt|;
name|walk
operator|.
name|addTree
argument_list|(
name|bTree
argument_list|)
expr_stmt|;
name|walk
operator|.
name|setFilter
argument_list|(
name|TreeFilter
operator|.
name|ANY_DIFF
argument_list|)
expr_stmt|;
name|DiffFormatter
name|df
init|=
operator|new
name|DiffFormatter
argument_list|(
name|DisabledOutputStream
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|df
operator|.
name|setRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|df
operator|.
name|setDiffComparator
argument_list|(
name|cmp
argument_list|)
expr_stmt|;
name|df
operator|.
name|setDetectRenames
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DiffEntry
argument_list|>
name|diffEntries
init|=
name|df
operator|.
name|scan
argument_list|(
name|aTree
argument_list|,
name|bTree
argument_list|)
decl_stmt|;
specifier|final
name|int
name|cnt
init|=
name|diffEntries
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|PatchListEntry
index|[]
name|entries
init|=
operator|new
name|PatchListEntry
index|[
literal|1
operator|+
name|cnt
index|]
decl_stmt|;
name|entries
index|[
literal|0
index|]
operator|=
name|newCommitMessage
argument_list|(
name|cmp
argument_list|,
name|repo
argument_list|,
name|reader
argument_list|,
comment|//
name|againstParent
condition|?
literal|null
else|:
name|aCommit
argument_list|,
name|b
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|FileHeader
name|fh
init|=
name|df
operator|.
name|toFileHeader
argument_list|(
name|diffEntries
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|entries
index|[
literal|1
operator|+
name|i
index|]
operator|=
name|newEntry
argument_list|(
name|reader
argument_list|,
name|aTree
argument_list|,
name|bTree
argument_list|,
name|fh
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PatchList
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|computeIntraline
argument_list|,
name|againstParent
argument_list|,
name|entries
argument_list|)
return|;
block|}
finally|finally
block|{
name|reader
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|newCommitMessage ( final RawTextComparator cmp, final Repository db, final ObjectReader reader, final RevCommit aCommit, final RevCommit bCommit)
specifier|private
name|PatchListEntry
name|newCommitMessage
parameter_list|(
specifier|final
name|RawTextComparator
name|cmp
parameter_list|,
specifier|final
name|Repository
name|db
parameter_list|,
specifier|final
name|ObjectReader
name|reader
parameter_list|,
specifier|final
name|RevCommit
name|aCommit
parameter_list|,
specifier|final
name|RevCommit
name|bCommit
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|hdr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|hdr
operator|.
name|append
argument_list|(
literal|"diff --git"
argument_list|)
expr_stmt|;
if|if
condition|(
name|aCommit
operator|!=
literal|null
condition|)
block|{
name|hdr
operator|.
name|append
argument_list|(
literal|" a/"
operator|+
name|Patch
operator|.
name|COMMIT_MSG
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hdr
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|FileHeader
operator|.
name|DEV_NULL
argument_list|)
expr_stmt|;
block|}
name|hdr
operator|.
name|append
argument_list|(
literal|" b/"
operator|+
name|Patch
operator|.
name|COMMIT_MSG
argument_list|)
expr_stmt|;
name|hdr
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|aCommit
operator|!=
literal|null
condition|)
block|{
name|hdr
operator|.
name|append
argument_list|(
literal|"--- a/"
operator|+
name|Patch
operator|.
name|COMMIT_MSG
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hdr
operator|.
name|append
argument_list|(
literal|"--- "
operator|+
name|FileHeader
operator|.
name|DEV_NULL
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|hdr
operator|.
name|append
argument_list|(
literal|"+++ b/"
operator|+
name|Patch
operator|.
name|COMMIT_MSG
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|Text
name|aText
init|=
name|aCommit
operator|!=
literal|null
condition|?
name|Text
operator|.
name|forCommit
argument_list|(
name|db
argument_list|,
name|reader
argument_list|,
name|aCommit
argument_list|)
else|:
name|Text
operator|.
name|EMPTY
decl_stmt|;
name|Text
name|bText
init|=
name|Text
operator|.
name|forCommit
argument_list|(
name|db
argument_list|,
name|reader
argument_list|,
name|bCommit
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rawHdr
init|=
name|hdr
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|RawText
name|aRawText
init|=
operator|new
name|RawText
argument_list|(
name|aText
operator|.
name|getContent
argument_list|()
argument_list|)
decl_stmt|;
name|RawText
name|bRawText
init|=
operator|new
name|RawText
argument_list|(
name|bText
operator|.
name|getContent
argument_list|()
argument_list|)
decl_stmt|;
name|EditList
name|edits
init|=
name|MyersDiff
operator|.
name|INSTANCE
operator|.
name|diff
argument_list|(
name|cmp
argument_list|,
name|aRawText
argument_list|,
name|bRawText
argument_list|)
decl_stmt|;
name|FileHeader
name|fh
init|=
operator|new
name|FileHeader
argument_list|(
name|rawHdr
argument_list|,
name|edits
argument_list|,
name|PatchType
operator|.
name|UNIFIED
argument_list|)
decl_stmt|;
return|return
name|newEntry
argument_list|(
name|reader
argument_list|,
name|aText
argument_list|,
name|bText
argument_list|,
name|edits
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|fh
argument_list|)
return|;
block|}
DECL|method|newEntry (ObjectReader reader, RevTree aTree, RevTree bTree, FileHeader fileHeader)
specifier|private
name|PatchListEntry
name|newEntry
parameter_list|(
name|ObjectReader
name|reader
parameter_list|,
name|RevTree
name|aTree
parameter_list|,
name|RevTree
name|bTree
parameter_list|,
name|FileHeader
name|fileHeader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileMode
name|oldMode
init|=
name|fileHeader
operator|.
name|getOldMode
argument_list|()
decl_stmt|;
specifier|final
name|FileMode
name|newMode
init|=
name|fileHeader
operator|.
name|getNewMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldMode
operator|==
name|FileMode
operator|.
name|GITLINK
operator|||
name|newMode
operator|==
name|FileMode
operator|.
name|GITLINK
condition|)
block|{
return|return
operator|new
name|PatchListEntry
argument_list|(
name|fileHeader
argument_list|,
name|Collections
operator|.
expr|<
name|Edit
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|aTree
operator|==
literal|null
comment|// want combined diff
operator|||
name|fileHeader
operator|.
name|getPatchType
argument_list|()
operator|!=
name|PatchType
operator|.
name|UNIFIED
operator|||
name|fileHeader
operator|.
name|getHunks
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|PatchListEntry
argument_list|(
name|fileHeader
argument_list|,
name|Collections
operator|.
expr|<
name|Edit
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Edit
argument_list|>
name|edits
init|=
name|fileHeader
operator|.
name|toEditList
argument_list|()
decl_stmt|;
if|if
condition|(
name|edits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|PatchListEntry
argument_list|(
name|fileHeader
argument_list|,
name|Collections
operator|.
expr|<
name|Edit
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|computeIntraline
condition|)
block|{
return|return
operator|new
name|PatchListEntry
argument_list|(
name|fileHeader
argument_list|,
name|edits
argument_list|)
return|;
block|}
switch|switch
condition|(
name|fileHeader
operator|.
name|getChangeType
argument_list|()
condition|)
block|{
case|case
name|ADD
case|:
case|case
name|DELETE
case|:
return|return
operator|new
name|PatchListEntry
argument_list|(
name|fileHeader
argument_list|,
name|edits
argument_list|)
return|;
block|}
return|return
name|newEntry
argument_list|(
name|reader
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|edits
argument_list|,
name|aTree
argument_list|,
name|bTree
argument_list|,
name|fileHeader
argument_list|)
return|;
block|}
DECL|method|newEntry (ObjectReader reader, Text aContent, Text bContent, List<Edit> edits, RevTree aTree, RevTree bTree, FileHeader fileHeader)
specifier|private
name|PatchListEntry
name|newEntry
parameter_list|(
name|ObjectReader
name|reader
parameter_list|,
name|Text
name|aContent
parameter_list|,
name|Text
name|bContent
parameter_list|,
name|List
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|,
name|RevTree
name|aTree
parameter_list|,
name|RevTree
name|bTree
parameter_list|,
name|FileHeader
name|fileHeader
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|edits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Edit
name|e
init|=
name|edits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|Edit
operator|.
name|Type
operator|.
name|REPLACE
condition|)
block|{
if|if
condition|(
name|aContent
operator|==
literal|null
condition|)
block|{
name|edits
operator|=
operator|new
name|ArrayList
argument_list|<
name|Edit
argument_list|>
argument_list|(
name|edits
argument_list|)
expr_stmt|;
name|aContent
operator|=
name|read
argument_list|(
name|reader
argument_list|,
name|fileHeader
operator|.
name|getOldPath
argument_list|()
argument_list|,
name|aTree
argument_list|)
expr_stmt|;
name|bContent
operator|=
name|read
argument_list|(
name|reader
argument_list|,
name|fileHeader
operator|.
name|getNewPath
argument_list|()
argument_list|,
name|bTree
argument_list|)
expr_stmt|;
name|combineLineEdits
argument_list|(
name|edits
argument_list|,
name|aContent
argument_list|,
name|bContent
argument_list|)
expr_stmt|;
name|i
operator|=
operator|-
literal|1
expr_stmt|;
comment|// restart the entire scan after combining lines.
continue|continue;
block|}
name|CharText
name|a
init|=
operator|new
name|CharText
argument_list|(
name|aContent
argument_list|,
name|e
operator|.
name|getBeginA
argument_list|()
argument_list|,
name|e
operator|.
name|getEndA
argument_list|()
argument_list|)
decl_stmt|;
name|CharText
name|b
init|=
operator|new
name|CharText
argument_list|(
name|bContent
argument_list|,
name|e
operator|.
name|getBeginB
argument_list|()
argument_list|,
name|e
operator|.
name|getEndB
argument_list|()
argument_list|)
decl_stmt|;
name|CharTextComparator
name|cmp
init|=
operator|new
name|CharTextComparator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Edit
argument_list|>
name|wordEdits
init|=
name|MyersDiff
operator|.
name|INSTANCE
operator|.
name|diff
argument_list|(
name|cmp
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
comment|// Combine edits that are really close together. If they are
comment|// just a few characters apart we tend to get better results
comment|// by joining them together and taking the whole span.
comment|//
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|wordEdits
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
control|)
block|{
name|Edit
name|c
init|=
name|wordEdits
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Edit
name|n
init|=
name|wordEdits
operator|.
name|get
argument_list|(
name|j
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|getBeginA
argument_list|()
operator|-
name|c
operator|.
name|getEndA
argument_list|()
operator|<=
literal|5
operator|||
name|n
operator|.
name|getBeginB
argument_list|()
operator|-
name|c
operator|.
name|getEndB
argument_list|()
operator|<=
literal|5
condition|)
block|{
name|int
name|ab
init|=
name|c
operator|.
name|getBeginA
argument_list|()
decl_stmt|;
name|int
name|ae
init|=
name|n
operator|.
name|getEndA
argument_list|()
decl_stmt|;
name|int
name|bb
init|=
name|c
operator|.
name|getBeginB
argument_list|()
decl_stmt|;
name|int
name|be
init|=
name|n
operator|.
name|getEndB
argument_list|()
decl_stmt|;
if|if
condition|(
name|canCoalesce
argument_list|(
name|a
argument_list|,
name|c
operator|.
name|getEndA
argument_list|()
argument_list|,
name|n
operator|.
name|getBeginA
argument_list|()
argument_list|)
operator|&&
name|canCoalesce
argument_list|(
name|b
argument_list|,
name|c
operator|.
name|getEndB
argument_list|()
argument_list|,
name|n
operator|.
name|getBeginB
argument_list|()
argument_list|)
condition|)
block|{
name|wordEdits
operator|.
name|set
argument_list|(
name|j
argument_list|,
operator|new
name|Edit
argument_list|(
name|ab
argument_list|,
name|ae
argument_list|,
name|bb
argument_list|,
name|be
argument_list|)
argument_list|)
expr_stmt|;
name|wordEdits
operator|.
name|remove
argument_list|(
name|j
operator|+
literal|1
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|j
operator|++
expr_stmt|;
block|}
comment|// Apply some simple rules to fix up some of the edits. Our
comment|// logic above, along with our per-character difference tends
comment|// to produce some crazy stuff.
comment|//
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|wordEdits
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Edit
name|c
init|=
name|wordEdits
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|int
name|ab
init|=
name|c
operator|.
name|getBeginA
argument_list|()
decl_stmt|;
name|int
name|ae
init|=
name|c
operator|.
name|getEndA
argument_list|()
decl_stmt|;
name|int
name|bb
init|=
name|c
operator|.
name|getBeginB
argument_list|()
decl_stmt|;
name|int
name|be
init|=
name|c
operator|.
name|getEndB
argument_list|()
decl_stmt|;
comment|// Sometimes the diff generator produces an INSERT or DELETE
comment|// right up against a REPLACE, but we only find this after
comment|// we've also played some shifting games on the prior edit.
comment|// If that happened to us, coalesce them together so we can
comment|// correct this mess for the user. If we don't we wind up
comment|// with silly stuff like "es" -> "es = Addresses".
comment|//
if|if
condition|(
literal|1
operator|<
name|j
condition|)
block|{
name|Edit
name|p
init|=
name|wordEdits
operator|.
name|get
argument_list|(
name|j
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getEndA
argument_list|()
operator|==
name|ab
operator|||
name|p
operator|.
name|getEndB
argument_list|()
operator|==
name|bb
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getEndA
argument_list|()
operator|==
name|ab
operator|&&
name|p
operator|.
name|getBeginA
argument_list|()
operator|<
name|p
operator|.
name|getEndA
argument_list|()
condition|)
block|{
name|ab
operator|=
name|p
operator|.
name|getBeginA
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|getEndB
argument_list|()
operator|==
name|bb
operator|&&
name|p
operator|.
name|getBeginB
argument_list|()
operator|<
name|p
operator|.
name|getEndB
argument_list|()
condition|)
block|{
name|bb
operator|=
name|p
operator|.
name|getBeginB
argument_list|()
expr_stmt|;
block|}
name|wordEdits
operator|.
name|remove
argument_list|(
operator|--
name|j
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We sometimes collapsed an edit together in a strange way,
comment|// such that the edges of each text is identical. Fix by
comment|// by dropping out that incorrectly replaced region.
comment|//
while|while
condition|(
name|ab
operator|<
name|ae
operator|&&
name|bb
operator|<
name|be
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|ab
argument_list|,
name|b
argument_list|,
name|bb
argument_list|)
condition|)
block|{
name|ab
operator|++
expr_stmt|;
name|bb
operator|++
expr_stmt|;
block|}
while|while
condition|(
name|ab
operator|<
name|ae
operator|&&
name|bb
operator|<
name|be
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|ae
operator|-
literal|1
argument_list|,
name|b
argument_list|,
name|be
operator|-
literal|1
argument_list|)
condition|)
block|{
name|ae
operator|--
expr_stmt|;
name|be
operator|--
expr_stmt|;
block|}
comment|// The leading part of an edit and its trailing part in the same
comment|// text might be identical. Slide down that edit and use the tail
comment|// rather than the leading bit. If however the edit is only on a
comment|// whitespace block try to shift it to the left margin, assuming
comment|// that it is an indentation change.
comment|//
name|boolean
name|aShift
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|ab
operator|<
name|ae
operator|&&
name|isOnlyWhitespace
argument_list|(
name|a
argument_list|,
name|ab
argument_list|,
name|ae
argument_list|)
condition|)
block|{
name|int
name|lf
init|=
name|findLF
argument_list|(
name|wordEdits
argument_list|,
name|j
argument_list|,
name|a
argument_list|,
name|ab
argument_list|)
decl_stmt|;
if|if
condition|(
name|lf
operator|<
name|ab
operator|&&
name|a
operator|.
name|charAt
argument_list|(
name|lf
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
name|int
name|nb
init|=
name|lf
operator|+
literal|1
decl_stmt|;
name|int
name|p
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|p
operator|<
name|ae
operator|-
name|ab
condition|)
block|{
if|if
condition|(
name|cmp
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|ab
operator|+
name|p
argument_list|,
name|a
argument_list|,
name|ab
operator|+
name|p
argument_list|)
condition|)
name|p
operator|++
expr_stmt|;
else|else
break|break;
block|}
if|if
condition|(
name|p
operator|==
name|ae
operator|-
name|ab
condition|)
block|{
name|ab
operator|=
name|nb
expr_stmt|;
name|ae
operator|=
name|nb
operator|+
name|p
expr_stmt|;
name|aShift
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|aShift
condition|)
block|{
while|while
condition|(
literal|0
operator|<
name|ab
operator|&&
name|ab
operator|<
name|ae
operator|&&
name|a
operator|.
name|charAt
argument_list|(
name|ab
operator|-
literal|1
argument_list|)
operator|!=
literal|'\n'
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|ab
operator|-
literal|1
argument_list|,
name|a
argument_list|,
name|ae
operator|-
literal|1
argument_list|)
condition|)
block|{
name|ab
operator|--
expr_stmt|;
name|ae
operator|--
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|a
operator|.
name|isLineStart
argument_list|(
name|ab
argument_list|)
operator|||
operator|!
name|a
operator|.
name|contains
argument_list|(
name|ab
argument_list|,
name|ae
argument_list|,
literal|'\n'
argument_list|)
condition|)
block|{
while|while
condition|(
name|ab
operator|<
name|ae
operator|&&
name|ae
operator|<
name|a
operator|.
name|size
argument_list|()
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|ab
argument_list|,
name|a
argument_list|,
name|ae
argument_list|)
condition|)
block|{
name|ab
operator|++
expr_stmt|;
name|ae
operator|++
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|charAt
argument_list|(
name|ae
operator|-
literal|1
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
name|boolean
name|bShift
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|bb
operator|<
name|be
operator|&&
name|isOnlyWhitespace
argument_list|(
name|b
argument_list|,
name|bb
argument_list|,
name|be
argument_list|)
condition|)
block|{
name|int
name|lf
init|=
name|findLF
argument_list|(
name|wordEdits
argument_list|,
name|j
argument_list|,
name|b
argument_list|,
name|bb
argument_list|)
decl_stmt|;
if|if
condition|(
name|lf
operator|<
name|bb
operator|&&
name|b
operator|.
name|charAt
argument_list|(
name|lf
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
name|int
name|nb
init|=
name|lf
operator|+
literal|1
decl_stmt|;
name|int
name|p
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|p
operator|<
name|be
operator|-
name|bb
condition|)
block|{
if|if
condition|(
name|cmp
operator|.
name|equals
argument_list|(
name|b
argument_list|,
name|bb
operator|+
name|p
argument_list|,
name|b
argument_list|,
name|bb
operator|+
name|p
argument_list|)
condition|)
name|p
operator|++
expr_stmt|;
else|else
break|break;
block|}
if|if
condition|(
name|p
operator|==
name|be
operator|-
name|bb
condition|)
block|{
name|bb
operator|=
name|nb
expr_stmt|;
name|be
operator|=
name|nb
operator|+
name|p
expr_stmt|;
name|bShift
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|bShift
condition|)
block|{
while|while
condition|(
literal|0
operator|<
name|bb
operator|&&
name|bb
operator|<
name|be
operator|&&
name|b
operator|.
name|charAt
argument_list|(
name|bb
operator|-
literal|1
argument_list|)
operator|!=
literal|'\n'
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|b
argument_list|,
name|bb
operator|-
literal|1
argument_list|,
name|b
argument_list|,
name|be
operator|-
literal|1
argument_list|)
condition|)
block|{
name|bb
operator|--
expr_stmt|;
name|be
operator|--
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|b
operator|.
name|isLineStart
argument_list|(
name|bb
argument_list|)
operator|||
operator|!
name|b
operator|.
name|contains
argument_list|(
name|bb
argument_list|,
name|be
argument_list|,
literal|'\n'
argument_list|)
condition|)
block|{
while|while
condition|(
name|bb
operator|<
name|be
operator|&&
name|be
operator|<
name|b
operator|.
name|size
argument_list|()
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|b
argument_list|,
name|bb
argument_list|,
name|b
argument_list|,
name|be
argument_list|)
condition|)
block|{
name|bb
operator|++
expr_stmt|;
name|be
operator|++
expr_stmt|;
if|if
condition|(
name|b
operator|.
name|charAt
argument_list|(
name|be
operator|-
literal|1
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|// If most of a line was modified except the LF was common, make
comment|// the LF part of the modification region. This is easier to read.
comment|//
if|if
condition|(
name|ab
operator|<
name|ae
comment|//
operator|&&
operator|(
name|ab
operator|==
literal|0
operator|||
name|a
operator|.
name|charAt
argument_list|(
name|ab
operator|-
literal|1
argument_list|)
operator|==
literal|'\n'
operator|)
comment|//
operator|&&
name|ae
operator|<
name|a
operator|.
name|size
argument_list|()
operator|&&
name|a
operator|.
name|charAt
argument_list|(
name|ae
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
name|ae
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|bb
operator|<
name|be
comment|//
operator|&&
operator|(
name|bb
operator|==
literal|0
operator|||
name|b
operator|.
name|charAt
argument_list|(
name|bb
operator|-
literal|1
argument_list|)
operator|==
literal|'\n'
operator|)
comment|//
operator|&&
name|be
operator|<
name|b
operator|.
name|size
argument_list|()
operator|&&
name|b
operator|.
name|charAt
argument_list|(
name|be
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
name|be
operator|++
expr_stmt|;
block|}
name|wordEdits
operator|.
name|set
argument_list|(
name|j
argument_list|,
operator|new
name|Edit
argument_list|(
name|ab
argument_list|,
name|ae
argument_list|,
name|bb
argument_list|,
name|be
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|edits
operator|.
name|set
argument_list|(
name|i
argument_list|,
operator|new
name|ReplaceEdit
argument_list|(
name|e
argument_list|,
name|wordEdits
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|PatchListEntry
argument_list|(
name|fileHeader
argument_list|,
name|edits
argument_list|)
return|;
block|}
DECL|method|combineLineEdits (List<Edit> edits, Text a, Text b)
specifier|private
specifier|static
name|void
name|combineLineEdits
parameter_list|(
name|List
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|,
name|Text
name|a
parameter_list|,
name|Text
name|b
parameter_list|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|edits
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
control|)
block|{
name|Edit
name|c
init|=
name|edits
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Edit
name|n
init|=
name|edits
operator|.
name|get
argument_list|(
name|j
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// Combine edits that are really close together. Right now our rule
comment|// is, coalesce two line edits which are only one line apart if that
comment|// common context line is either a "pointless line", or is identical
comment|// on both sides and starts a new block of code. These are mostly
comment|// block reindents to add or remove control flow operators.
comment|//
specifier|final
name|int
name|ad
init|=
name|n
operator|.
name|getBeginA
argument_list|()
operator|-
name|c
operator|.
name|getEndA
argument_list|()
decl_stmt|;
specifier|final
name|int
name|bd
init|=
name|n
operator|.
name|getBeginB
argument_list|()
operator|-
name|c
operator|.
name|getEndB
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
literal|1
operator|<=
name|ad
operator|&&
name|isBlankLineGap
argument_list|(
name|a
argument_list|,
name|c
operator|.
name|getEndA
argument_list|()
argument_list|,
name|n
operator|.
name|getBeginA
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
literal|1
operator|<=
name|bd
operator|&&
name|isBlankLineGap
argument_list|(
name|b
argument_list|,
name|c
operator|.
name|getEndB
argument_list|()
argument_list|,
name|n
operator|.
name|getBeginB
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
name|ad
operator|==
literal|1
operator|&&
name|bd
operator|==
literal|1
operator|&&
name|isControlBlockStart
argument_list|(
name|a
argument_list|,
name|c
operator|.
name|getEndA
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|int
name|ab
init|=
name|c
operator|.
name|getBeginA
argument_list|()
decl_stmt|;
name|int
name|ae
init|=
name|n
operator|.
name|getEndA
argument_list|()
decl_stmt|;
name|int
name|bb
init|=
name|c
operator|.
name|getBeginB
argument_list|()
decl_stmt|;
name|int
name|be
init|=
name|n
operator|.
name|getEndB
argument_list|()
decl_stmt|;
name|edits
operator|.
name|set
argument_list|(
name|j
argument_list|,
operator|new
name|Edit
argument_list|(
name|ab
argument_list|,
name|ae
argument_list|,
name|bb
argument_list|,
name|be
argument_list|)
argument_list|)
expr_stmt|;
name|edits
operator|.
name|remove
argument_list|(
name|j
operator|+
literal|1
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|j
operator|++
expr_stmt|;
block|}
block|}
DECL|method|isBlankLineGap (Text a, int b, int e)
specifier|private
specifier|static
name|boolean
name|isBlankLineGap
parameter_list|(
name|Text
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|e
parameter_list|)
block|{
for|for
control|(
init|;
name|b
operator|<
name|e
condition|;
name|b
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|BLANK_LINE_RE
operator|.
name|matcher
argument_list|(
name|a
operator|.
name|getString
argument_list|(
name|b
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|isControlBlockStart (Text a, int idx)
specifier|private
specifier|static
name|boolean
name|isControlBlockStart
parameter_list|(
name|Text
name|a
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
specifier|final
name|String
name|l
init|=
name|a
operator|.
name|getString
argument_list|(
name|idx
argument_list|)
decl_stmt|;
return|return
name|CONTROL_BLOCK_START_RE
operator|.
name|matcher
argument_list|(
name|l
argument_list|)
operator|.
name|find
argument_list|()
return|;
block|}
DECL|method|canCoalesce (CharText a, int b, int e)
specifier|private
specifier|static
name|boolean
name|canCoalesce
parameter_list|(
name|CharText
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|e
parameter_list|)
block|{
while|while
condition|(
name|b
operator|<
name|e
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|charAt
argument_list|(
name|b
operator|++
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|findLF (List<Edit> edits, int j, CharText t, int b)
specifier|private
specifier|static
name|int
name|findLF
parameter_list|(
name|List
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|,
name|int
name|j
parameter_list|,
name|CharText
name|t
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|int
name|lf
init|=
name|b
decl_stmt|;
name|int
name|limit
init|=
literal|0
operator|<
name|j
condition|?
name|edits
operator|.
name|get
argument_list|(
name|j
operator|-
literal|1
argument_list|)
operator|.
name|getEndB
argument_list|()
else|:
literal|0
decl_stmt|;
while|while
condition|(
name|limit
operator|<
name|lf
operator|&&
name|t
operator|.
name|charAt
argument_list|(
name|lf
argument_list|)
operator|!=
literal|'\n'
condition|)
block|{
name|lf
operator|--
expr_stmt|;
block|}
return|return
name|lf
return|;
block|}
DECL|method|isOnlyWhitespace (CharText t, final int b, final int e)
specifier|private
specifier|static
name|boolean
name|isOnlyWhitespace
parameter_list|(
name|CharText
name|t
parameter_list|,
specifier|final
name|int
name|b
parameter_list|,
specifier|final
name|int
name|e
parameter_list|)
block|{
for|for
control|(
name|int
name|c
init|=
name|b
init|;
name|c
operator|<
name|e
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isWhitespace
argument_list|(
name|t
operator|.
name|charAt
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|b
operator|<
name|e
return|;
block|}
DECL|method|read (ObjectReader reader, String path, RevTree tree)
specifier|private
specifier|static
name|Text
name|read
parameter_list|(
name|ObjectReader
name|reader
parameter_list|,
name|String
name|path
parameter_list|,
name|RevTree
name|tree
parameter_list|)
throws|throws
name|IOException
block|{
name|TreeWalk
name|tw
init|=
name|TreeWalk
operator|.
name|forPath
argument_list|(
name|reader
argument_list|,
name|path
argument_list|,
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|tw
operator|==
literal|null
operator|||
name|tw
operator|.
name|getFileMode
argument_list|(
literal|0
argument_list|)
operator|.
name|getObjectType
argument_list|()
operator|!=
name|Constants
operator|.
name|OBJ_BLOB
condition|)
block|{
return|return
name|Text
operator|.
name|EMPTY
return|;
block|}
name|ObjectLoader
name|ldr
decl_stmt|;
try|try
block|{
name|ldr
operator|=
name|reader
operator|.
name|open
argument_list|(
name|tw
operator|.
name|getObjectId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Constants
operator|.
name|OBJ_BLOB
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingObjectException
name|notFound
parameter_list|)
block|{
return|return
name|Text
operator|.
name|EMPTY
return|;
block|}
return|return
operator|new
name|Text
argument_list|(
name|ldr
argument_list|)
return|;
block|}
DECL|method|aFor (final PatchListKey key, final Repository repo, final RevWalk rw, final RevCommit b)
specifier|private
specifier|static
name|RevObject
name|aFor
parameter_list|(
specifier|final
name|PatchListKey
name|key
parameter_list|,
specifier|final
name|Repository
name|repo
parameter_list|,
specifier|final
name|RevWalk
name|rw
parameter_list|,
specifier|final
name|RevCommit
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|key
operator|.
name|getOldId
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|rw
operator|.
name|parseAny
argument_list|(
name|key
operator|.
name|getOldId
argument_list|()
argument_list|)
return|;
block|}
switch|switch
condition|(
name|b
operator|.
name|getParentCount
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|rw
operator|.
name|parseAny
argument_list|(
name|emptyTree
argument_list|(
name|repo
argument_list|)
argument_list|)
return|;
case|case
literal|1
case|:
block|{
name|RevCommit
name|r
init|=
name|b
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|rw
operator|.
name|parseBody
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
default|default:
comment|// merge commit, return null to force combined diff behavior
return|return
literal|null
return|;
block|}
block|}
DECL|method|emptyTree (final Repository repo)
specifier|private
specifier|static
name|ObjectId
name|emptyTree
parameter_list|(
specifier|final
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectInserter
name|oi
init|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
decl_stmt|;
try|try
block|{
name|ObjectId
name|id
init|=
name|oi
operator|.
name|insert
argument_list|(
name|Constants
operator|.
name|OBJ_TREE
argument_list|,
operator|new
name|byte
index|[]
block|{}
argument_list|)
decl_stmt|;
name|oi
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|id
return|;
block|}
finally|finally
block|{
name|oi
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

