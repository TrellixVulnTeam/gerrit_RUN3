begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|isPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
operator|.
name|State
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|RefConfigSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ProjectConfig
specifier|public
class|class
name|ProjectConfig
extends|extends
name|VersionedMetaData
block|{
DECL|field|PROJECT_CONFIG
specifier|private
specifier|static
specifier|final
name|String
name|PROJECT_CONFIG
init|=
literal|"project.config"
decl_stmt|;
DECL|field|GROUP_LIST
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_LIST
init|=
literal|"groups"
decl_stmt|;
DECL|field|PROJECT
specifier|private
specifier|static
specifier|final
name|String
name|PROJECT
init|=
literal|"project"
decl_stmt|;
DECL|field|KEY_DESCRIPTION
specifier|private
specifier|static
specifier|final
name|String
name|KEY_DESCRIPTION
init|=
literal|"description"
decl_stmt|;
DECL|field|ACCESS
specifier|private
specifier|static
specifier|final
name|String
name|ACCESS
init|=
literal|"access"
decl_stmt|;
DECL|field|KEY_INHERIT_FROM
specifier|private
specifier|static
specifier|final
name|String
name|KEY_INHERIT_FROM
init|=
literal|"inheritFrom"
decl_stmt|;
DECL|field|KEY_GROUP_PERMISSIONS
specifier|private
specifier|static
specifier|final
name|String
name|KEY_GROUP_PERMISSIONS
init|=
literal|"exclusiveGroupPermissions"
decl_stmt|;
DECL|field|CAPABILITY
specifier|private
specifier|static
specifier|final
name|String
name|CAPABILITY
init|=
literal|"capability"
decl_stmt|;
DECL|field|RECEIVE
specifier|private
specifier|static
specifier|final
name|String
name|RECEIVE
init|=
literal|"receive"
decl_stmt|;
DECL|field|KEY_REQUIRE_SIGNED_OFF_BY
specifier|private
specifier|static
specifier|final
name|String
name|KEY_REQUIRE_SIGNED_OFF_BY
init|=
literal|"requireSignedOffBy"
decl_stmt|;
DECL|field|KEY_REQUIRE_CHANGE_ID
specifier|private
specifier|static
specifier|final
name|String
name|KEY_REQUIRE_CHANGE_ID
init|=
literal|"requireChangeId"
decl_stmt|;
DECL|field|KEY_REQUIRE_CONTRIBUTOR_AGREEMENT
specifier|private
specifier|static
specifier|final
name|String
name|KEY_REQUIRE_CONTRIBUTOR_AGREEMENT
init|=
literal|"requireContributorAgreement"
decl_stmt|;
DECL|field|SUBMIT
specifier|private
specifier|static
specifier|final
name|String
name|SUBMIT
init|=
literal|"submit"
decl_stmt|;
DECL|field|KEY_ACTION
specifier|private
specifier|static
specifier|final
name|String
name|KEY_ACTION
init|=
literal|"action"
decl_stmt|;
DECL|field|KEY_MERGE_CONTENT
specifier|private
specifier|static
specifier|final
name|String
name|KEY_MERGE_CONTENT
init|=
literal|"mergeContent"
decl_stmt|;
DECL|field|KEY_STATE
specifier|private
specifier|static
specifier|final
name|String
name|KEY_STATE
init|=
literal|"state"
decl_stmt|;
DECL|field|defaultSubmitAction
specifier|private
specifier|static
specifier|final
name|SubmitType
name|defaultSubmitAction
init|=
name|SubmitType
operator|.
name|MERGE_IF_NECESSARY
decl_stmt|;
DECL|field|defaultStateValue
specifier|private
specifier|static
specifier|final
name|State
name|defaultStateValue
init|=
name|State
operator|.
name|ACTIVE
decl_stmt|;
DECL|field|projectName
specifier|private
name|Project
operator|.
name|NameKey
name|projectName
decl_stmt|;
DECL|field|project
specifier|private
name|Project
name|project
decl_stmt|;
DECL|field|groupsByUUID
specifier|private
name|Map
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|,
name|GroupReference
argument_list|>
name|groupsByUUID
decl_stmt|;
DECL|field|accessSections
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AccessSection
argument_list|>
name|accessSections
decl_stmt|;
DECL|field|validationErrors
specifier|private
name|List
argument_list|<
name|ValidationError
argument_list|>
name|validationErrors
decl_stmt|;
DECL|field|rulesId
specifier|private
name|ObjectId
name|rulesId
decl_stmt|;
DECL|method|read (MetaDataUpdate update)
specifier|public
specifier|static
name|ProjectConfig
name|read
parameter_list|(
name|MetaDataUpdate
name|update
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ProjectConfig
name|r
init|=
operator|new
name|ProjectConfig
argument_list|(
name|update
operator|.
name|getProjectName
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|load
argument_list|(
name|update
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|read (MetaDataUpdate update, ObjectId id)
specifier|public
specifier|static
name|ProjectConfig
name|read
parameter_list|(
name|MetaDataUpdate
name|update
parameter_list|,
name|ObjectId
name|id
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ProjectConfig
name|r
init|=
operator|new
name|ProjectConfig
argument_list|(
name|update
operator|.
name|getProjectName
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|load
argument_list|(
name|update
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|ProjectConfig (Project.NameKey projectName)
specifier|public
name|ProjectConfig
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|)
block|{
name|this
operator|.
name|projectName
operator|=
name|projectName
expr_stmt|;
block|}
DECL|method|getProject ()
specifier|public
name|Project
name|getProject
parameter_list|()
block|{
return|return
name|project
return|;
block|}
DECL|method|getAccessSection (String name)
specifier|public
name|AccessSection
name|getAccessSection
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getAccessSection
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getAccessSection (String name, boolean create)
specifier|public
name|AccessSection
name|getAccessSection
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|create
parameter_list|)
block|{
name|AccessSection
name|as
init|=
name|accessSections
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|as
operator|==
literal|null
operator|&&
name|create
condition|)
block|{
name|as
operator|=
operator|new
name|AccessSection
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|accessSections
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|as
argument_list|)
expr_stmt|;
block|}
return|return
name|as
return|;
block|}
DECL|method|getAccessSections ()
specifier|public
name|Collection
argument_list|<
name|AccessSection
argument_list|>
name|getAccessSections
parameter_list|()
block|{
return|return
name|sort
argument_list|(
name|accessSections
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
DECL|method|remove (AccessSection section)
specifier|public
name|void
name|remove
parameter_list|(
name|AccessSection
name|section
parameter_list|)
block|{
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|accessSections
operator|.
name|remove
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|replace (AccessSection section)
specifier|public
name|void
name|replace
parameter_list|(
name|AccessSection
name|section
parameter_list|)
block|{
for|for
control|(
name|Permission
name|permission
range|:
name|section
operator|.
name|getPermissions
argument_list|()
control|)
block|{
for|for
control|(
name|PermissionRule
name|rule
range|:
name|permission
operator|.
name|getRules
argument_list|()
control|)
block|{
name|rule
operator|.
name|setGroup
argument_list|(
name|resolve
argument_list|(
name|rule
operator|.
name|getGroup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|accessSections
operator|.
name|put
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
block|}
DECL|method|resolve (AccountGroup group)
specifier|public
name|GroupReference
name|resolve
parameter_list|(
name|AccountGroup
name|group
parameter_list|)
block|{
return|return
name|resolve
argument_list|(
name|GroupReference
operator|.
name|forGroup
argument_list|(
name|group
argument_list|)
argument_list|)
return|;
block|}
DECL|method|resolve (GroupReference group)
specifier|public
name|GroupReference
name|resolve
parameter_list|(
name|GroupReference
name|group
parameter_list|)
block|{
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|GroupReference
name|ref
init|=
name|groupsByUUID
operator|.
name|get
argument_list|(
name|group
operator|.
name|getUUID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
return|return
name|ref
return|;
block|}
name|groupsByUUID
operator|.
name|put
argument_list|(
name|group
operator|.
name|getUUID
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
return|return
name|group
return|;
block|}
comment|/** @return the group reference, if the group is used by at least one rule. */
DECL|method|getGroup (AccountGroup.UUID uuid)
specifier|public
name|GroupReference
name|getGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
return|return
name|groupsByUUID
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
return|;
block|}
comment|/**    * @return the project's rules.pl ObjectId, if present in the branch.    *    Null if it doesn't exist.    */
DECL|method|getRulesId ()
specifier|public
name|ObjectId
name|getRulesId
parameter_list|()
block|{
return|return
name|rulesId
return|;
block|}
comment|/**    * Check all GroupReferences use current group name, repairing stale ones.    *    * @param groupCache cache to use when looking up group information by UUID.    * @return true if one or more group names was stale.    */
DECL|method|updateGroupNames (GroupCache groupCache)
specifier|public
name|boolean
name|updateGroupNames
parameter_list|(
name|GroupCache
name|groupCache
parameter_list|)
block|{
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
for|for
control|(
name|GroupReference
name|ref
range|:
name|groupsByUUID
operator|.
name|values
argument_list|()
control|)
block|{
name|AccountGroup
name|g
init|=
name|groupCache
operator|.
name|get
argument_list|(
name|ref
operator|.
name|getUUID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|!=
literal|null
operator|&&
operator|!
name|g
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|dirty
operator|=
literal|true
expr_stmt|;
name|ref
operator|.
name|setName
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dirty
return|;
block|}
comment|/**    * Get the validation errors, if any were discovered during load.    *    * @return list of errors; empty list if there are no errors.    */
DECL|method|getValidationErrors ()
specifier|public
name|List
argument_list|<
name|ValidationError
argument_list|>
name|getValidationErrors
parameter_list|()
block|{
if|if
condition|(
name|validationErrors
operator|!=
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|validationErrors
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRefName ()
specifier|protected
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|GitRepositoryManager
operator|.
name|REF_CONFIG
return|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|GroupReference
argument_list|>
name|groupsByName
init|=
name|readGroupList
argument_list|()
decl_stmt|;
name|rulesId
operator|=
name|getObjectId
argument_list|(
literal|"rules.pl"
argument_list|)
expr_stmt|;
name|Config
name|rc
init|=
name|readConfig
argument_list|(
name|PROJECT_CONFIG
argument_list|)
decl_stmt|;
name|project
operator|=
operator|new
name|Project
argument_list|(
name|projectName
argument_list|)
expr_stmt|;
name|Project
name|p
init|=
name|project
decl_stmt|;
name|p
operator|.
name|setDescription
argument_list|(
name|rc
operator|.
name|getString
argument_list|(
name|PROJECT
argument_list|,
literal|null
argument_list|,
name|KEY_DESCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getDescription
argument_list|()
operator|==
literal|null
condition|)
block|{
name|p
operator|.
name|setDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setParentName
argument_list|(
name|rc
operator|.
name|getString
argument_list|(
name|ACCESS
argument_list|,
literal|null
argument_list|,
name|KEY_INHERIT_FROM
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setUseContributorAgreements
argument_list|(
name|getBoolean
argument_list|(
name|rc
argument_list|,
name|RECEIVE
argument_list|,
name|KEY_REQUIRE_CONTRIBUTOR_AGREEMENT
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setUseSignedOffBy
argument_list|(
name|getBoolean
argument_list|(
name|rc
argument_list|,
name|RECEIVE
argument_list|,
name|KEY_REQUIRE_SIGNED_OFF_BY
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setRequireChangeID
argument_list|(
name|getBoolean
argument_list|(
name|rc
argument_list|,
name|RECEIVE
argument_list|,
name|KEY_REQUIRE_CHANGE_ID
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setSubmitType
argument_list|(
name|getEnum
argument_list|(
name|rc
argument_list|,
name|SUBMIT
argument_list|,
literal|null
argument_list|,
name|KEY_ACTION
argument_list|,
name|defaultSubmitAction
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setUseContentMerge
argument_list|(
name|getBoolean
argument_list|(
name|rc
argument_list|,
name|SUBMIT
argument_list|,
name|KEY_MERGE_CONTENT
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setState
argument_list|(
name|getEnum
argument_list|(
name|rc
argument_list|,
name|PROJECT
argument_list|,
literal|null
argument_list|,
name|KEY_STATE
argument_list|,
name|defaultStateValue
argument_list|)
argument_list|)
expr_stmt|;
name|accessSections
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AccessSection
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|refName
range|:
name|rc
operator|.
name|getSubsections
argument_list|(
name|ACCESS
argument_list|)
control|)
block|{
if|if
condition|(
name|RefConfigSection
operator|.
name|isValid
argument_list|(
name|refName
argument_list|)
condition|)
block|{
name|AccessSection
name|as
init|=
name|getAccessSection
argument_list|(
name|refName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|varName
range|:
name|rc
operator|.
name|getStringList
argument_list|(
name|ACCESS
argument_list|,
name|refName
argument_list|,
name|KEY_GROUP_PERMISSIONS
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|n
range|:
name|varName
operator|.
name|split
argument_list|(
literal|"[, \t]{1,}"
argument_list|)
control|)
block|{
if|if
condition|(
name|isPermission
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|as
operator|.
name|getPermission
argument_list|(
name|n
argument_list|,
literal|true
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|varName
range|:
name|rc
operator|.
name|getNames
argument_list|(
name|ACCESS
argument_list|,
name|refName
argument_list|)
control|)
block|{
if|if
condition|(
name|isPermission
argument_list|(
name|varName
argument_list|)
condition|)
block|{
name|Permission
name|perm
init|=
name|as
operator|.
name|getPermission
argument_list|(
name|varName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|loadPermissionRules
argument_list|(
name|rc
argument_list|,
name|ACCESS
argument_list|,
name|refName
argument_list|,
name|varName
argument_list|,
name|groupsByName
argument_list|,
name|perm
argument_list|,
name|perm
operator|.
name|isLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|AccessSection
name|capability
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|varName
range|:
name|rc
operator|.
name|getNames
argument_list|(
name|CAPABILITY
argument_list|)
control|)
block|{
if|if
condition|(
name|GlobalCapability
operator|.
name|isCapability
argument_list|(
name|varName
argument_list|)
condition|)
block|{
if|if
condition|(
name|capability
operator|==
literal|null
condition|)
block|{
name|capability
operator|=
operator|new
name|AccessSection
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|)
expr_stmt|;
name|accessSections
operator|.
name|put
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|,
name|capability
argument_list|)
expr_stmt|;
block|}
name|Permission
name|perm
init|=
name|capability
operator|.
name|getPermission
argument_list|(
name|varName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|loadPermissionRules
argument_list|(
name|rc
argument_list|,
name|CAPABILITY
argument_list|,
literal|null
argument_list|,
name|varName
argument_list|,
name|groupsByName
argument_list|,
name|perm
argument_list|,
name|GlobalCapability
operator|.
name|hasRange
argument_list|(
name|varName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadPermissionRules (Config rc, String section, String subsection, String varName, Map<String, GroupReference> groupsByName, Permission perm, boolean useRange)
specifier|private
name|void
name|loadPermissionRules
parameter_list|(
name|Config
name|rc
parameter_list|,
name|String
name|section
parameter_list|,
name|String
name|subsection
parameter_list|,
name|String
name|varName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|GroupReference
argument_list|>
name|groupsByName
parameter_list|,
name|Permission
name|perm
parameter_list|,
name|boolean
name|useRange
parameter_list|)
block|{
for|for
control|(
name|String
name|ruleString
range|:
name|rc
operator|.
name|getStringList
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|varName
argument_list|)
control|)
block|{
name|PermissionRule
name|rule
decl_stmt|;
try|try
block|{
name|rule
operator|=
name|PermissionRule
operator|.
name|fromString
argument_list|(
name|ruleString
argument_list|,
name|useRange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|notRule
parameter_list|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
literal|"Invalid rule in "
operator|+
name|section
operator|+
operator|(
name|subsection
operator|!=
literal|null
condition|?
literal|"."
operator|+
name|subsection
else|:
literal|""
operator|)
operator|+
literal|"."
operator|+
name|varName
operator|+
literal|": "
operator|+
name|notRule
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|GroupReference
name|ref
init|=
name|groupsByName
operator|.
name|get
argument_list|(
name|rule
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
comment|// The group wasn't mentioned in the groups table, so there is
comment|// no valid UUID for it. Pool the reference anyway so at least
comment|// all rules in the same file share the same GroupReference.
comment|//
name|ref
operator|=
name|rule
operator|.
name|getGroup
argument_list|()
expr_stmt|;
name|groupsByName
operator|.
name|put
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
literal|"group \""
operator|+
name|ref
operator|.
name|getName
argument_list|()
operator|+
literal|"\" not in "
operator|+
name|GROUP_LIST
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rule
operator|.
name|setGroup
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|perm
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readGroupList ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|GroupReference
argument_list|>
name|readGroupList
parameter_list|()
throws|throws
name|IOException
block|{
name|groupsByUUID
operator|=
operator|new
name|HashMap
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|,
name|GroupReference
argument_list|>
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GroupReference
argument_list|>
name|groupsByName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|GroupReference
argument_list|>
argument_list|()
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|readUTF8
argument_list|(
name|GROUP_LIST
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|s
decl_stmt|;
for|for
control|(
name|int
name|lineNumber
init|=
literal|1
init|;
operator|(
name|s
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|;
name|lineNumber
operator|++
control|)
block|{
if|if
condition|(
name|s
operator|.
name|isEmpty
argument_list|()
operator|||
name|s
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|int
name|tab
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'\t'
argument_list|)
decl_stmt|;
if|if
condition|(
name|tab
operator|<
literal|0
condition|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|GROUP_LIST
argument_list|,
name|lineNumber
argument_list|,
literal|"missing tab delimiter"
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|AccountGroup
operator|.
name|UUID
name|uuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|tab
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|s
operator|.
name|substring
argument_list|(
name|tab
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|GroupReference
name|ref
init|=
operator|new
name|GroupReference
argument_list|(
name|uuid
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|groupsByUUID
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|groupsByName
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
return|return
name|groupsByName
return|;
block|}
annotation|@
name|Override
DECL|method|onSave (CommitBuilder commit)
specifier|protected
name|void
name|onSave
parameter_list|(
name|CommitBuilder
name|commit
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
if|if
condition|(
name|commit
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|commit
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|commit
operator|.
name|setMessage
argument_list|(
literal|"Updated project configuration\n"
argument_list|)
expr_stmt|;
block|}
name|Config
name|rc
init|=
name|readConfig
argument_list|(
name|PROJECT_CONFIG
argument_list|)
decl_stmt|;
name|Project
name|p
init|=
name|project
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|p
operator|.
name|getDescription
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rc
operator|.
name|setString
argument_list|(
name|PROJECT
argument_list|,
literal|null
argument_list|,
name|KEY_DESCRIPTION
argument_list|,
name|p
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|.
name|unset
argument_list|(
name|PROJECT
argument_list|,
literal|null
argument_list|,
name|KEY_DESCRIPTION
argument_list|)
expr_stmt|;
block|}
name|set
argument_list|(
name|rc
argument_list|,
name|ACCESS
argument_list|,
literal|null
argument_list|,
name|KEY_INHERIT_FROM
argument_list|,
name|p
operator|.
name|getParentName
argument_list|()
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|rc
argument_list|,
name|RECEIVE
argument_list|,
literal|null
argument_list|,
name|KEY_REQUIRE_CONTRIBUTOR_AGREEMENT
argument_list|,
name|p
operator|.
name|isUseContributorAgreements
argument_list|()
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|rc
argument_list|,
name|RECEIVE
argument_list|,
literal|null
argument_list|,
name|KEY_REQUIRE_SIGNED_OFF_BY
argument_list|,
name|p
operator|.
name|isUseSignedOffBy
argument_list|()
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|rc
argument_list|,
name|RECEIVE
argument_list|,
literal|null
argument_list|,
name|KEY_REQUIRE_CHANGE_ID
argument_list|,
name|p
operator|.
name|isRequireChangeID
argument_list|()
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|rc
argument_list|,
name|SUBMIT
argument_list|,
literal|null
argument_list|,
name|KEY_ACTION
argument_list|,
name|p
operator|.
name|getSubmitType
argument_list|()
argument_list|,
name|defaultSubmitAction
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|rc
argument_list|,
name|SUBMIT
argument_list|,
literal|null
argument_list|,
name|KEY_MERGE_CONTENT
argument_list|,
name|p
operator|.
name|isUseContentMerge
argument_list|()
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|rc
argument_list|,
name|PROJECT
argument_list|,
literal|null
argument_list|,
name|KEY_STATE
argument_list|,
name|p
operator|.
name|getState
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|keepGroups
init|=
operator|new
name|HashSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
argument_list|()
decl_stmt|;
name|AccessSection
name|capability
init|=
name|accessSections
operator|.
name|get
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|capability
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|have
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Permission
name|permission
range|:
name|sort
argument_list|(
name|capability
operator|.
name|getPermissions
argument_list|()
argument_list|)
control|)
block|{
name|have
operator|.
name|add
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|needRange
init|=
name|GlobalCapability
operator|.
name|hasRange
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PermissionRule
name|rule
range|:
name|sort
argument_list|(
name|permission
operator|.
name|getRules
argument_list|()
argument_list|)
control|)
block|{
name|GroupReference
name|group
init|=
name|rule
operator|.
name|getGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keepGroups
operator|.
name|add
argument_list|(
name|group
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rules
operator|.
name|add
argument_list|(
name|rule
operator|.
name|asString
argument_list|(
name|needRange
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|setStringList
argument_list|(
name|CAPABILITY
argument_list|,
literal|null
argument_list|,
name|permission
operator|.
name|getName
argument_list|()
argument_list|,
name|rules
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|varName
range|:
name|rc
operator|.
name|getNames
argument_list|(
name|CAPABILITY
argument_list|)
control|)
block|{
if|if
condition|(
name|GlobalCapability
operator|.
name|isCapability
argument_list|(
name|varName
argument_list|)
operator|&&
operator|!
name|have
operator|.
name|contains
argument_list|(
name|varName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|rc
operator|.
name|unset
argument_list|(
name|CAPABILITY
argument_list|,
literal|null
argument_list|,
name|varName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|rc
operator|.
name|unsetSection
argument_list|(
name|CAPABILITY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AccessSection
name|as
range|:
name|sort
argument_list|(
name|accessSections
operator|.
name|values
argument_list|()
argument_list|)
control|)
block|{
name|String
name|refName
init|=
name|as
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
operator|.
name|equals
argument_list|(
name|refName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|StringBuilder
name|doNotInherit
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Permission
name|perm
range|:
name|sort
argument_list|(
name|as
operator|.
name|getPermissions
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|perm
operator|.
name|getExclusiveGroup
argument_list|()
condition|)
block|{
if|if
condition|(
literal|0
operator|<
name|doNotInherit
operator|.
name|length
argument_list|()
condition|)
block|{
name|doNotInherit
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|doNotInherit
operator|.
name|append
argument_list|(
name|perm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|0
operator|<
name|doNotInherit
operator|.
name|length
argument_list|()
condition|)
block|{
name|rc
operator|.
name|setString
argument_list|(
name|ACCESS
argument_list|,
name|refName
argument_list|,
name|KEY_GROUP_PERMISSIONS
argument_list|,
name|doNotInherit
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|.
name|unset
argument_list|(
name|ACCESS
argument_list|,
name|refName
argument_list|,
name|KEY_GROUP_PERMISSIONS
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|have
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Permission
name|permission
range|:
name|sort
argument_list|(
name|as
operator|.
name|getPermissions
argument_list|()
argument_list|)
control|)
block|{
name|have
operator|.
name|add
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|needRange
init|=
name|permission
operator|.
name|isLabel
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PermissionRule
name|rule
range|:
name|sort
argument_list|(
name|permission
operator|.
name|getRules
argument_list|()
argument_list|)
control|)
block|{
name|GroupReference
name|group
init|=
name|rule
operator|.
name|getGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keepGroups
operator|.
name|add
argument_list|(
name|group
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rules
operator|.
name|add
argument_list|(
name|rule
operator|.
name|asString
argument_list|(
name|needRange
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|setStringList
argument_list|(
name|ACCESS
argument_list|,
name|refName
argument_list|,
name|permission
operator|.
name|getName
argument_list|()
argument_list|,
name|rules
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|varName
range|:
name|rc
operator|.
name|getNames
argument_list|(
name|ACCESS
argument_list|,
name|refName
argument_list|)
control|)
block|{
if|if
condition|(
name|isPermission
argument_list|(
name|varName
argument_list|)
operator|&&
operator|!
name|have
operator|.
name|contains
argument_list|(
name|varName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|rc
operator|.
name|unset
argument_list|(
name|ACCESS
argument_list|,
name|refName
argument_list|,
name|varName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|name
range|:
name|rc
operator|.
name|getSubsections
argument_list|(
name|ACCESS
argument_list|)
control|)
block|{
if|if
condition|(
name|RefConfigSection
operator|.
name|isValid
argument_list|(
name|name
argument_list|)
operator|&&
operator|!
name|accessSections
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rc
operator|.
name|unsetSection
argument_list|(
name|ACCESS
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|groupsByUUID
operator|.
name|keySet
argument_list|()
operator|.
name|retainAll
argument_list|(
name|keepGroups
argument_list|)
expr_stmt|;
name|saveConfig
argument_list|(
name|PROJECT_CONFIG
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|saveGroupList
argument_list|()
expr_stmt|;
block|}
DECL|method|saveGroupList ()
specifier|private
name|void
name|saveGroupList
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|groupsByUUID
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|saveFile
argument_list|(
name|GROUP_LIST
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|int
name|uuidLen
init|=
literal|40
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|pad
argument_list|(
name|uuidLen
argument_list|,
literal|"# UUID"
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"Group Name"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
for|for
control|(
name|GroupReference
name|g
range|:
name|sort
argument_list|(
name|groupsByUUID
operator|.
name|values
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|g
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
operator|&&
name|g
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|pad
argument_list|(
name|uuidLen
argument_list|,
name|g
operator|.
name|getUUID
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
name|saveUTF8
argument_list|(
name|GROUP_LIST
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getBoolean (Config rc, String section, String name, boolean defaultValue)
specifier|private
name|boolean
name|getBoolean
parameter_list|(
name|Config
name|rc
parameter_list|,
name|String
name|section
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
try|try
block|{
return|return
name|rc
operator|.
name|getBoolean
argument_list|(
name|section
argument_list|,
name|name
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|err
parameter_list|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|defaultValue
return|;
block|}
block|}
DECL|method|getEnum (Config rc, String section, String subsection, String name, E defaultValue)
specifier|private
parameter_list|<
name|E
extends|extends
name|Enum
argument_list|<
name|?
argument_list|>
parameter_list|>
name|E
name|getEnum
parameter_list|(
name|Config
name|rc
parameter_list|,
name|String
name|section
parameter_list|,
name|String
name|subsection
parameter_list|,
name|String
name|name
parameter_list|,
name|E
name|defaultValue
parameter_list|)
block|{
try|try
block|{
return|return
name|rc
operator|.
name|getEnum
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|name
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|err
parameter_list|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|defaultValue
return|;
block|}
block|}
DECL|method|error (ValidationError error)
specifier|private
name|void
name|error
parameter_list|(
name|ValidationError
name|error
parameter_list|)
block|{
if|if
condition|(
name|validationErrors
operator|==
literal|null
condition|)
block|{
name|validationErrors
operator|=
operator|new
name|ArrayList
argument_list|<
name|ValidationError
argument_list|>
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
name|validationErrors
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
DECL|method|pad (int len, String src)
specifier|private
specifier|static
name|String
name|pad
parameter_list|(
name|int
name|len
parameter_list|,
name|String
name|src
parameter_list|)
block|{
if|if
condition|(
name|len
operator|<=
name|src
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
name|src
return|;
block|}
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|r
operator|.
name|append
argument_list|(
name|src
argument_list|)
expr_stmt|;
while|while
condition|(
name|r
operator|.
name|length
argument_list|()
operator|<
name|len
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|sort (Collection<T> m)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|sort
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|m
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|T
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
block|}
end_class

end_unit

