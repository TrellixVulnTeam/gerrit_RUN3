begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbChangeState
operator|.
name|PrimaryStorage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_comment
comment|/**  * Possible high-level states of the NoteDb migration for changes.  *  *<p>This class describes the series of states required to migrate a site from ReviewDb-only to  * NoteDb-only. This process has several steps, and covers only a small subset of the theoretically  * possible combinations of {@link NotesMigration} return values.  *  *<p>These states are ordered: a one-way migration from ReviewDb to NoteDb will pass through states  * in the order in which they are defined.  */
end_comment

begin_enum
DECL|enum|NotesMigrationState
specifier|public
enum|enum
name|NotesMigrationState
block|{
DECL|enumConstant|REVIEW_DB
name|REVIEW_DB
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|PrimaryStorage
operator|.
name|REVIEW_DB
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
DECL|enumConstant|WRITE
name|WRITE
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|PrimaryStorage
operator|.
name|REVIEW_DB
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
DECL|enumConstant|READ_WRITE_NO_SEQUENCE
name|READ_WRITE_NO_SEQUENCE
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|PrimaryStorage
operator|.
name|REVIEW_DB
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
DECL|enumConstant|READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY
name|READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|PrimaryStorage
operator|.
name|REVIEW_DB
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
DECL|enumConstant|READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY
name|READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|PrimaryStorage
operator|.
name|NOTE_DB
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
comment|// TODO(dborowitz): This only exists as a separate state to support testing in different
comment|// NoteDbModes. Once FileRepository fuses BatchRefUpdates, we won't have separate fused/unfused
comment|// states.
DECL|enumConstant|NOTE_DB_UNFUSED
name|NOTE_DB_UNFUSED
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|PrimaryStorage
operator|.
name|NOTE_DB
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
DECL|enumConstant|NOTE_DB
name|NOTE_DB
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|PrimaryStorage
operator|.
name|NOTE_DB
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|;
comment|// TODO(dborowitz): Replace with NOTE_DB when FileRepository fuses BatchRefUpdates.
DECL|field|FINAL
specifier|public
specifier|static
specifier|final
name|NotesMigrationState
name|FINAL
init|=
name|NOTE_DB_UNFUSED
decl_stmt|;
DECL|method|forConfig (Config cfg)
specifier|public
specifier|static
name|Optional
argument_list|<
name|NotesMigrationState
argument_list|>
name|forConfig
parameter_list|(
name|Config
name|cfg
parameter_list|)
block|{
return|return
name|forSnapshot
argument_list|(
name|Snapshot
operator|.
name|create
argument_list|(
name|cfg
argument_list|)
argument_list|)
return|;
block|}
DECL|method|forNotesMigration (NotesMigration migration)
specifier|public
specifier|static
name|Optional
argument_list|<
name|NotesMigrationState
argument_list|>
name|forNotesMigration
parameter_list|(
name|NotesMigration
name|migration
parameter_list|)
block|{
return|return
name|forSnapshot
argument_list|(
name|migration
operator|.
name|snapshot
argument_list|()
argument_list|)
return|;
block|}
DECL|method|forSnapshot (Snapshot s)
specifier|private
specifier|static
name|Optional
argument_list|<
name|NotesMigrationState
argument_list|>
name|forSnapshot
parameter_list|(
name|Snapshot
name|s
parameter_list|)
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|values
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|v
lambda|->
name|v
operator|.
name|snapshot
operator|.
name|equals
argument_list|(
name|s
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
return|;
block|}
DECL|field|snapshot
specifier|private
specifier|final
name|Snapshot
name|snapshot
decl_stmt|;
DECL|method|NotesMigrationState ( boolean readChanges, boolean rawWriteChangesSetting, boolean readChangeSequence, PrimaryStorage changePrimaryStorage, boolean disableChangeReviewDb, boolean fuseUpdates)
name|NotesMigrationState
parameter_list|(
comment|// Arguments match abstract methods in NotesMigration.
name|boolean
name|readChanges
parameter_list|,
name|boolean
name|rawWriteChangesSetting
parameter_list|,
name|boolean
name|readChangeSequence
parameter_list|,
name|PrimaryStorage
name|changePrimaryStorage
parameter_list|,
name|boolean
name|disableChangeReviewDb
parameter_list|,
name|boolean
name|fuseUpdates
parameter_list|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|Snapshot
operator|.
name|builder
argument_list|()
operator|.
name|setReadChanges
argument_list|(
name|readChanges
argument_list|)
operator|.
name|setWriteChanges
argument_list|(
name|rawWriteChangesSetting
argument_list|)
operator|.
name|setReadChangeSequence
argument_list|(
name|readChangeSequence
argument_list|)
operator|.
name|setChangePrimaryStorage
argument_list|(
name|changePrimaryStorage
argument_list|)
operator|.
name|setDisableChangeReviewDb
argument_list|(
name|disableChangeReviewDb
argument_list|)
operator|.
name|setFuseUpdates
argument_list|(
name|fuseUpdates
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|setConfigValues (Config cfg)
specifier|public
name|void
name|setConfigValues
parameter_list|(
name|Config
name|cfg
parameter_list|)
block|{
name|snapshot
operator|.
name|setConfigValues
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
block|}
DECL|method|toText ()
specifier|public
name|String
name|toText
parameter_list|()
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|setConfigValues
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
return|return
name|cfg
operator|.
name|toText
argument_list|()
return|;
block|}
DECL|method|snapshot ()
name|Snapshot
name|snapshot
parameter_list|()
block|{
return|return
name|snapshot
return|;
block|}
block|}
end_enum

end_unit

