begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|RefConfigSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|InvalidNameException
import|;
end_import

begin_import
import|import
name|dk
operator|.
name|brics
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_class
DECL|class|RefPattern
specifier|public
class|class
name|RefPattern
block|{
DECL|field|USERNAME
specifier|public
specifier|static
specifier|final
name|String
name|USERNAME
init|=
literal|"username"
decl_stmt|;
DECL|method|shortestExample (String refPattern)
specifier|public
specifier|static
name|String
name|shortestExample
parameter_list|(
name|String
name|refPattern
parameter_list|)
block|{
if|if
condition|(
name|isRE
argument_list|(
name|refPattern
argument_list|)
condition|)
block|{
comment|// Since Brics will substitute dot [.] with \0 when generating
comment|// shortest example, any usage of dot will fail in
comment|// Repository.isValidRefName() if not combined with star [*].
comment|// To get around this, we substitute the \0 with an arbitrary
comment|// accepted character.
return|return
name|toRegExp
argument_list|(
name|refPattern
argument_list|)
operator|.
name|toAutomaton
argument_list|()
operator|.
name|getShortestExample
argument_list|(
literal|true
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\0'
argument_list|,
literal|'-'
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|refPattern
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
return|return
name|refPattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|refPattern
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|'1'
return|;
block|}
else|else
block|{
return|return
name|refPattern
return|;
block|}
block|}
DECL|method|isRE (String refPattern)
specifier|public
specifier|static
name|boolean
name|isRE
parameter_list|(
name|String
name|refPattern
parameter_list|)
block|{
return|return
name|refPattern
operator|.
name|startsWith
argument_list|(
name|AccessSection
operator|.
name|REGEX_PREFIX
argument_list|)
return|;
block|}
DECL|method|toRegExp (String refPattern)
specifier|public
specifier|static
name|RegExp
name|toRegExp
parameter_list|(
name|String
name|refPattern
parameter_list|)
block|{
if|if
condition|(
name|isRE
argument_list|(
name|refPattern
argument_list|)
condition|)
block|{
name|refPattern
operator|=
name|refPattern
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RegExp
argument_list|(
name|refPattern
argument_list|,
name|RegExp
operator|.
name|NONE
argument_list|)
return|;
block|}
DECL|method|validate (String refPattern)
specifier|public
specifier|static
name|void
name|validate
parameter_list|(
name|String
name|refPattern
parameter_list|)
throws|throws
name|InvalidNameException
block|{
if|if
condition|(
name|refPattern
operator|.
name|startsWith
argument_list|(
name|RefConfigSection
operator|.
name|REGEX_PREFIX
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|Repository
operator|.
name|isValidRefName
argument_list|(
name|shortestExample
argument_list|(
name|refPattern
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidNameException
argument_list|(
name|refPattern
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|refPattern
operator|.
name|equals
argument_list|(
name|RefConfigSection
operator|.
name|ALL
argument_list|)
condition|)
block|{
comment|// This is a special case we have to allow, it fails below.
block|}
elseif|else
if|if
condition|(
name|refPattern
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
name|String
name|prefix
init|=
name|refPattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|refPattern
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Repository
operator|.
name|isValidRefName
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidNameException
argument_list|(
name|refPattern
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|Repository
operator|.
name|isValidRefName
argument_list|(
name|refPattern
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidNameException
argument_list|(
name|refPattern
argument_list|)
throw|;
block|}
name|validateRegExp
argument_list|(
name|refPattern
argument_list|)
expr_stmt|;
block|}
DECL|method|validateRegExp (String refPattern)
specifier|public
specifier|static
name|void
name|validateRegExp
parameter_list|(
name|String
name|refPattern
parameter_list|)
throws|throws
name|InvalidNameException
block|{
try|try
block|{
name|Pattern
operator|.
name|compile
argument_list|(
name|refPattern
operator|.
name|replace
argument_list|(
literal|"${"
operator|+
name|USERNAME
operator|+
literal|"}/"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidNameException
argument_list|(
name|refPattern
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

