begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|MethodNotAllowedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestModifyView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|UiAction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchSetUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|DeleteDraftPatchSet
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|ChangePermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdateOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RepoContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|UpdateException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|DeleteDraftPatchSet
specifier|public
class|class
name|DeleteDraftPatchSet
implements|implements
name|RestModifyView
argument_list|<
name|RevisionResource
argument_list|,
name|Input
argument_list|>
implements|,
name|UiAction
argument_list|<
name|RevisionResource
argument_list|>
block|{
DECL|class|Input
specifier|public
specifier|static
class|class
name|Input
block|{}
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|updateFactory
specifier|private
specifier|final
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
decl_stmt|;
DECL|field|patchSetInfoFactory
specifier|private
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
decl_stmt|;
DECL|field|psUtil
specifier|private
specifier|final
name|PatchSetUtil
name|psUtil
decl_stmt|;
DECL|field|deleteChangeOpProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|DeleteChangeOp
argument_list|>
name|deleteChangeOpProvider
decl_stmt|;
DECL|field|accountPatchReviewStore
specifier|private
specifier|final
name|DynamicItem
argument_list|<
name|AccountPatchReviewStore
argument_list|>
name|accountPatchReviewStore
decl_stmt|;
DECL|field|allowDrafts
specifier|private
specifier|final
name|boolean
name|allowDrafts
decl_stmt|;
annotation|@
name|Inject
DECL|method|DeleteDraftPatchSet ( Provider<ReviewDb> db, BatchUpdate.Factory updateFactory, PatchSetInfoFactory patchSetInfoFactory, PatchSetUtil psUtil, Provider<DeleteChangeOp> deleteChangeOpProvider, DynamicItem<AccountPatchReviewStore> accountPatchReviewStore, @GerritServerConfig Config cfg)
specifier|public
name|DeleteDraftPatchSet
parameter_list|(
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
parameter_list|,
name|PatchSetInfoFactory
name|patchSetInfoFactory
parameter_list|,
name|PatchSetUtil
name|psUtil
parameter_list|,
name|Provider
argument_list|<
name|DeleteChangeOp
argument_list|>
name|deleteChangeOpProvider
parameter_list|,
name|DynamicItem
argument_list|<
name|AccountPatchReviewStore
argument_list|>
name|accountPatchReviewStore
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|updateFactory
operator|=
name|updateFactory
expr_stmt|;
name|this
operator|.
name|patchSetInfoFactory
operator|=
name|patchSetInfoFactory
expr_stmt|;
name|this
operator|.
name|psUtil
operator|=
name|psUtil
expr_stmt|;
name|this
operator|.
name|deleteChangeOpProvider
operator|=
name|deleteChangeOpProvider
expr_stmt|;
name|this
operator|.
name|accountPatchReviewStore
operator|=
name|accountPatchReviewStore
expr_stmt|;
name|this
operator|.
name|allowDrafts
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"change"
argument_list|,
literal|"allowDrafts"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (RevisionResource rsrc, Input input)
specifier|public
name|Response
argument_list|<
name|?
argument_list|>
name|apply
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|,
name|Input
name|input
parameter_list|)
throws|throws
name|RestApiException
throws|,
name|UpdateException
throws|,
name|OrmException
throws|,
name|PermissionBackendException
block|{
if|if
condition|(
name|isDeletingOnlyPatchSet
argument_list|(
name|rsrc
argument_list|)
condition|)
block|{
comment|// A change cannot have zero patch sets; the change is deleted instead.
name|rsrc
operator|.
name|permissions
argument_list|()
operator|.
name|database
argument_list|(
name|db
argument_list|)
operator|.
name|check
argument_list|(
name|ChangePermission
operator|.
name|DELETE
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getProject
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getUser
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
init|)
block|{
name|bu
operator|.
name|setOrder
argument_list|(
name|Order
operator|.
name|DB_BEFORE_REPO
argument_list|)
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|rsrc
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|Op
argument_list|(
name|rsrc
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
return|return
name|Response
operator|.
name|none
argument_list|()
return|;
block|}
DECL|method|isDeletingOnlyPatchSet (RevisionResource rsrc)
specifier|private
name|boolean
name|isDeletingOnlyPatchSet
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|)
throws|throws
name|OrmException
block|{
name|Collection
argument_list|<
name|PatchSet
argument_list|>
name|patchSets
init|=
name|psUtil
operator|.
name|byChange
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getNotes
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|patchSets
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|patchSets
argument_list|)
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|rsrc
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|class|Op
specifier|private
class|class
name|Op
implements|implements
name|BatchUpdateOp
block|{
DECL|field|psId
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
decl_stmt|;
DECL|field|patchSetsBeforeDeletion
specifier|private
name|Collection
argument_list|<
name|PatchSet
argument_list|>
name|patchSetsBeforeDeletion
decl_stmt|;
DECL|field|patchSet
specifier|private
name|PatchSet
name|patchSet
decl_stmt|;
DECL|field|deleteChangeOp
specifier|private
name|DeleteChangeOp
name|deleteChangeOp
decl_stmt|;
DECL|method|Op (PatchSet.Id psId)
specifier|private
name|Op
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|)
block|{
name|this
operator|.
name|psId
operator|=
name|psId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateChange (ChangeContext ctx)
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|RestApiException
throws|,
name|OrmException
throws|,
name|IOException
throws|,
name|NoSuchChangeException
block|{
name|patchSet
operator|=
name|psUtil
operator|.
name|get
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|,
name|psId
argument_list|)
expr_stmt|;
if|if
condition|(
name|patchSet
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
comment|// Nothing to do.
block|}
if|if
condition|(
operator|!
name|patchSet
operator|.
name|isDraft
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"Patch set is not a draft"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|allowDrafts
condition|)
block|{
throw|throw
operator|new
name|MethodNotAllowedException
argument_list|(
literal|"Draft workflow is disabled"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|ctx
operator|.
name|getControl
argument_list|()
operator|.
name|canDelete
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|DRAFT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"Not permitted to delete this draft patch set"
argument_list|)
throw|;
block|}
name|patchSetsBeforeDeletion
operator|=
name|psUtil
operator|.
name|byChange
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
name|deleteDraftPatchSet
argument_list|(
name|patchSet
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|deleteOrUpdateDraftChange
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|updateRepo (RepoContext ctx)
specifier|public
name|void
name|updateRepo
parameter_list|(
name|RepoContext
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|deleteChangeOp
operator|!=
literal|null
condition|)
block|{
name|deleteChangeOp
operator|.
name|updateRepo
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return;
block|}
name|ctx
operator|.
name|addRefUpdate
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|patchSet
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|patchSet
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteDraftPatchSet (PatchSet patchSet, ChangeContext ctx)
specifier|private
name|void
name|deleteDraftPatchSet
parameter_list|(
name|PatchSet
name|patchSet
parameter_list|,
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|OrmException
block|{
comment|// For NoteDb itself, no need to delete these entities, as they are
comment|// automatically filtered out when patch sets are deleted.
name|psUtil
operator|.
name|delete
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getUpdate
argument_list|(
name|patchSet
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|patchSet
argument_list|)
expr_stmt|;
name|accountPatchReviewStore
operator|.
name|get
argument_list|()
operator|.
name|clearReviewed
argument_list|(
name|psId
argument_list|)
expr_stmt|;
comment|// Use the unwrap from DeleteChangeOp to handle BatchUpdateReviewDb.
name|ReviewDb
name|db
init|=
name|DeleteChangeOp
operator|.
name|unwrap
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|)
decl_stmt|;
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteOrUpdateDraftChange (ChangeContext ctx)
specifier|private
name|void
name|deleteOrUpdateDraftChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|OrmException
throws|,
name|RestApiException
throws|,
name|IOException
throws|,
name|NoSuchChangeException
block|{
name|Change
name|c
init|=
name|ctx
operator|.
name|getChange
argument_list|()
decl_stmt|;
if|if
condition|(
name|deletedOnlyPatchSet
argument_list|()
condition|)
block|{
name|deleteChangeOp
operator|=
name|deleteChangeOpProvider
operator|.
name|get
argument_list|()
expr_stmt|;
name|deleteChangeOp
operator|.
name|updateChange
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
condition|)
block|{
name|c
operator|.
name|setCurrentPatchSet
argument_list|(
name|previousPatchSetInfo
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deletedOnlyPatchSet ()
specifier|private
name|boolean
name|deletedOnlyPatchSet
parameter_list|()
block|{
return|return
name|patchSetsBeforeDeletion
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|patchSetsBeforeDeletion
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
return|;
block|}
DECL|method|previousPatchSetInfo (ChangeContext ctx)
specifier|private
name|PatchSetInfo
name|previousPatchSetInfo
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
block|{
comment|// TODO(dborowitz): Get this in a way that doesn't involve re-opening
comment|// the repo after the updateRepo phase.
return|return
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|,
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|psId
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|psId
operator|.
name|get
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PatchSetInfoNotAvailableException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getDescription (RevisionResource rsrc)
specifier|public
name|UiAction
operator|.
name|Description
name|getDescription
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|UiAction
operator|.
name|Description
argument_list|()
operator|.
name|setLabel
argument_list|(
literal|"Delete"
argument_list|)
operator|.
name|setTitle
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Delete draft revision %d"
argument_list|,
name|rsrc
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setVisible
argument_list|(
name|allowDrafts
operator|&&
name|rsrc
operator|.
name|getPatchSet
argument_list|()
operator|.
name|isDraft
argument_list|()
operator|&&
name|psUtil
operator|.
name|byChange
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getNotes
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|rsrc
operator|.
name|getControl
argument_list|()
operator|.
name|canDelete
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|DRAFT
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

