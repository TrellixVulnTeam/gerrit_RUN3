begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_comment
comment|/**  * Formatters for code review note headers.  *<p>  * This class provides a builder like interface for building the content of a  * code review note. After instantiation, call as many as necessary  *<code>append...(...)</code> methods and, at the end, call the  * {@link #toString()} method to get the built note content.  */
end_comment

begin_class
DECL|class|ReviewNoteHeaderFormatter
class|class
name|ReviewNoteHeaderFormatter
block|{
DECL|field|rfc2822DateFormatter
specifier|private
specifier|final
name|DateFormat
name|rfc2822DateFormatter
decl_stmt|;
DECL|field|sb
specifier|private
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
DECL|method|ReviewNoteHeaderFormatter (TimeZone tz)
name|ReviewNoteHeaderFormatter
parameter_list|(
name|TimeZone
name|tz
parameter_list|)
block|{
name|rfc2822DateFormatter
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, dd MMM yyyy HH:mm:ss Z"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|rfc2822DateFormatter
operator|.
name|setCalendar
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|(
name|tz
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|appendChangeId (Change.Key changeKey)
name|void
name|appendChangeId
parameter_list|(
name|Change
operator|.
name|Key
name|changeKey
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Change-Id: "
argument_list|)
operator|.
name|append
argument_list|(
name|changeKey
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|appendApproval (ApprovalCategory category, short value, Account user)
name|void
name|appendApproval
parameter_list|(
name|ApprovalCategory
name|category
parameter_list|,
name|short
name|value
parameter_list|,
name|Account
name|user
parameter_list|)
block|{
comment|// TODO: use category.getLabel() when available
name|sb
operator|.
name|append
argument_list|(
name|category
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|value
operator|<
literal|0
condition|?
literal|"-"
else|:
literal|"+"
argument_list|)
operator|.
name|append
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|appendUserData
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|appendUserData (Account user)
specifier|private
name|void
name|appendUserData
parameter_list|(
name|Account
name|user
parameter_list|)
block|{
name|boolean
name|needSpace
init|=
literal|false
decl_stmt|;
name|boolean
name|wroteData
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|getFullName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|user
operator|.
name|getFullName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|user
operator|.
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
name|needSpace
operator|=
literal|true
expr_stmt|;
name|wroteData
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|user
operator|.
name|getPreferredEmail
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|user
operator|.
name|getPreferredEmail
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|needSpace
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
operator|.
name|append
argument_list|(
name|user
operator|.
name|getPreferredEmail
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|wroteData
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|wroteData
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Anonymous Coward #"
argument_list|)
operator|.
name|append
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|appendProject (String projectName)
name|void
name|appendProject
parameter_list|(
name|String
name|projectName
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Project: "
argument_list|)
operator|.
name|append
argument_list|(
name|projectName
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|appendBranch (Branch.NameKey branch)
name|void
name|appendBranch
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Branch: "
argument_list|)
operator|.
name|append
argument_list|(
name|branch
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|appendSubmittedBy (Account user)
name|void
name|appendSubmittedBy
parameter_list|(
name|Account
name|user
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Submitted-by: "
argument_list|)
expr_stmt|;
name|appendUserData
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|appendSubmittedAt (Date date)
name|void
name|appendSubmittedAt
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Submitted-at: "
argument_list|)
operator|.
name|append
argument_list|(
name|rfc2822DateFormatter
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|appendReviewedOn (String canonicalWebUrl, Change.Id changeId)
name|void
name|appendReviewedOn
parameter_list|(
name|String
name|canonicalWebUrl
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Reviewed-on: "
argument_list|)
operator|.
name|append
argument_list|(
name|canonicalWebUrl
argument_list|)
operator|.
name|append
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

