begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchLineCommentsUtil
operator|.
name|setCommentRevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CheckedFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|ChangeHooks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
operator|.
name|CommentInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
operator|.
name|DraftHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|Comment
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestModifyView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Url
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|CommentRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchLineCommentsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountsCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|ChangeIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|LabelVote
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|PostReview
specifier|public
class|class
name|PostReview
implements|implements
name|RestModifyView
argument_list|<
name|RevisionResource
argument_list|,
name|ReviewInput
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PostReview
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|Output
specifier|static
class|class
name|Output
block|{
DECL|field|labels
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|labels
decl_stmt|;
block|}
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|changes
specifier|private
specifier|final
name|ChangesCollection
name|changes
decl_stmt|;
DECL|field|changeDataFactory
specifier|private
specifier|final
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
decl_stmt|;
DECL|field|updateFactory
specifier|private
specifier|final
name|ChangeUpdate
operator|.
name|Factory
name|updateFactory
decl_stmt|;
DECL|field|approvalsUtil
specifier|private
specifier|final
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
DECL|field|cmUtil
specifier|private
specifier|final
name|ChangeMessagesUtil
name|cmUtil
decl_stmt|;
DECL|field|plcUtil
specifier|private
specifier|final
name|PatchLineCommentsUtil
name|plcUtil
decl_stmt|;
DECL|field|patchListCache
specifier|private
specifier|final
name|PatchListCache
name|patchListCache
decl_stmt|;
DECL|field|indexer
specifier|private
specifier|final
name|ChangeIndexer
name|indexer
decl_stmt|;
DECL|field|accounts
specifier|private
specifier|final
name|AccountsCollection
name|accounts
decl_stmt|;
DECL|field|email
specifier|private
specifier|final
name|EmailReviewComments
operator|.
name|Factory
name|email
decl_stmt|;
DECL|field|hooks
annotation|@
name|Deprecated
specifier|private
specifier|final
name|ChangeHooks
name|hooks
decl_stmt|;
DECL|field|change
specifier|private
name|Change
name|change
decl_stmt|;
DECL|field|message
specifier|private
name|ChangeMessage
name|message
decl_stmt|;
DECL|field|timestamp
specifier|private
name|Timestamp
name|timestamp
decl_stmt|;
DECL|field|comments
specifier|private
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|comments
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|field|labelDelta
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|labelDelta
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|field|categories
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|categories
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|PostReview (Provider<ReviewDb> db, ChangesCollection changes, ChangeData.Factory changeDataFactory, ChangeUpdate.Factory updateFactory, ApprovalsUtil approvalsUtil, ChangeMessagesUtil cmUtil, PatchLineCommentsUtil plcUtil, PatchListCache patchListCache, ChangeIndexer indexer, AccountsCollection accounts, EmailReviewComments.Factory email, ChangeHooks hooks)
name|PostReview
parameter_list|(
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|ChangesCollection
name|changes
parameter_list|,
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
parameter_list|,
name|ChangeUpdate
operator|.
name|Factory
name|updateFactory
parameter_list|,
name|ApprovalsUtil
name|approvalsUtil
parameter_list|,
name|ChangeMessagesUtil
name|cmUtil
parameter_list|,
name|PatchLineCommentsUtil
name|plcUtil
parameter_list|,
name|PatchListCache
name|patchListCache
parameter_list|,
name|ChangeIndexer
name|indexer
parameter_list|,
name|AccountsCollection
name|accounts
parameter_list|,
name|EmailReviewComments
operator|.
name|Factory
name|email
parameter_list|,
name|ChangeHooks
name|hooks
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|changes
operator|=
name|changes
expr_stmt|;
name|this
operator|.
name|changeDataFactory
operator|=
name|changeDataFactory
expr_stmt|;
name|this
operator|.
name|updateFactory
operator|=
name|updateFactory
expr_stmt|;
name|this
operator|.
name|plcUtil
operator|=
name|plcUtil
expr_stmt|;
name|this
operator|.
name|patchListCache
operator|=
name|patchListCache
expr_stmt|;
name|this
operator|.
name|approvalsUtil
operator|=
name|approvalsUtil
expr_stmt|;
name|this
operator|.
name|cmUtil
operator|=
name|cmUtil
expr_stmt|;
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
name|this
operator|.
name|accounts
operator|=
name|accounts
expr_stmt|;
name|this
operator|.
name|email
operator|=
name|email
expr_stmt|;
name|this
operator|.
name|hooks
operator|=
name|hooks
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (RevisionResource revision, ReviewInput input)
specifier|public
name|Output
name|apply
parameter_list|(
name|RevisionResource
name|revision
parameter_list|,
name|ReviewInput
name|input
parameter_list|)
throws|throws
name|AuthException
throws|,
name|BadRequestException
throws|,
name|UnprocessableEntityException
throws|,
name|OrmException
throws|,
name|IOException
block|{
if|if
condition|(
name|input
operator|.
name|onBehalfOf
operator|!=
literal|null
condition|)
block|{
name|revision
operator|=
name|onBehalfOf
argument_list|(
name|revision
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|.
name|labels
operator|!=
literal|null
condition|)
block|{
name|checkLabels
argument_list|(
name|revision
argument_list|,
name|input
operator|.
name|strictLabels
argument_list|,
name|input
operator|.
name|labels
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|.
name|comments
operator|!=
literal|null
condition|)
block|{
name|checkComments
argument_list|(
name|revision
argument_list|,
name|input
operator|.
name|comments
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|.
name|notify
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"notify = null; assuming notify = NONE"
argument_list|)
expr_stmt|;
name|input
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|NONE
expr_stmt|;
block|}
name|db
operator|.
name|get
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|revision
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
try|try
block|{
name|change
operator|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|revision
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|change
operator|.
name|getLastUpdatedOn
argument_list|()
expr_stmt|;
name|ChangeUpdate
name|update
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|revision
operator|.
name|getControl
argument_list|()
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|revision
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|dirty
operator||=
name|insertComments
argument_list|(
name|revision
argument_list|,
name|update
argument_list|,
name|input
operator|.
name|comments
argument_list|,
name|input
operator|.
name|drafts
argument_list|)
expr_stmt|;
name|dirty
operator||=
name|updateLabels
argument_list|(
name|revision
argument_list|,
name|update
argument_list|,
name|input
operator|.
name|labels
argument_list|)
expr_stmt|;
name|dirty
operator||=
name|insertMessage
argument_list|(
name|revision
argument_list|,
name|input
operator|.
name|message
argument_list|,
name|update
argument_list|)
expr_stmt|;
if|if
condition|(
name|dirty
condition|)
block|{
name|db
operator|.
name|get
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|get
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|get
argument_list|()
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|CheckedFuture
argument_list|<
name|?
argument_list|,
name|IOException
argument_list|>
name|indexWrite
decl_stmt|;
if|if
condition|(
name|dirty
condition|)
block|{
name|indexWrite
operator|=
name|indexer
operator|.
name|indexAsync
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexWrite
operator|=
name|Futures
operator|.
expr|<
name|Void
operator|,
name|IOException
operator|>
name|immediateCheckedFuture
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|input
operator|.
name|notify
operator|.
name|compareTo
argument_list|(
name|NotifyHandling
operator|.
name|NONE
argument_list|)
operator|>
literal|0
condition|)
block|{
name|email
operator|.
name|create
argument_list|(
name|input
operator|.
name|notify
argument_list|,
name|change
argument_list|,
name|revision
operator|.
name|getPatchSet
argument_list|()
argument_list|,
name|revision
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|message
argument_list|,
name|comments
argument_list|)
operator|.
name|sendAsync
argument_list|()
expr_stmt|;
block|}
name|fireCommentAddedHook
argument_list|(
name|revision
argument_list|)
expr_stmt|;
block|}
name|Output
name|output
init|=
operator|new
name|Output
argument_list|()
decl_stmt|;
name|output
operator|.
name|labels
operator|=
name|input
operator|.
name|labels
expr_stmt|;
name|indexWrite
operator|.
name|checkedGet
argument_list|()
expr_stmt|;
return|return
name|output
return|;
block|}
DECL|method|onBehalfOf (RevisionResource rev, ReviewInput in)
specifier|private
name|RevisionResource
name|onBehalfOf
parameter_list|(
name|RevisionResource
name|rev
parameter_list|,
name|ReviewInput
name|in
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|AuthException
throws|,
name|UnprocessableEntityException
throws|,
name|OrmException
block|{
if|if
condition|(
name|in
operator|.
name|labels
operator|==
literal|null
operator|||
name|in
operator|.
name|labels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"label required to post review on behalf of \"%s\""
argument_list|,
name|in
operator|.
name|onBehalfOf
argument_list|)
argument_list|)
throw|;
block|}
name|ChangeControl
name|caller
init|=
name|rev
operator|.
name|getControl
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
argument_list|>
name|itr
init|=
name|in
operator|.
name|labels
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|ent
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|LabelType
name|type
init|=
name|caller
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|byLabel
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|&&
name|in
operator|.
name|strictLabels
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"label \"%s\" is not a configured label"
argument_list|,
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|PermissionRange
name|r
init|=
name|caller
operator|.
name|getRange
argument_list|(
name|Permission
operator|.
name|forLabelAs
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|r
operator|.
name|contains
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"not permitted to modify label \"%s\" on behalf of \"%s\""
argument_list|,
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|in
operator|.
name|onBehalfOf
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|in
operator|.
name|labels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"label required to post review on behalf of \"%s\""
argument_list|,
name|in
operator|.
name|onBehalfOf
argument_list|)
argument_list|)
throw|;
block|}
name|ChangeControl
name|target
init|=
name|caller
operator|.
name|forUser
argument_list|(
name|accounts
operator|.
name|parse
argument_list|(
name|in
operator|.
name|onBehalfOf
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|RevisionResource
argument_list|(
name|changes
operator|.
name|parse
argument_list|(
name|target
argument_list|)
argument_list|,
name|rev
operator|.
name|getPatchSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|checkLabels (RevisionResource revision, boolean strict, Map<String, Short> labels)
specifier|private
name|void
name|checkLabels
parameter_list|(
name|RevisionResource
name|revision
parameter_list|,
name|boolean
name|strict
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|labels
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|AuthException
block|{
name|ChangeControl
name|ctl
init|=
name|revision
operator|.
name|getControl
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
argument_list|>
name|itr
init|=
name|labels
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|ent
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|LabelType
name|lt
init|=
name|revision
operator|.
name|getControl
argument_list|()
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|byLabel
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lt
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|strict
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"label \"%s\" is not a configured label"
argument_list|,
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|ent
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|ent
operator|.
name|getValue
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Always permit 0, even if it is not within range.
comment|// Later null/0 will be deleted and revoke the label.
continue|continue;
block|}
if|if
condition|(
name|lt
operator|.
name|getValue
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|strict
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"label \"%s\": %d is not a valid value"
argument_list|,
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
block|}
name|String
name|name
init|=
name|lt
operator|.
name|getName
argument_list|()
decl_stmt|;
name|PermissionRange
name|range
init|=
name|ctl
operator|.
name|getRange
argument_list|(
name|Permission
operator|.
name|forLabel
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|==
literal|null
operator|||
operator|!
name|range
operator|.
name|contains
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|strict
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Applying label \"%s\": %d is restricted"
argument_list|,
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|range
operator|==
literal|null
operator|||
name|range
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ent
operator|.
name|setValue
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ent
operator|.
name|setValue
argument_list|(
operator|(
name|short
operator|)
name|range
operator|.
name|squash
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|checkComments (RevisionResource revision, Map<String, List<CommentInput>> in)
specifier|private
name|void
name|checkComments
parameter_list|(
name|RevisionResource
name|revision
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInput
argument_list|>
argument_list|>
name|in
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|OrmException
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInput
argument_list|>
argument_list|>
argument_list|>
name|mapItr
init|=
name|in
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|filePaths
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|changeDataFactory
operator|.
name|create
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|revision
operator|.
name|getChange
argument_list|()
argument_list|)
operator|.
name|filePaths
argument_list|(
name|revision
operator|.
name|getPatchSet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|mapItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInput
argument_list|>
argument_list|>
name|ent
init|=
name|mapItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|ent
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|filePaths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
operator|&&
operator|!
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"file %s not found in revision %s"
argument_list|,
name|path
argument_list|,
name|revision
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|CommentInput
argument_list|>
name|list
init|=
name|ent
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|mapItr
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|Iterator
argument_list|<
name|CommentInput
argument_list|>
name|listItr
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|listItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CommentInput
name|c
init|=
name|listItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|line
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"negative line number %d not allowed on %s"
argument_list|,
name|c
operator|.
name|line
argument_list|,
name|path
argument_list|)
argument_list|)
throw|;
block|}
name|c
operator|.
name|message
operator|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|c
operator|.
name|message
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|listItr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mapItr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|insertComments (RevisionResource rsrc, ChangeUpdate update, Map<String, List<CommentInput>> in, DraftHandling draftsHandling)
specifier|private
name|boolean
name|insertComments
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|,
name|ChangeUpdate
name|update
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInput
argument_list|>
argument_list|>
name|in
parameter_list|,
name|DraftHandling
name|draftsHandling
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|in
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|PatchLineComment
argument_list|>
name|drafts
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|in
operator|.
name|isEmpty
argument_list|()
operator|||
name|draftsHandling
operator|!=
name|DraftHandling
operator|.
name|KEEP
condition|)
block|{
name|drafts
operator|=
name|scanDraftComments
argument_list|(
name|rsrc
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|del
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|ups
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInput
argument_list|>
argument_list|>
name|ent
range|:
name|in
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|ent
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|CommentInput
name|c
range|:
name|ent
operator|.
name|getValue
argument_list|()
control|)
block|{
name|String
name|parent
init|=
name|Url
operator|.
name|decode
argument_list|(
name|c
operator|.
name|inReplyTo
argument_list|)
decl_stmt|;
name|PatchLineComment
name|e
init|=
name|drafts
operator|.
name|remove
argument_list|(
name|Url
operator|.
name|decode
argument_list|(
name|c
operator|.
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|e
operator|=
operator|new
name|PatchLineComment
argument_list|(
operator|new
name|PatchLineComment
operator|.
name|Key
argument_list|(
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|rsrc
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|c
operator|.
name|line
argument_list|,
name|rsrc
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|parent
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|setParentUuid
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|setStatus
argument_list|(
name|PatchLineComment
operator|.
name|Status
operator|.
name|PUBLISHED
argument_list|)
expr_stmt|;
name|e
operator|.
name|setWrittenOn
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSide
argument_list|(
name|c
operator|.
name|side
operator|==
name|Side
operator|.
name|PARENT
condition|?
operator|(
name|short
operator|)
literal|0
else|:
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|setCommentRevId
argument_list|(
name|e
argument_list|,
name|patchListCache
argument_list|,
name|rsrc
operator|.
name|getChange
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getPatchSet
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setMessage
argument_list|(
name|c
operator|.
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|range
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|setRange
argument_list|(
operator|new
name|CommentRange
argument_list|(
name|c
operator|.
name|range
operator|.
name|startLine
argument_list|,
name|c
operator|.
name|range
operator|.
name|startCharacter
argument_list|,
name|c
operator|.
name|range
operator|.
name|endLine
argument_list|,
name|c
operator|.
name|range
operator|.
name|endCharacter
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setLine
argument_list|(
name|c
operator|.
name|range
operator|.
name|endLine
argument_list|)
expr_stmt|;
block|}
name|ups
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|Objects
operator|.
name|firstNonNull
argument_list|(
name|draftsHandling
argument_list|,
name|DraftHandling
operator|.
name|DELETE
argument_list|)
condition|)
block|{
case|case
name|KEEP
case|:
default|default:
break|break;
case|case
name|DELETE
case|:
name|del
operator|.
name|addAll
argument_list|(
name|drafts
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUBLISH
case|:
for|for
control|(
name|PatchLineComment
name|e
range|:
name|drafts
operator|.
name|values
argument_list|()
control|)
block|{
name|e
operator|.
name|setStatus
argument_list|(
name|PatchLineComment
operator|.
name|Status
operator|.
name|PUBLISHED
argument_list|)
expr_stmt|;
name|e
operator|.
name|setWrittenOn
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|setCommentRevId
argument_list|(
name|e
argument_list|,
name|patchListCache
argument_list|,
name|rsrc
operator|.
name|getChange
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getPatchSet
argument_list|()
argument_list|)
expr_stmt|;
name|ups
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|plcUtil
operator|.
name|deleteComments
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|update
argument_list|,
name|del
argument_list|)
expr_stmt|;
name|plcUtil
operator|.
name|upsertComments
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|update
argument_list|,
name|ups
argument_list|)
expr_stmt|;
name|comments
operator|.
name|addAll
argument_list|(
name|ups
argument_list|)
expr_stmt|;
return|return
operator|!
name|del
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|ups
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|scanDraftComments ( RevisionResource rsrc)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PatchLineComment
argument_list|>
name|scanDraftComments
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|)
throws|throws
name|OrmException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PatchLineComment
argument_list|>
name|drafts
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchLineComment
name|c
range|:
name|plcUtil
operator|.
name|draftByPatchSetAuthor
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getNotes
argument_list|()
argument_list|)
control|)
block|{
name|drafts
operator|.
name|put
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|drafts
return|;
block|}
DECL|method|updateLabels (RevisionResource rsrc, ChangeUpdate update, Map<String, Short> labels)
specifier|private
name|boolean
name|updateLabels
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|,
name|ChangeUpdate
name|update
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|labels
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|labels
operator|==
literal|null
condition|)
block|{
name|labels
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|del
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|ups
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PatchSetApproval
argument_list|>
name|current
init|=
name|scanLabels
argument_list|(
name|rsrc
argument_list|,
name|del
argument_list|)
decl_stmt|;
name|LabelTypes
name|labelTypes
init|=
name|rsrc
operator|.
name|getControl
argument_list|()
operator|.
name|getLabelTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|ent
range|:
name|labels
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|ent
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|LabelType
name|lt
init|=
name|checkNotNull
argument_list|(
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|name
argument_list|)
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
comment|// TODO Allow updating some labels even when closed.
continue|continue;
block|}
name|PatchSetApproval
name|c
init|=
name|current
operator|.
name|remove
argument_list|(
name|lt
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|normName
init|=
name|lt
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|ent
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|ent
operator|.
name|getValue
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// User requested delete of this label.
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|addLabelDelta
argument_list|(
name|normName
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
name|del
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getValue
argument_list|()
operator|!=
name|ent
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|c
operator|.
name|setValue
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setGranted
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|ups
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|addLabelDelta
argument_list|(
name|normName
argument_list|,
name|c
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|categories
operator|.
name|put
argument_list|(
name|normName
argument_list|,
name|c
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getValue
argument_list|()
operator|==
name|ent
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|current
operator|.
name|put
argument_list|(
name|normName
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|c
operator|=
operator|new
name|PatchSetApproval
argument_list|(
operator|new
name|PatchSetApproval
operator|.
name|Key
argument_list|(
name|rsrc
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|lt
operator|.
name|getLabelId
argument_list|()
argument_list|)
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setGranted
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|ups
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|addLabelDelta
argument_list|(
name|normName
argument_list|,
name|c
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|categories
operator|.
name|put
argument_list|(
name|normName
argument_list|,
name|c
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|forceCallerAsReviewer
argument_list|(
name|rsrc
argument_list|,
name|current
argument_list|,
name|ups
argument_list|,
name|del
argument_list|)
expr_stmt|;
name|db
operator|.
name|get
argument_list|()
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|db
operator|.
name|get
argument_list|()
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|upsert
argument_list|(
name|ups
argument_list|)
expr_stmt|;
return|return
operator|!
name|del
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|ups
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|forceCallerAsReviewer (RevisionResource rsrc, Map<String, PatchSetApproval> current, List<PatchSetApproval> ups, List<PatchSetApproval> del)
specifier|private
name|void
name|forceCallerAsReviewer
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PatchSetApproval
argument_list|>
name|current
parameter_list|,
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|ups
parameter_list|,
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|del
parameter_list|)
block|{
if|if
condition|(
name|current
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// TODO Find another way to link reviewers to changes.
if|if
condition|(
name|del
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If no existing label is being set to 0, hack in the caller
comment|// as a reviewer by picking the first server-wide LabelType.
name|PatchSetApproval
name|c
init|=
operator|new
name|PatchSetApproval
argument_list|(
operator|new
name|PatchSetApproval
operator|.
name|Key
argument_list|(
name|rsrc
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getControl
argument_list|()
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabelId
argument_list|()
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|setGranted
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|ups
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Pick a random label that is about to be deleted and keep it.
name|Iterator
argument_list|<
name|PatchSetApproval
argument_list|>
name|i
init|=
name|del
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|PatchSetApproval
name|c
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|c
operator|.
name|setValue
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setGranted
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|ups
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|scanLabels (RevisionResource rsrc, List<PatchSetApproval> del)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PatchSetApproval
argument_list|>
name|scanLabels
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|,
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|del
parameter_list|)
throws|throws
name|OrmException
block|{
name|LabelTypes
name|labelTypes
init|=
name|rsrc
operator|.
name|getControl
argument_list|()
operator|.
name|getLabelTypes
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PatchSetApproval
argument_list|>
name|current
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|approvalsUtil
operator|.
name|byPatchSetUser
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getControl
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getAccountId
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|a
operator|.
name|isSubmit
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|LabelType
name|lt
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|a
operator|.
name|getLabelId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lt
operator|!=
literal|null
condition|)
block|{
name|current
operator|.
name|put
argument_list|(
name|lt
operator|.
name|getName
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|del
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|current
return|;
block|}
DECL|method|addLabelDelta (String name, short value)
specifier|private
name|void
name|addLabelDelta
parameter_list|(
name|String
name|name
parameter_list|,
name|short
name|value
parameter_list|)
block|{
name|labelDelta
operator|.
name|add
argument_list|(
operator|new
name|LabelVote
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|insertMessage (RevisionResource rsrc, String msg, ChangeUpdate update)
specifier|private
name|boolean
name|insertMessage
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|,
name|String
name|msg
parameter_list|,
name|ChangeUpdate
name|update
parameter_list|)
throws|throws
name|OrmException
block|{
name|msg
operator|=
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|msg
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|d
range|:
name|labelDelta
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comments
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\n\n(1 comment)"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|comments
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\n\n(%d comments)"
argument_list|,
name|comments
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|msg
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
operator|.
name|append
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|message
operator|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|rsrc
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|timestamp
argument_list|,
name|rsrc
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Patch Set %d:%s"
argument_list|,
name|rsrc
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cmUtil
operator|.
name|addChangeMessage
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|update
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Deprecated
DECL|method|fireCommentAddedHook (RevisionResource rsrc)
specifier|private
name|void
name|fireCommentAddedHook
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|)
block|{
name|IdentifiedUser
name|user
init|=
operator|(
name|IdentifiedUser
operator|)
name|rsrc
operator|.
name|getControl
argument_list|()
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
try|try
block|{
name|hooks
operator|.
name|doCommentAddedHook
argument_list|(
name|change
argument_list|,
name|user
operator|.
name|getAccount
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getPatchSet
argument_list|()
argument_list|,
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|categories
argument_list|,
name|db
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"ChangeHook.doCommentAddedHook delivery failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

