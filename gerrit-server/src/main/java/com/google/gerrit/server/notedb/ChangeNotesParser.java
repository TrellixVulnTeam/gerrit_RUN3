begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_BRANCH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_CHANGE_ID
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_COMMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_GROUPS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_HASHTAGS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_LABEL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_PATCH_SET
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_STATUS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_SUBJECT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_SUBMISSION_ID
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_SUBMITTED_WITH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_TAG
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_TOPIC
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbTable
operator|.
name|CHANGES
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Enums
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBasedTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Tables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Timer1
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|LabelId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ReviewerSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ReviewerStatusUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotesCommit
operator|.
name|ChangeNotesRevWalk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|LabelVote
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|InvalidObjectIdException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|RawParseUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_class
DECL|class|ChangeNotesParser
class|class
name|ChangeNotesParser
block|{
comment|// Sentinel RevId indicating a mutable field on a patch set was parsed, but
comment|// the parser does not yet know its commit SHA-1.
DECL|field|PARTIAL_PATCH_SET
specifier|private
specifier|static
specifier|final
name|RevId
name|PARTIAL_PATCH_SET
init|=
operator|new
name|RevId
argument_list|(
literal|"INVALID PARTIAL PATCH SET"
argument_list|)
decl_stmt|;
annotation|@
name|AutoValue
DECL|class|ApprovalKey
specifier|static
specifier|abstract
class|class
name|ApprovalKey
block|{
DECL|method|psId ()
specifier|abstract
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|()
function_decl|;
DECL|method|accountId ()
specifier|abstract
name|Account
operator|.
name|Id
name|accountId
parameter_list|()
function_decl|;
DECL|method|label ()
specifier|abstract
name|String
name|label
parameter_list|()
function_decl|;
DECL|method|tag ()
annotation|@
name|Nullable
specifier|abstract
name|String
name|tag
parameter_list|()
function_decl|;
DECL|method|create (PatchSet.Id psId, Account.Id accountId, String label, @Nullable String tag)
specifier|private
specifier|static
name|ApprovalKey
name|create
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|String
name|label
parameter_list|,
annotation|@
name|Nullable
name|String
name|tag
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_ChangeNotesParser_ApprovalKey
argument_list|(
name|psId
argument_list|,
name|accountId
argument_list|,
name|label
argument_list|,
name|tag
argument_list|)
return|;
block|}
block|}
comment|// Private final members initialized in the constructor.
DECL|field|noteUtil
specifier|private
specifier|final
name|ChangeNoteUtil
name|noteUtil
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|NoteDbMetrics
name|metrics
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|Change
operator|.
name|Id
name|id
decl_stmt|;
DECL|field|tip
specifier|private
specifier|final
name|ObjectId
name|tip
decl_stmt|;
DECL|field|walk
specifier|private
specifier|final
name|ChangeNotesRevWalk
name|walk
decl_stmt|;
comment|// Private final but mutable members initialized in the constructor and filled
comment|// in during the parsing process.
DECL|field|reviewers
specifier|private
specifier|final
name|Table
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ReviewerStateInternal
argument_list|,
name|Timestamp
argument_list|>
name|reviewers
decl_stmt|;
DECL|field|allPastReviewers
specifier|private
specifier|final
name|List
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|allPastReviewers
decl_stmt|;
DECL|field|reviewerUpdates
specifier|private
specifier|final
name|List
argument_list|<
name|ReviewerStatusUpdate
argument_list|>
name|reviewerUpdates
decl_stmt|;
DECL|field|submitRecords
specifier|private
specifier|final
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|submitRecords
decl_stmt|;
DECL|field|comments
specifier|private
specifier|final
name|Multimap
argument_list|<
name|RevId
argument_list|,
name|PatchLineComment
argument_list|>
name|comments
decl_stmt|;
DECL|field|patchSets
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|patchSets
decl_stmt|;
DECL|field|deletedPatchSets
specifier|private
specifier|final
name|Set
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|deletedPatchSets
decl_stmt|;
DECL|field|patchSetStates
specifier|private
specifier|final
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetState
argument_list|>
name|patchSetStates
decl_stmt|;
DECL|field|approvals
specifier|private
specifier|final
name|Map
argument_list|<
name|ApprovalKey
argument_list|,
name|PatchSetApproval
argument_list|>
name|approvals
decl_stmt|;
DECL|field|allChangeMessages
specifier|private
specifier|final
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|allChangeMessages
decl_stmt|;
DECL|field|changeMessagesByPatchSet
specifier|private
specifier|final
name|Multimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|ChangeMessage
argument_list|>
name|changeMessagesByPatchSet
decl_stmt|;
comment|// Non-final private members filled in during the parsing process.
DECL|field|branch
specifier|private
name|String
name|branch
decl_stmt|;
DECL|field|status
specifier|private
name|Change
operator|.
name|Status
name|status
decl_stmt|;
DECL|field|topic
specifier|private
name|String
name|topic
decl_stmt|;
DECL|field|hashtags
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
decl_stmt|;
DECL|field|createdOn
specifier|private
name|Timestamp
name|createdOn
decl_stmt|;
DECL|field|lastUpdatedOn
specifier|private
name|Timestamp
name|lastUpdatedOn
decl_stmt|;
DECL|field|ownerId
specifier|private
name|Account
operator|.
name|Id
name|ownerId
decl_stmt|;
DECL|field|changeId
specifier|private
name|String
name|changeId
decl_stmt|;
DECL|field|subject
specifier|private
name|String
name|subject
decl_stmt|;
DECL|field|originalSubject
specifier|private
name|String
name|originalSubject
decl_stmt|;
DECL|field|submissionId
specifier|private
name|String
name|submissionId
decl_stmt|;
DECL|field|tag
specifier|private
name|String
name|tag
decl_stmt|;
DECL|field|currentPatchSetId
specifier|private
name|PatchSet
operator|.
name|Id
name|currentPatchSetId
decl_stmt|;
DECL|field|revisionNoteMap
specifier|private
name|RevisionNoteMap
name|revisionNoteMap
decl_stmt|;
DECL|method|ChangeNotesParser (Change.Id changeId, ObjectId tip, ChangeNotesRevWalk walk, ChangeNoteUtil noteUtil, NoteDbMetrics metrics)
name|ChangeNotesParser
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|ObjectId
name|tip
parameter_list|,
name|ChangeNotesRevWalk
name|walk
parameter_list|,
name|ChangeNoteUtil
name|noteUtil
parameter_list|,
name|NoteDbMetrics
name|metrics
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|changeId
expr_stmt|;
name|this
operator|.
name|tip
operator|=
name|tip
expr_stmt|;
name|this
operator|.
name|walk
operator|=
name|walk
expr_stmt|;
name|this
operator|.
name|noteUtil
operator|=
name|noteUtil
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|approvals
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|reviewers
operator|=
name|HashBasedTable
operator|.
name|create
argument_list|()
expr_stmt|;
name|allPastReviewers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|reviewerUpdates
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|submitRecords
operator|=
name|Lists
operator|.
name|newArrayListWithExpectedSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|allChangeMessages
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|changeMessagesByPatchSet
operator|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
name|comments
operator|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
name|patchSets
operator|=
name|Maps
operator|.
name|newTreeMap
argument_list|(
name|ReviewDbUtil
operator|.
name|intKeyOrdering
argument_list|()
argument_list|)
expr_stmt|;
name|deletedPatchSets
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|patchSetStates
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|parseAll ()
name|ChangeNotesState
name|parseAll
parameter_list|()
throws|throws
name|ConfigInvalidException
throws|,
name|IOException
block|{
comment|// Don't include initial parse in timer, as this might do more I/O to page
comment|// in the block containing most commits. Later reads are not guaranteed to
comment|// avoid I/O, but often should.
name|walk
operator|.
name|reset
argument_list|()
expr_stmt|;
name|walk
operator|.
name|markStart
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|tip
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Timer1
operator|.
name|Context
name|timer
init|=
name|metrics
operator|.
name|parseLatency
operator|.
name|start
argument_list|(
name|CHANGES
argument_list|)
init|)
block|{
name|ChangeNotesCommit
name|commit
decl_stmt|;
while|while
condition|(
operator|(
name|commit
operator|=
name|walk
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|parse
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
name|parseNotes
argument_list|()
expr_stmt|;
name|allPastReviewers
operator|.
name|addAll
argument_list|(
name|reviewers
operator|.
name|rowKeySet
argument_list|()
argument_list|)
expr_stmt|;
name|pruneReviewers
argument_list|()
expr_stmt|;
name|updatePatchSetStates
argument_list|()
expr_stmt|;
name|checkMandatoryFooters
argument_list|()
expr_stmt|;
block|}
return|return
name|buildState
argument_list|()
return|;
block|}
DECL|method|getRevisionNoteMap ()
name|RevisionNoteMap
name|getRevisionNoteMap
parameter_list|()
block|{
return|return
name|revisionNoteMap
return|;
block|}
DECL|method|buildState ()
specifier|private
name|ChangeNotesState
name|buildState
parameter_list|()
block|{
return|return
name|ChangeNotesState
operator|.
name|create
argument_list|(
name|id
argument_list|,
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|changeId
argument_list|)
argument_list|,
name|createdOn
argument_list|,
name|lastUpdatedOn
argument_list|,
name|ownerId
argument_list|,
name|branch
argument_list|,
name|currentPatchSetId
argument_list|,
name|subject
argument_list|,
name|topic
argument_list|,
name|originalSubject
argument_list|,
name|submissionId
argument_list|,
name|status
argument_list|,
name|hashtags
argument_list|,
name|patchSets
argument_list|,
name|buildApprovals
argument_list|()
argument_list|,
name|ReviewerSet
operator|.
name|fromTable
argument_list|(
name|Tables
operator|.
name|transpose
argument_list|(
name|reviewers
argument_list|)
argument_list|)
argument_list|,
name|allPastReviewers
argument_list|,
name|buildReviewerUpdates
argument_list|()
argument_list|,
name|submitRecords
argument_list|,
name|buildAllMessages
argument_list|()
argument_list|,
name|buildMessagesByPatchSet
argument_list|()
argument_list|,
name|comments
argument_list|)
return|;
block|}
DECL|method|buildApprovals ()
specifier|private
name|Multimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|buildApprovals
parameter_list|()
block|{
name|Multimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|result
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|approvals
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|patchSetStates
operator|.
name|get
argument_list|(
name|a
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
operator|==
name|PatchSetState
operator|.
name|DELETED
condition|)
block|{
continue|continue;
comment|// Patch set was explicitly deleted.
block|}
elseif|else
if|if
condition|(
name|allPastReviewers
operator|.
name|contains
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|&&
operator|!
name|reviewers
operator|.
name|containsRow
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
comment|// Reviewer was explicitly removed.
block|}
name|result
operator|.
name|put
argument_list|(
name|a
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Collection
argument_list|<
name|PatchSetApproval
argument_list|>
name|v
range|:
name|result
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
operator|(
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
operator|)
name|v
argument_list|,
name|ChangeNotes
operator|.
name|PSA_BY_TIME
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|buildReviewerUpdates ()
specifier|private
name|List
argument_list|<
name|ReviewerStatusUpdate
argument_list|>
name|buildReviewerUpdates
parameter_list|()
block|{
name|List
argument_list|<
name|ReviewerStatusUpdate
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ReviewerStateInternal
argument_list|>
name|lastState
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReviewerStatusUpdate
name|u
range|:
name|Lists
operator|.
name|reverse
argument_list|(
name|reviewerUpdates
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|ownerId
argument_list|,
name|u
operator|.
name|reviewer
argument_list|()
argument_list|)
operator|&&
name|lastState
operator|.
name|get
argument_list|(
name|u
operator|.
name|reviewer
argument_list|()
argument_list|)
operator|!=
name|u
operator|.
name|state
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|lastState
operator|.
name|put
argument_list|(
name|u
operator|.
name|reviewer
argument_list|()
argument_list|,
name|u
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|buildAllMessages ()
specifier|private
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|buildAllMessages
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|reverse
argument_list|(
name|allChangeMessages
argument_list|)
return|;
block|}
DECL|method|buildMessagesByPatchSet ()
specifier|private
name|Multimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|ChangeMessage
argument_list|>
name|buildMessagesByPatchSet
parameter_list|()
block|{
for|for
control|(
name|Collection
argument_list|<
name|ChangeMessage
argument_list|>
name|v
range|:
name|changeMessagesByPatchSet
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Collections
operator|.
name|reverse
argument_list|(
operator|(
name|List
argument_list|<
name|ChangeMessage
argument_list|>
operator|)
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|changeMessagesByPatchSet
return|;
block|}
DECL|method|parse (ChangeNotesCommit commit)
specifier|private
name|void
name|parse
parameter_list|(
name|ChangeNotesCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|Timestamp
name|ts
init|=
operator|new
name|Timestamp
argument_list|(
name|commit
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|createdOn
operator|=
name|ts
expr_stmt|;
name|parseTag
argument_list|(
name|commit
argument_list|)
expr_stmt|;
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
name|branch
operator|=
name|parseBranch
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
name|status
operator|=
name|parseStatus
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|parsePatchSetId
argument_list|(
name|commit
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentPatchSetId
operator|==
literal|null
operator|||
name|psId
operator|.
name|get
argument_list|()
operator|>
name|currentPatchSetId
operator|.
name|get
argument_list|()
condition|)
block|{
name|currentPatchSetId
operator|=
name|psId
expr_stmt|;
block|}
name|PatchSetState
name|psState
init|=
name|parsePatchSetState
argument_list|(
name|commit
argument_list|)
decl_stmt|;
if|if
condition|(
name|psState
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|patchSetStates
operator|.
name|containsKey
argument_list|(
name|psId
argument_list|)
condition|)
block|{
name|patchSetStates
operator|.
name|put
argument_list|(
name|psId
argument_list|,
name|psState
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|psState
operator|==
name|PatchSetState
operator|.
name|DELETED
condition|)
block|{
name|deletedPatchSets
operator|.
name|add
argument_list|(
name|psId
argument_list|)
expr_stmt|;
block|}
block|}
name|Account
operator|.
name|Id
name|accountId
init|=
name|parseIdent
argument_list|(
name|commit
argument_list|)
decl_stmt|;
if|if
condition|(
name|accountId
operator|!=
literal|null
condition|)
block|{
name|ownerId
operator|=
name|accountId
expr_stmt|;
block|}
if|if
condition|(
name|changeId
operator|==
literal|null
condition|)
block|{
name|changeId
operator|=
name|parseChangeId
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
name|String
name|currSubject
init|=
name|parseSubject
argument_list|(
name|commit
argument_list|)
decl_stmt|;
if|if
condition|(
name|currSubject
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|subject
operator|==
literal|null
condition|)
block|{
name|subject
operator|=
name|currSubject
expr_stmt|;
block|}
name|originalSubject
operator|=
name|currSubject
expr_stmt|;
block|}
name|parseChangeMessage
argument_list|(
name|psId
argument_list|,
name|accountId
argument_list|,
name|commit
argument_list|,
name|ts
argument_list|)
expr_stmt|;
if|if
condition|(
name|topic
operator|==
literal|null
condition|)
block|{
name|topic
operator|=
name|parseTopic
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
name|parseHashtags
argument_list|(
name|commit
argument_list|)
expr_stmt|;
if|if
condition|(
name|submissionId
operator|==
literal|null
condition|)
block|{
name|submissionId
operator|=
name|parseSubmissionId
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
name|ObjectId
name|currRev
init|=
name|parseRevision
argument_list|(
name|commit
argument_list|)
decl_stmt|;
if|if
condition|(
name|currRev
operator|!=
literal|null
condition|)
block|{
name|parsePatchSet
argument_list|(
name|psId
argument_list|,
name|currRev
argument_list|,
name|accountId
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
name|parseGroups
argument_list|(
name|psId
argument_list|,
name|commit
argument_list|)
expr_stmt|;
if|if
condition|(
name|submitRecords
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Only parse the most recent set of submit records; any older ones are
comment|// still there, but not currently used.
name|parseSubmitRecords
argument_list|(
name|commit
operator|.
name|getFooterLineValues
argument_list|(
name|FOOTER_SUBMITTED_WITH
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|line
range|:
name|commit
operator|.
name|getFooterLineValues
argument_list|(
name|FOOTER_LABEL
argument_list|)
control|)
block|{
name|parseApproval
argument_list|(
name|psId
argument_list|,
name|accountId
argument_list|,
name|ts
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ReviewerStateInternal
name|state
range|:
name|ReviewerStateInternal
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|line
range|:
name|commit
operator|.
name|getFooterLineValues
argument_list|(
name|state
operator|.
name|getFooterKey
argument_list|()
argument_list|)
control|)
block|{
name|parseReviewer
argument_list|(
name|ts
argument_list|,
name|state
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
comment|// Don't update timestamp when a reviewer was added, matching RevewDb
comment|// behavior.
block|}
if|if
condition|(
name|lastUpdatedOn
operator|==
literal|null
operator|||
name|ts
operator|.
name|after
argument_list|(
name|lastUpdatedOn
argument_list|)
condition|)
block|{
name|lastUpdatedOn
operator|=
name|ts
expr_stmt|;
block|}
block|}
DECL|method|parseSubmissionId (ChangeNotesCommit commit)
specifier|private
name|String
name|parseSubmissionId
parameter_list|(
name|ChangeNotesCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
return|return
name|parseOneFooter
argument_list|(
name|commit
argument_list|,
name|FOOTER_SUBMISSION_ID
argument_list|)
return|;
block|}
DECL|method|parseBranch (ChangeNotesCommit commit)
specifier|private
name|String
name|parseBranch
parameter_list|(
name|ChangeNotesCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|String
name|branch
init|=
name|parseOneFooter
argument_list|(
name|commit
argument_list|,
name|FOOTER_BRANCH
argument_list|)
decl_stmt|;
return|return
name|branch
operator|!=
literal|null
condition|?
name|RefNames
operator|.
name|fullName
argument_list|(
name|branch
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|parseChangeId (ChangeNotesCommit commit)
specifier|private
name|String
name|parseChangeId
parameter_list|(
name|ChangeNotesCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
return|return
name|parseOneFooter
argument_list|(
name|commit
argument_list|,
name|FOOTER_CHANGE_ID
argument_list|)
return|;
block|}
DECL|method|parseSubject (ChangeNotesCommit commit)
specifier|private
name|String
name|parseSubject
parameter_list|(
name|ChangeNotesCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
return|return
name|parseOneFooter
argument_list|(
name|commit
argument_list|,
name|FOOTER_SUBJECT
argument_list|)
return|;
block|}
DECL|method|parseTopic (ChangeNotesCommit commit)
specifier|private
name|String
name|parseTopic
parameter_list|(
name|ChangeNotesCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
return|return
name|parseOneFooter
argument_list|(
name|commit
argument_list|,
name|FOOTER_TOPIC
argument_list|)
return|;
block|}
DECL|method|parseOneFooter (ChangeNotesCommit commit, FooterKey footerKey)
specifier|private
name|String
name|parseOneFooter
parameter_list|(
name|ChangeNotesCommit
name|commit
parameter_list|,
name|FooterKey
name|footerKey
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|footerLines
init|=
name|commit
operator|.
name|getFooterLineValues
argument_list|(
name|footerKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|footerLines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|footerLines
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
name|expectedOneFooter
argument_list|(
name|footerKey
argument_list|,
name|footerLines
argument_list|)
throw|;
block|}
return|return
name|footerLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|parseExactlyOneFooter (ChangeNotesCommit commit, FooterKey footerKey)
specifier|private
name|String
name|parseExactlyOneFooter
parameter_list|(
name|ChangeNotesCommit
name|commit
parameter_list|,
name|FooterKey
name|footerKey
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|String
name|line
init|=
name|parseOneFooter
argument_list|(
name|commit
argument_list|,
name|footerKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
throw|throw
name|expectedOneFooter
argument_list|(
name|footerKey
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|line
return|;
block|}
DECL|method|parseRevision (ChangeNotesCommit commit)
specifier|private
name|ObjectId
name|parseRevision
parameter_list|(
name|ChangeNotesCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|String
name|sha
init|=
name|parseOneFooter
argument_list|(
name|commit
argument_list|,
name|FOOTER_COMMIT
argument_list|)
decl_stmt|;
if|if
condition|(
name|sha
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|ObjectId
operator|.
name|fromString
argument_list|(
name|sha
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectIdException
name|e
parameter_list|)
block|{
name|ConfigInvalidException
name|cie
init|=
name|invalidFooter
argument_list|(
name|FOOTER_COMMIT
argument_list|,
name|sha
argument_list|)
decl_stmt|;
name|cie
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|cie
throw|;
block|}
block|}
DECL|method|parsePatchSet (PatchSet.Id psId, ObjectId rev, Account.Id accountId, Timestamp ts)
specifier|private
name|void
name|parsePatchSet
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|ObjectId
name|rev
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Timestamp
name|ts
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
if|if
condition|(
name|accountId
operator|==
literal|null
condition|)
block|{
throw|throw
name|parseException
argument_list|(
literal|"patch set %s requires an identified user as uploader"
argument_list|,
name|psId
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
name|PatchSet
name|ps
init|=
name|patchSets
operator|.
name|get
argument_list|(
name|psId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
name|ps
operator|=
operator|new
name|PatchSet
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|patchSets
operator|.
name|put
argument_list|(
name|psId
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|equals
argument_list|(
name|PARTIAL_PATCH_SET
argument_list|)
condition|)
block|{
if|if
condition|(
name|deletedPatchSets
operator|.
name|contains
argument_list|(
name|psId
argument_list|)
condition|)
block|{
comment|// Do not update PS details as PS was deleted and this meta data is of
comment|// no relevance
return|return;
block|}
throw|throw
operator|new
name|ConfigInvalidException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Multiple revisions parsed for patch set %s: %s and %s"
argument_list|,
name|psId
operator|.
name|get
argument_list|()
argument_list|,
name|patchSets
operator|.
name|get
argument_list|(
name|psId
argument_list|)
operator|.
name|getRevision
argument_list|()
argument_list|,
name|rev
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|ps
operator|.
name|setRevision
argument_list|(
operator|new
name|RevId
argument_list|(
name|rev
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setUploader
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setCreatedOn
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
DECL|method|parseGroups (PatchSet.Id psId, ChangeNotesCommit commit)
specifier|private
name|void
name|parseGroups
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|ChangeNotesCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|String
name|groupsStr
init|=
name|parseOneFooter
argument_list|(
name|commit
argument_list|,
name|FOOTER_GROUPS
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupsStr
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|PatchSet
name|ps
init|=
name|patchSets
operator|.
name|get
argument_list|(
name|psId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
name|ps
operator|=
operator|new
name|PatchSet
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setRevision
argument_list|(
name|PARTIAL_PATCH_SET
argument_list|)
expr_stmt|;
name|patchSets
operator|.
name|put
argument_list|(
name|psId
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|ps
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|ps
operator|.
name|setGroups
argument_list|(
name|PatchSet
operator|.
name|splitGroups
argument_list|(
name|groupsStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|parseHashtags (ChangeNotesCommit commit)
specifier|private
name|void
name|parseHashtags
parameter_list|(
name|ChangeNotesCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
comment|// Commits are parsed in reverse order and only the last set of hashtags
comment|// should be used.
if|if
condition|(
name|hashtags
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|hashtagsLines
init|=
name|commit
operator|.
name|getFooterLineValues
argument_list|(
name|FOOTER_HASHTAGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|hashtagsLines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|hashtagsLines
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
name|expectedOneFooter
argument_list|(
name|FOOTER_HASHTAGS
argument_list|,
name|hashtagsLines
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|hashtagsLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hashtags
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|hashtags
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|split
argument_list|(
name|hashtagsLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseTag (ChangeNotesCommit commit)
specifier|private
name|void
name|parseTag
parameter_list|(
name|ChangeNotesCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|tag
operator|=
literal|null
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tagLines
init|=
name|commit
operator|.
name|getFooterLineValues
argument_list|(
name|FOOTER_TAG
argument_list|)
decl_stmt|;
if|if
condition|(
name|tagLines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|tagLines
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|tag
operator|=
name|tagLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|expectedOneFooter
argument_list|(
name|FOOTER_TAG
argument_list|,
name|tagLines
argument_list|)
throw|;
block|}
block|}
DECL|method|parseStatus (ChangeNotesCommit commit)
specifier|private
name|Change
operator|.
name|Status
name|parseStatus
parameter_list|(
name|ChangeNotesCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|statusLines
init|=
name|commit
operator|.
name|getFooterLineValues
argument_list|(
name|FOOTER_STATUS
argument_list|)
decl_stmt|;
if|if
condition|(
name|statusLines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|statusLines
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
name|expectedOneFooter
argument_list|(
name|FOOTER_STATUS
argument_list|,
name|statusLines
argument_list|)
throw|;
block|}
name|Optional
argument_list|<
name|Change
operator|.
name|Status
argument_list|>
name|status
init|=
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|class
argument_list|,
name|statusLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|status
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
name|invalidFooter
argument_list|(
name|FOOTER_STATUS
argument_list|,
name|statusLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|status
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|parsePatchSetId (ChangeNotesCommit commit)
specifier|private
name|PatchSet
operator|.
name|Id
name|parsePatchSetId
parameter_list|(
name|ChangeNotesCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|String
name|psIdLine
init|=
name|parseExactlyOneFooter
argument_list|(
name|commit
argument_list|,
name|FOOTER_PATCH_SET
argument_list|)
decl_stmt|;
name|int
name|s
init|=
name|psIdLine
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|String
name|psIdStr
init|=
name|s
operator|<
literal|0
condition|?
name|psIdLine
else|:
name|psIdLine
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|Integer
name|psId
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|psIdStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|psId
operator|==
literal|null
condition|)
block|{
throw|throw
name|invalidFooter
argument_list|(
name|FOOTER_PATCH_SET
argument_list|,
name|psIdStr
argument_list|)
throw|;
block|}
return|return
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|id
argument_list|,
name|psId
argument_list|)
return|;
block|}
DECL|method|parsePatchSetState (ChangeNotesCommit commit)
specifier|private
name|PatchSetState
name|parsePatchSetState
parameter_list|(
name|ChangeNotesCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|String
name|psIdLine
init|=
name|parseExactlyOneFooter
argument_list|(
name|commit
argument_list|,
name|FOOTER_PATCH_SET
argument_list|)
decl_stmt|;
name|int
name|s
init|=
name|psIdLine
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|withParens
init|=
name|psIdLine
operator|.
name|substring
argument_list|(
name|s
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|withParens
operator|.
name|startsWith
argument_list|(
literal|"("
argument_list|)
operator|&&
name|withParens
operator|.
name|endsWith
argument_list|(
literal|")"
argument_list|)
condition|)
block|{
name|Optional
argument_list|<
name|PatchSetState
argument_list|>
name|state
init|=
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|PatchSetState
operator|.
name|class
argument_list|,
name|withParens
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|withParens
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|state
operator|.
name|get
argument_list|()
return|;
block|}
block|}
throw|throw
name|invalidFooter
argument_list|(
name|FOOTER_PATCH_SET
argument_list|,
name|psIdLine
argument_list|)
throw|;
block|}
DECL|method|parseChangeMessage (PatchSet.Id psId, Account.Id accountId, ChangeNotesCommit commit, Timestamp ts)
specifier|private
name|void
name|parseChangeMessage
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|ChangeNotesCommit
name|commit
parameter_list|,
name|Timestamp
name|ts
parameter_list|)
block|{
name|byte
index|[]
name|raw
init|=
name|commit
operator|.
name|getRawBuffer
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|raw
operator|.
name|length
decl_stmt|;
name|Charset
name|enc
init|=
name|RawParseUtils
operator|.
name|parseEncoding
argument_list|(
name|raw
argument_list|)
decl_stmt|;
name|int
name|subjectStart
init|=
name|RawParseUtils
operator|.
name|commitMessage
argument_list|(
name|raw
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|subjectStart
operator|<
literal|0
operator|||
name|subjectStart
operator|>=
name|size
condition|)
block|{
return|return;
block|}
name|int
name|subjectEnd
init|=
name|RawParseUtils
operator|.
name|endOfParagraph
argument_list|(
name|raw
argument_list|,
name|subjectStart
argument_list|)
decl_stmt|;
if|if
condition|(
name|subjectEnd
operator|==
name|size
condition|)
block|{
return|return;
block|}
name|int
name|changeMessageStart
decl_stmt|;
if|if
condition|(
name|raw
index|[
name|subjectEnd
index|]
operator|==
literal|'\n'
condition|)
block|{
name|changeMessageStart
operator|=
name|subjectEnd
operator|+
literal|2
expr_stmt|;
comment|//\n\n ends paragraph
block|}
elseif|else
if|if
condition|(
name|raw
index|[
name|subjectEnd
index|]
operator|==
literal|'\r'
condition|)
block|{
name|changeMessageStart
operator|=
name|subjectEnd
operator|+
literal|4
expr_stmt|;
comment|//\r\n\r\n ends paragraph
block|}
else|else
block|{
return|return;
block|}
name|int
name|ptr
init|=
name|size
operator|-
literal|1
decl_stmt|;
name|int
name|changeMessageEnd
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|ptr
operator|>
name|changeMessageStart
condition|)
block|{
name|ptr
operator|=
name|RawParseUtils
operator|.
name|prevLF
argument_list|(
name|raw
argument_list|,
name|ptr
argument_list|,
literal|'\r'
argument_list|)
expr_stmt|;
if|if
condition|(
name|ptr
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|raw
index|[
name|ptr
index|]
operator|==
literal|'\n'
condition|)
block|{
name|changeMessageEnd
operator|=
name|ptr
operator|-
literal|1
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|raw
index|[
name|ptr
index|]
operator|==
literal|'\r'
condition|)
block|{
name|changeMessageEnd
operator|=
name|ptr
operator|-
literal|3
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|ptr
operator|<=
name|changeMessageStart
condition|)
block|{
return|return;
block|}
name|String
name|changeMsgString
init|=
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|enc
argument_list|,
name|raw
argument_list|,
name|changeMessageStart
argument_list|,
name|changeMessageEnd
operator|+
literal|1
argument_list|)
decl_stmt|;
name|ChangeMessage
name|changeMessage
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|psId
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|accountId
argument_list|,
name|ts
argument_list|,
name|psId
argument_list|)
decl_stmt|;
name|changeMessage
operator|.
name|setMessage
argument_list|(
name|changeMsgString
argument_list|)
expr_stmt|;
name|changeMessage
operator|.
name|setTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|changeMessagesByPatchSet
operator|.
name|put
argument_list|(
name|psId
argument_list|,
name|changeMessage
argument_list|)
expr_stmt|;
name|allChangeMessages
operator|.
name|add
argument_list|(
name|changeMessage
argument_list|)
expr_stmt|;
block|}
DECL|method|parseNotes ()
specifier|private
name|void
name|parseNotes
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ObjectReader
name|reader
init|=
name|walk
operator|.
name|getObjectReader
argument_list|()
decl_stmt|;
name|ChangeNotesCommit
name|tipCommit
init|=
name|walk
operator|.
name|parseCommit
argument_list|(
name|tip
argument_list|)
decl_stmt|;
name|revisionNoteMap
operator|=
name|RevisionNoteMap
operator|.
name|parse
argument_list|(
name|noteUtil
argument_list|,
name|id
argument_list|,
name|reader
argument_list|,
name|NoteMap
operator|.
name|read
argument_list|(
name|reader
argument_list|,
name|tipCommit
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|RevId
argument_list|,
name|RevisionNote
argument_list|>
name|rns
init|=
name|revisionNoteMap
operator|.
name|revisionNotes
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RevId
argument_list|,
name|RevisionNote
argument_list|>
name|e
range|:
name|rns
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|PatchLineComment
name|plc
range|:
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|comments
control|)
block|{
name|comments
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|plc
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|PatchSet
name|ps
range|:
name|patchSets
operator|.
name|values
argument_list|()
control|)
block|{
name|RevisionNote
name|rn
init|=
name|rns
operator|.
name|get
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rn
operator|!=
literal|null
operator|&&
name|rn
operator|.
name|pushCert
operator|!=
literal|null
condition|)
block|{
name|ps
operator|.
name|setPushCertificate
argument_list|(
name|rn
operator|.
name|pushCert
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseApproval (PatchSet.Id psId, Account.Id accountId, Timestamp ts, String line)
specifier|private
name|void
name|parseApproval
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Timestamp
name|ts
parameter_list|,
name|String
name|line
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
if|if
condition|(
name|accountId
operator|==
literal|null
condition|)
block|{
throw|throw
name|parseException
argument_list|(
literal|"patch set %s requires an identified user as uploader"
argument_list|,
name|psId
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|parseRemoveApproval
argument_list|(
name|psId
argument_list|,
name|accountId
argument_list|,
name|ts
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parseAddApproval
argument_list|(
name|psId
argument_list|,
name|accountId
argument_list|,
name|ts
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseAddApproval (PatchSet.Id psId, Account.Id committerId, Timestamp ts, String line)
specifier|private
name|void
name|parseAddApproval
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|Account
operator|.
name|Id
name|committerId
parameter_list|,
name|Timestamp
name|ts
parameter_list|,
name|String
name|line
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|Account
operator|.
name|Id
name|accountId
decl_stmt|;
name|String
name|labelVoteStr
decl_stmt|;
name|int
name|s
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|>
literal|0
condition|)
block|{
name|labelVoteStr
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|PersonIdent
name|ident
init|=
name|RawParseUtils
operator|.
name|parsePersonIdent
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|s
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|checkFooter
argument_list|(
name|ident
operator|!=
literal|null
argument_list|,
name|FOOTER_LABEL
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|accountId
operator|=
name|noteUtil
operator|.
name|parseIdent
argument_list|(
name|ident
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|labelVoteStr
operator|=
name|line
expr_stmt|;
name|accountId
operator|=
name|committerId
expr_stmt|;
block|}
name|LabelVote
name|l
decl_stmt|;
try|try
block|{
name|l
operator|=
name|LabelVote
operator|.
name|parseWithEquals
argument_list|(
name|labelVoteStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|ConfigInvalidException
name|pe
init|=
name|parseException
argument_list|(
literal|"invalid %s: %s"
argument_list|,
name|FOOTER_LABEL
argument_list|,
name|line
argument_list|)
decl_stmt|;
name|pe
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|pe
throw|;
block|}
name|PatchSetApproval
name|psa
init|=
operator|new
name|PatchSetApproval
argument_list|(
operator|new
name|PatchSetApproval
operator|.
name|Key
argument_list|(
name|psId
argument_list|,
name|accountId
argument_list|,
operator|new
name|LabelId
argument_list|(
name|l
operator|.
name|label
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|l
operator|.
name|value
argument_list|()
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|psa
operator|.
name|setTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|ApprovalKey
name|k
init|=
name|ApprovalKey
operator|.
name|create
argument_list|(
name|psId
argument_list|,
name|accountId
argument_list|,
name|l
operator|.
name|label
argument_list|()
argument_list|,
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|approvals
operator|.
name|containsKey
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|approvals
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|psa
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseRemoveApproval (PatchSet.Id psId, Account.Id committerId, Timestamp ts, String line)
specifier|private
name|void
name|parseRemoveApproval
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|Account
operator|.
name|Id
name|committerId
parameter_list|,
name|Timestamp
name|ts
parameter_list|,
name|String
name|line
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|Account
operator|.
name|Id
name|accountId
decl_stmt|;
name|String
name|label
decl_stmt|;
name|int
name|s
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|>
literal|0
condition|)
block|{
name|label
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|PersonIdent
name|ident
init|=
name|RawParseUtils
operator|.
name|parsePersonIdent
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|s
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|checkFooter
argument_list|(
name|ident
operator|!=
literal|null
argument_list|,
name|FOOTER_LABEL
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|accountId
operator|=
name|noteUtil
operator|.
name|parseIdent
argument_list|(
name|ident
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|label
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|accountId
operator|=
name|committerId
expr_stmt|;
block|}
try|try
block|{
name|LabelType
operator|.
name|checkNameInternal
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|ConfigInvalidException
name|pe
init|=
name|parseException
argument_list|(
literal|"invalid %s: %s"
argument_list|,
name|FOOTER_LABEL
argument_list|,
name|line
argument_list|)
decl_stmt|;
name|pe
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|pe
throw|;
block|}
comment|// Store an actual 0-vote approval in the map for a removed approval, for
comment|// several reasons:
comment|//  - This is closer to the ReviewDb representation, which leads to less
comment|//    confusion and special-casing of NoteDb.
comment|//  - More importantly, ApprovalCopier needs an actual approval in order to
comment|//    block copying an earlier approval over a later delete.
name|PatchSetApproval
name|remove
init|=
operator|new
name|PatchSetApproval
argument_list|(
operator|new
name|PatchSetApproval
operator|.
name|Key
argument_list|(
name|psId
argument_list|,
name|accountId
argument_list|,
operator|new
name|LabelId
argument_list|(
name|label
argument_list|)
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|ApprovalKey
name|k
init|=
name|ApprovalKey
operator|.
name|create
argument_list|(
name|psId
argument_list|,
name|accountId
argument_list|,
name|label
argument_list|,
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|approvals
operator|.
name|containsKey
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|approvals
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|remove
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseSubmitRecords (List<String> lines)
specifier|private
name|void
name|parseSubmitRecords
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|lines
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|SubmitRecord
name|rec
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|int
name|c
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|": "
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
name|rec
operator|=
operator|new
name|SubmitRecord
argument_list|()
expr_stmt|;
name|submitRecords
operator|.
name|add
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|int
name|s
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|String
name|statusStr
init|=
name|s
operator|>=
literal|0
condition|?
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
argument_list|)
else|:
name|line
decl_stmt|;
name|Optional
argument_list|<
name|SubmitRecord
operator|.
name|Status
argument_list|>
name|status
init|=
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|SubmitRecord
operator|.
name|Status
operator|.
name|class
argument_list|,
name|statusStr
argument_list|)
decl_stmt|;
name|checkFooter
argument_list|(
name|status
operator|.
name|isPresent
argument_list|()
argument_list|,
name|FOOTER_SUBMITTED_WITH
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|rec
operator|.
name|status
operator|=
name|status
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|>=
literal|0
condition|)
block|{
name|rec
operator|.
name|errorMessage
operator|=
name|line
operator|.
name|substring
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|checkFooter
argument_list|(
name|rec
operator|!=
literal|null
argument_list|,
name|FOOTER_SUBMITTED_WITH
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|SubmitRecord
operator|.
name|Label
name|label
init|=
operator|new
name|SubmitRecord
operator|.
name|Label
argument_list|()
decl_stmt|;
if|if
condition|(
name|rec
operator|.
name|labels
operator|==
literal|null
condition|)
block|{
name|rec
operator|.
name|labels
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|rec
operator|.
name|labels
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
argument_list|>
name|status
init|=
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
operator|.
name|class
argument_list|,
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|checkFooter
argument_list|(
name|status
operator|.
name|isPresent
argument_list|()
argument_list|,
name|FOOTER_SUBMITTED_WITH
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|label
operator|.
name|status
operator|=
name|status
operator|.
name|get
argument_list|()
expr_stmt|;
name|int
name|c2
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|": "
argument_list|,
name|c
operator|+
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|c2
operator|>=
literal|0
condition|)
block|{
name|label
operator|.
name|label
operator|=
name|line
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|2
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|PersonIdent
name|ident
init|=
name|RawParseUtils
operator|.
name|parsePersonIdent
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|c2
operator|+
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|checkFooter
argument_list|(
name|ident
operator|!=
literal|null
argument_list|,
name|FOOTER_SUBMITTED_WITH
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|label
operator|.
name|appliedBy
operator|=
name|noteUtil
operator|.
name|parseIdent
argument_list|(
name|ident
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|label
operator|.
name|label
operator|=
name|line
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|parseIdent (ChangeNotesCommit commit)
specifier|private
name|Account
operator|.
name|Id
name|parseIdent
parameter_list|(
name|ChangeNotesCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
comment|// Check if the author name/email is the same as the committer name/email,
comment|// i.e. was the server ident at the time this commit was made.
name|PersonIdent
name|a
init|=
name|commit
operator|.
name|getAuthorIdent
argument_list|()
decl_stmt|;
name|PersonIdent
name|c
init|=
name|commit
operator|.
name|getCommitterIdent
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|a
operator|.
name|getEmailAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|noteUtil
operator|.
name|parseIdent
argument_list|(
name|commit
operator|.
name|getAuthorIdent
argument_list|()
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|parseReviewer (Timestamp ts, ReviewerStateInternal state, String line)
specifier|private
name|void
name|parseReviewer
parameter_list|(
name|Timestamp
name|ts
parameter_list|,
name|ReviewerStateInternal
name|state
parameter_list|,
name|String
name|line
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|PersonIdent
name|ident
init|=
name|RawParseUtils
operator|.
name|parsePersonIdent
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|ident
operator|==
literal|null
condition|)
block|{
throw|throw
name|invalidFooter
argument_list|(
name|state
operator|.
name|getFooterKey
argument_list|()
argument_list|,
name|line
argument_list|)
throw|;
block|}
name|Account
operator|.
name|Id
name|accountId
init|=
name|noteUtil
operator|.
name|parseIdent
argument_list|(
name|ident
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|reviewerUpdates
operator|.
name|add
argument_list|(
name|ReviewerStatusUpdate
operator|.
name|create
argument_list|(
name|ts
argument_list|,
name|ownerId
argument_list|,
name|accountId
argument_list|,
name|state
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reviewers
operator|.
name|containsRow
argument_list|(
name|accountId
argument_list|)
condition|)
block|{
name|reviewers
operator|.
name|put
argument_list|(
name|accountId
argument_list|,
name|state
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|pruneReviewers ()
specifier|private
name|void
name|pruneReviewers
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Table
operator|.
name|Cell
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ReviewerStateInternal
argument_list|,
name|Timestamp
argument_list|>
argument_list|>
name|rit
init|=
name|reviewers
operator|.
name|cellSet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|rit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Table
operator|.
name|Cell
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ReviewerStateInternal
argument_list|,
name|Timestamp
argument_list|>
name|e
init|=
name|rit
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getColumnKey
argument_list|()
operator|==
name|ReviewerStateInternal
operator|.
name|REMOVED
condition|)
block|{
name|rit
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|updatePatchSetStates ()
specifier|private
name|void
name|updatePatchSetStates
parameter_list|()
throws|throws
name|ConfigInvalidException
block|{
for|for
control|(
name|PatchSet
name|ps
range|:
name|patchSets
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|equals
argument_list|(
name|PARTIAL_PATCH_SET
argument_list|)
condition|)
block|{
throw|throw
name|parseException
argument_list|(
literal|"No %s found for patch set %s"
argument_list|,
name|FOOTER_COMMIT
argument_list|,
name|ps
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|patchSetStates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|deleted
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetState
argument_list|>
name|e
range|:
name|patchSetStates
operator|.
name|entrySet
argument_list|()
control|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|PUBLISHED
case|:
default|default:
break|break;
case|case
name|DELETED
case|:
name|deleted
operator|=
literal|true
expr_stmt|;
name|patchSets
operator|.
name|remove
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DRAFT
case|:
name|PatchSet
name|ps
init|=
name|patchSets
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
block|{
name|ps
operator|.
name|setDraft
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
return|return;
block|}
comment|// Post-process other collections to remove items corresponding to deleted
comment|// patch sets. This is safer than trying to prevent insertion, as it will
comment|// also filter out items racily added after the patch set was deleted.
comment|//
comment|// Approvals are filtered in buildApprovals().
name|NavigableSet
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|all
init|=
name|patchSets
operator|.
name|navigableKeySet
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|all
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|currentPatchSetId
operator|=
name|all
operator|.
name|last
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|currentPatchSetId
operator|=
literal|null
expr_stmt|;
block|}
name|changeMessagesByPatchSet
operator|.
name|keys
argument_list|()
operator|.
name|retainAll
argument_list|(
name|all
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ChangeMessage
argument_list|>
name|it
init|=
name|allChangeMessages
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|all
operator|.
name|contains
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|PatchLineComment
argument_list|>
name|it
init|=
name|comments
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|all
operator|.
name|contains
argument_list|(
name|psId
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkMandatoryFooters ()
specifier|private
name|void
name|checkMandatoryFooters
parameter_list|()
throws|throws
name|ConfigInvalidException
block|{
name|List
argument_list|<
name|FooterKey
argument_list|>
name|missing
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
name|missing
operator|.
name|add
argument_list|(
name|FOOTER_BRANCH
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|changeId
operator|==
literal|null
condition|)
block|{
name|missing
operator|.
name|add
argument_list|(
name|FOOTER_CHANGE_ID
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|originalSubject
operator|==
literal|null
operator|||
name|subject
operator|==
literal|null
condition|)
block|{
name|missing
operator|.
name|add
argument_list|(
name|FOOTER_SUBJECT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|missing
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|parseException
argument_list|(
literal|"Missing footers: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|missing
argument_list|,
operator|new
name|Function
argument_list|<
name|FooterKey
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|FooterKey
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|expectedOneFooter (FooterKey footer, List<String> actual)
specifier|private
name|ConfigInvalidException
name|expectedOneFooter
parameter_list|(
name|FooterKey
name|footer
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|actual
parameter_list|)
block|{
return|return
name|parseException
argument_list|(
literal|"missing or multiple %s: %s"
argument_list|,
name|footer
operator|.
name|getName
argument_list|()
argument_list|,
name|actual
argument_list|)
return|;
block|}
DECL|method|invalidFooter (FooterKey footer, String actual)
specifier|private
name|ConfigInvalidException
name|invalidFooter
parameter_list|(
name|FooterKey
name|footer
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
return|return
name|parseException
argument_list|(
literal|"invalid %s: %s"
argument_list|,
name|footer
operator|.
name|getName
argument_list|()
argument_list|,
name|actual
argument_list|)
return|;
block|}
DECL|method|checkFooter (boolean expr, FooterKey footer, String actual)
specifier|private
name|void
name|checkFooter
parameter_list|(
name|boolean
name|expr
parameter_list|,
name|FooterKey
name|footer
parameter_list|,
name|String
name|actual
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
if|if
condition|(
operator|!
name|expr
condition|)
block|{
throw|throw
name|invalidFooter
argument_list|(
name|footer
argument_list|,
name|actual
argument_list|)
throw|;
block|}
block|}
DECL|method|parseException (String fmt, Object... args)
specifier|private
name|ConfigInvalidException
name|parseException
parameter_list|(
name|String
name|fmt
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|ChangeNotes
operator|.
name|parseException
argument_list|(
name|id
argument_list|,
name|fmt
argument_list|,
name|args
argument_list|)
return|;
block|}
block|}
end_class

end_unit

