begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git.gpg
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|gpg
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|gpg
operator|.
name|PublicKeyStore
operator|.
name|keyIdToString
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|gpg
operator|.
name|PublicKeyStore
operator|.
name|keyToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignature
operator|.
name|CERTIFICATION_REVOCATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignature
operator|.
name|DEFAULT_CERTIFICATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignature
operator|.
name|POSITIVE_CERTIFICATION
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|operator
operator|.
name|bc
operator|.
name|BcPGPContentVerifierBuilderProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Checker for GPG public keys for use in a push certificate. */
end_comment

begin_class
DECL|class|PublicKeyChecker
specifier|public
class|class
name|PublicKeyChecker
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PublicKeyChecker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Check a public key.    *    * @param key the public key.    * @param expectedKeyId the key ID that the caller expects.    * @param expectedUserId a user ID that the caller expects to be present and    *     correct.    */
DECL|method|check (PGPPublicKey key, long expectedKeyId, String expectedUserId)
specifier|public
specifier|final
name|CheckResult
name|check
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|,
name|long
name|expectedKeyId
parameter_list|,
name|String
name|expectedUserId
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|problems
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|getKeyID
argument_list|()
operator|!=
name|expectedKeyId
condition|)
block|{
name|problems
operator|.
name|add
argument_list|(
literal|"Public key does not match ID "
operator|+
name|keyIdToString
argument_list|(
name|expectedKeyId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|.
name|isRevoked
argument_list|()
condition|)
block|{
comment|// TODO(dborowitz): isRevoked is overeager:
comment|// http://www.bouncycastle.org/jira/browse/BJB-45
name|problems
operator|.
name|add
argument_list|(
literal|"Key is revoked"
argument_list|)
expr_stmt|;
block|}
name|long
name|validSecs
init|=
name|key
operator|.
name|getValidSeconds
argument_list|()
decl_stmt|;
if|if
condition|(
name|validSecs
operator|!=
literal|0
condition|)
block|{
name|long
name|createdSecs
init|=
name|key
operator|.
name|getCreationTime
argument_list|()
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|long
name|nowSecs
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
if|if
condition|(
name|nowSecs
operator|-
name|createdSecs
operator|>
name|validSecs
condition|)
block|{
name|problems
operator|.
name|add
argument_list|(
literal|"Key is expired"
argument_list|)
expr_stmt|;
block|}
block|}
name|checkCertifications
argument_list|(
name|key
argument_list|,
name|expectedUserId
argument_list|,
name|problems
argument_list|)
expr_stmt|;
name|checkCustom
argument_list|(
name|key
argument_list|,
name|expectedKeyId
argument_list|,
name|expectedUserId
argument_list|,
name|problems
argument_list|)
expr_stmt|;
return|return
operator|new
name|CheckResult
argument_list|(
name|problems
argument_list|)
return|;
block|}
comment|/**    * Perform custom checks.    *<p>    * Default implementation does nothing, but may be overridden by subclasses.    *    * @param key the public key.    * @param expectedKeyId the key ID that the caller expects.    * @param expectedUserId a user ID that the caller expects to be present and    *     correct.    * @param problems list to which any problems should be added.    */
DECL|method|checkCustom (PGPPublicKey key, long expectedKeyId, String expectedUserId, List<String> problems)
specifier|public
name|void
name|checkCustom
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|,
name|long
name|expectedKeyId
parameter_list|,
name|String
name|expectedUserId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|problems
parameter_list|)
block|{
comment|// Default implementation does nothing.
block|}
comment|// TODO(dborowitz): Remove some/all of these checks.
DECL|method|checkCertifications (PGPPublicKey key, String userId, List<String> problems)
specifier|private
specifier|static
name|void
name|checkCertifications
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|,
name|String
name|userId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|problems
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|PGPSignature
argument_list|>
name|sigs
init|=
name|key
operator|.
name|getSignaturesForID
argument_list|(
name|userId
argument_list|)
decl_stmt|;
if|if
condition|(
name|sigs
operator|==
literal|null
condition|)
block|{
name|sigs
operator|=
name|Collections
operator|.
name|emptyIterator
argument_list|()
expr_stmt|;
block|}
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
name|boolean
name|revoked
init|=
literal|false
decl_stmt|;
try|try
block|{
while|while
condition|(
name|sigs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PGPSignature
name|sig
init|=
name|sigs
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|sig
operator|.
name|getKeyID
argument_list|()
operator|!=
name|key
operator|.
name|getKeyID
argument_list|()
condition|)
block|{
comment|// TODO(dborowitz): Support certifications by other trusted keys?
continue|continue;
block|}
elseif|else
if|if
condition|(
name|sig
operator|.
name|getSignatureType
argument_list|()
operator|!=
name|DEFAULT_CERTIFICATION
operator|&&
name|sig
operator|.
name|getSignatureType
argument_list|()
operator|!=
name|POSITIVE_CERTIFICATION
operator|&&
name|sig
operator|.
name|getSignatureType
argument_list|()
operator|!=
name|CERTIFICATION_REVOCATION
condition|)
block|{
continue|continue;
block|}
name|sig
operator|.
name|init
argument_list|(
operator|new
name|BcPGPContentVerifierBuilderProvider
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|sig
operator|.
name|verifyCertification
argument_list|(
name|userId
argument_list|,
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
name|sig
operator|.
name|getSignatureType
argument_list|()
operator|==
name|CERTIFICATION_REVOCATION
condition|)
block|{
name|revoked
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|problems
operator|.
name|add
argument_list|(
literal|"Invalid signature for User ID "
operator|+
name|userId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|PGPException
name|e
parameter_list|)
block|{
name|problems
operator|.
name|add
argument_list|(
literal|"Error in certifications"
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Error in certification verification for public key: "
operator|+
name|keyToString
argument_list|(
name|key
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|revoked
condition|)
block|{
name|problems
operator|.
name|add
argument_list|(
literal|"User ID "
operator|+
name|userId
operator|+
literal|" is revoked"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|problems
operator|.
name|add
argument_list|(
literal|"No certification for User ID "
operator|+
name|userId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

