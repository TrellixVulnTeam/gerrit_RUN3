begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.securestore
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|securestore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|file
operator|.
name|LockFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|storage
operator|.
name|file
operator|.
name|FileBasedConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|FS
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|DefaultSecureStore
specifier|public
class|class
name|DefaultSecureStore
extends|extends
name|SecureStore
block|{
DECL|field|sec
specifier|private
specifier|final
name|FileBasedConfig
name|sec
decl_stmt|;
DECL|field|pluginSec
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FileBasedConfig
argument_list|>
name|pluginSec
decl_stmt|;
DECL|field|site
specifier|private
specifier|final
name|SitePaths
name|site
decl_stmt|;
annotation|@
name|Inject
DECL|method|DefaultSecureStore (SitePaths site)
name|DefaultSecureStore
parameter_list|(
name|SitePaths
name|site
parameter_list|)
block|{
name|this
operator|.
name|site
operator|=
name|site
expr_stmt|;
name|sec
operator|=
operator|new
name|FileBasedConfig
argument_list|(
name|site
operator|.
name|secure_config
operator|.
name|toFile
argument_list|()
argument_list|,
name|FS
operator|.
name|DETECTED
argument_list|)
expr_stmt|;
try|try
block|{
name|sec
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot load secure.config"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|pluginSec
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getList (String section, String subsection, String name)
specifier|public
name|String
index|[]
name|getList
parameter_list|(
name|String
name|section
parameter_list|,
name|String
name|subsection
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|sec
operator|.
name|getStringList
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getListForPlugin ( String pluginName, String section, String subsection, String name)
specifier|public
specifier|synchronized
name|String
index|[]
name|getListForPlugin
parameter_list|(
name|String
name|pluginName
parameter_list|,
name|String
name|section
parameter_list|,
name|String
name|subsection
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|FileBasedConfig
name|cfg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pluginSec
operator|.
name|containsKey
argument_list|(
name|pluginName
argument_list|)
condition|)
block|{
name|cfg
operator|=
name|pluginSec
operator|.
name|get
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|filename
init|=
name|pluginName
operator|+
literal|".secure.config"
decl_stmt|;
name|File
name|pluginConfigFile
init|=
name|site
operator|.
name|etc_dir
operator|.
name|resolve
argument_list|(
name|filename
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|pluginConfigFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|cfg
operator|=
operator|new
name|FileBasedConfig
argument_list|(
name|pluginConfigFile
argument_list|,
name|FS
operator|.
name|DETECTED
argument_list|)
expr_stmt|;
try|try
block|{
name|cfg
operator|.
name|load
argument_list|()
expr_stmt|;
name|pluginSec
operator|.
name|put
argument_list|(
name|pluginName
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot load "
operator|+
name|filename
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|cfg
operator|!=
literal|null
condition|?
name|cfg
operator|.
name|getStringList
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|name
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setList (String section, String subsection, String name, List<String> values)
specifier|public
name|void
name|setList
parameter_list|(
name|String
name|section
parameter_list|,
name|String
name|subsection
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|sec
operator|.
name|setStringList
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|name
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sec
operator|.
name|unset
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unset (String section, String subsection, String name)
specifier|public
name|void
name|unset
parameter_list|(
name|String
name|section
parameter_list|,
name|String
name|subsection
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|sec
operator|.
name|unset
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|list ()
specifier|public
name|Iterable
argument_list|<
name|EntryKey
argument_list|>
name|list
parameter_list|()
block|{
name|List
argument_list|<
name|EntryKey
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|section
range|:
name|sec
operator|.
name|getSections
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|subsection
range|:
name|sec
operator|.
name|getSubsections
argument_list|(
name|section
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|name
range|:
name|sec
operator|.
name|getNames
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|)
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|EntryKey
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|name
range|:
name|sec
operator|.
name|getNames
argument_list|(
name|section
argument_list|)
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|EntryKey
argument_list|(
name|section
argument_list|,
literal|null
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|save ()
specifier|private
name|void
name|save
parameter_list|()
block|{
try|try
block|{
name|saveSecure
argument_list|(
name|sec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot save secure.config"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|saveSecure (final FileBasedConfig sec)
specifier|private
specifier|static
name|void
name|saveSecure
parameter_list|(
specifier|final
name|FileBasedConfig
name|sec
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|FileUtil
operator|.
name|modified
argument_list|(
name|sec
argument_list|)
condition|)
block|{
specifier|final
name|byte
index|[]
name|out
init|=
name|Constants
operator|.
name|encode
argument_list|(
name|sec
operator|.
name|toText
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|File
name|path
init|=
name|sec
operator|.
name|getFile
argument_list|()
decl_stmt|;
specifier|final
name|LockFile
name|lf
init|=
operator|new
name|LockFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lf
operator|.
name|lock
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot lock "
operator|+
name|path
argument_list|)
throw|;
block|}
try|try
block|{
name|FileUtil
operator|.
name|chmod
argument_list|(
literal|0600
argument_list|,
operator|new
name|File
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|path
operator|.
name|getName
argument_list|()
operator|+
literal|".lock"
argument_list|)
argument_list|)
expr_stmt|;
name|lf
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lf
operator|.
name|commit
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot commit write to "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|lf
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

