begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubscribeSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|SubmoduleSubscription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|VerboseSuperprojectUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|BatchUpdate
operator|.
name|Listener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|BatchUpdate
operator|.
name|RepoContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MergeOpRepoManager
operator|.
name|OpenRepo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|AssistedInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheEditor
operator|.
name|DeletePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheEditor
operator|.
name|PathEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|FileMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RefSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|SubmoduleOp
specifier|public
class|class
name|SubmoduleOp
block|{
comment|/**    * Only used for branches without code review changes    */
DECL|class|GitlinkOp
specifier|public
class|class
name|GitlinkOp
extends|extends
name|BatchUpdate
operator|.
name|RepoOnlyOp
block|{
DECL|field|branch
specifier|private
specifier|final
name|Branch
operator|.
name|NameKey
name|branch
decl_stmt|;
DECL|method|GitlinkOp (Branch.NameKey branch)
name|GitlinkOp
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
block|{
name|this
operator|.
name|branch
operator|=
name|branch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateRepo (RepoContext ctx)
specifier|public
name|void
name|updateRepo
parameter_list|(
name|RepoContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|CodeReviewCommit
name|c
init|=
name|composeGitlinksCommit
argument_list|(
name|branch
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|addRefUpdate
argument_list|(
operator|new
name|ReceiveCommand
argument_list|(
name|c
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|,
name|c
argument_list|,
name|branch
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addBranchTip
argument_list|(
name|branch
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create ( Set<Branch.NameKey> updatedBranches, MergeOpRepoManager orm)
name|SubmoduleOp
name|create
parameter_list|(
name|Set
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|updatedBranches
parameter_list|,
name|MergeOpRepoManager
name|orm
parameter_list|)
function_decl|;
block|}
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SubmoduleOp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|gitmodulesFactory
specifier|private
specifier|final
name|GitModules
operator|.
name|Factory
name|gitmodulesFactory
decl_stmt|;
DECL|field|myIdent
specifier|private
specifier|final
name|PersonIdent
name|myIdent
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|projectStateFactory
specifier|private
specifier|final
name|ProjectState
operator|.
name|Factory
name|projectStateFactory
decl_stmt|;
DECL|field|verboseSuperProject
specifier|private
specifier|final
name|VerboseSuperprojectUpdate
name|verboseSuperProject
decl_stmt|;
DECL|field|enableSuperProjectSubscriptions
specifier|private
specifier|final
name|boolean
name|enableSuperProjectSubscriptions
decl_stmt|;
DECL|field|targets
specifier|private
specifier|final
name|Multimap
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|SubmoduleSubscription
argument_list|>
name|targets
decl_stmt|;
DECL|field|updatedBranches
specifier|private
specifier|final
name|Set
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|updatedBranches
decl_stmt|;
DECL|field|orm
specifier|private
specifier|final
name|MergeOpRepoManager
name|orm
decl_stmt|;
DECL|field|branchTips
specifier|private
specifier|final
name|Map
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|CodeReviewCommit
argument_list|>
name|branchTips
decl_stmt|;
DECL|field|branchGitModules
specifier|private
specifier|final
name|Map
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|GitModules
argument_list|>
name|branchGitModules
decl_stmt|;
DECL|field|sortedBranches
specifier|private
specifier|final
name|ImmutableSet
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|sortedBranches
decl_stmt|;
annotation|@
name|AssistedInject
DECL|method|SubmoduleOp ( GitModules.Factory gitmodulesFactory, @GerritPersonIdent PersonIdent myIdent, @GerritServerConfig Config cfg, ProjectCache projectCache, ProjectState.Factory projectStateFactory, @Assisted Set<Branch.NameKey> updatedBranches, @Assisted MergeOpRepoManager orm)
specifier|public
name|SubmoduleOp
parameter_list|(
name|GitModules
operator|.
name|Factory
name|gitmodulesFactory
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|myIdent
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|ProjectState
operator|.
name|Factory
name|projectStateFactory
parameter_list|,
annotation|@
name|Assisted
name|Set
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|updatedBranches
parameter_list|,
annotation|@
name|Assisted
name|MergeOpRepoManager
name|orm
parameter_list|)
throws|throws
name|SubmoduleException
block|{
name|this
operator|.
name|gitmodulesFactory
operator|=
name|gitmodulesFactory
expr_stmt|;
name|this
operator|.
name|myIdent
operator|=
name|myIdent
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|projectStateFactory
operator|=
name|projectStateFactory
expr_stmt|;
name|this
operator|.
name|verboseSuperProject
operator|=
name|cfg
operator|.
name|getEnum
argument_list|(
literal|"submodule"
argument_list|,
literal|null
argument_list|,
literal|"verboseSuperprojectUpdate"
argument_list|,
name|VerboseSuperprojectUpdate
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|enableSuperProjectSubscriptions
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"submodule"
argument_list|,
literal|"enableSuperProjectSubscriptions"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|orm
operator|=
name|orm
expr_stmt|;
name|this
operator|.
name|updatedBranches
operator|=
name|updatedBranches
expr_stmt|;
name|this
operator|.
name|targets
operator|=
name|HashMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
name|this
operator|.
name|branchTips
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|branchGitModules
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|sortedBranches
operator|=
name|calculateSubscriptionMap
argument_list|()
expr_stmt|;
block|}
DECL|method|calculateSubscriptionMap ()
specifier|private
name|ImmutableSet
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|calculateSubscriptionMap
parameter_list|()
throws|throws
name|SubmoduleException
block|{
if|if
condition|(
operator|!
name|enableSuperProjectSubscriptions
condition|)
block|{
name|logDebug
argument_list|(
literal|"Updating superprojects disabled"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|logDebug
argument_list|(
literal|"Calculating superprojects - submodules map"
argument_list|)
expr_stmt|;
name|LinkedHashSet
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|allVisited
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Branch
operator|.
name|NameKey
name|updatedBranch
range|:
name|updatedBranches
control|)
block|{
if|if
condition|(
name|allVisited
operator|.
name|contains
argument_list|(
name|updatedBranch
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|searchForSuperprojects
argument_list|(
name|updatedBranch
argument_list|,
operator|new
name|LinkedHashSet
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
argument_list|()
argument_list|,
name|allVisited
argument_list|)
expr_stmt|;
block|}
comment|// Since the searchForSuperprojects will add the superprojects before one
comment|// submodule in sortedBranches, need reverse the order of it
name|reverse
argument_list|(
name|allVisited
argument_list|)
expr_stmt|;
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|allVisited
argument_list|)
return|;
block|}
DECL|method|searchForSuperprojects (Branch.NameKey current, LinkedHashSet<Branch.NameKey> currentVisited, LinkedHashSet<Branch.NameKey> allVisited)
specifier|private
name|void
name|searchForSuperprojects
parameter_list|(
name|Branch
operator|.
name|NameKey
name|current
parameter_list|,
name|LinkedHashSet
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|currentVisited
parameter_list|,
name|LinkedHashSet
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|allVisited
parameter_list|)
throws|throws
name|SubmoduleException
block|{
name|logDebug
argument_list|(
literal|"Now processing "
operator|+
name|current
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentVisited
operator|.
name|contains
argument_list|(
name|current
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SubmoduleException
argument_list|(
literal|"Branch level circular subscriptions detected:  "
operator|+
name|printCircularPath
argument_list|(
name|currentVisited
argument_list|,
name|current
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|allVisited
operator|.
name|contains
argument_list|(
name|current
argument_list|)
condition|)
block|{
return|return;
block|}
name|currentVisited
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
try|try
block|{
name|Collection
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|subscriptions
init|=
name|superProjectSubscriptionsForSubmoduleBranch
argument_list|(
name|current
argument_list|)
decl_stmt|;
for|for
control|(
name|SubmoduleSubscription
name|sub
range|:
name|subscriptions
control|)
block|{
name|Branch
operator|.
name|NameKey
name|superProject
init|=
name|sub
operator|.
name|getSuperProject
argument_list|()
decl_stmt|;
name|searchForSuperprojects
argument_list|(
name|superProject
argument_list|,
name|currentVisited
argument_list|,
name|allVisited
argument_list|)
expr_stmt|;
name|targets
operator|.
name|put
argument_list|(
name|superProject
argument_list|,
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SubmoduleException
argument_list|(
literal|"Cannot find superprojects for "
operator|+
name|current
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|currentVisited
operator|.
name|remove
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|allVisited
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
DECL|method|reverse (LinkedHashSet<T> set)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|reverse
parameter_list|(
name|LinkedHashSet
argument_list|<
name|T
argument_list|>
name|set
parameter_list|)
block|{
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Deque
argument_list|<
name|T
argument_list|>
name|q
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|(
name|set
argument_list|)
decl_stmt|;
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|q
operator|.
name|removeLast
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printCircularPath (LinkedHashSet<T> p, T target)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|String
name|printCircularPath
parameter_list|(
name|LinkedHashSet
argument_list|<
name|T
argument_list|>
name|p
parameter_list|,
name|T
name|target
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|T
argument_list|>
name|reverseP
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|reverseP
argument_list|)
expr_stmt|;
for|for
control|(
name|T
name|t
range|:
name|reverseP
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"->"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getDestinationBranches (Branch.NameKey src, SubscribeSection s)
specifier|private
name|Collection
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|getDestinationBranches
parameter_list|(
name|Branch
operator|.
name|NameKey
name|src
parameter_list|,
name|SubscribeSection
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|ret
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|logDebug
argument_list|(
literal|"Inspecting SubscribeSection "
operator|+
name|s
argument_list|)
expr_stmt|;
for|for
control|(
name|RefSpec
name|r
range|:
name|s
operator|.
name|getMatchingRefSpecs
argument_list|()
control|)
block|{
name|logDebug
argument_list|(
literal|"Inspecting [matching] ref "
operator|+
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|matchSource
argument_list|(
name|src
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|r
operator|.
name|isWildcard
argument_list|()
condition|)
block|{
comment|// refs/heads/*[:refs/somewhere/*]
name|ret
operator|.
name|add
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|s
operator|.
name|getProject
argument_list|()
argument_list|,
name|r
operator|.
name|expandFromSource
argument_list|(
name|src
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getDestination
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// e.g. refs/heads/master[:refs/heads/stable]
name|String
name|dest
init|=
name|r
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
block|{
name|dest
operator|=
name|r
operator|.
name|getSource
argument_list|()
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|s
operator|.
name|getProject
argument_list|()
argument_list|,
name|dest
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RefSpec
name|r
range|:
name|s
operator|.
name|getMultiMatchRefSpecs
argument_list|()
control|)
block|{
name|logDebug
argument_list|(
literal|"Inspecting [all] ref "
operator|+
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|matchSource
argument_list|(
name|src
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|OpenRepo
name|or
decl_stmt|;
try|try
block|{
name|or
operator|=
name|orm
operator|.
name|openRepo
argument_list|(
name|s
operator|.
name|getProject
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|e
parameter_list|)
block|{
comment|// A project listed a non existent project to be allowed
comment|// to subscribe to it. Allow this for now, i.e. no exception is
comment|// thrown.
continue|continue;
block|}
for|for
control|(
name|Ref
name|ref
range|:
name|or
operator|.
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|RefNames
operator|.
name|REFS_HEADS
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getDestination
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|matchDestination
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Branch
operator|.
name|NameKey
name|b
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|s
operator|.
name|getProject
argument_list|()
argument_list|,
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|contains
argument_list|(
name|b
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|logDebug
argument_list|(
literal|"Returning possible branches: "
operator|+
name|ret
operator|+
literal|"for project "
operator|+
name|s
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|SubmoduleSubscription
argument_list|>
DECL|method|superProjectSubscriptionsForSubmoduleBranch (Branch.NameKey srcBranch)
name|superProjectSubscriptionsForSubmoduleBranch
parameter_list|(
name|Branch
operator|.
name|NameKey
name|srcBranch
parameter_list|)
throws|throws
name|IOException
block|{
name|logDebug
argument_list|(
literal|"Calculating possible superprojects for "
operator|+
name|srcBranch
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Project
operator|.
name|NameKey
name|srcProject
init|=
name|srcBranch
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|srcProject
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
for|for
control|(
name|SubscribeSection
name|s
range|:
name|projectStateFactory
operator|.
name|create
argument_list|(
name|cfg
argument_list|)
operator|.
name|getSubscribeSections
argument_list|(
name|srcBranch
argument_list|)
control|)
block|{
name|logDebug
argument_list|(
literal|"Checking subscribe section "
operator|+
name|s
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|branches
init|=
name|getDestinationBranches
argument_list|(
name|srcBranch
argument_list|,
name|s
argument_list|)
decl_stmt|;
for|for
control|(
name|Branch
operator|.
name|NameKey
name|targetBranch
range|:
name|branches
control|)
block|{
name|Project
operator|.
name|NameKey
name|targetProject
init|=
name|targetBranch
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
try|try
block|{
name|OpenRepo
name|or
init|=
name|orm
operator|.
name|openRepo
argument_list|(
name|targetProject
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ObjectId
name|id
init|=
name|or
operator|.
name|repo
operator|.
name|resolve
argument_list|(
name|targetBranch
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|logDebug
argument_list|(
literal|"The branch "
operator|+
name|targetBranch
operator|+
literal|" doesn't exist."
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|e
parameter_list|)
block|{
name|logDebug
argument_list|(
literal|"The project "
operator|+
name|targetProject
operator|+
literal|" doesn't exist"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|GitModules
name|m
init|=
name|branchGitModules
operator|.
name|get
argument_list|(
name|targetBranch
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|m
operator|=
name|gitmodulesFactory
operator|.
name|create
argument_list|(
name|targetBranch
argument_list|,
name|orm
argument_list|)
expr_stmt|;
name|branchGitModules
operator|.
name|put
argument_list|(
name|targetBranch
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|addAll
argument_list|(
name|m
operator|.
name|subscribedTo
argument_list|(
name|srcBranch
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|logDebug
argument_list|(
literal|"Calculated superprojects for "
operator|+
name|srcBranch
operator|+
literal|" are "
operator|+
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|updateSuperProjects ()
specifier|public
name|void
name|updateSuperProjects
parameter_list|()
throws|throws
name|SubmoduleException
block|{
name|ImmutableSet
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projects
init|=
name|getProjectsInOrder
argument_list|()
decl_stmt|;
if|if
condition|(
name|projects
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|SetMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Branch
operator|.
name|NameKey
argument_list|>
name|dst
init|=
name|branchesByProject
argument_list|()
decl_stmt|;
name|LinkedHashSet
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|superProjects
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Project
operator|.
name|NameKey
name|project
range|:
name|projects
control|)
block|{
comment|// only need superprojects
if|if
condition|(
name|dst
operator|.
name|containsKey
argument_list|(
name|project
argument_list|)
condition|)
block|{
name|superProjects
operator|.
name|add
argument_list|(
name|project
argument_list|)
expr_stmt|;
comment|// get a new BatchUpdate for the super project
name|OpenRepo
name|or
init|=
name|orm
operator|.
name|openRepo
argument_list|(
name|project
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Branch
operator|.
name|NameKey
name|branch
range|:
name|dst
operator|.
name|get
argument_list|(
name|project
argument_list|)
control|)
block|{
name|addOp
argument_list|(
name|or
operator|.
name|getUpdate
argument_list|()
argument_list|,
name|branch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|BatchUpdate
operator|.
name|execute
argument_list|(
name|orm
operator|.
name|batchUpdates
argument_list|(
name|superProjects
argument_list|)
argument_list|,
name|Listener
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RestApiException
decl||
name|UpdateException
decl||
name|IOException
decl||
name|NoSuchProjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SubmoduleException
argument_list|(
literal|"Cannot update gitlinks"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Create a separate gitlink commit    */
DECL|method|composeGitlinksCommit (final Branch.NameKey subscriber)
specifier|public
name|CodeReviewCommit
name|composeGitlinksCommit
parameter_list|(
specifier|final
name|Branch
operator|.
name|NameKey
name|subscriber
parameter_list|)
throws|throws
name|IOException
throws|,
name|SubmoduleException
block|{
name|OpenRepo
name|or
decl_stmt|;
try|try
block|{
name|or
operator|=
name|orm
operator|.
name|openRepo
argument_list|(
name|subscriber
operator|.
name|getParentKey
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SubmoduleException
argument_list|(
literal|"Cannot access superproject"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|CodeReviewCommit
name|currentCommit
decl_stmt|;
name|Ref
name|r
init|=
name|or
operator|.
name|repo
operator|.
name|exactRef
argument_list|(
name|subscriber
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SubmoduleException
argument_list|(
literal|"The branch was probably deleted from the subscriber repository"
argument_list|)
throw|;
block|}
name|currentCommit
operator|=
name|or
operator|.
name|rw
operator|.
name|parseCommit
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|msgbuf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|PersonIdent
name|author
init|=
literal|null
decl_stmt|;
name|DirCache
name|dc
init|=
name|readTree
argument_list|(
name|or
operator|.
name|rw
argument_list|,
name|currentCommit
argument_list|)
decl_stmt|;
name|DirCacheEditor
name|ed
init|=
name|dc
operator|.
name|editor
argument_list|()
decl_stmt|;
for|for
control|(
name|SubmoduleSubscription
name|s
range|:
name|targets
operator|.
name|get
argument_list|(
name|subscriber
argument_list|)
control|)
block|{
name|RevCommit
name|newCommit
init|=
name|updateSubmodule
argument_list|(
name|dc
argument_list|,
name|ed
argument_list|,
name|msgbuf
argument_list|,
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCommit
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|author
operator|==
literal|null
condition|)
block|{
name|author
operator|=
name|newCommit
operator|.
name|getAuthorIdent
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|author
operator|.
name|equals
argument_list|(
name|newCommit
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
condition|)
block|{
name|author
operator|=
name|myIdent
expr_stmt|;
block|}
block|}
block|}
name|ed
operator|.
name|finish
argument_list|()
expr_stmt|;
name|ObjectId
name|newTreeId
init|=
name|dc
operator|.
name|writeTree
argument_list|(
name|or
operator|.
name|ins
argument_list|)
decl_stmt|;
comment|// Gitlinks are already in the branch, return null
if|if
condition|(
name|newTreeId
operator|.
name|equals
argument_list|(
name|currentCommit
operator|.
name|getTree
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|CommitBuilder
name|commit
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|commit
operator|.
name|setTreeId
argument_list|(
name|newTreeId
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setParentId
argument_list|(
name|currentCommit
argument_list|)
expr_stmt|;
name|StringBuilder
name|commitMsg
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Update git submodules\n\n"
argument_list|)
decl_stmt|;
if|if
condition|(
name|verboseSuperProject
operator|!=
name|VerboseSuperprojectUpdate
operator|.
name|FALSE
condition|)
block|{
name|commitMsg
operator|.
name|append
argument_list|(
name|msgbuf
argument_list|)
expr_stmt|;
block|}
name|commit
operator|.
name|setMessage
argument_list|(
name|commitMsg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setAuthor
argument_list|(
name|author
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setCommitter
argument_list|(
name|myIdent
argument_list|)
expr_stmt|;
name|ObjectId
name|id
init|=
name|or
operator|.
name|ins
operator|.
name|insert
argument_list|(
name|commit
argument_list|)
decl_stmt|;
return|return
name|or
operator|.
name|rw
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**    * Amend an existing commit with gitlink updates    */
DECL|method|composeGitlinksCommit ( final Branch.NameKey subscriber, CodeReviewCommit currentCommit)
specifier|public
name|CodeReviewCommit
name|composeGitlinksCommit
parameter_list|(
specifier|final
name|Branch
operator|.
name|NameKey
name|subscriber
parameter_list|,
name|CodeReviewCommit
name|currentCommit
parameter_list|)
throws|throws
name|IOException
throws|,
name|SubmoduleException
block|{
name|OpenRepo
name|or
decl_stmt|;
try|try
block|{
name|or
operator|=
name|orm
operator|.
name|openRepo
argument_list|(
name|subscriber
operator|.
name|getParentKey
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SubmoduleException
argument_list|(
literal|"Cannot access superproject"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|StringBuilder
name|msgbuf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|DirCache
name|dc
init|=
name|readTree
argument_list|(
name|or
operator|.
name|rw
argument_list|,
name|currentCommit
argument_list|)
decl_stmt|;
name|DirCacheEditor
name|ed
init|=
name|dc
operator|.
name|editor
argument_list|()
decl_stmt|;
for|for
control|(
name|SubmoduleSubscription
name|s
range|:
name|targets
operator|.
name|get
argument_list|(
name|subscriber
argument_list|)
control|)
block|{
name|updateSubmodule
argument_list|(
name|dc
argument_list|,
name|ed
argument_list|,
name|msgbuf
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
name|ed
operator|.
name|finish
argument_list|()
expr_stmt|;
name|ObjectId
name|newTreeId
init|=
name|dc
operator|.
name|writeTree
argument_list|(
name|or
operator|.
name|ins
argument_list|)
decl_stmt|;
comment|// Gitlinks are already updated, just return the commit
if|if
condition|(
name|newTreeId
operator|.
name|equals
argument_list|(
name|currentCommit
operator|.
name|getTree
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|currentCommit
return|;
block|}
name|or
operator|.
name|rw
operator|.
name|parseBody
argument_list|(
name|currentCommit
argument_list|)
expr_stmt|;
name|CommitBuilder
name|commit
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|commit
operator|.
name|setTreeId
argument_list|(
name|newTreeId
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setParentIds
argument_list|(
name|currentCommit
operator|.
name|getParents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|verboseSuperProject
operator|!=
name|VerboseSuperprojectUpdate
operator|.
name|FALSE
condition|)
block|{
comment|//TODO:czhen handle cherrypick footer
name|commit
operator|.
name|setMessage
argument_list|(
name|currentCommit
operator|.
name|getFullMessage
argument_list|()
operator|+
literal|"\n\n*submodules:\n"
operator|+
name|msgbuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commit
operator|.
name|setMessage
argument_list|(
name|currentCommit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|commit
operator|.
name|setAuthor
argument_list|(
name|currentCommit
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setCommitter
argument_list|(
name|myIdent
argument_list|)
expr_stmt|;
name|ObjectId
name|id
init|=
name|or
operator|.
name|ins
operator|.
name|insert
argument_list|(
name|commit
argument_list|)
decl_stmt|;
return|return
name|or
operator|.
name|rw
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|updateSubmodule (DirCache dc, DirCacheEditor ed, StringBuilder msgbuf, final SubmoduleSubscription s)
specifier|private
name|RevCommit
name|updateSubmodule
parameter_list|(
name|DirCache
name|dc
parameter_list|,
name|DirCacheEditor
name|ed
parameter_list|,
name|StringBuilder
name|msgbuf
parameter_list|,
specifier|final
name|SubmoduleSubscription
name|s
parameter_list|)
throws|throws
name|SubmoduleException
throws|,
name|IOException
block|{
name|OpenRepo
name|subOr
decl_stmt|;
try|try
block|{
name|subOr
operator|=
name|orm
operator|.
name|openRepo
argument_list|(
name|s
operator|.
name|getSubmodule
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SubmoduleException
argument_list|(
literal|"Cannot access submodule"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|DirCacheEntry
name|dce
init|=
name|dc
operator|.
name|getEntry
argument_list|(
name|s
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|oldCommit
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dce
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|dce
operator|.
name|getFileMode
argument_list|()
operator|.
name|equals
argument_list|(
name|FileMode
operator|.
name|GITLINK
argument_list|)
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Requested to update gitlink "
operator|+
name|s
operator|.
name|getPath
argument_list|()
operator|+
literal|" in "
operator|+
name|s
operator|.
name|getSubmodule
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|" but entry "
operator|+
literal|"doesn't have gitlink file mode."
decl_stmt|;
throw|throw
operator|new
name|SubmoduleException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
name|oldCommit
operator|=
name|subOr
operator|.
name|rw
operator|.
name|parseCommit
argument_list|(
name|dce
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RevCommit
name|newCommit
decl_stmt|;
if|if
condition|(
name|branchTips
operator|.
name|containsKey
argument_list|(
name|s
operator|.
name|getSubmodule
argument_list|()
argument_list|)
condition|)
block|{
name|newCommit
operator|=
name|branchTips
operator|.
name|get
argument_list|(
name|s
operator|.
name|getSubmodule
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Ref
name|ref
init|=
name|subOr
operator|.
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
name|s
operator|.
name|getSubmodule
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ed
operator|.
name|add
argument_list|(
operator|new
name|DeletePath
argument_list|(
name|s
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|newCommit
operator|=
name|subOr
operator|.
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|newCommit
argument_list|,
name|oldCommit
argument_list|)
condition|)
block|{
comment|// gitlink have already been updated for this submodule
return|return
literal|null
return|;
block|}
name|ed
operator|.
name|add
argument_list|(
operator|new
name|PathEdit
argument_list|(
name|s
operator|.
name|getPath
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|apply
parameter_list|(
name|DirCacheEntry
name|ent
parameter_list|)
block|{
name|ent
operator|.
name|setFileMode
argument_list|(
name|FileMode
operator|.
name|GITLINK
argument_list|)
expr_stmt|;
name|ent
operator|.
name|setObjectId
argument_list|(
name|newCommit
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|verboseSuperProject
operator|!=
name|VerboseSuperprojectUpdate
operator|.
name|FALSE
condition|)
block|{
name|createSubmoduleCommitMsg
argument_list|(
name|msgbuf
argument_list|,
name|s
argument_list|,
name|subOr
argument_list|,
name|newCommit
argument_list|,
name|oldCommit
argument_list|)
expr_stmt|;
block|}
name|subOr
operator|.
name|rw
operator|.
name|parseBody
argument_list|(
name|newCommit
argument_list|)
expr_stmt|;
return|return
name|newCommit
return|;
block|}
DECL|method|createSubmoduleCommitMsg (StringBuilder msgbuf, SubmoduleSubscription s, OpenRepo subOr, RevCommit newCommit, RevCommit oldCommit)
specifier|private
name|void
name|createSubmoduleCommitMsg
parameter_list|(
name|StringBuilder
name|msgbuf
parameter_list|,
name|SubmoduleSubscription
name|s
parameter_list|,
name|OpenRepo
name|subOr
parameter_list|,
name|RevCommit
name|newCommit
parameter_list|,
name|RevCommit
name|oldCommit
parameter_list|)
throws|throws
name|SubmoduleException
block|{
name|msgbuf
operator|.
name|append
argument_list|(
literal|"* Update "
operator|+
name|s
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|" from branch '"
operator|+
name|s
operator|.
name|getSubmodule
argument_list|()
operator|.
name|getShortName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|// newly created submodule gitlink, do not append whole history
if|if
condition|(
name|oldCommit
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|subOr
operator|.
name|rw
operator|.
name|resetRetain
argument_list|(
name|subOr
operator|.
name|canMergeFlag
argument_list|)
expr_stmt|;
name|subOr
operator|.
name|rw
operator|.
name|markStart
argument_list|(
name|newCommit
argument_list|)
expr_stmt|;
name|subOr
operator|.
name|rw
operator|.
name|markUninteresting
argument_list|(
name|oldCommit
argument_list|)
expr_stmt|;
for|for
control|(
name|RevCommit
name|c
range|:
name|subOr
operator|.
name|rw
control|)
block|{
name|subOr
operator|.
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|verboseSuperProject
operator|==
name|VerboseSuperprojectUpdate
operator|.
name|SUBJECT_ONLY
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
literal|"\n  - "
operator|+
name|c
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|verboseSuperProject
operator|==
name|VerboseSuperprojectUpdate
operator|.
name|TRUE
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
literal|"\n  - "
operator|+
name|c
operator|.
name|getFullMessage
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"\n    "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SubmoduleException
argument_list|(
literal|"Could not perform a revwalk to "
operator|+
literal|"create superproject commit message"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|readTree (RevWalk rw, ObjectId base)
specifier|private
specifier|static
name|DirCache
name|readTree
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|ObjectId
name|base
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DirCache
name|dc
init|=
name|DirCache
operator|.
name|newInCore
argument_list|()
decl_stmt|;
specifier|final
name|DirCacheBuilder
name|b
init|=
name|dc
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|addTree
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
comment|// no prefix path
name|DirCacheEntry
operator|.
name|STAGE_0
argument_list|,
comment|// standard stage
name|rw
operator|.
name|getObjectReader
argument_list|()
argument_list|,
name|rw
operator|.
name|parseTree
argument_list|(
name|base
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|finish
argument_list|()
expr_stmt|;
return|return
name|dc
return|;
block|}
DECL|method|branchesByProject ()
specifier|public
name|SetMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Branch
operator|.
name|NameKey
argument_list|>
name|branchesByProject
parameter_list|()
block|{
name|SetMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Branch
operator|.
name|NameKey
argument_list|>
name|ret
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Branch
operator|.
name|NameKey
name|branch
range|:
name|targets
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|branch
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|getProjectsInOrder ()
specifier|public
name|ImmutableSet
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|getProjectsInOrder
parameter_list|()
throws|throws
name|SubmoduleException
block|{
if|if
condition|(
name|sortedBranches
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LinkedHashSet
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projects
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Project
operator|.
name|NameKey
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Branch
operator|.
name|NameKey
name|branch
range|:
name|sortedBranches
control|)
block|{
name|Project
operator|.
name|NameKey
name|project
init|=
name|branch
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|.
name|equals
argument_list|(
name|prev
argument_list|)
condition|)
block|{
if|if
condition|(
name|projects
operator|.
name|contains
argument_list|(
name|project
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SubmoduleException
argument_list|(
literal|"Project level circular subscriptions detected:  "
operator|+
name|printCircularPath
argument_list|(
name|projects
argument_list|,
name|project
argument_list|)
argument_list|)
throw|;
block|}
name|projects
operator|.
name|add
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
name|prev
operator|=
name|project
expr_stmt|;
block|}
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|projects
argument_list|)
return|;
block|}
DECL|method|getBranchesInOrder ()
specifier|public
name|ImmutableSet
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|getBranchesInOrder
parameter_list|()
block|{
return|return
name|sortedBranches
return|;
block|}
DECL|method|hasSubscription (Branch.NameKey branch)
specifier|public
name|boolean
name|hasSubscription
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
block|{
return|return
name|targets
operator|.
name|containsKey
argument_list|(
name|branch
argument_list|)
return|;
block|}
DECL|method|addBranchTip (Branch.NameKey branch, CodeReviewCommit tip)
specifier|public
name|void
name|addBranchTip
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|,
name|CodeReviewCommit
name|tip
parameter_list|)
block|{
name|branchTips
operator|.
name|put
argument_list|(
name|branch
argument_list|,
name|tip
argument_list|)
expr_stmt|;
block|}
DECL|method|addOp (BatchUpdate bu, Branch.NameKey branch)
specifier|public
name|void
name|addOp
parameter_list|(
name|BatchUpdate
name|bu
parameter_list|,
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
block|{
name|bu
operator|.
name|addRepoOnlyOp
argument_list|(
operator|new
name|GitlinkOp
argument_list|(
name|branch
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|logDebug (String msg, Object... args)
specifier|private
name|void
name|logDebug
parameter_list|(
name|String
name|msg
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|orm
operator|.
name|getSubmissionId
argument_list|()
operator|+
name|msg
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

