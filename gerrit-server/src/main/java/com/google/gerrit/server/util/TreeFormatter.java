begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.util
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_class
DECL|class|TreeFormatter
specifier|public
class|class
name|TreeFormatter
block|{
DECL|interface|TreeNode
specifier|public
specifier|static
interface|interface
name|TreeNode
block|{
DECL|method|getDisplayName ()
name|String
name|getDisplayName
parameter_list|()
function_decl|;
DECL|method|isVisible ()
name|boolean
name|isVisible
parameter_list|()
function_decl|;
DECL|method|getChildren ()
name|SortedSet
argument_list|<
name|?
extends|extends
name|TreeNode
argument_list|>
name|getChildren
parameter_list|()
function_decl|;
block|}
DECL|field|NOT_VISIBLE_NODE
specifier|public
specifier|static
specifier|final
name|String
name|NOT_VISIBLE_NODE
init|=
literal|"(x)"
decl_stmt|;
DECL|field|NODE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|NODE_PREFIX
init|=
literal|"|-- "
decl_stmt|;
DECL|field|LAST_NODE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|LAST_NODE_PREFIX
init|=
literal|"`-- "
decl_stmt|;
DECL|field|DEFAULT_TAB_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_TAB_SEPARATOR
init|=
literal|"|"
decl_stmt|;
DECL|field|stdout
specifier|private
specifier|final
name|PrintWriter
name|stdout
decl_stmt|;
DECL|field|currentTabSeparator
specifier|private
name|String
name|currentTabSeparator
init|=
literal|" "
decl_stmt|;
DECL|method|TreeFormatter (final PrintWriter stdout)
specifier|public
name|TreeFormatter
parameter_list|(
specifier|final
name|PrintWriter
name|stdout
parameter_list|)
block|{
name|this
operator|.
name|stdout
operator|=
name|stdout
expr_stmt|;
block|}
DECL|method|printTree (final SortedSet<? extends TreeNode> rootNodes)
specifier|public
name|void
name|printTree
parameter_list|(
specifier|final
name|SortedSet
argument_list|<
name|?
extends|extends
name|TreeNode
argument_list|>
name|rootNodes
parameter_list|)
block|{
if|if
condition|(
name|rootNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|rootNodes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|printTree
argument_list|(
name|rootNodes
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentTabSeparator
operator|=
name|DEFAULT_TAB_SEPARATOR
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|rootNodes
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|TreeNode
name|rootNode
range|:
name|rootNodes
control|)
block|{
specifier|final
name|boolean
name|isLastRoot
init|=
operator|++
name|i
operator|==
name|size
decl_stmt|;
if|if
condition|(
name|isLastRoot
condition|)
block|{
name|currentTabSeparator
operator|=
literal|" "
expr_stmt|;
block|}
name|printTree
argument_list|(
name|rootNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|printTree (final TreeNode rootNode)
specifier|public
name|void
name|printTree
parameter_list|(
specifier|final
name|TreeNode
name|rootNode
parameter_list|)
block|{
name|printTree
argument_list|(
name|rootNode
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|printTree (final TreeNode node, final int level, final boolean isLast)
specifier|private
name|void
name|printTree
parameter_list|(
specifier|final
name|TreeNode
name|node
parameter_list|,
specifier|final
name|int
name|level
parameter_list|,
specifier|final
name|boolean
name|isLast
parameter_list|)
block|{
name|printNode
argument_list|(
name|node
argument_list|,
name|level
argument_list|,
name|isLast
argument_list|)
expr_stmt|;
specifier|final
name|SortedSet
argument_list|<
name|?
extends|extends
name|TreeNode
argument_list|>
name|childNodes
init|=
name|node
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|childNodes
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|TreeNode
name|childNode
range|:
name|childNodes
control|)
block|{
specifier|final
name|boolean
name|isLastChild
init|=
operator|++
name|i
operator|==
name|size
decl_stmt|;
name|printTree
argument_list|(
name|childNode
argument_list|,
name|level
operator|+
literal|1
argument_list|,
name|isLastChild
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printIndention (final int level)
specifier|private
name|void
name|printIndention
parameter_list|(
specifier|final
name|int
name|level
parameter_list|)
block|{
if|if
condition|(
name|level
operator|>
literal|0
condition|)
block|{
name|stdout
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
literal|4
operator|*
name|level
operator|+
literal|"s"
argument_list|,
name|currentTabSeparator
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printNode (final TreeNode node, final int level, final boolean isLast)
specifier|private
name|void
name|printNode
parameter_list|(
specifier|final
name|TreeNode
name|node
parameter_list|,
specifier|final
name|int
name|level
parameter_list|,
specifier|final
name|boolean
name|isLast
parameter_list|)
block|{
name|printIndention
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|stdout
operator|.
name|print
argument_list|(
name|isLast
condition|?
name|LAST_NODE_PREFIX
else|:
name|NODE_PREFIX
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|stdout
operator|.
name|print
argument_list|(
name|node
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stdout
operator|.
name|print
argument_list|(
name|NOT_VISIBLE_NODE
argument_list|)
expr_stmt|;
block|}
name|stdout
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

