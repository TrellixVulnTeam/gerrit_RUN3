begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_class
DECL|class|Schema_81
specifier|public
class|class
name|Schema_81
extends|extends
name|SchemaVersion
block|{
DECL|field|pluginsDir
specifier|private
specifier|final
name|File
name|pluginsDir
decl_stmt|;
DECL|field|mgr
specifier|private
specifier|final
name|GitRepositoryManager
name|mgr
decl_stmt|;
DECL|field|allProjects
specifier|private
specifier|final
name|AllProjectsName
name|allProjects
decl_stmt|;
DECL|field|serverUser
specifier|private
specifier|final
name|PersonIdent
name|serverUser
decl_stmt|;
annotation|@
name|Inject
DECL|method|Schema_81 (Provider<Schema_80> prior, SitePaths sitePaths, AllProjectsName allProjects, GitRepositoryManager mgr, @GerritPersonIdent PersonIdent serverUser)
name|Schema_81
parameter_list|(
name|Provider
argument_list|<
name|Schema_80
argument_list|>
name|prior
parameter_list|,
name|SitePaths
name|sitePaths
parameter_list|,
name|AllProjectsName
name|allProjects
parameter_list|,
name|GitRepositoryManager
name|mgr
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverUser
parameter_list|)
block|{
name|super
argument_list|(
name|prior
argument_list|)
expr_stmt|;
name|this
operator|.
name|pluginsDir
operator|=
name|sitePaths
operator|.
name|plugins_dir
expr_stmt|;
name|this
operator|.
name|mgr
operator|=
name|mgr
expr_stmt|;
name|this
operator|.
name|allProjects
operator|=
name|allProjects
expr_stmt|;
name|this
operator|.
name|serverUser
operator|=
name|serverUser
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|migrateData (ReviewDb db, UpdateUI ui)
specifier|protected
name|void
name|migrateData
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|UpdateUI
name|ui
parameter_list|)
throws|throws
name|OrmException
throws|,
name|SQLException
block|{
try|try
block|{
name|migrateStartReplicationCapability
argument_list|(
name|db
argument_list|,
name|scanForReplicationPlugin
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|scanForReplicationPlugin ()
specifier|private
name|File
index|[]
name|scanForReplicationPlugin
parameter_list|()
block|{
name|File
index|[]
name|matches
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pluginsDir
operator|!=
literal|null
operator|&&
name|pluginsDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|matches
operator|=
name|pluginsDir
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
name|String
name|n
init|=
name|pathname
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|(
name|n
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
operator|||
name|n
operator|.
name|endsWith
argument_list|(
literal|".jar.disabled"
argument_list|)
operator|)
operator|&&
name|pathname
operator|.
name|isFile
argument_list|()
operator|&&
name|n
operator|.
name|indexOf
argument_list|(
literal|"replication"
argument_list|)
operator|>=
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|matches
return|;
block|}
DECL|method|migrateStartReplicationCapability (ReviewDb db, File[] matches)
specifier|private
name|void
name|migrateStartReplicationCapability
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|File
index|[]
name|matches
parameter_list|)
throws|throws
name|SQLException
throws|,
name|RepositoryNotFoundException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Description
name|d
init|=
operator|new
name|Description
argument_list|()
decl_stmt|;
if|if
condition|(
name|matches
operator|==
literal|null
operator|||
name|matches
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|d
operator|.
name|what
operator|=
name|Description
operator|.
name|Action
operator|.
name|REMOVE
expr_stmt|;
block|}
else|else
block|{
name|d
operator|.
name|what
operator|=
name|Description
operator|.
name|Action
operator|.
name|RENAME
expr_stmt|;
name|d
operator|.
name|prefix
operator|=
name|nameOf
argument_list|(
name|matches
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|migrateStartReplicationCapability
argument_list|(
name|db
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
DECL|method|migrateStartReplicationCapability (ReviewDb db, Description d)
specifier|private
name|void
name|migrateStartReplicationCapability
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Description
name|d
parameter_list|)
throws|throws
name|SQLException
throws|,
name|RepositoryNotFoundException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Repository
name|git
init|=
name|mgr
operator|.
name|openRepository
argument_list|(
name|allProjects
argument_list|)
decl_stmt|;
try|try
block|{
name|MetaDataUpdate
name|md
init|=
operator|new
name|MetaDataUpdate
argument_list|(
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|,
name|allProjects
argument_list|,
name|git
argument_list|)
decl_stmt|;
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|serverUser
argument_list|)
expr_stmt|;
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
name|serverUser
argument_list|)
expr_stmt|;
name|ProjectConfig
name|config
init|=
name|ProjectConfig
operator|.
name|read
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|AccessSection
name|capabilities
init|=
name|config
operator|.
name|getAccessSection
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|)
decl_stmt|;
name|Permission
name|startReplication
init|=
name|capabilities
operator|.
name|getPermission
argument_list|(
literal|"startReplication"
argument_list|)
decl_stmt|;
if|if
condition|(
name|startReplication
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|msg
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|d
operator|.
name|what
condition|)
block|{
case|case
name|REMOVE
case|:
name|capabilities
operator|.
name|remove
argument_list|(
name|startReplication
argument_list|)
expr_stmt|;
name|msg
operator|=
literal|"Remove startReplication capability, plugin not installed\n"
expr_stmt|;
break|break;
case|case
name|RENAME
case|:
name|capabilities
operator|.
name|remove
argument_list|(
name|startReplication
argument_list|)
expr_stmt|;
name|Permission
name|pluginStartReplication
init|=
name|capabilities
operator|.
name|getPermission
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s-startReplication"
argument_list|,
name|d
operator|.
name|prefix
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|pluginStartReplication
operator|.
name|setRules
argument_list|(
name|startReplication
operator|.
name|getRules
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|=
literal|"Rename startReplication capability to match updated plugin\n"
expr_stmt|;
break|break;
block|}
name|config
operator|.
name|replace
argument_list|(
name|capabilities
argument_list|)
expr_stmt|;
name|md
operator|.
name|setMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|config
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|git
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|nameOf (File jar)
specifier|private
specifier|static
name|String
name|nameOf
parameter_list|(
name|File
name|jar
parameter_list|)
block|{
name|String
name|name
init|=
name|jar
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".disabled"
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|ext
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
return|return
literal|0
operator|<
name|ext
condition|?
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ext
argument_list|)
else|:
name|name
return|;
block|}
DECL|class|Description
specifier|private
specifier|static
class|class
name|Description
block|{
DECL|enum|Action
specifier|private
enum|enum
name|Action
block|{
DECL|enumConstant|REMOVE
DECL|enumConstant|RENAME
name|REMOVE
block|,
name|RENAME
block|}
DECL|field|what
name|Action
name|what
decl_stmt|;
DECL|field|prefix
name|String
name|prefix
decl_stmt|;
block|}
block|}
end_class

end_unit

