begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.mail
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_class
DECL|class|Address
specifier|public
class|class
name|Address
block|{
DECL|method|parse (final String in)
specifier|public
specifier|static
name|Address
name|parse
parameter_list|(
specifier|final
name|String
name|in
parameter_list|)
block|{
specifier|final
name|int
name|lt
init|=
name|in
operator|.
name|indexOf
argument_list|(
literal|'<'
argument_list|)
decl_stmt|;
specifier|final
name|int
name|gt
init|=
name|in
operator|.
name|indexOf
argument_list|(
literal|'>'
argument_list|)
decl_stmt|;
specifier|final
name|int
name|at
init|=
name|in
operator|.
name|indexOf
argument_list|(
literal|"@"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|lt
operator|&&
name|lt
operator|<
name|gt
operator|&&
name|lt
operator|+
literal|1
operator|<
name|at
operator|&&
name|at
operator|+
literal|1
operator|<
name|gt
condition|)
block|{
specifier|final
name|String
name|email
init|=
name|in
operator|.
name|substring
argument_list|(
name|lt
operator|+
literal|1
argument_list|,
name|gt
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|in
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lt
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
return|return
operator|new
name|Address
argument_list|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|name
else|:
literal|null
argument_list|,
name|email
argument_list|)
return|;
block|}
if|if
condition|(
name|lt
operator|<
literal|0
operator|&&
name|gt
operator|<
literal|0
operator|&&
literal|0
operator|<
name|at
operator|&&
name|at
operator|<
name|in
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
operator|new
name|Address
argument_list|(
name|in
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid email address: "
operator|+
name|in
argument_list|)
throw|;
block|}
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|email
specifier|final
name|String
name|email
decl_stmt|;
DECL|method|Address (String email)
specifier|public
name|Address
parameter_list|(
name|String
name|email
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|email
argument_list|)
expr_stmt|;
block|}
DECL|method|Address (String name, String email)
specifier|public
name|Address
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|email
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|email
operator|=
name|email
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getEmail ()
specifier|public
name|String
name|getEmail
parameter_list|()
block|{
return|return
name|email
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
return|return
name|toHeaderString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot encode address"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|toHeaderString ()
specifier|public
name|String
name|toHeaderString
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
return|return
name|quotedPhrase
argument_list|(
name|name
argument_list|)
operator|+
literal|"<"
operator|+
name|email
operator|+
literal|">"
return|;
block|}
elseif|else
if|if
condition|(
name|isSimple
argument_list|()
condition|)
block|{
return|return
name|email
return|;
block|}
return|return
literal|"<"
operator|+
name|email
operator|+
literal|">"
return|;
block|}
DECL|field|MUST_QUOTE_EMAIL
specifier|private
specifier|static
specifier|final
name|String
name|MUST_QUOTE_EMAIL
init|=
literal|"()<>,;:\\\"[]"
decl_stmt|;
DECL|field|MUST_QUOTE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|MUST_QUOTE_NAME
init|=
name|MUST_QUOTE_EMAIL
operator|+
literal|"@."
decl_stmt|;
DECL|method|isSimple ()
specifier|private
name|boolean
name|isSimple
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|email
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|char
name|c
init|=
name|email
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<=
literal|' '
operator|||
literal|0x7F
operator|<=
name|c
operator|||
name|MUST_QUOTE_EMAIL
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|quotedPhrase (final String name)
specifier|private
specifier|static
name|String
name|quotedPhrase
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
if|if
condition|(
name|EmailHeader
operator|.
name|needsQuotedPrintable
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|EmailHeader
operator|.
name|quotedPrintable
argument_list|(
name|name
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|char
name|c
init|=
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|MUST_QUOTE_NAME
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|wrapInQuotes
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
return|return
name|name
return|;
block|}
DECL|method|wrapInQuotes (final String name)
specifier|private
specifier|static
name|String
name|wrapInQuotes
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|(
literal|2
operator|+
name|name
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'"'
operator|||
name|c
operator|==
literal|'\\'
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

