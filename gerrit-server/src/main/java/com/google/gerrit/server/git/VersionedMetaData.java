begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheEditor
operator|.
name|DeletePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheEditor
operator|.
name|PathEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AnyObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|FileMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|treewalk
operator|.
name|TreeWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|RawParseUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Support for metadata stored within a version controlled branch.  *<p>  * Implementors are responsible for supplying implementations of the onLoad and  * onSave methods to read from the repository, or format an update that can  * later be written back to the repository.  */
end_comment

begin_class
DECL|class|VersionedMetaData
specifier|public
specifier|abstract
class|class
name|VersionedMetaData
block|{
DECL|field|revision
specifier|private
name|RevCommit
name|revision
decl_stmt|;
DECL|field|reader
specifier|protected
name|ObjectReader
name|reader
decl_stmt|;
DECL|field|inserter
specifier|protected
name|ObjectInserter
name|inserter
decl_stmt|;
DECL|field|newTree
specifier|protected
name|DirCache
name|newTree
decl_stmt|;
comment|/** @return name of the reference storing this configuration. */
DECL|method|getRefName ()
specifier|protected
specifier|abstract
name|String
name|getRefName
parameter_list|()
function_decl|;
comment|/** Set up the metadata, parsing any state from the loaded revision. */
DECL|method|onLoad ()
specifier|protected
specifier|abstract
name|void
name|onLoad
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
function_decl|;
comment|/**    * Save any changes to the metadata in a commit.    *    * @return true if the commit should proceed, false to abort.    * @throws IOException    * @throws ConfigInvalidException    */
DECL|method|onSave (CommitBuilder commit)
specifier|protected
specifier|abstract
name|boolean
name|onSave
parameter_list|(
name|CommitBuilder
name|commit
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
function_decl|;
comment|/** @return revision of the metadata that was loaded. */
DECL|method|getRevision ()
specifier|public
name|ObjectId
name|getRevision
parameter_list|()
block|{
return|return
name|revision
operator|!=
literal|null
condition|?
name|revision
operator|.
name|copy
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**    * Load the current version from the branch.    *<p>    * The repository is not held after the call completes, allowing the    * application to retain this object for long periods of time.    *    * @param db repository to access.    * @throws IOException    * @throws ConfigInvalidException    */
DECL|method|load (Repository db)
specifier|public
name|void
name|load
parameter_list|(
name|Repository
name|db
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Ref
name|ref
init|=
name|db
operator|.
name|getRef
argument_list|(
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|load
argument_list|(
name|db
argument_list|,
name|ref
operator|!=
literal|null
condition|?
name|ref
operator|.
name|getObjectId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Load a specific version from the repository.    *<p>    * This method is primarily useful for applying updates to a specific revision    * that was shown to an end-user in the user interface. If there are conflicts    * with another user's concurrent changes, these will be automatically    * detected at commit time.    *<p>    * The repository is not held after the call completes, allowing the    * application to retain this object for long periods of time.    *    * @param db repository to access.    * @param id revision to load.    * @throws IOException    * @throws ConfigInvalidException    */
DECL|method|load (Repository db, ObjectId id)
specifier|public
name|void
name|load
parameter_list|(
name|Repository
name|db
parameter_list|,
name|ObjectId
name|id
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|reader
operator|=
name|db
operator|.
name|newObjectReader
argument_list|()
expr_stmt|;
try|try
block|{
name|revision
operator|=
name|id
operator|!=
literal|null
condition|?
operator|new
name|RevWalk
argument_list|(
name|reader
argument_list|)
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
else|:
literal|null
expr_stmt|;
name|onLoad
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|release
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|load (MetaDataUpdate update)
specifier|public
name|void
name|load
parameter_list|(
name|MetaDataUpdate
name|update
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|load
argument_list|(
name|update
operator|.
name|getRepository
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|load (MetaDataUpdate update, ObjectId id)
specifier|public
name|void
name|load
parameter_list|(
name|MetaDataUpdate
name|update
parameter_list|,
name|ObjectId
name|id
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|load
argument_list|(
name|update
operator|.
name|getRepository
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update this metadata branch, recording a new commit on its reference.    *    * @param update helper information to define the update that will occur.    * @return the commit that was created    * @throws IOException if there is a storage problem and the update cannot be    *         executed as requested or if it failed because of a concurrent    *         update to the same reference    */
DECL|method|commit (MetaDataUpdate update)
specifier|public
name|RevCommit
name|commit
parameter_list|(
name|MetaDataUpdate
name|update
parameter_list|)
throws|throws
name|IOException
block|{
name|BatchMetaDataUpdate
name|batch
init|=
name|openUpdate
argument_list|(
name|update
argument_list|)
decl_stmt|;
try|try
block|{
name|batch
operator|.
name|write
argument_list|(
name|update
operator|.
name|getCommitBuilder
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|batch
operator|.
name|commit
argument_list|()
return|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Creates a new commit and a new ref based on this commit.    *    * @param update helper information to define the update that will occur.    * @param refName name of the ref that should be created    * @return the commit that was created    * @throws IOException if there is a storage problem and the update cannot be    *         executed as requested or if it failed because of a concurrent    *         update to the same reference    */
DECL|method|commitToNewRef (MetaDataUpdate update, String refName)
specifier|public
name|RevCommit
name|commitToNewRef
parameter_list|(
name|MetaDataUpdate
name|update
parameter_list|,
name|String
name|refName
parameter_list|)
throws|throws
name|IOException
block|{
name|BatchMetaDataUpdate
name|batch
init|=
name|openUpdate
argument_list|(
name|update
argument_list|)
decl_stmt|;
try|try
block|{
name|batch
operator|.
name|write
argument_list|(
name|update
operator|.
name|getCommitBuilder
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|batch
operator|.
name|createRef
argument_list|(
name|refName
argument_list|)
return|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|interface|BatchMetaDataUpdate
specifier|public
interface|interface
name|BatchMetaDataUpdate
block|{
DECL|method|write (CommitBuilder commit)
name|void
name|write
parameter_list|(
name|CommitBuilder
name|commit
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|write (VersionedMetaData config, CommitBuilder commit)
name|void
name|write
parameter_list|(
name|VersionedMetaData
name|config
parameter_list|,
name|CommitBuilder
name|commit
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|createRef (String refName)
name|RevCommit
name|createRef
parameter_list|(
name|String
name|refName
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|commit ()
name|RevCommit
name|commit
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|commitAt (ObjectId revision)
name|RevCommit
name|commitAt
parameter_list|(
name|ObjectId
name|revision
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|close ()
name|void
name|close
parameter_list|()
function_decl|;
block|}
DECL|method|openUpdate (final MetaDataUpdate update)
specifier|public
name|BatchMetaDataUpdate
name|openUpdate
parameter_list|(
specifier|final
name|MetaDataUpdate
name|update
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Repository
name|db
init|=
name|update
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|reader
operator|=
name|db
operator|.
name|newObjectReader
argument_list|()
expr_stmt|;
name|inserter
operator|=
name|db
operator|.
name|newObjectInserter
argument_list|()
expr_stmt|;
specifier|final
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|RevTree
name|tree
init|=
name|revision
operator|!=
literal|null
condition|?
name|rw
operator|.
name|parseTree
argument_list|(
name|revision
argument_list|)
else|:
literal|null
decl_stmt|;
name|newTree
operator|=
name|readTree
argument_list|(
name|tree
argument_list|)
expr_stmt|;
return|return
operator|new
name|BatchMetaDataUpdate
argument_list|()
block|{
name|AnyObjectId
name|src
init|=
name|revision
decl_stmt|;
name|AnyObjectId
name|srcTree
init|=
name|tree
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|CommitBuilder
name|commit
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|VersionedMetaData
operator|.
name|this
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|doSave
parameter_list|(
name|VersionedMetaData
name|config
parameter_list|,
name|CommitBuilder
name|commit
parameter_list|)
throws|throws
name|IOException
block|{
name|DirCache
name|nt
init|=
name|config
operator|.
name|newTree
decl_stmt|;
name|ObjectReader
name|r
init|=
name|config
operator|.
name|reader
decl_stmt|;
name|ObjectInserter
name|i
init|=
name|config
operator|.
name|inserter
decl_stmt|;
try|try
block|{
name|config
operator|.
name|newTree
operator|=
name|newTree
expr_stmt|;
name|config
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|config
operator|.
name|inserter
operator|=
name|inserter
expr_stmt|;
return|return
name|config
operator|.
name|onSave
argument_list|(
name|commit
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot update "
operator|+
name|getRefName
argument_list|()
operator|+
literal|" in "
operator|+
name|db
operator|.
name|getDirectory
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|config
operator|.
name|newTree
operator|=
name|nt
expr_stmt|;
name|config
operator|.
name|reader
operator|=
name|r
expr_stmt|;
name|config
operator|.
name|inserter
operator|=
name|i
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|VersionedMetaData
name|config
parameter_list|,
name|CommitBuilder
name|commit
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|doSave
argument_list|(
name|config
argument_list|,
name|commit
argument_list|)
condition|)
block|{
return|return;
block|}
name|ObjectId
name|res
init|=
name|newTree
operator|.
name|writeTree
argument_list|(
name|inserter
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|equals
argument_list|(
name|srcTree
argument_list|)
operator|&&
operator|!
name|update
operator|.
name|allowEmpty
argument_list|()
operator|&&
operator|(
name|commit
operator|.
name|getTreeId
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
comment|// If there are no changes to the content, don't create the commit.
return|return;
block|}
if|if
condition|(
name|commit
operator|.
name|getTreeId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|commit
operator|.
name|setTreeId
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// In this case, the caller populated the tree without using DirCache.
name|res
operator|=
name|commit
operator|.
name|getTreeId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
name|commit
operator|.
name|addParentId
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
name|src
operator|=
name|inserter
operator|.
name|insert
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|srcTree
operator|=
name|res
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RevCommit
name|createRef
parameter_list|(
name|String
name|refName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|src
argument_list|,
name|revision
argument_list|)
condition|)
block|{
return|return
name|revision
return|;
block|}
name|RefUpdate
name|ru
init|=
name|db
operator|.
name|updateRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|ru
operator|.
name|disableRefLog
argument_list|()
expr_stmt|;
name|inserter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|RefUpdate
operator|.
name|Result
name|result
init|=
name|ru
operator|.
name|update
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|NEW
case|:
name|revision
operator|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|ru
operator|.
name|getNewObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|fireGitRefUpdatedEvent
argument_list|(
name|ru
argument_list|)
expr_stmt|;
return|return
name|revision
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot update "
operator|+
name|ru
operator|.
name|getName
argument_list|()
operator|+
literal|" in "
operator|+
name|db
operator|.
name|getDirectory
argument_list|()
operator|+
literal|": "
operator|+
name|ru
operator|.
name|getResult
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RevCommit
name|commit
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|commitAt
argument_list|(
name|revision
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RevCommit
name|commitAt
parameter_list|(
name|ObjectId
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|src
argument_list|,
name|expected
argument_list|)
condition|)
block|{
return|return
name|revision
return|;
block|}
name|RefUpdate
name|ru
init|=
name|db
operator|.
name|updateRef
argument_list|(
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|!=
literal|null
condition|)
block|{
name|ru
operator|.
name|setExpectedOldObjectId
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ru
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|ru
operator|.
name|disableRefLog
argument_list|()
expr_stmt|;
name|inserter
operator|.
name|flush
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|ru
operator|.
name|update
argument_list|(
name|rw
argument_list|)
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|FAST_FORWARD
case|:
name|revision
operator|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|ru
operator|.
name|getNewObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|fireGitRefUpdatedEvent
argument_list|(
name|ru
argument_list|)
expr_stmt|;
return|return
name|revision
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot update "
operator|+
name|ru
operator|.
name|getName
argument_list|()
operator|+
literal|" in "
operator|+
name|db
operator|.
name|getDirectory
argument_list|()
operator|+
literal|": "
operator|+
name|ru
operator|.
name|getResult
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|newTree
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|inserter
operator|!=
literal|null
condition|)
block|{
name|inserter
operator|.
name|release
argument_list|()
expr_stmt|;
name|inserter
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|release
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|readTree (RevTree tree)
specifier|protected
name|DirCache
name|readTree
parameter_list|(
name|RevTree
name|tree
parameter_list|)
throws|throws
name|IOException
throws|,
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
block|{
name|DirCache
name|dc
init|=
name|DirCache
operator|.
name|newInCore
argument_list|()
decl_stmt|;
if|if
condition|(
name|tree
operator|!=
literal|null
condition|)
block|{
name|DirCacheBuilder
name|b
init|=
name|dc
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|addTree
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|DirCacheEntry
operator|.
name|STAGE_0
argument_list|,
name|reader
argument_list|,
name|tree
argument_list|)
expr_stmt|;
name|b
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
return|return
name|dc
return|;
block|}
DECL|method|readConfig (String fileName)
specifier|protected
name|Config
name|readConfig
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Config
name|rc
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|readUTF8
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|rc
operator|.
name|fromText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigInvalidException
argument_list|(
literal|"Invalid config file "
operator|+
name|fileName
operator|+
literal|" in commit "
operator|+
name|revision
operator|.
name|name
argument_list|()
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
return|return
name|rc
return|;
block|}
DECL|method|readUTF8 (String fileName)
specifier|protected
name|String
name|readUTF8
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|raw
init|=
name|readFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
return|return
name|raw
operator|.
name|length
operator|!=
literal|0
condition|?
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|raw
argument_list|)
else|:
literal|""
return|;
block|}
DECL|method|readFile (String fileName)
specifier|protected
name|byte
index|[]
name|readFile
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|revision
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|byte
index|[]
block|{}
return|;
block|}
name|TreeWalk
name|tw
init|=
name|TreeWalk
operator|.
name|forPath
argument_list|(
name|reader
argument_list|,
name|fileName
argument_list|,
name|revision
operator|.
name|getTree
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tw
operator|!=
literal|null
condition|)
block|{
name|ObjectLoader
name|obj
init|=
name|reader
operator|.
name|open
argument_list|(
name|tw
operator|.
name|getObjectId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Constants
operator|.
name|OBJ_BLOB
argument_list|)
decl_stmt|;
return|return
name|obj
operator|.
name|getCachedBytes
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|byte
index|[]
block|{}
return|;
block|}
block|}
DECL|method|getObjectId (String fileName)
specifier|protected
name|ObjectId
name|getObjectId
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|revision
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|TreeWalk
name|tw
init|=
name|TreeWalk
operator|.
name|forPath
argument_list|(
name|reader
argument_list|,
name|fileName
argument_list|,
name|revision
operator|.
name|getTree
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tw
operator|!=
literal|null
condition|)
block|{
return|return
name|tw
operator|.
name|getObjectId
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|set (Config rc, String section, String subsection, String name, String value)
specifier|protected
specifier|static
name|void
name|set
parameter_list|(
name|Config
name|rc
parameter_list|,
name|String
name|section
parameter_list|,
name|String
name|subsection
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setString
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|.
name|unset
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|set (Config rc, String section, String subsection, String name, boolean value)
specifier|protected
specifier|static
name|void
name|set
parameter_list|(
name|Config
name|rc
parameter_list|,
name|String
name|section
parameter_list|,
name|String
name|subsection
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
block|{
name|rc
operator|.
name|setBoolean
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|.
name|unset
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|set (Config rc, String section, String subsection, String name, E value, E defaultValue)
specifier|protected
specifier|static
parameter_list|<
name|E
extends|extends
name|Enum
argument_list|<
name|?
argument_list|>
parameter_list|>
name|void
name|set
parameter_list|(
name|Config
name|rc
parameter_list|,
name|String
name|section
parameter_list|,
name|String
name|subsection
parameter_list|,
name|String
name|name
parameter_list|,
name|E
name|value
parameter_list|,
name|E
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
name|defaultValue
condition|)
block|{
name|rc
operator|.
name|setEnum
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|.
name|unset
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|saveConfig (String fileName, Config cfg)
specifier|protected
name|void
name|saveConfig
parameter_list|(
name|String
name|fileName
parameter_list|,
name|Config
name|cfg
parameter_list|)
throws|throws
name|IOException
block|{
name|saveUTF8
argument_list|(
name|fileName
argument_list|,
name|cfg
operator|.
name|toText
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|saveUTF8 (String fileName, String text)
specifier|protected
name|void
name|saveUTF8
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|saveFile
argument_list|(
name|fileName
argument_list|,
name|text
operator|!=
literal|null
condition|?
name|Constants
operator|.
name|encode
argument_list|(
name|text
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|saveFile (String fileName, byte[] raw)
specifier|protected
name|void
name|saveFile
parameter_list|(
name|String
name|fileName
parameter_list|,
name|byte
index|[]
name|raw
parameter_list|)
throws|throws
name|IOException
block|{
name|DirCacheEditor
name|editor
init|=
name|newTree
operator|.
name|editor
argument_list|()
decl_stmt|;
if|if
condition|(
name|raw
operator|!=
literal|null
operator|&&
literal|0
operator|<
name|raw
operator|.
name|length
condition|)
block|{
specifier|final
name|ObjectId
name|blobId
init|=
name|inserter
operator|.
name|insert
argument_list|(
name|Constants
operator|.
name|OBJ_BLOB
argument_list|,
name|raw
argument_list|)
decl_stmt|;
name|editor
operator|.
name|add
argument_list|(
operator|new
name|PathEdit
argument_list|(
name|fileName
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|apply
parameter_list|(
name|DirCacheEntry
name|ent
parameter_list|)
block|{
name|ent
operator|.
name|setFileMode
argument_list|(
name|FileMode
operator|.
name|REGULAR_FILE
argument_list|)
expr_stmt|;
name|ent
operator|.
name|setObjectId
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|editor
operator|.
name|add
argument_list|(
operator|new
name|DeletePath
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|editor
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

