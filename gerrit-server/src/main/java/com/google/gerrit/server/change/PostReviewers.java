begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
operator|.
name|CC
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
operator|.
name|REVIEWER
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupDescription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|NoSuchGroupException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|AddReviewerInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|AddReviewerResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RecipientType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewerInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestModifyView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AnonymousUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountsCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupMembers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|GroupsCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|send
operator|.
name|OutgoingEmailValidator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|RefPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|UpdateException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|PostReviewers
specifier|public
class|class
name|PostReviewers
implements|implements
name|RestModifyView
argument_list|<
name|ChangeResource
argument_list|,
name|AddReviewerInput
argument_list|>
block|{
DECL|field|DEFAULT_MAX_REVIEWERS_WITHOUT_CHECK
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_REVIEWERS_WITHOUT_CHECK
init|=
literal|10
decl_stmt|;
DECL|field|DEFAULT_MAX_REVIEWERS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_REVIEWERS
init|=
literal|20
decl_stmt|;
DECL|field|accounts
specifier|private
specifier|final
name|AccountsCollection
name|accounts
decl_stmt|;
DECL|field|reviewerFactory
specifier|private
specifier|final
name|ReviewerResource
operator|.
name|Factory
name|reviewerFactory
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|groupsCollection
specifier|private
specifier|final
name|GroupsCollection
name|groupsCollection
decl_stmt|;
DECL|field|groupMembersFactory
specifier|private
specifier|final
name|GroupMembers
operator|.
name|Factory
name|groupMembersFactory
decl_stmt|;
DECL|field|accountLoaderFactory
specifier|private
specifier|final
name|AccountLoader
operator|.
name|Factory
name|accountLoaderFactory
decl_stmt|;
DECL|field|dbProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
decl_stmt|;
DECL|field|changeDataFactory
specifier|private
specifier|final
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
decl_stmt|;
DECL|field|batchUpdateFactory
specifier|private
specifier|final
name|BatchUpdate
operator|.
name|Factory
name|batchUpdateFactory
decl_stmt|;
DECL|field|identifiedUserFactory
specifier|private
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
decl_stmt|;
DECL|field|cfg
specifier|private
specifier|final
name|Config
name|cfg
decl_stmt|;
DECL|field|json
specifier|private
specifier|final
name|ReviewerJson
name|json
decl_stmt|;
DECL|field|migration
specifier|private
specifier|final
name|NotesMigration
name|migration
decl_stmt|;
DECL|field|notifyUtil
specifier|private
specifier|final
name|NotifyUtil
name|notifyUtil
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|anonymousProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|AnonymousUser
argument_list|>
name|anonymousProvider
decl_stmt|;
DECL|field|postReviewersOpFactory
specifier|private
specifier|final
name|PostReviewersOp
operator|.
name|Factory
name|postReviewersOpFactory
decl_stmt|;
DECL|field|validator
specifier|private
specifier|final
name|OutgoingEmailValidator
name|validator
decl_stmt|;
annotation|@
name|Inject
DECL|method|PostReviewers ( AccountsCollection accounts, ReviewerResource.Factory reviewerFactory, PermissionBackend permissionBackend, GroupsCollection groupsCollection, GroupMembers.Factory groupMembersFactory, AccountLoader.Factory accountLoaderFactory, Provider<ReviewDb> db, ChangeData.Factory changeDataFactory, BatchUpdate.Factory batchUpdateFactory, IdentifiedUser.GenericFactory identifiedUserFactory, @GerritServerConfig Config cfg, ReviewerJson json, NotesMigration migration, NotifyUtil notifyUtil, ProjectCache projectCache, Provider<AnonymousUser> anonymousProvider, PostReviewersOp.Factory postReviewersOpFactory, OutgoingEmailValidator validator)
name|PostReviewers
parameter_list|(
name|AccountsCollection
name|accounts
parameter_list|,
name|ReviewerResource
operator|.
name|Factory
name|reviewerFactory
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|GroupsCollection
name|groupsCollection
parameter_list|,
name|GroupMembers
operator|.
name|Factory
name|groupMembersFactory
parameter_list|,
name|AccountLoader
operator|.
name|Factory
name|accountLoaderFactory
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
parameter_list|,
name|BatchUpdate
operator|.
name|Factory
name|batchUpdateFactory
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|ReviewerJson
name|json
parameter_list|,
name|NotesMigration
name|migration
parameter_list|,
name|NotifyUtil
name|notifyUtil
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|Provider
argument_list|<
name|AnonymousUser
argument_list|>
name|anonymousProvider
parameter_list|,
name|PostReviewersOp
operator|.
name|Factory
name|postReviewersOpFactory
parameter_list|,
name|OutgoingEmailValidator
name|validator
parameter_list|)
block|{
name|this
operator|.
name|accounts
operator|=
name|accounts
expr_stmt|;
name|this
operator|.
name|reviewerFactory
operator|=
name|reviewerFactory
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|groupsCollection
operator|=
name|groupsCollection
expr_stmt|;
name|this
operator|.
name|groupMembersFactory
operator|=
name|groupMembersFactory
expr_stmt|;
name|this
operator|.
name|accountLoaderFactory
operator|=
name|accountLoaderFactory
expr_stmt|;
name|this
operator|.
name|dbProvider
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|changeDataFactory
operator|=
name|changeDataFactory
expr_stmt|;
name|this
operator|.
name|batchUpdateFactory
operator|=
name|batchUpdateFactory
expr_stmt|;
name|this
operator|.
name|identifiedUserFactory
operator|=
name|identifiedUserFactory
expr_stmt|;
name|this
operator|.
name|cfg
operator|=
name|cfg
expr_stmt|;
name|this
operator|.
name|json
operator|=
name|json
expr_stmt|;
name|this
operator|.
name|migration
operator|=
name|migration
expr_stmt|;
name|this
operator|.
name|notifyUtil
operator|=
name|notifyUtil
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|anonymousProvider
operator|=
name|anonymousProvider
expr_stmt|;
name|this
operator|.
name|postReviewersOpFactory
operator|=
name|postReviewersOpFactory
expr_stmt|;
name|this
operator|.
name|validator
operator|=
name|validator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeResource rsrc, AddReviewerInput input)
specifier|public
name|AddReviewerResult
name|apply
parameter_list|(
name|ChangeResource
name|rsrc
parameter_list|,
name|AddReviewerInput
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
throws|,
name|RestApiException
throws|,
name|UpdateException
throws|,
name|PermissionBackendException
block|{
if|if
condition|(
name|input
operator|.
name|reviewer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"missing reviewer field"
argument_list|)
throw|;
block|}
name|Addition
name|addition
init|=
name|prepareApplication
argument_list|(
name|rsrc
argument_list|,
name|input
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|addition
operator|.
name|op
operator|==
literal|null
condition|)
block|{
return|return
name|addition
operator|.
name|result
return|;
block|}
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|batchUpdateFactory
operator|.
name|create
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getProject
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getUser
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
init|)
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|rsrc
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|id
argument_list|,
name|addition
operator|.
name|op
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
name|addition
operator|.
name|gatherResults
argument_list|()
expr_stmt|;
block|}
return|return
name|addition
operator|.
name|result
return|;
block|}
DECL|method|prepareApplication ( ChangeResource rsrc, AddReviewerInput input, boolean allowGroup)
specifier|public
name|Addition
name|prepareApplication
parameter_list|(
name|ChangeResource
name|rsrc
parameter_list|,
name|AddReviewerInput
name|input
parameter_list|,
name|boolean
name|allowGroup
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|PermissionBackendException
block|{
name|String
name|reviewer
init|=
name|input
operator|.
name|reviewer
decl_stmt|;
name|ReviewerState
name|state
init|=
name|input
operator|.
name|state
argument_list|()
decl_stmt|;
name|NotifyHandling
name|notify
init|=
name|input
operator|.
name|notify
decl_stmt|;
name|ListMultimap
argument_list|<
name|RecipientType
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|accountsToNotify
init|=
literal|null
decl_stmt|;
try|try
block|{
name|accountsToNotify
operator|=
name|notifyUtil
operator|.
name|resolveAccounts
argument_list|(
name|input
operator|.
name|notifyDetails
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRequestException
name|e
parameter_list|)
block|{
return|return
name|fail
argument_list|(
name|reviewer
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
name|boolean
name|confirmed
init|=
name|input
operator|.
name|confirmed
argument_list|()
decl_stmt|;
name|boolean
name|allowByEmail
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|rsrc
operator|.
name|getProject
argument_list|()
argument_list|)
operator|.
name|isEnableReviewerByEmail
argument_list|()
decl_stmt|;
name|Addition
name|byAccountId
init|=
name|addByAccountId
argument_list|(
name|reviewer
argument_list|,
name|rsrc
argument_list|,
name|state
argument_list|,
name|notify
argument_list|,
name|accountsToNotify
argument_list|,
name|allowGroup
argument_list|,
name|allowByEmail
argument_list|)
decl_stmt|;
if|if
condition|(
name|byAccountId
operator|!=
literal|null
condition|)
block|{
return|return
name|byAccountId
return|;
block|}
name|Addition
name|wholeGroup
init|=
name|addWholeGroup
argument_list|(
name|reviewer
argument_list|,
name|rsrc
argument_list|,
name|state
argument_list|,
name|notify
argument_list|,
name|accountsToNotify
argument_list|,
name|confirmed
argument_list|,
name|allowGroup
argument_list|,
name|allowByEmail
argument_list|)
decl_stmt|;
if|if
condition|(
name|wholeGroup
operator|!=
literal|null
condition|)
block|{
return|return
name|wholeGroup
return|;
block|}
return|return
name|addByEmail
argument_list|(
name|reviewer
argument_list|,
name|rsrc
argument_list|,
name|state
argument_list|,
name|notify
argument_list|,
name|accountsToNotify
argument_list|)
return|;
block|}
DECL|method|ccCurrentUser (CurrentUser user, RevisionResource revision)
name|Addition
name|ccCurrentUser
parameter_list|(
name|CurrentUser
name|user
parameter_list|,
name|RevisionResource
name|revision
parameter_list|)
block|{
return|return
operator|new
name|Addition
argument_list|(
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
name|revision
operator|.
name|getChangeResource
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|CC
argument_list|,
name|NotifyHandling
operator|.
name|NONE
argument_list|,
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|addByAccountId ( String reviewer, ChangeResource rsrc, ReviewerState state, NotifyHandling notify, ListMultimap<RecipientType, Account.Id> accountsToNotify, boolean allowGroup, boolean allowByEmail)
specifier|private
name|Addition
name|addByAccountId
parameter_list|(
name|String
name|reviewer
parameter_list|,
name|ChangeResource
name|rsrc
parameter_list|,
name|ReviewerState
name|state
parameter_list|,
name|NotifyHandling
name|notify
parameter_list|,
name|ListMultimap
argument_list|<
name|RecipientType
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|accountsToNotify
parameter_list|,
name|boolean
name|allowGroup
parameter_list|,
name|boolean
name|allowByEmail
parameter_list|)
throws|throws
name|OrmException
throws|,
name|PermissionBackendException
block|{
name|Account
operator|.
name|Id
name|accountId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|accountId
operator|=
name|accounts
operator|.
name|parse
argument_list|(
name|reviewer
argument_list|)
operator|.
name|getAccountId
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnprocessableEntityException
decl||
name|AuthException
name|e
parameter_list|)
block|{
comment|// AuthException won't occur since the user is authenticated at this point.
if|if
condition|(
operator|!
name|allowGroup
operator|&&
operator|!
name|allowByEmail
condition|)
block|{
comment|// Only return failure if we aren't going to try other interpretations.
return|return
name|fail
argument_list|(
name|reviewer
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|reviewerNotFoundUser
argument_list|,
name|reviewer
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
name|ReviewerResource
name|rrsrc
init|=
name|reviewerFactory
operator|.
name|create
argument_list|(
name|rsrc
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|Account
name|member
init|=
name|rrsrc
operator|.
name|getReviewerUser
argument_list|()
operator|.
name|getAccount
argument_list|()
decl_stmt|;
name|PermissionBackend
operator|.
name|ForRef
name|perm
init|=
name|permissionBackend
operator|.
name|user
argument_list|(
name|rrsrc
operator|.
name|getReviewerUser
argument_list|()
argument_list|)
operator|.
name|ref
argument_list|(
name|rrsrc
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isValidReviewer
argument_list|(
name|member
argument_list|,
name|perm
argument_list|)
condition|)
block|{
return|return
operator|new
name|Addition
argument_list|(
name|reviewer
argument_list|,
name|rsrc
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|member
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|state
argument_list|,
name|notify
argument_list|,
name|accountsToNotify
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|member
operator|.
name|isActive
argument_list|()
condition|)
block|{
if|if
condition|(
name|allowByEmail
operator|&&
name|state
operator|==
name|CC
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|fail
argument_list|(
name|reviewer
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|reviewerInactive
argument_list|,
name|reviewer
argument_list|)
argument_list|)
return|;
block|}
return|return
name|fail
argument_list|(
name|reviewer
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|reviewerCantSeeChange
argument_list|,
name|reviewer
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|addWholeGroup ( String reviewer, ChangeResource rsrc, ReviewerState state, NotifyHandling notify, ListMultimap<RecipientType, Account.Id> accountsToNotify, boolean confirmed, boolean allowGroup, boolean allowByEmail)
specifier|private
name|Addition
name|addWholeGroup
parameter_list|(
name|String
name|reviewer
parameter_list|,
name|ChangeResource
name|rsrc
parameter_list|,
name|ReviewerState
name|state
parameter_list|,
name|NotifyHandling
name|notify
parameter_list|,
name|ListMultimap
argument_list|<
name|RecipientType
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|accountsToNotify
parameter_list|,
name|boolean
name|confirmed
parameter_list|,
name|boolean
name|allowGroup
parameter_list|,
name|boolean
name|allowByEmail
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|PermissionBackendException
block|{
if|if
condition|(
operator|!
name|allowGroup
condition|)
block|{
return|return
literal|null
return|;
block|}
name|GroupDescription
operator|.
name|Basic
name|group
init|=
literal|null
decl_stmt|;
try|try
block|{
name|group
operator|=
name|groupsCollection
operator|.
name|parseInternal
argument_list|(
name|reviewer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnprocessableEntityException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|allowByEmail
condition|)
block|{
return|return
name|fail
argument_list|(
name|reviewer
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|reviewerNotFoundUserOrGroup
argument_list|,
name|reviewer
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|isLegalReviewerGroup
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|fail
argument_list|(
name|reviewer
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|groupIsNotAllowed
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ChangeControl
name|control
init|=
name|rsrc
operator|.
name|getControl
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Account
argument_list|>
name|members
decl_stmt|;
try|try
block|{
name|members
operator|=
name|groupMembersFactory
operator|.
name|create
argument_list|(
name|control
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|listAccounts
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|,
name|control
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchGroupException
name|e
parameter_list|)
block|{
return|return
name|fail
argument_list|(
name|reviewer
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|reviewerNotFoundUserOrGroup
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|e
parameter_list|)
block|{
return|return
name|fail
argument_list|(
name|reviewer
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
comment|// if maxAllowed is set to 0, it is allowed to add any number of
comment|// reviewers
name|int
name|maxAllowed
init|=
name|cfg
operator|.
name|getInt
argument_list|(
literal|"addreviewer"
argument_list|,
literal|"maxAllowed"
argument_list|,
name|DEFAULT_MAX_REVIEWERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxAllowed
operator|>
literal|0
operator|&&
name|members
operator|.
name|size
argument_list|()
operator|>
name|maxAllowed
condition|)
block|{
return|return
name|fail
argument_list|(
name|reviewer
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|groupHasTooManyMembers
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|// if maxWithoutCheck is set to 0, we never ask for confirmation
name|int
name|maxWithoutConfirmation
init|=
name|cfg
operator|.
name|getInt
argument_list|(
literal|"addreviewer"
argument_list|,
literal|"maxWithoutConfirmation"
argument_list|,
name|DEFAULT_MAX_REVIEWERS_WITHOUT_CHECK
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|confirmed
operator|&&
name|maxWithoutConfirmation
operator|>
literal|0
operator|&&
name|members
operator|.
name|size
argument_list|()
operator|>
name|maxWithoutConfirmation
condition|)
block|{
return|return
name|fail
argument_list|(
name|reviewer
argument_list|,
literal|true
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|groupManyMembersConfirmation
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|,
name|members
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|PermissionBackend
operator|.
name|ForRef
name|perm
init|=
name|permissionBackend
operator|.
name|user
argument_list|(
name|rsrc
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|ref
argument_list|(
name|rsrc
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Account
name|member
range|:
name|members
control|)
block|{
if|if
condition|(
name|isValidReviewer
argument_list|(
name|member
argument_list|,
name|perm
argument_list|)
condition|)
block|{
name|reviewers
operator|.
name|add
argument_list|(
name|member
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Addition
argument_list|(
name|reviewer
argument_list|,
name|rsrc
argument_list|,
name|reviewers
argument_list|,
literal|null
argument_list|,
name|state
argument_list|,
name|notify
argument_list|,
name|accountsToNotify
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|addByEmail ( String reviewer, ChangeResource rsrc, ReviewerState state, NotifyHandling notify, ListMultimap<RecipientType, Account.Id> accountsToNotify)
specifier|private
name|Addition
name|addByEmail
parameter_list|(
name|String
name|reviewer
parameter_list|,
name|ChangeResource
name|rsrc
parameter_list|,
name|ReviewerState
name|state
parameter_list|,
name|NotifyHandling
name|notify
parameter_list|,
name|ListMultimap
argument_list|<
name|RecipientType
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|accountsToNotify
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
operator|!
name|rsrc
operator|.
name|getControl
argument_list|()
operator|.
name|forUser
argument_list|(
name|anonymousProvider
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isVisible
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|fail
argument_list|(
name|reviewer
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|reviewerCantSeeChange
argument_list|,
name|reviewer
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|migration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
comment|// addByEmail depends on NoteDb.
return|return
name|fail
argument_list|(
name|reviewer
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|reviewerNotFoundUser
argument_list|,
name|reviewer
argument_list|)
argument_list|)
return|;
block|}
name|Address
name|adr
init|=
name|Address
operator|.
name|tryParse
argument_list|(
name|reviewer
argument_list|)
decl_stmt|;
if|if
condition|(
name|adr
operator|==
literal|null
operator|||
operator|!
name|validator
operator|.
name|isValid
argument_list|(
name|adr
operator|.
name|getEmail
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|fail
argument_list|(
name|reviewer
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|reviewerInvalid
argument_list|,
name|reviewer
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|new
name|Addition
argument_list|(
name|reviewer
argument_list|,
name|rsrc
argument_list|,
literal|null
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|adr
argument_list|)
argument_list|,
name|state
argument_list|,
name|notify
argument_list|,
name|accountsToNotify
argument_list|)
return|;
block|}
DECL|method|isValidReviewer (Account member, PermissionBackend.ForRef perm)
specifier|private
name|boolean
name|isValidReviewer
parameter_list|(
name|Account
name|member
parameter_list|,
name|PermissionBackend
operator|.
name|ForRef
name|perm
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
if|if
condition|(
name|member
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|IdentifiedUser
name|user
init|=
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|member
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Does not account for draft status as a user might want to let a
comment|// reviewer see a draft.
try|try
block|{
name|perm
operator|.
name|user
argument_list|(
name|user
argument_list|)
operator|.
name|check
argument_list|(
name|RefPermission
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|fail (String reviewer, String error)
specifier|private
name|Addition
name|fail
parameter_list|(
name|String
name|reviewer
parameter_list|,
name|String
name|error
parameter_list|)
block|{
return|return
name|fail
argument_list|(
name|reviewer
argument_list|,
literal|false
argument_list|,
name|error
argument_list|)
return|;
block|}
DECL|method|fail (String reviewer, boolean confirm, String error)
specifier|private
name|Addition
name|fail
parameter_list|(
name|String
name|reviewer
parameter_list|,
name|boolean
name|confirm
parameter_list|,
name|String
name|error
parameter_list|)
block|{
name|Addition
name|addition
init|=
operator|new
name|Addition
argument_list|(
name|reviewer
argument_list|)
decl_stmt|;
name|addition
operator|.
name|result
operator|.
name|confirm
operator|=
name|confirm
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|addition
operator|.
name|result
operator|.
name|error
operator|=
name|error
expr_stmt|;
return|return
name|addition
return|;
block|}
DECL|class|Addition
specifier|public
class|class
name|Addition
block|{
DECL|field|result
specifier|final
name|AddReviewerResult
name|result
decl_stmt|;
DECL|field|op
specifier|final
name|PostReviewersOp
name|op
decl_stmt|;
DECL|field|reviewers
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
decl_stmt|;
DECL|field|reviewersByEmail
specifier|final
name|Collection
argument_list|<
name|Address
argument_list|>
name|reviewersByEmail
decl_stmt|;
DECL|field|state
specifier|final
name|ReviewerState
name|state
decl_stmt|;
DECL|field|notes
specifier|final
name|ChangeNotes
name|notes
decl_stmt|;
DECL|field|caller
specifier|final
name|IdentifiedUser
name|caller
decl_stmt|;
DECL|method|Addition (String reviewer)
name|Addition
parameter_list|(
name|String
name|reviewer
parameter_list|)
block|{
name|result
operator|=
operator|new
name|AddReviewerResult
argument_list|(
name|reviewer
argument_list|)
expr_stmt|;
name|op
operator|=
literal|null
expr_stmt|;
name|reviewers
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|()
expr_stmt|;
name|reviewersByEmail
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|()
expr_stmt|;
name|state
operator|=
name|REVIEWER
expr_stmt|;
name|notes
operator|=
literal|null
expr_stmt|;
name|caller
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|Addition ( String reviewer, ChangeResource rsrc, @Nullable Set<Account.Id> reviewers, @Nullable Collection<Address> reviewersByEmail, ReviewerState state, @Nullable NotifyHandling notify, ListMultimap<RecipientType, Account.Id> accountsToNotify)
specifier|protected
name|Addition
parameter_list|(
name|String
name|reviewer
parameter_list|,
name|ChangeResource
name|rsrc
parameter_list|,
annotation|@
name|Nullable
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
parameter_list|,
annotation|@
name|Nullable
name|Collection
argument_list|<
name|Address
argument_list|>
name|reviewersByEmail
parameter_list|,
name|ReviewerState
name|state
parameter_list|,
annotation|@
name|Nullable
name|NotifyHandling
name|notify
parameter_list|,
name|ListMultimap
argument_list|<
name|RecipientType
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|accountsToNotify
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|reviewers
operator|!=
literal|null
operator|||
name|reviewersByEmail
operator|!=
literal|null
argument_list|,
literal|"must have either reviewers or reviewersByEmail"
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|AddReviewerResult
argument_list|(
name|reviewer
argument_list|)
expr_stmt|;
name|this
operator|.
name|reviewers
operator|=
name|reviewers
operator|==
literal|null
condition|?
name|ImmutableSet
operator|.
name|of
argument_list|()
else|:
name|reviewers
expr_stmt|;
name|this
operator|.
name|reviewersByEmail
operator|=
name|reviewersByEmail
operator|==
literal|null
condition|?
name|ImmutableList
operator|.
name|of
argument_list|()
else|:
name|reviewersByEmail
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|notes
operator|=
name|rsrc
operator|.
name|getNotes
argument_list|()
expr_stmt|;
name|caller
operator|=
name|rsrc
operator|.
name|getUser
argument_list|()
expr_stmt|;
name|op
operator|=
name|postReviewersOpFactory
operator|.
name|create
argument_list|(
name|rsrc
argument_list|,
name|this
operator|.
name|reviewers
argument_list|,
name|this
operator|.
name|reviewersByEmail
argument_list|,
name|state
argument_list|,
name|notify
argument_list|,
name|accountsToNotify
argument_list|)
expr_stmt|;
block|}
DECL|method|gatherResults ()
name|void
name|gatherResults
parameter_list|()
throws|throws
name|OrmException
throws|,
name|PermissionBackendException
block|{
if|if
condition|(
name|notes
operator|==
literal|null
operator|||
name|caller
operator|==
literal|null
condition|)
block|{
comment|// When notes or caller is missing this is likely just carrying an error message
comment|// in the contained AddReviewerResult.
return|return;
block|}
name|ChangeData
name|cd
init|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|,
name|notes
argument_list|)
decl_stmt|;
name|PermissionBackend
operator|.
name|ForChange
name|perm
init|=
name|permissionBackend
operator|.
name|user
argument_list|(
name|caller
argument_list|)
operator|.
name|database
argument_list|(
name|dbProvider
argument_list|)
operator|.
name|change
argument_list|(
name|cd
argument_list|)
decl_stmt|;
comment|// Generate result details and fill AccountLoader. This occurs outside
comment|// the Op because the accounts are in a different table.
name|PostReviewersOp
operator|.
name|Result
name|opResult
init|=
name|op
operator|.
name|getResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|migration
operator|.
name|readChanges
argument_list|()
operator|&&
name|state
operator|==
name|CC
condition|)
block|{
name|result
operator|.
name|ccs
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|opResult
operator|.
name|addedCCs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|accountId
range|:
name|opResult
operator|.
name|addedCCs
argument_list|()
control|)
block|{
name|IdentifiedUser
name|u
init|=
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
name|result
operator|.
name|ccs
operator|.
name|add
argument_list|(
name|json
operator|.
name|format
argument_list|(
operator|new
name|ReviewerInfo
argument_list|(
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|perm
operator|.
name|user
argument_list|(
name|u
argument_list|)
argument_list|,
name|cd
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|accountLoaderFactory
operator|.
name|create
argument_list|(
literal|true
argument_list|)
operator|.
name|fill
argument_list|(
name|result
operator|.
name|ccs
argument_list|)
expr_stmt|;
for|for
control|(
name|Address
name|a
range|:
name|reviewersByEmail
control|)
block|{
name|result
operator|.
name|ccs
operator|.
name|add
argument_list|(
operator|new
name|AccountInfo
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|,
name|a
operator|.
name|getEmail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|.
name|reviewers
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|opResult
operator|.
name|addedReviewers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|opResult
operator|.
name|addedReviewers
argument_list|()
control|)
block|{
comment|// New reviewers have value 0, don't bother normalizing.
name|IdentifiedUser
name|u
init|=
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|reviewers
operator|.
name|add
argument_list|(
name|json
operator|.
name|format
argument_list|(
operator|new
name|ReviewerInfo
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|perm
operator|.
name|user
argument_list|(
name|u
argument_list|)
argument_list|,
name|cd
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|psa
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|accountLoaderFactory
operator|.
name|create
argument_list|(
literal|true
argument_list|)
operator|.
name|fill
argument_list|(
name|result
operator|.
name|reviewers
argument_list|)
expr_stmt|;
for|for
control|(
name|Address
name|a
range|:
name|reviewersByEmail
control|)
block|{
name|result
operator|.
name|reviewers
operator|.
name|add
argument_list|(
name|ReviewerInfo
operator|.
name|byEmail
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|,
name|a
operator|.
name|getEmail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|isLegalReviewerGroup (AccountGroup.UUID groupUUID)
specifier|public
specifier|static
name|boolean
name|isLegalReviewerGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUUID
parameter_list|)
block|{
return|return
operator|!
name|SystemGroupBackend
operator|.
name|isSystemGroup
argument_list|(
name|groupUUID
argument_list|)
return|;
block|}
block|}
end_class

end_unit

