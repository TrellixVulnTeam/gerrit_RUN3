begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Comment
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Url
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|CommentRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|CommentJson
class|class
name|CommentJson
block|{
DECL|field|accountLoaderFactory
specifier|private
specifier|final
name|AccountLoader
operator|.
name|Factory
name|accountLoaderFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|CommentJson (AccountLoader.Factory accountLoaderFactory)
name|CommentJson
parameter_list|(
name|AccountLoader
operator|.
name|Factory
name|accountLoaderFactory
parameter_list|)
block|{
name|this
operator|.
name|accountLoaderFactory
operator|=
name|accountLoaderFactory
expr_stmt|;
block|}
DECL|method|format (PatchLineComment c)
name|CommentInfo
name|format
parameter_list|(
name|PatchLineComment
name|c
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|format
argument_list|(
name|c
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|format (PatchLineComment c, boolean fill)
name|CommentInfo
name|format
parameter_list|(
name|PatchLineComment
name|c
parameter_list|,
name|boolean
name|fill
parameter_list|)
throws|throws
name|OrmException
block|{
name|AccountLoader
name|loader
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fill
condition|)
block|{
name|loader
operator|=
name|accountLoaderFactory
operator|.
name|create
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|CommentInfo
name|commentInfo
init|=
name|toCommentInfo
argument_list|(
name|c
argument_list|,
name|loader
argument_list|)
decl_stmt|;
if|if
condition|(
name|fill
condition|)
block|{
name|loader
operator|.
name|fill
argument_list|()
expr_stmt|;
block|}
return|return
name|commentInfo
return|;
block|}
DECL|method|format (Iterable<PatchLineComment> l, boolean fill)
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|format
parameter_list|(
name|Iterable
argument_list|<
name|PatchLineComment
argument_list|>
name|l
parameter_list|,
name|boolean
name|fill
parameter_list|)
throws|throws
name|OrmException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|out
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|AccountLoader
name|accountLoader
init|=
name|fill
condition|?
name|accountLoaderFactory
operator|.
name|create
argument_list|(
literal|true
argument_list|)
else|:
literal|null
decl_stmt|;
for|for
control|(
name|PatchLineComment
name|c
range|:
name|l
control|)
block|{
name|CommentInfo
name|o
init|=
name|toCommentInfo
argument_list|(
name|c
argument_list|,
name|accountLoader
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|list
init|=
name|out
operator|.
name|get
argument_list|(
name|o
operator|.
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|out
operator|.
name|put
argument_list|(
name|o
operator|.
name|path
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|o
operator|.
name|path
operator|=
literal|null
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|list
range|:
name|out
operator|.
name|values
argument_list|()
control|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
operator|new
name|Comparator
argument_list|<
name|CommentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|CommentInfo
name|a
parameter_list|,
name|CommentInfo
name|b
parameter_list|)
block|{
name|int
name|c
init|=
name|firstNonNull
argument_list|(
name|a
operator|.
name|side
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|)
operator|.
name|ordinal
argument_list|()
operator|-
name|firstNonNull
argument_list|(
name|b
operator|.
name|side
argument_list|,
name|Side
operator|.
name|REVISION
argument_list|)
operator|.
name|ordinal
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|firstNonNull
argument_list|(
name|a
operator|.
name|line
argument_list|,
literal|0
argument_list|)
operator|-
name|firstNonNull
argument_list|(
name|b
operator|.
name|line
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|a
operator|.
name|id
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|accountLoader
operator|!=
literal|null
condition|)
block|{
name|accountLoader
operator|.
name|fill
argument_list|()
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|method|toCommentInfo (PatchLineComment c, AccountLoader loader)
specifier|private
name|CommentInfo
name|toCommentInfo
parameter_list|(
name|PatchLineComment
name|c
parameter_list|,
name|AccountLoader
name|loader
parameter_list|)
block|{
name|CommentInfo
name|r
init|=
operator|new
name|CommentInfo
argument_list|()
decl_stmt|;
name|r
operator|.
name|id
operator|=
name|Url
operator|.
name|encode
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|path
operator|=
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|getFileName
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getSide
argument_list|()
operator|==
literal|0
condition|)
block|{
name|r
operator|.
name|side
operator|=
name|Side
operator|.
name|PARENT
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|getLine
argument_list|()
operator|>
literal|0
condition|)
block|{
name|r
operator|.
name|line
operator|=
name|c
operator|.
name|getLine
argument_list|()
expr_stmt|;
block|}
name|r
operator|.
name|inReplyTo
operator|=
name|Url
operator|.
name|encode
argument_list|(
name|c
operator|.
name|getParentUuid
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|message
operator|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|c
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|updated
operator|=
name|c
operator|.
name|getWrittenOn
argument_list|()
expr_stmt|;
name|r
operator|.
name|range
operator|=
name|toRange
argument_list|(
name|c
operator|.
name|getRange
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|loader
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|author
operator|=
name|loader
operator|.
name|get
argument_list|(
name|c
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
DECL|method|toRange (CommentRange commentRange)
specifier|private
name|Range
name|toRange
parameter_list|(
name|CommentRange
name|commentRange
parameter_list|)
block|{
name|Range
name|range
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|commentRange
operator|!=
literal|null
condition|)
block|{
name|range
operator|=
operator|new
name|Range
argument_list|()
expr_stmt|;
name|range
operator|.
name|startLine
operator|=
name|commentRange
operator|.
name|getStartLine
argument_list|()
expr_stmt|;
name|range
operator|.
name|startCharacter
operator|=
name|commentRange
operator|.
name|getStartCharacter
argument_list|()
expr_stmt|;
name|range
operator|.
name|endLine
operator|=
name|commentRange
operator|.
name|getEndLine
argument_list|()
expr_stmt|;
name|range
operator|.
name|endCharacter
operator|=
name|commentRange
operator|.
name|getEndCharacter
argument_list|()
expr_stmt|;
block|}
return|return
name|range
return|;
block|}
block|}
end_class

end_unit

