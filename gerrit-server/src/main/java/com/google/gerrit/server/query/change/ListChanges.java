begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
operator|.
name|ALL_COMMITS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
operator|.
name|ALL_FILES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
operator|.
name|ALL_REVISIONS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
operator|.
name|CURRENT_COMMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
operator|.
name|CURRENT_FILES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
operator|.
name|CURRENT_REVISION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
operator|.
name|LABELS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetInfo
operator|.
name|ParentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|UserIdentity
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AnonymousUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|AccountAttribute
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|QueryParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|SshInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|HostKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ListChanges
specifier|public
class|class
name|ListChanges
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ListChanges
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Singleton
DECL|class|Urls
specifier|static
class|class
name|Urls
block|{
DECL|field|git
specifier|final
name|String
name|git
decl_stmt|;
DECL|field|http
specifier|final
name|String
name|http
decl_stmt|;
annotation|@
name|Inject
DECL|method|Urls (@erritServerConfig Config cfg)
name|Urls
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|)
block|{
name|this
operator|.
name|git
operator|=
name|ensureSlash
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
literal|"gerrit"
argument_list|,
literal|null
argument_list|,
literal|"canonicalGitUrl"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|http
operator|=
name|ensureSlash
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
literal|"gerrit"
argument_list|,
literal|null
argument_list|,
literal|"gitHttpUrl"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureSlash (String in)
specifier|private
specifier|static
name|String
name|ensureSlash
parameter_list|(
name|String
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|!=
literal|null
operator|&&
operator|!
name|in
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
name|in
operator|+
literal|"/"
return|;
block|}
return|return
name|in
return|;
block|}
block|}
DECL|field|imp
specifier|private
specifier|final
name|QueryProcessor
name|imp
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|approvalTypes
specifier|private
specifier|final
name|ApprovalTypes
name|approvalTypes
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|CurrentUser
name|user
decl_stmt|;
DECL|field|anonymous
specifier|private
specifier|final
name|AnonymousUser
name|anonymous
decl_stmt|;
DECL|field|changeControlFactory
specifier|private
specifier|final
name|ChangeControl
operator|.
name|Factory
name|changeControlFactory
decl_stmt|;
DECL|field|patchSetInfoFactory
specifier|private
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
decl_stmt|;
DECL|field|patchListCache
specifier|private
specifier|final
name|PatchListCache
name|patchListCache
decl_stmt|;
DECL|field|sshInfo
specifier|private
specifier|final
name|SshInfo
name|sshInfo
decl_stmt|;
DECL|field|urlProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|String
argument_list|>
name|urlProvider
decl_stmt|;
DECL|field|urls
specifier|private
specifier|final
name|Urls
name|urls
decl_stmt|;
DECL|field|reverse
specifier|private
name|boolean
name|reverse
decl_stmt|;
DECL|field|accounts
specifier|private
name|Map
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|AccountAttribute
argument_list|>
name|accounts
decl_stmt|;
DECL|field|controls
specifier|private
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeControl
argument_list|>
name|controls
decl_stmt|;
DECL|field|options
specifier|private
name|EnumSet
argument_list|<
name|ListChangesOption
argument_list|>
name|options
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--format"
argument_list|,
name|metaVar
operator|=
literal|"FMT"
argument_list|,
name|usage
operator|=
literal|"Output display format"
argument_list|)
DECL|field|format
specifier|private
name|OutputFormat
name|format
init|=
name|OutputFormat
operator|.
name|TEXT
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--query"
argument_list|,
name|aliases
operator|=
block|{
literal|"-q"
block|}
argument_list|,
name|metaVar
operator|=
literal|"QUERY"
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|,
name|usage
operator|=
literal|"Query string"
argument_list|)
DECL|field|queries
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|queries
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--limit"
argument_list|,
name|aliases
operator|=
block|{
literal|"-n"
block|}
argument_list|,
name|metaVar
operator|=
literal|"CNT"
argument_list|,
name|usage
operator|=
literal|"Maximum number of results to return"
argument_list|)
DECL|method|setLimit (int limit)
name|void
name|setLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|imp
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-o"
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|,
name|usage
operator|=
literal|"Output options per change"
argument_list|)
DECL|method|addOption (ListChangesOption o)
name|void
name|addOption
parameter_list|(
name|ListChangesOption
name|o
parameter_list|)
block|{
name|options
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-O"
argument_list|,
name|usage
operator|=
literal|"Output option flags, in hex"
argument_list|)
DECL|method|setOptionFlagsHex (String hex)
name|void
name|setOptionFlagsHex
parameter_list|(
name|String
name|hex
parameter_list|)
block|{
name|options
operator|.
name|addAll
argument_list|(
name|ListChangesOption
operator|.
name|fromBits
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|hex
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-P"
argument_list|,
name|metaVar
operator|=
literal|"SORTKEY"
argument_list|,
name|usage
operator|=
literal|"Previous changes before SORTKEY"
argument_list|)
DECL|method|setSortKeyAfter (String key)
name|void
name|setSortKeyAfter
parameter_list|(
name|String
name|key
parameter_list|)
block|{
comment|// Querying for the prior page of changes requires sortkey_after predicate.
comment|// Changes are shown most recent->least recent. The previous page of
comment|// results contains changes that were updated after the given key.
name|imp
operator|.
name|setSortkeyAfter
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|reverse
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-N"
argument_list|,
name|metaVar
operator|=
literal|"SORTKEY"
argument_list|,
name|usage
operator|=
literal|"Next changes after SORTKEY"
argument_list|)
DECL|method|setSortKeyBefore (String key)
name|void
name|setSortKeyBefore
parameter_list|(
name|String
name|key
parameter_list|)
block|{
comment|// Querying for the next page of changes requires sortkey_before predicate.
comment|// Changes are shown most recent->least recent. The next page contains
comment|// changes that were updated before the given key.
name|imp
operator|.
name|setSortkeyBefore
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Inject
DECL|method|ListChanges (QueryProcessor qp, Provider<ReviewDb> db, ApprovalTypes at, CurrentUser u, AnonymousUser au, ChangeControl.Factory cf, PatchSetInfoFactory psi, PatchListCache plc, SshInfo sshInfo, @CanonicalWebUrl Provider<String> curl, Urls urls)
name|ListChanges
parameter_list|(
name|QueryProcessor
name|qp
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|ApprovalTypes
name|at
parameter_list|,
name|CurrentUser
name|u
parameter_list|,
name|AnonymousUser
name|au
parameter_list|,
name|ChangeControl
operator|.
name|Factory
name|cf
parameter_list|,
name|PatchSetInfoFactory
name|psi
parameter_list|,
name|PatchListCache
name|plc
parameter_list|,
name|SshInfo
name|sshInfo
parameter_list|,
annotation|@
name|CanonicalWebUrl
name|Provider
argument_list|<
name|String
argument_list|>
name|curl
parameter_list|,
name|Urls
name|urls
parameter_list|)
block|{
name|this
operator|.
name|imp
operator|=
name|qp
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|approvalTypes
operator|=
name|at
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|u
expr_stmt|;
name|this
operator|.
name|anonymous
operator|=
name|au
expr_stmt|;
name|this
operator|.
name|changeControlFactory
operator|=
name|cf
expr_stmt|;
name|this
operator|.
name|patchSetInfoFactory
operator|=
name|psi
expr_stmt|;
name|this
operator|.
name|patchListCache
operator|=
name|plc
expr_stmt|;
name|this
operator|.
name|sshInfo
operator|=
name|sshInfo
expr_stmt|;
name|this
operator|.
name|urlProvider
operator|=
name|curl
expr_stmt|;
name|this
operator|.
name|urls
operator|=
name|urls
expr_stmt|;
name|accounts
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|controls
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|options
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|ListChangesOption
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|getFormat ()
specifier|public
name|OutputFormat
name|getFormat
parameter_list|()
block|{
return|return
name|format
return|;
block|}
DECL|method|setFormat (OutputFormat fmt)
specifier|public
name|ListChanges
name|setFormat
parameter_list|(
name|OutputFormat
name|fmt
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|fmt
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|query (Writer out)
specifier|public
name|void
name|query
parameter_list|(
name|Writer
name|out
parameter_list|)
throws|throws
name|OrmException
throws|,
name|QueryParseException
throws|,
name|IOException
block|{
if|if
condition|(
name|imp
operator|.
name|isDisabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"query disabled"
argument_list|)
throw|;
block|}
if|if
condition|(
name|queries
operator|==
literal|null
operator|||
name|queries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|queries
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"status:open"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|queries
operator|.
name|size
argument_list|()
operator|>
literal|10
condition|)
block|{
comment|// Hard-code a default maximum number of queries to prevent
comment|// users from submitting too much to the server in a single call.
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"limit of 10 queries"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|List
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|>
name|res
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|queries
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|query
range|:
name|queries
control|)
block|{
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changes
init|=
name|imp
operator|.
name|queryChanges
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|boolean
name|moreChanges
init|=
name|imp
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
operator|&&
name|changes
operator|.
name|size
argument_list|()
operator|>
name|imp
operator|.
name|getLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|moreChanges
condition|)
block|{
if|if
condition|(
name|reverse
condition|)
block|{
name|changes
operator|=
name|changes
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|changes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|changes
operator|=
name|changes
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|imp
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ChangeData
operator|.
name|ensureChangeLoaded
argument_list|(
name|db
argument_list|,
name|changes
argument_list|)
expr_stmt|;
name|ChangeData
operator|.
name|ensureCurrentPatchSetLoaded
argument_list|(
name|db
argument_list|,
name|changes
argument_list|)
expr_stmt|;
name|ChangeData
operator|.
name|ensureCurrentApprovalsLoaded
argument_list|(
name|db
argument_list|,
name|changes
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|info
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|changes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
name|info
operator|.
name|add
argument_list|(
name|toChangeInfo
argument_list|(
name|cd
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|moreChanges
operator|&&
operator|!
name|info
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|reverse
condition|)
block|{
name|info
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|_moreChanges
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|get
argument_list|(
name|info
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|_moreChanges
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|res
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|accounts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Account
name|account
range|:
name|db
operator|.
name|get
argument_list|()
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|accounts
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|AccountAttribute
name|a
init|=
name|accounts
operator|.
name|get
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|a
operator|.
name|name
operator|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|account
operator|.
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|format
operator|.
name|isJson
argument_list|()
condition|)
block|{
name|format
operator|.
name|newGson
argument_list|()
operator|.
name|toJson
argument_list|(
name|res
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
name|res
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|firstQuery
init|=
literal|true
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|info
range|:
name|res
control|)
block|{
if|if
condition|(
name|firstQuery
condition|)
block|{
name|firstQuery
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChangeInfo
name|c
range|:
name|info
control|)
block|{
name|String
name|id
init|=
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|c
operator|.
name|id
argument_list|)
operator|.
name|abbreviate
argument_list|()
decl_stmt|;
name|String
name|subject
init|=
name|c
operator|.
name|subject
decl_stmt|;
if|if
condition|(
name|subject
operator|.
name|length
argument_list|()
operator|+
name|id
operator|.
name|length
argument_list|()
operator|>
literal|80
condition|)
block|{
name|subject
operator|=
name|subject
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|80
operator|-
name|id
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|subject
operator|.
name|replace
argument_list|(
literal|'\n'
argument_list|,
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|toChangeInfo (ChangeData cd)
specifier|private
name|ChangeInfo
name|toChangeInfo
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeInfo
name|out
init|=
operator|new
name|ChangeInfo
argument_list|()
decl_stmt|;
name|Change
name|in
init|=
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|out
operator|.
name|project
operator|=
name|in
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|out
operator|.
name|branch
operator|=
name|in
operator|.
name|getDest
argument_list|()
operator|.
name|getShortName
argument_list|()
expr_stmt|;
name|out
operator|.
name|topic
operator|=
name|in
operator|.
name|getTopic
argument_list|()
expr_stmt|;
name|out
operator|.
name|id
operator|=
name|in
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|out
operator|.
name|subject
operator|=
name|in
operator|.
name|getSubject
argument_list|()
expr_stmt|;
name|out
operator|.
name|status
operator|=
name|in
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|out
operator|.
name|owner
operator|=
name|asAccountAttribute
argument_list|(
name|in
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|created
operator|=
name|in
operator|.
name|getCreatedOn
argument_list|()
expr_stmt|;
name|out
operator|.
name|updated
operator|=
name|in
operator|.
name|getLastUpdatedOn
argument_list|()
expr_stmt|;
name|out
operator|.
name|_number
operator|=
name|in
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|out
operator|.
name|_sortkey
operator|=
name|in
operator|.
name|getSortKey
argument_list|()
expr_stmt|;
name|out
operator|.
name|starred
operator|=
name|user
operator|.
name|getStarredChanges
argument_list|()
operator|.
name|contains
argument_list|(
name|in
operator|.
name|getId
argument_list|()
argument_list|)
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|out
operator|.
name|reviewed
operator|=
name|in
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
operator|&&
name|isChangeReviewed
argument_list|(
name|cd
argument_list|)
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|out
operator|.
name|labels
operator|=
name|options
operator|.
name|contains
argument_list|(
name|LABELS
argument_list|)
condition|?
name|labelsFor
argument_list|(
name|cd
argument_list|)
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|ALL_REVISIONS
argument_list|)
operator|||
name|options
operator|.
name|contains
argument_list|(
name|CURRENT_REVISION
argument_list|)
condition|)
block|{
name|out
operator|.
name|revisions
operator|=
name|revisions
argument_list|(
name|cd
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|commit
range|:
name|out
operator|.
name|revisions
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|out
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|commit
argument_list|)
operator|.
name|isCurrent
condition|)
block|{
name|out
operator|.
name|current_revision
operator|=
name|commit
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|out
return|;
block|}
DECL|method|asAccountAttribute (Account.Id user)
specifier|private
name|AccountAttribute
name|asAccountAttribute
parameter_list|(
name|Account
operator|.
name|Id
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|AccountAttribute
name|a
init|=
name|accounts
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|a
operator|=
operator|new
name|AccountAttribute
argument_list|()
expr_stmt|;
name|accounts
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
DECL|method|control (ChangeData cd)
specifier|private
name|ChangeControl
name|control
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeControl
name|ctrl
init|=
name|cd
operator|.
name|changeControl
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctrl
operator|!=
literal|null
operator|&&
name|ctrl
operator|.
name|getCurrentUser
argument_list|()
operator|==
name|user
condition|)
block|{
return|return
name|ctrl
return|;
block|}
name|ctrl
operator|=
name|controls
operator|.
name|get
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctrl
operator|!=
literal|null
condition|)
block|{
return|return
name|ctrl
return|;
block|}
try|try
block|{
name|ctrl
operator|=
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchChangeException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|controls
operator|.
name|put
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|ctrl
argument_list|)
expr_stmt|;
return|return
name|ctrl
return|;
block|}
DECL|method|labelsFor (ChangeData cd)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labelsFor
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeControl
name|ctl
init|=
name|control
argument_list|(
name|cd
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctl
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|PatchSet
name|ps
init|=
name|cd
operator|.
name|currentPatchSet
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labels
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|SubmitRecord
name|rec
range|:
name|ctl
operator|.
name|canSubmit
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|ps
argument_list|,
name|cd
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
control|)
block|{
if|if
condition|(
name|rec
operator|.
name|labels
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|SubmitRecord
operator|.
name|Label
name|r
range|:
name|rec
operator|.
name|labels
control|)
block|{
name|LabelInfo
name|p
init|=
name|labels
operator|.
name|get
argument_list|(
name|r
operator|.
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
operator|.
name|_status
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|status
argument_list|)
operator|<
literal|0
condition|)
block|{
name|LabelInfo
name|n
init|=
operator|new
name|LabelInfo
argument_list|()
decl_stmt|;
name|n
operator|.
name|_status
operator|=
name|r
operator|.
name|status
expr_stmt|;
switch|switch
condition|(
name|r
operator|.
name|status
condition|)
block|{
case|case
name|OK
case|:
name|n
operator|.
name|approved
operator|=
name|asAccountAttribute
argument_list|(
name|r
operator|.
name|appliedBy
argument_list|)
expr_stmt|;
break|break;
case|case
name|REJECT
case|:
name|n
operator|.
name|rejected
operator|=
name|asAccountAttribute
argument_list|(
name|r
operator|.
name|appliedBy
argument_list|)
expr_stmt|;
break|break;
block|}
name|n
operator|.
name|optional
operator|=
name|n
operator|.
name|_status
operator|==
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
operator|.
name|MAY
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|labels
operator|.
name|put
argument_list|(
name|r
operator|.
name|label
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Collection
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvals
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|e
range|:
name|labels
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|approved
operator|!=
literal|null
operator|||
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|rejected
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|ApprovalType
name|type
init|=
name|approvalTypes
operator|.
name|byLabel
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|getMin
argument_list|()
operator|==
literal|null
operator|||
name|type
operator|.
name|getMax
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Unknown or misconfigured type can't have intermediate scores.
continue|continue;
block|}
name|short
name|min
init|=
name|type
operator|.
name|getMin
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|short
name|max
init|=
name|type
operator|.
name|getMax
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<=
name|min
operator|&&
name|max
operator|<=
literal|1
condition|)
block|{
comment|// Types with a range of -1..+1 can't have intermediate scores.
continue|continue;
block|}
if|if
condition|(
name|approvals
operator|==
literal|null
condition|)
block|{
name|approvals
operator|=
name|cd
operator|.
name|currentApprovals
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|approvals
control|)
block|{
name|short
name|val
init|=
name|psa
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|0
operator|&&
name|min
operator|<
name|val
operator|&&
name|val
operator|<
name|max
operator|&&
name|psa
operator|.
name|getCategoryId
argument_list|()
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getCategory
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|0
operator|<
name|val
condition|)
block|{
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|recommended
operator|=
name|asAccountAttribute
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|value
operator|=
name|val
operator|!=
literal|1
condition|?
name|val
else|:
literal|null
expr_stmt|;
block|}
else|else
block|{
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|disliked
operator|=
name|asAccountAttribute
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|value
operator|=
name|val
operator|!=
operator|-
literal|1
condition|?
name|val
else|:
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|labels
return|;
block|}
DECL|method|isChangeReviewed (ChangeData cd)
specifier|private
name|boolean
name|isChangeReviewed
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|user
operator|instanceof
name|IdentifiedUser
condition|)
block|{
name|PatchSet
name|currentPatchSet
init|=
name|cd
operator|.
name|currentPatchSet
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentPatchSet
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|messages
init|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|changeMessages
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|currentPatchSet
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
name|messages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Sort messages to let the most recent ones at the beginning.
name|Collections
operator|.
name|sort
argument_list|(
name|messages
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ChangeMessage
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ChangeMessage
name|a
parameter_list|,
name|ChangeMessage
name|b
parameter_list|)
block|{
return|return
name|b
operator|.
name|getWrittenOn
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Account
operator|.
name|Id
name|currentUserId
init|=
operator|(
operator|(
name|IdentifiedUser
operator|)
name|user
operator|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|changeOwnerId
init|=
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
operator|.
name|getOwner
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeMessage
name|cm
range|:
name|messages
control|)
block|{
if|if
condition|(
name|currentUserId
operator|.
name|equals
argument_list|(
name|cm
operator|.
name|getAuthor
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|changeOwnerId
operator|.
name|equals
argument_list|(
name|cm
operator|.
name|getAuthor
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|revisions (ChangeData cd)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RevisionInfo
argument_list|>
name|revisions
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeControl
name|ctl
init|=
name|control
argument_list|(
name|cd
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctl
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|Collection
argument_list|<
name|PatchSet
argument_list|>
name|src
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|ALL_REVISIONS
argument_list|)
condition|)
block|{
name|src
operator|=
name|cd
operator|.
name|patches
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|src
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|cd
operator|.
name|currentPatchSet
argument_list|(
name|db
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RevisionInfo
argument_list|>
name|res
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSet
name|in
range|:
name|src
control|)
block|{
if|if
condition|(
name|ctl
operator|.
name|isPatchVisible
argument_list|(
name|in
argument_list|,
name|db
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|res
operator|.
name|put
argument_list|(
name|in
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|toRevisionInfo
argument_list|(
name|cd
argument_list|,
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
DECL|method|toRevisionInfo (ChangeData cd, PatchSet in)
specifier|private
name|RevisionInfo
name|toRevisionInfo
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|PatchSet
name|in
parameter_list|)
throws|throws
name|OrmException
block|{
name|RevisionInfo
name|out
init|=
operator|new
name|RevisionInfo
argument_list|()
decl_stmt|;
name|out
operator|.
name|isCurrent
operator|=
name|in
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|_number
operator|=
name|in
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|out
operator|.
name|draft
operator|=
name|in
operator|.
name|isDraft
argument_list|()
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|out
operator|.
name|fetch
operator|=
name|makeFetchMap
argument_list|(
name|cd
argument_list|,
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|ALL_COMMITS
argument_list|)
operator|||
operator|(
name|out
operator|.
name|isCurrent
operator|&&
name|options
operator|.
name|contains
argument_list|(
name|CURRENT_COMMIT
argument_list|)
operator|)
condition|)
block|{
try|try
block|{
name|PatchSetInfo
name|info
init|=
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|in
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|commit
operator|=
operator|new
name|CommitInfo
argument_list|()
expr_stmt|;
name|out
operator|.
name|commit
operator|.
name|parents
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|info
operator|.
name|getParents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|commit
operator|.
name|author
operator|=
name|toGitPerson
argument_list|(
name|info
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|commit
operator|.
name|committer
operator|=
name|toGitPerson
argument_list|(
name|info
operator|.
name|getCommitter
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|commit
operator|.
name|subject
operator|=
name|info
operator|.
name|getSubject
argument_list|()
expr_stmt|;
name|out
operator|.
name|commit
operator|.
name|message
operator|=
name|info
operator|.
name|getMessage
argument_list|()
expr_stmt|;
for|for
control|(
name|ParentInfo
name|parent
range|:
name|info
operator|.
name|getParents
argument_list|()
control|)
block|{
name|CommitInfo
name|i
init|=
operator|new
name|CommitInfo
argument_list|()
decl_stmt|;
name|i
operator|.
name|commit
operator|=
name|parent
operator|.
name|id
operator|.
name|get
argument_list|()
expr_stmt|;
name|i
operator|.
name|subject
operator|=
name|parent
operator|.
name|shortMessage
expr_stmt|;
name|out
operator|.
name|commit
operator|.
name|parents
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PatchSetInfoNotAvailableException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot load PatchSetInfo "
operator|+
name|in
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|ALL_FILES
argument_list|)
operator|||
operator|(
name|out
operator|.
name|isCurrent
operator|&&
name|options
operator|.
name|contains
argument_list|(
name|CURRENT_FILES
argument_list|)
operator|)
condition|)
block|{
name|PatchList
name|list
decl_stmt|;
try|try
block|{
name|list
operator|=
name|patchListCache
operator|.
name|get
argument_list|(
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatchListNotAvailableException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot load PatchList "
operator|+
name|in
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|list
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|files
operator|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
expr_stmt|;
for|for
control|(
name|PatchListEntry
name|e
range|:
name|list
operator|.
name|getPatches
argument_list|()
control|)
block|{
if|if
condition|(
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getNewName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|FileInfo
name|d
init|=
operator|new
name|FileInfo
argument_list|()
decl_stmt|;
name|d
operator|.
name|status
operator|=
name|e
operator|.
name|getChangeType
argument_list|()
operator|!=
name|Patch
operator|.
name|ChangeType
operator|.
name|MODIFIED
condition|?
name|e
operator|.
name|getChangeType
argument_list|()
operator|.
name|getCode
argument_list|()
else|:
literal|null
expr_stmt|;
name|d
operator|.
name|oldPath
operator|=
name|e
operator|.
name|getOldName
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getPatchType
argument_list|()
operator|==
name|Patch
operator|.
name|PatchType
operator|.
name|BINARY
condition|)
block|{
name|d
operator|.
name|binary
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|d
operator|.
name|linesInserted
operator|=
name|e
operator|.
name|getInsertions
argument_list|()
operator|>
literal|0
condition|?
name|e
operator|.
name|getInsertions
argument_list|()
else|:
literal|null
expr_stmt|;
name|d
operator|.
name|linesDeleted
operator|=
name|e
operator|.
name|getDeletions
argument_list|()
operator|>
literal|0
condition|?
name|e
operator|.
name|getDeletions
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
name|FileInfo
name|o
init|=
name|out
operator|.
name|files
operator|.
name|put
argument_list|(
name|e
operator|.
name|getNewName
argument_list|()
argument_list|,
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
comment|// This should only happen on a delete-add break created by JGit
comment|// when the file was rewritten and too little content survived. Write
comment|// a single record with data from both sides.
name|d
operator|.
name|status
operator|=
name|Patch
operator|.
name|ChangeType
operator|.
name|REWRITE
operator|.
name|getCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|o
operator|.
name|binary
operator|!=
literal|null
operator|&&
name|o
operator|.
name|binary
condition|)
block|{
name|d
operator|.
name|binary
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|.
name|linesInserted
operator|!=
literal|null
condition|)
block|{
name|d
operator|.
name|linesInserted
operator|=
name|o
operator|.
name|linesInserted
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|.
name|linesDeleted
operator|!=
literal|null
condition|)
block|{
name|d
operator|.
name|linesDeleted
operator|=
name|o
operator|.
name|linesDeleted
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|out
return|;
block|}
DECL|method|makeFetchMap (ChangeData cd, PatchSet in)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FetchInfo
argument_list|>
name|makeFetchMap
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|PatchSet
name|in
parameter_list|)
throws|throws
name|OrmException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|FetchInfo
argument_list|>
name|r
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
name|String
name|refName
init|=
name|in
operator|.
name|getRefName
argument_list|()
decl_stmt|;
name|ChangeControl
name|ctl
init|=
name|control
argument_list|(
name|cd
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctl
operator|!=
literal|null
operator|&&
name|ctl
operator|.
name|forUser
argument_list|(
name|anonymous
argument_list|)
operator|.
name|isPatchVisible
argument_list|(
name|in
argument_list|,
name|db
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|urls
operator|.
name|git
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|put
argument_list|(
literal|"git"
argument_list|,
operator|new
name|FetchInfo
argument_list|(
name|urls
operator|.
name|git
operator|+
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|refName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|urls
operator|.
name|http
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|put
argument_list|(
literal|"http"
argument_list|,
operator|new
name|FetchInfo
argument_list|(
name|urls
operator|.
name|http
operator|+
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|refName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|http
init|=
name|urlProvider
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|http
argument_list|)
condition|)
block|{
name|r
operator|.
name|put
argument_list|(
literal|"http"
argument_list|,
operator|new
name|FetchInfo
argument_list|(
name|http
operator|+
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|refName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|sshInfo
operator|.
name|getHostKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HostKey
name|host
init|=
name|sshInfo
operator|.
name|getHostKeys
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|r
operator|.
name|put
argument_list|(
literal|"ssh"
argument_list|,
operator|new
name|FetchInfo
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"ssh://%s/%s"
argument_list|,
name|host
operator|.
name|getHost
argument_list|()
argument_list|,
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|refName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
DECL|method|toGitPerson (UserIdentity committer)
specifier|private
specifier|static
name|GitPerson
name|toGitPerson
parameter_list|(
name|UserIdentity
name|committer
parameter_list|)
block|{
name|GitPerson
name|p
init|=
operator|new
name|GitPerson
argument_list|()
decl_stmt|;
name|p
operator|.
name|name
operator|=
name|committer
operator|.
name|getName
argument_list|()
expr_stmt|;
name|p
operator|.
name|email
operator|=
name|committer
operator|.
name|getEmail
argument_list|()
expr_stmt|;
name|p
operator|.
name|date
operator|=
name|committer
operator|.
name|getDate
argument_list|()
expr_stmt|;
name|p
operator|.
name|tz
operator|=
name|committer
operator|.
name|getTimeZone
argument_list|()
expr_stmt|;
return|return
name|p
return|;
block|}
DECL|class|ChangeInfo
specifier|static
class|class
name|ChangeInfo
block|{
DECL|field|project
name|String
name|project
decl_stmt|;
DECL|field|branch
name|String
name|branch
decl_stmt|;
DECL|field|topic
name|String
name|topic
decl_stmt|;
DECL|field|id
name|String
name|id
decl_stmt|;
DECL|field|subject
name|String
name|subject
decl_stmt|;
DECL|field|status
name|Change
operator|.
name|Status
name|status
decl_stmt|;
DECL|field|created
name|Timestamp
name|created
decl_stmt|;
DECL|field|updated
name|Timestamp
name|updated
decl_stmt|;
DECL|field|starred
name|Boolean
name|starred
decl_stmt|;
DECL|field|reviewed
name|Boolean
name|reviewed
decl_stmt|;
DECL|field|_sortkey
name|String
name|_sortkey
decl_stmt|;
DECL|field|_number
name|int
name|_number
decl_stmt|;
DECL|field|owner
name|AccountAttribute
name|owner
decl_stmt|;
DECL|field|labels
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labels
decl_stmt|;
DECL|field|current_revision
name|String
name|current_revision
decl_stmt|;
DECL|field|revisions
name|Map
argument_list|<
name|String
argument_list|,
name|RevisionInfo
argument_list|>
name|revisions
decl_stmt|;
DECL|field|_moreChanges
name|Boolean
name|_moreChanges
decl_stmt|;
block|}
DECL|class|RevisionInfo
specifier|static
class|class
name|RevisionInfo
block|{
DECL|field|isCurrent
specifier|private
specifier|transient
name|boolean
name|isCurrent
decl_stmt|;
DECL|field|draft
name|Boolean
name|draft
decl_stmt|;
DECL|field|_number
name|int
name|_number
decl_stmt|;
DECL|field|fetch
name|Map
argument_list|<
name|String
argument_list|,
name|FetchInfo
argument_list|>
name|fetch
decl_stmt|;
DECL|field|commit
name|CommitInfo
name|commit
decl_stmt|;
DECL|field|files
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|files
decl_stmt|;
block|}
DECL|class|FetchInfo
specifier|static
class|class
name|FetchInfo
block|{
DECL|field|url
name|String
name|url
decl_stmt|;
DECL|field|ref
name|String
name|ref
decl_stmt|;
DECL|method|FetchInfo (String url, String ref)
name|FetchInfo
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|ref
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|ref
operator|=
name|ref
expr_stmt|;
block|}
block|}
DECL|class|GitPerson
specifier|static
class|class
name|GitPerson
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|email
name|String
name|email
decl_stmt|;
DECL|field|date
name|Timestamp
name|date
decl_stmt|;
DECL|field|tz
name|int
name|tz
decl_stmt|;
block|}
DECL|class|CommitInfo
specifier|static
class|class
name|CommitInfo
block|{
DECL|field|commit
name|String
name|commit
decl_stmt|;
DECL|field|parents
name|List
argument_list|<
name|CommitInfo
argument_list|>
name|parents
decl_stmt|;
DECL|field|author
name|GitPerson
name|author
decl_stmt|;
DECL|field|committer
name|GitPerson
name|committer
decl_stmt|;
DECL|field|subject
name|String
name|subject
decl_stmt|;
DECL|field|message
name|String
name|message
decl_stmt|;
block|}
DECL|class|FileInfo
specifier|static
class|class
name|FileInfo
block|{
DECL|field|status
name|Character
name|status
decl_stmt|;
DECL|field|binary
name|Boolean
name|binary
decl_stmt|;
DECL|field|oldPath
name|String
name|oldPath
decl_stmt|;
DECL|field|linesInserted
name|Integer
name|linesInserted
decl_stmt|;
DECL|field|linesDeleted
name|Integer
name|linesDeleted
decl_stmt|;
block|}
DECL|class|LabelInfo
specifier|static
class|class
name|LabelInfo
block|{
DECL|field|_status
specifier|transient
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
name|_status
decl_stmt|;
DECL|field|approved
name|AccountAttribute
name|approved
decl_stmt|;
DECL|field|rejected
name|AccountAttribute
name|rejected
decl_stmt|;
DECL|field|recommended
name|AccountAttribute
name|recommended
decl_stmt|;
DECL|field|disliked
name|AccountAttribute
name|disliked
decl_stmt|;
DECL|field|value
name|Short
name|value
decl_stmt|;
DECL|field|optional
name|Boolean
name|optional
decl_stmt|;
block|}
block|}
end_class

end_unit

