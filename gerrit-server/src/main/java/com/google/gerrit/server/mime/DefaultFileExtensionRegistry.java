begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.mime
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mime
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|medsea
operator|.
name|mimeutil
operator|.
name|MimeException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|medsea
operator|.
name|mimeutil
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|medsea
operator|.
name|mimeutil
operator|.
name|MimeUtil
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|medsea
operator|.
name|mimeutil
operator|.
name|detector
operator|.
name|MimeDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/** Loads mime types from {@code mime-types.properties} at specificity of 2. */
end_comment

begin_class
DECL|class|DefaultFileExtensionRegistry
specifier|public
class|class
name|DefaultFileExtensionRegistry
extends|extends
name|MimeDetector
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultFileExtensionRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TYPES
specifier|private
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|MimeType
argument_list|>
name|TYPES
decl_stmt|;
static|static
block|{
name|Properties
name|prop
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
name|DefaultFileExtensionRegistry
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"mime-types.properties"
argument_list|)
init|)
block|{
name|prop
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot load mime-types.properties"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|MimeType
argument_list|>
name|b
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|prop
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MimeType
name|type
init|=
operator|new
name|FileExtensionMimeType
argument_list|(
operator|(
name|String
operator|)
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|MimeUtil
operator|.
name|addKnownMimeType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|TYPES
operator|=
name|b
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMimeTypesFileName (String name)
specifier|protected
name|Collection
argument_list|<
name|MimeType
argument_list|>
name|getMimeTypesFileName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|s
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|>=
literal|0
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|s
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|MimeType
name|type
init|=
name|TYPES
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|type
argument_list|)
return|;
block|}
name|int
name|d
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|d
condition|)
block|{
name|type
operator|=
name|TYPES
operator|.
name|get
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|d
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMimeTypesFile (File file)
specifier|protected
name|Collection
argument_list|<
name|MimeType
argument_list|>
name|getMimeTypesFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
return|return
name|getMimeTypesFileName
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMimeTypesURL (URL url)
specifier|protected
name|Collection
argument_list|<
name|MimeType
argument_list|>
name|getMimeTypesURL
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
return|return
name|getMimeTypesFileName
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMimeTypesInputStream (InputStream arg0)
specifier|protected
name|Collection
argument_list|<
name|MimeType
argument_list|>
name|getMimeTypesInputStream
parameter_list|(
name|InputStream
name|arg0
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMimeTypesByteArray (byte[] arg0)
specifier|protected
name|Collection
argument_list|<
name|MimeType
argument_list|>
name|getMimeTypesByteArray
parameter_list|(
name|byte
index|[]
name|arg0
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
DECL|class|FileExtensionMimeType
specifier|private
specifier|static
specifier|final
class|class
name|FileExtensionMimeType
extends|extends
name|MimeType
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|FileExtensionMimeType (String mimeType)
name|FileExtensionMimeType
parameter_list|(
name|String
name|mimeType
parameter_list|)
throws|throws
name|MimeException
block|{
name|super
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSpecificity ()
specifier|public
name|int
name|getSpecificity
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
block|}
block|}
end_class

end_unit

