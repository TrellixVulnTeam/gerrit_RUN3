begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CheckedFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|ChangeIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|AssistedInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BatchRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|NullProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_comment
comment|/**  * Context for a set of updates that should be applied for a site.  *<p>  * An update operation can be divided into three phases:  *<ol>  *<li>Git reference updates</li>  *<li>Database updates</li>  *<li>Post-update steps<li>  *</ol>  * A single conceptual operation, such as a REST API call or a merge operation,  * may make multiple changes at each step, which all need to be serialized  * relative to each other. Moreover, for consistency,<em>all</em> git ref  * updates must be performed before<em>any</em> database updates, since  * database updates might refer to newly-created patch set refs. And all  * post-update steps, such as hooks, should run only after all storage  * mutations have completed.  *<p>  * Depending on the backend used, each step might support batching, for example  * in a {@code BatchRefUpdate} or one or more database transactions. All  * operations in one phase must complete successfully before proceeding to the  * next phase.  */
end_comment

begin_class
DECL|class|BatchUpdate
specifier|public
class|class
name|BatchUpdate
implements|implements
name|AutoCloseable
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (ReviewDb db, Project.NameKey project, CurrentUser user, Timestamp when)
name|BatchUpdate
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|CurrentUser
name|user
parameter_list|,
name|Timestamp
name|when
parameter_list|)
function_decl|;
block|}
DECL|class|Context
specifier|public
class|class
name|Context
block|{
DECL|method|getProject ()
specifier|public
name|Project
operator|.
name|NameKey
name|getProject
parameter_list|()
block|{
return|return
name|project
return|;
block|}
DECL|method|getWhen ()
specifier|public
name|Timestamp
name|getWhen
parameter_list|()
block|{
return|return
name|when
return|;
block|}
DECL|method|getDb ()
specifier|public
name|ReviewDb
name|getDb
parameter_list|()
block|{
return|return
name|db
return|;
block|}
DECL|method|getUser ()
specifier|public
name|CurrentUser
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
block|}
DECL|class|RepoContext
specifier|public
class|class
name|RepoContext
extends|extends
name|Context
block|{
DECL|method|getRepository ()
specifier|public
name|Repository
name|getRepository
parameter_list|()
throws|throws
name|IOException
block|{
name|initRepository
argument_list|()
expr_stmt|;
return|return
name|repo
return|;
block|}
DECL|method|getRevWalk ()
specifier|public
name|RevWalk
name|getRevWalk
parameter_list|()
throws|throws
name|IOException
block|{
name|initRepository
argument_list|()
expr_stmt|;
return|return
name|revWalk
return|;
block|}
DECL|method|getInserter ()
specifier|public
name|ObjectInserter
name|getInserter
parameter_list|()
throws|throws
name|IOException
block|{
name|initRepository
argument_list|()
expr_stmt|;
return|return
name|inserter
return|;
block|}
DECL|method|getBatchRefUpdate ()
specifier|public
name|BatchRefUpdate
name|getBatchRefUpdate
parameter_list|()
throws|throws
name|IOException
block|{
name|initRepository
argument_list|()
expr_stmt|;
if|if
condition|(
name|batchRefUpdate
operator|==
literal|null
condition|)
block|{
name|batchRefUpdate
operator|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|newBatchUpdate
argument_list|()
expr_stmt|;
block|}
return|return
name|batchRefUpdate
return|;
block|}
DECL|method|addRefUpdate (ReceiveCommand cmd)
specifier|public
name|void
name|addRefUpdate
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|getBatchRefUpdate
argument_list|()
operator|.
name|addCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
DECL|method|getTimeZone ()
specifier|public
name|TimeZone
name|getTimeZone
parameter_list|()
block|{
return|return
name|tz
return|;
block|}
block|}
DECL|class|ChangeContext
specifier|public
class|class
name|ChangeContext
extends|extends
name|Context
block|{
DECL|field|ctl
specifier|private
specifier|final
name|ChangeControl
name|ctl
decl_stmt|;
DECL|field|update
specifier|private
specifier|final
name|ChangeUpdate
name|update
decl_stmt|;
DECL|method|ChangeContext (ChangeControl ctl)
specifier|private
name|ChangeContext
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|)
block|{
name|this
operator|.
name|ctl
operator|=
name|ctl
expr_stmt|;
name|this
operator|.
name|update
operator|=
name|changeUpdateFactory
operator|.
name|create
argument_list|(
name|ctl
argument_list|,
name|when
argument_list|)
expr_stmt|;
block|}
DECL|method|getChangeUpdate ()
specifier|public
name|ChangeUpdate
name|getChangeUpdate
parameter_list|()
block|{
return|return
name|update
return|;
block|}
DECL|method|getChangeNotes ()
specifier|public
name|ChangeNotes
name|getChangeNotes
parameter_list|()
block|{
return|return
name|update
operator|.
name|getChangeNotes
argument_list|()
return|;
block|}
DECL|method|getChangeControl ()
specifier|public
name|ChangeControl
name|getChangeControl
parameter_list|()
block|{
return|return
name|ctl
return|;
block|}
DECL|method|getChange ()
specifier|public
name|Change
name|getChange
parameter_list|()
block|{
return|return
name|update
operator|.
name|getChange
argument_list|()
return|;
block|}
block|}
DECL|class|Op
specifier|public
specifier|static
class|class
name|Op
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|updateRepo (RepoContext ctx)
specifier|public
name|void
name|updateRepo
parameter_list|(
name|RepoContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{     }
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|updateChange (ChangeContext ctx)
specifier|public
name|void
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{     }
comment|// TODO(dborowitz): Support async operations?
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|postUpdate (Context ctx)
specifier|public
name|void
name|postUpdate
parameter_list|(
name|Context
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{     }
block|}
DECL|class|InsertChangeOp
specifier|public
specifier|abstract
specifier|static
class|class
name|InsertChangeOp
extends|extends
name|Op
block|{
DECL|method|getChange ()
specifier|public
specifier|abstract
name|Change
name|getChange
parameter_list|()
function_decl|;
block|}
DECL|field|db
specifier|private
specifier|final
name|ReviewDb
name|db
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|indexer
specifier|private
specifier|final
name|ChangeIndexer
name|indexer
decl_stmt|;
DECL|field|changeControlFactory
specifier|private
specifier|final
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
DECL|field|changeUpdateFactory
specifier|private
specifier|final
name|ChangeUpdate
operator|.
name|Factory
name|changeUpdateFactory
decl_stmt|;
DECL|field|gitRefUpdated
specifier|private
specifier|final
name|GitReferenceUpdated
name|gitRefUpdated
decl_stmt|;
DECL|field|project
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|project
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|CurrentUser
name|user
decl_stmt|;
DECL|field|when
specifier|private
specifier|final
name|Timestamp
name|when
decl_stmt|;
DECL|field|tz
specifier|private
specifier|final
name|TimeZone
name|tz
decl_stmt|;
DECL|field|ops
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|Op
argument_list|>
name|ops
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|field|newChanges
specifier|private
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|Change
argument_list|>
name|newChanges
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|indexFutures
specifier|private
specifier|final
name|List
argument_list|<
name|CheckedFuture
argument_list|<
name|?
argument_list|,
name|IOException
argument_list|>
argument_list|>
name|indexFutures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|repo
specifier|private
name|Repository
name|repo
decl_stmt|;
DECL|field|inserter
specifier|private
name|ObjectInserter
name|inserter
decl_stmt|;
DECL|field|revWalk
specifier|private
name|RevWalk
name|revWalk
decl_stmt|;
DECL|field|batchRefUpdate
specifier|private
name|BatchRefUpdate
name|batchRefUpdate
decl_stmt|;
DECL|field|closeRepo
specifier|private
name|boolean
name|closeRepo
decl_stmt|;
annotation|@
name|AssistedInject
DECL|method|BatchUpdate (GitRepositoryManager repoManager, ChangeIndexer indexer, ChangeControl.GenericFactory changeControlFactory, ChangeUpdate.Factory changeUpdateFactory, GitReferenceUpdated gitRefUpdated, @GerritPersonIdent PersonIdent serverIdent, @Assisted ReviewDb db, @Assisted Project.NameKey project, @Assisted CurrentUser user, @Assisted Timestamp when)
name|BatchUpdate
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|ChangeIndexer
name|indexer
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
parameter_list|,
name|ChangeUpdate
operator|.
name|Factory
name|changeUpdateFactory
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverIdent
parameter_list|,
annotation|@
name|Assisted
name|ReviewDb
name|db
parameter_list|,
annotation|@
name|Assisted
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
annotation|@
name|Assisted
name|CurrentUser
name|user
parameter_list|,
annotation|@
name|Assisted
name|Timestamp
name|when
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
name|this
operator|.
name|changeControlFactory
operator|=
name|changeControlFactory
expr_stmt|;
name|this
operator|.
name|changeUpdateFactory
operator|=
name|changeUpdateFactory
expr_stmt|;
name|this
operator|.
name|gitRefUpdated
operator|=
name|gitRefUpdated
expr_stmt|;
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|when
operator|=
name|when
expr_stmt|;
name|tz
operator|=
name|serverIdent
operator|.
name|getTimeZone
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closeRepo
condition|)
block|{
name|revWalk
operator|.
name|close
argument_list|()
expr_stmt|;
name|inserter
operator|.
name|close
argument_list|()
expr_stmt|;
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setRepository (Repository repo, RevWalk revWalk, ObjectInserter inserter)
specifier|public
name|BatchUpdate
name|setRepository
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|revWalk
parameter_list|,
name|ObjectInserter
name|inserter
parameter_list|)
block|{
name|checkState
argument_list|(
name|this
operator|.
name|repo
operator|==
literal|null
argument_list|,
literal|"repo already set"
argument_list|)
expr_stmt|;
name|closeRepo
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|repo
operator|=
name|checkNotNull
argument_list|(
name|repo
argument_list|,
literal|"repo"
argument_list|)
expr_stmt|;
name|this
operator|.
name|revWalk
operator|=
name|checkNotNull
argument_list|(
name|revWalk
argument_list|,
literal|"revWalk"
argument_list|)
expr_stmt|;
name|this
operator|.
name|inserter
operator|=
name|checkNotNull
argument_list|(
name|inserter
argument_list|,
literal|"inserter"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|initRepository ()
specifier|private
name|void
name|initRepository
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|repo
operator|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|closeRepo
operator|=
literal|true
expr_stmt|;
name|inserter
operator|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
expr_stmt|;
name|revWalk
operator|=
operator|new
name|RevWalk
argument_list|(
name|inserter
operator|.
name|newReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getUser ()
specifier|public
name|CurrentUser
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
DECL|method|getRepository ()
specifier|public
name|Repository
name|getRepository
parameter_list|()
throws|throws
name|IOException
block|{
name|initRepository
argument_list|()
expr_stmt|;
return|return
name|repo
return|;
block|}
DECL|method|getRevWalk ()
specifier|public
name|RevWalk
name|getRevWalk
parameter_list|()
throws|throws
name|IOException
block|{
name|initRepository
argument_list|()
expr_stmt|;
return|return
name|revWalk
return|;
block|}
DECL|method|getObjectInserter ()
specifier|public
name|ObjectInserter
name|getObjectInserter
parameter_list|()
throws|throws
name|IOException
block|{
name|initRepository
argument_list|()
expr_stmt|;
return|return
name|inserter
return|;
block|}
DECL|method|addOp (Change.Id id, Op op)
specifier|public
name|BatchUpdate
name|addOp
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|Op
name|op
parameter_list|)
block|{
name|checkArgument
argument_list|(
operator|!
operator|(
name|op
operator|instanceof
name|InsertChangeOp
operator|)
argument_list|,
literal|"use insertChange"
argument_list|)
expr_stmt|;
name|ops
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|op
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|insertChange (InsertChangeOp op)
specifier|public
name|BatchUpdate
name|insertChange
parameter_list|(
name|InsertChangeOp
name|op
parameter_list|)
block|{
name|Change
name|c
init|=
name|op
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
operator|!
name|newChanges
operator|.
name|containsKey
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
literal|"only one op allowed to create change %s"
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|newChanges
operator|.
name|put
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|ops
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|op
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|UpdateException
throws|,
name|RestApiException
block|{
try|try
block|{
name|executeRefUpdates
argument_list|()
expr_stmt|;
name|executeChangeOps
argument_list|()
expr_stmt|;
name|reindexChanges
argument_list|()
expr_stmt|;
if|if
condition|(
name|batchRefUpdate
operator|!=
literal|null
condition|)
block|{
comment|// Fire ref update events only after all mutations are finished, since
comment|// callers may assume a patch set ref being created means the change was
comment|// created, or a branch advancing meaning some changes were closed.
name|gitRefUpdated
operator|.
name|fire
argument_list|(
name|project
argument_list|,
name|batchRefUpdate
argument_list|)
expr_stmt|;
block|}
name|executePostOps
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UpdateException
decl||
name|RestApiException
name|e
parameter_list|)
block|{
comment|// Propagate REST API exceptions thrown by operations; they commonly throw
comment|// exceptions like ResourceConflictException to indicate an atomic update
comment|// failure.
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UpdateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|executeRefUpdates ()
specifier|private
name|void
name|executeRefUpdates
parameter_list|()
throws|throws
name|IOException
throws|,
name|UpdateException
throws|,
name|RestApiException
block|{
try|try
block|{
name|RepoContext
name|ctx
init|=
operator|new
name|RepoContext
argument_list|()
decl_stmt|;
for|for
control|(
name|Op
name|op
range|:
name|ops
operator|.
name|values
argument_list|()
control|)
block|{
name|op
operator|.
name|updateRepo
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|e
argument_list|,
name|RestApiException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UpdateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|repo
operator|==
literal|null
operator|||
name|batchRefUpdate
operator|==
literal|null
operator|||
name|batchRefUpdate
operator|.
name|getCommands
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|inserter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|batchRefUpdate
operator|.
name|execute
argument_list|(
name|revWalk
argument_list|,
name|NullProgressMonitor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ReceiveCommand
name|cmd
range|:
name|batchRefUpdate
operator|.
name|getCommands
argument_list|()
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|!=
name|ReceiveCommand
operator|.
name|Result
operator|.
name|OK
condition|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|ok
condition|)
block|{
throw|throw
operator|new
name|UpdateException
argument_list|(
literal|"BatchRefUpdate failed: "
operator|+
name|batchRefUpdate
argument_list|)
throw|;
block|}
block|}
DECL|method|executeChangeOps ()
specifier|private
name|void
name|executeChangeOps
parameter_list|()
throws|throws
name|UpdateException
throws|,
name|RestApiException
block|{
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|Collection
argument_list|<
name|Op
argument_list|>
argument_list|>
name|e
range|:
name|ops
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|ChangeContext
name|ctx
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|newChangeContext
argument_list|(
name|id
argument_list|)
expr_stmt|;
for|for
control|(
name|Op
name|op
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|op
operator|.
name|updateChange
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|ctx
operator|.
name|getChangeUpdate
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
name|indexFutures
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|indexAsync
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|e
argument_list|,
name|RestApiException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UpdateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|newChangeContext (Change.Id id)
specifier|private
name|ChangeContext
name|newChangeContext
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChanges
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|c
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|// Pass in preloaded change to controlFor, to avoid:
comment|//  - reading from a db that does not belong to this update
comment|//  - attempting to read a change that doesn't exist yet
return|return
operator|new
name|ChangeContext
argument_list|(
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|c
argument_list|,
name|user
argument_list|)
argument_list|)
return|;
block|}
DECL|method|reindexChanges ()
specifier|private
name|void
name|reindexChanges
parameter_list|()
throws|throws
name|IOException
block|{
name|ChangeIndexer
operator|.
name|allAsList
argument_list|(
name|indexFutures
argument_list|)
operator|.
name|checkedGet
argument_list|()
expr_stmt|;
block|}
DECL|method|executePostOps ()
specifier|private
name|void
name|executePostOps
parameter_list|()
throws|throws
name|Exception
block|{
name|Context
name|ctx
init|=
operator|new
name|Context
argument_list|()
decl_stmt|;
for|for
control|(
name|Op
name|op
range|:
name|ops
operator|.
name|values
argument_list|()
control|)
block|{
name|op
operator|.
name|postUpdate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

