begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|attributes
operator|.
name|AttributesNodeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BaseRepositoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefRename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ReflogReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|StoredConfig
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ReadOnlyRepository
class|class
name|ReadOnlyRepository
extends|extends
name|Repository
block|{
DECL|field|MSG
specifier|private
specifier|static
specifier|final
name|String
name|MSG
init|=
literal|"Cannot modify a "
operator|+
name|ReadOnlyRepository
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
DECL|method|builder (Repository r)
specifier|private
specifier|static
name|BaseRepositoryBuilder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|builder
parameter_list|(
name|Repository
name|r
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
operator|new
name|BaseRepositoryBuilder
argument_list|<>
argument_list|()
operator|.
name|setFS
argument_list|(
name|r
operator|.
name|getFS
argument_list|()
argument_list|)
operator|.
name|setGitDir
argument_list|(
name|r
operator|.
name|getDirectory
argument_list|()
argument_list|)
operator|.
name|setWorkTree
argument_list|(
name|r
operator|.
name|getWorkTree
argument_list|()
argument_list|)
operator|.
name|setIndexFile
argument_list|(
name|r
operator|.
name|getIndexFile
argument_list|()
argument_list|)
return|;
block|}
DECL|field|delegate
specifier|private
specifier|final
name|Repository
name|delegate
decl_stmt|;
DECL|field|refdb
specifier|private
specifier|final
name|RefDb
name|refdb
decl_stmt|;
DECL|field|objdb
specifier|private
specifier|final
name|ObjDb
name|objdb
decl_stmt|;
DECL|method|ReadOnlyRepository (Repository delegate)
name|ReadOnlyRepository
parameter_list|(
name|Repository
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|(
name|delegate
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|refdb
operator|=
operator|new
name|RefDb
argument_list|(
name|delegate
operator|.
name|getRefDatabase
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|objdb
operator|=
operator|new
name|ObjDb
argument_list|(
name|delegate
operator|.
name|getObjectDatabase
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create (boolean bare)
specifier|public
name|void
name|create
parameter_list|(
name|boolean
name|bare
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|MSG
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getObjectDatabase ()
specifier|public
name|ObjectDatabase
name|getObjectDatabase
parameter_list|()
block|{
return|return
name|objdb
return|;
block|}
annotation|@
name|Override
DECL|method|getRefDatabase ()
specifier|public
name|RefDatabase
name|getRefDatabase
parameter_list|()
block|{
return|return
name|refdb
return|;
block|}
annotation|@
name|Override
DECL|method|getConfig ()
specifier|public
name|StoredConfig
name|getConfig
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getConfig
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createAttributesNodeProvider ()
specifier|public
name|AttributesNodeProvider
name|createAttributesNodeProvider
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|createAttributesNodeProvider
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|scanForRepoChanges ()
specifier|public
name|void
name|scanForRepoChanges
parameter_list|()
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|scanForRepoChanges
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|notifyIndexChanged ()
specifier|public
name|void
name|notifyIndexChanged
parameter_list|()
block|{
name|delegate
operator|.
name|notifyIndexChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReflogReader (String refName)
specifier|public
name|ReflogReader
name|getReflogReader
parameter_list|(
name|String
name|refName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|getReflogReader
argument_list|(
name|refName
argument_list|)
return|;
block|}
DECL|class|RefDb
specifier|private
specifier|static
class|class
name|RefDb
extends|extends
name|RefDatabase
block|{
DECL|field|delegate
specifier|private
specifier|final
name|RefDatabase
name|delegate
decl_stmt|;
DECL|method|RefDb (RefDatabase delegate)
specifier|private
name|RefDb
parameter_list|(
name|RefDatabase
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create ()
specifier|public
name|void
name|create
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|MSG
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isNameConflicting (String name)
specifier|public
name|boolean
name|isNameConflicting
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|isNameConflicting
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newUpdate (String name, boolean detach)
specifier|public
name|RefUpdate
name|newUpdate
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|detach
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|MSG
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|newRename (String fromName, String toName)
specifier|public
name|RefRename
name|newRename
parameter_list|(
name|String
name|fromName
parameter_list|,
name|String
name|toName
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|MSG
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getRef (String name)
specifier|public
name|Ref
name|getRef
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|getRef
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRefs (String prefix)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|getRefs
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|getRefs
argument_list|(
name|prefix
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAdditionalRefs ()
specifier|public
name|List
argument_list|<
name|Ref
argument_list|>
name|getAdditionalRefs
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|getAdditionalRefs
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|peel (Ref ref)
specifier|public
name|Ref
name|peel
parameter_list|(
name|Ref
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|peel
argument_list|(
name|ref
argument_list|)
return|;
block|}
block|}
DECL|class|ObjDb
specifier|private
specifier|static
class|class
name|ObjDb
extends|extends
name|ObjectDatabase
block|{
DECL|field|delegate
specifier|private
specifier|final
name|ObjectDatabase
name|delegate
decl_stmt|;
DECL|method|ObjDb (ObjectDatabase delegate)
specifier|private
name|ObjDb
parameter_list|(
name|ObjectDatabase
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newInserter ()
specifier|public
name|ObjectInserter
name|newInserter
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|MSG
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|newReader ()
specifier|public
name|ObjectReader
name|newReader
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|newReader
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

