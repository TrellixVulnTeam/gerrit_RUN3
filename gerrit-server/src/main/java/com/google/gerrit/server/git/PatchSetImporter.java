begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|PatchSetAncestor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|PatchSetInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Commit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Imports a {@link PatchSet} from a {@link Commit}. */
end_comment

begin_class
DECL|class|PatchSetImporter
specifier|public
class|class
name|PatchSetImporter
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (ReviewDb dstDb, RevCommit srcCommit, PatchSet dstPatchSet, boolean isNewPatchSet)
name|PatchSetImporter
name|create
parameter_list|(
name|ReviewDb
name|dstDb
parameter_list|,
name|RevCommit
name|srcCommit
parameter_list|,
name|PatchSet
name|dstPatchSet
parameter_list|,
name|boolean
name|isNewPatchSet
parameter_list|)
function_decl|;
block|}
DECL|field|patchSetInfoFactory
specifier|private
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|ReviewDb
name|db
decl_stmt|;
DECL|field|src
specifier|private
specifier|final
name|RevCommit
name|src
decl_stmt|;
DECL|field|dst
specifier|private
specifier|final
name|PatchSet
name|dst
decl_stmt|;
DECL|field|isNew
specifier|private
specifier|final
name|boolean
name|isNew
decl_stmt|;
DECL|field|txn
specifier|private
name|Transaction
name|txn
decl_stmt|;
DECL|field|info
specifier|private
name|PatchSetInfo
name|info
decl_stmt|;
DECL|field|ancestorExisting
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|PatchSetAncestor
argument_list|>
name|ancestorExisting
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|PatchSetAncestor
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|ancestorInsert
specifier|private
specifier|final
name|List
argument_list|<
name|PatchSetAncestor
argument_list|>
name|ancestorInsert
init|=
operator|new
name|ArrayList
argument_list|<
name|PatchSetAncestor
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|ancestorUpdate
specifier|private
specifier|final
name|List
argument_list|<
name|PatchSetAncestor
argument_list|>
name|ancestorUpdate
init|=
operator|new
name|ArrayList
argument_list|<
name|PatchSetAncestor
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|PatchSetImporter (final PatchSetInfoFactory psif, @Assisted final ReviewDb dstDb, @Assisted final RevCommit srcCommit, @Assisted final PatchSet dstPatchSet, @Assisted final boolean isNewPatchSet)
name|PatchSetImporter
parameter_list|(
specifier|final
name|PatchSetInfoFactory
name|psif
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|ReviewDb
name|dstDb
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|RevCommit
name|srcCommit
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|PatchSet
name|dstPatchSet
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|boolean
name|isNewPatchSet
parameter_list|)
block|{
name|patchSetInfoFactory
operator|=
name|psif
expr_stmt|;
name|db
operator|=
name|dstDb
expr_stmt|;
name|src
operator|=
name|srcCommit
expr_stmt|;
name|dst
operator|=
name|dstPatchSet
expr_stmt|;
name|isNew
operator|=
name|isNewPatchSet
expr_stmt|;
block|}
DECL|method|setTransaction (final Transaction t)
specifier|public
name|void
name|setTransaction
parameter_list|(
specifier|final
name|Transaction
name|t
parameter_list|)
block|{
name|txn
operator|=
name|t
expr_stmt|;
block|}
DECL|method|getPatchSetInfo ()
specifier|public
name|PatchSetInfo
name|getPatchSetInfo
parameter_list|()
block|{
return|return
name|info
return|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|OrmException
block|{
name|dst
operator|.
name|setRevision
argument_list|(
name|toRevId
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isNew
condition|)
block|{
for|for
control|(
specifier|final
name|PatchSetAncestor
name|a
range|:
name|db
operator|.
name|patchSetAncestors
argument_list|()
operator|.
name|ancestorsOf
argument_list|(
name|dst
operator|.
name|getId
argument_list|()
argument_list|)
control|)
block|{
name|ancestorExisting
operator|.
name|put
argument_list|(
name|a
operator|.
name|getPosition
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
name|info
operator|=
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|src
argument_list|,
name|dst
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|importAncestors
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|auto
init|=
name|txn
operator|==
literal|null
decl_stmt|;
if|if
condition|(
name|auto
condition|)
block|{
name|txn
operator|=
name|db
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isNew
condition|)
block|{
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|dst
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|patchSetAncestors
argument_list|()
operator|.
name|insert
argument_list|(
name|ancestorInsert
argument_list|,
name|txn
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isNew
condition|)
block|{
name|db
operator|.
name|patchSetAncestors
argument_list|()
operator|.
name|update
argument_list|(
name|ancestorUpdate
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSetAncestors
argument_list|()
operator|.
name|delete
argument_list|(
name|ancestorExisting
operator|.
name|values
argument_list|()
argument_list|,
name|txn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|auto
condition|)
block|{
name|txn
operator|.
name|commit
argument_list|()
expr_stmt|;
name|txn
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|importAncestors ()
specifier|private
name|void
name|importAncestors
parameter_list|()
block|{
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|src
operator|.
name|getParentCount
argument_list|()
condition|;
name|p
operator|++
control|)
block|{
name|PatchSetAncestor
name|a
init|=
name|ancestorExisting
operator|.
name|remove
argument_list|(
name|p
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|a
operator|=
operator|new
name|PatchSetAncestor
argument_list|(
operator|new
name|PatchSetAncestor
operator|.
name|Id
argument_list|(
name|dst
operator|.
name|getId
argument_list|()
argument_list|,
name|p
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ancestorInsert
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ancestorUpdate
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|setAncestorRevision
argument_list|(
name|toRevId
argument_list|(
name|src
operator|.
name|getParent
argument_list|(
name|p
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|toRevId (final RevCommit src)
specifier|private
specifier|static
name|RevId
name|toRevId
parameter_list|(
specifier|final
name|RevCommit
name|src
parameter_list|)
block|{
return|return
operator|new
name|RevId
argument_list|(
name|src
operator|.
name|getId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

