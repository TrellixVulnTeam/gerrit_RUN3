begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.plugins
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|annotations
operator|.
name|PluginCanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|annotations
operator|.
name|PluginData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|annotations
operator|.
name|PluginName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lifecycle
operator|.
name|LifecycleModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|MetricMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PluginUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provides
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|ProvisionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_class
DECL|class|ServerPluginInfoModule
class|class
name|ServerPluginInfoModule
extends|extends
name|AbstractModule
block|{
DECL|field|plugin
specifier|private
specifier|final
name|ServerPlugin
name|plugin
decl_stmt|;
DECL|field|dataDir
specifier|private
specifier|final
name|Path
name|dataDir
decl_stmt|;
DECL|field|ready
specifier|private
specifier|volatile
name|boolean
name|ready
decl_stmt|;
DECL|field|serverMetrics
specifier|private
specifier|final
name|MetricMaker
name|serverMetrics
decl_stmt|;
DECL|method|ServerPluginInfoModule (ServerPlugin plugin, MetricMaker serverMetrics)
name|ServerPluginInfoModule
parameter_list|(
name|ServerPlugin
name|plugin
parameter_list|,
name|MetricMaker
name|serverMetrics
parameter_list|)
block|{
name|this
operator|.
name|plugin
operator|=
name|plugin
expr_stmt|;
name|this
operator|.
name|dataDir
operator|=
name|plugin
operator|.
name|getDataDir
argument_list|()
expr_stmt|;
name|this
operator|.
name|serverMetrics
operator|=
name|serverMetrics
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configure ()
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|PluginUser
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|plugin
operator|.
name|getPluginUser
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|annotatedWith
argument_list|(
name|PluginName
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|plugin
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|annotatedWith
argument_list|(
name|PluginCanonicalWebUrl
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|plugin
operator|.
name|getPluginCanonicalWebUrl
argument_list|()
argument_list|)
expr_stmt|;
name|install
argument_list|(
operator|new
name|LifecycleModule
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|PluginMetricMaker
name|metrics
init|=
operator|new
name|PluginMetricMaker
argument_list|(
name|serverMetrics
argument_list|,
name|plugin
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|bind
argument_list|(
name|MetricMaker
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|listener
argument_list|()
operator|.
name|toInstance
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Provides
annotation|@
name|PluginData
DECL|method|getPluginData ()
name|Path
name|getPluginData
parameter_list|()
block|{
if|if
condition|(
operator|!
name|ready
condition|)
block|{
synchronized|synchronized
init|(
name|dataDir
init|)
block|{
if|if
condition|(
operator|!
name|ready
condition|)
block|{
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot create %s for plugin %s"
argument_list|,
name|dataDir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|,
name|plugin
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|ready
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|dataDir
return|;
block|}
annotation|@
name|Provides
annotation|@
name|PluginData
DECL|method|getPluginDataAsFile (@luginData Path pluginData)
name|File
name|getPluginDataAsFile
parameter_list|(
annotation|@
name|PluginData
name|Path
name|pluginData
parameter_list|)
block|{
return|return
name|pluginData
operator|.
name|toFile
argument_list|()
return|;
block|}
block|}
end_class

end_unit

