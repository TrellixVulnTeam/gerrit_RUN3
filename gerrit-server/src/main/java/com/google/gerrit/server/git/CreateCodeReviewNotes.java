begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
operator|.
name|REFS_NOTES_REVIEW
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AnonymousCowardName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|errors
operator|.
name|ConcurrentRefUpdateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|NullProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * This class create code review notes for given {@link CodeReviewCommit}s.  *<p>  * After the {@link #create(List, PersonIdent)} method is invoked once this  * instance must not be reused. Create a new instance of this class if needed.  */
end_comment

begin_class
DECL|class|CreateCodeReviewNotes
specifier|public
class|class
name|CreateCodeReviewNotes
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (ReviewDb reviewDb, Repository db)
name|CreateCodeReviewNotes
name|create
parameter_list|(
name|ReviewDb
name|reviewDb
parameter_list|,
name|Repository
name|db
parameter_list|)
function_decl|;
block|}
DECL|field|CHANGE_ID
specifier|private
specifier|static
specifier|final
name|FooterKey
name|CHANGE_ID
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Change-Id"
argument_list|)
decl_stmt|;
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|approvalTypes
specifier|private
specifier|final
name|ApprovalTypes
name|approvalTypes
decl_stmt|;
DECL|field|canonicalWebUrl
specifier|private
specifier|final
name|String
name|canonicalWebUrl
decl_stmt|;
DECL|field|anonymousCowardName
specifier|private
specifier|final
name|String
name|anonymousCowardName
decl_stmt|;
DECL|field|schema
specifier|private
specifier|final
name|ReviewDb
name|schema
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|Repository
name|db
decl_stmt|;
DECL|field|author
specifier|private
name|PersonIdent
name|author
decl_stmt|;
DECL|field|revWalk
specifier|private
name|RevWalk
name|revWalk
decl_stmt|;
DECL|field|inserter
specifier|private
name|ObjectInserter
name|inserter
decl_stmt|;
DECL|field|notesBranchUtilFactory
specifier|private
specifier|final
name|NotesBranchUtil
operator|.
name|Factory
name|notesBranchUtilFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|CreateCodeReviewNotes ( @erritPersonIdent final PersonIdent gerritIdent, final AccountCache accountCache, final ApprovalTypes approvalTypes, final @Nullable @CanonicalWebUrl String canonicalWebUrl, final @AnonymousCowardName String anonymousCowardName, final NotesBranchUtil.Factory notesBranchUtilFactory, final @Assisted ReviewDb reviewDb, final @Assisted Repository db)
name|CreateCodeReviewNotes
parameter_list|(
annotation|@
name|GerritPersonIdent
specifier|final
name|PersonIdent
name|gerritIdent
parameter_list|,
specifier|final
name|AccountCache
name|accountCache
parameter_list|,
specifier|final
name|ApprovalTypes
name|approvalTypes
parameter_list|,
specifier|final
annotation|@
name|Nullable
annotation|@
name|CanonicalWebUrl
name|String
name|canonicalWebUrl
parameter_list|,
specifier|final
annotation|@
name|AnonymousCowardName
name|String
name|anonymousCowardName
parameter_list|,
specifier|final
name|NotesBranchUtil
operator|.
name|Factory
name|notesBranchUtilFactory
parameter_list|,
specifier|final
annotation|@
name|Assisted
name|ReviewDb
name|reviewDb
parameter_list|,
specifier|final
annotation|@
name|Assisted
name|Repository
name|db
parameter_list|)
block|{
name|this
operator|.
name|author
operator|=
name|gerritIdent
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|approvalTypes
operator|=
name|approvalTypes
expr_stmt|;
name|this
operator|.
name|canonicalWebUrl
operator|=
name|canonicalWebUrl
expr_stmt|;
name|this
operator|.
name|anonymousCowardName
operator|=
name|anonymousCowardName
expr_stmt|;
name|this
operator|.
name|notesBranchUtilFactory
operator|=
name|notesBranchUtilFactory
expr_stmt|;
name|schema
operator|=
name|reviewDb
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
block|}
DECL|method|create (List<CodeReviewCommit> commits, PersonIdent author)
specifier|public
name|void
name|create
parameter_list|(
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|commits
parameter_list|,
name|PersonIdent
name|author
parameter_list|)
throws|throws
name|CodeReviewNoteCreationException
block|{
try|try
block|{
name|revWalk
operator|=
operator|new
name|RevWalk
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|inserter
operator|=
name|db
operator|.
name|newObjectInserter
argument_list|()
expr_stmt|;
if|if
condition|(
name|author
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|author
operator|=
name|author
expr_stmt|;
block|}
name|NoteMap
name|notes
init|=
name|NoteMap
operator|.
name|newEmptyMap
argument_list|()
decl_stmt|;
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Update notes for submitted changes\n\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|CodeReviewCommit
name|c
range|:
name|commits
control|)
block|{
name|notes
operator|.
name|set
argument_list|(
name|c
argument_list|,
name|createNoteContent
argument_list|(
name|c
operator|.
name|change
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"* "
argument_list|)
operator|.
name|append
argument_list|(
name|c
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|NotesBranchUtil
name|notesBranchUtil
init|=
name|notesBranchUtilFactory
operator|.
name|create
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|notesBranchUtil
operator|.
name|commitAllNotes
argument_list|(
name|notes
argument_list|,
name|REFS_NOTES_REVIEW
argument_list|,
name|author
argument_list|,
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CodeReviewNoteCreationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ConcurrentRefUpdateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CodeReviewNoteCreationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|revWalk
operator|.
name|release
argument_list|()
expr_stmt|;
name|inserter
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|create (List<Change> changes, PersonIdent author, String commitMessage, ProgressMonitor monitor)
specifier|public
name|void
name|create
parameter_list|(
name|List
argument_list|<
name|Change
argument_list|>
name|changes
parameter_list|,
name|PersonIdent
name|author
parameter_list|,
name|String
name|commitMessage
parameter_list|,
name|ProgressMonitor
name|monitor
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|CodeReviewNoteCreationException
block|{
try|try
block|{
name|revWalk
operator|=
operator|new
name|RevWalk
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|inserter
operator|=
name|db
operator|.
name|newObjectInserter
argument_list|()
expr_stmt|;
if|if
condition|(
name|author
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|author
operator|=
name|author
expr_stmt|;
block|}
if|if
condition|(
name|monitor
operator|==
literal|null
condition|)
block|{
name|monitor
operator|=
name|NullProgressMonitor
operator|.
name|INSTANCE
expr_stmt|;
block|}
name|NoteMap
name|notes
init|=
name|NoteMap
operator|.
name|newEmptyMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Change
name|c
range|:
name|changes
control|)
block|{
name|monitor
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|PatchSet
name|ps
init|=
name|schema
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectId
name|commitId
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|notes
operator|.
name|set
argument_list|(
name|commitId
argument_list|,
name|createNoteContent
argument_list|(
name|c
argument_list|,
name|commitId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NotesBranchUtil
name|notesBranchUtil
init|=
name|notesBranchUtilFactory
operator|.
name|create
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|notesBranchUtil
operator|.
name|commitAllNotes
argument_list|(
name|notes
argument_list|,
name|REFS_NOTES_REVIEW
argument_list|,
name|author
argument_list|,
name|commitMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConcurrentRefUpdateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CodeReviewNoteCreationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|revWalk
operator|.
name|release
argument_list|()
expr_stmt|;
name|inserter
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createNoteContent (Change change, ObjectId commit)
specifier|private
name|ObjectId
name|createNoteContent
parameter_list|(
name|Change
name|change
parameter_list|,
name|ObjectId
name|commit
parameter_list|)
throws|throws
name|CodeReviewNoteCreationException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|commit
operator|instanceof
name|RevCommit
operator|)
condition|)
block|{
name|commit
operator|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
return|return
name|createNoteContent
argument_list|(
name|change
argument_list|,
operator|(
name|RevCommit
operator|)
name|commit
argument_list|)
return|;
block|}
DECL|method|createNoteContent (Change change, RevCommit commit)
specifier|private
name|ObjectId
name|createNoteContent
parameter_list|(
name|Change
name|change
parameter_list|,
name|RevCommit
name|commit
parameter_list|)
throws|throws
name|CodeReviewNoteCreationException
throws|,
name|IOException
block|{
try|try
block|{
name|ReviewNoteHeaderFormatter
name|formatter
init|=
operator|new
name|ReviewNoteHeaderFormatter
argument_list|(
name|author
operator|.
name|getTimeZone
argument_list|()
argument_list|,
name|anonymousCowardName
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|idList
init|=
name|commit
operator|.
name|getFooterLines
argument_list|(
name|CHANGE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|idList
operator|.
name|isEmpty
argument_list|()
condition|)
name|formatter
operator|.
name|appendChangeId
argument_list|(
name|change
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|ResultSet
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvals
init|=
name|schema
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|submit
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|approvals
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getValue
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Ignore 0 values.
block|}
elseif|else
if|if
condition|(
name|ApprovalCategory
operator|.
name|SUBMIT
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getCategoryId
argument_list|()
argument_list|)
condition|)
block|{
name|submit
operator|=
name|a
expr_stmt|;
block|}
else|else
block|{
name|ApprovalType
name|type
init|=
name|approvalTypes
operator|.
name|byId
argument_list|(
name|a
operator|.
name|getCategoryId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|formatter
operator|.
name|appendApproval
argument_list|(
name|type
operator|.
name|getCategory
argument_list|()
argument_list|,
name|a
operator|.
name|getValue
argument_list|()
argument_list|,
name|accountCache
operator|.
name|get
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|submit
operator|!=
literal|null
condition|)
block|{
name|formatter
operator|.
name|appendSubmittedBy
argument_list|(
name|accountCache
operator|.
name|get
argument_list|(
name|submit
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|appendSubmittedAt
argument_list|(
name|submit
operator|.
name|getGranted
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|canonicalWebUrl
operator|!=
literal|null
condition|)
block|{
name|formatter
operator|.
name|appendReviewedOn
argument_list|(
name|canonicalWebUrl
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|formatter
operator|.
name|appendProject
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|appendBranch
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|inserter
operator|.
name|insert
argument_list|(
name|Constants
operator|.
name|OBJ_BLOB
argument_list|,
name|formatter
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CodeReviewNoteCreationException
argument_list|(
name|commit
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

