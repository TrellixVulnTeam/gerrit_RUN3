begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.index.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|joining
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_class
DECL|class|StalenessChecker
specifier|public
class|class
name|StalenessChecker
block|{
DECL|method|parseStates ( Iterable<byte[]> states)
specifier|public
specifier|static
name|SetMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|RefState
argument_list|>
name|parseStates
parameter_list|(
name|Iterable
argument_list|<
name|byte
index|[]
argument_list|>
name|states
parameter_list|)
block|{
name|RefState
operator|.
name|check
argument_list|(
name|states
operator|!=
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|SetMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|RefState
argument_list|>
name|result
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|b
range|:
name|states
control|)
block|{
name|RefState
operator|.
name|check
argument_list|(
name|b
operator|!=
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|b
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|':'
argument_list|)
operator|.
name|splitToList
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|RefState
operator|.
name|check
argument_list|(
name|parts
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|&&
operator|!
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|RefState
operator|.
name|create
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|parsePatterns ( Iterable<byte[]> patterns)
specifier|public
specifier|static
name|ListMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|RefStatePattern
argument_list|>
name|parsePatterns
parameter_list|(
name|Iterable
argument_list|<
name|byte
index|[]
argument_list|>
name|patterns
parameter_list|)
block|{
name|RefStatePattern
operator|.
name|check
argument_list|(
name|patterns
operator|!=
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ListMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|RefStatePattern
argument_list|>
name|result
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|b
range|:
name|patterns
control|)
block|{
name|RefStatePattern
operator|.
name|check
argument_list|(
name|b
operator|!=
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|b
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|':'
argument_list|)
operator|.
name|splitToList
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|RefStatePattern
operator|.
name|check
argument_list|(
name|parts
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|RefStatePattern
operator|.
name|create
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|AutoValue
DECL|class|RefState
specifier|public
specifier|abstract
specifier|static
class|class
name|RefState
block|{
DECL|method|create (String ref, String sha)
specifier|static
name|RefState
name|create
parameter_list|(
name|String
name|ref
parameter_list|,
name|String
name|sha
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_StalenessChecker_RefState
argument_list|(
name|ref
argument_list|,
name|ObjectId
operator|.
name|fromString
argument_list|(
name|sha
argument_list|)
argument_list|)
return|;
block|}
DECL|method|create (String ref, @Nullable ObjectId id)
specifier|static
name|RefState
name|create
parameter_list|(
name|String
name|ref
parameter_list|,
annotation|@
name|Nullable
name|ObjectId
name|id
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_StalenessChecker_RefState
argument_list|(
name|ref
argument_list|,
name|firstNonNull
argument_list|(
name|id
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|of (Ref ref)
specifier|static
name|RefState
name|of
parameter_list|(
name|Ref
name|ref
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_StalenessChecker_RefState
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|,
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toByteArray (Project.NameKey project)
name|byte
index|[]
name|toByteArray
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
block|{
name|byte
index|[]
name|a
init|=
operator|(
name|project
operator|.
name|toString
argument_list|()
operator|+
literal|':'
operator|+
name|ref
argument_list|()
operator|+
literal|':'
operator|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|a
operator|.
name|length
operator|+
name|Constants
operator|.
name|OBJECT_ID_STRING_LENGTH
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|a
argument_list|,
literal|0
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|a
operator|.
name|length
argument_list|)
expr_stmt|;
name|id
argument_list|()
operator|.
name|copyTo
argument_list|(
name|b
argument_list|,
name|a
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
DECL|method|check (boolean condition, String str)
specifier|private
specifier|static
name|void
name|check
parameter_list|(
name|boolean
name|condition
parameter_list|,
name|String
name|str
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|condition
argument_list|,
literal|"invalid RefState: %s"
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
DECL|method|ref ()
specifier|abstract
name|String
name|ref
parameter_list|()
function_decl|;
DECL|method|id ()
specifier|abstract
name|ObjectId
name|id
parameter_list|()
function_decl|;
block|}
comment|/**    * Pattern for matching refs.    *<p>    * Similar to '*' syntax for native Git refspecs, but slightly more powerful:    * the pattern may contain arbitrarily many asterisks. There must be at least    * one '*' and the first one must immediately follow a '/'.    */
annotation|@
name|AutoValue
DECL|class|RefStatePattern
specifier|public
specifier|abstract
specifier|static
class|class
name|RefStatePattern
block|{
DECL|method|create (String pattern)
specifier|static
name|RefStatePattern
name|create
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|int
name|star
init|=
name|pattern
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|star
operator|>
literal|0
operator|&&
name|pattern
operator|.
name|charAt
argument_list|(
name|star
operator|-
literal|1
argument_list|)
operator|==
literal|'/'
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
name|pattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|star
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|Repository
operator|.
name|isValidRefName
argument_list|(
name|pattern
operator|.
name|replace
argument_list|(
literal|'*'
argument_list|,
literal|'x'
argument_list|)
argument_list|)
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
comment|// Quote everything except the '*'s, which become ".*".
name|String
name|regex
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|'*'
argument_list|)
operator|.
name|split
argument_list|(
name|pattern
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|Pattern
operator|::
name|quote
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|".*"
argument_list|,
literal|"^"
argument_list|,
literal|"$"
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|AutoValue_StalenessChecker_RefStatePattern
argument_list|(
name|pattern
argument_list|,
name|prefix
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toByteArray (Project.NameKey project)
name|byte
index|[]
name|toByteArray
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
block|{
return|return
operator|(
name|project
operator|.
name|toString
argument_list|()
operator|+
literal|':'
operator|+
name|pattern
argument_list|()
operator|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
return|;
block|}
DECL|method|check (boolean condition, String str)
specifier|private
specifier|static
name|void
name|check
parameter_list|(
name|boolean
name|condition
parameter_list|,
name|String
name|str
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|condition
argument_list|,
literal|"invalid RefStatePattern: %s"
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
DECL|method|pattern ()
specifier|abstract
name|String
name|pattern
parameter_list|()
function_decl|;
DECL|method|prefix ()
specifier|abstract
name|String
name|prefix
parameter_list|()
function_decl|;
DECL|method|regex ()
specifier|abstract
name|Pattern
name|regex
parameter_list|()
function_decl|;
DECL|method|match (String refName)
name|boolean
name|match
parameter_list|(
name|String
name|refName
parameter_list|)
block|{
return|return
name|regex
argument_list|()
operator|.
name|matcher
argument_list|(
name|refName
argument_list|)
operator|.
name|find
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

