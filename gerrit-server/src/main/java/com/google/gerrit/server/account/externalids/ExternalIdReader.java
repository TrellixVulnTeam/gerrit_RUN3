begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account.externalids
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|OBJ_BLOB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Description
operator|.
name|Units
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|MetricMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Timer0
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|Note
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class to read external IDs from ReviewDb or NoteDb.  *  *<p>In NoteDb external IDs are stored in the All-Users repository in a Git Notes branch called  * refs/meta/external-ids where the sha1 of the external ID is used as note name. Each note content  * is a git config file that contains an external ID. It has exactly one externalId subsection with  * an accountId and optionally email and password:  *  *<pre>  * [externalId "username:jdoe"]  *   accountId = 1003407  *   email = jdoe@example.com  *   password = bcrypt:4:LCbmSBDivK/hhGVQMfkDpA==:XcWn0pKYSVU/UJgOvhidkEtmqCp6oKB7  *</pre>  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|ExternalIdReader
specifier|public
class|class
name|ExternalIdReader
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExternalIdReader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAX_NOTE_SZ
specifier|public
specifier|static
specifier|final
name|int
name|MAX_NOTE_SZ
init|=
literal|1
operator|<<
literal|19
decl_stmt|;
DECL|method|readRevision (Repository repo)
specifier|public
specifier|static
name|ObjectId
name|readRevision
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
decl_stmt|;
return|return
name|ref
operator|!=
literal|null
condition|?
name|ref
operator|.
name|getObjectId
argument_list|()
else|:
name|ObjectId
operator|.
name|zeroId
argument_list|()
return|;
block|}
DECL|method|readNoteMap (RevWalk rw, ObjectId rev)
specifier|public
specifier|static
name|NoteMap
name|readNoteMap
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|ObjectId
name|rev
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|rev
operator|.
name|equals
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|NoteMap
operator|.
name|read
argument_list|(
name|rw
operator|.
name|getObjectReader
argument_list|()
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|rev
argument_list|)
argument_list|)
return|;
block|}
return|return
name|NoteMap
operator|.
name|newEmptyMap
argument_list|()
return|;
block|}
DECL|field|readFromGit
specifier|private
specifier|final
name|boolean
name|readFromGit
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|failOnLoad
specifier|private
name|boolean
name|failOnLoad
init|=
literal|false
decl_stmt|;
DECL|field|readAllLatency
specifier|private
specifier|final
name|Timer0
name|readAllLatency
decl_stmt|;
annotation|@
name|Inject
DECL|method|ExternalIdReader ( @erritServerConfig Config cfg, GitRepositoryManager repoManager, AllUsersName allUsersName, MetricMaker metricMaker)
name|ExternalIdReader
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|MetricMaker
name|metricMaker
parameter_list|)
block|{
name|this
operator|.
name|readFromGit
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"readExternalIdsFromGit"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|readAllLatency
operator|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"notedb/read_all_external_ids_latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency for reading all external IDs from NoteDb."
argument_list|)
operator|.
name|setCumulative
argument_list|()
operator|.
name|setUnit
argument_list|(
name|Units
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setFailOnLoad (boolean failOnLoad)
specifier|public
name|void
name|setFailOnLoad
parameter_list|(
name|boolean
name|failOnLoad
parameter_list|)
block|{
name|this
operator|.
name|failOnLoad
operator|=
name|failOnLoad
expr_stmt|;
block|}
DECL|method|readFromGit ()
name|boolean
name|readFromGit
parameter_list|()
block|{
return|return
name|readFromGit
return|;
block|}
DECL|method|readRevision ()
name|ObjectId
name|readRevision
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
return|return
name|readRevision
argument_list|(
name|repo
argument_list|)
return|;
block|}
block|}
comment|/** Reads and returns all external IDs. */
DECL|method|all (ReviewDb db)
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|all
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
block|{
name|checkReadEnabled
argument_list|()
expr_stmt|;
if|if
condition|(
name|readFromGit
condition|)
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
return|return
name|all
argument_list|(
name|repo
argument_list|,
name|readRevision
argument_list|(
name|repo
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
name|ExternalId
operator|.
name|from
argument_list|(
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|all
argument_list|()
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Reads and returns all external IDs from the specified revision of the refs/meta/external-ids    * branch.    */
DECL|method|all (ObjectId rev)
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|all
parameter_list|(
name|ObjectId
name|rev
parameter_list|)
throws|throws
name|IOException
block|{
name|checkReadEnabled
argument_list|()
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
return|return
name|all
argument_list|(
name|repo
argument_list|,
name|rev
argument_list|)
return|;
block|}
block|}
comment|/** Reads and returns all external IDs. */
DECL|method|all (Repository repo, ObjectId rev)
specifier|private
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|all
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|ObjectId
name|rev
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rev
operator|.
name|equals
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
try|try
init|(
name|Timer0
operator|.
name|Context
name|ctx
init|=
name|readAllLatency
operator|.
name|start
argument_list|()
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|NoteMap
name|noteMap
init|=
name|readNoteMap
argument_list|(
name|rw
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|extIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Note
name|note
range|:
name|noteMap
control|)
block|{
name|byte
index|[]
name|raw
init|=
name|rw
operator|.
name|getObjectReader
argument_list|()
operator|.
name|open
argument_list|(
name|note
operator|.
name|getData
argument_list|()
argument_list|,
name|OBJ_BLOB
argument_list|)
operator|.
name|getCachedBytes
argument_list|(
name|MAX_NOTE_SZ
argument_list|)
decl_stmt|;
try|try
block|{
name|extIds
operator|.
name|add
argument_list|(
name|ExternalId
operator|.
name|parse
argument_list|(
name|note
operator|.
name|getName
argument_list|()
argument_list|,
name|raw
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Ignoring invalid external ID note %s"
argument_list|,
name|note
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|extIds
return|;
block|}
block|}
comment|/** Reads and returns the specified external ID. */
annotation|@
name|Nullable
DECL|method|get (ReviewDb db, ExternalId.Key key)
name|ExternalId
name|get
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ExternalId
operator|.
name|Key
name|key
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|checkReadEnabled
argument_list|()
expr_stmt|;
if|if
condition|(
name|readFromGit
condition|)
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|;           RevWalk rw = new RevWalk(repo)
block|)
block|{
name|ObjectId
name|rev
init|=
name|readRevision
argument_list|(
name|repo
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|.
name|equals
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|parse
argument_list|(
name|key
argument_list|,
name|rw
argument_list|,
name|rev
argument_list|)
return|;
block|}
block|}
return|return
name|ExternalId
operator|.
name|from
argument_list|(
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|get
argument_list|(
name|key
operator|.
name|asAccountExternalIdKey
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_class

begin_comment
comment|/** Reads and returns the specified external ID from the given revision. */
end_comment

begin_function
annotation|@
name|Nullable
DECL|method|get (ExternalId.Key key, ObjectId rev)
name|ExternalId
name|get
parameter_list|(
name|ExternalId
operator|.
name|Key
name|key
parameter_list|,
name|ObjectId
name|rev
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|checkReadEnabled
argument_list|()
expr_stmt|;
if|if
condition|(
name|rev
operator|.
name|equals
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
return|return
name|parse
argument_list|(
name|key
argument_list|,
name|rw
argument_list|,
name|rev
argument_list|)
return|;
block|}
block|}
end_function

begin_function
DECL|method|parse (ExternalId.Key key, RevWalk rw, ObjectId rev)
specifier|private
specifier|static
name|ExternalId
name|parse
parameter_list|(
name|ExternalId
operator|.
name|Key
name|key
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|ObjectId
name|rev
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|NoteMap
name|noteMap
init|=
name|readNoteMap
argument_list|(
name|rw
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|ObjectId
name|noteId
init|=
name|key
operator|.
name|sha1
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|noteMap
operator|.
name|contains
argument_list|(
name|noteId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|raw
init|=
name|rw
operator|.
name|getObjectReader
argument_list|()
operator|.
name|open
argument_list|(
name|noteMap
operator|.
name|get
argument_list|(
name|noteId
argument_list|)
argument_list|,
name|OBJ_BLOB
argument_list|)
operator|.
name|getCachedBytes
argument_list|(
name|MAX_NOTE_SZ
argument_list|)
decl_stmt|;
return|return
name|ExternalId
operator|.
name|parse
argument_list|(
name|noteId
operator|.
name|name
argument_list|()
argument_list|,
name|raw
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|checkReadEnabled ()
specifier|private
name|void
name|checkReadEnabled
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|failOnLoad
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Reading from external IDs is disabled"
argument_list|)
throw|;
block|}
block|}
end_function

unit|}
end_unit

