begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GetPreferences
operator|.
name|KEY_ID
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GetPreferences
operator|.
name|KEY_MATCH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GetPreferences
operator|.
name|KEY_TARGET
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GetPreferences
operator|.
name|KEY_TOKEN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GetPreferences
operator|.
name|KEY_URL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GetPreferences
operator|.
name|URL_ALIAS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GetPreferences
operator|.
name|initFromDb
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GetPreferences
operator|.
name|readFromGit
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ConfigUtil
operator|.
name|storeSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|GeneralPreferencesInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|MenuItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|config
operator|.
name|DownloadScheme
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestModifyView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGeneralPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGeneralPreferences
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGeneralPreferences
operator|.
name|DiffView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGeneralPreferences
operator|.
name|DownloadCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGeneralPreferences
operator|.
name|EmailStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGeneralPreferences
operator|.
name|ReviewCategoryStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGeneralPreferences
operator|.
name|TimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|UserConfigSections
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|SetPreferences
specifier|public
class|class
name|SetPreferences
implements|implements
name|RestModifyView
argument_list|<
name|AccountResource
argument_list|,
name|GeneralPreferencesInfo
argument_list|>
block|{
DECL|field|self
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|self
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|AccountCache
name|cache
decl_stmt|;
DECL|field|gitMgr
specifier|private
specifier|final
name|GitRepositoryManager
name|gitMgr
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|metaDataUpdateFactory
specifier|private
specifier|final
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|User
argument_list|>
name|metaDataUpdateFactory
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|downloadSchemes
specifier|private
specifier|final
name|DynamicMap
argument_list|<
name|DownloadScheme
argument_list|>
name|downloadSchemes
decl_stmt|;
DECL|field|readFromGit
specifier|private
specifier|final
name|boolean
name|readFromGit
decl_stmt|;
annotation|@
name|Inject
DECL|method|SetPreferences (Provider<CurrentUser> self, AccountCache cache, @GerritServerConfig Config cfg, GitRepositoryManager gitMgr, Provider<ReviewDb> db, Provider<MetaDataUpdate.User> metaDataUpdateFactory, AllUsersName allUsersName, DynamicMap<DownloadScheme> downloadSchemes)
name|SetPreferences
parameter_list|(
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|self
parameter_list|,
name|AccountCache
name|cache
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|GitRepositoryManager
name|gitMgr
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|User
argument_list|>
name|metaDataUpdateFactory
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|DynamicMap
argument_list|<
name|DownloadScheme
argument_list|>
name|downloadSchemes
parameter_list|)
block|{
name|this
operator|.
name|self
operator|=
name|self
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
name|this
operator|.
name|gitMgr
operator|=
name|gitMgr
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|metaDataUpdateFactory
operator|=
name|metaDataUpdateFactory
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|downloadSchemes
operator|=
name|downloadSchemes
expr_stmt|;
name|readFromGit
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"readPrefsFromGit"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (AccountResource rsrc, GeneralPreferencesInfo i)
specifier|public
name|GeneralPreferencesInfo
name|apply
parameter_list|(
name|AccountResource
name|rsrc
parameter_list|,
name|GeneralPreferencesInfo
name|i
parameter_list|)
throws|throws
name|AuthException
throws|,
name|ResourceNotFoundException
throws|,
name|BadRequestException
throws|,
name|OrmException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
if|if
condition|(
name|self
operator|.
name|get
argument_list|()
operator|!=
name|rsrc
operator|.
name|getUser
argument_list|()
operator|&&
operator|!
name|self
operator|.
name|get
argument_list|()
operator|.
name|getCapabilities
argument_list|()
operator|.
name|canModifyAccount
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"restricted to members of Modify Accounts"
argument_list|)
throw|;
block|}
name|checkDownloadScheme
argument_list|(
name|i
operator|.
name|downloadScheme
argument_list|)
expr_stmt|;
name|Account
operator|.
name|Id
name|id
init|=
name|rsrc
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|GeneralPreferencesInfo
name|n
init|=
name|readFromGit
condition|?
name|readFromGit
argument_list|(
name|id
argument_list|,
name|gitMgr
argument_list|,
name|allUsersName
argument_list|,
name|i
argument_list|)
else|:
name|merge
argument_list|(
name|initFromDb
argument_list|(
name|db
operator|.
name|get
argument_list|()
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getGeneralPreferences
argument_list|()
argument_list|)
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|n
operator|.
name|my
operator|=
name|i
operator|.
name|my
expr_stmt|;
name|n
operator|.
name|urlAliases
operator|=
name|i
operator|.
name|urlAliases
expr_stmt|;
name|writeToGit
argument_list|(
name|id
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|writeToDb
argument_list|(
name|id
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|cache
operator|.
name|evict
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|GetPreferences
operator|.
name|readFromGit
argument_list|(
name|id
argument_list|,
name|gitMgr
argument_list|,
name|allUsersName
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|writeToGit (Account.Id id, GeneralPreferencesInfo i)
specifier|private
name|void
name|writeToGit
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|,
name|GeneralPreferencesInfo
name|i
parameter_list|)
throws|throws
name|RepositoryNotFoundException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|VersionedAccountPreferences
name|prefs
decl_stmt|;
try|try
init|(
name|MetaDataUpdate
name|md
init|=
name|metaDataUpdateFactory
operator|.
name|get
argument_list|()
operator|.
name|create
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
name|prefs
operator|=
name|VersionedAccountPreferences
operator|.
name|forUser
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|load
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|storeSection
argument_list|(
name|prefs
operator|.
name|getConfig
argument_list|()
argument_list|,
name|UserConfigSections
operator|.
name|GENERAL
argument_list|,
literal|null
argument_list|,
name|i
argument_list|,
name|GeneralPreferencesInfo
operator|.
name|defaults
argument_list|()
argument_list|)
expr_stmt|;
name|storeMyMenus
argument_list|(
name|prefs
argument_list|,
name|i
operator|.
name|my
argument_list|)
expr_stmt|;
name|storeUrlAliases
argument_list|(
name|prefs
argument_list|,
name|i
operator|.
name|urlAliases
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeToDb (Account.Id id, GeneralPreferencesInfo i)
specifier|private
name|void
name|writeToDb
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|,
name|GeneralPreferencesInfo
name|i
parameter_list|)
throws|throws
name|RepositoryNotFoundException
throws|,
name|IOException
throws|,
name|OrmException
throws|,
name|ConfigInvalidException
block|{
name|MetaDataUpdate
name|md
init|=
name|metaDataUpdateFactory
operator|.
name|get
argument_list|()
operator|.
name|create
argument_list|(
name|allUsersName
argument_list|)
decl_stmt|;
name|db
operator|.
name|get
argument_list|()
operator|.
name|accounts
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|id
argument_list|)
expr_stmt|;
try|try
block|{
name|Account
name|a
init|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|VersionedAccountPreferences
name|versionedPrefs
init|=
name|VersionedAccountPreferences
operator|.
name|forUser
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|versionedPrefs
operator|.
name|load
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|AccountGeneralPreferences
name|p
init|=
name|a
operator|.
name|getGeneralPreferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|AccountGeneralPreferences
argument_list|()
expr_stmt|;
name|a
operator|.
name|setGeneralPreferences
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|initAccountGeneralPreferences
argument_list|(
name|p
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|db
operator|.
name|get
argument_list|()
operator|.
name|accounts
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|get
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
name|storeMyMenus
argument_list|(
name|versionedPrefs
argument_list|,
name|i
operator|.
name|my
argument_list|)
expr_stmt|;
name|storeUrlAliases
argument_list|(
name|versionedPrefs
argument_list|,
name|i
operator|.
name|urlAliases
argument_list|)
expr_stmt|;
name|versionedPrefs
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|get
argument_list|()
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|storeMyMenus (VersionedAccountPreferences prefs, List<MenuItem> my)
specifier|public
specifier|static
name|void
name|storeMyMenus
parameter_list|(
name|VersionedAccountPreferences
name|prefs
parameter_list|,
name|List
argument_list|<
name|MenuItem
argument_list|>
name|my
parameter_list|)
block|{
name|Config
name|cfg
init|=
name|prefs
operator|.
name|getConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|my
operator|!=
literal|null
condition|)
block|{
name|unsetSection
argument_list|(
name|cfg
argument_list|,
name|UserConfigSections
operator|.
name|MY
argument_list|)
expr_stmt|;
for|for
control|(
name|MenuItem
name|item
range|:
name|my
control|)
block|{
name|set
argument_list|(
name|cfg
argument_list|,
name|item
operator|.
name|name
argument_list|,
name|KEY_URL
argument_list|,
name|item
operator|.
name|url
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|cfg
argument_list|,
name|item
operator|.
name|name
argument_list|,
name|KEY_TARGET
argument_list|,
name|item
operator|.
name|target
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|cfg
argument_list|,
name|item
operator|.
name|name
argument_list|,
name|KEY_ID
argument_list|,
name|item
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|set (Config cfg, String section, String key, String val)
specifier|private
specifier|static
name|void
name|set
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|String
name|section
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|cfg
operator|.
name|unset
argument_list|(
name|UserConfigSections
operator|.
name|MY
argument_list|,
name|section
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cfg
operator|.
name|setString
argument_list|(
name|UserConfigSections
operator|.
name|MY
argument_list|,
name|section
argument_list|,
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|unsetSection (Config cfg, String section)
specifier|private
specifier|static
name|void
name|unsetSection
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|String
name|section
parameter_list|)
block|{
name|cfg
operator|.
name|unsetSection
argument_list|(
name|section
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|subsection
range|:
name|cfg
operator|.
name|getSubsections
argument_list|(
name|section
argument_list|)
control|)
block|{
name|cfg
operator|.
name|unsetSection
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|storeUrlAliases (VersionedAccountPreferences prefs, Map<String, String> urlAliases)
specifier|public
specifier|static
name|void
name|storeUrlAliases
parameter_list|(
name|VersionedAccountPreferences
name|prefs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|urlAliases
parameter_list|)
block|{
if|if
condition|(
name|urlAliases
operator|!=
literal|null
condition|)
block|{
name|Config
name|cfg
init|=
name|prefs
operator|.
name|getConfig
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|subsection
range|:
name|cfg
operator|.
name|getSubsections
argument_list|(
name|URL_ALIAS
argument_list|)
control|)
block|{
name|cfg
operator|.
name|unsetSection
argument_list|(
name|URL_ALIAS
argument_list|,
name|subsection
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|urlAliases
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|cfg
operator|.
name|setString
argument_list|(
name|URL_ALIAS
argument_list|,
name|URL_ALIAS
operator|+
name|i
argument_list|,
name|KEY_MATCH
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
name|URL_ALIAS
argument_list|,
name|URL_ALIAS
operator|+
name|i
argument_list|,
name|KEY_TOKEN
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkDownloadScheme (String downloadScheme)
specifier|private
name|void
name|checkDownloadScheme
parameter_list|(
name|String
name|downloadScheme
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|downloadScheme
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|DynamicMap
operator|.
name|Entry
argument_list|<
name|DownloadScheme
argument_list|>
name|e
range|:
name|downloadSchemes
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getExportName
argument_list|()
operator|.
name|equals
argument_list|(
name|downloadScheme
argument_list|)
operator|&&
name|e
operator|.
name|getProvider
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Unsupported download scheme: "
operator|+
name|downloadScheme
argument_list|)
throw|;
block|}
DECL|method|merge (GeneralPreferencesInfo p, GeneralPreferencesInfo i)
specifier|private
name|GeneralPreferencesInfo
name|merge
parameter_list|(
name|GeneralPreferencesInfo
name|p
parameter_list|,
name|GeneralPreferencesInfo
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|.
name|changesPerPage
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|changesPerPage
operator|=
name|i
operator|.
name|changesPerPage
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|showSiteHeader
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|showSiteHeader
operator|=
name|i
operator|.
name|showSiteHeader
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|useFlashClipboard
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|useFlashClipboard
operator|=
name|i
operator|.
name|useFlashClipboard
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|downloadScheme
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|downloadScheme
operator|=
name|i
operator|.
name|downloadScheme
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|downloadCommand
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|downloadCommand
operator|=
name|i
operator|.
name|downloadCommand
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|dateFormat
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|dateFormat
operator|=
name|i
operator|.
name|dateFormat
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|timeFormat
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|timeFormat
operator|=
name|i
operator|.
name|timeFormat
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|relativeDateInChangeTable
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|relativeDateInChangeTable
operator|=
name|i
operator|.
name|relativeDateInChangeTable
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|sizeBarInChangeTable
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|sizeBarInChangeTable
operator|=
name|i
operator|.
name|sizeBarInChangeTable
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|legacycidInChangeTable
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|legacycidInChangeTable
operator|=
name|i
operator|.
name|legacycidInChangeTable
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|muteCommonPathPrefixes
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|muteCommonPathPrefixes
operator|=
name|i
operator|.
name|muteCommonPathPrefixes
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|reviewCategoryStrategy
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|reviewCategoryStrategy
operator|=
name|i
operator|.
name|reviewCategoryStrategy
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|diffView
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|diffView
operator|=
name|i
operator|.
name|diffView
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|emailStrategy
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|emailStrategy
operator|=
name|i
operator|.
name|emailStrategy
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
DECL|method|initAccountGeneralPreferences ( AccountGeneralPreferences a, GeneralPreferencesInfo i)
specifier|private
specifier|static
name|void
name|initAccountGeneralPreferences
parameter_list|(
name|AccountGeneralPreferences
name|a
parameter_list|,
name|GeneralPreferencesInfo
name|i
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|a
operator|=
name|AccountGeneralPreferences
operator|.
name|createDefault
argument_list|()
expr_stmt|;
block|}
name|a
operator|.
name|setMaximumPageSize
argument_list|(
call|(
name|short
call|)
argument_list|(
name|int
argument_list|)
name|i
operator|.
name|changesPerPage
argument_list|)
expr_stmt|;
name|a
operator|.
name|setShowSiteHeader
argument_list|(
name|b
argument_list|(
name|i
operator|.
name|showSiteHeader
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setUseFlashClipboard
argument_list|(
name|b
argument_list|(
name|i
operator|.
name|useFlashClipboard
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDownloadUrl
argument_list|(
name|i
operator|.
name|downloadScheme
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|downloadCommand
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|setDownloadCommand
argument_list|(
name|DownloadCommand
operator|.
name|valueOf
argument_list|(
name|i
operator|.
name|downloadCommand
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|setEmailStrategy
argument_list|(
name|EmailStrategy
operator|.
name|valueOf
argument_list|(
name|i
operator|.
name|getEmailStrategy
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDateFormat
argument_list|(
name|DateFormat
operator|.
name|valueOf
argument_list|(
name|i
operator|.
name|getDateFormat
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setTimeFormat
argument_list|(
name|TimeFormat
operator|.
name|valueOf
argument_list|(
name|i
operator|.
name|getTimeFormat
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setRelativeDateInChangeTable
argument_list|(
name|b
argument_list|(
name|i
operator|.
name|relativeDateInChangeTable
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSizeBarInChangeTable
argument_list|(
name|b
argument_list|(
name|i
operator|.
name|sizeBarInChangeTable
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLegacycidInChangeTable
argument_list|(
name|b
argument_list|(
name|i
operator|.
name|legacycidInChangeTable
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setMuteCommonPathPrefixes
argument_list|(
name|b
argument_list|(
name|i
operator|.
name|muteCommonPathPrefixes
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setReviewCategoryStrategy
argument_list|(
name|ReviewCategoryStrategy
operator|.
name|valueOf
argument_list|(
name|i
operator|.
name|getReviewCategoryStrategy
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDiffView
argument_list|(
name|DiffView
operator|.
name|valueOf
argument_list|(
name|i
operator|.
name|getDiffView
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|b (Boolean b)
specifier|private
specifier|static
name|boolean
name|b
parameter_list|(
name|Boolean
name|b
parameter_list|)
block|{
return|return
name|b
operator|==
literal|null
condition|?
literal|false
else|:
name|b
return|;
block|}
block|}
end_class

end_unit

