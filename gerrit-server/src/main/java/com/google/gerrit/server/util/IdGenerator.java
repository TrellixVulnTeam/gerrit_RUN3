begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.util
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/** Simple class to produce 4 billion keys randomly distributed. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|IdGenerator
specifier|public
class|class
name|IdGenerator
block|{
comment|/** Format an id created by this class as a hex string. */
DECL|method|format (int id)
specifier|public
specifier|static
name|String
name|format
parameter_list|(
name|int
name|id
parameter_list|)
block|{
specifier|final
name|char
index|[]
name|r
init|=
operator|new
name|char
index|[
literal|8
index|]
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|7
init|;
literal|0
operator|<=
name|p
condition|;
name|p
operator|--
control|)
block|{
specifier|final
name|int
name|h
init|=
name|id
operator|&
literal|0xf
decl_stmt|;
name|r
index|[
name|p
index|]
operator|=
name|h
operator|<
literal|10
condition|?
call|(
name|char
call|)
argument_list|(
literal|'0'
operator|+
name|h
argument_list|)
else|:
call|(
name|char
call|)
argument_list|(
literal|'a'
operator|+
operator|(
name|h
operator|-
literal|10
operator|)
argument_list|)
expr_stmt|;
name|id
operator|>>=
literal|4
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|r
argument_list|)
return|;
block|}
DECL|field|gen
specifier|private
specifier|final
name|AtomicInteger
name|gen
decl_stmt|;
annotation|@
name|Inject
DECL|method|IdGenerator ()
name|IdGenerator
parameter_list|()
block|{
name|gen
operator|=
operator|new
name|AtomicInteger
argument_list|(
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Produce the next identifier. */
DECL|method|next ()
specifier|public
name|int
name|next
parameter_list|()
block|{
return|return
name|mix
argument_list|(
name|gen
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
return|;
block|}
DECL|field|salt
specifier|private
specifier|static
specifier|final
name|int
name|salt
init|=
literal|0x9e3779b9
decl_stmt|;
comment|/** A very simple bit permutation to mask a simple incrementer. */
DECL|method|mix (final int in)
specifier|static
name|int
name|mix
parameter_list|(
specifier|final
name|int
name|in
parameter_list|)
block|{
name|short
name|v0
init|=
name|hi16
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|short
name|v1
init|=
name|lo16
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|v0
operator|+=
operator|(
operator|(
name|v1
operator|<<
literal|2
operator|)
operator|+
literal|0
operator|^
name|v1
operator|)
operator|+
operator|(
name|salt
operator|^
operator|(
name|v1
operator|>>>
literal|3
operator|)
operator|)
operator|+
literal|1
expr_stmt|;
name|v1
operator|+=
operator|(
operator|(
name|v0
operator|<<
literal|2
operator|)
operator|+
literal|2
operator|^
name|v0
operator|)
operator|+
operator|(
name|salt
operator|^
operator|(
name|v0
operator|>>>
literal|3
operator|)
operator|)
operator|+
literal|3
expr_stmt|;
return|return
name|result
argument_list|(
name|v0
argument_list|,
name|v1
argument_list|)
return|;
block|}
comment|/* For testing only. */
DECL|method|unmix (final int in)
specifier|static
name|int
name|unmix
parameter_list|(
specifier|final
name|int
name|in
parameter_list|)
block|{
name|short
name|v0
init|=
name|hi16
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|short
name|v1
init|=
name|lo16
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|v1
operator|-=
operator|(
operator|(
name|v0
operator|<<
literal|2
operator|)
operator|+
literal|2
operator|^
name|v0
operator|)
operator|+
operator|(
name|salt
operator|^
operator|(
name|v0
operator|>>>
literal|3
operator|)
operator|)
operator|+
literal|3
expr_stmt|;
name|v0
operator|-=
operator|(
operator|(
name|v1
operator|<<
literal|2
operator|)
operator|+
literal|0
operator|^
name|v1
operator|)
operator|+
operator|(
name|salt
operator|^
operator|(
name|v1
operator|>>>
literal|3
operator|)
operator|)
operator|+
literal|1
expr_stmt|;
return|return
name|result
argument_list|(
name|v0
argument_list|,
name|v1
argument_list|)
return|;
block|}
DECL|method|hi16 (final int in)
specifier|private
specifier|static
name|short
name|hi16
parameter_list|(
specifier|final
name|int
name|in
parameter_list|)
block|{
return|return
call|(
name|short
call|)
argument_list|(
comment|//
operator|(
operator|(
name|in
operator|>>>
literal|24
operator|&
literal|0xff
operator|)
operator|)
operator||
comment|//
operator|(
operator|(
name|in
operator|>>>
literal|16
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
comment|//
argument_list|)
return|;
block|}
DECL|method|lo16 (final int in)
specifier|private
specifier|static
name|short
name|lo16
parameter_list|(
specifier|final
name|int
name|in
parameter_list|)
block|{
return|return
call|(
name|short
call|)
argument_list|(
comment|//
operator|(
operator|(
name|in
operator|>>>
literal|8
operator|&
literal|0xff
operator|)
operator|)
operator||
comment|//
operator|(
operator|(
name|in
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
comment|//
argument_list|)
return|;
block|}
DECL|method|result (final short v0, final short v1)
specifier|private
specifier|static
name|int
name|result
parameter_list|(
specifier|final
name|short
name|v0
parameter_list|,
specifier|final
name|short
name|v1
parameter_list|)
block|{
return|return
operator|(
operator|(
name|v0
operator|&
literal|0xff
operator|)
operator|<<
literal|24
operator|)
operator||
comment|//
operator|(
operator|(
operator|(
name|v0
operator|>>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
comment|//
operator|(
operator|(
name|v1
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
comment|//
operator|(
operator|(
name|v1
operator|>>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
return|;
block|}
block|}
end_class

end_unit

