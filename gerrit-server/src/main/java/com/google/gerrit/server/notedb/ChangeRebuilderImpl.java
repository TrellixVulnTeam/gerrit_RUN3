begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|changeMetaRef
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchLineCommentsUtil
operator|.
name|setCommentRevId
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_HASHTAGS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_PATCH_SET
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ComparisonChain
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|FormatUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchLineCommentsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AnonymousCowardName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ChainedReceiveCommands
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbUpdateManager
operator|.
name|OpenRepo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbUpdateManager
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|AtomicUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmRuntimeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|InvalidObjectIdException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|TextProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|ChangeRebuilderImpl
specifier|public
class|class
name|ChangeRebuilderImpl
extends|extends
name|ChangeRebuilder
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChangeRebuilderImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The maximum amount of time between the ReviewDb timestamp of the first and    * last events batched together into a single NoteDb update.    *<p>    * Used to account for the fact that different records with their own    * timestamps (e.g. {@link PatchSetApproval} and {@link ChangeMessage})    * historically didn't necessarily use the same timestamp, and tended to call    * {@code System.currentTimeMillis()} independently.    */
DECL|field|MAX_WINDOW_MS
specifier|static
specifier|final
name|long
name|MAX_WINDOW_MS
init|=
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|/**    * The maximum amount of time between two consecutive events to consider them    * to be in the same batch.    */
DECL|field|MAX_DELTA_MS
specifier|private
specifier|static
specifier|final
name|long
name|MAX_DELTA_MS
init|=
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|draftUpdateFactory
specifier|private
specifier|final
name|ChangeDraftUpdate
operator|.
name|Factory
name|draftUpdateFactory
decl_stmt|;
DECL|field|changeNoteUtil
specifier|private
specifier|final
name|ChangeNoteUtil
name|changeNoteUtil
decl_stmt|;
DECL|field|updateFactory
specifier|private
specifier|final
name|ChangeUpdate
operator|.
name|Factory
name|updateFactory
decl_stmt|;
DECL|field|updateManagerFactory
specifier|private
specifier|final
name|NoteDbUpdateManager
operator|.
name|Factory
name|updateManagerFactory
decl_stmt|;
DECL|field|migration
specifier|private
specifier|final
name|NotesMigration
name|migration
decl_stmt|;
DECL|field|patchListCache
specifier|private
specifier|final
name|PatchListCache
name|patchListCache
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|PersonIdent
name|serverIdent
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|anonymousCowardName
specifier|private
specifier|final
name|String
name|anonymousCowardName
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChangeRebuilderImpl (SchemaFactory<ReviewDb> schemaFactory, AccountCache accountCache, ChangeDraftUpdate.Factory draftUpdateFactory, ChangeNoteUtil changeNoteUtil, ChangeUpdate.Factory updateFactory, NoteDbUpdateManager.Factory updateManagerFactory, NotesMigration migration, PatchListCache patchListCache, @GerritPersonIdent PersonIdent serverIdent, @Nullable ProjectCache projectCache, @AnonymousCowardName String anonymousCowardName)
name|ChangeRebuilderImpl
parameter_list|(
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
parameter_list|,
name|AccountCache
name|accountCache
parameter_list|,
name|ChangeDraftUpdate
operator|.
name|Factory
name|draftUpdateFactory
parameter_list|,
name|ChangeNoteUtil
name|changeNoteUtil
parameter_list|,
name|ChangeUpdate
operator|.
name|Factory
name|updateFactory
parameter_list|,
name|NoteDbUpdateManager
operator|.
name|Factory
name|updateManagerFactory
parameter_list|,
name|NotesMigration
name|migration
parameter_list|,
name|PatchListCache
name|patchListCache
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverIdent
parameter_list|,
annotation|@
name|Nullable
name|ProjectCache
name|projectCache
parameter_list|,
annotation|@
name|AnonymousCowardName
name|String
name|anonymousCowardName
parameter_list|)
block|{
name|super
argument_list|(
name|schemaFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|draftUpdateFactory
operator|=
name|draftUpdateFactory
expr_stmt|;
name|this
operator|.
name|changeNoteUtil
operator|=
name|changeNoteUtil
expr_stmt|;
name|this
operator|.
name|updateFactory
operator|=
name|updateFactory
expr_stmt|;
name|this
operator|.
name|updateManagerFactory
operator|=
name|updateManagerFactory
expr_stmt|;
name|this
operator|.
name|migration
operator|=
name|migration
expr_stmt|;
name|this
operator|.
name|patchListCache
operator|=
name|patchListCache
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|anonymousCowardName
operator|=
name|anonymousCowardName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rebuild (ReviewDb db, Change.Id changeId)
specifier|public
name|Result
name|rebuild
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|IOException
throws|,
name|OrmException
throws|,
name|ConfigInvalidException
block|{
name|db
operator|=
name|ReviewDbUtil
operator|.
name|unwrapDb
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Change
name|change
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
try|try
init|(
name|NoteDbUpdateManager
name|manager
init|=
name|updateManagerFactory
operator|.
name|create
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
init|)
block|{
name|buildUpdates
argument_list|(
name|manager
argument_list|,
name|ChangeBundle
operator|.
name|fromReviewDb
argument_list|(
name|db
argument_list|,
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|execute
argument_list|(
name|db
argument_list|,
name|changeId
argument_list|,
name|manager
argument_list|)
return|;
block|}
block|}
DECL|class|AbortUpdateException
specifier|private
specifier|static
class|class
name|AbortUpdateException
extends|extends
name|OrmRuntimeException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|AbortUpdateException ()
name|AbortUpdateException
parameter_list|()
block|{
name|super
argument_list|(
literal|"aborted"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ConflictingUpdateException
specifier|private
specifier|static
class|class
name|ConflictingUpdateException
extends|extends
name|OrmRuntimeException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|ConflictingUpdateException (Change change, String expectedNoteDbState)
name|ConflictingUpdateException
parameter_list|(
name|Change
name|change
parameter_list|,
name|String
name|expectedNoteDbState
parameter_list|)
block|{
name|super
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected change %s to have noteDbState %s but was %s"
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|expectedNoteDbState
argument_list|,
name|change
operator|.
name|getNoteDbState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|rebuild (NoteDbUpdateManager manager, ChangeBundle bundle)
specifier|public
name|Result
name|rebuild
parameter_list|(
name|NoteDbUpdateManager
name|manager
parameter_list|,
name|ChangeBundle
name|bundle
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|IOException
throws|,
name|OrmException
throws|,
name|ConfigInvalidException
block|{
name|Change
name|change
init|=
operator|new
name|Change
argument_list|(
name|bundle
operator|.
name|getChange
argument_list|()
argument_list|)
decl_stmt|;
name|buildUpdates
argument_list|(
name|manager
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
return|return
name|manager
operator|.
name|stageAndApplyDelta
argument_list|(
name|change
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|stage (ReviewDb db, Change.Id changeId)
specifier|public
name|NoteDbUpdateManager
name|stage
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|IOException
throws|,
name|OrmException
block|{
name|db
operator|=
name|ReviewDbUtil
operator|.
name|unwrapDb
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Change
name|change
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
name|NoteDbUpdateManager
name|manager
init|=
name|updateManagerFactory
operator|.
name|create
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
decl_stmt|;
name|buildUpdates
argument_list|(
name|manager
argument_list|,
name|ChangeBundle
operator|.
name|fromReviewDb
argument_list|(
name|db
argument_list|,
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|stage
argument_list|()
expr_stmt|;
return|return
name|manager
return|;
block|}
annotation|@
name|Override
DECL|method|execute (ReviewDb db, Change.Id changeId, NoteDbUpdateManager manager)
specifier|public
name|Result
name|execute
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|NoteDbUpdateManager
name|manager
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|OrmException
throws|,
name|IOException
block|{
name|db
operator|=
name|ReviewDbUtil
operator|.
name|unwrapDb
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Change
name|change
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
specifier|final
name|String
name|oldNoteDbState
init|=
name|change
operator|.
name|getNoteDbState
argument_list|()
decl_stmt|;
name|Result
name|r
init|=
name|manager
operator|.
name|stageAndApplyDelta
argument_list|(
name|change
argument_list|)
decl_stmt|;
specifier|final
name|String
name|newNoteDbState
init|=
name|change
operator|.
name|getNoteDbState
argument_list|()
decl_stmt|;
try|try
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|changeId
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
name|String
name|currNoteDbState
init|=
name|change
operator|.
name|getNoteDbState
argument_list|()
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|currNoteDbState
argument_list|,
name|newNoteDbState
argument_list|)
condition|)
block|{
comment|// Another thread completed the same rebuild we were about to.
throw|throw
operator|new
name|AbortUpdateException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|oldNoteDbState
argument_list|,
name|currNoteDbState
argument_list|)
condition|)
block|{
comment|// Another thread updated the state to something else.
throw|throw
operator|new
name|ConflictingUpdateException
argument_list|(
name|change
argument_list|,
name|oldNoteDbState
argument_list|)
throw|;
block|}
name|change
operator|.
name|setNoteDbState
argument_list|(
name|newNoteDbState
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConflictingUpdateException
name|e
parameter_list|)
block|{
comment|// Rethrow as an OrmException so the caller knows to use staged results.
comment|// Strictly speaking they are not completely up to date, but result we
comment|// send to the caller is the same as if this rebuild had executed before
comment|// the other thread.
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AbortUpdateException
name|e
parameter_list|)
block|{
if|if
condition|(
name|NoteDbChangeState
operator|.
name|parse
argument_list|(
name|changeId
argument_list|,
name|newNoteDbState
argument_list|)
operator|.
name|isUpToDate
argument_list|(
name|manager
operator|.
name|getChangeRepo
argument_list|()
operator|.
name|cmds
operator|.
name|getRepoRefCache
argument_list|()
argument_list|,
name|manager
operator|.
name|getAllUsersRepo
argument_list|()
operator|.
name|cmds
operator|.
name|getRepoRefCache
argument_list|()
argument_list|)
condition|)
block|{
comment|// If the state in ReviewDb matches NoteDb at this point, it means
comment|// another thread successfully completed this rebuild. It's ok to not
comment|// execute the update in this case, since the object referenced in the
comment|// Result was flushed to the repo by whatever thread won the race.
return|return
name|r
return|;
block|}
comment|// If the state doesn't match, that means another thread attempted this
comment|// rebuild, but failed. Fall through and try to update the ref again.
block|}
if|if
condition|(
name|migration
operator|.
name|failChangeWrites
argument_list|()
condition|)
block|{
comment|// Don't even attempt to execute if read-only, it would fail anyway. But
comment|// do throw an exception to the caller so they know to use the staged
comment|// results instead of reading from the repo.
throw|throw
operator|new
name|OrmException
argument_list|(
name|NoteDbUpdateManager
operator|.
name|CHANGES_READ_ONLY
argument_list|)
throw|;
block|}
name|manager
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
annotation|@
name|Override
DECL|method|rebuildProject (ReviewDb db, ImmutableMultimap<Project.NameKey, Change.Id> allChanges, Project.NameKey project, Repository allUsersRepo)
specifier|public
name|boolean
name|rebuildProject
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ImmutableMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|allChanges
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Repository
name|allUsersRepo
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|IOException
throws|,
name|OrmException
throws|,
name|ConfigInvalidException
block|{
name|checkArgument
argument_list|(
name|allChanges
operator|.
name|containsKey
argument_list|(
name|project
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|true
decl_stmt|;
name|ProgressMonitor
name|pm
init|=
operator|new
name|TextProgressMonitor
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
decl_stmt|;
name|pm
operator|.
name|beginTask
argument_list|(
name|FormatUtil
operator|.
name|elide
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|50
argument_list|)
argument_list|,
name|allChanges
operator|.
name|get
argument_list|(
name|project
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|NoteDbUpdateManager
name|manager
init|=
name|updateManagerFactory
operator|.
name|create
argument_list|(
name|project
argument_list|)
init|;
name|ObjectInserter
name|allUsersInserter
operator|=
name|allUsersRepo
operator|.
name|newObjectInserter
argument_list|()
init|;
name|RevWalk
name|allUsersRw
operator|=
operator|new
name|RevWalk
argument_list|(
name|allUsersInserter
operator|.
name|newReader
argument_list|()
argument_list|)
init|)
block|{
name|manager
operator|.
name|setAllUsersRepo
argument_list|(
name|allUsersRepo
argument_list|,
name|allUsersRw
argument_list|,
name|allUsersInserter
argument_list|,
operator|new
name|ChainedReceiveCommands
argument_list|(
name|allUsersRepo
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Change
operator|.
name|Id
name|changeId
range|:
name|allChanges
operator|.
name|get
argument_list|(
name|project
argument_list|)
control|)
block|{
try|try
block|{
name|buildUpdates
argument_list|(
name|manager
argument_list|,
name|ChangeBundle
operator|.
name|fromReviewDb
argument_list|(
name|db
argument_list|,
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoPatchSetsException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to rebuild change "
operator|+
name|changeId
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|pm
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|pm
operator|.
name|endTask
argument_list|()
expr_stmt|;
block|}
return|return
name|ok
return|;
block|}
DECL|method|buildUpdates (NoteDbUpdateManager manager, ChangeBundle bundle)
specifier|private
name|void
name|buildUpdates
parameter_list|(
name|NoteDbUpdateManager
name|manager
parameter_list|,
name|ChangeBundle
name|bundle
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
block|{
name|manager
operator|.
name|setCheckExpectedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Change
name|change
init|=
operator|new
name|Change
argument_list|(
name|bundle
operator|.
name|getChange
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|.
name|getPatchSets
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoPatchSetsException
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
name|PatchSet
operator|.
name|Id
name|currPsId
init|=
name|change
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
comment|// We will rebuild all events, except for draft comments, in buckets based
comment|// on author and timestamp.
name|List
argument_list|<
name|Event
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|PatchLineCommentEvent
argument_list|>
name|draftCommentEvents
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|events
operator|.
name|addAll
argument_list|(
name|getHashtagsEvents
argument_list|(
name|change
argument_list|,
name|manager
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete ref only after hashtags have been read
name|deleteChangeMetaRef
argument_list|(
name|change
argument_list|,
name|manager
operator|.
name|getChangeRepo
argument_list|()
operator|.
name|cmds
argument_list|)
expr_stmt|;
name|deleteDraftRefs
argument_list|(
name|change
argument_list|,
name|manager
operator|.
name|getAllUsersRepo
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|minPsNum
init|=
name|getMinPatchSetNum
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|psIds
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|bundle
operator|.
name|getPatchSets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSet
name|ps
range|:
name|bundle
operator|.
name|getPatchSets
argument_list|()
control|)
block|{
if|if
condition|(
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
operator|>
name|currPsId
operator|.
name|get
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Skipping patch set {}, which is higher than current patch set {}"
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|currPsId
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|psIds
operator|.
name|add
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|events
operator|.
name|add
argument_list|(
operator|new
name|PatchSetEvent
argument_list|(
name|change
argument_list|,
name|ps
argument_list|,
name|manager
operator|.
name|getChangeRepo
argument_list|()
operator|.
name|rw
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PatchLineComment
name|c
range|:
name|getPatchLineComments
argument_list|(
name|bundle
argument_list|,
name|ps
argument_list|)
control|)
block|{
name|PatchLineCommentEvent
name|e
init|=
operator|new
name|PatchLineCommentEvent
argument_list|(
name|c
argument_list|,
name|change
argument_list|,
name|ps
argument_list|,
name|patchListCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|PUBLISHED
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|draftCommentEvents
operator|.
name|put
argument_list|(
name|c
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|bundle
operator|.
name|getPatchSetApprovals
argument_list|()
control|)
block|{
if|if
condition|(
name|psIds
operator|.
name|contains
argument_list|(
name|psa
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
operator|new
name|ApprovalEvent
argument_list|(
name|psa
argument_list|,
name|change
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Table
operator|.
name|Cell
argument_list|<
name|ReviewerStateInternal
argument_list|,
name|Account
operator|.
name|Id
argument_list|,
name|Timestamp
argument_list|>
name|r
range|:
name|bundle
operator|.
name|getReviewers
argument_list|()
operator|.
name|asTable
argument_list|()
operator|.
name|cellSet
argument_list|()
control|)
block|{
name|events
operator|.
name|add
argument_list|(
operator|new
name|ReviewerEvent
argument_list|(
name|r
argument_list|,
name|change
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Change
name|noteDbChange
init|=
operator|new
name|Change
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeMessage
name|msg
range|:
name|bundle
operator|.
name|getChangeMessages
argument_list|()
control|)
block|{
if|if
condition|(
name|msg
operator|.
name|getPatchSetId
argument_list|()
operator|==
literal|null
operator|||
name|psIds
operator|.
name|contains
argument_list|(
name|msg
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
operator|new
name|ChangeMessageEvent
argument_list|(
name|msg
argument_list|,
name|noteDbChange
argument_list|,
name|change
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sortAndFillEvents
argument_list|(
name|change
argument_list|,
name|noteDbChange
argument_list|,
name|events
argument_list|,
name|minPsNum
argument_list|)
expr_stmt|;
name|EventList
argument_list|<
name|Event
argument_list|>
name|el
init|=
operator|new
name|EventList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Event
name|e
range|:
name|events
control|)
block|{
if|if
condition|(
operator|!
name|el
operator|.
name|canAdd
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|flushEventsToUpdate
argument_list|(
name|manager
argument_list|,
name|el
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|el
operator|.
name|canAdd
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|el
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|flushEventsToUpdate
argument_list|(
name|manager
argument_list|,
name|el
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|EventList
argument_list|<
name|PatchLineCommentEvent
argument_list|>
name|plcel
init|=
operator|new
name|EventList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|author
range|:
name|draftCommentEvents
operator|.
name|keys
argument_list|()
control|)
block|{
for|for
control|(
name|PatchLineCommentEvent
name|e
range|:
name|EVENT_ORDER
operator|.
name|sortedCopy
argument_list|(
name|draftCommentEvents
operator|.
name|get
argument_list|(
name|author
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|plcel
operator|.
name|canAdd
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|flushEventsToDraftUpdate
argument_list|(
name|manager
argument_list|,
name|plcel
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|plcel
operator|.
name|canAdd
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|plcel
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|flushEventsToDraftUpdate
argument_list|(
name|manager
argument_list|,
name|plcel
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getMinPatchSetNum (ChangeBundle bundle)
specifier|private
specifier|static
name|Integer
name|getMinPatchSetNum
parameter_list|(
name|ChangeBundle
name|bundle
parameter_list|)
block|{
name|Integer
name|minPsNum
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PatchSet
name|ps
range|:
name|bundle
operator|.
name|getPatchSets
argument_list|()
control|)
block|{
name|int
name|n
init|=
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|minPsNum
operator|==
literal|null
operator|||
name|n
operator|<
name|minPsNum
condition|)
block|{
name|minPsNum
operator|=
name|n
expr_stmt|;
block|}
block|}
return|return
name|minPsNum
return|;
block|}
DECL|method|getPatchLineComments (ChangeBundle bundle, final PatchSet ps)
specifier|private
specifier|static
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|getPatchLineComments
parameter_list|(
name|ChangeBundle
name|bundle
parameter_list|,
specifier|final
name|PatchSet
name|ps
parameter_list|)
block|{
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|bundle
operator|.
name|getPatchLineComments
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|Predicate
argument_list|<
name|PatchLineComment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|PatchLineComment
name|in
parameter_list|)
block|{
return|return
name|in
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|equals
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toSortedList
argument_list|(
name|PatchLineCommentsUtil
operator|.
name|PLC_ORDER
argument_list|)
return|;
block|}
DECL|method|sortAndFillEvents (Change change, Change noteDbChange, List<Event> events, Integer minPsNum)
specifier|private
name|void
name|sortAndFillEvents
parameter_list|(
name|Change
name|change
parameter_list|,
name|Change
name|noteDbChange
parameter_list|,
name|List
argument_list|<
name|Event
argument_list|>
name|events
parameter_list|,
name|Integer
name|minPsNum
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|events
argument_list|,
name|EVENT_ORDER
argument_list|)
expr_stmt|;
name|events
operator|.
name|add
argument_list|(
operator|new
name|FinalUpdatesEvent
argument_list|(
name|change
argument_list|,
name|noteDbChange
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure the first event in the list creates the change, setting the author
comment|// and any required footers.
name|Event
name|first
init|=
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|instanceof
name|PatchSetEvent
operator|&&
name|change
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|first
operator|.
name|who
argument_list|)
condition|)
block|{
operator|(
operator|(
name|PatchSetEvent
operator|)
name|first
operator|)
operator|.
name|createChange
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|events
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|CreateChangeEvent
argument_list|(
name|change
argument_list|,
name|minPsNum
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Fill in any missing patch set IDs using the latest patch set of the
comment|// change at the time of the event, because NoteDb can't represent actions
comment|// with no associated patch set ID. This workaround is as if a user added a
comment|// ChangeMessage on the change by replying from the latest patch set.
comment|//
comment|// Start with the first patch set that actually exists. If there are no
comment|// patch sets at all, minPsNum will be null, so just bail and use 1 as the
comment|// patch set ID. The corresponding patch set won't exist, but this change is
comment|// probably corrupt anyway, as deleting the last draft patch set should have
comment|// deleted the whole change.
name|int
name|ps
init|=
name|firstNonNull
argument_list|(
name|minPsNum
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Event
name|e
range|:
name|events
control|)
block|{
if|if
condition|(
name|e
operator|.
name|psId
operator|==
literal|null
condition|)
block|{
name|e
operator|.
name|psId
operator|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ps
operator|=
name|Math
operator|.
name|max
argument_list|(
name|ps
argument_list|,
name|e
operator|.
name|psId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|flushEventsToUpdate (NoteDbUpdateManager manager, EventList<Event> events, Change change)
specifier|private
name|void
name|flushEventsToUpdate
parameter_list|(
name|NoteDbUpdateManager
name|manager
parameter_list|,
name|EventList
argument_list|<
name|Event
argument_list|>
name|events
parameter_list|,
name|Change
name|change
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
if|if
condition|(
name|events
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Comparator
argument_list|<
name|String
argument_list|>
name|labelNameComparator
decl_stmt|;
if|if
condition|(
name|projectCache
operator|!=
literal|null
condition|)
block|{
name|labelNameComparator
operator|=
name|projectCache
operator|.
name|get
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|nameComparator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// No project cache available, bail and use natural ordering; there's no
comment|// semantic difference anyway difference.
name|labelNameComparator
operator|=
name|Ordering
operator|.
name|natural
argument_list|()
expr_stmt|;
block|}
name|ChangeUpdate
name|update
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|change
argument_list|,
name|events
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|events
operator|.
name|newAuthorIdent
argument_list|()
argument_list|,
name|events
operator|.
name|getWhen
argument_list|()
argument_list|,
name|labelNameComparator
argument_list|)
decl_stmt|;
name|update
operator|.
name|setAllowWriteToNewRef
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|events
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setTag
argument_list|(
name|events
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Event
name|e
range|:
name|events
control|)
block|{
name|e
operator|.
name|apply
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|add
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|flushEventsToDraftUpdate (NoteDbUpdateManager manager, EventList<PatchLineCommentEvent> events, Change change)
specifier|private
name|void
name|flushEventsToDraftUpdate
parameter_list|(
name|NoteDbUpdateManager
name|manager
parameter_list|,
name|EventList
argument_list|<
name|PatchLineCommentEvent
argument_list|>
name|events
parameter_list|,
name|Change
name|change
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|events
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|ChangeDraftUpdate
name|update
init|=
name|draftUpdateFactory
operator|.
name|create
argument_list|(
name|change
argument_list|,
name|events
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|events
operator|.
name|newAuthorIdent
argument_list|()
argument_list|,
name|events
operator|.
name|getWhen
argument_list|()
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|events
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PatchLineCommentEvent
name|e
range|:
name|events
control|)
block|{
name|e
operator|.
name|applyDraft
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|add
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|getHashtagsEvents (Change change, NoteDbUpdateManager manager)
specifier|private
name|List
argument_list|<
name|HashtagsEvent
argument_list|>
name|getHashtagsEvents
parameter_list|(
name|Change
name|change
parameter_list|,
name|NoteDbUpdateManager
name|manager
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|refName
init|=
name|changeMetaRef
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ObjectId
argument_list|>
name|old
init|=
name|manager
operator|.
name|getChangeRepo
argument_list|()
operator|.
name|getObjectId
argument_list|(
name|refName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|old
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|RevWalk
name|rw
init|=
name|manager
operator|.
name|getChangeRepo
argument_list|()
operator|.
name|rw
decl_stmt|;
name|List
argument_list|<
name|HashtagsEvent
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|old
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RevCommit
name|commit
range|:
name|rw
control|)
block|{
name|Account
operator|.
name|Id
name|authorId
decl_stmt|;
try|try
block|{
name|authorId
operator|=
name|changeNoteUtil
operator|.
name|parseIdent
argument_list|(
name|commit
operator|.
name|getAuthorIdent
argument_list|()
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|e
parameter_list|)
block|{
continue|continue;
comment|// Corrupt data, no valid hashtags in this commit.
block|}
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|parsePatchSetId
argument_list|(
name|change
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
init|=
name|parseHashtags
argument_list|(
name|commit
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorId
operator|==
literal|null
operator|||
name|psId
operator|==
literal|null
operator|||
name|hashtags
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Timestamp
name|commitTime
init|=
operator|new
name|Timestamp
argument_list|(
name|commit
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
operator|new
name|HashtagsEvent
argument_list|(
name|psId
argument_list|,
name|authorId
argument_list|,
name|commitTime
argument_list|,
name|hashtags
argument_list|,
name|change
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|events
return|;
block|}
DECL|method|parseHashtags (RevCommit commit)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|parseHashtags
parameter_list|(
name|RevCommit
name|commit
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|hashtagsLines
init|=
name|commit
operator|.
name|getFooterLines
argument_list|(
name|FOOTER_HASHTAGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|hashtagsLines
operator|.
name|isEmpty
argument_list|()
operator|||
name|hashtagsLines
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|hashtagsLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|split
argument_list|(
name|hashtagsLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parsePatchSetId (Change change, RevCommit commit)
specifier|private
name|PatchSet
operator|.
name|Id
name|parsePatchSetId
parameter_list|(
name|Change
name|change
parameter_list|,
name|RevCommit
name|commit
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|psIdLines
init|=
name|commit
operator|.
name|getFooterLines
argument_list|(
name|FOOTER_PATCH_SET
argument_list|)
decl_stmt|;
if|if
condition|(
name|psIdLines
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Integer
name|psId
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|psIdLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|psId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|psId
argument_list|)
return|;
block|}
DECL|method|deleteChangeMetaRef (Change change, ChainedReceiveCommands cmds)
specifier|private
name|void
name|deleteChangeMetaRef
parameter_list|(
name|Change
name|change
parameter_list|,
name|ChainedReceiveCommands
name|cmds
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|refName
init|=
name|changeMetaRef
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ObjectId
argument_list|>
name|old
init|=
name|cmds
operator|.
name|get
argument_list|(
name|refName
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|cmds
operator|.
name|add
argument_list|(
operator|new
name|ReceiveCommand
argument_list|(
name|old
operator|.
name|get
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|refName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteDraftRefs (Change change, OpenRepo allUsersRepo)
specifier|private
name|void
name|deleteDraftRefs
parameter_list|(
name|Change
name|change
parameter_list|,
name|OpenRepo
name|allUsersRepo
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Ref
name|r
range|:
name|allUsersRepo
operator|.
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|RefNames
operator|.
name|refsDraftCommentsPrefix
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
name|allUsersRepo
operator|.
name|cmds
operator|.
name|add
argument_list|(
operator|new
name|ReceiveCommand
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|r
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|EVENT_ORDER
specifier|private
specifier|static
specifier|final
name|Ordering
argument_list|<
name|Event
argument_list|>
name|EVENT_ORDER
init|=
operator|new
name|Ordering
argument_list|<
name|Event
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Event
name|a
parameter_list|,
name|Event
name|b
parameter_list|)
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|a
operator|.
name|when
argument_list|,
name|b
operator|.
name|when
argument_list|)
operator|.
name|compareTrueFirst
argument_list|(
name|isPatchSet
argument_list|(
name|a
argument_list|)
argument_list|,
name|isPatchSet
argument_list|(
name|b
argument_list|)
argument_list|)
operator|.
name|compareTrueFirst
argument_list|(
name|a
operator|.
name|predatesChange
argument_list|,
name|b
operator|.
name|predatesChange
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|who
argument_list|,
name|b
operator|.
name|who
argument_list|,
name|ReviewDbUtil
operator|.
name|intKeyOrdering
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|psId
argument_list|,
name|b
operator|.
name|psId
argument_list|,
name|ReviewDbUtil
operator|.
name|intKeyOrdering
argument_list|()
operator|.
name|nullsLast
argument_list|()
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isPatchSet
parameter_list|(
name|Event
name|e
parameter_list|)
block|{
return|return
name|e
operator|instanceof
name|PatchSetEvent
return|;
block|}
block|}
decl_stmt|;
DECL|class|Event
specifier|private
specifier|abstract
specifier|static
class|class
name|Event
block|{
comment|// NOTE: EventList only supports direct subclasses, not an arbitrary
comment|// hierarchy.
DECL|field|who
specifier|final
name|Account
operator|.
name|Id
name|who
decl_stmt|;
DECL|field|when
specifier|final
name|Timestamp
name|when
decl_stmt|;
DECL|field|tag
specifier|final
name|String
name|tag
decl_stmt|;
DECL|field|predatesChange
specifier|final
name|boolean
name|predatesChange
decl_stmt|;
DECL|field|psId
name|PatchSet
operator|.
name|Id
name|psId
decl_stmt|;
DECL|method|Event (PatchSet.Id psId, Account.Id who, Timestamp when, Timestamp changeCreatedOn, String tag)
specifier|protected
name|Event
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|Account
operator|.
name|Id
name|who
parameter_list|,
name|Timestamp
name|when
parameter_list|,
name|Timestamp
name|changeCreatedOn
parameter_list|,
name|String
name|tag
parameter_list|)
block|{
name|this
operator|.
name|psId
operator|=
name|psId
expr_stmt|;
name|this
operator|.
name|who
operator|=
name|who
expr_stmt|;
name|this
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
comment|// Truncate timestamps at the change's createdOn timestamp.
name|predatesChange
operator|=
name|when
operator|.
name|before
argument_list|(
name|changeCreatedOn
argument_list|)
expr_stmt|;
name|this
operator|.
name|when
operator|=
name|predatesChange
condition|?
name|changeCreatedOn
else|:
name|when
expr_stmt|;
block|}
DECL|method|checkUpdate (AbstractChangeUpdate update)
specifier|protected
name|void
name|checkUpdate
parameter_list|(
name|AbstractChangeUpdate
name|update
parameter_list|)
block|{
name|checkState
argument_list|(
name|Objects
operator|.
name|equals
argument_list|(
name|update
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|psId
argument_list|)
argument_list|,
literal|"cannot apply event for %s to update for %s"
argument_list|,
name|update
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|psId
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|when
operator|.
name|getTime
argument_list|()
operator|-
name|update
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
operator|<=
name|MAX_WINDOW_MS
argument_list|,
literal|"event at %s outside update window starting at %s"
argument_list|,
name|when
argument_list|,
name|update
operator|.
name|getWhen
argument_list|()
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|Objects
operator|.
name|equals
argument_list|(
name|update
operator|.
name|getNullableAccountId
argument_list|()
argument_list|,
name|who
argument_list|)
argument_list|,
literal|"cannot apply event by %s to update by %s"
argument_list|,
name|who
argument_list|,
name|update
operator|.
name|getNullableAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return whether this event type must be unique per {@link ChangeUpdate},      *     i.e. there may be at most one of this type.      */
DECL|method|uniquePerUpdate ()
specifier|abstract
name|boolean
name|uniquePerUpdate
parameter_list|()
function_decl|;
DECL|method|apply (ChangeUpdate update)
specifier|abstract
name|void
name|apply
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|MoreObjects
operator|.
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|add
argument_list|(
literal|"psId"
argument_list|,
name|psId
argument_list|)
operator|.
name|add
argument_list|(
literal|"who"
argument_list|,
name|who
argument_list|)
operator|.
name|add
argument_list|(
literal|"when"
argument_list|,
name|when
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|EventList
specifier|private
class|class
name|EventList
parameter_list|<
name|E
extends|extends
name|Event
parameter_list|>
extends|extends
name|ArrayList
argument_list|<
name|E
argument_list|>
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|getLast ()
specifier|private
name|E
name|getLast
parameter_list|()
block|{
return|return
name|get
argument_list|(
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|getLastTime ()
specifier|private
name|long
name|getLastTime
parameter_list|()
block|{
return|return
name|getLast
argument_list|()
operator|.
name|when
operator|.
name|getTime
argument_list|()
return|;
block|}
DECL|method|getFirstTime ()
specifier|private
name|long
name|getFirstTime
parameter_list|()
block|{
return|return
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|when
operator|.
name|getTime
argument_list|()
return|;
block|}
DECL|method|canAdd (E e)
name|boolean
name|canAdd
parameter_list|(
name|E
name|e
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|FinalUpdatesEvent
condition|)
block|{
return|return
literal|false
return|;
comment|// FinalUpdatesEvent always gets its own update.
block|}
name|Event
name|last
init|=
name|getLast
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|e
operator|.
name|who
argument_list|,
name|last
operator|.
name|who
argument_list|)
operator|||
operator|!
name|e
operator|.
name|psId
operator|.
name|equals
argument_list|(
name|last
operator|.
name|psId
argument_list|)
operator|||
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|e
operator|.
name|tag
argument_list|,
name|last
operator|.
name|tag
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// Different patch set, author, or tag.
block|}
name|long
name|t
init|=
name|e
operator|.
name|when
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|tFirst
init|=
name|getFirstTime
argument_list|()
decl_stmt|;
name|long
name|tLast
init|=
name|getLastTime
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|t
operator|>=
name|tLast
argument_list|,
literal|"event %s is before previous event in list %s"
argument_list|,
name|e
argument_list|,
name|last
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|-
name|tLast
operator|>
name|MAX_DELTA_MS
operator|||
name|t
operator|-
name|tFirst
operator|>
name|MAX_WINDOW_MS
condition|)
block|{
return|return
literal|false
return|;
comment|// Too much time elapsed.
block|}
if|if
condition|(
operator|!
name|e
operator|.
name|uniquePerUpdate
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|Event
name|o
range|:
name|this
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getClass
argument_list|()
operator|==
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
comment|// Only one event of this type allowed per update.
block|}
block|}
comment|// TODO(dborowitz): Additional heuristics, like keeping events separate if
comment|// they affect overlapping fields within a single entity.
return|return
literal|true
return|;
block|}
DECL|method|getWhen ()
name|Timestamp
name|getWhen
parameter_list|()
block|{
return|return
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|when
return|;
block|}
DECL|method|getPatchSetId ()
name|PatchSet
operator|.
name|Id
name|getPatchSetId
parameter_list|()
block|{
name|PatchSet
operator|.
name|Id
name|id
init|=
name|checkNotNull
argument_list|(
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|psId
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|checkState
argument_list|(
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|psId
operator|.
name|equals
argument_list|(
name|id
argument_list|)
argument_list|,
literal|"mismatched patch sets in EventList: %s != %s"
argument_list|,
name|id
argument_list|,
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|psId
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
DECL|method|getAccountId ()
name|Account
operator|.
name|Id
name|getAccountId
parameter_list|()
block|{
name|Account
operator|.
name|Id
name|id
init|=
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|who
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|checkState
argument_list|(
name|Objects
operator|.
name|equals
argument_list|(
name|id
argument_list|,
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|who
argument_list|)
argument_list|,
literal|"mismatched users in EventList: %s != %s"
argument_list|,
name|id
argument_list|,
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|who
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
DECL|method|newAuthorIdent ()
name|PersonIdent
name|newAuthorIdent
parameter_list|()
block|{
name|Account
operator|.
name|Id
name|id
init|=
name|getAccountId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|PersonIdent
argument_list|(
name|serverIdent
argument_list|,
name|getWhen
argument_list|()
argument_list|)
return|;
block|}
return|return
name|changeNoteUtil
operator|.
name|newIdent
argument_list|(
name|accountCache
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getAccount
argument_list|()
argument_list|,
name|getWhen
argument_list|()
argument_list|,
name|serverIdent
argument_list|,
name|anonymousCowardName
argument_list|)
return|;
block|}
DECL|method|getTag ()
name|String
name|getTag
parameter_list|()
block|{
return|return
name|getLast
argument_list|()
operator|.
name|tag
return|;
block|}
block|}
DECL|method|createChange (ChangeUpdate update, Change change)
specifier|private
specifier|static
name|void
name|createChange
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|,
name|Change
name|change
parameter_list|)
block|{
name|update
operator|.
name|setSubjectForCommit
argument_list|(
literal|"Create change"
argument_list|)
expr_stmt|;
name|update
operator|.
name|setChangeId
argument_list|(
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setBranch
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setSubject
argument_list|(
name|change
operator|.
name|getOriginalSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|CreateChangeEvent
specifier|private
specifier|static
class|class
name|CreateChangeEvent
extends|extends
name|Event
block|{
DECL|field|change
specifier|private
specifier|final
name|Change
name|change
decl_stmt|;
DECL|method|psId (Change change, Integer minPsNum)
specifier|private
specifier|static
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|(
name|Change
name|change
parameter_list|,
name|Integer
name|minPsNum
parameter_list|)
block|{
name|int
name|n
decl_stmt|;
if|if
condition|(
name|minPsNum
operator|==
literal|null
condition|)
block|{
comment|// There were no patch sets for the change at all, so something is very
comment|// wrong. Bail and use 1 as the patch set.
name|n
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|n
operator|=
name|minPsNum
expr_stmt|;
block|}
return|return
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|n
argument_list|)
return|;
block|}
DECL|method|CreateChangeEvent (Change change, Integer minPsNum)
name|CreateChangeEvent
parameter_list|(
name|Change
name|change
parameter_list|,
name|Integer
name|minPsNum
parameter_list|)
block|{
name|super
argument_list|(
name|psId
argument_list|(
name|change
argument_list|,
name|minPsNum
argument_list|)
argument_list|,
name|change
operator|.
name|getOwner
argument_list|()
argument_list|,
name|change
operator|.
name|getCreatedOn
argument_list|()
argument_list|,
name|change
operator|.
name|getCreatedOn
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|change
operator|=
name|change
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uniquePerUpdate ()
name|boolean
name|uniquePerUpdate
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeUpdate update)
name|void
name|apply
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
block|{
name|checkUpdate
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|createChange
argument_list|(
name|update
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ApprovalEvent
specifier|private
specifier|static
class|class
name|ApprovalEvent
extends|extends
name|Event
block|{
DECL|field|psa
specifier|private
name|PatchSetApproval
name|psa
decl_stmt|;
DECL|method|ApprovalEvent (PatchSetApproval psa, Timestamp changeCreatedOn)
name|ApprovalEvent
parameter_list|(
name|PatchSetApproval
name|psa
parameter_list|,
name|Timestamp
name|changeCreatedOn
parameter_list|)
block|{
name|super
argument_list|(
name|psa
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|psa
operator|.
name|getGranted
argument_list|()
argument_list|,
name|changeCreatedOn
argument_list|,
name|psa
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|psa
operator|=
name|psa
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uniquePerUpdate ()
name|boolean
name|uniquePerUpdate
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeUpdate update)
name|void
name|apply
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|)
block|{
name|checkUpdate
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|,
name|psa
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ReviewerEvent
specifier|private
specifier|static
class|class
name|ReviewerEvent
extends|extends
name|Event
block|{
DECL|field|reviewer
specifier|private
name|Table
operator|.
name|Cell
argument_list|<
name|ReviewerStateInternal
argument_list|,
name|Account
operator|.
name|Id
argument_list|,
name|Timestamp
argument_list|>
name|reviewer
decl_stmt|;
DECL|method|ReviewerEvent ( Table.Cell<ReviewerStateInternal, Account.Id, Timestamp> reviewer, Timestamp changeCreatedOn)
name|ReviewerEvent
parameter_list|(
name|Table
operator|.
name|Cell
argument_list|<
name|ReviewerStateInternal
argument_list|,
name|Account
operator|.
name|Id
argument_list|,
name|Timestamp
argument_list|>
name|reviewer
parameter_list|,
name|Timestamp
name|changeCreatedOn
parameter_list|)
block|{
name|super
argument_list|(
comment|// Reviewers aren't generally associated with a particular patch set
comment|// (although as an implementation detail they were in ReviewDb). Just
comment|// use the latest patch set at the time of the event.
literal|null
argument_list|,
name|reviewer
operator|.
name|getColumnKey
argument_list|()
argument_list|,
name|reviewer
operator|.
name|getValue
argument_list|()
argument_list|,
name|changeCreatedOn
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|reviewer
operator|=
name|reviewer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uniquePerUpdate ()
name|boolean
name|uniquePerUpdate
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeUpdate update)
name|void
name|apply
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
block|{
name|checkUpdate
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|update
operator|.
name|putReviewer
argument_list|(
name|reviewer
operator|.
name|getColumnKey
argument_list|()
argument_list|,
name|reviewer
operator|.
name|getRowKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|PatchSetEvent
specifier|private
specifier|static
class|class
name|PatchSetEvent
extends|extends
name|Event
block|{
DECL|field|change
specifier|private
specifier|final
name|Change
name|change
decl_stmt|;
DECL|field|ps
specifier|private
specifier|final
name|PatchSet
name|ps
decl_stmt|;
DECL|field|rw
specifier|private
specifier|final
name|RevWalk
name|rw
decl_stmt|;
DECL|field|createChange
specifier|private
name|boolean
name|createChange
decl_stmt|;
DECL|method|PatchSetEvent (Change change, PatchSet ps, RevWalk rw)
name|PatchSetEvent
parameter_list|(
name|Change
name|change
parameter_list|,
name|PatchSet
name|ps
parameter_list|,
name|RevWalk
name|rw
parameter_list|)
block|{
name|super
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|ps
operator|.
name|getUploader
argument_list|()
argument_list|,
name|ps
operator|.
name|getCreatedOn
argument_list|()
argument_list|,
name|change
operator|.
name|getCreatedOn
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|change
operator|=
name|change
expr_stmt|;
name|this
operator|.
name|ps
operator|=
name|ps
expr_stmt|;
name|this
operator|.
name|rw
operator|=
name|rw
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uniquePerUpdate ()
name|boolean
name|uniquePerUpdate
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeUpdate update)
name|void
name|apply
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
block|{
name|checkUpdate
argument_list|(
name|update
argument_list|)
expr_stmt|;
if|if
condition|(
name|createChange
condition|)
block|{
name|createChange
argument_list|(
name|update
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|update
operator|.
name|setSubject
argument_list|(
name|change
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setSubjectForCommit
argument_list|(
literal|"Create patch set "
operator|+
name|ps
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setRevision
argument_list|(
name|update
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|ps
operator|.
name|getGroups
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|groups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|update
operator|.
name|setGroups
argument_list|(
name|ps
operator|.
name|getGroups
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ps
operator|.
name|isDraft
argument_list|()
condition|)
block|{
name|update
operator|.
name|setPatchSetState
argument_list|(
name|PatchSetState
operator|.
name|DRAFT
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setRevision (ChangeUpdate update, PatchSet ps)
specifier|private
name|void
name|setRevision
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|,
name|PatchSet
name|ps
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|rev
init|=
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|cert
init|=
name|ps
operator|.
name|getPushCertificate
argument_list|()
decl_stmt|;
name|ObjectId
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectIdException
name|e
parameter_list|)
block|{
name|update
operator|.
name|setRevisionForMissingCommit
argument_list|(
name|rev
argument_list|,
name|cert
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|update
operator|.
name|setCommit
argument_list|(
name|rw
argument_list|,
name|id
argument_list|,
name|cert
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingObjectException
name|e
parameter_list|)
block|{
name|update
operator|.
name|setRevisionForMissingCommit
argument_list|(
name|rev
argument_list|,
name|cert
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|class|PatchLineCommentEvent
specifier|private
specifier|static
class|class
name|PatchLineCommentEvent
extends|extends
name|Event
block|{
DECL|field|c
specifier|public
specifier|final
name|PatchLineComment
name|c
decl_stmt|;
DECL|field|change
specifier|private
specifier|final
name|Change
name|change
decl_stmt|;
DECL|field|ps
specifier|private
specifier|final
name|PatchSet
name|ps
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|PatchListCache
name|cache
decl_stmt|;
DECL|method|PatchLineCommentEvent (PatchLineComment c, Change change, PatchSet ps, PatchListCache cache)
name|PatchLineCommentEvent
parameter_list|(
name|PatchLineComment
name|c
parameter_list|,
name|Change
name|change
parameter_list|,
name|PatchSet
name|ps
parameter_list|,
name|PatchListCache
name|cache
parameter_list|)
block|{
name|super
argument_list|(
name|PatchLineCommentsUtil
operator|.
name|getCommentPsId
argument_list|(
name|c
argument_list|)
argument_list|,
name|c
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|c
operator|.
name|getWrittenOn
argument_list|()
argument_list|,
name|change
operator|.
name|getCreatedOn
argument_list|()
argument_list|,
name|c
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|c
expr_stmt|;
name|this
operator|.
name|change
operator|=
name|change
expr_stmt|;
name|this
operator|.
name|ps
operator|=
name|ps
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uniquePerUpdate ()
name|boolean
name|uniquePerUpdate
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeUpdate update)
name|void
name|apply
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|)
throws|throws
name|OrmException
block|{
name|checkUpdate
argument_list|(
name|update
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getRevId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setCommentRevId
argument_list|(
name|c
argument_list|,
name|cache
argument_list|,
name|change
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
name|update
operator|.
name|putComment
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|applyDraft (ChangeDraftUpdate draftUpdate)
name|void
name|applyDraft
parameter_list|(
name|ChangeDraftUpdate
name|draftUpdate
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|c
operator|.
name|getRevId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setCommentRevId
argument_list|(
name|c
argument_list|,
name|cache
argument_list|,
name|change
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
name|draftUpdate
operator|.
name|putComment
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|HashtagsEvent
specifier|private
specifier|static
class|class
name|HashtagsEvent
extends|extends
name|Event
block|{
DECL|field|hashtags
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
decl_stmt|;
DECL|method|HashtagsEvent (PatchSet.Id psId, Account.Id who, Timestamp when, Set<String> hashtags, Timestamp changeCreatdOn)
name|HashtagsEvent
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|Account
operator|.
name|Id
name|who
parameter_list|,
name|Timestamp
name|when
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
parameter_list|,
name|Timestamp
name|changeCreatdOn
parameter_list|)
block|{
name|super
argument_list|(
name|psId
argument_list|,
name|who
argument_list|,
name|when
argument_list|,
name|changeCreatdOn
argument_list|,
comment|// Somewhat confusingly, hashtags do not use the setTag method on
comment|// AbstractChangeUpdate, so pass null as the tag.
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|hashtags
operator|=
name|hashtags
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uniquePerUpdate ()
name|boolean
name|uniquePerUpdate
parameter_list|()
block|{
comment|// Since these are produced from existing commits in the old NoteDb graph,
comment|// we know that there must be one per commit in the rebuilt graph.
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeUpdate update)
name|void
name|apply
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|)
throws|throws
name|OrmException
block|{
name|update
operator|.
name|setHashtags
argument_list|(
name|hashtags
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ChangeMessageEvent
specifier|private
specifier|static
class|class
name|ChangeMessageEvent
extends|extends
name|Event
block|{
DECL|field|TOPIC_SET_REGEXP
specifier|private
specifier|static
specifier|final
name|Pattern
name|TOPIC_SET_REGEXP
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Topic set to (.+)$"
argument_list|)
decl_stmt|;
DECL|field|TOPIC_CHANGED_REGEXP
specifier|private
specifier|static
specifier|final
name|Pattern
name|TOPIC_CHANGED_REGEXP
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Topic changed from (.+) to (.+)$"
argument_list|)
decl_stmt|;
DECL|field|TOPIC_REMOVED_REGEXP
specifier|private
specifier|static
specifier|final
name|Pattern
name|TOPIC_REMOVED_REGEXP
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Topic (.+) removed$"
argument_list|)
decl_stmt|;
DECL|field|STATUS_ABANDONED_REGEXP
specifier|private
specifier|static
specifier|final
name|Pattern
name|STATUS_ABANDONED_REGEXP
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Abandoned(\n.*)*$"
argument_list|)
decl_stmt|;
DECL|field|STATUS_RESTORED_REGEXP
specifier|private
specifier|static
specifier|final
name|Pattern
name|STATUS_RESTORED_REGEXP
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Restored(\n.*)*$"
argument_list|)
decl_stmt|;
DECL|field|message
specifier|private
specifier|final
name|ChangeMessage
name|message
decl_stmt|;
DECL|field|noteDbChange
specifier|private
specifier|final
name|Change
name|noteDbChange
decl_stmt|;
DECL|method|ChangeMessageEvent (ChangeMessage message, Change noteDbChange, Timestamp changeCreatedOn)
name|ChangeMessageEvent
parameter_list|(
name|ChangeMessage
name|message
parameter_list|,
name|Change
name|noteDbChange
parameter_list|,
name|Timestamp
name|changeCreatedOn
parameter_list|)
block|{
name|super
argument_list|(
name|message
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|message
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|message
operator|.
name|getWrittenOn
argument_list|()
argument_list|,
name|changeCreatedOn
argument_list|,
name|message
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|noteDbChange
operator|=
name|noteDbChange
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uniquePerUpdate ()
name|boolean
name|uniquePerUpdate
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeUpdate update)
name|void
name|apply
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|)
throws|throws
name|OrmException
block|{
name|checkUpdate
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|setTopic
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|setStatus
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
DECL|method|setTopic (ChangeUpdate update)
specifier|private
name|void
name|setTopic
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|)
block|{
name|String
name|msg
init|=
name|message
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Matcher
name|m
init|=
name|TOPIC_SET_REGEXP
operator|.
name|matcher
argument_list|(
name|msg
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|topic
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|update
operator|.
name|setTopic
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|noteDbChange
operator|.
name|setTopic
argument_list|(
name|topic
argument_list|)
expr_stmt|;
return|return;
block|}
name|m
operator|=
name|TOPIC_CHANGED_REGEXP
operator|.
name|matcher
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|topic
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|update
operator|.
name|setTopic
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|noteDbChange
operator|.
name|setTopic
argument_list|(
name|topic
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|TOPIC_REMOVED_REGEXP
operator|.
name|matcher
argument_list|(
name|msg
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|update
operator|.
name|setTopic
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|noteDbChange
operator|.
name|setTopic
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setStatus (ChangeUpdate update)
specifier|private
name|void
name|setStatus
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|)
block|{
name|String
name|msg
init|=
name|message
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|STATUS_ABANDONED_REGEXP
operator|.
name|matcher
argument_list|(
name|msg
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|update
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
argument_list|)
expr_stmt|;
name|noteDbChange
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|STATUS_RESTORED_REGEXP
operator|.
name|matcher
argument_list|(
name|msg
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|update
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|noteDbChange
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|FinalUpdatesEvent
specifier|private
specifier|static
class|class
name|FinalUpdatesEvent
extends|extends
name|Event
block|{
DECL|field|change
specifier|private
specifier|final
name|Change
name|change
decl_stmt|;
DECL|field|noteDbChange
specifier|private
specifier|final
name|Change
name|noteDbChange
decl_stmt|;
DECL|method|FinalUpdatesEvent (Change change, Change noteDbChange)
name|FinalUpdatesEvent
parameter_list|(
name|Change
name|change
parameter_list|,
name|Change
name|noteDbChange
parameter_list|)
block|{
name|super
argument_list|(
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|change
operator|.
name|getOwner
argument_list|()
argument_list|,
name|change
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|,
name|change
operator|.
name|getCreatedOn
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|change
operator|=
name|change
expr_stmt|;
name|this
operator|.
name|noteDbChange
operator|=
name|noteDbChange
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uniquePerUpdate ()
name|boolean
name|uniquePerUpdate
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|apply (ChangeUpdate update)
name|void
name|apply
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getTopic
argument_list|()
argument_list|,
name|noteDbChange
operator|.
name|getTopic
argument_list|()
argument_list|)
condition|)
block|{
name|update
operator|.
name|setTopic
argument_list|(
name|change
operator|.
name|getTopic
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getStatus
argument_list|()
argument_list|,
name|noteDbChange
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
comment|// TODO(dborowitz): Stamp approximate approvals at this time.
name|update
operator|.
name|fixStatus
argument_list|(
name|change
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|change
operator|.
name|getSubmissionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|update
operator|.
name|setSubmissionId
argument_list|(
name|change
operator|.
name|getSubmissionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|update
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|update
operator|.
name|setSubjectForCommit
argument_list|(
literal|"Final NoteDb migration updates"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

