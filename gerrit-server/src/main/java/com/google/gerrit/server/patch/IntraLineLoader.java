begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_comment
comment|//
end_comment

begin_package
DECL|package|com.google.gerrit.server.patch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ConfigUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|Edit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|MyersDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|ReplaceEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|IntraLineLoader
class|class
name|IntraLineLoader
extends|extends
name|CacheLoader
argument_list|<
name|IntraLineDiffKey
argument_list|,
name|IntraLineDiff
argument_list|>
block|{
DECL|field|log
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IntraLineLoader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BLANK_LINE_RE
specifier|private
specifier|static
specifier|final
name|Pattern
name|BLANK_LINE_RE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[ \\t]*(|[{}]|/\\*\\*?|\\*)[ \\t]*$"
argument_list|)
decl_stmt|;
DECL|field|CONTROL_BLOCK_START_RE
specifier|private
specifier|static
specifier|final
name|Pattern
name|CONTROL_BLOCK_START_RE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[{:][ \\t]*$"
argument_list|)
decl_stmt|;
DECL|field|workerPool
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|Worker
argument_list|>
name|workerPool
decl_stmt|;
DECL|field|timeoutMillis
specifier|private
specifier|final
name|long
name|timeoutMillis
decl_stmt|;
annotation|@
name|Inject
DECL|method|IntraLineLoader (final @GerritServerConfig Config cfg)
name|IntraLineLoader
parameter_list|(
specifier|final
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|)
block|{
specifier|final
name|int
name|workers
init|=
name|cfg
operator|.
name|getInt
argument_list|(
literal|"cache"
argument_list|,
name|PatchListCacheImpl
operator|.
name|INTRA_NAME
argument_list|,
literal|"maxIdleWorkers"
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|*
literal|3
operator|/
literal|2
argument_list|)
decl_stmt|;
name|workerPool
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Worker
argument_list|>
argument_list|(
name|workers
argument_list|,
literal|true
comment|/* fair */
argument_list|)
expr_stmt|;
name|timeoutMillis
operator|=
name|ConfigUtil
operator|.
name|getTimeUnit
argument_list|(
name|cfg
argument_list|,
literal|"cache"
argument_list|,
name|PatchListCacheImpl
operator|.
name|INTRA_NAME
argument_list|,
literal|"timeout"
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load (IntraLineDiffKey key)
specifier|public
name|IntraLineDiff
name|load
parameter_list|(
name|IntraLineDiffKey
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|Worker
name|w
init|=
name|workerPool
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|==
literal|null
condition|)
block|{
name|w
operator|=
operator|new
name|Worker
argument_list|()
expr_stmt|;
block|}
name|Worker
operator|.
name|Result
name|r
init|=
name|w
operator|.
name|computeWithTimeout
argument_list|(
name|key
argument_list|,
name|timeoutMillis
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|Worker
operator|.
name|Result
operator|.
name|TIMEOUT
condition|)
block|{
comment|// Don't keep this thread. We have to murder it unsafely, which
comment|// means its unable to be reused in the future. Return back a
comment|// null result, indicating the cache cannot load this key.
comment|//
return|return
operator|new
name|IntraLineDiff
argument_list|(
name|IntraLineDiff
operator|.
name|Status
operator|.
name|TIMEOUT
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|workerPool
operator|.
name|offer
argument_list|(
name|w
argument_list|)
condition|)
block|{
comment|// If the idle worker pool is full, terminate this thread.
comment|//
name|w
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
comment|// If there was an error computing the result, carry it
comment|// up to the caller so the cache knows this key is invalid.
comment|//
throw|throw
name|r
operator|.
name|error
throw|;
block|}
return|return
name|r
operator|.
name|diff
return|;
block|}
DECL|class|Worker
specifier|private
specifier|static
class|class
name|Worker
block|{
DECL|field|count
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|input
specifier|private
specifier|final
name|ArrayBlockingQueue
argument_list|<
name|Input
argument_list|>
name|input
decl_stmt|;
DECL|field|result
specifier|private
specifier|final
name|ArrayBlockingQueue
argument_list|<
name|Result
argument_list|>
name|result
decl_stmt|;
DECL|field|thread
specifier|private
specifier|final
name|Thread
name|thread
decl_stmt|;
DECL|method|Worker ()
name|Worker
parameter_list|()
block|{
name|input
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Input
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Result
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|thread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|workerLoop
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setName
argument_list|(
literal|"IntraLineDiff-"
operator|+
name|count
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|computeWithTimeout (IntraLineDiffKey key, long timeoutMillis)
name|Result
name|computeWithTimeout
parameter_list|(
name|IntraLineDiffKey
name|key
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|input
operator|.
name|offer
argument_list|(
operator|new
name|Input
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot enqueue task to thread "
operator|+
name|thread
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Result
operator|.
name|TIMEOUT
return|;
block|}
name|Result
name|r
init|=
name|result
operator|.
name|poll
argument_list|(
name|timeoutMillis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
return|return
name|r
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|timeoutMillis
operator|+
literal|" ms timeout reached for IntraLineDiff"
operator|+
literal|" in project "
operator|+
name|key
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
comment|//
operator|+
literal|" on commit "
operator|+
name|key
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
comment|//
operator|+
literal|" for path "
operator|+
name|key
operator|.
name|getPath
argument_list|()
comment|//
operator|+
literal|" comparing "
operator|+
name|key
operator|.
name|getBlobA
argument_list|()
operator|.
name|name
argument_list|()
comment|//
operator|+
literal|".."
operator|+
name|key
operator|.
name|getBlobB
argument_list|()
operator|.
name|name
argument_list|()
comment|//
operator|+
literal|".  Killing "
operator|+
name|thread
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|forcefullyKillThreadInAnUglyWay
argument_list|()
expr_stmt|;
return|return
name|Result
operator|.
name|TIMEOUT
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|forcefullyKillThreadInAnUglyWay ()
specifier|private
name|void
name|forcefullyKillThreadInAnUglyWay
parameter_list|()
block|{
try|try
block|{
name|thread
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
comment|// Ignore any reason the thread won't stop.
name|log
operator|.
name|error
argument_list|(
literal|"Cannot stop runaway thread "
operator|+
name|thread
operator|.
name|getName
argument_list|()
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|end ()
name|void
name|end
parameter_list|()
block|{
if|if
condition|(
operator|!
name|input
operator|.
name|offer
argument_list|(
name|Input
operator|.
name|END_THREAD
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot gracefully stop thread "
operator|+
name|thread
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|workerLoop ()
specifier|private
name|void
name|workerLoop
parameter_list|()
block|{
try|try
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|Input
name|in
decl_stmt|;
try|try
block|{
name|in
operator|=
name|input
operator|.
name|take
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected interrupt on "
operator|+
name|thread
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|in
operator|==
name|Input
operator|.
name|END_THREAD
condition|)
block|{
return|return;
block|}
name|Result
name|r
decl_stmt|;
try|try
block|{
name|r
operator|=
operator|new
name|Result
argument_list|(
name|IntraLineLoader
operator|.
name|compute
argument_list|(
name|in
operator|.
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|error
parameter_list|)
block|{
name|r
operator|=
operator|new
name|Result
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|offer
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot return result from "
operator|+
name|thread
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ThreadDeath
name|iHaveBeenShot
parameter_list|)
block|{
comment|// Handle thread death by gracefully returning to the caller,
comment|// allowing the thread to be destroyed.
block|}
block|}
DECL|class|Input
specifier|private
specifier|static
class|class
name|Input
block|{
DECL|field|END_THREAD
specifier|static
specifier|final
name|Input
name|END_THREAD
init|=
operator|new
name|Input
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|key
specifier|final
name|IntraLineDiffKey
name|key
decl_stmt|;
DECL|method|Input (IntraLineDiffKey key)
name|Input
parameter_list|(
name|IntraLineDiffKey
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
block|}
DECL|class|Result
specifier|static
class|class
name|Result
block|{
DECL|field|TIMEOUT
specifier|static
specifier|final
name|Result
name|TIMEOUT
init|=
operator|new
name|Result
argument_list|(
operator|(
name|IntraLineDiff
operator|)
literal|null
argument_list|)
decl_stmt|;
DECL|field|diff
specifier|final
name|IntraLineDiff
name|diff
decl_stmt|;
DECL|field|error
specifier|final
name|Exception
name|error
decl_stmt|;
DECL|method|Result (IntraLineDiff diff)
name|Result
parameter_list|(
name|IntraLineDiff
name|diff
parameter_list|)
block|{
name|this
operator|.
name|diff
operator|=
name|diff
expr_stmt|;
name|this
operator|.
name|error
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|Result (Exception error)
name|Result
parameter_list|(
name|Exception
name|error
parameter_list|)
block|{
name|this
operator|.
name|diff
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
block|}
block|}
block|}
DECL|method|compute (IntraLineDiffKey key)
specifier|private
specifier|static
name|IntraLineDiff
name|compute
parameter_list|(
name|IntraLineDiffKey
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Edit
argument_list|>
name|edits
init|=
operator|new
name|ArrayList
argument_list|<
name|Edit
argument_list|>
argument_list|(
name|key
operator|.
name|getEdits
argument_list|()
argument_list|)
decl_stmt|;
name|Text
name|aContent
init|=
name|key
operator|.
name|getTextA
argument_list|()
decl_stmt|;
name|Text
name|bContent
init|=
name|key
operator|.
name|getTextB
argument_list|()
decl_stmt|;
name|combineLineEdits
argument_list|(
name|edits
argument_list|,
name|aContent
argument_list|,
name|bContent
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|edits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Edit
name|e
init|=
name|edits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|Edit
operator|.
name|Type
operator|.
name|REPLACE
condition|)
block|{
name|CharText
name|a
init|=
operator|new
name|CharText
argument_list|(
name|aContent
argument_list|,
name|e
operator|.
name|getBeginA
argument_list|()
argument_list|,
name|e
operator|.
name|getEndA
argument_list|()
argument_list|)
decl_stmt|;
name|CharText
name|b
init|=
operator|new
name|CharText
argument_list|(
name|bContent
argument_list|,
name|e
operator|.
name|getBeginB
argument_list|()
argument_list|,
name|e
operator|.
name|getEndB
argument_list|()
argument_list|)
decl_stmt|;
name|CharTextComparator
name|cmp
init|=
operator|new
name|CharTextComparator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Edit
argument_list|>
name|wordEdits
init|=
name|MyersDiff
operator|.
name|INSTANCE
operator|.
name|diff
argument_list|(
name|cmp
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
comment|// Combine edits that are really close together. If they are
comment|// just a few characters apart we tend to get better results
comment|// by joining them together and taking the whole span.
comment|//
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|wordEdits
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
control|)
block|{
name|Edit
name|c
init|=
name|wordEdits
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Edit
name|n
init|=
name|wordEdits
operator|.
name|get
argument_list|(
name|j
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|getBeginA
argument_list|()
operator|-
name|c
operator|.
name|getEndA
argument_list|()
operator|<=
literal|5
operator|||
name|n
operator|.
name|getBeginB
argument_list|()
operator|-
name|c
operator|.
name|getEndB
argument_list|()
operator|<=
literal|5
condition|)
block|{
name|int
name|ab
init|=
name|c
operator|.
name|getBeginA
argument_list|()
decl_stmt|;
name|int
name|ae
init|=
name|n
operator|.
name|getEndA
argument_list|()
decl_stmt|;
name|int
name|bb
init|=
name|c
operator|.
name|getBeginB
argument_list|()
decl_stmt|;
name|int
name|be
init|=
name|n
operator|.
name|getEndB
argument_list|()
decl_stmt|;
if|if
condition|(
name|canCoalesce
argument_list|(
name|a
argument_list|,
name|c
operator|.
name|getEndA
argument_list|()
argument_list|,
name|n
operator|.
name|getBeginA
argument_list|()
argument_list|)
operator|&&
name|canCoalesce
argument_list|(
name|b
argument_list|,
name|c
operator|.
name|getEndB
argument_list|()
argument_list|,
name|n
operator|.
name|getBeginB
argument_list|()
argument_list|)
condition|)
block|{
name|wordEdits
operator|.
name|set
argument_list|(
name|j
argument_list|,
operator|new
name|Edit
argument_list|(
name|ab
argument_list|,
name|ae
argument_list|,
name|bb
argument_list|,
name|be
argument_list|)
argument_list|)
expr_stmt|;
name|wordEdits
operator|.
name|remove
argument_list|(
name|j
operator|+
literal|1
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|j
operator|++
expr_stmt|;
block|}
comment|// Apply some simple rules to fix up some of the edits. Our
comment|// logic above, along with our per-character difference tends
comment|// to produce some crazy stuff.
comment|//
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|wordEdits
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Edit
name|c
init|=
name|wordEdits
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|int
name|ab
init|=
name|c
operator|.
name|getBeginA
argument_list|()
decl_stmt|;
name|int
name|ae
init|=
name|c
operator|.
name|getEndA
argument_list|()
decl_stmt|;
name|int
name|bb
init|=
name|c
operator|.
name|getBeginB
argument_list|()
decl_stmt|;
name|int
name|be
init|=
name|c
operator|.
name|getEndB
argument_list|()
decl_stmt|;
comment|// Sometimes the diff generator produces an INSERT or DELETE
comment|// right up against a REPLACE, but we only find this after
comment|// we've also played some shifting games on the prior edit.
comment|// If that happened to us, coalesce them together so we can
comment|// correct this mess for the user. If we don't we wind up
comment|// with silly stuff like "es" -> "es = Addresses".
comment|//
if|if
condition|(
literal|1
operator|<
name|j
condition|)
block|{
name|Edit
name|p
init|=
name|wordEdits
operator|.
name|get
argument_list|(
name|j
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getEndA
argument_list|()
operator|==
name|ab
operator|||
name|p
operator|.
name|getEndB
argument_list|()
operator|==
name|bb
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getEndA
argument_list|()
operator|==
name|ab
operator|&&
name|p
operator|.
name|getBeginA
argument_list|()
operator|<
name|p
operator|.
name|getEndA
argument_list|()
condition|)
block|{
name|ab
operator|=
name|p
operator|.
name|getBeginA
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|getEndB
argument_list|()
operator|==
name|bb
operator|&&
name|p
operator|.
name|getBeginB
argument_list|()
operator|<
name|p
operator|.
name|getEndB
argument_list|()
condition|)
block|{
name|bb
operator|=
name|p
operator|.
name|getBeginB
argument_list|()
expr_stmt|;
block|}
name|wordEdits
operator|.
name|remove
argument_list|(
operator|--
name|j
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We sometimes collapsed an edit together in a strange way,
comment|// such that the edges of each text is identical. Fix by
comment|// by dropping out that incorrectly replaced region.
comment|//
while|while
condition|(
name|ab
operator|<
name|ae
operator|&&
name|bb
operator|<
name|be
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|ab
argument_list|,
name|b
argument_list|,
name|bb
argument_list|)
condition|)
block|{
name|ab
operator|++
expr_stmt|;
name|bb
operator|++
expr_stmt|;
block|}
while|while
condition|(
name|ab
operator|<
name|ae
operator|&&
name|bb
operator|<
name|be
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|ae
operator|-
literal|1
argument_list|,
name|b
argument_list|,
name|be
operator|-
literal|1
argument_list|)
condition|)
block|{
name|ae
operator|--
expr_stmt|;
name|be
operator|--
expr_stmt|;
block|}
comment|// The leading part of an edit and its trailing part in the same
comment|// text might be identical. Slide down that edit and use the tail
comment|// rather than the leading bit. If however the edit is only on a
comment|// whitespace block try to shift it to the left margin, assuming
comment|// that it is an indentation change.
comment|//
name|boolean
name|aShift
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|ab
operator|<
name|ae
operator|&&
name|isOnlyWhitespace
argument_list|(
name|a
argument_list|,
name|ab
argument_list|,
name|ae
argument_list|)
condition|)
block|{
name|int
name|lf
init|=
name|findLF
argument_list|(
name|wordEdits
argument_list|,
name|j
argument_list|,
name|a
argument_list|,
name|ab
argument_list|)
decl_stmt|;
if|if
condition|(
name|lf
operator|<
name|ab
operator|&&
name|a
operator|.
name|charAt
argument_list|(
name|lf
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
name|int
name|nb
init|=
name|lf
operator|+
literal|1
decl_stmt|;
name|int
name|p
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|p
operator|<
name|ae
operator|-
name|ab
condition|)
block|{
if|if
condition|(
name|cmp
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|ab
operator|+
name|p
argument_list|,
name|a
argument_list|,
name|ab
operator|+
name|p
argument_list|)
condition|)
name|p
operator|++
expr_stmt|;
else|else
break|break;
block|}
if|if
condition|(
name|p
operator|==
name|ae
operator|-
name|ab
condition|)
block|{
name|ab
operator|=
name|nb
expr_stmt|;
name|ae
operator|=
name|nb
operator|+
name|p
expr_stmt|;
name|aShift
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|aShift
condition|)
block|{
while|while
condition|(
literal|0
operator|<
name|ab
operator|&&
name|ab
operator|<
name|ae
operator|&&
name|a
operator|.
name|charAt
argument_list|(
name|ab
operator|-
literal|1
argument_list|)
operator|!=
literal|'\n'
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|ab
operator|-
literal|1
argument_list|,
name|a
argument_list|,
name|ae
operator|-
literal|1
argument_list|)
condition|)
block|{
name|ab
operator|--
expr_stmt|;
name|ae
operator|--
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|a
operator|.
name|isLineStart
argument_list|(
name|ab
argument_list|)
operator|||
operator|!
name|a
operator|.
name|contains
argument_list|(
name|ab
argument_list|,
name|ae
argument_list|,
literal|'\n'
argument_list|)
condition|)
block|{
while|while
condition|(
name|ab
operator|<
name|ae
operator|&&
name|ae
operator|<
name|a
operator|.
name|size
argument_list|()
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|ab
argument_list|,
name|a
argument_list|,
name|ae
argument_list|)
condition|)
block|{
name|ab
operator|++
expr_stmt|;
name|ae
operator|++
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|charAt
argument_list|(
name|ae
operator|-
literal|1
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
name|boolean
name|bShift
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|bb
operator|<
name|be
operator|&&
name|isOnlyWhitespace
argument_list|(
name|b
argument_list|,
name|bb
argument_list|,
name|be
argument_list|)
condition|)
block|{
name|int
name|lf
init|=
name|findLF
argument_list|(
name|wordEdits
argument_list|,
name|j
argument_list|,
name|b
argument_list|,
name|bb
argument_list|)
decl_stmt|;
if|if
condition|(
name|lf
operator|<
name|bb
operator|&&
name|b
operator|.
name|charAt
argument_list|(
name|lf
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
name|int
name|nb
init|=
name|lf
operator|+
literal|1
decl_stmt|;
name|int
name|p
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|p
operator|<
name|be
operator|-
name|bb
condition|)
block|{
if|if
condition|(
name|cmp
operator|.
name|equals
argument_list|(
name|b
argument_list|,
name|bb
operator|+
name|p
argument_list|,
name|b
argument_list|,
name|bb
operator|+
name|p
argument_list|)
condition|)
name|p
operator|++
expr_stmt|;
else|else
break|break;
block|}
if|if
condition|(
name|p
operator|==
name|be
operator|-
name|bb
condition|)
block|{
name|bb
operator|=
name|nb
expr_stmt|;
name|be
operator|=
name|nb
operator|+
name|p
expr_stmt|;
name|bShift
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|bShift
condition|)
block|{
while|while
condition|(
literal|0
operator|<
name|bb
operator|&&
name|bb
operator|<
name|be
operator|&&
name|b
operator|.
name|charAt
argument_list|(
name|bb
operator|-
literal|1
argument_list|)
operator|!=
literal|'\n'
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|b
argument_list|,
name|bb
operator|-
literal|1
argument_list|,
name|b
argument_list|,
name|be
operator|-
literal|1
argument_list|)
condition|)
block|{
name|bb
operator|--
expr_stmt|;
name|be
operator|--
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|b
operator|.
name|isLineStart
argument_list|(
name|bb
argument_list|)
operator|||
operator|!
name|b
operator|.
name|contains
argument_list|(
name|bb
argument_list|,
name|be
argument_list|,
literal|'\n'
argument_list|)
condition|)
block|{
while|while
condition|(
name|bb
operator|<
name|be
operator|&&
name|be
operator|<
name|b
operator|.
name|size
argument_list|()
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|b
argument_list|,
name|bb
argument_list|,
name|b
argument_list|,
name|be
argument_list|)
condition|)
block|{
name|bb
operator|++
expr_stmt|;
name|be
operator|++
expr_stmt|;
if|if
condition|(
name|b
operator|.
name|charAt
argument_list|(
name|be
operator|-
literal|1
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|// If most of a line was modified except the LF was common, make
comment|// the LF part of the modification region. This is easier to read.
comment|//
if|if
condition|(
name|ab
operator|<
name|ae
comment|//
operator|&&
operator|(
name|ab
operator|==
literal|0
operator|||
name|a
operator|.
name|charAt
argument_list|(
name|ab
operator|-
literal|1
argument_list|)
operator|==
literal|'\n'
operator|)
comment|//
operator|&&
name|ae
operator|<
name|a
operator|.
name|size
argument_list|()
operator|&&
name|a
operator|.
name|charAt
argument_list|(
name|ae
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
name|ae
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|bb
operator|<
name|be
comment|//
operator|&&
operator|(
name|bb
operator|==
literal|0
operator|||
name|b
operator|.
name|charAt
argument_list|(
name|bb
operator|-
literal|1
argument_list|)
operator|==
literal|'\n'
operator|)
comment|//
operator|&&
name|be
operator|<
name|b
operator|.
name|size
argument_list|()
operator|&&
name|b
operator|.
name|charAt
argument_list|(
name|be
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
name|be
operator|++
expr_stmt|;
block|}
name|wordEdits
operator|.
name|set
argument_list|(
name|j
argument_list|,
operator|new
name|Edit
argument_list|(
name|ab
argument_list|,
name|ae
argument_list|,
name|bb
argument_list|,
name|be
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|edits
operator|.
name|set
argument_list|(
name|i
argument_list|,
operator|new
name|ReplaceEdit
argument_list|(
name|e
argument_list|,
name|wordEdits
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|IntraLineDiff
argument_list|(
name|edits
argument_list|)
return|;
block|}
DECL|method|combineLineEdits (List<Edit> edits, Text a, Text b)
specifier|private
specifier|static
name|void
name|combineLineEdits
parameter_list|(
name|List
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|,
name|Text
name|a
parameter_list|,
name|Text
name|b
parameter_list|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|edits
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
control|)
block|{
name|Edit
name|c
init|=
name|edits
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Edit
name|n
init|=
name|edits
operator|.
name|get
argument_list|(
name|j
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// Combine edits that are really close together. Right now our rule
comment|// is, coalesce two line edits which are only one line apart if that
comment|// common context line is either a "pointless line", or is identical
comment|// on both sides and starts a new block of code. These are mostly
comment|// block reindents to add or remove control flow operators.
comment|//
specifier|final
name|int
name|ad
init|=
name|n
operator|.
name|getBeginA
argument_list|()
operator|-
name|c
operator|.
name|getEndA
argument_list|()
decl_stmt|;
specifier|final
name|int
name|bd
init|=
name|n
operator|.
name|getBeginB
argument_list|()
operator|-
name|c
operator|.
name|getEndB
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
literal|1
operator|<=
name|ad
operator|&&
name|isBlankLineGap
argument_list|(
name|a
argument_list|,
name|c
operator|.
name|getEndA
argument_list|()
argument_list|,
name|n
operator|.
name|getBeginA
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
literal|1
operator|<=
name|bd
operator|&&
name|isBlankLineGap
argument_list|(
name|b
argument_list|,
name|c
operator|.
name|getEndB
argument_list|()
argument_list|,
name|n
operator|.
name|getBeginB
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
name|ad
operator|==
literal|1
operator|&&
name|bd
operator|==
literal|1
operator|&&
name|isControlBlockStart
argument_list|(
name|a
argument_list|,
name|c
operator|.
name|getEndA
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|int
name|ab
init|=
name|c
operator|.
name|getBeginA
argument_list|()
decl_stmt|;
name|int
name|ae
init|=
name|n
operator|.
name|getEndA
argument_list|()
decl_stmt|;
name|int
name|bb
init|=
name|c
operator|.
name|getBeginB
argument_list|()
decl_stmt|;
name|int
name|be
init|=
name|n
operator|.
name|getEndB
argument_list|()
decl_stmt|;
name|edits
operator|.
name|set
argument_list|(
name|j
argument_list|,
operator|new
name|Edit
argument_list|(
name|ab
argument_list|,
name|ae
argument_list|,
name|bb
argument_list|,
name|be
argument_list|)
argument_list|)
expr_stmt|;
name|edits
operator|.
name|remove
argument_list|(
name|j
operator|+
literal|1
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|j
operator|++
expr_stmt|;
block|}
block|}
DECL|method|isBlankLineGap (Text a, int b, int e)
specifier|private
specifier|static
name|boolean
name|isBlankLineGap
parameter_list|(
name|Text
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|e
parameter_list|)
block|{
for|for
control|(
init|;
name|b
operator|<
name|e
condition|;
name|b
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|BLANK_LINE_RE
operator|.
name|matcher
argument_list|(
name|a
operator|.
name|getString
argument_list|(
name|b
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|isControlBlockStart (Text a, int idx)
specifier|private
specifier|static
name|boolean
name|isControlBlockStart
parameter_list|(
name|Text
name|a
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
return|return
name|CONTROL_BLOCK_START_RE
operator|.
name|matcher
argument_list|(
name|a
operator|.
name|getString
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|.
name|find
argument_list|()
return|;
block|}
DECL|method|canCoalesce (CharText a, int b, int e)
specifier|private
specifier|static
name|boolean
name|canCoalesce
parameter_list|(
name|CharText
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|e
parameter_list|)
block|{
while|while
condition|(
name|b
operator|<
name|e
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|charAt
argument_list|(
name|b
operator|++
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|findLF (List<Edit> edits, int j, CharText t, int b)
specifier|private
specifier|static
name|int
name|findLF
parameter_list|(
name|List
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|,
name|int
name|j
parameter_list|,
name|CharText
name|t
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|int
name|lf
init|=
name|b
decl_stmt|;
name|int
name|limit
init|=
literal|0
operator|<
name|j
condition|?
name|edits
operator|.
name|get
argument_list|(
name|j
operator|-
literal|1
argument_list|)
operator|.
name|getEndB
argument_list|()
else|:
literal|0
decl_stmt|;
while|while
condition|(
name|limit
operator|<
name|lf
operator|&&
name|t
operator|.
name|charAt
argument_list|(
name|lf
argument_list|)
operator|!=
literal|'\n'
condition|)
block|{
name|lf
operator|--
expr_stmt|;
block|}
return|return
name|lf
return|;
block|}
DECL|method|isOnlyWhitespace (CharText t, final int b, final int e)
specifier|private
specifier|static
name|boolean
name|isOnlyWhitespace
parameter_list|(
name|CharText
name|t
parameter_list|,
specifier|final
name|int
name|b
parameter_list|,
specifier|final
name|int
name|e
parameter_list|)
block|{
for|for
control|(
name|int
name|c
init|=
name|b
init|;
name|c
operator|<
name|e
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isWhitespace
argument_list|(
name|t
operator|.
name|charAt
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|b
operator|<
name|e
return|;
block|}
block|}
end_class

end_unit

