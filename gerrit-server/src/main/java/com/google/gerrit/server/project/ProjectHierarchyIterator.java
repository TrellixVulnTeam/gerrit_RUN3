begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Iterates from a project up through its parents to All-Projects.  *<p>  * If a cycle is detected the cycle is broken and All-Projects is visited.  */
end_comment

begin_class
DECL|class|ProjectHierarchyIterator
class|class
name|ProjectHierarchyIterator
implements|implements
name|Iterator
argument_list|<
name|ProjectState
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProjectHierarchyIterator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|ProjectCache
name|cache
decl_stmt|;
DECL|field|allProjectsName
specifier|private
specifier|final
name|AllProjectsName
name|allProjectsName
decl_stmt|;
DECL|field|seen
specifier|private
specifier|final
name|Set
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|seen
decl_stmt|;
DECL|field|next
specifier|private
name|ProjectState
name|next
decl_stmt|;
DECL|method|ProjectHierarchyIterator (ProjectCache c, AllProjectsName all, ProjectState firstResult)
name|ProjectHierarchyIterator
parameter_list|(
name|ProjectCache
name|c
parameter_list|,
name|AllProjectsName
name|all
parameter_list|,
name|ProjectState
name|firstResult
parameter_list|)
block|{
name|cache
operator|=
name|c
expr_stmt|;
name|allProjectsName
operator|=
name|all
expr_stmt|;
name|seen
operator|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|()
expr_stmt|;
name|seen
operator|.
name|add
argument_list|(
name|firstResult
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|=
name|firstResult
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|ProjectState
name|next
parameter_list|()
block|{
name|ProjectState
name|n
init|=
name|next
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|next
operator|=
name|computeNext
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
DECL|method|computeNext (ProjectState n)
specifier|private
name|ProjectState
name|computeNext
parameter_list|(
name|ProjectState
name|n
parameter_list|)
block|{
name|Project
operator|.
name|NameKey
name|parentName
init|=
name|n
operator|.
name|getProject
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentName
operator|!=
literal|null
operator|&&
name|visit
argument_list|(
name|parentName
argument_list|)
condition|)
block|{
name|ProjectState
name|p
init|=
name|cache
operator|.
name|get
argument_list|(
name|parentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
return|return
name|p
return|;
block|}
block|}
comment|// Parent does not exist or was already visited.
comment|// Fall back to visit All-Projects exactly once.
if|if
condition|(
name|seen
operator|.
name|add
argument_list|(
name|allProjectsName
argument_list|)
condition|)
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|allProjectsName
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|visit (Project.NameKey parentName)
specifier|private
name|boolean
name|visit
parameter_list|(
name|Project
operator|.
name|NameKey
name|parentName
parameter_list|)
block|{
if|if
condition|(
name|seen
operator|.
name|add
argument_list|(
name|parentName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|order
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|seen
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Project
operator|.
name|NameKey
name|p
range|:
name|seen
control|)
block|{
name|order
operator|.
name|add
argument_list|(
name|p
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|idx
init|=
name|order
operator|.
name|lastIndexOf
argument_list|(
name|parentName
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|order
operator|.
name|add
argument_list|(
name|parentName
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Cycle detected in projects: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|" -> "
argument_list|)
operator|.
name|join
argument_list|(
name|order
operator|.
name|subList
argument_list|(
name|idx
argument_list|,
name|order
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

