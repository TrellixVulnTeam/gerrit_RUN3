begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
operator|.
name|INITIAL_PATCH_SET_ID
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ReviewerStateInternal
operator|.
name|REVIEWER
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|FooterConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RecipientType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchSetUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|CommitReceivedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|CommentAdded
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|RevisionCreated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GroupCollector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|SendEmailExecutor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|send
operator|.
name|CreateChangeSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|NoSshInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|InsertChangeOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RepoContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestScopePropagator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|ChangeIdUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|ChangeInserter
specifier|public
class|class
name|ChangeInserter
implements|implements
name|InsertChangeOp
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (Change.Id cid, ObjectId commitId, String refName)
name|ChangeInserter
name|create
parameter_list|(
name|Change
operator|.
name|Id
name|cid
parameter_list|,
name|ObjectId
name|commitId
parameter_list|,
name|String
name|refName
parameter_list|)
function_decl|;
block|}
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChangeInserter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|projectControlFactory
specifier|private
specifier|final
name|ProjectControl
operator|.
name|GenericFactory
name|projectControlFactory
decl_stmt|;
DECL|field|userFactory
specifier|private
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
DECL|field|changeControlFactory
specifier|private
specifier|final
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
DECL|field|patchSetInfoFactory
specifier|private
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
decl_stmt|;
DECL|field|psUtil
specifier|private
specifier|final
name|PatchSetUtil
name|psUtil
decl_stmt|;
DECL|field|approvalsUtil
specifier|private
specifier|final
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
DECL|field|cmUtil
specifier|private
specifier|final
name|ChangeMessagesUtil
name|cmUtil
decl_stmt|;
DECL|field|createChangeSenderFactory
specifier|private
specifier|final
name|CreateChangeSender
operator|.
name|Factory
name|createChangeSenderFactory
decl_stmt|;
DECL|field|sendEmailExecutor
specifier|private
specifier|final
name|ExecutorService
name|sendEmailExecutor
decl_stmt|;
DECL|field|commitValidatorsFactory
specifier|private
specifier|final
name|CommitValidators
operator|.
name|Factory
name|commitValidatorsFactory
decl_stmt|;
DECL|field|revisionCreated
specifier|private
specifier|final
name|RevisionCreated
name|revisionCreated
decl_stmt|;
DECL|field|commentAdded
specifier|private
specifier|final
name|CommentAdded
name|commentAdded
decl_stmt|;
DECL|field|migration
specifier|private
specifier|final
name|NotesMigration
name|migration
decl_stmt|;
DECL|field|changeId
specifier|private
specifier|final
name|Change
operator|.
name|Id
name|changeId
decl_stmt|;
DECL|field|psId
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
decl_stmt|;
DECL|field|commitId
specifier|private
specifier|final
name|ObjectId
name|commitId
decl_stmt|;
DECL|field|refName
specifier|private
specifier|final
name|String
name|refName
decl_stmt|;
comment|// Fields exposed as setters.
DECL|field|status
specifier|private
name|Change
operator|.
name|Status
name|status
decl_stmt|;
DECL|field|topic
specifier|private
name|String
name|topic
decl_stmt|;
DECL|field|message
specifier|private
name|String
name|message
decl_stmt|;
DECL|field|patchSetDescription
specifier|private
name|String
name|patchSetDescription
decl_stmt|;
DECL|field|isPrivate
specifier|private
name|boolean
name|isPrivate
decl_stmt|;
DECL|field|workInProgress
specifier|private
name|boolean
name|workInProgress
decl_stmt|;
DECL|field|groups
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|validate
specifier|private
name|boolean
name|validate
init|=
literal|true
decl_stmt|;
DECL|field|notify
specifier|private
name|NotifyHandling
name|notify
init|=
name|NotifyHandling
operator|.
name|ALL
decl_stmt|;
DECL|field|accountsToNotify
specifier|private
name|ListMultimap
argument_list|<
name|RecipientType
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|accountsToNotify
init|=
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|reviewers
specifier|private
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
decl_stmt|;
DECL|field|extraCC
specifier|private
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|extraCC
decl_stmt|;
DECL|field|approvals
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|approvals
decl_stmt|;
DECL|field|requestScopePropagator
specifier|private
name|RequestScopePropagator
name|requestScopePropagator
decl_stmt|;
DECL|field|fireRevisionCreated
specifier|private
name|boolean
name|fireRevisionCreated
decl_stmt|;
DECL|field|sendMail
specifier|private
name|boolean
name|sendMail
decl_stmt|;
DECL|field|updateRef
specifier|private
name|boolean
name|updateRef
decl_stmt|;
comment|// Fields set during the insertion process.
DECL|field|cmd
specifier|private
name|ReceiveCommand
name|cmd
decl_stmt|;
DECL|field|change
specifier|private
name|Change
name|change
decl_stmt|;
DECL|field|changeMessage
specifier|private
name|ChangeMessage
name|changeMessage
decl_stmt|;
DECL|field|patchSetInfo
specifier|private
name|PatchSetInfo
name|patchSetInfo
decl_stmt|;
DECL|field|patchSet
specifier|private
name|PatchSet
name|patchSet
decl_stmt|;
DECL|field|pushCert
specifier|private
name|String
name|pushCert
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChangeInserter ( ProjectControl.GenericFactory projectControlFactory, IdentifiedUser.GenericFactory userFactory, ChangeControl.GenericFactory changeControlFactory, PatchSetInfoFactory patchSetInfoFactory, PatchSetUtil psUtil, ApprovalsUtil approvalsUtil, ChangeMessagesUtil cmUtil, CreateChangeSender.Factory createChangeSenderFactory, @SendEmailExecutor ExecutorService sendEmailExecutor, CommitValidators.Factory commitValidatorsFactory, CommentAdded commentAdded, RevisionCreated revisionCreated, NotesMigration migration, @Assisted Change.Id changeId, @Assisted ObjectId commitId, @Assisted String refName)
name|ChangeInserter
parameter_list|(
name|ProjectControl
operator|.
name|GenericFactory
name|projectControlFactory
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
parameter_list|,
name|PatchSetInfoFactory
name|patchSetInfoFactory
parameter_list|,
name|PatchSetUtil
name|psUtil
parameter_list|,
name|ApprovalsUtil
name|approvalsUtil
parameter_list|,
name|ChangeMessagesUtil
name|cmUtil
parameter_list|,
name|CreateChangeSender
operator|.
name|Factory
name|createChangeSenderFactory
parameter_list|,
annotation|@
name|SendEmailExecutor
name|ExecutorService
name|sendEmailExecutor
parameter_list|,
name|CommitValidators
operator|.
name|Factory
name|commitValidatorsFactory
parameter_list|,
name|CommentAdded
name|commentAdded
parameter_list|,
name|RevisionCreated
name|revisionCreated
parameter_list|,
name|NotesMigration
name|migration
parameter_list|,
annotation|@
name|Assisted
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
annotation|@
name|Assisted
name|ObjectId
name|commitId
parameter_list|,
annotation|@
name|Assisted
name|String
name|refName
parameter_list|)
block|{
name|this
operator|.
name|projectControlFactory
operator|=
name|projectControlFactory
expr_stmt|;
name|this
operator|.
name|userFactory
operator|=
name|userFactory
expr_stmt|;
name|this
operator|.
name|changeControlFactory
operator|=
name|changeControlFactory
expr_stmt|;
name|this
operator|.
name|patchSetInfoFactory
operator|=
name|patchSetInfoFactory
expr_stmt|;
name|this
operator|.
name|psUtil
operator|=
name|psUtil
expr_stmt|;
name|this
operator|.
name|approvalsUtil
operator|=
name|approvalsUtil
expr_stmt|;
name|this
operator|.
name|cmUtil
operator|=
name|cmUtil
expr_stmt|;
name|this
operator|.
name|createChangeSenderFactory
operator|=
name|createChangeSenderFactory
expr_stmt|;
name|this
operator|.
name|sendEmailExecutor
operator|=
name|sendEmailExecutor
expr_stmt|;
name|this
operator|.
name|commitValidatorsFactory
operator|=
name|commitValidatorsFactory
expr_stmt|;
name|this
operator|.
name|revisionCreated
operator|=
name|revisionCreated
expr_stmt|;
name|this
operator|.
name|commentAdded
operator|=
name|commentAdded
expr_stmt|;
name|this
operator|.
name|migration
operator|=
name|migration
expr_stmt|;
name|this
operator|.
name|changeId
operator|=
name|changeId
expr_stmt|;
name|this
operator|.
name|psId
operator|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|changeId
argument_list|,
name|INITIAL_PATCH_SET_ID
argument_list|)
expr_stmt|;
name|this
operator|.
name|commitId
operator|=
name|commitId
operator|.
name|copy
argument_list|()
expr_stmt|;
name|this
operator|.
name|refName
operator|=
name|refName
expr_stmt|;
name|this
operator|.
name|reviewers
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
name|this
operator|.
name|extraCC
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
name|this
operator|.
name|approvals
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|fireRevisionCreated
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|sendMail
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|updateRef
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createChange (Context ctx)
specifier|public
name|Change
name|createChange
parameter_list|(
name|Context
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|change
operator|=
operator|new
name|Change
argument_list|(
name|getChangeKey
argument_list|(
name|ctx
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|commitId
argument_list|)
argument_list|,
name|changeId
argument_list|,
name|ctx
operator|.
name|getAccountId
argument_list|()
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|ctx
operator|.
name|getProject
argument_list|()
argument_list|,
name|refName
argument_list|)
argument_list|,
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|)
expr_stmt|;
name|change
operator|.
name|setStatus
argument_list|(
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|status
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
argument_list|)
expr_stmt|;
name|change
operator|.
name|setTopic
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|change
operator|.
name|setPrivate
argument_list|(
name|isPrivate
argument_list|)
expr_stmt|;
name|change
operator|.
name|setWorkInProgress
argument_list|(
name|workInProgress
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
DECL|method|getChangeKey (RevWalk rw, ObjectId id)
specifier|private
specifier|static
name|Change
operator|.
name|Key
name|getChangeKey
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|ObjectId
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|RevCommit
name|commit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|rw
operator|.
name|parseBody
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|idList
init|=
name|commit
operator|.
name|getFooterLines
argument_list|(
name|FooterConstants
operator|.
name|CHANGE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|idList
operator|.
name|get
argument_list|(
name|idList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
name|ObjectId
name|changeId
init|=
name|ChangeIdUtil
operator|.
name|computeChangeId
argument_list|(
name|commit
operator|.
name|getTree
argument_list|()
argument_list|,
name|commit
argument_list|,
name|commit
operator|.
name|getAuthorIdent
argument_list|()
argument_list|,
name|commit
operator|.
name|getCommitterIdent
argument_list|()
argument_list|,
name|commit
operator|.
name|getShortMessage
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|changeIdStr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|changeIdStr
operator|.
name|append
argument_list|(
literal|"I"
argument_list|)
operator|.
name|append
argument_list|(
name|ObjectId
operator|.
name|toString
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|changeIdStr
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getPatchSetId ()
specifier|public
name|PatchSet
operator|.
name|Id
name|getPatchSetId
parameter_list|()
block|{
return|return
name|psId
return|;
block|}
DECL|method|getCommitId ()
specifier|public
name|ObjectId
name|getCommitId
parameter_list|()
block|{
return|return
name|commitId
return|;
block|}
DECL|method|getChange ()
specifier|public
name|Change
name|getChange
parameter_list|()
block|{
name|checkState
argument_list|(
name|change
operator|!=
literal|null
argument_list|,
literal|"getChange() only valid after creating change"
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
DECL|method|setTopic (String topic)
specifier|public
name|ChangeInserter
name|setTopic
parameter_list|(
name|String
name|topic
parameter_list|)
block|{
name|checkState
argument_list|(
name|change
operator|==
literal|null
argument_list|,
literal|"setTopic(String) only valid before creating change"
argument_list|)
expr_stmt|;
name|this
operator|.
name|topic
operator|=
name|topic
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setMessage (String message)
specifier|public
name|ChangeInserter
name|setMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setPatchSetDescription (String patchSetDescription)
specifier|public
name|ChangeInserter
name|setPatchSetDescription
parameter_list|(
name|String
name|patchSetDescription
parameter_list|)
block|{
name|this
operator|.
name|patchSetDescription
operator|=
name|patchSetDescription
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setValidate (boolean validate)
specifier|public
name|ChangeInserter
name|setValidate
parameter_list|(
name|boolean
name|validate
parameter_list|)
block|{
name|this
operator|.
name|validate
operator|=
name|validate
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setNotify (NotifyHandling notify)
specifier|public
name|ChangeInserter
name|setNotify
parameter_list|(
name|NotifyHandling
name|notify
parameter_list|)
block|{
name|this
operator|.
name|notify
operator|=
name|notify
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setAccountsToNotify ( ListMultimap<RecipientType, Account.Id> accountsToNotify)
specifier|public
name|ChangeInserter
name|setAccountsToNotify
parameter_list|(
name|ListMultimap
argument_list|<
name|RecipientType
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|accountsToNotify
parameter_list|)
block|{
name|this
operator|.
name|accountsToNotify
operator|=
name|checkNotNull
argument_list|(
name|accountsToNotify
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setReviewers (Set<Account.Id> reviewers)
specifier|public
name|ChangeInserter
name|setReviewers
parameter_list|(
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
parameter_list|)
block|{
name|this
operator|.
name|reviewers
operator|=
name|reviewers
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setExtraCC (Set<Account.Id> extraCC)
specifier|public
name|ChangeInserter
name|setExtraCC
parameter_list|(
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|extraCC
parameter_list|)
block|{
name|this
operator|.
name|extraCC
operator|=
name|extraCC
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setPrivate (boolean isPrivate)
specifier|public
name|ChangeInserter
name|setPrivate
parameter_list|(
name|boolean
name|isPrivate
parameter_list|)
block|{
name|checkState
argument_list|(
name|change
operator|==
literal|null
argument_list|,
literal|"setPrivate(boolean) only valid before creating change"
argument_list|)
expr_stmt|;
name|this
operator|.
name|isPrivate
operator|=
name|isPrivate
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setDraft (boolean draft)
specifier|public
name|ChangeInserter
name|setDraft
parameter_list|(
name|boolean
name|draft
parameter_list|)
block|{
name|checkState
argument_list|(
name|change
operator|==
literal|null
argument_list|,
literal|"setDraft(boolean) only valid before creating change"
argument_list|)
expr_stmt|;
return|return
name|setStatus
argument_list|(
name|draft
condition|?
name|Change
operator|.
name|Status
operator|.
name|DRAFT
else|:
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
return|;
block|}
DECL|method|setWorkInProgress (boolean workInProgress)
specifier|public
name|ChangeInserter
name|setWorkInProgress
parameter_list|(
name|boolean
name|workInProgress
parameter_list|)
block|{
name|this
operator|.
name|workInProgress
operator|=
name|workInProgress
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setStatus (Change.Status status)
specifier|public
name|ChangeInserter
name|setStatus
parameter_list|(
name|Change
operator|.
name|Status
name|status
parameter_list|)
block|{
name|checkState
argument_list|(
name|change
operator|==
literal|null
argument_list|,
literal|"setStatus(Change.Status) only valid before creating change"
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setGroups (List<String> groups)
specifier|public
name|ChangeInserter
name|setGroups
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|groups
argument_list|,
literal|"groups may not be empty"
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|patchSet
operator|==
literal|null
argument_list|,
literal|"setGroups(Iterable<String>) only valid before creating change"
argument_list|)
expr_stmt|;
name|this
operator|.
name|groups
operator|=
name|groups
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setFireRevisionCreated (boolean fireRevisionCreated)
specifier|public
name|ChangeInserter
name|setFireRevisionCreated
parameter_list|(
name|boolean
name|fireRevisionCreated
parameter_list|)
block|{
name|this
operator|.
name|fireRevisionCreated
operator|=
name|fireRevisionCreated
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setSendMail (boolean sendMail)
specifier|public
name|ChangeInserter
name|setSendMail
parameter_list|(
name|boolean
name|sendMail
parameter_list|)
block|{
name|this
operator|.
name|sendMail
operator|=
name|sendMail
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setRequestScopePropagator (RequestScopePropagator r)
specifier|public
name|ChangeInserter
name|setRequestScopePropagator
parameter_list|(
name|RequestScopePropagator
name|r
parameter_list|)
block|{
name|this
operator|.
name|requestScopePropagator
operator|=
name|r
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setPushCertificate (String cert)
specifier|public
name|void
name|setPushCertificate
parameter_list|(
name|String
name|cert
parameter_list|)
block|{
name|pushCert
operator|=
name|cert
expr_stmt|;
block|}
DECL|method|getPatchSet ()
specifier|public
name|PatchSet
name|getPatchSet
parameter_list|()
block|{
name|checkState
argument_list|(
name|patchSet
operator|!=
literal|null
argument_list|,
literal|"getPatchSet() only valid after creating change"
argument_list|)
expr_stmt|;
return|return
name|patchSet
return|;
block|}
DECL|method|setApprovals (Map<String, Short> approvals)
specifier|public
name|ChangeInserter
name|setApprovals
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|approvals
parameter_list|)
block|{
name|this
operator|.
name|approvals
operator|=
name|approvals
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Set whether to include the new patch set ref update in this update.    *    *<p>If false, the caller is responsible for creating the patch set ref<strong>before</strong>    * executing the containing {@code BatchUpdate}.    *    *<p>Should not be used in new code, as it doesn't result in a single atomic batch ref update for    * code and NoteDb meta refs.    *    * @param updateRef whether to update the ref during {@code updateRepo}.    */
annotation|@
name|Deprecated
DECL|method|setUpdateRef (boolean updateRef)
specifier|public
name|ChangeInserter
name|setUpdateRef
parameter_list|(
name|boolean
name|updateRef
parameter_list|)
block|{
name|this
operator|.
name|updateRef
operator|=
name|updateRef
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getChangeMessage ()
specifier|public
name|ChangeMessage
name|getChangeMessage
parameter_list|()
block|{
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|checkState
argument_list|(
name|changeMessage
operator|!=
literal|null
argument_list|,
literal|"getChangeMessage() only valid after inserting change"
argument_list|)
expr_stmt|;
return|return
name|changeMessage
return|;
block|}
DECL|method|getCommand ()
specifier|public
name|ReceiveCommand
name|getCommand
parameter_list|()
block|{
return|return
name|cmd
return|;
block|}
annotation|@
name|Override
DECL|method|updateRepo (RepoContext ctx)
specifier|public
name|void
name|updateRepo
parameter_list|(
name|RepoContext
name|ctx
parameter_list|)
throws|throws
name|ResourceConflictException
throws|,
name|IOException
block|{
name|cmd
operator|=
operator|new
name|ReceiveCommand
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|commitId
argument_list|,
name|psId
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|updateRef
condition|)
block|{
return|return;
block|}
name|ctx
operator|.
name|addRefUpdate
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateChange (ChangeContext ctx)
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|RestApiException
throws|,
name|OrmException
throws|,
name|IOException
block|{
name|change
operator|=
name|ctx
operator|.
name|getChange
argument_list|()
expr_stmt|;
comment|// Use defensive copy created by ChangeControl.
name|ReviewDb
name|db
init|=
name|ctx
operator|.
name|getDb
argument_list|()
decl_stmt|;
name|ChangeControl
name|ctl
init|=
name|ctx
operator|.
name|getControl
argument_list|()
decl_stmt|;
name|patchSetInfo
operator|=
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|ctx
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|ctx
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|commitId
argument_list|)
argument_list|,
name|psId
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|setCurrentPatchSet
argument_list|(
name|patchSetInfo
argument_list|)
expr_stmt|;
name|ChangeUpdate
name|update
init|=
name|ctx
operator|.
name|getUpdate
argument_list|(
name|psId
argument_list|)
decl_stmt|;
name|update
operator|.
name|setChangeId
argument_list|(
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setSubjectForCommit
argument_list|(
literal|"Create change"
argument_list|)
expr_stmt|;
name|update
operator|.
name|setBranch
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setTopic
argument_list|(
name|change
operator|.
name|getTopic
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPsDescription
argument_list|(
name|patchSetDescription
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPrivate
argument_list|(
name|isPrivate
argument_list|)
expr_stmt|;
name|update
operator|.
name|setWorkInProgress
argument_list|(
name|workInProgress
argument_list|)
expr_stmt|;
name|boolean
name|draft
init|=
name|status
operator|==
name|Change
operator|.
name|Status
operator|.
name|DRAFT
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|newGroups
init|=
name|groups
decl_stmt|;
if|if
condition|(
name|newGroups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newGroups
operator|=
name|GroupCollector
operator|.
name|getDefaultGroups
argument_list|(
name|commitId
argument_list|)
expr_stmt|;
block|}
name|patchSet
operator|=
name|psUtil
operator|.
name|insert
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|update
argument_list|,
name|psId
argument_list|,
name|commitId
argument_list|,
name|draft
argument_list|,
name|newGroups
argument_list|,
name|pushCert
argument_list|,
name|patchSetDescription
argument_list|)
expr_stmt|;
comment|/* TODO: fixStatus is used here because the tests      * (byStatusClosed() in AbstractQueryChangesTest)      * insert changes that are already merged,      * and setStatus may not be used to set the Status to merged      *      * is it possible to make the tests use the merge code path,      * instead of setting the status directly?      */
name|update
operator|.
name|fixStatus
argument_list|(
name|change
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewersToAdd
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|reviewers
argument_list|)
decl_stmt|;
if|if
condition|(
name|migration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
name|approvalsUtil
operator|.
name|addCcs
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|,
name|update
argument_list|,
name|filterOnChangeVisibility
argument_list|(
name|db
argument_list|,
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|,
name|extraCC
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reviewersToAdd
operator|.
name|addAll
argument_list|(
name|extraCC
argument_list|)
expr_stmt|;
block|}
name|LabelTypes
name|labelTypes
init|=
name|ctl
operator|.
name|getProjectControl
argument_list|()
operator|.
name|getLabelTypes
argument_list|()
decl_stmt|;
name|approvalsUtil
operator|.
name|addReviewers
argument_list|(
name|db
argument_list|,
name|update
argument_list|,
name|labelTypes
argument_list|,
name|change
argument_list|,
name|patchSet
argument_list|,
name|patchSetInfo
argument_list|,
name|filterOnChangeVisibility
argument_list|(
name|db
argument_list|,
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|,
name|reviewersToAdd
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|Account
operator|.
name|Id
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|approvalsUtil
operator|.
name|addApprovalsForNewPatchSet
argument_list|(
name|db
argument_list|,
name|update
argument_list|,
name|labelTypes
argument_list|,
name|patchSet
argument_list|,
name|ctx
operator|.
name|getControl
argument_list|()
argument_list|,
name|approvals
argument_list|)
expr_stmt|;
comment|// Check if approvals are changing in with this update. If so, add current user to reviewers.
comment|// Note that this is done separately as addReviewers is filtering out the change owner as
comment|// reviewer which is needed in several other code paths.
if|if
condition|(
operator|!
name|approvals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|update
operator|.
name|putReviewer
argument_list|(
name|ctx
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|REVIEWER
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|changeMessage
operator|=
name|ChangeMessagesUtil
operator|.
name|newMessage
argument_list|(
name|patchSet
operator|.
name|getId
argument_list|()
argument_list|,
name|ctx
operator|.
name|getUser
argument_list|()
argument_list|,
name|patchSet
operator|.
name|getCreatedOn
argument_list|()
argument_list|,
name|message
argument_list|,
name|ChangeMessagesUtil
operator|.
name|uploadedPatchSetTag
argument_list|(
name|workInProgress
argument_list|)
argument_list|)
expr_stmt|;
name|cmUtil
operator|.
name|addChangeMessage
argument_list|(
name|db
argument_list|,
name|update
argument_list|,
name|changeMessage
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|filterOnChangeVisibility ( final ReviewDb db, final ChangeNotes notes, Set<Account.Id> accounts)
specifier|private
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|filterOnChangeVisibility
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|ChangeNotes
name|notes
parameter_list|,
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accounts
parameter_list|)
block|{
return|return
name|accounts
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|accountId
lambda|->
block|{
try|try
block|{
name|IdentifiedUser
name|user
init|=
name|userFactory
operator|.
name|create
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
return|return
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|notes
argument_list|,
name|user
argument_list|)
operator|.
name|isVisible
argument_list|(
name|db
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to check if account %d can see change %d"
argument_list|,
name|accountId
operator|.
name|get
argument_list|()
argument_list|,
name|notes
operator|.
name|getChangeId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|postUpdate (Context ctx)
specifier|public
name|void
name|postUpdate
parameter_list|(
name|Context
name|ctx
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|sendMail
operator|&&
operator|(
name|notify
operator|!=
name|NotifyHandling
operator|.
name|NONE
operator|||
operator|!
name|accountsToNotify
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|Runnable
name|sender
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|CreateChangeSender
name|cm
init|=
name|createChangeSenderFactory
operator|.
name|create
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|cm
operator|.
name|setFrom
argument_list|(
name|change
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setPatchSet
argument_list|(
name|patchSet
argument_list|,
name|patchSetInfo
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setNotify
argument_list|(
name|notify
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setAccountsToNotify
argument_list|(
name|accountsToNotify
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addReviewers
argument_list|(
name|reviewers
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addExtraCC
argument_list|(
name|extraCC
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email for new change "
operator|+
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"send-email newchange"
return|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|requestScopePropagator
operator|!=
literal|null
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError
init|=
name|sendEmailExecutor
operator|.
name|submit
argument_list|(
name|requestScopePropagator
operator|.
name|wrap
argument_list|(
name|sender
argument_list|)
argument_list|)
decl_stmt|;
block|}
else|else
block|{
name|sender
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* For labels that are not set in this operation, show the "current" value      * of 0, and no oldValue as the value was not modified by this operation.      * For labels that are set in this operation, the value was modified, so      * show a transition from an oldValue of 0 to the new value.      */
if|if
condition|(
name|fireRevisionCreated
condition|)
block|{
name|revisionCreated
operator|.
name|fire
argument_list|(
name|change
argument_list|,
name|patchSet
argument_list|,
name|ctx
operator|.
name|getAccount
argument_list|()
argument_list|,
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|,
name|notify
argument_list|)
expr_stmt|;
if|if
condition|(
name|approvals
operator|!=
literal|null
operator|&&
operator|!
name|approvals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ChangeControl
name|changeControl
init|=
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|change
argument_list|,
name|ctx
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LabelType
argument_list|>
name|labels
init|=
name|changeControl
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|getLabelTypes
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|allApprovals
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|oldApprovals
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|LabelType
name|lt
range|:
name|labels
control|)
block|{
name|allApprovals
operator|.
name|put
argument_list|(
name|lt
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|oldApprovals
operator|.
name|put
argument_list|(
name|lt
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|entry
range|:
name|approvals
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|allApprovals
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oldApprovals
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|commentAdded
operator|.
name|fire
argument_list|(
name|change
argument_list|,
name|patchSet
argument_list|,
name|ctx
operator|.
name|getAccount
argument_list|()
argument_list|,
literal|null
argument_list|,
name|allApprovals
argument_list|,
name|oldApprovals
argument_list|,
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|validate (RepoContext ctx)
specifier|private
name|void
name|validate
parameter_list|(
name|RepoContext
name|ctx
parameter_list|)
throws|throws
name|IOException
throws|,
name|ResourceConflictException
block|{
if|if
condition|(
operator|!
name|validate
condition|)
block|{
return|return;
block|}
try|try
block|{
name|RefControl
name|refControl
init|=
name|projectControlFactory
operator|.
name|controlFor
argument_list|(
name|ctx
operator|.
name|getProject
argument_list|()
argument_list|,
name|ctx
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|controlForRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
try|try
init|(
name|CommitReceivedEvent
name|event
init|=
operator|new
name|CommitReceivedEvent
argument_list|(
name|cmd
argument_list|,
name|refControl
operator|.
name|getProjectControl
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|ctx
operator|.
name|getRevWalk
argument_list|()
operator|.
name|getObjectReader
argument_list|()
argument_list|,
name|commitId
argument_list|,
name|ctx
operator|.
name|getIdentifiedUser
argument_list|()
argument_list|)
init|)
block|{
name|commitValidatorsFactory
operator|.
name|forGerritCommits
argument_list|(
name|refControl
argument_list|,
operator|new
name|NoSshInfo
argument_list|()
argument_list|,
name|ctx
operator|.
name|getRevWalk
argument_list|()
argument_list|)
operator|.
name|validate
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CommitValidationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|e
operator|.
name|getFullMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

