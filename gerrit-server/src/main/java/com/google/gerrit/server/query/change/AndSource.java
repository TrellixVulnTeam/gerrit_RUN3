begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|AndPredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|ListResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmRuntimeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|AndSource
specifier|public
class|class
name|AndSource
extends|extends
name|AndPredicate
argument_list|<
name|ChangeData
argument_list|>
implements|implements
name|ChangeDataSource
block|{
DECL|field|CMP
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|CMP
init|=
operator|new
name|Comparator
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|a
parameter_list|,
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|b
parameter_list|)
block|{
name|int
name|ai
init|=
name|a
operator|instanceof
name|ChangeDataSource
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|int
name|bi
init|=
name|b
operator|instanceof
name|ChangeDataSource
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|int
name|cmp
init|=
name|ai
operator|-
name|bi
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
name|a
operator|.
name|getCost
argument_list|()
operator|-
name|b
operator|.
name|getCost
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cmp
operator|==
literal|0
comment|//
operator|&&
name|a
operator|instanceof
name|ChangeDataSource
comment|//
operator|&&
name|b
operator|instanceof
name|ChangeDataSource
condition|)
block|{
name|ChangeDataSource
name|as
init|=
operator|(
name|ChangeDataSource
operator|)
name|a
decl_stmt|;
name|ChangeDataSource
name|bs
init|=
operator|(
name|ChangeDataSource
operator|)
name|b
decl_stmt|;
name|cmp
operator|=
name|as
operator|.
name|getCardinality
argument_list|()
operator|-
name|bs
operator|.
name|getCardinality
argument_list|()
expr_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
operator|(
name|as
operator|.
name|hasChange
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
operator|-
operator|(
name|bs
operator|.
name|hasChange
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
expr_stmt|;
block|}
block|}
return|return
name|cmp
return|;
block|}
block|}
decl_stmt|;
DECL|method|sort ( Collection<? extends Predicate<ChangeData>> that)
specifier|private
specifier|static
name|List
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|sort
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|that
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
argument_list|(
name|that
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|r
argument_list|,
name|CMP
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|cardinality
specifier|private
name|int
name|cardinality
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|AndSource (Provider<ReviewDb> db, Collection<? extends Predicate<ChangeData>> that)
specifier|public
name|AndSource
parameter_list|(
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|that
parameter_list|)
block|{
name|super
argument_list|(
name|sort
argument_list|(
name|that
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasChange ()
specifier|public
name|boolean
name|hasChange
parameter_list|()
block|{
name|ChangeDataSource
name|source
init|=
name|source
argument_list|()
decl_stmt|;
return|return
name|source
operator|!=
literal|null
operator|&&
name|source
operator|.
name|hasChange
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|ResultSet
argument_list|<
name|ChangeData
argument_list|>
name|read
parameter_list|()
throws|throws
name|OrmException
block|{
try|try
block|{
return|return
name|readImpl
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|OrmRuntimeException
name|err
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfInstanceOf
argument_list|(
name|err
operator|.
name|getCause
argument_list|()
argument_list|,
name|OrmException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OrmException
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
DECL|method|readImpl ()
specifier|private
name|ResultSet
argument_list|<
name|ChangeData
argument_list|>
name|readImpl
parameter_list|()
throws|throws
name|OrmException
block|{
name|ChangeDataSource
name|source
init|=
name|source
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"No ChangeDataSource: "
operator|+
name|this
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ChangeData
argument_list|>
name|r
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ChangeData
name|last
init|=
literal|null
decl_stmt|;
name|boolean
name|skipped
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ChangeData
name|data
range|:
name|buffer
argument_list|(
name|source
argument_list|,
name|source
operator|.
name|read
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|match
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|skipped
operator|=
literal|true
expr_stmt|;
block|}
name|last
operator|=
name|data
expr_stmt|;
block|}
if|if
condition|(
name|skipped
operator|&&
name|last
operator|!=
literal|null
operator|&&
name|source
operator|instanceof
name|Paginated
condition|)
block|{
comment|// If our source is a paginated source and we skipped at
comment|// least one of its results, we may not have filled the full
comment|// limit the caller wants.  Restart the source and continue.
comment|//
name|Paginated
name|p
init|=
operator|(
name|Paginated
operator|)
name|source
decl_stmt|;
while|while
condition|(
name|skipped
operator|&&
name|r
operator|.
name|size
argument_list|()
operator|<
name|p
operator|.
name|limit
argument_list|()
condition|)
block|{
name|ChangeData
name|lastBeforeRestart
init|=
name|last
decl_stmt|;
name|skipped
operator|=
literal|false
expr_stmt|;
name|last
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|ChangeData
name|data
range|:
name|buffer
argument_list|(
name|source
argument_list|,
name|p
operator|.
name|restart
argument_list|(
name|lastBeforeRestart
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|match
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|skipped
operator|=
literal|true
expr_stmt|;
block|}
name|last
operator|=
name|data
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|ListResultSet
argument_list|<
name|ChangeData
argument_list|>
argument_list|(
name|r
argument_list|)
return|;
block|}
DECL|method|buffer ( ChangeDataSource source, ResultSet<ChangeData> scanner)
specifier|private
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|buffer
parameter_list|(
name|ChangeDataSource
name|source
parameter_list|,
name|ResultSet
argument_list|<
name|ChangeData
argument_list|>
name|scanner
parameter_list|)
block|{
specifier|final
name|boolean
name|loadChange
init|=
operator|!
name|source
operator|.
name|hasChange
argument_list|()
decl_stmt|;
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|Iterables
operator|.
name|partition
argument_list|(
name|scanner
argument_list|,
literal|50
argument_list|)
argument_list|)
operator|.
name|transformAndConcat
argument_list|(
operator|new
name|Function
argument_list|<
name|List
argument_list|<
name|ChangeData
argument_list|>
argument_list|,
name|List
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ChangeData
argument_list|>
name|apply
parameter_list|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|loadChange
condition|)
block|{
try|try
block|{
name|ChangeData
operator|.
name|ensureChangeLoaded
argument_list|(
name|db
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|buffer
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|source ()
specifier|private
name|ChangeDataSource
name|source
parameter_list|()
block|{
for|for
control|(
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|p
range|:
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|ChangeDataSource
condition|)
block|{
return|return
operator|(
name|ChangeDataSource
operator|)
name|p
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getCardinality ()
specifier|public
name|int
name|getCardinality
parameter_list|()
block|{
if|if
condition|(
name|cardinality
operator|<
literal|0
condition|)
block|{
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
for|for
control|(
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|p
range|:
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|ChangeDataSource
condition|)
block|{
name|int
name|c
init|=
operator|(
operator|(
name|ChangeDataSource
operator|)
name|p
operator|)
operator|.
name|getCardinality
argument_list|()
decl_stmt|;
name|cardinality
operator|=
name|Math
operator|.
name|min
argument_list|(
name|cardinality
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|cardinality
return|;
block|}
block|}
end_class

end_unit

