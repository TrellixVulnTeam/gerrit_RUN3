begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AnyObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Commit implementation with some optimizations for change notes parsing.  *<p>  *<ul>  *<li>Caches the result of {@link #getFooterLines()}, which is  *     otherwise very wasteful with allocations.</li>  *</ul>  */
end_comment

begin_class
DECL|class|ChangeNotesCommit
specifier|public
class|class
name|ChangeNotesCommit
extends|extends
name|RevCommit
block|{
DECL|method|newRevWalk (Repository repo)
specifier|public
specifier|static
name|ChangeNotesRevWalk
name|newRevWalk
parameter_list|(
name|Repository
name|repo
parameter_list|)
block|{
return|return
operator|new
name|ChangeNotesRevWalk
argument_list|(
name|repo
argument_list|)
return|;
block|}
DECL|class|ChangeNotesRevWalk
specifier|public
specifier|static
class|class
name|ChangeNotesRevWalk
extends|extends
name|RevWalk
block|{
DECL|method|ChangeNotesRevWalk (Repository repo)
specifier|private
name|ChangeNotesRevWalk
parameter_list|(
name|Repository
name|repo
parameter_list|)
block|{
name|super
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCommit (AnyObjectId id)
specifier|protected
name|ChangeNotesCommit
name|createCommit
parameter_list|(
name|AnyObjectId
name|id
parameter_list|)
block|{
return|return
operator|new
name|ChangeNotesCommit
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|ChangeNotesCommit
name|next
parameter_list|()
throws|throws
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
throws|,
name|IOException
block|{
return|return
operator|(
name|ChangeNotesCommit
operator|)
name|super
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|markStart (RevCommit c)
specifier|public
name|void
name|markStart
parameter_list|(
name|RevCommit
name|c
parameter_list|)
throws|throws
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
throws|,
name|IOException
block|{
name|checkArgument
argument_list|(
name|c
operator|instanceof
name|ChangeNotesCommit
argument_list|)
expr_stmt|;
name|super
operator|.
name|markStart
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|markUninteresting (RevCommit c)
specifier|public
name|void
name|markUninteresting
parameter_list|(
name|RevCommit
name|c
parameter_list|)
throws|throws
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
throws|,
name|IOException
block|{
name|checkArgument
argument_list|(
name|c
operator|instanceof
name|ChangeNotesCommit
argument_list|)
expr_stmt|;
name|super
operator|.
name|markUninteresting
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lookupCommit (AnyObjectId id)
specifier|public
name|ChangeNotesCommit
name|lookupCommit
parameter_list|(
name|AnyObjectId
name|id
parameter_list|)
block|{
return|return
operator|(
name|ChangeNotesCommit
operator|)
name|super
operator|.
name|lookupCommit
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parseCommit (AnyObjectId id)
specifier|public
name|ChangeNotesCommit
name|parseCommit
parameter_list|(
name|AnyObjectId
name|id
parameter_list|)
throws|throws
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
throws|,
name|IOException
block|{
return|return
operator|(
name|ChangeNotesCommit
operator|)
name|super
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
DECL|field|footerLines
specifier|private
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|footerLines
decl_stmt|;
DECL|method|ChangeNotesCommit (AnyObjectId id)
specifier|public
name|ChangeNotesCommit
parameter_list|(
name|AnyObjectId
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|getFooterLineValues (FooterKey key)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFooterLineValues
parameter_list|(
name|FooterKey
name|key
parameter_list|)
block|{
if|if
condition|(
name|footerLines
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|FooterLine
argument_list|>
name|src
init|=
name|getFooterLines
argument_list|()
decl_stmt|;
name|footerLines
operator|=
name|ArrayListMultimap
operator|.
name|create
argument_list|(
name|src
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|FooterLine
name|fl
range|:
name|src
control|)
block|{
name|footerLines
operator|.
name|put
argument_list|(
name|fl
operator|.
name|getKey
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fl
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|footerLines
operator|.
name|get
argument_list|(
name|key
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

