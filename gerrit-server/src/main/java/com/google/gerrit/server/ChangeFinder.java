begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|IndexConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|CacheModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeTriplet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|ChangeFinder
specifier|public
class|class
name|ChangeFinder
block|{
DECL|field|CACHE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CACHE_NAME
init|=
literal|"changeid_project"
decl_stmt|;
DECL|method|module ()
specifier|public
specifier|static
name|Module
name|module
parameter_list|()
block|{
return|return
operator|new
name|CacheModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|cache
argument_list|(
name|CACHE_NAME
argument_list|,
name|Change
operator|.
name|Id
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|maximumWeight
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|field|indexConfig
specifier|private
specifier|final
name|IndexConfig
name|indexConfig
decl_stmt|;
DECL|field|changeIdProjectCache
specifier|private
specifier|final
name|Cache
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|changeIdProjectCache
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|reviewDb
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|reviewDb
decl_stmt|;
DECL|field|changeNotesFactory
specifier|private
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|changeNotesFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChangeFinder ( IndexConfig indexConfig, @Named(CACHE_NAME) Cache<Change.Id, String> changeIdProjectCache, Provider<InternalChangeQuery> queryProvider, Provider<ReviewDb> reviewDb, ChangeNotes.Factory changeNotesFactory)
name|ChangeFinder
parameter_list|(
name|IndexConfig
name|indexConfig
parameter_list|,
annotation|@
name|Named
argument_list|(
name|CACHE_NAME
argument_list|)
name|Cache
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|changeIdProjectCache
parameter_list|,
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|reviewDb
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|changeNotesFactory
parameter_list|)
block|{
name|this
operator|.
name|indexConfig
operator|=
name|indexConfig
expr_stmt|;
name|this
operator|.
name|changeIdProjectCache
operator|=
name|changeIdProjectCache
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|reviewDb
operator|=
name|reviewDb
expr_stmt|;
name|this
operator|.
name|changeNotesFactory
operator|=
name|changeNotesFactory
expr_stmt|;
block|}
comment|/**    * Find changes matching the given identifier.    *    * @param id change identifier, either a numeric ID, a Change-Id, or project~branch~id triplet.    * @return possibly-empty list of notes for all matching changes; may or may not be visible.    * @throws OrmException if an error occurred querying the database.    */
DECL|method|find (String id)
specifier|public
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|find
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|int
name|z
init|=
name|id
operator|.
name|lastIndexOf
argument_list|(
literal|'~'
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|id
operator|.
name|lastIndexOf
argument_list|(
literal|'~'
argument_list|,
name|z
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|y
argument_list|<
literal|0
operator|&&
name|z
argument_list|>
literal|0
condition|)
block|{
comment|// Try project~numericChangeId
name|Integer
name|n
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|id
operator|.
name|substring
argument_list|(
name|z
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
return|return
name|fromProjectNumber
argument_list|(
name|id
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|z
argument_list|)
argument_list|,
name|n
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|y
operator|<
literal|0
operator|&&
name|z
operator|<
literal|0
condition|)
block|{
comment|// Try numeric changeId
name|Integer
name|n
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
return|return
name|find
argument_list|(
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|n
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// Use the index to search for changes, but don't return any stored fields,
comment|// to force rereading in case the index is stale.
name|InternalChangeQuery
name|query
init|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|noFields
argument_list|()
decl_stmt|;
if|if
condition|(
name|y
operator|>
literal|0
operator|&&
name|z
operator|>
literal|0
condition|)
block|{
comment|// Try change triplet (project~branch~Ihash...)
name|Optional
argument_list|<
name|ChangeTriplet
argument_list|>
name|triplet
init|=
name|ChangeTriplet
operator|.
name|parse
argument_list|(
name|id
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
if|if
condition|(
name|triplet
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|ChangeTriplet
name|t
init|=
name|triplet
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|asChangeNotes
argument_list|(
name|query
operator|.
name|byBranchKey
argument_list|(
name|t
operator|.
name|branch
argument_list|()
argument_list|,
name|t
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// Try isolated Ihash... format ("Change-Id: Ihash").
return|return
name|asChangeNotes
argument_list|(
name|query
operator|.
name|byKeyPrefix
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
DECL|method|fromProjectNumber (String project, int changeNumber)
specifier|private
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|fromProjectNumber
parameter_list|(
name|String
name|project
parameter_list|,
name|int
name|changeNumber
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
operator|.
name|Id
name|cId
init|=
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|changeNumber
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|changeNotesFactory
operator|.
name|createChecked
argument_list|(
name|reviewDb
operator|.
name|get
argument_list|()
argument_list|,
name|Project
operator|.
name|NameKey
operator|.
name|parse
argument_list|(
name|project
argument_list|)
argument_list|,
name|cId
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchChangeException
name|e
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
comment|// Distinguish between a RepositoryNotFoundException (project argument invalid) and
comment|// other OrmExceptions (failure in the persistence layer).
if|if
condition|(
name|Throwables
operator|.
name|getRootCause
argument_list|(
name|e
argument_list|)
operator|instanceof
name|RepositoryNotFoundException
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|findOne (Change.Id id)
specifier|public
name|ChangeNotes
name|findOne
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|notes
init|=
name|find
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|notes
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|id
argument_list|)
throw|;
block|}
return|return
name|notes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|find (Change.Id id)
specifier|public
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|find
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|OrmException
block|{
name|String
name|project
init|=
name|changeIdProjectCache
operator|.
name|getIfPresent
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|!=
literal|null
condition|)
block|{
return|return
name|fromProjectNumber
argument_list|(
name|project
argument_list|,
name|id
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
comment|// Use the index to search for changes, but don't return any stored fields,
comment|// to force rereading in case the index is stale.
name|InternalChangeQuery
name|query
init|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|noFields
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangeData
argument_list|>
name|r
init|=
name|query
operator|.
name|byLegacyChangeId
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|changeIdProjectCache
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|project
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|asChangeNotes
argument_list|(
name|r
argument_list|)
return|;
block|}
DECL|method|asChangeNotes (List<ChangeData> cds)
specifier|private
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|asChangeNotes
parameter_list|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|cds
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|notes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|indexConfig
operator|.
name|separateChangeSubIndexes
argument_list|()
condition|)
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|cds
control|)
block|{
name|notes
operator|.
name|add
argument_list|(
name|cd
operator|.
name|notes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|notes
return|;
block|}
comment|// If an index implementation uses separate non-atomic subindexes, it's possible to temporarily
comment|// observe a change as present in both subindexes, if this search is concurrent with a write.
comment|// Dedup to avoid confusing the caller. We can choose an arbitrary ChangeData instance because
comment|// the index results have no stored fields, so the data is already reloaded. (It's also possible
comment|// that a change might appear in zero subindexes, but there's nothing we can do here to help
comment|// this case.)
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|seen
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|cds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|cds
control|)
block|{
if|if
condition|(
name|seen
operator|.
name|add
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|notes
operator|.
name|add
argument_list|(
name|cd
operator|.
name|notes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|notes
return|;
block|}
block|}
end_class

end_unit

