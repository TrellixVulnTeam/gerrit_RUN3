begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ApprovalCategoryValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|workflow
operator|.
name|CategoryFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|workflow
operator|.
name|FunctionState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ReviewerJson
specifier|public
class|class
name|ReviewerJson
block|{
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|approvalTypes
specifier|private
specifier|final
name|ApprovalTypes
name|approvalTypes
decl_stmt|;
DECL|field|functionState
specifier|private
specifier|final
name|FunctionState
operator|.
name|Factory
name|functionState
decl_stmt|;
DECL|field|accountLoaderFactory
specifier|private
specifier|final
name|AccountInfo
operator|.
name|Loader
operator|.
name|Factory
name|accountLoaderFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|ReviewerJson (Provider<ReviewDb> db, ApprovalTypes approvalTypes, FunctionState.Factory functionState, AccountInfo.Loader.Factory accountLoaderFactory)
name|ReviewerJson
parameter_list|(
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|ApprovalTypes
name|approvalTypes
parameter_list|,
name|FunctionState
operator|.
name|Factory
name|functionState
parameter_list|,
name|AccountInfo
operator|.
name|Loader
operator|.
name|Factory
name|accountLoaderFactory
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|approvalTypes
operator|=
name|approvalTypes
expr_stmt|;
name|this
operator|.
name|functionState
operator|=
name|functionState
expr_stmt|;
name|this
operator|.
name|accountLoaderFactory
operator|=
name|accountLoaderFactory
expr_stmt|;
block|}
DECL|method|format (Collection<ReviewerResource> rsrcs)
specifier|public
name|List
argument_list|<
name|ReviewerInfo
argument_list|>
name|format
parameter_list|(
name|Collection
argument_list|<
name|ReviewerResource
argument_list|>
name|rsrcs
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|ReviewerInfo
argument_list|>
name|infos
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|rsrcs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|AccountInfo
operator|.
name|Loader
name|loader
init|=
name|accountLoaderFactory
operator|.
name|create
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|ReviewerResource
name|rsrc
range|:
name|rsrcs
control|)
block|{
name|ReviewerInfo
name|info
init|=
name|formatOne
argument_list|(
name|rsrc
argument_list|)
decl_stmt|;
name|loader
operator|.
name|put
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|loader
operator|.
name|fill
argument_list|()
expr_stmt|;
return|return
name|infos
return|;
block|}
DECL|method|format (ReviewerResource rsrc)
specifier|public
name|List
argument_list|<
name|ReviewerInfo
argument_list|>
name|format
parameter_list|(
name|ReviewerResource
name|rsrc
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|format
argument_list|(
name|ImmutableList
operator|.
expr|<
name|ReviewerResource
operator|>
name|of
argument_list|(
name|rsrc
argument_list|)
argument_list|)
return|;
block|}
DECL|method|formatOne (ReviewerResource rsrc)
specifier|private
name|ReviewerInfo
name|formatOne
parameter_list|(
name|ReviewerResource
name|rsrc
parameter_list|)
throws|throws
name|OrmException
block|{
name|Account
operator|.
name|Id
name|id
init|=
name|rsrc
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|ReviewerInfo
name|out
init|=
operator|new
name|ReviewerInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|rsrc
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|change
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvals
init|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byPatchSetUser
argument_list|(
name|psId
argument_list|,
name|id
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|ChangeControl
name|control
init|=
name|rsrc
operator|.
name|getControl
argument_list|()
operator|.
name|forUser
argument_list|(
name|rsrc
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|FunctionState
name|fs
init|=
name|functionState
operator|.
name|create
argument_list|(
name|control
argument_list|,
name|psId
argument_list|,
name|approvals
argument_list|)
decl_stmt|;
for|for
control|(
name|ApprovalType
name|at
range|:
name|approvalTypes
operator|.
name|getApprovalTypes
argument_list|()
control|)
block|{
name|CategoryFunction
operator|.
name|forCategory
argument_list|(
name|at
operator|.
name|getCategory
argument_list|()
argument_list|)
operator|.
name|run
argument_list|(
name|at
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|approvals
operator|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|approvals
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PatchSetApproval
name|ca
range|:
name|approvals
control|)
block|{
for|for
control|(
name|PermissionRange
name|pr
range|:
name|control
operator|.
name|getLabelRanges
argument_list|()
control|)
block|{
if|if
condition|(
name|pr
operator|.
name|getMin
argument_list|()
operator|!=
literal|0
operator|||
name|pr
operator|.
name|getMax
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// TODO: Support arbitrary labels.
name|ApprovalType
name|at
init|=
name|approvalTypes
operator|.
name|byId
argument_list|(
name|ca
operator|.
name|getCategoryId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|approvals
operator|.
name|put
argument_list|(
name|at
operator|.
name|getCategory
argument_list|()
operator|.
name|getLabelName
argument_list|()
argument_list|,
name|ApprovalCategoryValue
operator|.
name|formatValue
argument_list|(
name|ca
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|out
operator|.
name|approvals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|approvals
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|class|ReviewerInfo
specifier|public
specifier|static
class|class
name|ReviewerInfo
extends|extends
name|AccountInfo
block|{
DECL|field|kind
specifier|final
name|String
name|kind
init|=
literal|"gerritcodereview#reviewer"
decl_stmt|;
DECL|field|approvals
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|approvals
decl_stmt|;
DECL|method|ReviewerInfo (Account.Id id)
specifier|protected
name|ReviewerInfo
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

