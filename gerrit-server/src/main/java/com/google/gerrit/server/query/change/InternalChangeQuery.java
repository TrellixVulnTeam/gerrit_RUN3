begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|Predicate
operator|.
name|and
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|Predicate
operator|.
name|or
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeStatusPredicate
operator|.
name|open
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|ChangeIndex
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|IndexCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|QueryParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AbbreviatedObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Execute a single query over changes, for use by Gerrit internals.  *<p>  * By default, visibility of returned changes is not enforced (unlike in {@link  * QueryProcessor}). The methods in this class are not typically used by  * user-facing paths, but rather by internal callers that need to process all  * matching results.  */
end_comment

begin_class
DECL|class|InternalChangeQuery
specifier|public
class|class
name|InternalChangeQuery
block|{
DECL|method|ref (Branch.NameKey branch)
specifier|private
specifier|static
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|ref
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
block|{
return|return
operator|new
name|RefPredicate
argument_list|(
name|branch
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|change (Change.Key key)
specifier|private
specifier|static
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|change
parameter_list|(
name|Change
operator|.
name|Key
name|key
parameter_list|)
block|{
return|return
operator|new
name|ChangeIdPredicate
argument_list|(
name|key
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|project (Project.NameKey project)
specifier|private
specifier|static
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|project
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
block|{
return|return
operator|new
name|ProjectPredicate
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|status (Change.Status status)
specifier|private
specifier|static
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|status
parameter_list|(
name|Change
operator|.
name|Status
name|status
parameter_list|)
block|{
return|return
operator|new
name|ChangeStatusPredicate
argument_list|(
name|status
argument_list|)
return|;
block|}
DECL|method|commit (AbbreviatedObjectId id)
specifier|private
specifier|static
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|commit
parameter_list|(
name|AbbreviatedObjectId
name|id
parameter_list|)
block|{
return|return
operator|new
name|CommitPredicate
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|field|qp
specifier|private
specifier|final
name|QueryProcessor
name|qp
decl_stmt|;
DECL|field|indexes
specifier|private
specifier|final
name|IndexCollection
name|indexes
decl_stmt|;
annotation|@
name|Inject
DECL|method|InternalChangeQuery (QueryProcessor queryProcessor, IndexCollection indexes)
name|InternalChangeQuery
parameter_list|(
name|QueryProcessor
name|queryProcessor
parameter_list|,
name|IndexCollection
name|indexes
parameter_list|)
block|{
name|qp
operator|=
name|queryProcessor
operator|.
name|enforceVisibility
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexes
operator|=
name|indexes
expr_stmt|;
block|}
DECL|method|setLimit (int n)
specifier|public
name|InternalChangeQuery
name|setLimit
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|qp
operator|.
name|setLimit
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|enforceVisibility (boolean enforce)
specifier|public
name|InternalChangeQuery
name|enforceVisibility
parameter_list|(
name|boolean
name|enforce
parameter_list|)
block|{
name|qp
operator|.
name|enforceVisibility
argument_list|(
name|enforce
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|byKey (Change.Key key)
specifier|public
name|List
argument_list|<
name|ChangeData
argument_list|>
name|byKey
parameter_list|(
name|Change
operator|.
name|Key
name|key
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|byKeyPrefix
argument_list|(
name|key
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|byKeyPrefix (String prefix)
specifier|public
name|List
argument_list|<
name|ChangeData
argument_list|>
name|byKeyPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|query
argument_list|(
operator|new
name|ChangeIdPredicate
argument_list|(
name|prefix
argument_list|)
argument_list|)
return|;
block|}
DECL|method|byBranchKey (Branch.NameKey branch, Change.Key key)
specifier|public
name|List
argument_list|<
name|ChangeData
argument_list|>
name|byBranchKey
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|,
name|Change
operator|.
name|Key
name|key
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|query
argument_list|(
name|and
argument_list|(
name|ref
argument_list|(
name|branch
argument_list|)
argument_list|,
name|project
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|,
name|change
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|byProject (Project.NameKey project)
specifier|public
name|List
argument_list|<
name|ChangeData
argument_list|>
name|byProject
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|query
argument_list|(
name|project
argument_list|(
name|project
argument_list|)
argument_list|)
return|;
block|}
DECL|method|submitted (Branch.NameKey branch)
specifier|public
name|List
argument_list|<
name|ChangeData
argument_list|>
name|submitted
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|query
argument_list|(
name|and
argument_list|(
name|ref
argument_list|(
name|branch
argument_list|)
argument_list|,
name|project
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|,
name|status
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|SUBMITTED
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|allSubmitted ()
specifier|public
name|List
argument_list|<
name|ChangeData
argument_list|>
name|allSubmitted
parameter_list|()
throws|throws
name|OrmException
block|{
return|return
name|query
argument_list|(
name|status
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|SUBMITTED
argument_list|)
argument_list|)
return|;
block|}
DECL|method|byBranchOpen (Branch.NameKey branch)
specifier|public
name|List
argument_list|<
name|ChangeData
argument_list|>
name|byBranchOpen
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|query
argument_list|(
name|and
argument_list|(
name|ref
argument_list|(
name|branch
argument_list|)
argument_list|,
name|project
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|,
name|open
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|byProjectOpen (Project.NameKey project)
specifier|public
name|List
argument_list|<
name|ChangeData
argument_list|>
name|byProjectOpen
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|query
argument_list|(
name|and
argument_list|(
name|project
argument_list|(
name|project
argument_list|)
argument_list|,
name|open
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|byExactTopicOpen (String topic)
specifier|public
name|List
argument_list|<
name|ChangeData
argument_list|>
name|byExactTopicOpen
parameter_list|(
name|String
name|topic
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|query
argument_list|(
name|and
argument_list|(
operator|new
name|ExactTopicPredicate
argument_list|(
name|schema
argument_list|(
name|indexes
argument_list|)
argument_list|,
name|topic
argument_list|)
argument_list|,
name|open
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|byCommitPrefix (String prefix)
specifier|public
name|List
argument_list|<
name|ChangeData
argument_list|>
name|byCommitPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|query
argument_list|(
name|commit
argument_list|(
name|AbbreviatedObjectId
operator|.
name|fromString
argument_list|(
name|prefix
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|byCommit (ObjectId id)
specifier|public
name|List
argument_list|<
name|ChangeData
argument_list|>
name|byCommit
parameter_list|(
name|ObjectId
name|id
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|query
argument_list|(
name|commit
argument_list|(
name|AbbreviatedObjectId
operator|.
name|fromObjectId
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|byProjectGroups (Project.NameKey project, Collection<String> groups)
specifier|public
name|List
argument_list|<
name|ChangeData
argument_list|>
name|byProjectGroups
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|GroupPredicate
argument_list|>
name|groupPredicates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|groups
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|g
range|:
name|groups
control|)
block|{
name|groupPredicates
operator|.
name|add
argument_list|(
operator|new
name|GroupPredicate
argument_list|(
name|g
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|query
argument_list|(
name|and
argument_list|(
name|project
argument_list|(
name|project
argument_list|)
argument_list|,
name|or
argument_list|(
name|groupPredicates
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|query (Predicate<ChangeData> p)
specifier|private
name|List
argument_list|<
name|ChangeData
argument_list|>
name|query
parameter_list|(
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|p
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
block|{
return|return
name|qp
operator|.
name|queryChanges
argument_list|(
name|p
argument_list|)
operator|.
name|changes
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|QueryParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|schema (@ullable IndexCollection indexes)
specifier|private
specifier|static
name|Schema
argument_list|<
name|ChangeData
argument_list|>
name|schema
parameter_list|(
annotation|@
name|Nullable
name|IndexCollection
name|indexes
parameter_list|)
block|{
name|ChangeIndex
name|index
init|=
name|indexes
operator|!=
literal|null
condition|?
name|indexes
operator|.
name|getSearchIndex
argument_list|()
else|:
literal|null
decl_stmt|;
return|return
name|index
operator|!=
literal|null
condition|?
name|index
operator|.
name|getSchema
argument_list|()
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

