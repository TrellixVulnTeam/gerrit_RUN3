begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.edit
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|ChangeEditUtil
operator|.
name|editRefName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|InvalidChangeOperationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheEditor
operator|.
name|DeletePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheEditor
operator|.
name|PathEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|FileMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|treewalk
operator|.
name|TreeWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_comment
comment|/**  * Utility functions to manipulate change edits.  *<p>  * This class contains methods to modify edit's content.  * For retrieving, publishing and deleting edit see  * {@link ChangeEditUtil}.  *<p>  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|ChangeEditModifier
specifier|public
class|class
name|ChangeEditModifier
block|{
DECL|enum|TreeOperation
specifier|private
specifier|static
enum|enum
name|TreeOperation
block|{
DECL|enumConstant|CHANGE_ENTRY
name|CHANGE_ENTRY
block|,
DECL|enumConstant|DELETE_ENTRY
name|DELETE_ENTRY
block|,
DECL|enumConstant|RESTORE_ENTRY
name|RESTORE_ENTRY
block|}
DECL|field|tz
specifier|private
specifier|final
name|TimeZone
name|tz
decl_stmt|;
DECL|field|gitManager
specifier|private
specifier|final
name|GitRepositoryManager
name|gitManager
decl_stmt|;
DECL|field|currentUser
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|currentUser
decl_stmt|;
DECL|field|editUtil
specifier|private
specifier|final
name|ChangeEditUtil
name|editUtil
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChangeEditModifier (@erritPersonIdent PersonIdent gerritIdent, GitRepositoryManager gitManager, Provider<ReviewDb> dbProvider, Provider<CurrentUser> currentUser, ChangeEditUtil editUtil)
name|ChangeEditModifier
parameter_list|(
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|gerritIdent
parameter_list|,
name|GitRepositoryManager
name|gitManager
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
parameter_list|,
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|currentUser
parameter_list|,
name|ChangeEditUtil
name|editUtil
parameter_list|)
block|{
name|this
operator|.
name|gitManager
operator|=
name|gitManager
expr_stmt|;
name|this
operator|.
name|currentUser
operator|=
name|currentUser
expr_stmt|;
name|this
operator|.
name|editUtil
operator|=
name|editUtil
expr_stmt|;
name|this
operator|.
name|tz
operator|=
name|gerritIdent
operator|.
name|getTimeZone
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create new change edit.    *    * @param change to create change edit for    * @param ps patch set to create change edit on    * @return result    * @throws AuthException    * @throws IOException    * @throws ResourceConflictException When change edit already    * exists for the change    */
DECL|method|createEdit (Change change, PatchSet ps)
specifier|public
name|RefUpdate
operator|.
name|Result
name|createEdit
parameter_list|(
name|Change
name|change
parameter_list|,
name|PatchSet
name|ps
parameter_list|)
throws|throws
name|AuthException
throws|,
name|IOException
throws|,
name|ResourceConflictException
block|{
if|if
condition|(
operator|!
name|currentUser
operator|.
name|get
argument_list|()
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"Authentication required"
argument_list|)
throw|;
block|}
name|IdentifiedUser
name|me
init|=
operator|(
name|IdentifiedUser
operator|)
name|currentUser
operator|.
name|get
argument_list|()
decl_stmt|;
name|Repository
name|repo
init|=
name|gitManager
operator|.
name|openRepository
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|refName
init|=
name|editRefName
argument_list|(
name|me
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRef
argument_list|(
name|refName
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"edit already exists"
argument_list|)
throw|;
block|}
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|ObjectInserter
name|inserter
init|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
decl_stmt|;
try|try
block|{
name|RevCommit
name|base
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectId
name|commit
init|=
name|createCommit
argument_list|(
name|me
argument_list|,
name|inserter
argument_list|,
name|base
argument_list|,
name|base
argument_list|,
name|base
operator|.
name|getTree
argument_list|()
argument_list|)
decl_stmt|;
name|inserter
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|update
argument_list|(
name|repo
argument_list|,
name|me
argument_list|,
name|refName
argument_list|,
name|rw
argument_list|,
name|base
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|commit
argument_list|)
return|;
block|}
finally|finally
block|{
name|rw
operator|.
name|release
argument_list|()
expr_stmt|;
name|inserter
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Modify file in existing change edit from its base commit.    *    * @param edit change edit    * @param file path to modify    * @param content new content    * @return result    * @throws AuthException    * @throws InvalidChangeOperationException    * @throws IOException    */
DECL|method|modifyFile (ChangeEdit edit, String file, byte[] content)
specifier|public
name|RefUpdate
operator|.
name|Result
name|modifyFile
parameter_list|(
name|ChangeEdit
name|edit
parameter_list|,
name|String
name|file
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|AuthException
throws|,
name|InvalidChangeOperationException
throws|,
name|IOException
block|{
return|return
name|modify
argument_list|(
name|TreeOperation
operator|.
name|CHANGE_ENTRY
argument_list|,
name|edit
argument_list|,
name|file
argument_list|,
name|content
argument_list|)
return|;
block|}
comment|/**    * Delete file in existing change edit.    *    * @param edit change edit    * @param file path to delete    * @return result    * @throws AuthException    * @throws InvalidChangeOperationException    * @throws IOException    */
DECL|method|deleteFile (ChangeEdit edit, String file)
specifier|public
name|RefUpdate
operator|.
name|Result
name|deleteFile
parameter_list|(
name|ChangeEdit
name|edit
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|AuthException
throws|,
name|InvalidChangeOperationException
throws|,
name|IOException
block|{
return|return
name|modify
argument_list|(
name|TreeOperation
operator|.
name|DELETE_ENTRY
argument_list|,
name|edit
argument_list|,
name|file
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Restore file in existing change edit.    *    * @param edit change edit    * @param file path to restore    * @return result    * @throws AuthException    * @throws InvalidChangeOperationException    * @throws IOException    */
DECL|method|restoreFile (ChangeEdit edit, String file)
specifier|public
name|RefUpdate
operator|.
name|Result
name|restoreFile
parameter_list|(
name|ChangeEdit
name|edit
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|AuthException
throws|,
name|InvalidChangeOperationException
throws|,
name|IOException
block|{
return|return
name|modify
argument_list|(
name|TreeOperation
operator|.
name|RESTORE_ENTRY
argument_list|,
name|edit
argument_list|,
name|file
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|modify (TreeOperation op, ChangeEdit edit, String file, byte[] content)
specifier|private
name|RefUpdate
operator|.
name|Result
name|modify
parameter_list|(
name|TreeOperation
name|op
parameter_list|,
name|ChangeEdit
name|edit
parameter_list|,
name|String
name|file
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|AuthException
throws|,
name|IOException
throws|,
name|InvalidChangeOperationException
block|{
if|if
condition|(
operator|!
name|currentUser
operator|.
name|get
argument_list|()
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"Authentication required"
argument_list|)
throw|;
block|}
name|IdentifiedUser
name|me
init|=
operator|(
name|IdentifiedUser
operator|)
name|currentUser
operator|.
name|get
argument_list|()
decl_stmt|;
name|Repository
name|repo
init|=
name|gitManager
operator|.
name|openRepository
argument_list|(
name|edit
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|ObjectInserter
name|inserter
init|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
decl_stmt|;
name|ObjectReader
name|reader
init|=
name|repo
operator|.
name|newObjectReader
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|refName
init|=
name|edit
operator|.
name|getRefName
argument_list|()
decl_stmt|;
name|RevCommit
name|prevEdit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|edit
operator|.
name|getRef
argument_list|()
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSet
name|basePs
init|=
name|editUtil
operator|.
name|getBasePatchSet
argument_list|(
name|edit
argument_list|,
name|prevEdit
argument_list|)
decl_stmt|;
name|RevCommit
name|base
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|basePs
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectId
name|oldObjectId
init|=
name|prevEdit
decl_stmt|;
if|if
condition|(
name|prevEdit
operator|==
literal|null
condition|)
block|{
name|prevEdit
operator|=
name|base
expr_stmt|;
name|oldObjectId
operator|=
name|ObjectId
operator|.
name|zeroId
argument_list|()
expr_stmt|;
block|}
name|ObjectId
name|newTree
init|=
name|writeNewTree
argument_list|(
name|op
argument_list|,
name|repo
argument_list|,
name|rw
argument_list|,
name|inserter
argument_list|,
name|prevEdit
argument_list|,
name|reader
argument_list|,
name|file
argument_list|,
name|content
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectId
operator|.
name|equals
argument_list|(
name|newTree
argument_list|,
name|prevEdit
operator|.
name|getTree
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidChangeOperationException
argument_list|(
literal|"no changes were made"
argument_list|)
throw|;
block|}
name|ObjectId
name|commit
init|=
name|createCommit
argument_list|(
name|me
argument_list|,
name|inserter
argument_list|,
name|prevEdit
argument_list|,
name|base
argument_list|,
name|newTree
argument_list|)
decl_stmt|;
name|inserter
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|update
argument_list|(
name|repo
argument_list|,
name|me
argument_list|,
name|refName
argument_list|,
name|rw
argument_list|,
name|base
argument_list|,
name|oldObjectId
argument_list|,
name|commit
argument_list|)
return|;
block|}
finally|finally
block|{
name|rw
operator|.
name|release
argument_list|()
expr_stmt|;
name|inserter
operator|.
name|release
argument_list|()
expr_stmt|;
name|reader
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createCommit (IdentifiedUser me, ObjectInserter inserter, RevCommit prevEdit, RevCommit base, ObjectId tree)
specifier|private
name|ObjectId
name|createCommit
parameter_list|(
name|IdentifiedUser
name|me
parameter_list|,
name|ObjectInserter
name|inserter
parameter_list|,
name|RevCommit
name|prevEdit
parameter_list|,
name|RevCommit
name|base
parameter_list|,
name|ObjectId
name|tree
parameter_list|)
throws|throws
name|IOException
block|{
name|CommitBuilder
name|builder
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTreeId
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setParentIds
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAuthor
argument_list|(
name|prevEdit
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCommitter
argument_list|(
name|getCommitterIdent
argument_list|(
name|me
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMessage
argument_list|(
name|prevEdit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|inserter
operator|.
name|insert
argument_list|(
name|builder
argument_list|)
return|;
block|}
DECL|method|update (Repository repo, IdentifiedUser me, String refName, RevWalk rw, RevCommit base, ObjectId oldObjectId, ObjectId newEdit)
specifier|private
name|RefUpdate
operator|.
name|Result
name|update
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|IdentifiedUser
name|me
parameter_list|,
name|String
name|refName
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|RevCommit
name|base
parameter_list|,
name|ObjectId
name|oldObjectId
parameter_list|,
name|ObjectId
name|newEdit
parameter_list|)
throws|throws
name|IOException
block|{
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setExpectedOldObjectId
argument_list|(
name|oldObjectId
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|newEdit
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setRefLogIdent
argument_list|(
name|getRefLogIdent
argument_list|(
name|me
argument_list|)
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RefUpdate
operator|.
name|Result
name|res
init|=
name|ru
operator|.
name|update
argument_list|(
name|rw
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
operator|&&
name|res
operator|!=
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"update failed: "
operator|+
name|ru
argument_list|)
throw|;
block|}
return|return
name|res
return|;
block|}
DECL|method|writeNewTree (TreeOperation op, Repository repo, RevWalk rw, ObjectInserter ins, RevCommit prevEdit, ObjectReader reader, String fileName, byte[] content, RevCommit base)
specifier|private
specifier|static
name|ObjectId
name|writeNewTree
parameter_list|(
name|TreeOperation
name|op
parameter_list|,
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|ObjectInserter
name|ins
parameter_list|,
name|RevCommit
name|prevEdit
parameter_list|,
name|ObjectReader
name|reader
parameter_list|,
name|String
name|fileName
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|RevCommit
name|base
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidChangeOperationException
block|{
name|DirCache
name|newTree
init|=
name|createTree
argument_list|(
name|reader
argument_list|,
name|prevEdit
argument_list|)
decl_stmt|;
name|editTree
argument_list|(
name|op
argument_list|,
name|repo
argument_list|,
name|rw
argument_list|,
name|base
argument_list|,
name|newTree
operator|.
name|editor
argument_list|()
argument_list|,
name|ins
argument_list|,
name|fileName
argument_list|,
name|content
argument_list|)
expr_stmt|;
return|return
name|newTree
operator|.
name|writeTree
argument_list|(
name|ins
argument_list|)
return|;
block|}
DECL|method|editTree (TreeOperation op, Repository repo, RevWalk rw, RevCommit base, DirCacheEditor dce, ObjectInserter ins, String path, byte[] content)
specifier|private
specifier|static
name|void
name|editTree
parameter_list|(
name|TreeOperation
name|op
parameter_list|,
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|RevCommit
name|base
parameter_list|,
name|DirCacheEditor
name|dce
parameter_list|,
name|ObjectInserter
name|ins
parameter_list|,
name|String
name|path
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidChangeOperationException
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|CHANGE_ENTRY
case|:
case|case
name|RESTORE_ENTRY
case|:
name|dce
operator|.
name|add
argument_list|(
name|getPathEdit
argument_list|(
name|op
argument_list|,
name|repo
argument_list|,
name|rw
argument_list|,
name|base
argument_list|,
name|path
argument_list|,
name|ins
argument_list|,
name|content
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE_ENTRY
case|:
name|dce
operator|.
name|add
argument_list|(
operator|new
name|DeletePath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unknown tree operation"
argument_list|)
throw|;
block|}
name|dce
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
DECL|method|getPathEdit (TreeOperation op, Repository repo, RevWalk rw, RevCommit base, String path, ObjectInserter ins, byte[] content)
specifier|private
specifier|static
name|PathEdit
name|getPathEdit
parameter_list|(
name|TreeOperation
name|op
parameter_list|,
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|RevCommit
name|base
parameter_list|,
name|String
name|path
parameter_list|,
name|ObjectInserter
name|ins
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidChangeOperationException
block|{
specifier|final
name|ObjectId
name|oid
init|=
name|op
operator|==
name|TreeOperation
operator|.
name|CHANGE_ENTRY
condition|?
name|ins
operator|.
name|insert
argument_list|(
name|Constants
operator|.
name|OBJ_BLOB
argument_list|,
name|content
argument_list|)
else|:
name|getObjectIdForRestoreOperation
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|base
argument_list|,
name|path
argument_list|)
decl_stmt|;
return|return
operator|new
name|PathEdit
argument_list|(
name|path
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|apply
parameter_list|(
name|DirCacheEntry
name|ent
parameter_list|)
block|{
name|ent
operator|.
name|setFileMode
argument_list|(
name|FileMode
operator|.
name|REGULAR_FILE
argument_list|)
expr_stmt|;
name|ent
operator|.
name|setObjectId
argument_list|(
name|oid
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|getObjectIdForRestoreOperation (Repository repo, RevWalk rw, RevCommit base, String path)
specifier|private
specifier|static
name|ObjectId
name|getObjectIdForRestoreOperation
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|RevCommit
name|base
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidChangeOperationException
block|{
name|TreeWalk
name|tw
init|=
name|TreeWalk
operator|.
name|forPath
argument_list|(
name|rw
operator|.
name|getObjectReader
argument_list|()
argument_list|,
name|path
argument_list|,
name|base
operator|.
name|getTree
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|// If the file does not exist in the base commit, try to restore it
comment|// from the base's parent commit.
if|if
condition|(
name|tw
operator|==
literal|null
operator|&&
name|base
operator|.
name|getParentCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|tw
operator|=
name|TreeWalk
operator|.
name|forPath
argument_list|(
name|rw
operator|.
name|getObjectReader
argument_list|()
argument_list|,
name|path
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|base
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getTree
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tw
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidChangeOperationException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"cannot restore path %s: missing in base revision %s"
argument_list|,
name|path
argument_list|,
name|base
operator|.
name|abbreviate
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|tw
operator|.
name|getObjectId
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|createTree (ObjectReader reader, RevCommit prevEdit)
specifier|private
specifier|static
name|DirCache
name|createTree
parameter_list|(
name|ObjectReader
name|reader
parameter_list|,
name|RevCommit
name|prevEdit
parameter_list|)
throws|throws
name|IOException
block|{
name|DirCache
name|dc
init|=
name|DirCache
operator|.
name|newInCore
argument_list|()
decl_stmt|;
name|DirCacheBuilder
name|b
init|=
name|dc
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|addTree
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|DirCacheEntry
operator|.
name|STAGE_0
argument_list|,
name|reader
argument_list|,
name|prevEdit
operator|.
name|getTree
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|finish
argument_list|()
expr_stmt|;
return|return
name|dc
return|;
block|}
DECL|method|getCommitterIdent (IdentifiedUser user)
specifier|private
name|PersonIdent
name|getCommitterIdent
parameter_list|(
name|IdentifiedUser
name|user
parameter_list|)
block|{
return|return
name|user
operator|.
name|newCommitterIdent
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|tz
argument_list|)
return|;
block|}
DECL|method|getRefLogIdent (IdentifiedUser user)
specifier|private
name|PersonIdent
name|getRefLogIdent
parameter_list|(
name|IdentifiedUser
name|user
parameter_list|)
block|{
return|return
name|user
operator|.
name|newRefLogIdent
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|tz
argument_list|)
return|;
block|}
block|}
end_class

end_unit

