begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|UnsupportedCredentialItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|CredentialItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|CredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|URIish
import|;
end_import

begin_comment
comment|/** Looks up a remote's password in secure.config. */
end_comment

begin_class
DECL|class|SecureCredentialsProvider
specifier|public
class|class
name|SecureCredentialsProvider
extends|extends
name|CredentialsProvider
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (String remoteName)
name|SecureCredentialsProvider
name|create
parameter_list|(
name|String
name|remoteName
parameter_list|)
function_decl|;
block|}
DECL|field|cfgUser
specifier|private
specifier|final
name|String
name|cfgUser
decl_stmt|;
DECL|field|cfgPass
specifier|private
specifier|final
name|String
name|cfgPass
decl_stmt|;
annotation|@
name|Inject
DECL|method|SecureCredentialsProvider (@erritServerConfig Config cfg, @Assisted String remoteName)
name|SecureCredentialsProvider
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
annotation|@
name|Assisted
name|String
name|remoteName
parameter_list|)
block|{
name|cfgUser
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"remote"
argument_list|,
name|remoteName
argument_list|,
literal|"username"
argument_list|)
expr_stmt|;
name|cfgPass
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"remote"
argument_list|,
name|remoteName
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isInteractive ()
specifier|public
name|boolean
name|isInteractive
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|supports (CredentialItem... items)
specifier|public
name|boolean
name|supports
parameter_list|(
name|CredentialItem
modifier|...
name|items
parameter_list|)
block|{
for|for
control|(
name|CredentialItem
name|i
range|:
name|items
control|)
block|{
if|if
condition|(
name|i
operator|instanceof
name|CredentialItem
operator|.
name|Username
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|i
operator|instanceof
name|CredentialItem
operator|.
name|Password
condition|)
block|{
continue|continue;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|get (URIish uri, CredentialItem... items)
specifier|public
name|boolean
name|get
parameter_list|(
name|URIish
name|uri
parameter_list|,
name|CredentialItem
modifier|...
name|items
parameter_list|)
throws|throws
name|UnsupportedCredentialItem
block|{
name|String
name|username
init|=
name|uri
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|username
operator|==
literal|null
condition|)
block|{
name|username
operator|=
name|cfgUser
expr_stmt|;
block|}
if|if
condition|(
name|username
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|password
init|=
name|uri
operator|.
name|getPass
argument_list|()
decl_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|password
operator|=
name|cfgPass
expr_stmt|;
block|}
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|CredentialItem
name|i
range|:
name|items
control|)
block|{
if|if
condition|(
name|i
operator|instanceof
name|CredentialItem
operator|.
name|Username
condition|)
block|{
operator|(
operator|(
name|CredentialItem
operator|.
name|Username
operator|)
name|i
operator|)
operator|.
name|setValue
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|instanceof
name|CredentialItem
operator|.
name|Password
condition|)
block|{
operator|(
operator|(
name|CredentialItem
operator|.
name|Password
operator|)
name|i
operator|)
operator|.
name|setValue
argument_list|(
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCredentialItem
argument_list|(
name|uri
argument_list|,
name|i
operator|.
name|getPromptText
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

