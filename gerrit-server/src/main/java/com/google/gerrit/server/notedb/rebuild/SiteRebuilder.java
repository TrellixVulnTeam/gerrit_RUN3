begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb.rebuild
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|rebuild
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbUtil
operator|.
name|unwrapDb
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|comparing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|FormatUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|WorkQueue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeBundleReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbUpdateManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|rebuild
operator|.
name|ChangeRebuilder
operator|.
name|NoPatchSetsException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|TextProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** Rebuilder for all changes in a site. */
end_comment

begin_class
DECL|class|SiteRebuilder
specifier|public
class|class
name|SiteRebuilder
implements|implements
name|AutoCloseable
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SiteRebuilder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create ( int threads, @Nullable Collection<Project.NameKey> projects, @Nullable Collection<Change.Id> changes)
name|SiteRebuilder
name|create
parameter_list|(
name|int
name|threads
parameter_list|,
annotation|@
name|Nullable
name|Collection
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projects
parameter_list|,
annotation|@
name|Nullable
name|Collection
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|changes
parameter_list|)
function_decl|;
block|}
DECL|field|schemaFactory
specifier|private
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
decl_stmt|;
DECL|field|updateManagerFactory
specifier|private
specifier|final
name|NoteDbUpdateManager
operator|.
name|Factory
name|updateManagerFactory
decl_stmt|;
DECL|field|rebuilder
specifier|private
specifier|final
name|ChangeRebuilder
name|rebuilder
decl_stmt|;
DECL|field|bundleReader
specifier|private
specifier|final
name|ChangeBundleReader
name|bundleReader
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|ListeningExecutorService
name|executor
decl_stmt|;
DECL|field|projects
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projects
decl_stmt|;
DECL|field|changes
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|changes
decl_stmt|;
annotation|@
name|Inject
DECL|method|SiteRebuilder ( SchemaFactory<ReviewDb> schemaFactory, NoteDbUpdateManager.Factory updateManagerFactory, ChangeRebuilder rebuilder, ChangeBundleReader bundleReader, WorkQueue workQueue, @Assisted int threads, @Assisted @Nullable Collection<Project.NameKey> projects, @Assisted @Nullable Collection<Change.Id> changes)
name|SiteRebuilder
parameter_list|(
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
parameter_list|,
name|NoteDbUpdateManager
operator|.
name|Factory
name|updateManagerFactory
parameter_list|,
name|ChangeRebuilder
name|rebuilder
parameter_list|,
name|ChangeBundleReader
name|bundleReader
parameter_list|,
name|WorkQueue
name|workQueue
parameter_list|,
annotation|@
name|Assisted
name|int
name|threads
parameter_list|,
annotation|@
name|Assisted
annotation|@
name|Nullable
name|Collection
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projects
parameter_list|,
annotation|@
name|Assisted
annotation|@
name|Nullable
name|Collection
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|changes
parameter_list|)
block|{
name|this
operator|.
name|schemaFactory
operator|=
name|schemaFactory
expr_stmt|;
name|this
operator|.
name|updateManagerFactory
operator|=
name|updateManagerFactory
expr_stmt|;
name|this
operator|.
name|rebuilder
operator|=
name|rebuilder
expr_stmt|;
name|this
operator|.
name|bundleReader
operator|=
name|bundleReader
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|threads
operator|>
literal|0
condition|?
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|workQueue
operator|.
name|createQueue
argument_list|(
name|threads
argument_list|,
literal|"RebuildChange"
argument_list|)
argument_list|)
else|:
name|MoreExecutors
operator|.
name|newDirectExecutorService
argument_list|()
expr_stmt|;
name|this
operator|.
name|projects
operator|=
name|projects
operator|!=
literal|null
condition|?
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|projects
argument_list|)
else|:
name|ImmutableList
operator|.
name|of
argument_list|()
expr_stmt|;
name|this
operator|.
name|changes
operator|=
name|changes
operator|!=
literal|null
condition|?
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|changes
argument_list|)
else|:
name|ImmutableList
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
DECL|method|rebuild ()
specifier|public
name|boolean
name|rebuild
parameter_list|()
throws|throws
name|OrmException
block|{
name|boolean
name|ok
decl_stmt|;
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ImmutableListMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|changesByProject
init|=
name|getChangesByProject
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projectNames
init|=
name|Ordering
operator|.
name|usingToString
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|changesByProject
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Project
operator|.
name|NameKey
name|project
range|:
name|projectNames
control|)
block|{
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
init|(
name|ReviewDb
name|db
init|=
name|unwrapDb
argument_list|(
name|schemaFactory
operator|.
name|open
argument_list|()
argument_list|)
init|)
block|{
return|return
name|rebuildProject
argument_list|(
name|db
argument_list|,
name|changesByProject
argument_list|,
name|project
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error rebuilding project "
operator|+
name|project
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ok
operator|=
name|Iterables
operator|.
name|all
argument_list|(
name|Futures
operator|.
name|allAsList
argument_list|(
name|futures
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error rebuilding projects"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|double
name|t
init|=
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|/
literal|1000d
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"Rebuild %d changes in %.01fs (%.01f/s)\n"
argument_list|,
name|changesByProject
operator|.
name|size
argument_list|()
argument_list|,
name|t
argument_list|,
name|changesByProject
operator|.
name|size
argument_list|()
operator|/
name|t
argument_list|)
expr_stmt|;
return|return
name|ok
return|;
block|}
DECL|method|getChangesByProject ()
specifier|private
name|ImmutableListMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|getChangesByProject
parameter_list|()
throws|throws
name|OrmException
block|{
comment|// Memoize all changes so we can close the db connection and allow other threads to use the full
comment|// connection pool.
try|try
init|(
name|ReviewDb
name|db
init|=
name|unwrapDb
argument_list|(
name|schemaFactory
operator|.
name|open
argument_list|()
argument_list|)
init|)
block|{
name|SetMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|out
init|=
name|MultimapBuilder
operator|.
name|treeKeys
argument_list|(
name|comparing
argument_list|(
name|Project
operator|.
name|NameKey
operator|::
name|get
argument_list|)
argument_list|)
operator|.
name|treeSetValues
argument_list|(
name|comparing
argument_list|(
name|Change
operator|.
name|Id
operator|::
name|get
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|projects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|changes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|byProject
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|all
argument_list|()
argument_list|,
name|c
lambda|->
literal|true
argument_list|,
name|out
argument_list|)
return|;
block|}
return|return
name|byProject
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changes
argument_list|)
argument_list|,
name|c
lambda|->
literal|true
argument_list|,
name|out
argument_list|)
return|;
block|}
return|return
name|byProject
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|all
argument_list|()
argument_list|,
name|c
lambda|->
name|changes
operator|.
name|isEmpty
argument_list|()
operator|||
name|changes
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|out
argument_list|)
return|;
block|}
block|}
DECL|method|byProject ( Iterable<Change> changes, Predicate<Change> pred, SetMultimap<Project.NameKey, Change.Id> out)
specifier|private
specifier|static
name|ImmutableListMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|byProject
parameter_list|(
name|Iterable
argument_list|<
name|Change
argument_list|>
name|changes
parameter_list|,
name|Predicate
argument_list|<
name|Change
argument_list|>
name|pred
parameter_list|,
name|SetMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|out
parameter_list|)
block|{
name|Streams
operator|.
name|stream
argument_list|(
name|changes
argument_list|)
operator|.
name|filter
argument_list|(
name|pred
argument_list|)
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|out
operator|.
name|put
argument_list|(
name|c
operator|.
name|getProject
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|out
argument_list|)
return|;
block|}
DECL|method|rebuildProject ( ReviewDb db, ImmutableListMultimap<Project.NameKey, Change.Id> allChanges, Project.NameKey project)
specifier|private
name|boolean
name|rebuildProject
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ImmutableListMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|allChanges
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
block|{
name|checkArgument
argument_list|(
name|allChanges
operator|.
name|containsKey
argument_list|(
name|project
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|true
decl_stmt|;
name|ProgressMonitor
name|pm
init|=
operator|new
name|TextProgressMonitor
argument_list|(
operator|new
name|PrintWriter
argument_list|(
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|pm
operator|.
name|beginTask
argument_list|(
name|FormatUtil
operator|.
name|elide
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|50
argument_list|)
argument_list|,
name|allChanges
operator|.
name|get
argument_list|(
name|project
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|NoteDbUpdateManager
name|manager
init|=
name|updateManagerFactory
operator|.
name|create
argument_list|(
name|project
argument_list|)
init|)
block|{
for|for
control|(
name|Change
operator|.
name|Id
name|changeId
range|:
name|allChanges
operator|.
name|get
argument_list|(
name|project
argument_list|)
control|)
block|{
try|try
block|{
name|rebuilder
operator|.
name|buildUpdates
argument_list|(
name|manager
argument_list|,
name|bundleReader
operator|.
name|fromReviewDb
argument_list|(
name|db
argument_list|,
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoPatchSetsException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to rebuild change "
operator|+
name|changeId
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|pm
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|pm
operator|.
name|endTask
argument_list|()
expr_stmt|;
block|}
return|return
name|ok
return|;
block|}
block|}
end_class

end_unit

