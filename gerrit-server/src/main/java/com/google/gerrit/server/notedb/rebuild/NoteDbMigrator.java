begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb.rebuild
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|rebuild
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbUtil
operator|.
name|unwrapDb
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ConfigNotesMigration
operator|.
name|SECTION_NOTE_DB
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigrationState
operator|.
name|NOTE_DB_UNFUSED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigrationState
operator|.
name|READ_WRITE_NO_SEQUENCE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigrationState
operator|.
name|READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigrationState
operator|.
name|READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigrationState
operator|.
name|WRITE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|comparing
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|FormatUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|Sequences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|LockFailureException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|WorkQueue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ConfigNotesMigration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigrationState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|PrimaryStorageMigrator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|RepoSequence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|rebuild
operator|.
name|ChangeRebuilder
operator|.
name|NoPatchSetsException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|ManualRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|OneOffRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|TextProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|storage
operator|.
name|file
operator|.
name|FileBasedConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|FS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|io
operator|.
name|NullOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** One stop shop for migrating a site's change storage from ReviewDb to NoteDb. */
end_comment

begin_class
DECL|class|NoteDbMigrator
specifier|public
class|class
name|NoteDbMigrator
implements|implements
name|AutoCloseable
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NoteDbMigrator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|AUTO_MIGRATE
specifier|private
specifier|static
specifier|final
name|String
name|AUTO_MIGRATE
init|=
literal|"autoMigrate"
decl_stmt|;
DECL|method|getAutoMigrate (Config cfg)
specifier|public
specifier|static
name|boolean
name|getAutoMigrate
parameter_list|(
name|Config
name|cfg
parameter_list|)
block|{
return|return
name|cfg
operator|.
name|getBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|NoteDbTable
operator|.
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|AUTO_MIGRATE
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|setAutoMigrate (Config cfg, boolean autoMigrate)
specifier|private
specifier|static
name|void
name|setAutoMigrate
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|boolean
name|autoMigrate
parameter_list|)
block|{
name|cfg
operator|.
name|setBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|NoteDbTable
operator|.
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|AUTO_MIGRATE
argument_list|,
name|autoMigrate
argument_list|)
expr_stmt|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|cfg
specifier|private
specifier|final
name|Config
name|cfg
decl_stmt|;
DECL|field|sitePaths
specifier|private
specifier|final
name|SitePaths
name|sitePaths
decl_stmt|;
DECL|field|schemaFactory
specifier|private
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allProjects
specifier|private
specifier|final
name|AllProjectsName
name|allProjects
decl_stmt|;
DECL|field|requestContext
specifier|private
specifier|final
name|OneOffRequestContext
name|requestContext
decl_stmt|;
DECL|field|rebuilder
specifier|private
specifier|final
name|ChangeRebuilder
name|rebuilder
decl_stmt|;
DECL|field|workQueue
specifier|private
specifier|final
name|WorkQueue
name|workQueue
decl_stmt|;
DECL|field|globalNotesMigration
specifier|private
specifier|final
name|NotesMigration
name|globalNotesMigration
decl_stmt|;
DECL|field|primaryStorageMigrator
specifier|private
specifier|final
name|PrimaryStorageMigrator
name|primaryStorageMigrator
decl_stmt|;
DECL|field|threads
specifier|private
name|int
name|threads
decl_stmt|;
DECL|field|projects
specifier|private
name|ImmutableList
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projects
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|changes
specifier|private
name|ImmutableList
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|changes
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|progressOut
specifier|private
name|OutputStream
name|progressOut
init|=
name|NullOutputStream
operator|.
name|INSTANCE
decl_stmt|;
DECL|field|stopAtState
specifier|private
name|NotesMigrationState
name|stopAtState
decl_stmt|;
DECL|field|trial
specifier|private
name|boolean
name|trial
decl_stmt|;
DECL|field|forceRebuild
specifier|private
name|boolean
name|forceRebuild
decl_stmt|;
DECL|field|sequenceGap
specifier|private
name|int
name|sequenceGap
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|autoMigrate
specifier|private
name|boolean
name|autoMigrate
decl_stmt|;
annotation|@
name|Inject
DECL|method|Builder ( @erritServerConfig Config cfg, SitePaths sitePaths, SchemaFactory<ReviewDb> schemaFactory, GitRepositoryManager repoManager, AllProjectsName allProjects, OneOffRequestContext requestContext, ChangeRebuilder rebuilder, WorkQueue workQueue, NotesMigration globalNotesMigration, PrimaryStorageMigrator primaryStorageMigrator)
name|Builder
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|SitePaths
name|sitePaths
parameter_list|,
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllProjectsName
name|allProjects
parameter_list|,
name|OneOffRequestContext
name|requestContext
parameter_list|,
name|ChangeRebuilder
name|rebuilder
parameter_list|,
name|WorkQueue
name|workQueue
parameter_list|,
name|NotesMigration
name|globalNotesMigration
parameter_list|,
name|PrimaryStorageMigrator
name|primaryStorageMigrator
parameter_list|)
block|{
name|this
operator|.
name|cfg
operator|=
name|cfg
expr_stmt|;
name|this
operator|.
name|sitePaths
operator|=
name|sitePaths
expr_stmt|;
name|this
operator|.
name|schemaFactory
operator|=
name|schemaFactory
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allProjects
operator|=
name|allProjects
expr_stmt|;
name|this
operator|.
name|requestContext
operator|=
name|requestContext
expr_stmt|;
name|this
operator|.
name|rebuilder
operator|=
name|rebuilder
expr_stmt|;
name|this
operator|.
name|workQueue
operator|=
name|workQueue
expr_stmt|;
name|this
operator|.
name|globalNotesMigration
operator|=
name|globalNotesMigration
expr_stmt|;
name|this
operator|.
name|primaryStorageMigrator
operator|=
name|primaryStorageMigrator
expr_stmt|;
block|}
comment|/**      * Set the number of threads used by parallelizable phases of the migration, such as rebuilding      * all changes.      *      *<p>Not all phases are parallelizable, and calling {@link #rebuild()} directly will do      * substantial work in the calling thread regardless of the number of threads configured.      *      *<p>By default, all work is done in the calling thread.      *      * @param threads thread count; if less than 2, all work happens in the calling thread.      * @return this.      */
DECL|method|setThreads (int threads)
specifier|public
name|Builder
name|setThreads
parameter_list|(
name|int
name|threads
parameter_list|)
block|{
name|this
operator|.
name|threads
operator|=
name|threads
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Limit the set of projects that are processed.      *      *<p>Incompatible with {@link #setChanges(Collection)}.      *      *<p>By default, all projects will be processed.      *      * @param projects set of projects; if null or empty, all projects will be processed.      * @return this.      */
DECL|method|setProjects (@ullable Collection<Project.NameKey> projects)
specifier|public
name|Builder
name|setProjects
parameter_list|(
annotation|@
name|Nullable
name|Collection
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projects
parameter_list|)
block|{
name|this
operator|.
name|projects
operator|=
name|projects
operator|!=
literal|null
condition|?
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|projects
argument_list|)
else|:
name|ImmutableList
operator|.
name|of
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Limit the set of changes that are processed.      *      *<p>Incompatible with {@link #setProjects(Collection)}.      *      *<p>By default, all changes will be processed.      *      * @param changes set of changes; if null or empty, all changes will be processed.      * @return this.      */
DECL|method|setChanges (@ullable Collection<Change.Id> changes)
specifier|public
name|Builder
name|setChanges
parameter_list|(
annotation|@
name|Nullable
name|Collection
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|changes
parameter_list|)
block|{
name|this
operator|.
name|changes
operator|=
name|changes
operator|!=
literal|null
condition|?
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|changes
argument_list|)
else|:
name|ImmutableList
operator|.
name|of
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set output stream for progress monitors.      *      *<p>By default, there is no progress monitor output (although there may be other logs).      *      * @param progressOut output stream.      * @return this.      */
DECL|method|setProgressOut (OutputStream progressOut)
specifier|public
name|Builder
name|setProgressOut
parameter_list|(
name|OutputStream
name|progressOut
parameter_list|)
block|{
name|this
operator|.
name|progressOut
operator|=
name|checkNotNull
argument_list|(
name|progressOut
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Stop at a specific migration state, for testing only.      *      * @param stopAtState state to stop at.      * @return this.      */
annotation|@
name|VisibleForTesting
DECL|method|setStopAtStateForTesting (NotesMigrationState stopAtState)
specifier|public
name|Builder
name|setStopAtStateForTesting
parameter_list|(
name|NotesMigrationState
name|stopAtState
parameter_list|)
block|{
name|this
operator|.
name|stopAtState
operator|=
name|stopAtState
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Rebuild in "trial mode": configure Gerrit to write to and read from NoteDb, but leave      * ReviewDb as the source of truth for all changes.      *      *<p>By default, trial mode is off, and NoteDb is the source of truth for all changes following      * the migration.      *      * @param trial whether to rebuild in trial mode.      * @return this.      */
DECL|method|setTrialMode (boolean trial)
specifier|public
name|Builder
name|setTrialMode
parameter_list|(
name|boolean
name|trial
parameter_list|)
block|{
name|this
operator|.
name|trial
operator|=
name|trial
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Rebuild all changes in NoteDb from ReviewDb, even if Gerrit is currently configured to read      * from NoteDb.      *      *<p>Only supported if ReviewDb is still the source of truth for all changes.      *      *<p>By default, force rebuilding is off.      *      * @param forceRebuild whether to force rebuilding.      * @return this.      */
DECL|method|setForceRebuild (boolean forceRebuild)
specifier|public
name|Builder
name|setForceRebuild
parameter_list|(
name|boolean
name|forceRebuild
parameter_list|)
block|{
name|this
operator|.
name|forceRebuild
operator|=
name|forceRebuild
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gap between ReviewDb change sequence numbers and NoteDb.      *      *<p>If NoteDb sequences are enabled in a running server, there is a race between the migration      * step that calls {@code nextChangeId()} to seed the ref, and other threads that call {@code      * nextChangeId()} to create new changes. In order to prevent these operations stepping on one      * another, we use this value to skip some predefined sequence numbers. This is strongly      * recommended in a running server.      *      *<p>If the migration takes place offline, there is no race with other threads, and this option      * may be set to 0. However, admins may still choose to use a gap, for example to make it easier      * to distinguish changes that were created before and after the NoteDb migration.      *      *<p>By default, uses the value from {@code noteDb.changes.initialSequenceGap} in {@code      * gerrit.config}, which defaults to 1000.      *      * @param sequenceGap sequence gap size; if negative, use the default.      * @return this.      */
DECL|method|setSequenceGap (int sequenceGap)
specifier|public
name|Builder
name|setSequenceGap
parameter_list|(
name|int
name|sequenceGap
parameter_list|)
block|{
name|this
operator|.
name|sequenceGap
operator|=
name|sequenceGap
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable auto-migration on subsequent daemon launches.      *      *<p>If true, prior to running any migration steps, sets the necessary configuration in {@code      * gerrit.config} to make {@code gerrit.war daemon} retry the migration on next startup, if it      * fails.      *      * @param autoMigrate whether to set auto-migration config.      * @return this.      */
DECL|method|setAutoMigrate (boolean autoMigrate)
specifier|public
name|Builder
name|setAutoMigrate
parameter_list|(
name|boolean
name|autoMigrate
parameter_list|)
block|{
name|this
operator|.
name|autoMigrate
operator|=
name|autoMigrate
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|NoteDbMigrator
name|build
parameter_list|()
throws|throws
name|MigrationException
block|{
return|return
operator|new
name|NoteDbMigrator
argument_list|(
name|sitePaths
argument_list|,
name|schemaFactory
argument_list|,
name|repoManager
argument_list|,
name|allProjects
argument_list|,
name|requestContext
argument_list|,
name|rebuilder
argument_list|,
name|globalNotesMigration
argument_list|,
name|primaryStorageMigrator
argument_list|,
name|threads
operator|>
literal|1
condition|?
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|workQueue
operator|.
name|createQueue
argument_list|(
name|threads
argument_list|,
literal|"RebuildChange"
argument_list|)
argument_list|)
else|:
name|MoreExecutors
operator|.
name|newDirectExecutorService
argument_list|()
argument_list|,
name|projects
argument_list|,
name|changes
argument_list|,
name|progressOut
argument_list|,
name|stopAtState
argument_list|,
name|trial
argument_list|,
name|forceRebuild
argument_list|,
name|sequenceGap
operator|>=
literal|0
condition|?
name|sequenceGap
else|:
name|Sequences
operator|.
name|getChangeSequenceGap
argument_list|(
name|cfg
argument_list|)
argument_list|,
name|autoMigrate
argument_list|)
return|;
block|}
block|}
DECL|field|gerritConfig
specifier|private
specifier|final
name|FileBasedConfig
name|gerritConfig
decl_stmt|;
DECL|field|schemaFactory
specifier|private
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allProjects
specifier|private
specifier|final
name|AllProjectsName
name|allProjects
decl_stmt|;
DECL|field|requestContext
specifier|private
specifier|final
name|OneOffRequestContext
name|requestContext
decl_stmt|;
DECL|field|rebuilder
specifier|private
specifier|final
name|ChangeRebuilder
name|rebuilder
decl_stmt|;
DECL|field|globalNotesMigration
specifier|private
specifier|final
name|NotesMigration
name|globalNotesMigration
decl_stmt|;
DECL|field|primaryStorageMigrator
specifier|private
specifier|final
name|PrimaryStorageMigrator
name|primaryStorageMigrator
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|ListeningExecutorService
name|executor
decl_stmt|;
DECL|field|projects
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projects
decl_stmt|;
DECL|field|changes
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|changes
decl_stmt|;
DECL|field|progressOut
specifier|private
specifier|final
name|OutputStream
name|progressOut
decl_stmt|;
DECL|field|stopAtState
specifier|private
specifier|final
name|NotesMigrationState
name|stopAtState
decl_stmt|;
DECL|field|trial
specifier|private
specifier|final
name|boolean
name|trial
decl_stmt|;
DECL|field|forceRebuild
specifier|private
specifier|final
name|boolean
name|forceRebuild
decl_stmt|;
DECL|field|sequenceGap
specifier|private
specifier|final
name|int
name|sequenceGap
decl_stmt|;
DECL|field|autoMigrate
specifier|private
specifier|final
name|boolean
name|autoMigrate
decl_stmt|;
DECL|method|NoteDbMigrator ( SitePaths sitePaths, SchemaFactory<ReviewDb> schemaFactory, GitRepositoryManager repoManager, AllProjectsName allProjects, OneOffRequestContext requestContext, ChangeRebuilder rebuilder, NotesMigration globalNotesMigration, PrimaryStorageMigrator primaryStorageMigrator, ListeningExecutorService executor, ImmutableList<Project.NameKey> projects, ImmutableList<Change.Id> changes, OutputStream progressOut, NotesMigrationState stopAtState, boolean trial, boolean forceRebuild, int sequenceGap, boolean autoMigrate)
specifier|private
name|NoteDbMigrator
parameter_list|(
name|SitePaths
name|sitePaths
parameter_list|,
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllProjectsName
name|allProjects
parameter_list|,
name|OneOffRequestContext
name|requestContext
parameter_list|,
name|ChangeRebuilder
name|rebuilder
parameter_list|,
name|NotesMigration
name|globalNotesMigration
parameter_list|,
name|PrimaryStorageMigrator
name|primaryStorageMigrator
parameter_list|,
name|ListeningExecutorService
name|executor
parameter_list|,
name|ImmutableList
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projects
parameter_list|,
name|ImmutableList
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|changes
parameter_list|,
name|OutputStream
name|progressOut
parameter_list|,
name|NotesMigrationState
name|stopAtState
parameter_list|,
name|boolean
name|trial
parameter_list|,
name|boolean
name|forceRebuild
parameter_list|,
name|int
name|sequenceGap
parameter_list|,
name|boolean
name|autoMigrate
parameter_list|)
throws|throws
name|MigrationException
block|{
if|if
condition|(
operator|!
name|changes
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|projects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MigrationException
argument_list|(
literal|"Cannot set both changes and projects"
argument_list|)
throw|;
block|}
if|if
condition|(
name|sequenceGap
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|MigrationException
argument_list|(
literal|"Sequence gap must be non-negative: "
operator|+
name|sequenceGap
argument_list|)
throw|;
block|}
name|this
operator|.
name|schemaFactory
operator|=
name|schemaFactory
expr_stmt|;
name|this
operator|.
name|rebuilder
operator|=
name|rebuilder
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allProjects
operator|=
name|allProjects
expr_stmt|;
name|this
operator|.
name|requestContext
operator|=
name|requestContext
expr_stmt|;
name|this
operator|.
name|globalNotesMigration
operator|=
name|globalNotesMigration
expr_stmt|;
name|this
operator|.
name|primaryStorageMigrator
operator|=
name|primaryStorageMigrator
expr_stmt|;
name|this
operator|.
name|gerritConfig
operator|=
operator|new
name|FileBasedConfig
argument_list|(
name|sitePaths
operator|.
name|gerrit_config
operator|.
name|toFile
argument_list|()
argument_list|,
name|FS
operator|.
name|detect
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|projects
operator|=
name|projects
expr_stmt|;
name|this
operator|.
name|changes
operator|=
name|changes
expr_stmt|;
name|this
operator|.
name|progressOut
operator|=
name|progressOut
expr_stmt|;
name|this
operator|.
name|stopAtState
operator|=
name|stopAtState
expr_stmt|;
name|this
operator|.
name|trial
operator|=
name|trial
expr_stmt|;
name|this
operator|.
name|forceRebuild
operator|=
name|forceRebuild
expr_stmt|;
name|this
operator|.
name|sequenceGap
operator|=
name|sequenceGap
expr_stmt|;
name|this
operator|.
name|autoMigrate
operator|=
name|autoMigrate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
DECL|method|migrate ()
specifier|public
name|void
name|migrate
parameter_list|()
throws|throws
name|OrmException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|changes
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|projects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MigrationException
argument_list|(
literal|"Cannot set changes or projects during full migration; call rebuild() instead"
argument_list|)
throw|;
block|}
name|Optional
argument_list|<
name|NotesMigrationState
argument_list|>
name|maybeState
init|=
name|loadState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|maybeState
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MigrationException
argument_list|(
literal|"Could not determine initial migration state"
argument_list|)
throw|;
block|}
name|NotesMigrationState
name|state
init|=
name|maybeState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|trial
operator|&&
name|state
operator|.
name|compareTo
argument_list|(
name|READ_WRITE_NO_SEQUENCE
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|MigrationException
argument_list|(
literal|"Migration has already progressed past the endpoint of the \"trial mode\" state;"
operator|+
literal|" NoteDb is already the primary storage for some changes"
argument_list|)
throw|;
block|}
if|if
condition|(
name|forceRebuild
operator|&&
name|state
operator|.
name|compareTo
argument_list|(
name|READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|MigrationException
argument_list|(
literal|"Cannot force rebuild changes; NoteDb is already the primary storage for some changes"
argument_list|)
throw|;
block|}
if|if
condition|(
name|autoMigrate
condition|)
block|{
if|if
condition|(
name|trial
condition|)
block|{
throw|throw
operator|new
name|MigrationException
argument_list|(
literal|"Auto-migration cannot be used with trial mode"
argument_list|)
throw|;
block|}
name|enableAutoMigrate
argument_list|()
expr_stmt|;
block|}
name|boolean
name|rebuilt
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|state
operator|.
name|compareTo
argument_list|(
name|NOTE_DB_UNFUSED
argument_list|)
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|state
operator|.
name|equals
argument_list|(
name|stopAtState
argument_list|)
condition|)
block|{
return|return;
block|}
name|boolean
name|stillNeedsRebuild
init|=
name|forceRebuild
operator|&&
operator|!
name|rebuilt
decl_stmt|;
if|if
condition|(
name|trial
operator|&&
name|state
operator|.
name|compareTo
argument_list|(
name|READ_WRITE_NO_SEQUENCE
argument_list|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|stillNeedsRebuild
operator|&&
name|state
operator|==
name|READ_WRITE_NO_SEQUENCE
condition|)
block|{
comment|// We're at the end state of trial mode, but still need a rebuild due to forceRebuild. Let
comment|// the loop go one more time.
block|}
else|else
block|{
return|return;
block|}
block|}
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|REVIEW_DB
case|:
name|state
operator|=
name|turnOnWrites
argument_list|(
name|state
argument_list|)
expr_stmt|;
break|break;
case|case
name|WRITE
case|:
name|state
operator|=
name|rebuildAndEnableReads
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|rebuilt
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|READ_WRITE_NO_SEQUENCE
case|:
if|if
condition|(
name|stillNeedsRebuild
condition|)
block|{
name|state
operator|=
name|rebuildAndEnableReads
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|rebuilt
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|enableSequences
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY
case|:
if|if
condition|(
name|stillNeedsRebuild
condition|)
block|{
name|state
operator|=
name|rebuildAndEnableReads
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|rebuilt
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|setNoteDbPrimary
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY
case|:
comment|// The only way we can get here is if there was a failure on a previous run of
comment|// setNoteDbPrimary, since that method moves to NOTE_DB_UNFUSED if it completes
comment|// successfully. Assume that not all changes were converted and re-run the step.
comment|// migrateToNoteDbPrimary is a relatively fast no-op for already-migrated changes, so this
comment|// isn't actually repeating work.
name|state
operator|=
name|setNoteDbPrimary
argument_list|(
name|state
argument_list|)
expr_stmt|;
break|break;
case|case
name|NOTE_DB_UNFUSED
case|:
comment|// Done!
break|break;
case|case
name|NOTE_DB
case|:
comment|// TODO(dborowitz): Allow this state once FileRepository supports fused updates.
comment|// Until then, fallthrough and throw.
default|default:
throw|throw
operator|new
name|MigrationException
argument_list|(
literal|"Migration out of the following state is not supported:\n"
operator|+
name|state
operator|.
name|toText
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|turnOnWrites (NotesMigrationState prev)
specifier|private
name|NotesMigrationState
name|turnOnWrites
parameter_list|(
name|NotesMigrationState
name|prev
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|saveState
argument_list|(
name|prev
argument_list|,
name|WRITE
argument_list|)
return|;
block|}
DECL|method|rebuildAndEnableReads (NotesMigrationState prev)
specifier|private
name|NotesMigrationState
name|rebuildAndEnableReads
parameter_list|(
name|NotesMigrationState
name|prev
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
name|rebuild
argument_list|()
expr_stmt|;
return|return
name|saveState
argument_list|(
name|prev
argument_list|,
name|READ_WRITE_NO_SEQUENCE
argument_list|)
return|;
block|}
DECL|method|enableSequences (NotesMigrationState prev)
specifier|private
name|NotesMigrationState
name|enableSequences
parameter_list|(
name|NotesMigrationState
name|prev
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
try|try
init|(
name|ReviewDb
name|db
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
init|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|RepoSequence
name|seq
init|=
operator|new
name|RepoSequence
argument_list|(
name|repoManager
argument_list|,
name|allProjects
argument_list|,
name|Sequences
operator|.
name|CHANGES
argument_list|,
comment|// If sequenceGap is 0, this writes into the sequence ref the same ID that is returned
comment|// by the call to seq.next() below. If we actually used this as a change ID, that
comment|// would be a problem, but we just discard it, so this is safe.
parameter_list|()
lambda|->
name|db
operator|.
name|nextChangeId
argument_list|()
operator|+
name|sequenceGap
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|seq
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|saveState
argument_list|(
name|prev
argument_list|,
name|READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY
argument_list|)
return|;
block|}
DECL|method|setNoteDbPrimary (NotesMigrationState prev)
specifier|private
name|NotesMigrationState
name|setNoteDbPrimary
parameter_list|(
name|NotesMigrationState
name|prev
parameter_list|)
throws|throws
name|MigrationException
throws|,
name|OrmException
throws|,
name|IOException
block|{
name|checkState
argument_list|(
name|projects
operator|.
name|isEmpty
argument_list|()
operator|&&
name|changes
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Should not have attempted setNoteDbPrimary with a subset of changes"
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|prev
operator|==
name|READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY
operator|||
name|prev
operator|==
name|READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY
argument_list|,
literal|"Unexpected start state for setNoteDbPrimary: %s"
argument_list|,
name|prev
argument_list|)
expr_stmt|;
comment|// Before changing the primary storage of old changes, ensure new changes are created with
comment|// NoteDb primary.
name|prev
operator|=
name|saveState
argument_list|(
name|prev
argument_list|,
name|READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY
argument_list|)
expr_stmt|;
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Setting primary storage to NoteDb"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|allChanges
decl_stmt|;
try|try
init|(
name|ReviewDb
name|db
init|=
name|unwrapDb
argument_list|(
name|schemaFactory
operator|.
name|open
argument_list|()
argument_list|)
init|)
block|{
name|allChanges
operator|=
name|Streams
operator|.
name|stream
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|all
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Change
operator|::
name|getId
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|futures
init|=
name|allChanges
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|id
lambda|->
name|executor
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
comment|// TODO(dborowitz): Avoid reopening db if using a single thread.
block|try (ManualRequestContext ctx
init|=
name|requestContext
operator|.
name|open
argument_list|()
argument_list|)
block|{
name|primaryStorageMigrator
operator|.
name|migrateToNoteDbPrimary
argument_list|(
name|id
argument_list|)
block|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error migrating primary storage for "
operator|+
name|id
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|)
end_class

begin_expr_stmt
unit|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|boolean
name|ok
init|=
name|futuresToBoolean
argument_list|(
name|futures
argument_list|,
literal|"Error migrating primary storage"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|double
name|t
init|=
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|/
literal|1000d
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Migrated primary storage of %d changes in %.01fs (%.01f/s)\n"
argument_list|,
name|allChanges
operator|.
name|size
argument_list|()
argument_list|,
name|t
argument_list|,
name|allChanges
operator|.
name|size
argument_list|()
operator|/
name|t
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|ok
condition|)
block|{
throw|throw
operator|new
name|MigrationException
argument_list|(
literal|"Migrating primary storage for some changes failed, see log"
argument_list|)
throw|;
block|}
end_if

begin_return
return|return
name|disableReviewDb
argument_list|(
name|prev
argument_list|)
return|;
end_return

begin_function
unit|}    private
DECL|method|disableReviewDb (NotesMigrationState prev)
name|NotesMigrationState
name|disableReviewDb
parameter_list|(
name|NotesMigrationState
name|prev
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|saveState
argument_list|(
name|prev
argument_list|,
name|NOTE_DB_UNFUSED
argument_list|,
name|c
lambda|->
name|setAutoMigrate
argument_list|(
name|c
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|loadState ()
specifier|private
name|Optional
argument_list|<
name|NotesMigrationState
argument_list|>
name|loadState
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|gerritConfig
operator|.
name|load
argument_list|()
expr_stmt|;
return|return
name|NotesMigrationState
operator|.
name|forNotesMigration
argument_list|(
operator|new
name|ConfigNotesMigration
argument_list|(
name|gerritConfig
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
decl||
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"error reading NoteDb migration options from "
operator|+
name|gerritConfig
operator|.
name|getFile
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_function

begin_function
DECL|method|saveState ( NotesMigrationState expectedOldState, NotesMigrationState newState)
specifier|private
name|NotesMigrationState
name|saveState
parameter_list|(
name|NotesMigrationState
name|expectedOldState
parameter_list|,
name|NotesMigrationState
name|newState
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|saveState
argument_list|(
name|expectedOldState
argument_list|,
name|newState
argument_list|,
name|c
lambda|->
block|{}
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|saveState ( NotesMigrationState expectedOldState, NotesMigrationState newState, Consumer<Config> additionalUpdates)
specifier|private
name|NotesMigrationState
name|saveState
parameter_list|(
name|NotesMigrationState
name|expectedOldState
parameter_list|,
name|NotesMigrationState
name|newState
parameter_list|,
name|Consumer
argument_list|<
name|Config
argument_list|>
name|additionalUpdates
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|globalNotesMigration
init|)
block|{
comment|// This read-modify-write is racy. We're counting on the fact that no other Gerrit operation
comment|// modifies gerrit.config, and hoping that admins don't either.
name|Optional
argument_list|<
name|NotesMigrationState
argument_list|>
name|actualOldState
init|=
name|loadState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|actualOldState
operator|.
name|equals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|expectedOldState
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MigrationException
argument_list|(
literal|"Cannot move to new state:\n"
operator|+
name|newState
operator|.
name|toText
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"Expected this state in gerrit.config:\n"
operator|+
name|expectedOldState
operator|.
name|toText
argument_list|()
operator|+
literal|"\n\n"
operator|+
operator|(
name|actualOldState
operator|.
name|isPresent
argument_list|()
condition|?
literal|"But found this state:\n"
operator|+
name|actualOldState
operator|.
name|get
argument_list|()
operator|.
name|toText
argument_list|()
else|:
literal|"But could not parse the current state"
operator|)
argument_list|)
throw|;
block|}
name|ConfigNotesMigration
operator|.
name|setConfigValues
argument_list|(
name|gerritConfig
argument_list|,
name|newState
operator|.
name|migration
argument_list|()
argument_list|)
expr_stmt|;
name|additionalUpdates
operator|.
name|accept
argument_list|(
name|gerritConfig
argument_list|)
expr_stmt|;
name|gerritConfig
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// Only set in-memory state once it's been persisted to storage.
name|globalNotesMigration
operator|.
name|setFrom
argument_list|(
name|newState
operator|.
name|migration
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newState
return|;
block|}
block|}
end_function

begin_function
DECL|method|enableAutoMigrate ()
specifier|private
name|void
name|enableAutoMigrate
parameter_list|()
throws|throws
name|MigrationException
block|{
try|try
block|{
name|gerritConfig
operator|.
name|load
argument_list|()
expr_stmt|;
name|setAutoMigrate
argument_list|(
name|gerritConfig
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|gerritConfig
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MigrationException
argument_list|(
literal|"Error saving auto-migration config"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|rebuild ()
specifier|public
name|void
name|rebuild
parameter_list|()
throws|throws
name|MigrationException
throws|,
name|OrmException
block|{
if|if
condition|(
operator|!
name|globalNotesMigration
operator|.
name|commitChangeWrites
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MigrationException
argument_list|(
literal|"Cannot rebuild without noteDb.changes.write=true"
argument_list|)
throw|;
block|}
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Rebuilding changes in NoteDb"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ImmutableListMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|changesByProject
init|=
name|getChangesByProject
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projectNames
init|=
name|Ordering
operator|.
name|usingToString
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|changesByProject
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Project
operator|.
name|NameKey
name|project
range|:
name|projectNames
control|)
block|{
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
init|(
name|ReviewDb
name|db
init|=
name|unwrapDb
argument_list|(
name|schemaFactory
operator|.
name|open
argument_list|()
argument_list|)
init|)
block|{
return|return
name|rebuildProject
argument_list|(
name|db
argument_list|,
name|changesByProject
argument_list|,
name|project
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error rebuilding project "
operator|+
name|project
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
name|boolean
name|ok
init|=
name|futuresToBoolean
argument_list|(
name|futures
argument_list|,
literal|"Error rebuilding projects"
argument_list|)
decl_stmt|;
name|double
name|t
init|=
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|/
literal|1000d
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Rebuilt %d changes in %.01fs (%.01f/s)\n"
argument_list|,
name|changesByProject
operator|.
name|size
argument_list|()
argument_list|,
name|t
argument_list|,
name|changesByProject
operator|.
name|size
argument_list|()
operator|/
name|t
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
throw|throw
operator|new
name|MigrationException
argument_list|(
literal|"Rebuilding some changes failed, see log"
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|getChangesByProject ()
specifier|private
name|ImmutableListMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|getChangesByProject
parameter_list|()
throws|throws
name|OrmException
block|{
comment|// Memoize all changes so we can close the db connection and allow other threads to use the full
comment|// connection pool.
try|try
init|(
name|ReviewDb
name|db
init|=
name|unwrapDb
argument_list|(
name|schemaFactory
operator|.
name|open
argument_list|()
argument_list|)
init|)
block|{
name|SetMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|out
init|=
name|MultimapBuilder
operator|.
name|treeKeys
argument_list|(
name|comparing
argument_list|(
name|Project
operator|.
name|NameKey
operator|::
name|get
argument_list|)
argument_list|)
operator|.
name|treeSetValues
argument_list|(
name|comparing
argument_list|(
name|Change
operator|.
name|Id
operator|::
name|get
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|projects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|byProject
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|all
argument_list|()
argument_list|,
name|c
lambda|->
name|projects
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getProject
argument_list|()
argument_list|)
argument_list|,
name|out
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|changes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|byProject
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changes
argument_list|)
argument_list|,
name|c
lambda|->
literal|true
argument_list|,
name|out
argument_list|)
return|;
block|}
return|return
name|byProject
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|all
argument_list|()
argument_list|,
name|c
lambda|->
literal|true
argument_list|,
name|out
argument_list|)
return|;
block|}
block|}
end_function

begin_function
DECL|method|byProject ( Iterable<Change> changes, Predicate<Change> pred, SetMultimap<Project.NameKey, Change.Id> out)
specifier|private
specifier|static
name|ImmutableListMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|byProject
parameter_list|(
name|Iterable
argument_list|<
name|Change
argument_list|>
name|changes
parameter_list|,
name|Predicate
argument_list|<
name|Change
argument_list|>
name|pred
parameter_list|,
name|SetMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|out
parameter_list|)
block|{
name|Streams
operator|.
name|stream
argument_list|(
name|changes
argument_list|)
operator|.
name|filter
argument_list|(
name|pred
argument_list|)
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|out
operator|.
name|put
argument_list|(
name|c
operator|.
name|getProject
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|out
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|rebuildProject ( ReviewDb db, ImmutableListMultimap<Project.NameKey, Change.Id> allChanges, Project.NameKey project)
specifier|private
name|boolean
name|rebuildProject
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ImmutableListMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|allChanges
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|allChanges
operator|.
name|containsKey
argument_list|(
name|project
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|true
decl_stmt|;
name|ProgressMonitor
name|pm
init|=
operator|new
name|TextProgressMonitor
argument_list|(
operator|new
name|PrintWriter
argument_list|(
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|progressOut
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|pm
operator|.
name|beginTask
argument_list|(
name|FormatUtil
operator|.
name|elide
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|50
argument_list|)
argument_list|,
name|allChanges
operator|.
name|get
argument_list|(
name|project
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Change
operator|.
name|Id
name|changeId
range|:
name|allChanges
operator|.
name|get
argument_list|(
name|project
argument_list|)
control|)
block|{
comment|// Update one change at a time, which ends up creating one NoteDbUpdateManager per change as
comment|// well. This turns out to be no more expensive than batching, since each NoteDb operation
comment|// is only writing single loose ref updates and loose objects. Plus we have to do one
comment|// ReviewDb transaction per change due to the AtomicUpdate, so if we somehow batched NoteDb
comment|// operations, ReviewDb would become the bottleneck.
try|try
block|{
name|rebuilder
operator|.
name|rebuild
argument_list|(
name|db
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoPatchSetsException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConflictingUpdateException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Rebuilding detected a conflicting ReviewDb update for change {};"
operator|+
literal|" will be auto-rebuilt at runtime"
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockFailureException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Rebuilding detected a conflicting NoteDb update for change {};"
operator|+
literal|" will be auto-rebuilt at runtime"
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to rebuild change "
operator|+
name|changeId
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|pm
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|pm
operator|.
name|endTask
argument_list|()
expr_stmt|;
block|}
return|return
name|ok
return|;
block|}
end_function

begin_function
DECL|method|futuresToBoolean (List<ListenableFuture<Boolean>> futures, String errMsg)
specifier|private
specifier|static
name|boolean
name|futuresToBoolean
parameter_list|(
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|futures
parameter_list|,
name|String
name|errMsg
parameter_list|)
block|{
try|try
block|{
return|return
name|Futures
operator|.
name|allAsList
argument_list|(
name|futures
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|b
lambda|->
name|b
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|errMsg
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_function

unit|}
end_unit

