begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|EmailException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RebaseInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestModifyView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|UiAction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchSetUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|UpdateException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|Rebase
specifier|public
class|class
name|Rebase
implements|implements
name|RestModifyView
argument_list|<
name|RevisionResource
argument_list|,
name|RebaseInput
argument_list|>
implements|,
name|UiAction
argument_list|<
name|RevisionResource
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Rebase
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|OPTIONS
specifier|private
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|ListChangesOption
argument_list|>
name|OPTIONS
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|ListChangesOption
operator|.
name|CURRENT_REVISION
argument_list|,
name|ListChangesOption
operator|.
name|CURRENT_COMMIT
argument_list|)
decl_stmt|;
DECL|field|updateFactory
specifier|private
specifier|final
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|rebaseFactory
specifier|private
specifier|final
name|RebaseChangeOp
operator|.
name|Factory
name|rebaseFactory
decl_stmt|;
DECL|field|rebaseUtil
specifier|private
specifier|final
name|RebaseUtil
name|rebaseUtil
decl_stmt|;
DECL|field|json
specifier|private
specifier|final
name|ChangeJson
operator|.
name|Factory
name|json
decl_stmt|;
DECL|field|dbProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|psUtil
specifier|private
specifier|final
name|PatchSetUtil
name|psUtil
decl_stmt|;
annotation|@
name|Inject
DECL|method|Rebase (BatchUpdate.Factory updateFactory, GitRepositoryManager repoManager, RebaseChangeOp.Factory rebaseFactory, RebaseUtil rebaseUtil, ChangeJson.Factory json, Provider<ReviewDb> dbProvider, Provider<InternalChangeQuery> queryProvider, PatchSetUtil psUtil)
specifier|public
name|Rebase
parameter_list|(
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|RebaseChangeOp
operator|.
name|Factory
name|rebaseFactory
parameter_list|,
name|RebaseUtil
name|rebaseUtil
parameter_list|,
name|ChangeJson
operator|.
name|Factory
name|json
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
parameter_list|,
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
name|PatchSetUtil
name|psUtil
parameter_list|)
block|{
name|this
operator|.
name|updateFactory
operator|=
name|updateFactory
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|rebaseFactory
operator|=
name|rebaseFactory
expr_stmt|;
name|this
operator|.
name|rebaseUtil
operator|=
name|rebaseUtil
expr_stmt|;
name|this
operator|.
name|json
operator|=
name|json
expr_stmt|;
name|this
operator|.
name|dbProvider
operator|=
name|dbProvider
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|psUtil
operator|=
name|psUtil
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (RevisionResource rsrc, RebaseInput input)
specifier|public
name|ChangeInfo
name|apply
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|,
name|RebaseInput
name|input
parameter_list|)
throws|throws
name|EmailException
throws|,
name|OrmException
throws|,
name|UpdateException
throws|,
name|RestApiException
throws|,
name|IOException
block|{
name|ChangeControl
name|control
init|=
name|rsrc
operator|.
name|getControl
argument_list|()
decl_stmt|;
name|Change
name|change
init|=
name|rsrc
operator|.
name|getChange
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|;
name|ObjectInserter
name|oi
operator|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|;
name|BatchUpdate
name|bu
operator|=
name|updateFactory
operator|.
name|create
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|,
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getUser
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
init|)
block|{
if|if
condition|(
operator|!
name|control
operator|.
name|canRebase
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"rebase not permitted"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"change is "
operator|+
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|hasOneParent
argument_list|(
name|rw
argument_list|,
name|rsrc
operator|.
name|getPatchSet
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"cannot rebase merge commits or commit with no ancestor"
argument_list|)
throw|;
block|}
name|bu
operator|.
name|setRepository
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|oi
argument_list|)
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|rebaseFactory
operator|.
name|create
argument_list|(
name|control
argument_list|,
name|rsrc
operator|.
name|getPatchSet
argument_list|()
argument_list|,
name|findBaseRev
argument_list|(
name|rw
argument_list|,
name|rsrc
argument_list|,
name|input
argument_list|)
argument_list|)
operator|.
name|setForceContentMerge
argument_list|(
literal|true
argument_list|)
operator|.
name|setRunHooks
argument_list|(
literal|true
argument_list|)
operator|.
name|setValidatePolicy
argument_list|(
name|CommitValidators
operator|.
name|Policy
operator|.
name|GERRIT
argument_list|)
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
return|return
name|json
operator|.
name|create
argument_list|(
name|OPTIONS
argument_list|)
operator|.
name|format
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|findBaseRev (RevWalk rw, RevisionResource rsrc, RebaseInput input)
specifier|private
name|String
name|findBaseRev
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|RevisionResource
name|rsrc
parameter_list|,
name|RebaseInput
name|input
parameter_list|)
throws|throws
name|AuthException
throws|,
name|ResourceConflictException
throws|,
name|OrmException
throws|,
name|IOException
block|{
if|if
condition|(
name|input
operator|==
literal|null
operator|||
name|input
operator|.
name|base
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Change
name|change
init|=
name|rsrc
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|String
name|str
init|=
name|input
operator|.
name|base
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// remove existing dependency to other patch set
return|return
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|ReviewDb
name|db
init|=
name|dbProvider
operator|.
name|get
argument_list|()
decl_stmt|;
name|Base
name|base
init|=
name|parseBase
argument_list|(
name|rsrc
argument_list|,
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"base revision is missing: "
operator|+
name|str
argument_list|)
throw|;
block|}
name|PatchSet
operator|.
name|Id
name|baseId
init|=
name|base
operator|.
name|patchSet
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|base
operator|.
name|control
argument_list|()
operator|.
name|isPatchVisible
argument_list|(
name|base
operator|.
name|patchSet
argument_list|()
argument_list|,
name|db
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"base revision not accessible: "
operator|+
name|str
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|change
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|baseId
operator|.
name|getParentKey
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"cannot depend on self"
argument_list|)
throw|;
block|}
name|Change
name|baseChange
init|=
name|base
operator|.
name|control
argument_list|()
operator|.
name|getChange
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|baseChange
operator|.
name|getProject
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"base change is in wrong project: "
operator|+
name|baseChange
operator|.
name|getProject
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|baseChange
operator|.
name|getDest
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"base change is targeting wrong branch: "
operator|+
name|baseChange
operator|.
name|getDest
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|baseChange
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|ABANDONED
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"base change is abandoned: "
operator|+
name|baseChange
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|isMergedInto
argument_list|(
name|rw
argument_list|,
name|rsrc
operator|.
name|getPatchSet
argument_list|()
argument_list|,
name|base
operator|.
name|patchSet
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"base change "
operator|+
name|baseChange
operator|.
name|getKey
argument_list|()
operator|+
literal|" is a descendant of the current  change - recursion not allowed"
argument_list|)
throw|;
block|}
return|return
name|base
operator|.
name|patchSet
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|isMergedInto (RevWalk rw, PatchSet base, PatchSet tip)
specifier|private
name|boolean
name|isMergedInto
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|PatchSet
name|base
parameter_list|,
name|PatchSet
name|tip
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectId
name|baseId
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|base
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectId
name|tipId
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|tip
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|rw
operator|.
name|isMergedInto
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|baseId
argument_list|)
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|tipId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|AutoValue
DECL|class|Base
specifier|static
specifier|abstract
class|class
name|Base
block|{
DECL|method|create (ChangeControl ctl, PatchSet ps)
specifier|private
specifier|static
name|Base
name|create
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|,
name|PatchSet
name|ps
parameter_list|)
block|{
if|if
condition|(
name|ctl
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|AutoValue_Rebase_Base
argument_list|(
name|ctl
argument_list|,
name|ps
argument_list|)
return|;
block|}
DECL|method|control ()
specifier|abstract
name|ChangeControl
name|control
parameter_list|()
function_decl|;
DECL|method|patchSet ()
specifier|abstract
name|PatchSet
name|patchSet
parameter_list|()
function_decl|;
block|}
DECL|method|parseBase (RevisionResource rsrc, String base)
specifier|private
name|Base
name|parseBase
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|,
name|String
name|base
parameter_list|)
throws|throws
name|OrmException
block|{
name|ReviewDb
name|db
init|=
name|dbProvider
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Try parsing the base as a ref string.
name|PatchSet
operator|.
name|Id
name|basePatchSetId
init|=
name|PatchSet
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|basePatchSetId
operator|!=
literal|null
condition|)
block|{
return|return
name|Base
operator|.
name|create
argument_list|(
name|controlFor
argument_list|(
name|rsrc
argument_list|,
name|basePatchSetId
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|,
name|psUtil
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|rsrc
operator|.
name|getNotes
argument_list|()
argument_list|,
name|basePatchSetId
argument_list|)
argument_list|)
return|;
block|}
comment|// Try parsing base as a change number (assume current patch set).
name|Integer
name|baseChangeId
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseChangeId
operator|!=
literal|null
condition|)
block|{
name|ChangeControl
name|baseCtl
init|=
name|controlFor
argument_list|(
name|rsrc
argument_list|,
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|baseChangeId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseCtl
operator|!=
literal|null
condition|)
block|{
return|return
name|Base
operator|.
name|create
argument_list|(
name|baseCtl
argument_list|,
name|psUtil
operator|.
name|current
argument_list|(
name|db
argument_list|,
name|baseCtl
operator|.
name|getNotes
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// Try parsing as SHA-1.
name|Base
name|ret
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byProjectCommit
argument_list|(
name|rsrc
operator|.
name|getProject
argument_list|()
argument_list|,
name|base
argument_list|)
control|)
block|{
for|for
control|(
name|PatchSet
name|ps
range|:
name|cd
operator|.
name|patchSets
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|matches
argument_list|(
name|base
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|ret
operator|==
literal|null
operator|||
name|ret
operator|.
name|patchSet
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
operator|<
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
name|ret
operator|=
name|Base
operator|.
name|create
argument_list|(
name|rsrc
operator|.
name|getControl
argument_list|()
operator|.
name|getProjectControl
argument_list|()
operator|.
name|controlFor
argument_list|(
name|cd
operator|.
name|change
argument_list|()
argument_list|)
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
DECL|method|controlFor (RevisionResource rsrc, Change.Id id)
specifier|private
name|ChangeControl
name|controlFor
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|,
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|c
init|=
name|dbProvider
operator|.
name|get
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|rsrc
operator|.
name|getControl
argument_list|()
operator|.
name|getProjectControl
argument_list|()
operator|.
name|controlFor
argument_list|(
name|c
argument_list|)
return|;
block|}
DECL|method|hasOneParent (RevWalk rw, PatchSet ps)
specifier|private
name|boolean
name|hasOneParent
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|PatchSet
name|ps
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Prevent rebase of exotic changes (merge commit, no ancestor).
name|RevCommit
name|c
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|c
operator|.
name|getParentCount
argument_list|()
operator|==
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription (RevisionResource resource)
specifier|public
name|UiAction
operator|.
name|Description
name|getDescription
parameter_list|(
name|RevisionResource
name|resource
parameter_list|)
block|{
name|PatchSet
name|patchSet
init|=
name|resource
operator|.
name|getPatchSet
argument_list|()
decl_stmt|;
name|Branch
operator|.
name|NameKey
name|dest
init|=
name|resource
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
decl_stmt|;
name|boolean
name|canRebase
init|=
literal|false
decl_stmt|;
try|try
block|{
name|canRebase
operator|=
name|resource
operator|.
name|getControl
argument_list|()
operator|.
name|canRebase
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot check canRebase status. Assuming false."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|boolean
name|visible
init|=
name|resource
operator|.
name|getChange
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
operator|&&
name|resource
operator|.
name|isCurrent
argument_list|()
operator|&&
name|canRebase
decl_stmt|;
name|boolean
name|enabled
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|visible
condition|)
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|dest
operator|.
name|getParentKey
argument_list|()
argument_list|)
init|;           RevWalk rw = new RevWalk(repo)
block|)
block|{
name|visible
operator|=
name|hasOneParent
argument_list|(
name|rw
argument_list|,
name|resource
operator|.
name|getPatchSet
argument_list|()
argument_list|)
expr_stmt|;
name|enabled
operator|=
name|rebaseUtil
operator|.
name|canRebase
argument_list|(
name|patchSet
argument_list|,
name|dest
argument_list|,
name|repo
argument_list|,
name|rw
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to check if patch set can be rebased: "
operator|+
name|resource
operator|.
name|getPatchSet
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|visible
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|UiAction
operator|.
name|Description
name|descr
init|=
operator|new
name|UiAction
operator|.
name|Description
argument_list|()
operator|.
name|setLabel
argument_list|(
literal|"Rebase"
argument_list|)
operator|.
name|setTitle
argument_list|(
literal|"Rebase onto tip of branch or parent change"
argument_list|)
operator|.
name|setVisible
argument_list|(
name|visible
argument_list|)
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
decl_stmt|;
return|return
name|descr
return|;
block|}
end_class

begin_class
DECL|class|CurrentRevision
specifier|public
specifier|static
class|class
name|CurrentRevision
implements|implements
name|RestModifyView
argument_list|<
name|ChangeResource
argument_list|,
name|RebaseInput
argument_list|>
block|{
DECL|field|rebase
specifier|private
specifier|final
name|Rebase
name|rebase
decl_stmt|;
annotation|@
name|Inject
DECL|method|CurrentRevision (Rebase rebase)
name|CurrentRevision
parameter_list|(
name|Rebase
name|rebase
parameter_list|)
block|{
name|this
operator|.
name|rebase
operator|=
name|rebase
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeResource rsrc, RebaseInput input)
specifier|public
name|ChangeInfo
name|apply
parameter_list|(
name|ChangeResource
name|rsrc
parameter_list|,
name|RebaseInput
name|input
parameter_list|)
throws|throws
name|EmailException
throws|,
name|OrmException
throws|,
name|UpdateException
throws|,
name|RestApiException
throws|,
name|IOException
block|{
name|PatchSet
name|ps
init|=
name|rebase
operator|.
name|dbProvider
operator|.
name|get
argument_list|()
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|rsrc
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"current revision is missing"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|rsrc
operator|.
name|getControl
argument_list|()
operator|.
name|isPatchVisible
argument_list|(
name|ps
argument_list|,
name|rebase
operator|.
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"current revision not accessible"
argument_list|)
throw|;
block|}
return|return
name|rebase
operator|.
name|apply
argument_list|(
operator|new
name|RevisionResource
argument_list|(
name|rsrc
argument_list|,
name|ps
argument_list|)
argument_list|,
name|input
argument_list|)
return|;
block|}
block|}
end_class

unit|}
end_unit

