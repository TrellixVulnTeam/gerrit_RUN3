begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.group
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|MethodNotAllowedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestModifyView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|PostMembers
class|class
name|PostMembers
implements|implements
name|RestModifyView
argument_list|<
name|GroupResource
argument_list|,
name|PostMembers
operator|.
name|Input
argument_list|>
block|{
DECL|enum|Method
specifier|static
enum|enum
name|Method
block|{
DECL|enumConstant|PUT
DECL|enumConstant|DELETE
name|PUT
block|,
name|DELETE
block|;   }
DECL|class|Input
specifier|static
class|class
name|Input
block|{
DECL|field|method
name|Method
name|method
init|=
name|Method
operator|.
name|PUT
decl_stmt|;
DECL|field|members
name|List
argument_list|<
name|String
argument_list|>
name|members
decl_stmt|;
DECL|method|init (Input in)
specifier|static
name|Input
name|init
parameter_list|(
name|Input
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|in
operator|=
operator|new
name|Input
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|members
operator|==
literal|null
condition|)
block|{
name|in
operator|.
name|members
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|in
return|;
block|}
block|}
DECL|field|put
specifier|private
specifier|final
name|Provider
argument_list|<
name|PutMembers
argument_list|>
name|put
decl_stmt|;
DECL|field|delete
specifier|private
specifier|final
name|Provider
argument_list|<
name|DeleteMembers
argument_list|>
name|delete
decl_stmt|;
annotation|@
name|Inject
DECL|method|PostMembers (Provider<PutMembers> put, Provider<DeleteMembers> delete)
name|PostMembers
parameter_list|(
name|Provider
argument_list|<
name|PutMembers
argument_list|>
name|put
parameter_list|,
name|Provider
argument_list|<
name|DeleteMembers
argument_list|>
name|delete
parameter_list|)
block|{
name|this
operator|.
name|put
operator|=
name|put
expr_stmt|;
name|this
operator|.
name|delete
operator|=
name|delete
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|inputType ()
specifier|public
name|Class
argument_list|<
name|Input
argument_list|>
name|inputType
parameter_list|()
block|{
return|return
name|Input
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|apply (GroupResource resource, Input input)
specifier|public
name|Object
name|apply
parameter_list|(
name|GroupResource
name|resource
parameter_list|,
name|Input
name|input
parameter_list|)
throws|throws
name|AuthException
throws|,
name|MethodNotAllowedException
throws|,
name|BadRequestException
throws|,
name|OrmException
block|{
name|input
operator|=
name|Input
operator|.
name|init
argument_list|(
name|input
argument_list|)
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|method
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"invalid method"
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|input
operator|.
name|method
condition|)
block|{
case|case
name|PUT
case|:
return|return
name|put
operator|.
name|get
argument_list|()
operator|.
name|apply
argument_list|(
name|resource
argument_list|,
name|cast
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
case|case
name|DELETE
case|:
return|return
name|delete
operator|.
name|get
argument_list|()
operator|.
name|apply
argument_list|(
name|resource
argument_list|,
name|cast
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"invalid method"
argument_list|)
throw|;
block|}
block|}
DECL|method|cast (Input input)
specifier|private
specifier|static
name|PutMembers
operator|.
name|Input
name|cast
parameter_list|(
name|Input
name|input
parameter_list|)
block|{
name|PutMembers
operator|.
name|Input
name|r
init|=
operator|new
name|PutMembers
operator|.
name|Input
argument_list|()
decl_stmt|;
name|r
operator|.
name|members
operator|=
name|input
operator|.
name|members
expr_stmt|;
return|return
name|r
return|;
block|}
block|}
end_class

end_unit

