begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb.rebuild
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|rebuild
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|ToStringHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|ChangeMessageEvent
class|class
name|ChangeMessageEvent
extends|extends
name|Event
block|{
DECL|field|STATUS_PATTERNS
specifier|private
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|Change
operator|.
name|Status
argument_list|,
name|Pattern
argument_list|>
name|STATUS_PATTERNS
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Abandoned(\n.*)*$"
argument_list|)
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Change has been successfully (merged|cherry-picked|rebased|pushed).*$"
argument_list|)
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Restored(\n.*)*$"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|PRIVATE_SET_REGEXP
specifier|private
specifier|static
specifier|final
name|Pattern
name|PRIVATE_SET_REGEXP
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Set private$"
argument_list|)
decl_stmt|;
DECL|field|PRIVATE_UNSET_REGEXP
specifier|private
specifier|static
specifier|final
name|Pattern
name|PRIVATE_UNSET_REGEXP
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Unset private$"
argument_list|)
decl_stmt|;
DECL|field|TOPIC_SET_REGEXP
specifier|private
specifier|static
specifier|final
name|Pattern
name|TOPIC_SET_REGEXP
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Topic set to (.+)$"
argument_list|)
decl_stmt|;
DECL|field|TOPIC_CHANGED_REGEXP
specifier|private
specifier|static
specifier|final
name|Pattern
name|TOPIC_CHANGED_REGEXP
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Topic changed from (.+) to (.+)$"
argument_list|)
decl_stmt|;
DECL|field|TOPIC_REMOVED_REGEXP
specifier|private
specifier|static
specifier|final
name|Pattern
name|TOPIC_REMOVED_REGEXP
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Topic (.+) removed$"
argument_list|)
decl_stmt|;
DECL|field|WIP_SET_REGEXP
specifier|private
specifier|static
specifier|final
name|Pattern
name|WIP_SET_REGEXP
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Set Work In Progress$"
argument_list|)
decl_stmt|;
DECL|field|WIP_UNSET_REGEXP
specifier|private
specifier|static
specifier|final
name|Pattern
name|WIP_UNSET_REGEXP
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Set Ready For Review$"
argument_list|)
decl_stmt|;
DECL|field|change
specifier|private
specifier|final
name|Change
name|change
decl_stmt|;
DECL|field|noteDbChange
specifier|private
specifier|final
name|Change
name|noteDbChange
decl_stmt|;
DECL|field|status
specifier|private
specifier|final
name|Optional
argument_list|<
name|Change
operator|.
name|Status
argument_list|>
name|status
decl_stmt|;
DECL|field|message
specifier|private
specifier|final
name|ChangeMessage
name|message
decl_stmt|;
DECL|method|ChangeMessageEvent ( Change change, Change noteDbChange, ChangeMessage message, Timestamp changeCreatedOn)
name|ChangeMessageEvent
parameter_list|(
name|Change
name|change
parameter_list|,
name|Change
name|noteDbChange
parameter_list|,
name|ChangeMessage
name|message
parameter_list|,
name|Timestamp
name|changeCreatedOn
parameter_list|)
block|{
name|super
argument_list|(
name|message
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|message
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|message
operator|.
name|getRealAuthor
argument_list|()
argument_list|,
name|message
operator|.
name|getWrittenOn
argument_list|()
argument_list|,
name|changeCreatedOn
argument_list|,
name|message
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|change
operator|=
name|change
expr_stmt|;
name|this
operator|.
name|noteDbChange
operator|=
name|noteDbChange
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|parseStatus
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uniquePerUpdate ()
name|boolean
name|uniquePerUpdate
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|isSubmit ()
specifier|protected
name|boolean
name|isSubmit
parameter_list|()
block|{
return|return
name|status
operator|.
name|isPresent
argument_list|()
operator|&&
name|status
operator|.
name|get
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|MERGED
return|;
block|}
annotation|@
name|Override
DECL|method|canHaveTag ()
specifier|protected
name|boolean
name|canHaveTag
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|apply (ChangeUpdate update)
name|void
name|apply
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|)
throws|throws
name|OrmException
block|{
name|checkUpdate
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|update
operator|.
name|setChangeMessage
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|setPrivate
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|setTopic
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|setWorkInProgress
argument_list|(
name|update
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Change
operator|.
name|Status
name|s
init|=
name|status
operator|.
name|get
argument_list|()
decl_stmt|;
name|update
operator|.
name|fixStatus
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|noteDbChange
operator|.
name|setStatus
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|==
name|Change
operator|.
name|Status
operator|.
name|MERGED
condition|)
block|{
name|update
operator|.
name|setSubmissionId
argument_list|(
name|change
operator|.
name|getSubmissionId
argument_list|()
argument_list|)
expr_stmt|;
name|noteDbChange
operator|.
name|setSubmissionId
argument_list|(
name|change
operator|.
name|getSubmissionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseStatus (ChangeMessage message)
specifier|private
specifier|static
name|Optional
argument_list|<
name|Change
operator|.
name|Status
argument_list|>
name|parseStatus
parameter_list|(
name|ChangeMessage
name|message
parameter_list|)
block|{
name|String
name|msg
init|=
name|message
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Change
operator|.
name|Status
argument_list|,
name|Pattern
argument_list|>
name|e
range|:
name|STATUS_PATTERNS
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|matcher
argument_list|(
name|msg
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|setPrivate (ChangeUpdate update)
specifier|private
name|void
name|setPrivate
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|)
block|{
name|String
name|msg
init|=
name|message
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Matcher
name|m
init|=
name|PRIVATE_SET_REGEXP
operator|.
name|matcher
argument_list|(
name|msg
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|update
operator|.
name|setPrivate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|noteDbChange
operator|.
name|setPrivate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
name|m
operator|=
name|PRIVATE_UNSET_REGEXP
operator|.
name|matcher
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|update
operator|.
name|setPrivate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|noteDbChange
operator|.
name|setPrivate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setTopic (ChangeUpdate update)
specifier|private
name|void
name|setTopic
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|)
block|{
name|String
name|msg
init|=
name|message
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Matcher
name|m
init|=
name|TOPIC_SET_REGEXP
operator|.
name|matcher
argument_list|(
name|msg
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|topic
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|update
operator|.
name|setTopic
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|noteDbChange
operator|.
name|setTopic
argument_list|(
name|topic
argument_list|)
expr_stmt|;
return|return;
block|}
name|m
operator|=
name|TOPIC_CHANGED_REGEXP
operator|.
name|matcher
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|topic
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|update
operator|.
name|setTopic
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|noteDbChange
operator|.
name|setTopic
argument_list|(
name|topic
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|TOPIC_REMOVED_REGEXP
operator|.
name|matcher
argument_list|(
name|msg
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|update
operator|.
name|setTopic
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|noteDbChange
operator|.
name|setTopic
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setWorkInProgress (ChangeUpdate update)
specifier|private
name|void
name|setWorkInProgress
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|)
block|{
name|String
name|msg
init|=
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tag
init|=
name|message
operator|.
name|getTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|ChangeMessagesUtil
operator|.
name|TAG_SET_WIP
operator|.
name|equals
argument_list|(
name|tag
argument_list|)
operator|||
name|ChangeMessagesUtil
operator|.
name|TAG_UPLOADED_WIP_PATCH_SET
operator|.
name|equals
argument_list|(
name|tag
argument_list|)
operator|||
name|WIP_SET_REGEXP
operator|.
name|matcher
argument_list|(
name|msg
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|update
operator|.
name|setWorkInProgress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|noteDbChange
operator|.
name|setWorkInProgress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ChangeMessagesUtil
operator|.
name|TAG_SET_READY
operator|.
name|equals
argument_list|(
name|tag
argument_list|)
operator|||
name|ChangeMessagesUtil
operator|.
name|TAG_UPLOADED_PATCH_SET
operator|.
name|equals
argument_list|(
name|tag
argument_list|)
operator|||
name|WIP_UNSET_REGEXP
operator|.
name|matcher
argument_list|(
name|msg
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|update
operator|.
name|setWorkInProgress
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|noteDbChange
operator|.
name|setWorkInProgress
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addToString (ToStringHelper helper)
specifier|protected
name|void
name|addToString
parameter_list|(
name|ToStringHelper
name|helper
parameter_list|)
block|{
name|helper
operator|.
name|add
argument_list|(
literal|"message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

