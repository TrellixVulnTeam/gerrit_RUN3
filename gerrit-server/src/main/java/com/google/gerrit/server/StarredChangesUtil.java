begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|StarredChange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|ListResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BatchRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|NullProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|StarredChangesUtil
specifier|public
class|class
name|StarredChangesUtil
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StarredChangesUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsers
specifier|private
specifier|final
name|AllUsersName
name|allUsers
decl_stmt|;
DECL|field|migration
specifier|private
specifier|final
name|NotesMigration
name|migration
decl_stmt|;
DECL|field|dbProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|PersonIdent
name|serverIdent
decl_stmt|;
annotation|@
name|Inject
DECL|method|StarredChangesUtil (GitRepositoryManager repoManager, AllUsersName allUsers, NotesMigration migration, Provider<ReviewDb> dbProvider, @GerritPersonIdent PersonIdent serverIdent)
name|StarredChangesUtil
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsers
parameter_list|,
name|NotesMigration
name|migration
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverIdent
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsers
operator|=
name|allUsers
expr_stmt|;
name|this
operator|.
name|migration
operator|=
name|migration
expr_stmt|;
name|this
operator|.
name|dbProvider
operator|=
name|dbProvider
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
block|}
DECL|method|star (Account.Id accountId, Change.Id changeId)
specifier|public
name|void
name|star
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
block|{
name|dbProvider
operator|.
name|get
argument_list|()
operator|.
name|starredChanges
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|StarredChange
argument_list|(
operator|new
name|StarredChange
operator|.
name|Key
argument_list|(
name|accountId
argument_list|,
name|changeId
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|migration
operator|.
name|writeAccounts
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openMetadataRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RefUpdate
name|u
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|RefNames
operator|.
name|refsStarredChanges
argument_list|(
name|accountId
argument_list|,
name|changeId
argument_list|)
argument_list|)
decl_stmt|;
name|u
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|u
operator|.
name|setNewObjectId
argument_list|(
name|emptyTree
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
name|u
operator|.
name|setRefLogIdent
argument_list|(
name|serverIdent
argument_list|)
expr_stmt|;
name|u
operator|.
name|setRefLogMessage
argument_list|(
literal|"Star change "
operator|+
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|RefUpdate
operator|.
name|Result
name|result
init|=
name|u
operator|.
name|update
argument_list|(
name|rw
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|NEW
case|:
return|return;
case|case
name|FAST_FORWARD
case|:
case|case
name|FORCED
case|:
case|case
name|IO_FAILURE
case|:
case|case
name|LOCK_FAILURE
case|:
case|case
name|NOT_ATTEMPTED
case|:
case|case
name|NO_CHANGE
case|:
case|case
name|REJECTED
case|:
case|case
name|REJECTED_CURRENT_BRANCH
case|:
case|case
name|RENAMED
case|:
default|default:
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Star change %d for account %d failed: %s"
argument_list|,
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|accountId
operator|.
name|get
argument_list|()
argument_list|,
name|result
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Star change %d for account %d failed"
argument_list|,
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|emptyTree (Repository repo)
specifier|private
specifier|static
name|ObjectId
name|emptyTree
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ObjectInserter
name|oi
init|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
name|ObjectId
name|id
init|=
name|oi
operator|.
name|insert
argument_list|(
name|Constants
operator|.
name|OBJ_TREE
argument_list|,
operator|new
name|byte
index|[]
block|{}
argument_list|)
decl_stmt|;
name|oi
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|id
return|;
block|}
block|}
DECL|method|unstar (Account.Id accountId, Change.Id changeId)
specifier|public
name|void
name|unstar
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
block|{
name|dbProvider
operator|.
name|get
argument_list|()
operator|.
name|starredChanges
argument_list|()
operator|.
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|StarredChange
argument_list|(
operator|new
name|StarredChange
operator|.
name|Key
argument_list|(
name|accountId
argument_list|,
name|changeId
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|migration
operator|.
name|writeAccounts
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openMetadataRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RefUpdate
name|u
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|RefNames
operator|.
name|refsStarredChanges
argument_list|(
name|accountId
argument_list|,
name|changeId
argument_list|)
argument_list|)
decl_stmt|;
name|u
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|u
operator|.
name|setRefLogIdent
argument_list|(
name|serverIdent
argument_list|)
expr_stmt|;
name|u
operator|.
name|setRefLogMessage
argument_list|(
literal|"Unstar change "
operator|+
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RefUpdate
operator|.
name|Result
name|result
init|=
name|u
operator|.
name|delete
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|FORCED
case|:
return|return;
case|case
name|FAST_FORWARD
case|:
case|case
name|IO_FAILURE
case|:
case|case
name|LOCK_FAILURE
case|:
case|case
name|NEW
case|:
case|case
name|NOT_ATTEMPTED
case|:
case|case
name|NO_CHANGE
case|:
case|case
name|REJECTED
case|:
case|case
name|REJECTED_CURRENT_BRANCH
case|:
case|case
name|RENAMED
case|:
default|default:
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unstar change %d for account %d failed: %s"
argument_list|,
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|accountId
operator|.
name|get
argument_list|()
argument_list|,
name|result
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unstar change %d for account %d failed"
argument_list|,
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|unstarAll (Change.Id changeId)
specifier|public
name|void
name|unstarAll
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
block|{
name|dbProvider
operator|.
name|get
argument_list|()
operator|.
name|starredChanges
argument_list|()
operator|.
name|delete
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
operator|.
name|starredChanges
argument_list|()
operator|.
name|byChange
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|migration
operator|.
name|writeAccounts
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openMetadataRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|BatchRefUpdate
name|batchUpdate
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|newBatchUpdate
argument_list|()
decl_stmt|;
name|batchUpdate
operator|.
name|setAllowNonFastForwards
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|batchUpdate
operator|.
name|setRefLogIdent
argument_list|(
name|serverIdent
argument_list|)
expr_stmt|;
name|batchUpdate
operator|.
name|setRefLogMessage
argument_list|(
literal|"Unstar change "
operator|+
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|accountId
range|:
name|byChange
argument_list|(
name|changeId
argument_list|)
control|)
block|{
name|String
name|refName
init|=
name|RefNames
operator|.
name|refsStarredChanges
argument_list|(
name|accountId
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
name|Ref
name|ref
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|batchUpdate
operator|.
name|addCommand
argument_list|(
operator|new
name|ReceiveCommand
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|refName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|batchUpdate
operator|.
name|execute
argument_list|(
name|rw
argument_list|,
name|NullProgressMonitor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
for|for
control|(
name|ReceiveCommand
name|command
range|:
name|batchUpdate
operator|.
name|getCommands
argument_list|()
control|)
block|{
if|if
condition|(
name|command
operator|.
name|getResult
argument_list|()
operator|!=
name|ReceiveCommand
operator|.
name|Result
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unstar change %d failed, ref %s could not be deleted: %s"
argument_list|,
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|command
operator|.
name|getRefName
argument_list|()
argument_list|,
name|command
operator|.
name|getResult
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unstar change %d failed"
argument_list|,
name|changeId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|byChange (final Change.Id changeId)
specifier|public
name|Iterable
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|byChange
parameter_list|(
specifier|final
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
operator|!
name|migration
operator|.
name|readAccounts
argument_list|()
condition|)
block|{
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
operator|.
name|starredChanges
argument_list|()
operator|.
name|byChange
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|Function
argument_list|<
name|StarredChange
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Account
operator|.
name|Id
name|apply
parameter_list|(
name|StarredChange
name|in
parameter_list|)
block|{
return|return
name|in
operator|.
name|getAccountId
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|getRefNames
argument_list|(
name|RefNames
operator|.
name|REFS_STARRED_CHANGES
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|refPart
parameter_list|)
block|{
return|return
name|refPart
operator|.
name|endsWith
argument_list|(
literal|"/"
operator|+
name|changeId
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Account
operator|.
name|Id
name|apply
parameter_list|(
name|String
name|refPart
parameter_list|)
block|{
return|return
name|Account
operator|.
name|Id
operator|.
name|fromRefPart
argument_list|(
name|refPart
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|query (Account.Id accountId)
specifier|public
name|ResultSet
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|query
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|migration
operator|.
name|readAccounts
argument_list|()
condition|)
block|{
return|return
operator|new
name|ChangeIdResultSet
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
operator|.
name|starredChanges
argument_list|()
operator|.
name|byAccount
argument_list|(
name|accountId
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|new
name|ListResultSet
argument_list|<>
argument_list|(
name|FluentIterable
operator|.
name|from
argument_list|(
name|getRefNames
argument_list|(
name|RefNames
operator|.
name|refsStarredChangesPrefix
argument_list|(
name|accountId
argument_list|)
argument_list|)
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
operator|.
name|Id
name|apply
parameter_list|(
name|String
name|changeId
parameter_list|)
block|{
return|return
name|Change
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|changeId
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
decl||
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot query starred changes for account %d"
argument_list|,
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|empty
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
return|return
operator|new
name|ListResultSet
argument_list|<>
argument_list|(
name|empty
argument_list|)
return|;
block|}
block|}
DECL|method|getRefNames (String prefix)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getRefNames
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openMetadataRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|RefDatabase
name|refDb
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
decl_stmt|;
return|return
name|refDb
operator|.
name|getRefs
argument_list|(
name|prefix
argument_list|)
operator|.
name|keySet
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|class|ChangeIdResultSet
specifier|private
specifier|static
class|class
name|ChangeIdResultSet
implements|implements
name|ResultSet
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|StarredChange
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
DECL|field|STARRED_CHANGE_TO_CHANGE_ID
name|STARRED_CHANGE_TO_CHANGE_ID
init|=
operator|new
name|Function
argument_list|<
name|StarredChange
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
operator|.
name|Id
name|apply
parameter_list|(
name|StarredChange
name|starredChange
parameter_list|)
block|{
return|return
name|starredChange
operator|.
name|getChangeId
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|starredChangesResultSet
specifier|private
specifier|final
name|ResultSet
argument_list|<
name|StarredChange
argument_list|>
name|starredChangesResultSet
decl_stmt|;
DECL|method|ChangeIdResultSet (ResultSet<StarredChange> starredChangesResultSet)
name|ChangeIdResultSet
parameter_list|(
name|ResultSet
argument_list|<
name|StarredChange
argument_list|>
name|starredChangesResultSet
parameter_list|)
block|{
name|this
operator|.
name|starredChangesResultSet
operator|=
name|starredChangesResultSet
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|transform
argument_list|(
name|starredChangesResultSet
operator|.
name|iterator
argument_list|()
argument_list|,
name|STARRED_CHANGE_TO_CHANGE_ID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toList ()
specifier|public
name|List
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|toList
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|transform
argument_list|(
name|starredChangesResultSet
operator|.
name|toList
argument_list|()
argument_list|,
name|STARRED_CHANGE_TO_CHANGE_ID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|starredChangesResultSet
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

