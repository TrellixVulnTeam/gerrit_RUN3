begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|joining
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BatchRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|NullProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|StarredChangesUtil
specifier|public
class|class
name|StarredChangesUtil
block|{
annotation|@
name|AutoValue
DECL|class|StarField
specifier|public
specifier|abstract
specifier|static
class|class
name|StarField
block|{
DECL|field|SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|SEPARATOR
init|=
literal|":"
decl_stmt|;
DECL|method|parse (String s)
specifier|public
specifier|static
name|StarField
name|parse
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|p
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|>=
literal|0
condition|)
block|{
name|Integer
name|id
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Account
operator|.
name|Id
name|accountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|label
init|=
name|s
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|create
argument_list|(
name|accountId
argument_list|,
name|label
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|create (Account.Id accountId, String label)
specifier|public
specifier|static
name|StarField
name|create
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|String
name|label
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_StarredChangesUtil_StarField
argument_list|(
name|accountId
argument_list|,
name|label
argument_list|)
return|;
block|}
DECL|method|accountId ()
specifier|public
specifier|abstract
name|Account
operator|.
name|Id
name|accountId
parameter_list|()
function_decl|;
DECL|method|label ()
specifier|public
specifier|abstract
name|String
name|label
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|accountId
argument_list|()
operator|+
name|SEPARATOR
operator|+
name|label
argument_list|()
return|;
block|}
block|}
annotation|@
name|AutoValue
DECL|class|StarRef
specifier|public
specifier|abstract
specifier|static
class|class
name|StarRef
block|{
DECL|field|MISSING
specifier|private
specifier|static
specifier|final
name|StarRef
name|MISSING
init|=
operator|new
name|AutoValue_StarredChangesUtil_StarRef
argument_list|(
literal|null
argument_list|,
name|ImmutableSortedSet
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|create (Ref ref, Iterable<String> labels)
specifier|private
specifier|static
name|StarRef
name|create
parameter_list|(
name|Ref
name|ref
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_StarredChangesUtil_StarRef
argument_list|(
name|checkNotNull
argument_list|(
name|ref
argument_list|)
argument_list|,
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|labels
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|ref ()
specifier|public
specifier|abstract
name|Ref
name|ref
parameter_list|()
function_decl|;
DECL|method|labels ()
specifier|public
specifier|abstract
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|()
function_decl|;
DECL|method|objectId ()
specifier|public
name|ObjectId
name|objectId
parameter_list|()
block|{
return|return
name|ref
argument_list|()
operator|!=
literal|null
condition|?
name|ref
argument_list|()
operator|.
name|getObjectId
argument_list|()
else|:
name|ObjectId
operator|.
name|zeroId
argument_list|()
return|;
block|}
block|}
DECL|class|IllegalLabelException
specifier|public
specifier|static
class|class
name|IllegalLabelException
extends|extends
name|IllegalArgumentException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|invalidLabels (Set<String> invalidLabels)
specifier|static
name|IllegalLabelException
name|invalidLabels
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|invalidLabels
parameter_list|)
block|{
return|return
operator|new
name|IllegalLabelException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"invalid labels: %s"
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|invalidLabels
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|mutuallyExclusiveLabels (String label1, String label2)
specifier|static
name|IllegalLabelException
name|mutuallyExclusiveLabels
parameter_list|(
name|String
name|label1
parameter_list|,
name|String
name|label2
parameter_list|)
block|{
return|return
operator|new
name|IllegalLabelException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The labels %s and %s are mutually exclusive. Only one of them can be set."
argument_list|,
name|label1
argument_list|,
name|label2
argument_list|)
argument_list|)
return|;
block|}
DECL|method|IllegalLabelException (String message)
name|IllegalLabelException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StarredChangesUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_LABEL
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_LABEL
init|=
literal|"star"
decl_stmt|;
DECL|field|IGNORE_LABEL
specifier|public
specifier|static
specifier|final
name|String
name|IGNORE_LABEL
init|=
literal|"ignore"
decl_stmt|;
DECL|field|MUTE_LABEL
specifier|public
specifier|static
specifier|final
name|String
name|MUTE_LABEL
init|=
literal|"mute"
decl_stmt|;
DECL|field|DEFAULT_LABELS
specifier|public
specifier|static
specifier|final
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|DEFAULT_LABELS
init|=
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
name|DEFAULT_LABEL
argument_list|)
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsers
specifier|private
specifier|final
name|AllUsersName
name|allUsers
decl_stmt|;
DECL|field|dbProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|PersonIdent
name|serverIdent
decl_stmt|;
DECL|field|indexer
specifier|private
specifier|final
name|ChangeIndexer
name|indexer
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
annotation|@
name|Inject
DECL|method|StarredChangesUtil ( GitRepositoryManager repoManager, AllUsersName allUsers, Provider<ReviewDb> dbProvider, @GerritPersonIdent PersonIdent serverIdent, ChangeIndexer indexer, Provider<InternalChangeQuery> queryProvider)
name|StarredChangesUtil
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsers
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverIdent
parameter_list|,
name|ChangeIndexer
name|indexer
parameter_list|,
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsers
operator|=
name|allUsers
expr_stmt|;
name|this
operator|.
name|dbProvider
operator|=
name|dbProvider
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
block|}
DECL|method|getLabels (Account.Id accountId, Change.Id changeId)
specifier|public
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|getLabels
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
return|return
name|readLabels
argument_list|(
name|repo
argument_list|,
name|RefNames
operator|.
name|refsStarredChanges
argument_list|(
name|changeId
argument_list|,
name|accountId
argument_list|)
argument_list|)
operator|.
name|labels
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Reading stars from change %d for account %d failed"
argument_list|,
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|star ( Account.Id accountId, Project.NameKey project, Change.Id changeId, Set<String> labelsToAdd, Set<String> labelsToRemove)
specifier|public
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|star
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|labelsToAdd
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|labelsToRemove
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|String
name|refName
init|=
name|RefNames
operator|.
name|refsStarredChanges
argument_list|(
name|changeId
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|StarRef
name|old
init|=
name|readLabels
argument_list|(
name|repo
argument_list|,
name|refName
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|old
operator|.
name|labels
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|labelsToAdd
operator|!=
literal|null
condition|)
block|{
name|labels
operator|.
name|addAll
argument_list|(
name|labelsToAdd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|labelsToRemove
operator|!=
literal|null
condition|)
block|{
name|labels
operator|.
name|removeAll
argument_list|(
name|labelsToRemove
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|labels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|deleteRef
argument_list|(
name|repo
argument_list|,
name|refName
argument_list|,
name|old
operator|.
name|objectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkMutuallyExclusiveLabels
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|updateLabels
argument_list|(
name|repo
argument_list|,
name|refName
argument_list|,
name|old
operator|.
name|objectId
argument_list|()
argument_list|,
name|labels
argument_list|)
expr_stmt|;
block|}
name|indexer
operator|.
name|index
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|,
name|project
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
return|return
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|labels
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Star change %d for account %d failed"
argument_list|,
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|unstarAll (Project.NameKey project, Change.Id changeId)
specifier|public
name|void
name|unstarAll
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|BatchRefUpdate
name|batchUpdate
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|newBatchUpdate
argument_list|()
decl_stmt|;
name|batchUpdate
operator|.
name|setAllowNonFastForwards
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|batchUpdate
operator|.
name|setRefLogIdent
argument_list|(
name|serverIdent
argument_list|)
expr_stmt|;
name|batchUpdate
operator|.
name|setRefLogMessage
argument_list|(
literal|"Unstar change "
operator|+
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|accountId
range|:
name|byChangeFromIndex
argument_list|(
name|changeId
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|refName
init|=
name|RefNames
operator|.
name|refsStarredChanges
argument_list|(
name|changeId
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|Ref
name|ref
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|batchUpdate
operator|.
name|addCommand
argument_list|(
operator|new
name|ReceiveCommand
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|refName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|batchUpdate
operator|.
name|execute
argument_list|(
name|rw
argument_list|,
name|NullProgressMonitor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
for|for
control|(
name|ReceiveCommand
name|command
range|:
name|batchUpdate
operator|.
name|getCommands
argument_list|()
control|)
block|{
if|if
condition|(
name|command
operator|.
name|getResult
argument_list|()
operator|!=
name|ReceiveCommand
operator|.
name|Result
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unstar change %d failed, ref %s could not be deleted: %s"
argument_list|,
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|command
operator|.
name|getRefName
argument_list|()
argument_list|,
name|command
operator|.
name|getResult
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|indexer
operator|.
name|index
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|,
name|project
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unstar change %d failed"
argument_list|,
name|changeId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|byChange (Change.Id changeId)
specifier|public
name|ImmutableMap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|StarRef
argument_list|>
name|byChange
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|StarRef
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|refPart
range|:
name|getRefNames
argument_list|(
name|repo
argument_list|,
name|RefNames
operator|.
name|refsStarredChangesPrefix
argument_list|(
name|changeId
argument_list|)
argument_list|)
control|)
block|{
name|Integer
name|id
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|refPart
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Account
operator|.
name|Id
name|accountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|accountId
argument_list|,
name|readLabels
argument_list|(
name|repo
argument_list|,
name|RefNames
operator|.
name|refsStarredChanges
argument_list|(
name|changeId
argument_list|,
name|accountId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Get accounts that starred change %d failed"
argument_list|,
name|changeId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|byChangeFromIndex (Change.Id changeId)
specifier|public
name|ImmutableListMultimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|byChangeFromIndex
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ChangeField
operator|.
name|ID
operator|.
name|getName
argument_list|()
argument_list|,
name|ChangeField
operator|.
name|STAR
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changeData
init|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|setRequestedFields
argument_list|(
name|fields
argument_list|)
operator|.
name|byLegacyChangeId
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|changeData
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
return|return
name|changeData
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|stars
argument_list|()
return|;
block|}
DECL|method|getRefNames (Repository repo, String prefix)
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getRefNames
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|RefDatabase
name|refDb
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
decl_stmt|;
return|return
name|refDb
operator|.
name|getRefs
argument_list|(
name|prefix
argument_list|)
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|getObjectId (Account.Id accountId, Change.Id changeId)
specifier|public
name|ObjectId
name|getObjectId
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|refsStarredChanges
argument_list|(
name|changeId
argument_list|,
name|accountId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ref
operator|!=
literal|null
condition|?
name|ref
operator|.
name|getObjectId
argument_list|()
else|:
name|ObjectId
operator|.
name|zeroId
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Getting star object ID for account %d on change %d failed"
argument_list|,
name|accountId
operator|.
name|get
argument_list|()
argument_list|,
name|changeId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|ObjectId
operator|.
name|zeroId
argument_list|()
return|;
block|}
block|}
DECL|method|ignore (Account.Id accountId, Project.NameKey project, Change.Id changeId)
specifier|public
name|void
name|ignore
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
block|{
name|star
argument_list|(
name|accountId
argument_list|,
name|project
argument_list|,
name|changeId
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|IGNORE_LABEL
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|unignore (Account.Id accountId, Project.NameKey project, Change.Id changeId)
specifier|public
name|void
name|unignore
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
block|{
name|star
argument_list|(
name|accountId
argument_list|,
name|project
argument_list|,
name|changeId
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|IGNORE_LABEL
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|isIgnoredBy (Change.Id changeId, Account.Id accountId)
specifier|public
name|boolean
name|isIgnoredBy
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|getLabels
argument_list|(
name|accountId
argument_list|,
name|changeId
argument_list|)
operator|.
name|contains
argument_list|(
name|IGNORE_LABEL
argument_list|)
return|;
block|}
DECL|method|getMuteLabel (Change change)
specifier|private
specifier|static
name|String
name|getMuteLabel
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
return|return
name|MUTE_LABEL
operator|+
literal|"/"
operator|+
name|change
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|mute (Account.Id accountId, Project.NameKey project, Change change)
specifier|public
name|void
name|mute
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
name|change
parameter_list|)
throws|throws
name|OrmException
block|{
name|star
argument_list|(
name|accountId
argument_list|,
name|project
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|getMuteLabel
argument_list|(
name|change
argument_list|)
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|unmute (Account.Id accountId, Project.NameKey project, Change change)
specifier|public
name|void
name|unmute
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
name|change
parameter_list|)
throws|throws
name|OrmException
block|{
name|star
argument_list|(
name|accountId
argument_list|,
name|project
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|getMuteLabel
argument_list|(
name|change
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|isMutedBy (Change change, Account.Id accountId)
specifier|public
name|boolean
name|isMutedBy
parameter_list|(
name|Change
name|change
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|getLabels
argument_list|(
name|accountId
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|getMuteLabel
argument_list|(
name|change
argument_list|)
argument_list|)
return|;
block|}
DECL|method|readLabels (Repository repo, String refName)
specifier|private
specifier|static
name|StarRef
name|readLabels
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|String
name|refName
parameter_list|)
throws|throws
name|IOException
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
name|StarRef
operator|.
name|MISSING
return|;
block|}
try|try
init|(
name|ObjectReader
name|reader
init|=
name|repo
operator|.
name|newObjectReader
argument_list|()
init|)
block|{
name|ObjectLoader
name|obj
init|=
name|reader
operator|.
name|open
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|Constants
operator|.
name|OBJ_BLOB
argument_list|)
decl_stmt|;
return|return
name|StarRef
operator|.
name|create
argument_list|(
name|ref
argument_list|,
name|Splitter
operator|.
name|on
argument_list|(
name|CharMatcher
operator|.
name|whitespace
argument_list|()
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
operator|new
name|String
argument_list|(
name|obj
operator|.
name|getCachedBytes
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|writeLabels (Repository repo, Collection<String> labels)
specifier|public
specifier|static
name|ObjectId
name|writeLabels
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
throws|throws
name|IOException
block|{
name|validateLabels
argument_list|(
name|labels
argument_list|)
expr_stmt|;
try|try
init|(
name|ObjectInserter
name|oi
init|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
name|ObjectId
name|id
init|=
name|oi
operator|.
name|insert
argument_list|(
name|Constants
operator|.
name|OBJ_BLOB
argument_list|,
name|labels
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|()
operator|.
name|distinct
argument_list|()
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|oi
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|id
return|;
block|}
block|}
DECL|method|checkMutuallyExclusiveLabels (Set<String> labels)
specifier|private
specifier|static
name|void
name|checkMutuallyExclusiveLabels
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
block|{
if|if
condition|(
name|labels
operator|.
name|containsAll
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|DEFAULT_LABEL
argument_list|,
name|IGNORE_LABEL
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
name|IllegalLabelException
operator|.
name|mutuallyExclusiveLabels
argument_list|(
name|DEFAULT_LABEL
argument_list|,
name|IGNORE_LABEL
argument_list|)
throw|;
block|}
block|}
DECL|method|validateLabels (Collection<String> labels)
specifier|private
specifier|static
name|void
name|validateLabels
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
block|{
if|if
condition|(
name|labels
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|SortedSet
argument_list|<
name|String
argument_list|>
name|invalidLabels
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|label
range|:
name|labels
control|)
block|{
if|if
condition|(
name|CharMatcher
operator|.
name|whitespace
argument_list|()
operator|.
name|matchesAnyOf
argument_list|(
name|label
argument_list|)
condition|)
block|{
name|invalidLabels
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|invalidLabels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|IllegalLabelException
operator|.
name|invalidLabels
argument_list|(
name|invalidLabels
argument_list|)
throw|;
block|}
block|}
DECL|method|updateLabels ( Repository repo, String refName, ObjectId oldObjectId, Collection<String> labels)
specifier|private
name|void
name|updateLabels
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|String
name|refName
parameter_list|,
name|ObjectId
name|oldObjectId
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
block|{
try|try
init|(
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RefUpdate
name|u
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|u
operator|.
name|setExpectedOldObjectId
argument_list|(
name|oldObjectId
argument_list|)
expr_stmt|;
name|u
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|u
operator|.
name|setNewObjectId
argument_list|(
name|writeLabels
argument_list|(
name|repo
argument_list|,
name|labels
argument_list|)
argument_list|)
expr_stmt|;
name|u
operator|.
name|setRefLogIdent
argument_list|(
name|serverIdent
argument_list|)
expr_stmt|;
name|u
operator|.
name|setRefLogMessage
argument_list|(
literal|"Update star labels"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RefUpdate
operator|.
name|Result
name|result
init|=
name|u
operator|.
name|update
argument_list|(
name|rw
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|FORCED
case|:
case|case
name|NO_CHANGE
case|:
case|case
name|FAST_FORWARD
case|:
return|return;
case|case
name|IO_FAILURE
case|:
case|case
name|LOCK_FAILURE
case|:
case|case
name|NOT_ATTEMPTED
case|:
case|case
name|REJECTED
case|:
case|case
name|REJECTED_CURRENT_BRANCH
case|:
case|case
name|RENAMED
case|:
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Update star labels on ref %s failed: %s"
argument_list|,
name|refName
argument_list|,
name|result
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|deleteRef (Repository repo, String refName, ObjectId oldObjectId)
specifier|private
name|void
name|deleteRef
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|String
name|refName
parameter_list|,
name|ObjectId
name|oldObjectId
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
block|{
name|RefUpdate
name|u
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|u
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|u
operator|.
name|setExpectedOldObjectId
argument_list|(
name|oldObjectId
argument_list|)
expr_stmt|;
name|u
operator|.
name|setRefLogIdent
argument_list|(
name|serverIdent
argument_list|)
expr_stmt|;
name|u
operator|.
name|setRefLogMessage
argument_list|(
literal|"Unstar change"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RefUpdate
operator|.
name|Result
name|result
init|=
name|u
operator|.
name|delete
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|FORCED
case|:
return|return;
case|case
name|NEW
case|:
case|case
name|NO_CHANGE
case|:
case|case
name|FAST_FORWARD
case|:
case|case
name|IO_FAILURE
case|:
case|case
name|LOCK_FAILURE
case|:
case|case
name|NOT_ATTEMPTED
case|:
case|case
name|REJECTED
case|:
case|case
name|REJECTED_CURRENT_BRANCH
case|:
case|case
name|RENAMED
case|:
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Delete star ref %s failed: %s"
argument_list|,
name|refName
argument_list|,
name|result
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

