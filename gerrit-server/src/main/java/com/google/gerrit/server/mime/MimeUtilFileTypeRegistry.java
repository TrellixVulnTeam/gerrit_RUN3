begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.mime
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mime
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|medsea
operator|.
name|mimeutil
operator|.
name|MimeException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|medsea
operator|.
name|mimeutil
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|medsea
operator|.
name|mimeutil
operator|.
name|MimeUtil2
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|MimeUtilFileTypeRegistry
specifier|public
class|class
name|MimeUtilFileTypeRegistry
implements|implements
name|FileTypeRegistry
block|{
DECL|field|KEY_SAFE
specifier|private
specifier|static
specifier|final
name|String
name|KEY_SAFE
init|=
literal|"safe"
decl_stmt|;
DECL|field|SECTION_MIMETYPE
specifier|private
specifier|static
specifier|final
name|String
name|SECTION_MIMETYPE
init|=
literal|"mimetype"
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MimeUtilFileTypeRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cfg
specifier|private
specifier|final
name|Config
name|cfg
decl_stmt|;
DECL|field|mimeUtil
specifier|private
specifier|final
name|MimeUtil2
name|mimeUtil
decl_stmt|;
annotation|@
name|Inject
DECL|method|MimeUtilFileTypeRegistry (@erritServerConfig Config gsc, MimeUtil2 mu2)
name|MimeUtilFileTypeRegistry
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|gsc
parameter_list|,
name|MimeUtil2
name|mu2
parameter_list|)
block|{
name|cfg
operator|=
name|gsc
expr_stmt|;
name|mimeUtil
operator|=
name|mu2
expr_stmt|;
block|}
comment|/**    * Get specificity of mime types with generic types forced to low values    *    *<p>"application/octet-stream" is forced to -1. "text/plain" is forced to 0. All other mime    * types return the specificity reported by mimeType itself.    *    * @param mimeType The mimeType to get the corrected specificity for.    * @return The corrected specificity.    */
DECL|method|getCorrectedMimeSpecificity (MimeType mimeType)
specifier|private
name|int
name|getCorrectedMimeSpecificity
parameter_list|(
name|MimeType
name|mimeType
parameter_list|)
block|{
comment|// Although the documentation of MimeType's getSpecificity claims that for
comment|// example "application/octet-stream" always has a specificity of 0, it
comment|// effectively returns 1 for us. This causes problems when trying to get
comment|// the correct mime type via sorting. For example in
comment|// [application/octet-stream, image/x-icon] both mime types come with
comment|// specificity 1 for us. Hence, getMimeType below may end up using
comment|// application/octet-stream instead of the more specific image/x-icon.
comment|// Therefore, we have to force the specificity of generic types below the
comment|// default of 1.
comment|//
specifier|final
name|String
name|mimeTypeStr
init|=
name|mimeType
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|mimeTypeStr
operator|.
name|equals
argument_list|(
literal|"application/octet-stream"
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|mimeTypeStr
operator|.
name|equals
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|mimeType
operator|.
name|getSpecificity
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getMimeType (final String path, final byte[] content)
specifier|public
name|MimeType
name|getMimeType
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|byte
index|[]
name|content
parameter_list|)
block|{
name|Set
argument_list|<
name|MimeType
argument_list|>
name|mimeTypes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
operator|&&
name|content
operator|.
name|length
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|mimeTypes
operator|.
name|addAll
argument_list|(
name|mimeUtil
operator|.
name|getMimeTypes
argument_list|(
name|content
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to determine MIME type from content"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|mimeTypes
operator|.
name|addAll
argument_list|(
name|mimeUtil
operator|.
name|getMimeTypes
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to determine MIME type from path"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUnknownType
argument_list|(
name|mimeTypes
argument_list|)
condition|)
block|{
return|return
name|MimeUtil2
operator|.
name|UNKNOWN_MIME_TYPE
return|;
block|}
specifier|final
name|List
argument_list|<
name|MimeType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mimeTypes
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|types
argument_list|,
operator|new
name|Comparator
argument_list|<
name|MimeType
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|MimeType
name|a
parameter_list|,
name|MimeType
name|b
parameter_list|)
block|{
return|return
name|getCorrectedMimeSpecificity
argument_list|(
name|b
argument_list|)
operator|-
name|getCorrectedMimeSpecificity
argument_list|(
name|a
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|types
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isSafeInline (final MimeType type)
specifier|public
name|boolean
name|isSafeInline
parameter_list|(
specifier|final
name|MimeType
name|type
parameter_list|)
block|{
if|if
condition|(
name|MimeUtil2
operator|.
name|UNKNOWN_MIME_TYPE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// Most browsers perform content type sniffing when they get told
comment|// a generic content type. This is bad, so assume we cannot send
comment|// the file inline.
comment|//
return|return
literal|false
return|;
block|}
specifier|final
name|boolean
name|any
init|=
name|isSafe
argument_list|(
name|cfg
argument_list|,
literal|"*/*"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|genericMedia
init|=
name|isSafe
argument_list|(
name|cfg
argument_list|,
name|type
operator|.
name|getMediaType
argument_list|()
operator|+
literal|"/*"
argument_list|,
name|any
argument_list|)
decl_stmt|;
return|return
name|isSafe
argument_list|(
name|cfg
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|,
name|genericMedia
argument_list|)
return|;
block|}
DECL|method|isSafe (Config cfg, String type, boolean def)
specifier|private
specifier|static
name|boolean
name|isSafe
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|String
name|type
parameter_list|,
name|boolean
name|def
parameter_list|)
block|{
return|return
name|cfg
operator|.
name|getBoolean
argument_list|(
name|SECTION_MIMETYPE
argument_list|,
name|type
argument_list|,
name|KEY_SAFE
argument_list|,
name|def
argument_list|)
return|;
block|}
DECL|method|isUnknownType (Collection<MimeType> mimeTypes)
specifier|private
specifier|static
name|boolean
name|isUnknownType
parameter_list|(
name|Collection
argument_list|<
name|MimeType
argument_list|>
name|mimeTypes
parameter_list|)
block|{
if|if
condition|(
name|mimeTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|mimeTypes
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|mimeTypes
operator|.
name|contains
argument_list|(
name|MimeUtil2
operator|.
name|UNKNOWN_MIME_TYPE
argument_list|)
return|;
block|}
block|}
end_class

end_unit

