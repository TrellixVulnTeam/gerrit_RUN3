begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountGroupMember
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|CacheModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|EntryCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AuthConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** Caches important (but small) account state to avoid database hits. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|AccountCacheImpl
specifier|public
class|class
name|AccountCacheImpl
implements|implements
name|AccountCache
block|{
DECL|field|BYID_NAME
specifier|private
specifier|static
specifier|final
name|String
name|BYID_NAME
init|=
literal|"accounts"
decl_stmt|;
DECL|field|BYUSER_NAME
specifier|private
specifier|static
specifier|final
name|String
name|BYUSER_NAME
init|=
literal|"accounts_byname"
decl_stmt|;
DECL|method|module ()
specifier|public
specifier|static
name|Module
name|module
parameter_list|()
block|{
return|return
operator|new
name|CacheModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
specifier|final
name|TypeLiteral
argument_list|<
name|Cache
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|AccountState
argument_list|>
argument_list|>
name|byIdType
init|=
operator|new
name|TypeLiteral
argument_list|<
name|Cache
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|AccountState
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|core
argument_list|(
name|byIdType
argument_list|,
name|BYID_NAME
argument_list|)
operator|.
name|populateWith
argument_list|(
name|ByIdLoader
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|TypeLiteral
argument_list|<
name|Cache
argument_list|<
name|String
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
argument_list|>
name|byUsernameType
init|=
operator|new
name|TypeLiteral
argument_list|<
name|Cache
argument_list|<
name|String
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|core
argument_list|(
name|byUsernameType
argument_list|,
name|BYUSER_NAME
argument_list|)
operator|.
name|populateWith
argument_list|(
name|ByNameLoader
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|AccountCacheImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|AccountCache
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|AccountCacheImpl
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|field|byId
specifier|private
specifier|final
name|Cache
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|AccountState
argument_list|>
name|byId
decl_stmt|;
DECL|field|byName
specifier|private
specifier|final
name|Cache
argument_list|<
name|String
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|byName
decl_stmt|;
annotation|@
name|Inject
DECL|method|AccountCacheImpl (@amedBYID_NAME) Cache<Account.Id, AccountState> byId, @Named(BYUSER_NAME) Cache<String, Account.Id> byUsername)
name|AccountCacheImpl
parameter_list|(
annotation|@
name|Named
argument_list|(
name|BYID_NAME
argument_list|)
name|Cache
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|AccountState
argument_list|>
name|byId
parameter_list|,
annotation|@
name|Named
argument_list|(
name|BYUSER_NAME
argument_list|)
name|Cache
argument_list|<
name|String
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|byUsername
parameter_list|)
block|{
name|this
operator|.
name|byId
operator|=
name|byId
expr_stmt|;
name|this
operator|.
name|byName
operator|=
name|byUsername
expr_stmt|;
block|}
DECL|method|get (final Account.Id accountId)
specifier|public
name|AccountState
name|get
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
return|return
name|byId
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getByUsername (String username)
specifier|public
name|AccountState
name|getByUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|Account
operator|.
name|Id
name|id
init|=
name|byName
operator|.
name|get
argument_list|(
name|username
argument_list|)
decl_stmt|;
return|return
name|id
operator|!=
literal|null
condition|?
name|byId
operator|.
name|get
argument_list|(
name|id
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|evict (final Account.Id accountId)
specifier|public
name|void
name|evict
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
name|byId
operator|.
name|remove
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
DECL|method|evictByUsername (String username)
specifier|public
name|void
name|evictByUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|byName
operator|.
name|remove
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
DECL|class|ByIdLoader
specifier|static
class|class
name|ByIdLoader
extends|extends
name|EntryCreator
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|AccountState
argument_list|>
block|{
DECL|field|schema
specifier|private
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schema
decl_stmt|;
DECL|field|registered
specifier|private
specifier|final
name|Set
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|registered
decl_stmt|;
DECL|field|anonymous
specifier|private
specifier|final
name|Set
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|anonymous
decl_stmt|;
DECL|field|groupCache
specifier|private
specifier|final
name|GroupCache
name|groupCache
decl_stmt|;
DECL|field|byName
specifier|private
specifier|final
name|Cache
argument_list|<
name|String
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|byName
decl_stmt|;
annotation|@
name|Inject
DECL|method|ByIdLoader (SchemaFactory<ReviewDb> sf, AuthConfig auth, GroupCache groupCache, @Named(BYUSER_NAME) Cache<String, Account.Id> byUsername)
name|ByIdLoader
parameter_list|(
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|sf
parameter_list|,
name|AuthConfig
name|auth
parameter_list|,
name|GroupCache
name|groupCache
parameter_list|,
annotation|@
name|Named
argument_list|(
name|BYUSER_NAME
argument_list|)
name|Cache
argument_list|<
name|String
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|byUsername
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|sf
expr_stmt|;
name|this
operator|.
name|registered
operator|=
name|auth
operator|.
name|getRegisteredGroups
argument_list|()
expr_stmt|;
name|this
operator|.
name|anonymous
operator|=
name|auth
operator|.
name|getAnonymousGroups
argument_list|()
expr_stmt|;
name|this
operator|.
name|groupCache
operator|=
name|groupCache
expr_stmt|;
name|this
operator|.
name|byName
operator|=
name|byUsername
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEntry (final Account.Id key)
specifier|public
name|AccountState
name|createEntry
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|key
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ReviewDb
name|db
init|=
name|schema
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|AccountState
name|state
init|=
name|load
argument_list|(
name|db
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|getUserName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|state
operator|.
name|getUserName
argument_list|()
argument_list|,
name|state
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|load (final ReviewDb db, final Account.Id who)
specifier|private
name|AccountState
name|load
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|Account
operator|.
name|Id
name|who
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|Account
name|account
init|=
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|who
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
comment|// Account no longer exists? They are anonymous.
comment|//
return|return
name|missing
argument_list|(
name|who
argument_list|)
return|;
block|}
specifier|final
name|Collection
argument_list|<
name|AccountExternalId
argument_list|>
name|externalIds
init|=
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|byAccount
argument_list|(
name|who
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|internalGroups
init|=
operator|new
name|HashSet
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountGroupMember
name|g
range|:
name|db
operator|.
name|accountGroupMembers
argument_list|()
operator|.
name|byAccount
argument_list|(
name|who
argument_list|)
control|)
block|{
specifier|final
name|AccountGroup
operator|.
name|Id
name|groupId
init|=
name|g
operator|.
name|getAccountGroupId
argument_list|()
decl_stmt|;
specifier|final
name|AccountGroup
name|group
init|=
name|groupCache
operator|.
name|get
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
operator|&&
name|group
operator|.
name|getType
argument_list|()
operator|==
name|AccountGroup
operator|.
name|Type
operator|.
name|INTERNAL
condition|)
block|{
name|internalGroups
operator|.
name|add
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|internalGroups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|internalGroups
operator|=
name|registered
expr_stmt|;
block|}
else|else
block|{
name|internalGroups
operator|.
name|addAll
argument_list|(
name|registered
argument_list|)
expr_stmt|;
name|internalGroups
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|internalGroups
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AccountState
argument_list|(
name|account
argument_list|,
name|internalGroups
argument_list|,
name|externalIds
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|missing (final Account.Id accountId)
specifier|public
name|AccountState
name|missing
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
specifier|final
name|Account
name|account
init|=
operator|new
name|Account
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|AccountExternalId
argument_list|>
name|ids
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
return|return
operator|new
name|AccountState
argument_list|(
name|account
argument_list|,
name|anonymous
argument_list|,
name|ids
argument_list|)
return|;
block|}
block|}
DECL|class|ByNameLoader
specifier|static
class|class
name|ByNameLoader
extends|extends
name|EntryCreator
argument_list|<
name|String
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
block|{
DECL|field|schema
specifier|private
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schema
decl_stmt|;
annotation|@
name|Inject
DECL|method|ByNameLoader (final SchemaFactory<ReviewDb> sf)
name|ByNameLoader
parameter_list|(
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|sf
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|sf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEntry (final String username)
specifier|public
name|Account
operator|.
name|Id
name|createEntry
parameter_list|(
specifier|final
name|String
name|username
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ReviewDb
name|db
init|=
name|schema
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|AccountExternalId
operator|.
name|Key
name|key
init|=
operator|new
name|AccountExternalId
operator|.
name|Key
argument_list|(
comment|//
name|AccountExternalId
operator|.
name|SCHEME_USERNAME
argument_list|,
comment|//
name|username
argument_list|)
decl_stmt|;
specifier|final
name|AccountExternalId
name|id
init|=
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|id
operator|!=
literal|null
condition|?
name|id
operator|.
name|getAccountId
argument_list|()
else|:
literal|null
return|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

