begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.util
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Die
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|AsyncAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|DailyRollingFileAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|helpers
operator|.
name|OnlyOnceErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|SystemLog
specifier|public
class|class
name|SystemLog
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SystemLog
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|LOG4J_CONFIGURATION
specifier|public
specifier|static
specifier|final
name|String
name|LOG4J_CONFIGURATION
init|=
literal|"log4j.configuration"
decl_stmt|;
DECL|field|site
specifier|private
specifier|final
name|SitePaths
name|site
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|Config
name|config
decl_stmt|;
annotation|@
name|Inject
DECL|method|SystemLog (final SitePaths site, @GerritServerConfig Config config)
specifier|public
name|SystemLog
parameter_list|(
specifier|final
name|SitePaths
name|site
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|config
parameter_list|)
block|{
name|this
operator|.
name|site
operator|=
name|site
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
DECL|method|shouldConfigure ()
specifier|public
specifier|static
name|boolean
name|shouldConfigure
parameter_list|()
block|{
return|return
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|LOG4J_CONFIGURATION
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createAppender (Path logdir, String name, Layout layout)
specifier|public
specifier|static
name|Appender
name|createAppender
parameter_list|(
name|Path
name|logdir
parameter_list|,
name|String
name|name
parameter_list|,
name|Layout
name|layout
parameter_list|)
block|{
specifier|final
name|DailyRollingFileAppender
name|dst
init|=
operator|new
name|DailyRollingFileAppender
argument_list|()
decl_stmt|;
name|dst
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|dst
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|dst
operator|.
name|setEncoding
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|dst
operator|.
name|setFile
argument_list|(
name|resolve
argument_list|(
name|logdir
argument_list|)
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dst
operator|.
name|setImmediateFlush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dst
operator|.
name|setAppend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dst
operator|.
name|setErrorHandler
argument_list|(
operator|new
name|DieErrorHandler
argument_list|()
argument_list|)
expr_stmt|;
name|dst
operator|.
name|activateOptions
argument_list|()
expr_stmt|;
name|dst
operator|.
name|setErrorHandler
argument_list|(
operator|new
name|OnlyOnceErrorHandler
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|dst
return|;
block|}
DECL|method|createAsyncAppender (String name, Layout layout)
specifier|public
name|AsyncAppender
name|createAsyncAppender
parameter_list|(
name|String
name|name
parameter_list|,
name|Layout
name|layout
parameter_list|)
block|{
name|AsyncAppender
name|async
init|=
operator|new
name|AsyncAppender
argument_list|()
decl_stmt|;
name|async
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|async
operator|.
name|setBlocking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|async
operator|.
name|setBufferSize
argument_list|(
name|config
operator|.
name|getInt
argument_list|(
literal|"core"
argument_list|,
literal|"asyncLoggingBufferSize"
argument_list|,
literal|64
argument_list|)
argument_list|)
expr_stmt|;
name|async
operator|.
name|setLocationInfo
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldConfigure
argument_list|()
condition|)
block|{
name|async
operator|.
name|addAppender
argument_list|(
name|createAppender
argument_list|(
name|site
operator|.
name|logs_dir
argument_list|,
name|name
argument_list|,
name|layout
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Appender
name|appender
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|name
argument_list|)
operator|.
name|getAppender
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|appender
operator|!=
literal|null
condition|)
block|{
name|async
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No appender with the name: "
operator|+
name|name
operator|+
literal|" was found. "
operator|+
name|name
operator|+
literal|" logging is disabled"
argument_list|)
expr_stmt|;
block|}
block|}
name|async
operator|.
name|activateOptions
argument_list|()
expr_stmt|;
return|return
name|async
return|;
block|}
DECL|method|resolve (Path p)
specifier|private
specifier|static
name|Path
name|resolve
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
try|try
block|{
return|return
name|p
operator|.
name|toRealPath
argument_list|()
operator|.
name|normalize
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|p
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|normalize
argument_list|()
return|;
block|}
block|}
DECL|class|DieErrorHandler
specifier|private
specifier|static
specifier|final
class|class
name|DieErrorHandler
implements|implements
name|ErrorHandler
block|{
annotation|@
name|Override
DECL|method|error (String message, Exception e, int errorCode, LoggingEvent event)
specifier|public
name|void
name|error
parameter_list|(
name|String
name|message
parameter_list|,
name|Exception
name|e
parameter_list|,
name|int
name|errorCode
parameter_list|,
name|LoggingEvent
name|event
parameter_list|)
block|{
name|error
argument_list|(
name|e
operator|!=
literal|null
condition|?
name|e
operator|.
name|getMessage
argument_list|()
else|:
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|error (String message, Exception e, int errorCode)
specifier|public
name|void
name|error
parameter_list|(
name|String
name|message
parameter_list|,
name|Exception
name|e
parameter_list|,
name|int
name|errorCode
parameter_list|)
block|{
name|error
argument_list|(
name|e
operator|!=
literal|null
condition|?
name|e
operator|.
name|getMessage
argument_list|()
else|:
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|error (String message)
specifier|public
name|void
name|error
parameter_list|(
name|String
name|message
parameter_list|)
block|{
throw|throw
operator|new
name|Die
argument_list|(
literal|"Cannot open log file: "
operator|+
name|message
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|activateOptions ()
specifier|public
name|void
name|activateOptions
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|setAppender (Appender appender)
specifier|public
name|void
name|setAppender
parameter_list|(
name|Appender
name|appender
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|setBackupAppender (Appender appender)
specifier|public
name|void
name|setBackupAppender
parameter_list|(
name|Appender
name|appender
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|setLogger (Logger logger)
specifier|public
name|void
name|setLogger
parameter_list|(
name|Logger
name|logger
parameter_list|)
block|{}
block|}
block|}
end_class

end_unit

