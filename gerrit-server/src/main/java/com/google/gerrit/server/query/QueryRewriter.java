begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|ElementType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Retention
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|RetentionPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Rewrites a Predicate tree by applying rewrite rules.  *<p>  * Subclasses may document their rewrite rules by declaring public methods with  * {@link Rewrite} annotations, such as:  *  *<pre>  *&#064;Rewrite(&quot;A=(owner:*) B=(status:*)&quot;)  * public Predicate r1_ownerStatus(@Named(&quot;A&quot;) OperatorPredicate owner,  *&#064;Named(&quot;B&quot;) OperatorPredicate status) {  * }  *</pre>  *<p>  * Rewrite methods are applied in order by declared name, so naming methods with  * a numeric prefix to ensure a specific ordering (if required) is suggested.  *  * @type<T> type of object the predicate can evaluate in memory.  */
end_comment

begin_class
DECL|class|QueryRewriter
specifier|public
specifier|abstract
class|class
name|QueryRewriter
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**    * Defines the rewrite rules known by a QueryRewriter.    *    * This class is thread-safe and may be reused or cached.    *    * @param<T> type of object the predicates can evaluate in memory.    * @param<R> type of the rewriter subclass.    */
DECL|class|Definition
specifier|public
specifier|static
class|class
name|Definition
parameter_list|<
name|T
parameter_list|,
name|R
extends|extends
name|QueryRewriter
parameter_list|<
name|T
parameter_list|>
parameter_list|>
block|{
DECL|field|rewriteRules
specifier|private
specifier|final
name|List
argument_list|<
name|RewriteRule
argument_list|<
name|T
argument_list|>
argument_list|>
name|rewriteRules
decl_stmt|;
DECL|method|Definition (Class<R> clazz, QueryBuilder<T> qb)
specifier|public
name|Definition
parameter_list|(
name|Class
argument_list|<
name|R
argument_list|>
name|clazz
parameter_list|,
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|qb
parameter_list|)
block|{
name|rewriteRules
operator|=
operator|new
name|ArrayList
argument_list|<
name|RewriteRule
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|clazz
decl_stmt|;
while|while
condition|(
name|c
operator|!=
name|QueryRewriter
operator|.
name|class
condition|)
block|{
specifier|final
name|Method
index|[]
name|declared
init|=
name|c
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|declared
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Method
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Method
name|o1
parameter_list|,
name|Method
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|declared
control|)
block|{
specifier|final
name|Rewrite
name|rp
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|Rewrite
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|m
operator|.
name|getModifiers
argument_list|()
operator|&
name|Modifier
operator|.
name|ABSTRACT
operator|)
operator|!=
name|Modifier
operator|.
name|ABSTRACT
operator|&&
operator|(
name|m
operator|.
name|getModifiers
argument_list|()
operator|&
name|Modifier
operator|.
name|PUBLIC
operator|)
operator|==
name|Modifier
operator|.
name|PUBLIC
operator|&&
name|rp
operator|!=
literal|null
condition|)
block|{
name|rewriteRules
operator|.
name|add
argument_list|(
operator|new
name|MethodRewrite
argument_list|(
name|qb
argument_list|,
name|rp
operator|.
name|value
argument_list|()
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|c
operator|=
name|c
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|field|rewriteRules
specifier|private
specifier|final
name|List
argument_list|<
name|RewriteRule
argument_list|<
name|T
argument_list|>
argument_list|>
name|rewriteRules
decl_stmt|;
DECL|method|QueryRewriter (final Definition<T, ? extends QueryRewriter<T>> def)
specifier|protected
name|QueryRewriter
parameter_list|(
specifier|final
name|Definition
argument_list|<
name|T
argument_list|,
name|?
extends|extends
name|QueryRewriter
argument_list|<
name|T
argument_list|>
argument_list|>
name|def
parameter_list|)
block|{
name|this
operator|.
name|rewriteRules
operator|=
name|def
operator|.
name|rewriteRules
expr_stmt|;
block|}
comment|/** Combine the passed predicates into a single AND node. */
DECL|method|and (Collection<? extends Predicate<T>> that)
specifier|public
name|Predicate
argument_list|<
name|T
argument_list|>
name|and
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|that
parameter_list|)
block|{
return|return
name|Predicate
operator|.
name|and
argument_list|(
name|that
argument_list|)
return|;
block|}
comment|/** Combine the passed predicates into a single AND node. */
DECL|method|and (Predicate<T>.... that)
specifier|public
name|Predicate
argument_list|<
name|T
argument_list|>
name|and
parameter_list|(
name|Predicate
argument_list|<
name|T
argument_list|>
modifier|...
name|that
parameter_list|)
block|{
return|return
name|and
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|that
argument_list|)
argument_list|)
return|;
block|}
comment|/** Combine the passed predicates into a single OR node. */
DECL|method|or (Collection<? extends Predicate<T>> that)
specifier|public
name|Predicate
argument_list|<
name|T
argument_list|>
name|or
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|that
parameter_list|)
block|{
return|return
name|Predicate
operator|.
name|or
argument_list|(
name|that
argument_list|)
return|;
block|}
comment|/** Combine the passed predicates into a single OR node. */
DECL|method|or (Predicate<T>.... that)
specifier|public
name|Predicate
argument_list|<
name|T
argument_list|>
name|or
parameter_list|(
name|Predicate
argument_list|<
name|T
argument_list|>
modifier|...
name|that
parameter_list|)
block|{
return|return
name|or
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|that
argument_list|)
argument_list|)
return|;
block|}
comment|/** Invert the passed node. */
DECL|method|not (Predicate<T> that)
specifier|public
name|Predicate
argument_list|<
name|T
argument_list|>
name|not
parameter_list|(
name|Predicate
argument_list|<
name|T
argument_list|>
name|that
parameter_list|)
block|{
return|return
name|Predicate
operator|.
name|not
argument_list|(
name|that
argument_list|)
return|;
block|}
comment|/**    * Apply rewrites to a graph until it stops changing.    *    * @param in the graph to rewrite.    * @return the rewritten graph.    */
DECL|method|rewrite (Predicate<T> in)
specifier|public
name|Predicate
argument_list|<
name|T
argument_list|>
name|rewrite
parameter_list|(
name|Predicate
argument_list|<
name|T
argument_list|>
name|in
parameter_list|)
block|{
name|Predicate
argument_list|<
name|T
argument_list|>
name|old
decl_stmt|;
do|do
block|{
name|old
operator|=
name|in
expr_stmt|;
name|in
operator|=
name|rewriteOne
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|old
operator|.
name|equals
argument_list|(
name|in
argument_list|)
operator|&&
name|in
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|n
init|=
operator|new
name|ArrayList
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
name|in
operator|.
name|getChildCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Predicate
argument_list|<
name|T
argument_list|>
name|p
range|:
name|in
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|n
operator|.
name|add
argument_list|(
name|rewrite
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|n
operator|=
name|removeDuplicates
argument_list|(
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|(
name|isAND
argument_list|(
name|in
argument_list|)
operator|||
name|isOR
argument_list|(
name|in
argument_list|)
operator|)
condition|)
block|{
name|in
operator|=
name|n
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|=
name|in
operator|.
name|copy
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
operator|!
name|old
operator|.
name|equals
argument_list|(
name|in
argument_list|)
condition|)
do|;
return|return
name|replaceGenericNodes
argument_list|(
name|in
argument_list|)
return|;
block|}
DECL|method|replaceGenericNodes (final Predicate<T> in)
specifier|protected
name|Predicate
argument_list|<
name|T
argument_list|>
name|replaceGenericNodes
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|T
argument_list|>
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|.
name|getClass
argument_list|()
operator|==
name|NotPredicate
operator|.
name|class
condition|)
block|{
return|return
name|not
argument_list|(
name|replaceGenericNodes
argument_list|(
name|in
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|in
operator|.
name|getClass
argument_list|()
operator|==
name|AndPredicate
operator|.
name|class
condition|)
block|{
name|List
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|n
init|=
operator|new
name|ArrayList
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
name|in
operator|.
name|getChildCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Predicate
argument_list|<
name|T
argument_list|>
name|c
range|:
name|in
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|n
operator|.
name|add
argument_list|(
name|replaceGenericNodes
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|and
argument_list|(
name|n
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|in
operator|.
name|getClass
argument_list|()
operator|==
name|OrPredicate
operator|.
name|class
condition|)
block|{
name|List
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|n
init|=
operator|new
name|ArrayList
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
name|in
operator|.
name|getChildCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Predicate
argument_list|<
name|T
argument_list|>
name|c
range|:
name|in
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|n
operator|.
name|add
argument_list|(
name|replaceGenericNodes
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|or
argument_list|(
name|n
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|in
return|;
block|}
block|}
DECL|method|rewriteOne (Predicate<T> input)
specifier|private
name|Predicate
argument_list|<
name|T
argument_list|>
name|rewriteOne
parameter_list|(
name|Predicate
argument_list|<
name|T
argument_list|>
name|input
parameter_list|)
block|{
name|Predicate
argument_list|<
name|T
argument_list|>
name|best
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RewriteRule
argument_list|<
name|T
argument_list|>
name|r
range|:
name|rewriteRules
control|)
block|{
name|Predicate
argument_list|<
name|T
argument_list|>
name|n
init|=
name|r
operator|.
name|rewrite
argument_list|(
name|this
argument_list|,
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|useBestCost
argument_list|()
condition|)
block|{
return|return
name|n
return|;
block|}
if|if
condition|(
name|best
operator|==
literal|null
operator|||
name|n
operator|.
name|getCost
argument_list|()
operator|<
name|best
operator|.
name|getCost
argument_list|()
condition|)
block|{
name|best
operator|=
name|n
expr_stmt|;
continue|continue;
block|}
block|}
return|return
name|best
operator|!=
literal|null
condition|?
name|best
else|:
name|input
return|;
block|}
DECL|class|MatchResult
specifier|private
specifier|static
class|class
name|MatchResult
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|FAIL
specifier|private
specifier|static
specifier|final
name|MatchResult
argument_list|<
name|?
argument_list|>
name|FAIL
init|=
operator|new
name|MatchResult
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|OK
specifier|private
specifier|static
specifier|final
name|MatchResult
argument_list|<
name|?
argument_list|>
name|OK
init|=
operator|new
name|MatchResult
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|fail ()
specifier|static
parameter_list|<
name|T
parameter_list|>
name|MatchResult
argument_list|<
name|T
argument_list|>
name|fail
parameter_list|()
block|{
return|return
operator|(
name|MatchResult
argument_list|<
name|T
argument_list|>
operator|)
name|FAIL
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|ok ()
specifier|static
parameter_list|<
name|T
parameter_list|>
name|MatchResult
argument_list|<
name|T
argument_list|>
name|ok
parameter_list|()
block|{
return|return
operator|(
name|MatchResult
argument_list|<
name|T
argument_list|>
operator|)
name|OK
return|;
block|}
DECL|field|extra
specifier|final
name|Predicate
argument_list|<
name|T
argument_list|>
name|extra
decl_stmt|;
DECL|method|MatchResult (Predicate<T> extra)
name|MatchResult
parameter_list|(
name|Predicate
argument_list|<
name|T
argument_list|>
name|extra
parameter_list|)
block|{
name|this
operator|.
name|extra
operator|=
name|extra
expr_stmt|;
block|}
DECL|method|success ()
name|boolean
name|success
parameter_list|()
block|{
return|return
name|this
operator|!=
name|FAIL
return|;
block|}
block|}
DECL|method|match (final Map<String, Predicate<T>> outVars, final Predicate<T> pattern, final Predicate<T> actual)
specifier|private
name|MatchResult
argument_list|<
name|T
argument_list|>
name|match
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|outVars
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|T
argument_list|>
name|pattern
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|T
argument_list|>
name|actual
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|instanceof
name|VariablePredicate
condition|)
block|{
specifier|final
name|VariablePredicate
argument_list|<
name|T
argument_list|>
name|v
init|=
operator|(
name|VariablePredicate
argument_list|<
name|T
argument_list|>
operator|)
name|pattern
decl_stmt|;
specifier|final
name|MatchResult
argument_list|<
name|T
argument_list|>
name|r
init|=
name|match
argument_list|(
name|outVars
argument_list|,
name|v
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|actual
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|success
argument_list|()
condition|)
block|{
name|Predicate
argument_list|<
name|T
argument_list|>
name|old
init|=
name|outVars
operator|.
name|get
argument_list|(
name|v
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
name|outVars
operator|.
name|put
argument_list|(
name|v
operator|.
name|getName
argument_list|()
argument_list|,
name|actual
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
elseif|else
if|if
condition|(
name|old
operator|.
name|equals
argument_list|(
name|actual
argument_list|)
condition|)
block|{
return|return
name|r
return|;
block|}
else|else
block|{
return|return
name|MatchResult
operator|.
name|fail
argument_list|()
return|;
block|}
block|}
else|else
block|{
return|return
name|MatchResult
operator|.
name|fail
argument_list|()
return|;
block|}
block|}
specifier|final
name|int
name|cnt
init|=
name|pattern
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|isAND
argument_list|(
name|pattern
argument_list|)
operator|&&
name|isAND
argument_list|(
name|actual
argument_list|)
operator|)
comment|//
operator|||
operator|(
name|isOR
argument_list|(
name|pattern
argument_list|)
operator|&&
name|isOR
argument_list|(
name|actual
argument_list|)
operator|)
comment|//
operator|||
operator|(
name|isNOT
argument_list|(
name|pattern
argument_list|)
operator|&&
name|isNOT
argument_list|(
name|actual
argument_list|)
operator|)
comment|//
condition|)
block|{
comment|// Order doesn't actually matter here. That does make our logic quite
comment|// a bit more complex as we need to consult each child at most once,
comment|// but in any order.
comment|//
specifier|final
name|LinkedList
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|have
init|=
name|dup
argument_list|(
name|actual
argument_list|)
decl_stmt|;
specifier|final
name|LinkedList
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|extra
init|=
operator|new
name|LinkedList
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Predicate
argument_list|<
name|T
argument_list|>
name|pat
range|:
name|pattern
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|i
init|=
name|have
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|MatchResult
argument_list|<
name|T
argument_list|>
name|r
init|=
name|match
argument_list|(
name|outVars
argument_list|,
name|pat
argument_list|,
name|i
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|success
argument_list|()
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|extra
operator|!=
literal|null
condition|)
block|{
name|extra
operator|.
name|add
argument_list|(
name|r
operator|.
name|extra
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
return|return
name|MatchResult
operator|.
name|fail
argument_list|()
return|;
block|}
block|}
name|have
operator|.
name|addAll
argument_list|(
name|extra
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|have
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|MatchResult
operator|.
name|ok
argument_list|()
return|;
case|case
literal|1
case|:
if|if
condition|(
name|isNOT
argument_list|(
name|actual
argument_list|)
condition|)
block|{
return|return
operator|new
name|MatchResult
argument_list|<
name|T
argument_list|>
argument_list|(
name|actual
operator|.
name|copy
argument_list|(
name|have
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|new
name|MatchResult
argument_list|<
name|T
argument_list|>
argument_list|(
name|have
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
default|default:
return|return
operator|new
name|MatchResult
argument_list|<
name|T
argument_list|>
argument_list|(
name|actual
operator|.
name|copy
argument_list|(
name|have
argument_list|)
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|pattern
operator|.
name|equals
argument_list|(
name|actual
argument_list|)
condition|)
block|{
return|return
name|MatchResult
operator|.
name|ok
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|pattern
operator|instanceof
name|WildPatternPredicate
operator|&&
name|actual
operator|instanceof
name|OperatorPredicate
operator|&&
operator|(
operator|(
name|OperatorPredicate
argument_list|<
name|T
argument_list|>
operator|)
name|pattern
operator|)
operator|.
name|getOperator
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|OperatorPredicate
argument_list|<
name|T
argument_list|>
operator|)
name|actual
operator|)
operator|.
name|getOperator
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|MatchResult
operator|.
name|ok
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|MatchResult
operator|.
name|fail
argument_list|()
return|;
block|}
block|}
DECL|method|dup (final Predicate<T> actual)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|LinkedList
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|dup
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|T
argument_list|>
name|actual
parameter_list|)
block|{
return|return
operator|new
name|LinkedList
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
name|actual
operator|.
name|getChildren
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Denotes a method which wants to replace a predicate expression.    *<p>    * This annotation must be applied to a public method which returns    * {@link Predicate}. The arguments of the method should {@link Predicate}, or    * any subclass of it. The annotation value is a query language string which    * describes the subtree this rewrite applies to. Method arguments should be    * named with a {@link Named} annotation, and the same names should be used in    * the query.    *<p>    * For example:    *    *<pre>    *&#064;Rewrite(&quot;A=(owner:*) B=(status:*)&quot;)    * public Predicate ownerStatus(@Named(&quot;A&quot;) OperatorPredicate owner,    *&#064;Named(&quot;B&quot;) OperatorPredicate status) {    * }    *</pre>    *    * matches an AND Predicate with at least two children, one being an operator    * predicate called "owner" and the other being an operator predicate called    * "status". The variables in the query are matched by name against the    * parameters.    */
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|ElementType
operator|.
name|METHOD
argument_list|)
DECL|annotation|Rewrite
specifier|protected
annotation_defn|@interface
name|Rewrite
block|{
DECL|method|value ()
name|String
name|value
parameter_list|()
function_decl|;
block|}
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|ElementType
operator|.
name|METHOD
argument_list|)
DECL|annotation|NoCostComputation
specifier|protected
annotation_defn|@interface
name|NoCostComputation
block|{   }
comment|/** Applies a rewrite rule to a Predicate. */
DECL|interface|RewriteRule
specifier|protected
interface|interface
name|RewriteRule
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**      * Apply a rewrite rule to the Predicate.      *      * @param input the input predicate to be tested, and possibly rewritten.      * @return a rewritten form of the predicate if this rule matches with the      *         tree {@code input} and has a rewrite for it; {@code null} if this      *         rule does not want this predicate.      */
DECL|method|rewrite (QueryRewriter<T> rewriter, Predicate<T> input)
name|Predicate
argument_list|<
name|T
argument_list|>
name|rewrite
parameter_list|(
name|QueryRewriter
argument_list|<
name|T
argument_list|>
name|rewriter
parameter_list|,
name|Predicate
argument_list|<
name|T
argument_list|>
name|input
parameter_list|)
function_decl|;
comment|/** @return true if the best cost should be selected. */
DECL|method|useBestCost ()
name|boolean
name|useBestCost
parameter_list|()
function_decl|;
block|}
comment|/** Implements the magic behind {@link Rewrite} annotations. */
DECL|class|MethodRewrite
specifier|private
specifier|static
class|class
name|MethodRewrite
parameter_list|<
name|T
parameter_list|>
implements|implements
name|RewriteRule
argument_list|<
name|T
argument_list|>
block|{
DECL|field|method
specifier|private
specifier|final
name|Method
name|method
decl_stmt|;
DECL|field|pattern
specifier|private
specifier|final
name|Predicate
argument_list|<
name|T
argument_list|>
name|pattern
decl_stmt|;
DECL|field|argNames
specifier|private
specifier|final
name|String
index|[]
name|argNames
decl_stmt|;
DECL|field|argTypes
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
index|[]
name|argTypes
decl_stmt|;
DECL|field|useBestCost
specifier|private
specifier|final
name|boolean
name|useBestCost
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|MethodRewrite (QueryBuilder<T> queryBuilder, String patternText, Method m)
name|MethodRewrite
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|queryBuilder
parameter_list|,
name|String
name|patternText
parameter_list|,
name|Method
name|m
parameter_list|)
block|{
name|method
operator|=
name|m
expr_stmt|;
name|useBestCost
operator|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|NoCostComputation
operator|.
name|class
argument_list|)
operator|==
literal|null
expr_stmt|;
name|Predicate
argument_list|<
name|T
argument_list|>
name|p
decl_stmt|;
try|try
block|{
name|p
operator|=
name|queryBuilder
operator|.
name|parse
argument_list|(
name|patternText
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Bad @Rewrite(\""
operator|+
name|patternText
operator|+
literal|"\")"
operator|+
literal|" on "
operator|+
name|m
operator|.
name|toGenericString
argument_list|()
operator|+
literal|" in "
operator|+
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Predicate
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|m
operator|.
name|toGenericString
argument_list|()
operator|+
literal|" in "
operator|+
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|+
literal|" must return "
operator|+
name|Predicate
operator|.
name|class
argument_list|)
throw|;
block|}
name|pattern
operator|=
name|p
expr_stmt|;
name|argNames
operator|=
operator|new
name|String
index|[
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
name|argTypes
operator|=
operator|new
name|Class
index|[
name|argNames
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Named
name|name
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Annotation
name|a
range|:
name|method
operator|.
name|getParameterAnnotations
argument_list|()
index|[
name|i
index|]
control|)
block|{
if|if
condition|(
name|a
operator|instanceof
name|Named
condition|)
block|{
name|name
operator|=
operator|(
name|Named
operator|)
name|a
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Argument "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|" of "
operator|+
name|m
operator|.
name|toGenericString
argument_list|()
operator|+
literal|" in "
operator|+
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|+
literal|" has no @Named annotation"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Predicate
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|i
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Argument "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|" of "
operator|+
name|m
operator|.
name|toGenericString
argument_list|()
operator|+
literal|" in "
operator|+
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|+
literal|" must be of type "
operator|+
name|Predicate
operator|.
name|class
argument_list|)
throw|;
block|}
name|argNames
index|[
name|i
index|]
operator|=
name|name
operator|.
name|value
argument_list|()
expr_stmt|;
name|argTypes
index|[
name|i
index|]
operator|=
operator|(
name|Class
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
operator|)
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|useBestCost ()
specifier|public
name|boolean
name|useBestCost
parameter_list|()
block|{
return|return
name|useBestCost
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|rewrite (QueryRewriter<T> rewriter, final Predicate<T> input)
specifier|public
name|Predicate
argument_list|<
name|T
argument_list|>
name|rewrite
parameter_list|(
name|QueryRewriter
argument_list|<
name|T
argument_list|>
name|rewriter
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|T
argument_list|>
name|input
parameter_list|)
block|{
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|MatchResult
argument_list|<
name|T
argument_list|>
name|res
init|=
name|rewriter
operator|.
name|match
argument_list|(
name|args
argument_list|,
name|pattern
argument_list|,
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|success
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Predicate
index|[]
name|argList
init|=
operator|new
name|Predicate
index|[
name|argNames
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argList
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|argList
index|[
name|i
index|]
operator|=
name|args
operator|.
name|get
argument_list|(
name|argNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|argList
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|a
init|=
literal|"@Named(\""
operator|+
name|argNames
index|[
name|i
index|]
operator|+
literal|"\")"
decl_stmt|;
throw|throw
name|error
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"No value bound for "
operator|+
name|a
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|argTypes
index|[
name|i
index|]
operator|.
name|isInstance
argument_list|(
name|argList
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|final
name|Predicate
argument_list|<
name|T
argument_list|>
name|rep
decl_stmt|;
try|try
block|{
name|rep
operator|=
operator|(
name|Predicate
argument_list|<
name|T
argument_list|>
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|rewriter
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|argList
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
name|error
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
name|error
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
name|error
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|rep
operator|instanceof
name|RewritePredicate
condition|)
block|{
operator|(
operator|(
name|RewritePredicate
operator|)
name|rep
operator|)
operator|.
name|init
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|argList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|res
operator|.
name|extra
operator|==
literal|null
condition|)
block|{
return|return
name|rep
return|;
block|}
name|Predicate
argument_list|<
name|T
argument_list|>
name|extra
init|=
name|removeDuplicates
argument_list|(
name|res
operator|.
name|extra
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|T
argument_list|>
index|[]
name|newArgs
init|=
operator|new
name|Predicate
index|[]
block|{
name|extra
block|,
name|rep
block|}
decl_stmt|;
return|return
name|input
operator|.
name|copy
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|newArgs
argument_list|)
argument_list|)
return|;
block|}
DECL|method|error (Throwable e)
specifier|private
name|IllegalArgumentException
name|error
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Cannot apply "
operator|+
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
DECL|method|removeDuplicates (Predicate<T> in)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|removeDuplicates
parameter_list|(
name|Predicate
argument_list|<
name|T
argument_list|>
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|n
init|=
name|removeDuplicates
argument_list|(
name|in
operator|.
name|getChildren
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|(
name|isAND
argument_list|(
name|in
argument_list|)
operator|||
name|isOR
argument_list|(
name|in
argument_list|)
operator|)
condition|)
block|{
name|in
operator|=
name|n
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|=
name|in
operator|.
name|copy
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|in
return|;
block|}
DECL|method|removeDuplicates (List<Predicate<T>> n)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|removeDuplicates
parameter_list|(
name|List
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|n
parameter_list|)
block|{
name|List
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Predicate
argument_list|<
name|T
argument_list|>
name|p
range|:
name|n
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
DECL|method|expand (final List<Predicate<T>> out, final List<Predicate<T>> allOR, final List<Predicate<T>> tmp, final List<Predicate<T>> nonOR)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|expand
parameter_list|(
specifier|final
name|List
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|out
parameter_list|,
specifier|final
name|List
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|allOR
parameter_list|,
specifier|final
name|List
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|tmp
parameter_list|,
specifier|final
name|List
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|nonOR
parameter_list|)
block|{
if|if
condition|(
name|tmp
operator|.
name|size
argument_list|()
operator|==
name|allOR
operator|.
name|size
argument_list|()
condition|)
block|{
specifier|final
name|int
name|sz
init|=
name|nonOR
operator|.
name|size
argument_list|()
operator|+
name|tmp
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
name|newList
init|=
operator|new
name|ArrayList
argument_list|<
name|Predicate
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
name|sz
argument_list|)
decl_stmt|;
name|newList
operator|.
name|addAll
argument_list|(
name|nonOR
argument_list|)
expr_stmt|;
name|newList
operator|.
name|addAll
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|Predicate
operator|.
name|and
argument_list|(
name|newList
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
specifier|final
name|Predicate
argument_list|<
name|T
argument_list|>
name|c
range|:
name|allOR
operator|.
name|get
argument_list|(
name|tmp
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|getChildren
argument_list|()
control|)
block|{
try|try
block|{
name|tmp
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|expand
argument_list|(
name|out
argument_list|,
name|allOR
argument_list|,
name|tmp
argument_list|,
name|nonOR
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tmp
operator|.
name|remove
argument_list|(
name|tmp
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|isAND (final Predicate<T> p)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|isAND
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|T
argument_list|>
name|p
parameter_list|)
block|{
return|return
name|p
operator|instanceof
name|AndPredicate
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|isOR (final Predicate<T> p)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|isOR
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|T
argument_list|>
name|p
parameter_list|)
block|{
return|return
name|p
operator|instanceof
name|OrPredicate
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|isNOT (final Predicate<T> p)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|isNOT
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|T
argument_list|>
name|p
parameter_list|)
block|{
return|return
name|p
operator|instanceof
name|NotPredicate
return|;
block|}
block|}
end_class

end_unit

