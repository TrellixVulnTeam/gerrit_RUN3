begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.util
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|RangeUtil
specifier|public
specifier|final
class|class
name|RangeUtil
block|{
DECL|field|RANGE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|RANGE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(>|>=|=|<|<=|)([+-]?\\d+)$"
argument_list|)
decl_stmt|;
DECL|method|RangeUtil ()
specifier|private
name|RangeUtil
parameter_list|()
block|{}
DECL|class|Range
specifier|public
specifier|static
class|class
name|Range
block|{
comment|/** The prefix of the query, before the range component. */
DECL|field|prefix
specifier|public
specifier|final
name|String
name|prefix
decl_stmt|;
comment|/** The minimum value specified in the query, inclusive. */
DECL|field|min
specifier|public
specifier|final
name|int
name|min
decl_stmt|;
comment|/** The maximum value specified in the query, inclusive. */
DECL|field|max
specifier|public
specifier|final
name|int
name|max
decl_stmt|;
DECL|method|Range (String prefix, int min, int max)
specifier|public
name|Range
parameter_list|(
name|String
name|prefix
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
block|}
comment|/**    * Determine the range of values being requested in the given query.    *    * @param rangeQuery the raw query, e.g. "added:>12345"    * @param minValue the minimum possible value for the field, inclusive    * @param maxValue the maximum possible value for the field, inclusive    * @return the calculated {@link Range}, or null if the query is invalid    */
annotation|@
name|Nullable
DECL|method|getRange (String rangeQuery, int minValue, int maxValue)
specifier|public
specifier|static
name|Range
name|getRange
parameter_list|(
name|String
name|rangeQuery
parameter_list|,
name|int
name|minValue
parameter_list|,
name|int
name|maxValue
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|RANGE_PATTERN
operator|.
name|matcher
argument_list|(
name|rangeQuery
argument_list|)
decl_stmt|;
name|String
name|prefix
decl_stmt|;
name|String
name|test
decl_stmt|;
name|Integer
name|queryInt
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|prefix
operator|=
name|rangeQuery
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|m
operator|.
name|start
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|queryInt
operator|=
name|value
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryInt
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
return|return
name|getRange
argument_list|(
name|prefix
argument_list|,
name|test
argument_list|,
name|queryInt
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
return|;
block|}
comment|/**    * Determine the range of values being requested in the given query.    *    * @param prefix a prefix string which is copied into the range    * @param test the test operator, one of&gt;,&gt;=, =,&lt;, or&lt;=    * @param queryInt the integer being queried    * @param minValue the minimum possible value for the field, inclusive    * @param maxValue the maximum possible value for the field, inclusive    * @return the calculated {@link Range}    */
DECL|method|getRange ( String prefix, String test, int queryInt, int minValue, int maxValue)
specifier|public
specifier|static
name|Range
name|getRange
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|test
parameter_list|,
name|int
name|queryInt
parameter_list|,
name|int
name|minValue
parameter_list|,
name|int
name|maxValue
parameter_list|)
block|{
name|int
name|min
decl_stmt|,
name|max
decl_stmt|;
switch|switch
condition|(
name|test
condition|)
block|{
case|case
literal|"="
case|:
default|default:
name|min
operator|=
name|max
operator|=
name|queryInt
expr_stmt|;
break|break;
case|case
literal|">"
case|:
name|min
operator|=
name|Ints
operator|.
name|saturatedCast
argument_list|(
name|queryInt
operator|+
literal|1L
argument_list|)
expr_stmt|;
name|max
operator|=
name|maxValue
expr_stmt|;
break|break;
case|case
literal|">="
case|:
name|min
operator|=
name|queryInt
expr_stmt|;
name|max
operator|=
name|maxValue
expr_stmt|;
break|break;
case|case
literal|"<"
case|:
name|min
operator|=
name|minValue
expr_stmt|;
name|max
operator|=
name|Ints
operator|.
name|saturatedCast
argument_list|(
name|queryInt
operator|-
literal|1L
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"<="
case|:
name|min
operator|=
name|minValue
expr_stmt|;
name|max
operator|=
name|queryInt
expr_stmt|;
break|break;
block|}
return|return
operator|new
name|Range
argument_list|(
name|prefix
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
DECL|method|value (String value)
specifier|private
specifier|static
name|Integer
name|value
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|Ints
operator|.
name|tryParse
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
end_class

end_unit

