begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.util
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|SubmoduleSubscription
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * It parses from a configuration file submodule sections.  *  *<p>Example of submodule sections:  *  *<pre>  * [submodule "project-a"]  *     url = http://localhost/a  *     path = a  *     branch = .  *  * [submodule "project-b"]  *     url = http://localhost/b  *     path = b  *     branch = refs/heads/test  *</pre>  */
end_comment

begin_class
DECL|class|SubmoduleSectionParser
specifier|public
class|class
name|SubmoduleSectionParser
block|{
DECL|field|bbc
specifier|private
specifier|final
name|Config
name|bbc
decl_stmt|;
DECL|field|canonicalWebUrl
specifier|private
specifier|final
name|String
name|canonicalWebUrl
decl_stmt|;
DECL|field|superProjectBranch
specifier|private
specifier|final
name|Branch
operator|.
name|NameKey
name|superProjectBranch
decl_stmt|;
DECL|method|SubmoduleSectionParser ( Config bbc, String canonicalWebUrl, Branch.NameKey superProjectBranch)
specifier|public
name|SubmoduleSectionParser
parameter_list|(
name|Config
name|bbc
parameter_list|,
name|String
name|canonicalWebUrl
parameter_list|,
name|Branch
operator|.
name|NameKey
name|superProjectBranch
parameter_list|)
block|{
name|this
operator|.
name|bbc
operator|=
name|bbc
expr_stmt|;
name|this
operator|.
name|canonicalWebUrl
operator|=
name|canonicalWebUrl
expr_stmt|;
name|this
operator|.
name|superProjectBranch
operator|=
name|superProjectBranch
expr_stmt|;
block|}
DECL|method|parseAllSections ()
specifier|public
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|parseAllSections
parameter_list|()
block|{
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|parsedSubscriptions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|id
range|:
name|bbc
operator|.
name|getSubsections
argument_list|(
literal|"submodule"
argument_list|)
control|)
block|{
specifier|final
name|SubmoduleSubscription
name|subscription
init|=
name|parse
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|subscription
operator|!=
literal|null
condition|)
block|{
name|parsedSubscriptions
operator|.
name|add
argument_list|(
name|subscription
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|parsedSubscriptions
return|;
block|}
DECL|method|parse (final String id)
specifier|private
name|SubmoduleSubscription
name|parse
parameter_list|(
specifier|final
name|String
name|id
parameter_list|)
block|{
specifier|final
name|String
name|url
init|=
name|bbc
operator|.
name|getString
argument_list|(
literal|"submodule"
argument_list|,
name|id
argument_list|,
literal|"url"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|bbc
operator|.
name|getString
argument_list|(
literal|"submodule"
argument_list|,
name|id
argument_list|,
literal|"path"
argument_list|)
decl_stmt|;
name|String
name|branch
init|=
name|bbc
operator|.
name|getString
argument_list|(
literal|"submodule"
argument_list|,
name|id
argument_list|,
literal|"branch"
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|url
operator|!=
literal|null
operator|&&
name|url
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|path
operator|!=
literal|null
operator|&&
name|path
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|branch
operator|!=
literal|null
operator|&&
name|branch
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// All required fields filled.
name|String
name|project
decl_stmt|;
if|if
condition|(
name|branch
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|branch
operator|=
name|superProjectBranch
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// relative URL
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"../"
argument_list|)
condition|)
block|{
comment|// prefix with a slash for easier relative path walks
name|project
operator|=
literal|'/'
operator|+
name|superProjectBranch
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|String
name|hostPart
init|=
name|url
decl_stmt|;
while|while
condition|(
name|hostPart
operator|.
name|startsWith
argument_list|(
literal|"../"
argument_list|)
condition|)
block|{
name|int
name|lastSlash
init|=
name|project
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastSlash
operator|<
literal|0
condition|)
block|{
comment|// too many levels up, ignore for now
return|return
literal|null
return|;
block|}
name|project
operator|=
name|project
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastSlash
argument_list|)
expr_stmt|;
name|hostPart
operator|=
name|hostPart
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|project
operator|=
name|project
operator|+
literal|"/"
operator|+
name|hostPart
expr_stmt|;
comment|// remove leading '/'
name|project
operator|=
name|project
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// It is actually an URI. It could be ssh://localhost/project-a.
name|URI
name|targetServerURI
init|=
operator|new
name|URI
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|URI
name|thisServerURI
init|=
operator|new
name|URI
argument_list|(
name|canonicalWebUrl
argument_list|)
decl_stmt|;
name|String
name|thisHost
init|=
name|thisServerURI
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|targetHost
init|=
name|targetServerURI
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|thisHost
operator|==
literal|null
operator|||
name|targetHost
operator|==
literal|null
operator|||
operator|!
name|targetHost
operator|.
name|equalsIgnoreCase
argument_list|(
name|thisHost
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|p1
init|=
name|targetServerURI
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|p2
init|=
name|thisServerURI
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|p1
operator|.
name|startsWith
argument_list|(
name|p2
argument_list|)
condition|)
block|{
comment|// When we are running the server at
comment|// http://server/my-gerrit/ but the subscription is for
comment|// http://server/other-teams-gerrit/
return|return
literal|null
return|;
block|}
comment|// skip common part
name|project
operator|=
name|p1
operator|.
name|substring
argument_list|(
name|p2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|project
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|project
operator|=
name|project
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|.
name|endsWith
argument_list|(
name|Constants
operator|.
name|DOT_GIT_EXT
argument_list|)
condition|)
block|{
name|project
operator|=
name|project
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
comment|//
name|project
operator|.
name|length
argument_list|()
operator|-
name|Constants
operator|.
name|DOT_GIT_EXT
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Project
operator|.
name|NameKey
name|projectKey
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|project
argument_list|)
decl_stmt|;
return|return
operator|new
name|SubmoduleSubscription
argument_list|(
name|superProjectBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|projectKey
argument_list|,
name|branch
argument_list|)
argument_list|,
name|path
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// Error in url syntax (in fact it is uri syntax)
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

