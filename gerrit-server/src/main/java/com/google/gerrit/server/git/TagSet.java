begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectIdSerialization
operator|.
name|readNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectIdSerialization
operator|.
name|writeNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AnyObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectIdOwnerMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_class
DECL|class|TagSet
class|class
name|TagSet
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TagSet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|projectName
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|projectName
decl_stmt|;
DECL|field|refs
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CachedRef
argument_list|>
name|refs
decl_stmt|;
DECL|field|tags
specifier|private
specifier|final
name|ObjectIdOwnerMap
argument_list|<
name|Tag
argument_list|>
name|tags
decl_stmt|;
DECL|method|TagSet (Project.NameKey projectName)
name|TagSet
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|)
block|{
name|this
operator|.
name|projectName
operator|=
name|projectName
expr_stmt|;
name|this
operator|.
name|refs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|tags
operator|=
operator|new
name|ObjectIdOwnerMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|lookupTag (AnyObjectId id)
name|Tag
name|lookupTag
parameter_list|(
name|AnyObjectId
name|id
parameter_list|)
block|{
return|return
name|tags
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|updateFastForward (String refName, ObjectId oldValue, ObjectId newValue)
name|boolean
name|updateFastForward
parameter_list|(
name|String
name|refName
parameter_list|,
name|ObjectId
name|oldValue
parameter_list|,
name|ObjectId
name|newValue
parameter_list|)
block|{
name|CachedRef
name|ref
init|=
name|refs
operator|.
name|get
argument_list|(
name|refName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
comment|// compareAndSet works on reference equality, but this operation
comment|// wants to use object equality. Switch out oldValue with cur so the
comment|// compareAndSet will function correctly for this operation.
comment|//
name|ObjectId
name|cur
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|cur
operator|.
name|equals
argument_list|(
name|oldValue
argument_list|)
condition|)
block|{
return|return
name|ref
operator|.
name|compareAndSet
argument_list|(
name|cur
argument_list|,
name|newValue
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|prepare (TagMatcher m)
name|void
name|prepare
parameter_list|(
name|TagMatcher
name|m
parameter_list|)
block|{
name|RevWalk
name|rw
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|Ref
name|currentRef
range|:
name|m
operator|.
name|include
control|)
block|{
if|if
condition|(
name|currentRef
operator|.
name|isSymbolic
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|currentRef
operator|.
name|getObjectId
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|CachedRef
name|savedRef
init|=
name|refs
operator|.
name|get
argument_list|(
name|currentRef
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|savedRef
operator|==
literal|null
condition|)
block|{
comment|// If the reference isn't known to the set, return null
comment|// and force the caller to rebuild the set in a new copy.
name|m
operator|.
name|newRefs
operator|.
name|add
argument_list|(
name|currentRef
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// The reference has not been moved. It can be used as-is.
name|ObjectId
name|savedObjectId
init|=
name|savedRef
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentRef
operator|.
name|getObjectId
argument_list|()
operator|.
name|equals
argument_list|(
name|savedObjectId
argument_list|)
condition|)
block|{
name|m
operator|.
name|mask
operator|.
name|set
argument_list|(
name|savedRef
operator|.
name|flag
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Check on-the-fly to see if the branch still reaches the tag.
comment|// This is very likely for a branch that fast-forwarded.
try|try
block|{
if|if
condition|(
name|rw
operator|==
literal|null
condition|)
block|{
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|m
operator|.
name|db
argument_list|)
expr_stmt|;
name|rw
operator|.
name|setRetainBody
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|RevCommit
name|savedCommit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|savedObjectId
argument_list|)
decl_stmt|;
name|RevCommit
name|currentCommit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|currentRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rw
operator|.
name|isMergedInto
argument_list|(
name|savedCommit
argument_list|,
name|currentCommit
argument_list|)
condition|)
block|{
comment|// Fast-forward. Safely update the reference in-place.
name|savedRef
operator|.
name|compareAndSet
argument_list|(
name|savedObjectId
argument_list|,
name|currentRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|mask
operator|.
name|set
argument_list|(
name|savedRef
operator|.
name|flag
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// The branch rewound. Walk the list of commits removed from
comment|// the reference. If any matches to a tag, this has to be removed.
name|boolean
name|err
init|=
literal|false
decl_stmt|;
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|savedCommit
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markUninteresting
argument_list|(
name|currentCommit
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RevCommit
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|Tag
name|tag
init|=
name|tags
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|!=
literal|null
operator|&&
name|tag
operator|.
name|refFlags
operator|.
name|get
argument_list|(
name|savedRef
operator|.
name|flag
argument_list|)
condition|)
block|{
name|m
operator|.
name|lostRefs
operator|.
name|add
argument_list|(
operator|new
name|TagMatcher
operator|.
name|LostRef
argument_list|(
name|tag
argument_list|,
name|savedRef
operator|.
name|flag
argument_list|)
argument_list|)
expr_stmt|;
name|err
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|err
condition|)
block|{
comment|// All of the tags are still reachable. Update in-place.
name|savedRef
operator|.
name|compareAndSet
argument_list|(
name|savedObjectId
argument_list|,
name|currentRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|mask
operator|.
name|set
argument_list|(
name|savedRef
operator|.
name|flag
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
comment|// Defer a cache update until later. No conclusion can be made
comment|// based on an exception reading from the repository storage.
name|log
operator|.
name|warn
argument_list|(
literal|"Error checking tags of "
operator|+
name|projectName
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|rw
operator|!=
literal|null
condition|)
block|{
name|rw
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|build (Repository git, TagSet old, TagMatcher m)
name|void
name|build
parameter_list|(
name|Repository
name|git
parameter_list|,
name|TagSet
name|old
parameter_list|,
name|TagMatcher
name|m
parameter_list|)
block|{
if|if
condition|(
name|old
operator|!=
literal|null
operator|&&
name|m
operator|!=
literal|null
operator|&&
name|refresh
argument_list|(
name|old
argument_list|,
name|m
argument_list|)
condition|)
block|{
return|return;
block|}
name|TagWalk
name|rw
init|=
operator|new
name|TagWalk
argument_list|(
name|git
argument_list|)
decl_stmt|;
name|rw
operator|.
name|setRetainBody
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Ref
name|ref
range|:
name|git
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|RefDatabase
operator|.
name|ALL
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|skip
argument_list|(
name|ref
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|isTag
argument_list|(
name|ref
argument_list|)
condition|)
block|{
comment|// For a tag, remember where it points to.
name|addTag
argument_list|(
name|rw
argument_list|,
name|git
operator|.
name|peel
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// New reference to include in the set.
name|addRef
argument_list|(
name|rw
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Traverse the complete history. Copy any flags from a commit to
comment|// all of its ancestors. This automatically updates any Tag object
comment|// as the TagCommit and the stored Tag object share the same
comment|// underlying bit set.
name|TagCommit
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
operator|(
name|TagCommit
operator|)
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|BitSet
name|mine
init|=
name|c
operator|.
name|refFlags
decl_stmt|;
name|int
name|pCnt
init|=
name|c
operator|.
name|getParentCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pIdx
init|=
literal|0
init|;
name|pIdx
operator|<
name|pCnt
condition|;
name|pIdx
operator|++
control|)
block|{
operator|(
operator|(
name|TagCommit
operator|)
name|c
operator|.
name|getParent
argument_list|(
name|pIdx
argument_list|)
operator|)
operator|.
name|refFlags
operator|.
name|or
argument_list|(
name|mine
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error building tags for repository "
operator|+
name|projectName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rw
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|readObject (ObjectInputStream in)
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|int
name|refCnt
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|refCnt
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|int
name|flag
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|ObjectId
name|id
init|=
name|readNotNull
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|refs
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|CachedRef
argument_list|(
name|flag
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|tagCnt
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tagCnt
condition|;
name|i
operator|++
control|)
block|{
name|ObjectId
name|id
init|=
name|readNotNull
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|BitSet
name|flags
init|=
operator|(
name|BitSet
operator|)
name|in
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|tags
operator|.
name|add
argument_list|(
operator|new
name|Tag
argument_list|(
name|id
argument_list|,
name|flags
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeObject (ObjectOutputStream out)
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|refs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CachedRef
argument_list|>
name|e
range|:
name|refs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|flag
argument_list|)
expr_stmt|;
name|writeNotNull
argument_list|(
name|out
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|tags
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Tag
name|tag
range|:
name|tags
control|)
block|{
name|writeNotNull
argument_list|(
name|out
argument_list|,
name|tag
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|tag
operator|.
name|refFlags
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|refresh (TagSet old, TagMatcher m)
specifier|private
name|boolean
name|refresh
parameter_list|(
name|TagSet
name|old
parameter_list|,
name|TagMatcher
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|.
name|newRefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No new references is a simple update. Copy from the old set.
name|copy
argument_list|(
name|old
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// Only permit a refresh if all new references start from the tip of
comment|// an existing references. This happens some of the time within a
comment|// Gerrit Code Review server, perhaps about 50% of new references.
comment|// Since a complete rebuild is so costly, try this approach first.
name|Map
argument_list|<
name|ObjectId
argument_list|,
name|Integer
argument_list|>
name|byObj
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CachedRef
name|r
range|:
name|old
operator|.
name|refs
operator|.
name|values
argument_list|()
control|)
block|{
name|ObjectId
name|id
init|=
name|r
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|byObj
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|byObj
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|r
operator|.
name|flag
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Ref
name|newRef
range|:
name|m
operator|.
name|newRefs
control|)
block|{
name|ObjectId
name|id
init|=
name|newRef
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|refs
operator|.
name|containsKey
argument_list|(
name|newRef
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|!
name|byObj
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|copy
argument_list|(
name|old
argument_list|,
name|m
argument_list|)
expr_stmt|;
for|for
control|(
name|Ref
name|newRef
range|:
name|m
operator|.
name|newRefs
control|)
block|{
name|ObjectId
name|id
init|=
name|newRef
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|refs
operator|.
name|containsKey
argument_list|(
name|newRef
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|int
name|srcFlag
init|=
name|byObj
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|int
name|newFlag
init|=
name|refs
operator|.
name|size
argument_list|()
decl_stmt|;
name|refs
operator|.
name|put
argument_list|(
name|newRef
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|CachedRef
argument_list|(
name|newRef
argument_list|,
name|newFlag
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Tag
name|tag
range|:
name|tags
control|)
block|{
if|if
condition|(
name|tag
operator|.
name|refFlags
operator|.
name|get
argument_list|(
name|srcFlag
argument_list|)
condition|)
block|{
name|tag
operator|.
name|refFlags
operator|.
name|set
argument_list|(
name|newFlag
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|copy (TagSet old, TagMatcher m)
specifier|private
name|void
name|copy
parameter_list|(
name|TagSet
name|old
parameter_list|,
name|TagMatcher
name|m
parameter_list|)
block|{
name|refs
operator|.
name|putAll
argument_list|(
name|old
operator|.
name|refs
argument_list|)
expr_stmt|;
for|for
control|(
name|Tag
name|srcTag
range|:
name|old
operator|.
name|tags
control|)
block|{
name|BitSet
name|mine
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|mine
operator|.
name|or
argument_list|(
name|srcTag
operator|.
name|refFlags
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
operator|new
name|Tag
argument_list|(
name|srcTag
argument_list|,
name|mine
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TagMatcher
operator|.
name|LostRef
name|lost
range|:
name|m
operator|.
name|lostRefs
control|)
block|{
name|Tag
name|mine
init|=
name|tags
operator|.
name|get
argument_list|(
name|lost
operator|.
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|mine
operator|!=
literal|null
condition|)
block|{
name|mine
operator|.
name|refFlags
operator|.
name|clear
argument_list|(
name|lost
operator|.
name|flag
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addTag (TagWalk rw, Ref ref)
specifier|private
name|void
name|addTag
parameter_list|(
name|TagWalk
name|rw
parameter_list|,
name|Ref
name|ref
parameter_list|)
block|{
name|ObjectId
name|id
init|=
name|ref
operator|.
name|getPeeledObjectId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|ref
operator|.
name|getObjectId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tags
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|BitSet
name|flags
decl_stmt|;
try|try
block|{
name|flags
operator|=
operator|(
operator|(
name|TagCommit
operator|)
name|rw
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
operator|)
operator|.
name|refFlags
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|notCommit
parameter_list|)
block|{
name|flags
operator|=
operator|new
name|BitSet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error on "
operator|+
name|ref
operator|.
name|getName
argument_list|()
operator|+
literal|" of "
operator|+
name|projectName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|flags
operator|=
operator|new
name|BitSet
argument_list|()
expr_stmt|;
block|}
name|tags
operator|.
name|add
argument_list|(
operator|new
name|Tag
argument_list|(
name|id
argument_list|,
name|flags
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addRef (TagWalk rw, Ref ref)
specifier|private
name|void
name|addRef
parameter_list|(
name|TagWalk
name|rw
parameter_list|,
name|Ref
name|ref
parameter_list|)
block|{
try|try
block|{
name|TagCommit
name|commit
init|=
operator|(
name|TagCommit
operator|)
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|int
name|flag
init|=
name|refs
operator|.
name|size
argument_list|()
decl_stmt|;
name|commit
operator|.
name|refFlags
operator|.
name|set
argument_list|(
name|flag
argument_list|)
expr_stmt|;
name|refs
operator|.
name|put
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|CachedRef
argument_list|(
name|ref
argument_list|,
name|flag
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|notCommit
parameter_list|)
block|{
comment|// No need to spam the logs.
comment|// Quite many refs will point to non-commits.
comment|// For instance, refs from refs/cache-automerge
comment|// will often end up here.
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error on "
operator|+
name|ref
operator|.
name|getName
argument_list|()
operator|+
literal|" of "
operator|+
name|projectName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|skip (Ref ref)
specifier|private
specifier|static
name|boolean
name|skip
parameter_list|(
name|Ref
name|ref
parameter_list|)
block|{
return|return
name|ref
operator|.
name|isSymbolic
argument_list|()
operator|||
name|ref
operator|.
name|getObjectId
argument_list|()
operator|==
literal|null
operator|||
name|PatchSet
operator|.
name|isRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isTag (Ref ref)
specifier|private
specifier|static
name|boolean
name|isTag
parameter_list|(
name|Ref
name|ref
parameter_list|)
block|{
return|return
name|ref
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_TAGS
argument_list|)
return|;
block|}
DECL|class|Tag
specifier|static
specifier|final
class|class
name|Tag
extends|extends
name|ObjectIdOwnerMap
operator|.
name|Entry
block|{
DECL|field|refFlags
specifier|private
specifier|final
name|BitSet
name|refFlags
decl_stmt|;
DECL|method|Tag (AnyObjectId id, BitSet flags)
name|Tag
parameter_list|(
name|AnyObjectId
name|id
parameter_list|,
name|BitSet
name|flags
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|refFlags
operator|=
name|flags
expr_stmt|;
block|}
DECL|method|has (BitSet mask)
name|boolean
name|has
parameter_list|(
name|BitSet
name|mask
parameter_list|)
block|{
return|return
name|refFlags
operator|.
name|intersects
argument_list|(
name|mask
argument_list|)
return|;
block|}
block|}
DECL|class|CachedRef
specifier|private
specifier|static
specifier|final
class|class
name|CachedRef
extends|extends
name|AtomicReference
argument_list|<
name|ObjectId
argument_list|>
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|flag
specifier|final
name|int
name|flag
decl_stmt|;
DECL|method|CachedRef (Ref ref, int flag)
name|CachedRef
parameter_list|(
name|Ref
name|ref
parameter_list|,
name|int
name|flag
parameter_list|)
block|{
name|this
argument_list|(
name|flag
argument_list|,
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|CachedRef (int flag, ObjectId id)
name|CachedRef
parameter_list|(
name|int
name|flag
parameter_list|,
name|ObjectId
name|id
parameter_list|)
block|{
name|this
operator|.
name|flag
operator|=
name|flag
expr_stmt|;
name|set
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TagWalk
specifier|private
specifier|static
specifier|final
class|class
name|TagWalk
extends|extends
name|RevWalk
block|{
DECL|method|TagWalk (Repository git)
name|TagWalk
parameter_list|(
name|Repository
name|git
parameter_list|)
block|{
name|super
argument_list|(
name|git
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCommit (AnyObjectId id)
specifier|protected
name|TagCommit
name|createCommit
parameter_list|(
name|AnyObjectId
name|id
parameter_list|)
block|{
return|return
operator|new
name|TagCommit
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
DECL|class|TagCommit
specifier|private
specifier|static
specifier|final
class|class
name|TagCommit
extends|extends
name|RevCommit
block|{
DECL|field|refFlags
specifier|final
name|BitSet
name|refFlags
decl_stmt|;
DECL|method|TagCommit (AnyObjectId id)
name|TagCommit
parameter_list|(
name|AnyObjectId
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|refFlags
operator|=
operator|new
name|BitSet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

