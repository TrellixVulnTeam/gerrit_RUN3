begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|FORGE_AUTHOR
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|FORGE_COMMITTER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|FORGE_SERVER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|LABEL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|OWNER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|PUSH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|PUSH_MERGE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|PUSH_TAG
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|READ
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|SUBMIT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|SystemConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupUUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|NoReplication
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|jdbc
operator|.
name|JdbcSchema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|Schema_53
class|class
name|Schema_53
extends|extends
name|SchemaVersion
block|{
DECL|field|mgr
specifier|private
specifier|final
name|GitRepositoryManager
name|mgr
decl_stmt|;
DECL|field|serverUser
specifier|private
specifier|final
name|PersonIdent
name|serverUser
decl_stmt|;
DECL|field|systemConfig
specifier|private
name|SystemConfig
name|systemConfig
decl_stmt|;
DECL|field|groupMap
specifier|private
name|Map
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|,
name|GroupReference
argument_list|>
name|groupMap
decl_stmt|;
DECL|field|categoryMap
specifier|private
name|Map
argument_list|<
name|ApprovalCategory
operator|.
name|Id
argument_list|,
name|ApprovalCategory
argument_list|>
name|categoryMap
decl_stmt|;
DECL|field|projectOwners
specifier|private
name|GroupReference
name|projectOwners
decl_stmt|;
DECL|field|parentsByProject
specifier|private
name|Map
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Project
operator|.
name|NameKey
argument_list|>
name|parentsByProject
decl_stmt|;
DECL|field|rightsByProject
specifier|private
name|Map
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|List
argument_list|<
name|OldRefRight
argument_list|>
argument_list|>
name|rightsByProject
decl_stmt|;
DECL|field|OLD_SUBMIT
specifier|private
specifier|final
name|String
name|OLD_SUBMIT
init|=
literal|"SUBM"
decl_stmt|;
DECL|field|OLD_READ
specifier|private
specifier|final
name|String
name|OLD_READ
init|=
literal|"READ"
decl_stmt|;
DECL|field|OLD_OWN
specifier|private
specifier|final
name|String
name|OLD_OWN
init|=
literal|"OWN"
decl_stmt|;
DECL|field|OLD_PUSH_TAG
specifier|private
specifier|final
name|String
name|OLD_PUSH_TAG
init|=
literal|"pTAG"
decl_stmt|;
DECL|field|OLD_PUSH_HEAD
specifier|private
specifier|final
name|String
name|OLD_PUSH_HEAD
init|=
literal|"pHD"
decl_stmt|;
DECL|field|OLD_FORGE_IDENTITY
specifier|private
specifier|final
name|String
name|OLD_FORGE_IDENTITY
init|=
literal|"FORG"
decl_stmt|;
annotation|@
name|Inject
DECL|method|Schema_53 (Provider<Schema_52> prior, GitRepositoryManager mgr, @GerritPersonIdent PersonIdent serverUser)
name|Schema_53
parameter_list|(
name|Provider
argument_list|<
name|Schema_52
argument_list|>
name|prior
parameter_list|,
name|GitRepositoryManager
name|mgr
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverUser
parameter_list|)
block|{
name|super
argument_list|(
name|prior
argument_list|)
expr_stmt|;
name|this
operator|.
name|mgr
operator|=
name|mgr
expr_stmt|;
name|this
operator|.
name|serverUser
operator|=
name|serverUser
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|migrateData (ReviewDb db, UpdateUI ui)
specifier|protected
name|void
name|migrateData
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|UpdateUI
name|ui
parameter_list|)
throws|throws
name|OrmException
throws|,
name|SQLException
block|{
name|systemConfig
operator|=
name|db
operator|.
name|systemConfig
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|SystemConfig
operator|.
name|Key
argument_list|()
argument_list|)
expr_stmt|;
name|categoryMap
operator|=
name|db
operator|.
name|approvalCategories
argument_list|()
operator|.
name|toMap
argument_list|(
name|db
operator|.
name|approvalCategories
argument_list|()
operator|.
name|all
argument_list|()
argument_list|)
expr_stmt|;
name|assignGroupUUIDs
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|readOldRefRights
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|readProjectParents
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|exportProjectConfig
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|deleteActionCategories
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteActionCategories (ReviewDb db)
specifier|private
name|void
name|deleteActionCategories
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|ApprovalCategory
argument_list|>
name|delete
init|=
operator|new
name|ArrayList
argument_list|<
name|ApprovalCategory
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ApprovalCategory
name|category
range|:
name|categoryMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|category
operator|.
name|getPosition
argument_list|()
operator|<
literal|0
condition|)
block|{
name|delete
operator|.
name|add
argument_list|(
name|category
argument_list|)
expr_stmt|;
block|}
block|}
name|db
operator|.
name|approvalCategories
argument_list|()
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
DECL|method|assignGroupUUIDs (ReviewDb db)
specifier|private
name|void
name|assignGroupUUIDs
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
name|groupMap
operator|=
operator|new
name|HashMap
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|,
name|GroupReference
argument_list|>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|AccountGroup
argument_list|>
name|groups
init|=
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|all
argument_list|()
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountGroup
name|g
range|:
name|groups
control|)
block|{
if|if
condition|(
name|g
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|systemConfig
operator|.
name|ownerGroupId
argument_list|)
condition|)
block|{
name|g
operator|.
name|setGroupUUID
argument_list|(
name|AccountGroup
operator|.
name|PROJECT_OWNERS
argument_list|)
expr_stmt|;
name|projectOwners
operator|=
name|GroupReference
operator|.
name|forGroup
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|g
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|systemConfig
operator|.
name|anonymousGroupId
argument_list|)
condition|)
block|{
name|g
operator|.
name|setGroupUUID
argument_list|(
name|AccountGroup
operator|.
name|ANONYMOUS_USERS
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|g
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|systemConfig
operator|.
name|registeredGroupId
argument_list|)
condition|)
block|{
name|g
operator|.
name|setGroupUUID
argument_list|(
name|AccountGroup
operator|.
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|g
operator|.
name|setGroupUUID
argument_list|(
name|GroupUUID
operator|.
name|make
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|,
name|serverUser
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|groupMap
operator|.
name|put
argument_list|(
name|g
operator|.
name|getId
argument_list|()
argument_list|,
name|GroupReference
operator|.
name|forGroup
argument_list|(
name|g
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|update
argument_list|(
name|groups
argument_list|)
expr_stmt|;
name|systemConfig
operator|.
name|adminGroupUUID
operator|=
name|toUUID
argument_list|(
name|systemConfig
operator|.
name|adminGroupId
argument_list|)
expr_stmt|;
name|systemConfig
operator|.
name|batchUsersGroupUUID
operator|=
name|toUUID
argument_list|(
name|systemConfig
operator|.
name|batchUsersGroupId
argument_list|)
expr_stmt|;
name|db
operator|.
name|systemConfig
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|systemConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|toUUID (AccountGroup.Id id)
specifier|private
name|AccountGroup
operator|.
name|UUID
name|toUUID
parameter_list|(
name|AccountGroup
operator|.
name|Id
name|id
parameter_list|)
block|{
return|return
name|groupMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getUUID
argument_list|()
return|;
block|}
DECL|method|exportProjectConfig (ReviewDb db)
specifier|private
name|void
name|exportProjectConfig
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
throws|,
name|SQLException
block|{
name|Statement
name|stmt
init|=
operator|(
operator|(
name|JdbcSchema
operator|)
name|db
operator|)
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM projects ORDER BY name"
argument_list|)
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
specifier|final
name|String
name|name
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
specifier|final
name|Project
operator|.
name|NameKey
name|nameKey
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Repository
name|git
decl_stmt|;
try|try
block|{
name|git
operator|=
name|mgr
operator|.
name|openRepository
argument_list|(
name|nameKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|notFound
parameter_list|)
block|{
comment|// A repository may be missing if this project existed only to store
comment|// inheritable permissions. For example 'All-Projects'.
try|try
block|{
name|git
operator|=
name|mgr
operator|.
name|createRepository
argument_list|(
name|nameKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Cannot create repository "
operator|+
name|name
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|MetaDataUpdate
name|md
init|=
operator|new
name|MetaDataUpdate
argument_list|(
operator|new
name|NoReplication
argument_list|()
argument_list|,
name|nameKey
argument_list|,
name|git
argument_list|)
decl_stmt|;
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|serverUser
argument_list|)
expr_stmt|;
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
name|serverUser
argument_list|)
expr_stmt|;
name|ProjectConfig
name|config
init|=
name|ProjectConfig
operator|.
name|read
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|loadProject
argument_list|(
name|rs
argument_list|,
name|config
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|getAccessSections
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|convertRights
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|// Grant out read on the config branch by default.
comment|//
if|if
condition|(
name|config
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
operator|.
name|equals
argument_list|(
name|systemConfig
operator|.
name|wildProjectName
argument_list|)
condition|)
block|{
name|AccessSection
name|meta
init|=
name|config
operator|.
name|getAccessSection
argument_list|(
name|GitRepositoryManager
operator|.
name|REF_CONFIG
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Permission
name|read
init|=
name|meta
operator|.
name|getPermission
argument_list|(
name|READ
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|read
operator|.
name|getRule
argument_list|(
name|config
operator|.
name|resolve
argument_list|(
name|projectOwners
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|md
operator|.
name|setMessage
argument_list|(
literal|"Import project configuration from SQL\n"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|commit
argument_list|(
name|md
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Cannot export project "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Cannot read project "
operator|+
name|name
argument_list|,
name|err
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Cannot export project "
operator|+
name|name
argument_list|,
name|err
argument_list|)
throw|;
block|}
finally|finally
block|{
name|git
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|loadProject (ResultSet rs, Project project)
specifier|private
name|void
name|loadProject
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|Project
name|project
parameter_list|)
throws|throws
name|SQLException
throws|,
name|OrmException
block|{
name|project
operator|.
name|setDescription
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"description"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|.
name|setUseContributorAgreements
argument_list|(
literal|"Y"
operator|.
name|equals
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"use_contributor_agreements"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|rs
operator|.
name|getString
argument_list|(
literal|"submit_type"
argument_list|)
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
condition|)
block|{
case|case
literal|'F'
case|:
name|project
operator|.
name|setSubmitType
argument_list|(
name|Project
operator|.
name|SubmitType
operator|.
name|FAST_FORWARD_ONLY
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'M'
case|:
name|project
operator|.
name|setSubmitType
argument_list|(
name|Project
operator|.
name|SubmitType
operator|.
name|MERGE_IF_NECESSARY
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'A'
case|:
name|project
operator|.
name|setSubmitType
argument_list|(
name|Project
operator|.
name|SubmitType
operator|.
name|MERGE_ALWAYS
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'C'
case|:
name|project
operator|.
name|setSubmitType
argument_list|(
name|Project
operator|.
name|SubmitType
operator|.
name|CHERRY_PICK
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Unsupported submit_type="
operator|+
name|rs
operator|.
name|getString
argument_list|(
literal|"submit_type"
argument_list|)
operator|+
literal|" on project "
operator|+
name|project
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|project
operator|.
name|setUseSignedOffBy
argument_list|(
literal|"Y"
operator|.
name|equals
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"use_signed_off_by"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|.
name|setRequireChangeID
argument_list|(
literal|"Y"
operator|.
name|equals
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"require_change_id"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|.
name|setUseContentMerge
argument_list|(
literal|"Y"
operator|.
name|equals
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"use_content_merge"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|.
name|setParentName
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"parent_name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|readOldRefRights (ReviewDb db)
specifier|private
name|void
name|readOldRefRights
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|SQLException
block|{
name|rightsByProject
operator|=
operator|new
name|HashMap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|List
argument_list|<
name|OldRefRight
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|Statement
name|stmt
init|=
operator|(
operator|(
name|JdbcSchema
operator|)
name|db
operator|)
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM ref_rights"
argument_list|)
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|OldRefRight
name|right
init|=
operator|new
name|OldRefRight
argument_list|(
name|rs
argument_list|)
decl_stmt|;
if|if
condition|(
name|right
operator|.
name|group
operator|==
literal|null
operator|||
name|right
operator|.
name|category
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|List
argument_list|<
name|OldRefRight
argument_list|>
name|list
decl_stmt|;
name|list
operator|=
name|rightsByProject
operator|.
name|get
argument_list|(
name|right
operator|.
name|project
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|OldRefRight
argument_list|>
argument_list|()
expr_stmt|;
name|rightsByProject
operator|.
name|put
argument_list|(
name|right
operator|.
name|project
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|readProjectParents (ReviewDb db)
specifier|private
name|void
name|readProjectParents
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|SQLException
block|{
name|parentsByProject
operator|=
operator|new
name|HashMap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Project
operator|.
name|NameKey
argument_list|>
argument_list|()
expr_stmt|;
name|Statement
name|stmt
init|=
operator|(
operator|(
name|JdbcSchema
operator|)
name|db
operator|)
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM projects"
argument_list|)
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|parent_name
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"parent_name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent_name
operator|==
literal|null
condition|)
block|{
name|parent_name
operator|=
name|systemConfig
operator|.
name|wildProjectName
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|parentsByProject
operator|.
name|put
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|name
argument_list|)
argument_list|,
comment|//
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|parent_name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|convertRights (ProjectConfig config)
specifier|private
name|void
name|convertRights
parameter_list|(
name|ProjectConfig
name|config
parameter_list|)
block|{
name|List
argument_list|<
name|OldRefRight
argument_list|>
name|myRights
init|=
name|rightsByProject
operator|.
name|get
argument_list|(
name|config
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|myRights
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|OldRefRight
name|old
range|:
name|myRights
control|)
block|{
name|AccessSection
name|section
init|=
name|config
operator|.
name|getAccessSection
argument_list|(
name|old
operator|.
name|ref_pattern
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|GroupReference
name|group
init|=
name|config
operator|.
name|resolve
argument_list|(
name|old
operator|.
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|OLD_SUBMIT
operator|.
name|equals
argument_list|(
name|old
operator|.
name|category
argument_list|)
condition|)
block|{
name|PermissionRule
name|submit
init|=
name|rule
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|submit
operator|.
name|setDeny
argument_list|(
name|old
operator|.
name|max_value
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|section
argument_list|,
name|SUBMIT
argument_list|,
name|old
operator|.
name|exclusive
argument_list|,
name|submit
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OLD_READ
operator|.
name|equals
argument_list|(
name|old
operator|.
name|category
argument_list|)
condition|)
block|{
if|if
condition|(
name|old
operator|.
name|exclusive
condition|)
block|{
name|section
operator|.
name|getPermission
argument_list|(
name|READ
argument_list|,
literal|true
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|newChangePermission
argument_list|(
name|config
argument_list|,
name|old
operator|.
name|ref_pattern
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|PermissionRule
name|read
init|=
name|rule
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|read
operator|.
name|setDeny
argument_list|(
name|old
operator|.
name|max_value
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|section
argument_list|,
name|READ
argument_list|,
name|old
operator|.
name|exclusive
argument_list|,
name|read
argument_list|)
expr_stmt|;
if|if
condition|(
literal|3
operator|<=
name|old
operator|.
name|max_value
condition|)
block|{
name|newMergePermission
argument_list|(
name|config
argument_list|,
name|old
operator|.
name|ref_pattern
argument_list|)
operator|.
name|add
argument_list|(
name|rule
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|3
operator|<=
name|inheritedMax
argument_list|(
name|config
argument_list|,
name|old
argument_list|)
condition|)
block|{
name|newMergePermission
argument_list|(
name|config
argument_list|,
name|old
operator|.
name|ref_pattern
argument_list|)
operator|.
name|add
argument_list|(
name|deny
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|2
operator|<=
name|old
operator|.
name|max_value
condition|)
block|{
name|newChangePermission
argument_list|(
name|config
argument_list|,
name|old
operator|.
name|ref_pattern
argument_list|)
operator|.
name|add
argument_list|(
name|rule
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|2
operator|<=
name|inheritedMax
argument_list|(
name|config
argument_list|,
name|old
argument_list|)
condition|)
block|{
name|newChangePermission
argument_list|(
name|config
argument_list|,
name|old
operator|.
name|ref_pattern
argument_list|)
operator|.
name|add
argument_list|(
name|deny
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|OLD_OWN
operator|.
name|equals
argument_list|(
name|old
operator|.
name|category
argument_list|)
condition|)
block|{
name|add
argument_list|(
name|section
argument_list|,
name|OWNER
argument_list|,
literal|false
argument_list|,
name|rule
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OLD_PUSH_TAG
operator|.
name|equals
argument_list|(
name|old
operator|.
name|category
argument_list|)
condition|)
block|{
name|PermissionRule
name|push
init|=
name|rule
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|push
operator|.
name|setDeny
argument_list|(
name|old
operator|.
name|max_value
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|section
argument_list|,
name|PUSH_TAG
argument_list|,
name|old
operator|.
name|exclusive
argument_list|,
name|push
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OLD_PUSH_HEAD
operator|.
name|equals
argument_list|(
name|old
operator|.
name|category
argument_list|)
condition|)
block|{
if|if
condition|(
name|old
operator|.
name|exclusive
condition|)
block|{
name|section
operator|.
name|getPermission
argument_list|(
name|PUSH
argument_list|,
literal|true
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|section
operator|.
name|getPermission
argument_list|(
name|CREATE
argument_list|,
literal|true
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|PermissionRule
name|push
init|=
name|rule
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|push
operator|.
name|setDeny
argument_list|(
name|old
operator|.
name|max_value
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|push
operator|.
name|setForce
argument_list|(
literal|3
operator|<=
name|old
operator|.
name|max_value
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|section
argument_list|,
name|PUSH
argument_list|,
name|old
operator|.
name|exclusive
argument_list|,
name|push
argument_list|)
expr_stmt|;
if|if
condition|(
literal|2
operator|<=
name|old
operator|.
name|max_value
condition|)
block|{
name|add
argument_list|(
name|section
argument_list|,
name|CREATE
argument_list|,
name|old
operator|.
name|exclusive
argument_list|,
name|rule
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|2
operator|<=
name|inheritedMax
argument_list|(
name|config
argument_list|,
name|old
argument_list|)
condition|)
block|{
name|add
argument_list|(
name|section
argument_list|,
name|CREATE
argument_list|,
name|old
operator|.
name|exclusive
argument_list|,
name|deny
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|OLD_FORGE_IDENTITY
operator|.
name|equals
argument_list|(
name|old
operator|.
name|category
argument_list|)
condition|)
block|{
if|if
condition|(
name|old
operator|.
name|exclusive
condition|)
block|{
name|section
operator|.
name|getPermission
argument_list|(
name|FORGE_AUTHOR
argument_list|,
literal|true
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|section
operator|.
name|getPermission
argument_list|(
name|FORGE_COMMITTER
argument_list|,
literal|true
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|section
operator|.
name|getPermission
argument_list|(
name|FORGE_SERVER
argument_list|,
literal|true
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|1
operator|<=
name|old
operator|.
name|max_value
condition|)
block|{
name|add
argument_list|(
name|section
argument_list|,
name|FORGE_AUTHOR
argument_list|,
name|old
operator|.
name|exclusive
argument_list|,
name|rule
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|2
operator|<=
name|old
operator|.
name|max_value
condition|)
block|{
name|add
argument_list|(
name|section
argument_list|,
name|FORGE_COMMITTER
argument_list|,
name|old
operator|.
name|exclusive
argument_list|,
name|rule
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|2
operator|<=
name|inheritedMax
argument_list|(
name|config
argument_list|,
name|old
argument_list|)
condition|)
block|{
name|add
argument_list|(
name|section
argument_list|,
name|FORGE_COMMITTER
argument_list|,
name|old
operator|.
name|exclusive
argument_list|,
name|deny
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|3
operator|<=
name|old
operator|.
name|max_value
condition|)
block|{
name|add
argument_list|(
name|section
argument_list|,
name|FORGE_SERVER
argument_list|,
name|old
operator|.
name|exclusive
argument_list|,
name|rule
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|3
operator|<=
name|inheritedMax
argument_list|(
name|config
argument_list|,
name|old
argument_list|)
condition|)
block|{
name|add
argument_list|(
name|section
argument_list|,
name|FORGE_SERVER
argument_list|,
name|old
operator|.
name|exclusive
argument_list|,
name|deny
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|PermissionRule
name|rule
init|=
name|rule
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|rule
operator|.
name|setRange
argument_list|(
name|old
operator|.
name|min_value
argument_list|,
name|old
operator|.
name|max_value
argument_list|)
expr_stmt|;
if|if
condition|(
name|old
operator|.
name|min_value
operator|==
literal|0
operator|&&
name|old
operator|.
name|max_value
operator|==
literal|0
condition|)
block|{
name|rule
operator|.
name|setDeny
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|section
argument_list|,
name|LABEL
operator|+
name|varNameOf
argument_list|(
name|old
operator|.
name|category
argument_list|)
argument_list|,
name|old
operator|.
name|exclusive
argument_list|,
name|rule
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|newChangePermission (ProjectConfig config, String name)
specifier|private
specifier|static
name|Permission
name|newChangePermission
parameter_list|(
name|ProjectConfig
name|config
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|AccessSection
operator|.
name|REGEX_PREFIX
argument_list|)
condition|)
block|{
name|name
operator|=
name|AccessSection
operator|.
name|REGEX_PREFIX
operator|+
literal|"refs/for/"
operator|+
name|name
operator|.
name|substring
argument_list|(
name|AccessSection
operator|.
name|REGEX_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
literal|"refs/for/"
operator|+
name|name
expr_stmt|;
block|}
return|return
name|config
operator|.
name|getAccessSection
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
operator|.
name|getPermission
argument_list|(
name|PUSH
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|newMergePermission (ProjectConfig config, String name)
specifier|private
specifier|static
name|Permission
name|newMergePermission
parameter_list|(
name|ProjectConfig
name|config
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|AccessSection
operator|.
name|REGEX_PREFIX
argument_list|)
condition|)
block|{
name|name
operator|=
name|AccessSection
operator|.
name|REGEX_PREFIX
operator|+
literal|"refs/for/"
operator|+
name|name
operator|.
name|substring
argument_list|(
name|AccessSection
operator|.
name|REGEX_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
literal|"refs/for/"
operator|+
name|name
expr_stmt|;
block|}
return|return
name|config
operator|.
name|getAccessSection
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
operator|.
name|getPermission
argument_list|(
name|PUSH_MERGE
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|rule (GroupReference group)
specifier|private
specifier|static
name|PermissionRule
name|rule
parameter_list|(
name|GroupReference
name|group
parameter_list|)
block|{
return|return
operator|new
name|PermissionRule
argument_list|(
name|group
argument_list|)
return|;
block|}
DECL|method|deny (GroupReference group)
specifier|private
specifier|static
name|PermissionRule
name|deny
parameter_list|(
name|GroupReference
name|group
parameter_list|)
block|{
name|PermissionRule
name|rule
init|=
name|rule
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|rule
operator|.
name|setDeny
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|rule
return|;
block|}
DECL|method|inheritedMax (ProjectConfig config, OldRefRight old)
specifier|private
name|int
name|inheritedMax
parameter_list|(
name|ProjectConfig
name|config
parameter_list|,
name|OldRefRight
name|old
parameter_list|)
block|{
name|int
name|max
init|=
literal|0
decl_stmt|;
name|String
name|ref
init|=
name|old
operator|.
name|ref_pattern
decl_stmt|;
name|String
name|category
init|=
name|old
operator|.
name|category
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|group
init|=
name|old
operator|.
name|group
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|Project
operator|.
name|NameKey
name|project
init|=
name|config
operator|.
name|getProject
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|project
operator|==
literal|null
condition|)
block|{
name|project
operator|=
name|systemConfig
operator|.
name|wildProjectName
expr_stmt|;
block|}
do|do
block|{
name|List
argument_list|<
name|OldRefRight
argument_list|>
name|rights
init|=
name|rightsByProject
operator|.
name|get
argument_list|(
name|project
argument_list|)
decl_stmt|;
if|if
condition|(
name|rights
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|OldRefRight
name|r
range|:
name|rights
control|)
block|{
if|if
condition|(
name|r
operator|.
name|ref_pattern
operator|.
name|equals
argument_list|(
name|ref
argument_list|)
comment|//
operator|&&
name|r
operator|.
name|group
operator|.
name|getUUID
argument_list|()
operator|.
name|equals
argument_list|(
name|group
argument_list|)
comment|//
operator|&&
name|r
operator|.
name|category
operator|.
name|equals
argument_list|(
name|category
argument_list|)
condition|)
block|{
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|r
operator|.
name|max_value
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|project
operator|=
name|parentsByProject
operator|.
name|get
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|project
operator|.
name|equals
argument_list|(
name|systemConfig
operator|.
name|wildProjectName
argument_list|)
condition|)
do|;
return|return
name|max
return|;
block|}
DECL|method|varNameOf (String id)
specifier|private
name|String
name|varNameOf
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|ApprovalCategory
name|category
init|=
name|categoryMap
operator|.
name|get
argument_list|(
operator|new
name|ApprovalCategory
operator|.
name|Id
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|category
operator|==
literal|null
condition|)
block|{
name|category
operator|=
operator|new
name|ApprovalCategory
argument_list|(
operator|new
name|ApprovalCategory
operator|.
name|Id
argument_list|(
name|id
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|category
operator|.
name|getLabelName
argument_list|()
return|;
block|}
DECL|method|add (AccessSection section, String name, boolean exclusive, PermissionRule rule)
specifier|private
specifier|static
name|void
name|add
parameter_list|(
name|AccessSection
name|section
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|exclusive
parameter_list|,
name|PermissionRule
name|rule
parameter_list|)
block|{
name|Permission
name|p
init|=
name|section
operator|.
name|getPermission
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|exclusive
condition|)
block|{
name|p
operator|.
name|setExclusiveGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
DECL|class|OldRefRight
specifier|private
class|class
name|OldRefRight
block|{
DECL|field|min_value
specifier|final
name|int
name|min_value
decl_stmt|;
DECL|field|max_value
specifier|final
name|int
name|max_value
decl_stmt|;
DECL|field|ref_pattern
specifier|final
name|String
name|ref_pattern
decl_stmt|;
DECL|field|exclusive
specifier|final
name|boolean
name|exclusive
decl_stmt|;
DECL|field|group
specifier|final
name|GroupReference
name|group
decl_stmt|;
DECL|field|category
specifier|final
name|String
name|category
decl_stmt|;
DECL|field|project
specifier|final
name|Project
operator|.
name|NameKey
name|project
decl_stmt|;
DECL|method|OldRefRight (ResultSet rs)
name|OldRefRight
parameter_list|(
name|ResultSet
name|rs
parameter_list|)
throws|throws
name|SQLException
block|{
name|min_value
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|"min_value"
argument_list|)
expr_stmt|;
name|max_value
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|"max_value"
argument_list|)
expr_stmt|;
name|project
operator|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"project_name"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|r
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"ref_pattern"
argument_list|)
decl_stmt|;
name|exclusive
operator|=
name|r
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
if|if
condition|(
name|exclusive
condition|)
block|{
name|r
operator|=
name|r
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|ref_pattern
operator|=
name|r
expr_stmt|;
name|category
operator|=
name|rs
operator|.
name|getString
argument_list|(
literal|"category_id"
argument_list|)
expr_stmt|;
name|group
operator|=
name|groupMap
operator|.
name|get
argument_list|(
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|"group_id"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

