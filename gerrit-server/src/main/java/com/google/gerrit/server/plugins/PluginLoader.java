begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.plugins
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ComparisonChain
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedHashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|annotations
operator|.
name|PluginName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|events
operator|.
name|LifecycleListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|systemstatus
operator|.
name|ServerInformation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|JavaScriptPlugin
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PluginUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|PersistentCacheFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ConfigUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|ServerPluginProvider
operator|.
name|PluginDescription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|file
operator|.
name|FileSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|PluginLoader
specifier|public
class|class
name|PluginLoader
implements|implements
name|LifecycleListener
block|{
DECL|field|PLUGIN_TMP_PREFIX
specifier|static
specifier|final
name|String
name|PLUGIN_TMP_PREFIX
init|=
literal|"plugin_"
decl_stmt|;
DECL|field|log
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PluginLoader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|getPluginName (Path srcPath)
specifier|public
name|String
name|getPluginName
parameter_list|(
name|Path
name|srcPath
parameter_list|)
block|{
return|return
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|getGerritPluginName
argument_list|(
name|srcPath
argument_list|)
argument_list|,
name|nameOf
argument_list|(
name|srcPath
argument_list|)
argument_list|)
return|;
block|}
DECL|field|pluginsDir
specifier|private
specifier|final
name|Path
name|pluginsDir
decl_stmt|;
DECL|field|dataDir
specifier|private
specifier|final
name|Path
name|dataDir
decl_stmt|;
DECL|field|env
specifier|private
specifier|final
name|PluginGuiceEnvironment
name|env
decl_stmt|;
DECL|field|srvInfoImpl
specifier|private
specifier|final
name|ServerInformationImpl
name|srvInfoImpl
decl_stmt|;
DECL|field|pluginUserFactory
specifier|private
specifier|final
name|PluginUser
operator|.
name|Factory
name|pluginUserFactory
decl_stmt|;
DECL|field|running
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Plugin
argument_list|>
name|running
decl_stmt|;
DECL|field|disabled
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Plugin
argument_list|>
name|disabled
decl_stmt|;
DECL|field|broken
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FileSnapshot
argument_list|>
name|broken
decl_stmt|;
DECL|field|cleanupHandles
specifier|private
specifier|final
name|Map
argument_list|<
name|Plugin
argument_list|,
name|CleanupHandle
argument_list|>
name|cleanupHandles
decl_stmt|;
DECL|field|toCleanup
specifier|private
specifier|final
name|Queue
argument_list|<
name|Plugin
argument_list|>
name|toCleanup
decl_stmt|;
DECL|field|cleaner
specifier|private
specifier|final
name|Provider
argument_list|<
name|PluginCleanerTask
argument_list|>
name|cleaner
decl_stmt|;
DECL|field|scanner
specifier|private
specifier|final
name|PluginScannerThread
name|scanner
decl_stmt|;
DECL|field|urlProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|String
argument_list|>
name|urlProvider
decl_stmt|;
DECL|field|persistentCacheFactory
specifier|private
specifier|final
name|PersistentCacheFactory
name|persistentCacheFactory
decl_stmt|;
DECL|field|remoteAdmin
specifier|private
specifier|final
name|boolean
name|remoteAdmin
decl_stmt|;
DECL|field|serverPluginFactory
specifier|private
specifier|final
name|UniversalServerPluginProvider
name|serverPluginFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|PluginLoader (SitePaths sitePaths, PluginGuiceEnvironment pe, ServerInformationImpl sii, PluginUser.Factory puf, Provider<PluginCleanerTask> pct, @GerritServerConfig Config cfg, @CanonicalWebUrl Provider<String> provider, PersistentCacheFactory cacheFactory, UniversalServerPluginProvider pluginFactory)
specifier|public
name|PluginLoader
parameter_list|(
name|SitePaths
name|sitePaths
parameter_list|,
name|PluginGuiceEnvironment
name|pe
parameter_list|,
name|ServerInformationImpl
name|sii
parameter_list|,
name|PluginUser
operator|.
name|Factory
name|puf
parameter_list|,
name|Provider
argument_list|<
name|PluginCleanerTask
argument_list|>
name|pct
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
annotation|@
name|CanonicalWebUrl
name|Provider
argument_list|<
name|String
argument_list|>
name|provider
parameter_list|,
name|PersistentCacheFactory
name|cacheFactory
parameter_list|,
name|UniversalServerPluginProvider
name|pluginFactory
parameter_list|)
block|{
name|pluginsDir
operator|=
name|sitePaths
operator|.
name|plugins_dir
expr_stmt|;
name|dataDir
operator|=
name|sitePaths
operator|.
name|data_dir
expr_stmt|;
name|env
operator|=
name|pe
expr_stmt|;
name|srvInfoImpl
operator|=
name|sii
expr_stmt|;
name|pluginUserFactory
operator|=
name|puf
expr_stmt|;
name|running
operator|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
expr_stmt|;
name|disabled
operator|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
expr_stmt|;
name|broken
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|toCleanup
operator|=
name|Queues
operator|.
name|newArrayDeque
argument_list|()
expr_stmt|;
name|cleanupHandles
operator|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
expr_stmt|;
name|cleaner
operator|=
name|pct
expr_stmt|;
name|urlProvider
operator|=
name|provider
expr_stmt|;
name|persistentCacheFactory
operator|=
name|cacheFactory
expr_stmt|;
name|serverPluginFactory
operator|=
name|pluginFactory
expr_stmt|;
name|remoteAdmin
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"plugins"
argument_list|,
literal|null
argument_list|,
literal|"allowRemoteAdmin"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|checkFrequency
init|=
name|ConfigUtil
operator|.
name|getTimeUnit
argument_list|(
name|cfg
argument_list|,
literal|"plugins"
argument_list|,
literal|null
argument_list|,
literal|"checkFrequency"
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkFrequency
operator|>
literal|0
condition|)
block|{
name|scanner
operator|=
operator|new
name|PluginScannerThread
argument_list|(
name|this
argument_list|,
name|checkFrequency
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scanner
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|isRemoteAdminEnabled ()
specifier|public
name|boolean
name|isRemoteAdminEnabled
parameter_list|()
block|{
return|return
name|remoteAdmin
return|;
block|}
DECL|method|get (String name)
specifier|public
name|Plugin
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Plugin
name|p
init|=
name|running
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
return|return
name|p
return|;
block|}
return|return
name|disabled
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getPlugins (boolean all)
specifier|public
name|Iterable
argument_list|<
name|Plugin
argument_list|>
name|getPlugins
parameter_list|(
name|boolean
name|all
parameter_list|)
block|{
if|if
condition|(
operator|!
name|all
condition|)
block|{
return|return
name|running
operator|.
name|values
argument_list|()
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|Plugin
argument_list|>
name|plugins
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|running
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|plugins
operator|.
name|addAll
argument_list|(
name|disabled
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|plugins
return|;
block|}
block|}
DECL|method|installPluginFromStream (String originalName, InputStream in)
specifier|public
name|void
name|installPluginFromStream
parameter_list|(
name|String
name|originalName
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|PluginInstallException
block|{
name|checkRemoteInstall
argument_list|()
expr_stmt|;
name|String
name|fileName
init|=
name|originalName
decl_stmt|;
name|Path
name|tmp
init|=
name|asTemp
argument_list|(
name|in
argument_list|,
literal|".next_"
operator|+
name|fileName
operator|+
literal|"_"
argument_list|,
literal|".tmp"
argument_list|,
name|pluginsDir
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|getGerritPluginName
argument_list|(
name|tmp
argument_list|)
argument_list|,
name|nameOf
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|originalName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Plugin provides its own name:<%s>,"
operator|+
literal|" use it instead of the input name:<%s>"
argument_list|,
name|name
argument_list|,
name|originalName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|fileExtension
init|=
name|getExtension
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
name|pluginsDir
operator|.
name|resolve
argument_list|(
name|name
operator|+
name|fileExtension
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Plugin
name|active
init|=
name|running
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|active
operator|!=
literal|null
condition|)
block|{
name|fileName
operator|=
name|active
operator|.
name|getSrcFile
argument_list|()
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Replacing plugin %s"
argument_list|,
name|active
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|old
init|=
name|pluginsDir
operator|.
name|resolve
argument_list|(
literal|".last_"
operator|+
name|fileName
argument_list|)
decl_stmt|;
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|old
argument_list|)
expr_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|active
operator|.
name|getSrcFile
argument_list|()
argument_list|,
name|old
argument_list|)
expr_stmt|;
block|}
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|pluginsDir
operator|.
name|resolve
argument_list|(
name|fileName
operator|+
literal|".disabled"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|tmp
argument_list|,
name|dst
argument_list|)
expr_stmt|;
try|try
block|{
name|Plugin
name|plugin
init|=
name|runPlugin
argument_list|(
name|name
argument_list|,
name|dst
argument_list|,
name|active
argument_list|)
decl_stmt|;
if|if
condition|(
name|active
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Installed plugin %s"
argument_list|,
name|plugin
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PluginInstallException
name|e
parameter_list|)
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|dst
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|cleanInBackground
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|asTemp (InputStream in, String prefix, String suffix, Path dir)
specifier|static
name|Path
name|asTemp
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tmp
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
name|dir
argument_list|,
name|prefix
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|boolean
name|keep
init|=
literal|false
decl_stmt|;
try|try
init|(
name|OutputStream
name|out
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|tmp
argument_list|)
init|)
block|{
name|ByteStreams
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|keep
operator|=
literal|true
expr_stmt|;
return|return
name|tmp
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|keep
condition|)
block|{
name|Files
operator|.
name|delete
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|unloadPlugin (Plugin plugin)
specifier|private
specifier|synchronized
name|void
name|unloadPlugin
parameter_list|(
name|Plugin
name|plugin
parameter_list|)
block|{
name|persistentCacheFactory
operator|.
name|onStop
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|plugin
operator|.
name|getName
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unloading plugin %s"
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|stop
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|env
operator|.
name|onStopPlugin
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
name|running
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|disabled
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|toCleanup
operator|.
name|add
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
block|}
DECL|method|disablePlugins (Set<String> names)
specifier|public
name|void
name|disablePlugins
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isRemoteAdminEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Remote plugin administration is disabled,"
operator|+
literal|" ignoring disablePlugins("
operator|+
name|names
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|Plugin
name|active
init|=
name|running
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|active
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Disabling plugin %s"
argument_list|,
name|active
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|off
init|=
name|active
operator|.
name|getSrcFile
argument_list|()
operator|.
name|resolveSibling
argument_list|(
name|active
operator|.
name|getSrcFile
argument_list|()
operator|.
name|getFileName
argument_list|()
operator|+
literal|".disabled"
argument_list|)
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|move
argument_list|(
name|active
operator|.
name|getSrcFile
argument_list|()
argument_list|,
name|off
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to disable plugin"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// In theory we could still unload the plugin even if the rename
comment|// failed. However, it would be reloaded on the next server startup,
comment|// which is probably not what the user expects.
continue|continue;
block|}
name|unloadPlugin
argument_list|(
name|active
argument_list|)
expr_stmt|;
try|try
block|{
name|FileSnapshot
name|snapshot
init|=
name|FileSnapshot
operator|.
name|save
argument_list|(
name|off
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|Plugin
name|offPlugin
init|=
name|loadPlugin
argument_list|(
name|name
argument_list|,
name|off
argument_list|,
name|snapshot
argument_list|)
decl_stmt|;
name|disabled
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|offPlugin
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// This shouldn't happen, as the plugin was loaded earlier.
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot load disabled plugin %s"
argument_list|,
name|active
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|cleanInBackground
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|enablePlugins (Set<String> names)
specifier|public
name|void
name|enablePlugins
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|PluginInstallException
block|{
if|if
condition|(
operator|!
name|isRemoteAdminEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Remote plugin administration is disabled,"
operator|+
literal|" ignoring enablePlugins("
operator|+
name|names
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|Plugin
name|off
init|=
name|disabled
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|off
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Enabling plugin %s"
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|n
init|=
name|off
operator|.
name|getSrcFile
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|endsWith
argument_list|(
literal|".disabled"
argument_list|)
condition|)
block|{
name|n
operator|=
name|n
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|n
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Path
name|on
init|=
name|pluginsDir
operator|.
name|resolve
argument_list|(
name|n
argument_list|)
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|move
argument_list|(
name|off
operator|.
name|getSrcFile
argument_list|()
argument_list|,
name|on
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to move plugin "
operator|+
name|name
operator|+
literal|" into place"
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|disabled
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|runPlugin
argument_list|(
name|name
argument_list|,
name|on
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|cleanInBackground
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Loading plugins from "
operator|+
name|pluginsDir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|srvInfoImpl
operator|.
name|state
operator|=
name|ServerInformation
operator|.
name|State
operator|.
name|STARTUP
expr_stmt|;
name|rescan
argument_list|()
expr_stmt|;
name|srvInfoImpl
operator|.
name|state
operator|=
name|ServerInformation
operator|.
name|State
operator|.
name|RUNNING
expr_stmt|;
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
name|srvInfoImpl
operator|.
name|state
operator|=
name|ServerInformation
operator|.
name|State
operator|.
name|SHUTDOWN
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
for|for
control|(
name|Plugin
name|p
range|:
name|running
operator|.
name|values
argument_list|()
control|)
block|{
name|unloadPlugin
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|running
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disabled
operator|.
name|clear
argument_list|()
expr_stmt|;
name|broken
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|toCleanup
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|processPendingCleanups
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|reload (List<String> names)
specifier|public
name|void
name|reload
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|InvalidPluginException
throws|,
name|PluginInstallException
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|List
argument_list|<
name|Plugin
argument_list|>
name|reload
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|names
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bad
init|=
name|Lists
operator|.
name|newArrayListWithExpectedSize
argument_list|(
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|Plugin
name|active
init|=
name|running
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|active
operator|!=
literal|null
condition|)
block|{
name|reload
operator|.
name|add
argument_list|(
name|active
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bad
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|bad
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidPluginException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Plugin(s) \"%s\" not running"
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|"\", \""
argument_list|)
operator|.
name|join
argument_list|(
name|bad
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|Plugin
name|active
range|:
name|reload
control|)
block|{
name|String
name|name
init|=
name|active
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Reloading plugin %s"
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|runPlugin
argument_list|(
name|name
argument_list|,
name|active
operator|.
name|getSrcFile
argument_list|()
argument_list|,
name|active
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PluginInstallException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot reload plugin %s"
argument_list|,
name|name
argument_list|)
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
name|cleanInBackground
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|rescan ()
specifier|public
specifier|synchronized
name|void
name|rescan
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|pluginsFiles
init|=
name|prunePlugins
argument_list|(
name|pluginsDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|pluginsFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|syncDisabledPlugins
argument_list|(
name|pluginsFiles
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|activePlugins
init|=
name|filterDisabled
argument_list|(
name|pluginsFiles
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|entry
range|:
name|jarsFirstSortedPluginsSet
argument_list|(
name|activePlugins
argument_list|)
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isJsPlugin
argument_list|(
name|fileName
argument_list|)
operator|&&
operator|!
name|serverPluginFactory
operator|.
name|handles
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No Plugin provider was found that handles this file format: {}"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|FileSnapshot
name|brokenTime
init|=
name|broken
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|brokenTime
operator|!=
literal|null
operator|&&
operator|!
name|brokenTime
operator|.
name|isModified
argument_list|(
name|path
operator|.
name|toFile
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Plugin
name|active
init|=
name|running
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|active
operator|!=
literal|null
operator|&&
operator|!
name|active
operator|.
name|isModified
argument_list|(
name|path
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|active
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Reloading plugin %s, version %s"
argument_list|,
name|active
operator|.
name|getName
argument_list|()
argument_list|,
name|active
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Plugin
name|loadedPlugin
init|=
name|runPlugin
argument_list|(
name|name
argument_list|,
name|path
argument_list|,
name|active
argument_list|)
decl_stmt|;
if|if
condition|(
name|active
operator|==
literal|null
operator|&&
operator|!
name|loadedPlugin
operator|.
name|isDisabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Loaded plugin %s, version %s"
argument_list|,
name|loadedPlugin
operator|.
name|getName
argument_list|()
argument_list|,
name|loadedPlugin
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PluginInstallException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot load plugin %s"
argument_list|,
name|name
argument_list|)
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|cleanInBackground
argument_list|()
expr_stmt|;
block|}
DECL|method|addAllEntries (Map<String, Path> from, TreeSet<Entry<String, Path>> to)
specifier|private
name|void
name|addAllEntries
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|from
parameter_list|,
name|TreeSet
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
argument_list|>
name|to
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
argument_list|>
name|it
init|=
name|from
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|to
operator|.
name|add
argument_list|(
operator|new
name|AbstractMap
operator|.
name|SimpleImmutableEntry
argument_list|<>
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|jarsFirstSortedPluginsSet ( Map<String, Path> activePlugins)
specifier|private
name|TreeSet
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
argument_list|>
name|jarsFirstSortedPluginsSet
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|activePlugins
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
argument_list|>
name|sortedPlugins
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|e1
parameter_list|,
name|Entry
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|e2
parameter_list|)
block|{
name|Path
name|n1
init|=
name|e1
operator|.
name|getValue
argument_list|()
operator|.
name|getFileName
argument_list|()
decl_stmt|;
name|Path
name|n2
init|=
name|e2
operator|.
name|getValue
argument_list|()
operator|.
name|getFileName
argument_list|()
decl_stmt|;
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compareTrueFirst
argument_list|(
name|n1
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
argument_list|,
name|n2
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
argument_list|)
operator|.
name|compare
argument_list|(
name|n1
argument_list|,
name|n2
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|addAllEntries
argument_list|(
name|activePlugins
argument_list|,
name|sortedPlugins
argument_list|)
expr_stmt|;
return|return
name|sortedPlugins
return|;
block|}
DECL|method|syncDisabledPlugins (Multimap<String, Path> jars)
specifier|private
name|void
name|syncDisabledPlugins
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|jars
parameter_list|)
block|{
name|stopRemovedPlugins
argument_list|(
name|jars
argument_list|)
expr_stmt|;
name|dropRemovedDisabledPlugins
argument_list|(
name|jars
argument_list|)
expr_stmt|;
block|}
DECL|method|runPlugin (String name, Path plugin, Plugin oldPlugin)
specifier|private
name|Plugin
name|runPlugin
parameter_list|(
name|String
name|name
parameter_list|,
name|Path
name|plugin
parameter_list|,
name|Plugin
name|oldPlugin
parameter_list|)
throws|throws
name|PluginInstallException
block|{
name|FileSnapshot
name|snapshot
init|=
name|FileSnapshot
operator|.
name|save
argument_list|(
name|plugin
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Plugin
name|newPlugin
init|=
name|loadPlugin
argument_list|(
name|name
argument_list|,
name|plugin
argument_list|,
name|snapshot
argument_list|)
decl_stmt|;
if|if
condition|(
name|newPlugin
operator|.
name|getCleanupHandle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cleanupHandles
operator|.
name|put
argument_list|(
name|newPlugin
argument_list|,
name|newPlugin
operator|.
name|getCleanupHandle
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*        * Pluggable plugin provider may have assigned a plugin name that could be        * actually different from the initial one assigned during scan. It is        * safer then to reassign it.        */
name|name
operator|=
name|newPlugin
operator|.
name|getName
argument_list|()
expr_stmt|;
name|boolean
name|reload
init|=
name|oldPlugin
operator|!=
literal|null
operator|&&
name|oldPlugin
operator|.
name|canReload
argument_list|()
operator|&&
name|newPlugin
operator|.
name|canReload
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|reload
operator|&&
name|oldPlugin
operator|!=
literal|null
condition|)
block|{
name|unloadPlugin
argument_list|(
name|oldPlugin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|newPlugin
operator|.
name|isDisabled
argument_list|()
condition|)
block|{
name|newPlugin
operator|.
name|start
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reload
condition|)
block|{
name|env
operator|.
name|onReloadPlugin
argument_list|(
name|oldPlugin
argument_list|,
name|newPlugin
argument_list|)
expr_stmt|;
name|unloadPlugin
argument_list|(
name|oldPlugin
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|newPlugin
operator|.
name|isDisabled
argument_list|()
condition|)
block|{
name|env
operator|.
name|onStartPlugin
argument_list|(
name|newPlugin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|newPlugin
operator|.
name|isDisabled
argument_list|()
condition|)
block|{
name|running
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|newPlugin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|disabled
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|newPlugin
argument_list|)
expr_stmt|;
block|}
name|broken
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|newPlugin
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|err
parameter_list|)
block|{
name|broken
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PluginInstallException
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
DECL|method|stopRemovedPlugins (Multimap<String, Path> jars)
specifier|private
name|void
name|stopRemovedPlugins
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|jars
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|unload
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|running
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Path
argument_list|>
argument_list|>
name|entry
range|:
name|jars
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".disabled"
argument_list|)
condition|)
block|{
name|unload
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|name
range|:
name|unload
control|)
block|{
name|unloadPlugin
argument_list|(
name|running
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dropRemovedDisabledPlugins (Multimap<String, Path> jars)
specifier|private
name|void
name|dropRemovedDisabledPlugins
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|jars
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|unload
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|disabled
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Path
argument_list|>
argument_list|>
name|entry
range|:
name|jars
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".disabled"
argument_list|)
condition|)
block|{
name|unload
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|name
range|:
name|unload
control|)
block|{
name|disabled
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processPendingCleanups ()
specifier|synchronized
name|int
name|processPendingCleanups
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Plugin
argument_list|>
name|iterator
init|=
name|toCleanup
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Plugin
name|plugin
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|CleanupHandle
name|cleanupHandle
init|=
name|cleanupHandles
operator|.
name|remove
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
if|if
condition|(
name|cleanupHandle
operator|!=
literal|null
condition|)
block|{
name|cleanupHandle
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|toCleanup
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|cleanInBackground ()
specifier|private
name|void
name|cleanInBackground
parameter_list|()
block|{
name|int
name|cnt
init|=
name|toCleanup
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|cnt
condition|)
block|{
name|cleaner
operator|.
name|get
argument_list|()
operator|.
name|clean
argument_list|(
name|cnt
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|nameOf (Path plugin)
specifier|public
specifier|static
name|String
name|nameOf
parameter_list|(
name|Path
name|plugin
parameter_list|)
block|{
return|return
name|nameOf
argument_list|(
name|plugin
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|nameOf (String name)
specifier|private
specifier|static
name|String
name|nameOf
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".disabled"
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|ext
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
return|return
literal|0
operator|<
name|ext
condition|?
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ext
argument_list|)
else|:
name|name
return|;
block|}
DECL|method|getExtension (String name)
specifier|private
specifier|static
name|String
name|getExtension
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|ext
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
return|return
literal|0
operator|<
name|ext
condition|?
name|name
operator|.
name|substring
argument_list|(
name|ext
argument_list|)
else|:
literal|""
return|;
block|}
DECL|method|loadPlugin (String name, Path srcPlugin, FileSnapshot snapshot)
specifier|private
name|Plugin
name|loadPlugin
parameter_list|(
name|String
name|name
parameter_list|,
name|Path
name|srcPlugin
parameter_list|,
name|FileSnapshot
name|snapshot
parameter_list|)
throws|throws
name|InvalidPluginException
block|{
name|String
name|pluginName
init|=
name|srcPlugin
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|isJsPlugin
argument_list|(
name|pluginName
argument_list|)
condition|)
block|{
return|return
name|loadJsPlugin
argument_list|(
name|name
argument_list|,
name|srcPlugin
argument_list|,
name|snapshot
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|serverPluginFactory
operator|.
name|handles
argument_list|(
name|srcPlugin
argument_list|)
condition|)
block|{
return|return
name|loadServerPlugin
argument_list|(
name|srcPlugin
argument_list|,
name|snapshot
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidPluginException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unsupported plugin type: %s"
argument_list|,
name|srcPlugin
operator|.
name|getFileName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|getPluginDataDir (String name)
specifier|private
name|Path
name|getPluginDataDir
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|dataDir
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getPluginCanonicalWebUrl (String name)
specifier|private
name|String
name|getPluginCanonicalWebUrl
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|url
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s/plugins/%s/"
argument_list|,
name|CharMatcher
operator|.
name|is
argument_list|(
literal|'/'
argument_list|)
operator|.
name|trimTrailingFrom
argument_list|(
name|urlProvider
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|name
argument_list|)
decl_stmt|;
return|return
name|url
return|;
block|}
DECL|method|loadJsPlugin (String name, Path srcJar, FileSnapshot snapshot)
specifier|private
name|Plugin
name|loadJsPlugin
parameter_list|(
name|String
name|name
parameter_list|,
name|Path
name|srcJar
parameter_list|,
name|FileSnapshot
name|snapshot
parameter_list|)
block|{
return|return
operator|new
name|JsPlugin
argument_list|(
name|name
argument_list|,
name|srcJar
argument_list|,
name|pluginUserFactory
operator|.
name|create
argument_list|(
name|name
argument_list|)
argument_list|,
name|snapshot
argument_list|)
return|;
block|}
DECL|method|loadServerPlugin (Path scriptFile, FileSnapshot snapshot)
specifier|private
name|ServerPlugin
name|loadServerPlugin
parameter_list|(
name|Path
name|scriptFile
parameter_list|,
name|FileSnapshot
name|snapshot
parameter_list|)
throws|throws
name|InvalidPluginException
block|{
name|String
name|name
init|=
name|serverPluginFactory
operator|.
name|getPluginName
argument_list|(
name|scriptFile
argument_list|)
decl_stmt|;
return|return
name|serverPluginFactory
operator|.
name|get
argument_list|(
name|scriptFile
argument_list|,
name|snapshot
argument_list|,
operator|new
name|PluginDescription
argument_list|(
name|pluginUserFactory
operator|.
name|create
argument_list|(
name|name
argument_list|)
argument_list|,
name|getPluginCanonicalWebUrl
argument_list|(
name|name
argument_list|)
argument_list|,
name|getPluginDataDir
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parentFor (Plugin.ApiType type)
specifier|static
name|ClassLoader
name|parentFor
parameter_list|(
name|Plugin
operator|.
name|ApiType
name|type
parameter_list|)
throws|throws
name|InvalidPluginException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|EXTENSION
case|:
return|return
name|PluginName
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
return|;
case|case
name|PLUGIN
case|:
return|return
name|PluginLoader
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
return|;
case|case
name|JS
case|:
return|return
name|JavaScriptPlugin
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|InvalidPluginException
argument_list|(
literal|"Unsupported ApiType "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|// Only one active plugin per plugin name can exist for each plugin name.
comment|// Filter out disabled plugins and transform the multimap to a map
DECL|method|filterDisabled ( Multimap<String, Path> pluginPaths)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|filterDisabled
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|pluginPaths
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|activePlugins
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|pluginPaths
operator|.
name|keys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|pluginPaths
operator|.
name|keys
argument_list|()
control|)
block|{
for|for
control|(
name|Path
name|pluginPath
range|:
name|pluginPaths
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|pluginPath
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".disabled"
argument_list|)
condition|)
block|{
assert|assert
operator|(
operator|!
name|activePlugins
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
operator|)
assert|;
name|activePlugins
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|pluginPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|activePlugins
return|;
block|}
comment|// Scan the $site_path/plugins directory and fetch all files and directories.
comment|// The Key in returned multimap is the plugin name initially assigned from its filename.
comment|// Values are the files. Plugins can optionally provide their name in MANIFEST file.
comment|// If multiple plugin files provide the same plugin name, then only
comment|// the first plugin remains active and all other plugins with the same
comment|// name are disabled.
comment|//
comment|// NOTE: Bear in mind that the plugin name can be reassigned after load by the
comment|//       Server plugin provider.
DECL|method|prunePlugins (Path pluginsDir)
specifier|public
name|Multimap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|prunePlugins
parameter_list|(
name|Path
name|pluginsDir
parameter_list|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|pluginPaths
init|=
name|scanPathsInPluginsDirectory
argument_list|(
name|pluginsDir
argument_list|)
decl_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|map
decl_stmt|;
name|map
operator|=
name|asMultimap
argument_list|(
name|pluginPaths
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|plugin
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|map
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
continue|continue;
block|}
comment|// retrieve enabled plugins
name|Iterable
argument_list|<
name|Path
argument_list|>
name|enabled
init|=
name|filterDisabledPlugins
argument_list|(
name|files
argument_list|)
decl_stmt|;
comment|// If we have only one (the winner) plugin, nothing to do
if|if
condition|(
operator|!
name|Iterables
operator|.
name|skip
argument_list|(
name|enabled
argument_list|,
literal|1
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Path
name|winner
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|enabled
argument_list|,
literal|null
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|winner
operator|!=
literal|null
operator|)
assert|;
comment|// Disable all loser plugins by renaming their file names to
comment|// "file.disabled" and replace the disabled files in the multimap.
name|Collection
argument_list|<
name|Path
argument_list|>
name|elementsToRemove
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Path
argument_list|>
name|elementsToAdd
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|loser
range|:
name|Iterables
operator|.
name|skip
argument_list|(
name|enabled
argument_list|,
literal|1
argument_list|)
control|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Plugin<%s> was disabled, because"
operator|+
literal|" another plugin<%s>"
operator|+
literal|" with the same name<%s> already exists"
argument_list|,
name|loser
argument_list|,
name|winner
argument_list|,
name|plugin
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|disabledPlugin
init|=
name|Paths
operator|.
name|get
argument_list|(
name|loser
operator|+
literal|".disabled"
argument_list|)
decl_stmt|;
name|elementsToAdd
operator|.
name|add
argument_list|(
name|disabledPlugin
argument_list|)
expr_stmt|;
name|elementsToRemove
operator|.
name|add
argument_list|(
name|loser
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|move
argument_list|(
name|loser
argument_list|,
name|disabledPlugin
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to fully disable plugin "
operator|+
name|loser
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterables
operator|.
name|removeAll
argument_list|(
name|files
argument_list|,
name|elementsToRemove
argument_list|)
expr_stmt|;
name|Iterables
operator|.
name|addAll
argument_list|(
name|files
argument_list|,
name|elementsToAdd
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|scanPathsInPluginsDirectory (Path pluginsDir)
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|scanPathsInPluginsDirectory
parameter_list|(
name|Path
name|pluginsDir
parameter_list|)
block|{
if|if
condition|(
name|pluginsDir
operator|==
literal|null
operator|||
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|pluginsDir
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|DirectoryStream
operator|.
name|Filter
argument_list|<
name|Path
argument_list|>
name|filter
init|=
operator|new
name|DirectoryStream
operator|.
name|Filter
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|n
init|=
name|entry
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|!
name|n
operator|.
name|startsWith
argument_list|(
literal|".last_"
argument_list|)
operator|&&
operator|!
name|n
operator|.
name|startsWith
argument_list|(
literal|".next_"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|pluginsDir
argument_list|,
name|filter
argument_list|)
init|)
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|files
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot list "
operator|+
name|pluginsDir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
block|}
DECL|method|filterDisabledPlugins ( Collection<Path> paths)
specifier|private
specifier|static
name|Iterable
argument_list|<
name|Path
argument_list|>
name|filterDisabledPlugins
parameter_list|(
name|Collection
argument_list|<
name|Path
argument_list|>
name|paths
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|filter
argument_list|(
name|paths
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
operator|!
name|p
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".disabled"
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getGerritPluginName (Path srcPath)
specifier|public
name|String
name|getGerritPluginName
parameter_list|(
name|Path
name|srcPath
parameter_list|)
block|{
name|String
name|fileName
init|=
name|srcPath
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|isJsPlugin
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
return|return
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fileName
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
return|;
block|}
if|if
condition|(
name|serverPluginFactory
operator|.
name|handles
argument_list|(
name|srcPath
argument_list|)
condition|)
block|{
return|return
name|serverPluginFactory
operator|.
name|getPluginName
argument_list|(
name|srcPath
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|asMultimap (List<Path> plugins)
specifier|private
name|Multimap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|asMultimap
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|plugins
parameter_list|)
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|map
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|srcPath
range|:
name|plugins
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|getPluginName
argument_list|(
name|srcPath
argument_list|)
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|isJsPlugin (String name)
specifier|private
specifier|static
name|boolean
name|isJsPlugin
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|isPlugin
argument_list|(
name|name
argument_list|,
literal|"js"
argument_list|)
return|;
block|}
DECL|method|isPlugin (String fileName, String ext)
specifier|private
specifier|static
name|boolean
name|isPlugin
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
name|String
name|fullExt
init|=
literal|"."
operator|+
name|ext
decl_stmt|;
return|return
name|fileName
operator|.
name|endsWith
argument_list|(
name|fullExt
argument_list|)
operator|||
name|fileName
operator|.
name|endsWith
argument_list|(
name|fullExt
operator|+
literal|".disabled"
argument_list|)
return|;
block|}
DECL|method|checkRemoteInstall ()
specifier|private
name|void
name|checkRemoteInstall
parameter_list|()
throws|throws
name|PluginInstallException
block|{
if|if
condition|(
operator|!
name|isRemoteAdminEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PluginInstallException
argument_list|(
literal|"remote installation is disabled"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

