begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git.gpg
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|gpg
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|OBJ_BLOB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|ArmoredInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKeyRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKeyRingCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|bc
operator|.
name|BcPGPObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|Note
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Store of GPG public keys in git notes.  *<p>  * Keys are stored in filenames based on their hex key ID, padded out to 40  * characters to match the length of a SHA-1. (This is to easily reuse existing  * fanout code in {@link NoteMap}, and may be changed later after an appropriate  * transition.)  *<p>  * The contents of each file is an ASCII armored stream containing one or more  * public key rings matching the ID. Multiple keys are supported because forging  * a key ID is possible, but such a key cannot be used to verify signatures  * produced with the correct key.  *<p>  * No additional checks are performed on the key after reading; callers should  * only trust keys after checking with a {@link PublicKeyChecker}.  */
end_comment

begin_class
DECL|class|PublicKeyStore
specifier|public
class|class
name|PublicKeyStore
implements|implements
name|AutoCloseable
block|{
DECL|field|repo
specifier|private
specifier|final
name|Repository
name|repo
decl_stmt|;
DECL|field|reader
specifier|private
name|ObjectReader
name|reader
decl_stmt|;
DECL|field|notes
specifier|private
name|NoteMap
name|notes
decl_stmt|;
comment|/** @param repo repository to read keys from. */
DECL|method|PublicKeyStore (Repository repo)
specifier|public
name|PublicKeyStore
parameter_list|(
name|Repository
name|repo
parameter_list|)
block|{
name|this
operator|.
name|repo
operator|=
name|repo
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
name|notes
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|load ()
specifier|private
name|void
name|load
parameter_list|()
throws|throws
name|IOException
block|{
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|repo
operator|.
name|newObjectReader
argument_list|()
expr_stmt|;
name|Ref
name|ref
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|REFS_GPG_KEYS
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
init|(
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|reader
argument_list|)
init|)
block|{
name|notes
operator|=
name|NoteMap
operator|.
name|read
argument_list|(
name|reader
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Read public keys with the given key ID.    *<p>    * Keys should not be trusted unless checked with {@link PublicKeyChecker}.    *<p>    * Multiple calls to this method use the same state of the key ref; to reread    * the ref, call {@link #close()} first.    *    * @param keyId key ID.    * @return any keys found that could be successfully parsed.    * @throws PGPException if an error occurred parsing the key data.    * @throws IOException if an error occurred reading the repository data.    */
DECL|method|get (long keyId)
specifier|public
name|PGPPublicKeyRingCollection
name|get
parameter_list|(
name|long
name|keyId
parameter_list|)
throws|throws
name|PGPException
throws|,
name|IOException
block|{
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
name|load
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|notes
operator|==
literal|null
condition|)
block|{
return|return
name|empty
argument_list|()
return|;
block|}
name|Note
name|note
init|=
name|notes
operator|.
name|getNote
argument_list|(
name|keyObjectId
argument_list|(
name|keyId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|note
operator|==
literal|null
condition|)
block|{
return|return
name|empty
argument_list|()
return|;
block|}
name|List
argument_list|<
name|PGPPublicKeyRing
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
name|reader
operator|.
name|open
argument_list|(
name|note
operator|.
name|getData
argument_list|()
argument_list|,
name|OBJ_BLOB
argument_list|)
operator|.
name|openStream
argument_list|()
init|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|Object
argument_list|>
name|it
init|=
operator|new
name|BcPGPObjectFactory
argument_list|(
operator|new
name|ArmoredInputStream
argument_list|(
name|in
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
break|break;
block|}
name|Object
name|obj
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|PGPPublicKeyRing
condition|)
block|{
name|keys
operator|.
name|add
argument_list|(
operator|(
name|PGPPublicKeyRing
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
name|checkState
argument_list|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
argument_list|,
literal|"expected one PGP object per ArmoredInputStream"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PGPPublicKeyRingCollection
argument_list|(
name|keys
argument_list|)
return|;
block|}
block|}
comment|// TODO(dborowitz): put method.
DECL|method|empty ()
specifier|private
specifier|static
name|PGPPublicKeyRingCollection
name|empty
parameter_list|()
throws|throws
name|PGPException
throws|,
name|IOException
block|{
return|return
operator|new
name|PGPPublicKeyRingCollection
argument_list|(
name|Collections
operator|.
expr|<
name|PGPPublicKeyRing
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|keyToString (PGPPublicKey key)
specifier|static
name|String
name|keyToString
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|key
operator|.
name|getUserIDs
argument_list|()
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|key
operator|.
name|getFingerprint
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s %s(%04X %04X %04X %04X %04X  %04X %04X %04X %04X %04X)"
argument_list|,
name|keyIdToString
argument_list|(
name|key
operator|.
name|getKeyID
argument_list|()
argument_list|)
argument_list|,
name|it
operator|.
name|hasNext
argument_list|()
condition|?
name|it
operator|.
name|next
argument_list|()
operator|+
literal|" "
else|:
literal|""
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|)
return|;
block|}
DECL|method|keyIdToString (long keyId)
specifier|static
name|String
name|keyIdToString
parameter_list|(
name|long
name|keyId
parameter_list|)
block|{
comment|// Match key ID format from gpg --list-keys.
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%08X"
argument_list|,
operator|(
name|int
operator|)
name|keyId
argument_list|)
return|;
block|}
DECL|method|keyObjectId (long keyId)
specifier|static
name|ObjectId
name|keyObjectId
parameter_list|(
name|long
name|keyId
parameter_list|)
block|{
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[
name|Constants
operator|.
name|OBJECT_ID_LENGTH
index|]
argument_list|)
decl_stmt|;
name|buf
operator|.
name|putLong
argument_list|(
name|keyId
argument_list|)
expr_stmt|;
return|return
name|ObjectId
operator|.
name|fromRaw
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

