begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|jdbc
operator|.
name|JdbcExecutor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|jdbc
operator|.
name|JdbcSchema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|schema
operator|.
name|ColumnModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|schema
operator|.
name|RelationModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|schema
operator|.
name|java
operator|.
name|JavaSchemaModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|schema
operator|.
name|sql
operator|.
name|DialectPostgreSQL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|schema
operator|.
name|sql
operator|.
name|SqlDialect
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|StatementExecutor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_class
DECL|class|Schema_101
specifier|public
class|class
name|Schema_101
extends|extends
name|SchemaVersion
block|{
DECL|class|PrimaryKey
specifier|private
specifier|static
class|class
name|PrimaryKey
block|{
DECL|field|oldNameInDb
name|String
name|oldNameInDb
decl_stmt|;
DECL|field|cols
name|List
argument_list|<
name|String
argument_list|>
name|cols
decl_stmt|;
block|}
DECL|field|conn
specifier|private
name|Connection
name|conn
decl_stmt|;
DECL|field|dialect
specifier|private
name|SqlDialect
name|dialect
decl_stmt|;
annotation|@
name|Inject
DECL|method|Schema_101 (Provider<Schema_100> prior)
name|Schema_101
parameter_list|(
name|Provider
argument_list|<
name|Schema_100
argument_list|>
name|prior
parameter_list|)
block|{
name|super
argument_list|(
name|prior
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|migrateData (ReviewDb db, UpdateUI ui)
specifier|protected
name|void
name|migrateData
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|UpdateUI
name|ui
parameter_list|)
throws|throws
name|OrmException
throws|,
name|SQLException
block|{
name|conn
operator|=
operator|(
operator|(
name|JdbcSchema
operator|)
name|db
operator|)
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|dialect
operator|=
operator|(
operator|(
name|JdbcSchema
operator|)
name|db
operator|)
operator|.
name|getDialect
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PrimaryKey
argument_list|>
name|corrections
init|=
name|findPKUpdates
argument_list|()
decl_stmt|;
if|if
condition|(
name|corrections
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|ui
operator|.
name|message
argument_list|(
literal|"Wrong Primary Key Column Order Detected"
argument_list|)
expr_stmt|;
name|ui
operator|.
name|message
argument_list|(
literal|"The following tables are affected:"
argument_list|)
expr_stmt|;
name|ui
operator|.
name|message
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|corrections
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ui
operator|.
name|message
argument_list|(
literal|"fixing primary keys..."
argument_list|)
expr_stmt|;
try|try
init|(
name|JdbcExecutor
name|executor
init|=
operator|new
name|JdbcExecutor
argument_list|(
name|conn
argument_list|)
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PrimaryKey
argument_list|>
name|c
range|:
name|corrections
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ui
operator|.
name|message
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"  table: %s ... "
argument_list|,
name|c
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|recreatePK
argument_list|(
name|executor
argument_list|,
name|c
operator|.
name|getKey
argument_list|()
argument_list|,
name|c
operator|.
name|getValue
argument_list|()
argument_list|,
name|ui
argument_list|)
expr_stmt|;
name|ui
operator|.
name|message
argument_list|(
literal|"done"
argument_list|)
expr_stmt|;
block|}
name|ui
operator|.
name|message
argument_list|(
literal|"done"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findPKUpdates ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PrimaryKey
argument_list|>
name|findPKUpdates
parameter_list|()
throws|throws
name|OrmException
throws|,
name|SQLException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PrimaryKey
argument_list|>
name|corrections
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|DatabaseMetaData
name|meta
init|=
name|conn
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|JavaSchemaModel
name|jsm
init|=
operator|new
name|JavaSchemaModel
argument_list|(
name|ReviewDb
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|RelationModel
name|rm
range|:
name|jsm
operator|.
name|getRelations
argument_list|()
control|)
block|{
name|String
name|tableName
init|=
name|rm
operator|.
name|getRelationName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedPKCols
init|=
name|relationPK
argument_list|(
name|rm
argument_list|)
decl_stmt|;
name|PrimaryKey
name|actualPK
init|=
name|dbTablePK
argument_list|(
name|meta
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|expectedPKCols
operator|.
name|equals
argument_list|(
name|actualPK
operator|.
name|cols
argument_list|)
condition|)
block|{
name|actualPK
operator|.
name|cols
operator|=
name|expectedPKCols
expr_stmt|;
name|corrections
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|actualPK
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|corrections
return|;
block|}
DECL|method|relationPK (RelationModel rm)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|relationPK
parameter_list|(
name|RelationModel
name|rm
parameter_list|)
block|{
name|Collection
argument_list|<
name|ColumnModel
argument_list|>
name|cols
init|=
name|rm
operator|.
name|getPrimaryKeyColumns
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|pk
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cols
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnModel
name|cm
range|:
name|cols
control|)
block|{
name|pk
operator|.
name|add
argument_list|(
name|cm
operator|.
name|getColumnName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|pk
return|;
block|}
DECL|method|dbTablePK (DatabaseMetaData meta, String tableName)
specifier|private
name|PrimaryKey
name|dbTablePK
parameter_list|(
name|DatabaseMetaData
name|meta
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|meta
operator|.
name|storesUpperCaseIdentifiers
argument_list|()
condition|)
block|{
name|tableName
operator|=
name|tableName
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|meta
operator|.
name|storesLowerCaseIdentifiers
argument_list|()
condition|)
block|{
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|ResultSet
name|cols
init|=
name|meta
operator|.
name|getPrimaryKeys
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|)
init|)
block|{
name|PrimaryKey
name|pk
init|=
operator|new
name|PrimaryKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Short
argument_list|,
name|String
argument_list|>
name|seqToName
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|cols
operator|.
name|next
argument_list|()
condition|)
block|{
name|seqToName
operator|.
name|put
argument_list|(
name|cols
operator|.
name|getShort
argument_list|(
literal|"KEY_SEQ"
argument_list|)
argument_list|,
name|cols
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pk
operator|.
name|oldNameInDb
operator|==
literal|null
condition|)
block|{
name|pk
operator|.
name|oldNameInDb
operator|=
name|cols
operator|.
name|getString
argument_list|(
literal|"PK_NAME"
argument_list|)
expr_stmt|;
block|}
block|}
name|pk
operator|.
name|cols
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|seqToName
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|seqToName
operator|.
name|values
argument_list|()
control|)
block|{
name|pk
operator|.
name|cols
operator|.
name|add
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|pk
return|;
block|}
block|}
DECL|method|recreatePK (StatementExecutor executor, String tableName, PrimaryKey pk, UpdateUI ui)
specifier|private
name|void
name|recreatePK
parameter_list|(
name|StatementExecutor
name|executor
parameter_list|,
name|String
name|tableName
parameter_list|,
name|PrimaryKey
name|pk
parameter_list|,
name|UpdateUI
name|ui
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|pk
operator|.
name|oldNameInDb
operator|==
literal|null
condition|)
block|{
name|ui
operator|.
name|message
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"warning: primary key for table %s didn't exist ... "
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dialect
operator|instanceof
name|DialectPostgreSQL
condition|)
block|{
comment|// postgresql doesn't support the ALTER TABLE foo DROP PRIMARY KEY form
name|executor
operator|.
name|execute
argument_list|(
literal|"ALTER TABLE "
operator|+
name|tableName
operator|+
literal|" DROP CONSTRAINT "
operator|+
name|pk
operator|.
name|oldNameInDb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|executor
operator|.
name|execute
argument_list|(
literal|"ALTER TABLE "
operator|+
name|tableName
operator|+
literal|" DROP PRIMARY KEY"
argument_list|)
expr_stmt|;
block|}
block|}
name|executor
operator|.
name|execute
argument_list|(
literal|"ALTER TABLE "
operator|+
name|tableName
operator|+
literal|" ADD PRIMARY KEY("
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|pk
operator|.
name|cols
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

