begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
operator|.
name|REF_REJECT_COMMITS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|CorruptObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|Note
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMapMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|BanCommit
specifier|public
class|class
name|BanCommit
block|{
DECL|field|MAX_LOCK_FAILURE_CALLS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_LOCK_FAILURE_CALLS
init|=
literal|10
decl_stmt|;
DECL|field|SLEEP_ON_LOCK_FAILURE_MS
specifier|private
specifier|static
specifier|final
name|int
name|SLEEP_ON_LOCK_FAILURE_MS
init|=
literal|25
decl_stmt|;
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create ()
name|BanCommit
name|create
parameter_list|()
function_decl|;
block|}
DECL|field|currentUser
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|currentUser
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|gerritIdent
specifier|private
specifier|final
name|PersonIdent
name|gerritIdent
decl_stmt|;
annotation|@
name|Inject
DECL|method|BanCommit (final Provider<CurrentUser> currentUser, final GitRepositoryManager repoManager, final AccountCache accountCache, @GerritPersonIdent final PersonIdent gerritIdent)
name|BanCommit
parameter_list|(
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|currentUser
parameter_list|,
specifier|final
name|GitRepositoryManager
name|repoManager
parameter_list|,
specifier|final
name|AccountCache
name|accountCache
parameter_list|,
annotation|@
name|GerritPersonIdent
specifier|final
name|PersonIdent
name|gerritIdent
parameter_list|)
block|{
name|this
operator|.
name|currentUser
operator|=
name|currentUser
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|gerritIdent
operator|=
name|gerritIdent
expr_stmt|;
block|}
DECL|method|ban (final ProjectControl projectControl, final List<ObjectId> commitsToBan, final String reason)
specifier|public
name|BanCommitResult
name|ban
parameter_list|(
specifier|final
name|ProjectControl
name|projectControl
parameter_list|,
specifier|final
name|List
argument_list|<
name|ObjectId
argument_list|>
name|commitsToBan
parameter_list|,
specifier|final
name|String
name|reason
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|IncompleteUserInfoException
throws|,
name|InterruptedException
throws|,
name|MergeException
block|{
if|if
condition|(
operator|!
name|projectControl
operator|.
name|isOwner
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"No project owner: not permitted to ban commits"
argument_list|)
throw|;
block|}
specifier|final
name|BanCommitResult
name|result
init|=
operator|new
name|BanCommitResult
argument_list|()
decl_stmt|;
specifier|final
name|PersonIdent
name|currentUserIdent
init|=
name|createPersonIdent
argument_list|()
decl_stmt|;
specifier|final
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|projectControl
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|RevWalk
name|revWalk
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
decl_stmt|;
specifier|final
name|ObjectInserter
name|inserter
init|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
decl_stmt|;
try|try
block|{
name|NoteMap
name|baseNoteMap
init|=
literal|null
decl_stmt|;
name|RevCommit
name|baseCommit
init|=
literal|null
decl_stmt|;
specifier|final
name|Ref
name|notesBranch
init|=
name|repo
operator|.
name|getRef
argument_list|(
name|REF_REJECT_COMMITS
argument_list|)
decl_stmt|;
if|if
condition|(
name|notesBranch
operator|!=
literal|null
condition|)
block|{
name|baseCommit
operator|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|notesBranch
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|baseNoteMap
operator|=
name|NoteMap
operator|.
name|read
argument_list|(
name|revWalk
operator|.
name|getObjectReader
argument_list|()
argument_list|,
name|baseCommit
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NoteMap
name|ourNoteMap
decl_stmt|;
if|if
condition|(
name|baseCommit
operator|!=
literal|null
condition|)
block|{
name|ourNoteMap
operator|=
name|NoteMap
operator|.
name|read
argument_list|(
name|repo
operator|.
name|newObjectReader
argument_list|()
argument_list|,
name|baseCommit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ourNoteMap
operator|=
name|NoteMap
operator|.
name|newEmptyMap
argument_list|()
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|ObjectId
name|commitToBan
range|:
name|commitsToBan
control|)
block|{
try|try
block|{
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|commitToBan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingObjectException
name|e
parameter_list|)
block|{
comment|// ignore exception, also not existing commits can be banned
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|e
parameter_list|)
block|{
name|result
operator|.
name|notACommit
argument_list|(
name|commitToBan
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|Note
name|note
init|=
name|ourNoteMap
operator|.
name|getNote
argument_list|(
name|commitToBan
argument_list|)
decl_stmt|;
if|if
condition|(
name|note
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|commitAlreadyBanned
argument_list|(
name|commitToBan
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|noteContent
init|=
name|reason
operator|!=
literal|null
condition|?
name|reason
else|:
literal|""
decl_stmt|;
specifier|final
name|ObjectId
name|noteContentId
init|=
name|inserter
operator|.
name|insert
argument_list|(
name|Constants
operator|.
name|OBJ_BLOB
argument_list|,
name|noteContent
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|ourNoteMap
operator|.
name|set
argument_list|(
name|commitToBan
argument_list|,
name|noteContentId
argument_list|)
expr_stmt|;
name|result
operator|.
name|commitBanned
argument_list|(
name|commitToBan
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|getNewlyBannedCommits
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|result
return|;
block|}
specifier|final
name|ObjectId
name|ourCommit
init|=
name|commit
argument_list|(
name|ourNoteMap
argument_list|,
name|inserter
argument_list|,
name|currentUserIdent
argument_list|,
name|baseCommit
argument_list|,
name|result
argument_list|,
name|reason
argument_list|)
decl_stmt|;
name|updateRef
argument_list|(
name|repo
argument_list|,
name|revWalk
argument_list|,
name|inserter
argument_list|,
name|ourNoteMap
argument_list|,
name|ourCommit
argument_list|,
name|baseNoteMap
argument_list|,
name|baseCommit
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|revWalk
operator|.
name|release
argument_list|()
expr_stmt|;
name|inserter
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|createPersonIdent ()
specifier|private
name|PersonIdent
name|createPersonIdent
parameter_list|()
throws|throws
name|IncompleteUserInfoException
block|{
specifier|final
name|String
name|userName
init|=
name|currentUser
operator|.
name|get
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
specifier|final
name|Account
name|account
init|=
name|accountCache
operator|.
name|getByUsername
argument_list|(
name|userName
argument_list|)
operator|.
name|getAccount
argument_list|()
decl_stmt|;
if|if
condition|(
name|account
operator|.
name|getFullName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IncompleteUserInfoException
argument_list|(
name|userName
argument_list|,
literal|"full name"
argument_list|)
throw|;
block|}
if|if
condition|(
name|account
operator|.
name|getPreferredEmail
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IncompleteUserInfoException
argument_list|(
name|userName
argument_list|,
literal|"preferred email"
argument_list|)
throw|;
block|}
return|return
operator|new
name|PersonIdent
argument_list|(
name|account
operator|.
name|getFullName
argument_list|()
argument_list|,
name|account
operator|.
name|getPreferredEmail
argument_list|()
argument_list|)
return|;
block|}
DECL|method|commit (final NoteMap noteMap, final ObjectInserter inserter, final PersonIdent personIdent, final ObjectId baseCommit, final BanCommitResult result, final String reason)
specifier|private
specifier|static
name|ObjectId
name|commit
parameter_list|(
specifier|final
name|NoteMap
name|noteMap
parameter_list|,
specifier|final
name|ObjectInserter
name|inserter
parameter_list|,
specifier|final
name|PersonIdent
name|personIdent
parameter_list|,
specifier|final
name|ObjectId
name|baseCommit
parameter_list|,
specifier|final
name|BanCommitResult
name|result
parameter_list|,
specifier|final
name|String
name|reason
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|commitMsg
init|=
name|buildCommitMessage
argument_list|(
name|result
operator|.
name|getNewlyBannedCommits
argument_list|()
argument_list|,
name|reason
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseCommit
operator|!=
literal|null
condition|)
block|{
return|return
name|createCommit
argument_list|(
name|noteMap
argument_list|,
name|inserter
argument_list|,
name|personIdent
argument_list|,
name|commitMsg
argument_list|,
name|baseCommit
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|createCommit
argument_list|(
name|noteMap
argument_list|,
name|inserter
argument_list|,
name|personIdent
argument_list|,
name|commitMsg
argument_list|)
return|;
block|}
block|}
DECL|method|createCommit (final NoteMap noteMap, final ObjectInserter inserter, final PersonIdent personIdent, final String message, final ObjectId... parents)
specifier|private
specifier|static
name|ObjectId
name|createCommit
parameter_list|(
specifier|final
name|NoteMap
name|noteMap
parameter_list|,
specifier|final
name|ObjectInserter
name|inserter
parameter_list|,
specifier|final
name|PersonIdent
name|personIdent
parameter_list|,
specifier|final
name|String
name|message
parameter_list|,
specifier|final
name|ObjectId
modifier|...
name|parents
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|CommitBuilder
name|b
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|setTreeId
argument_list|(
name|noteMap
operator|.
name|writeTree
argument_list|(
name|inserter
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|setAuthor
argument_list|(
name|personIdent
argument_list|)
expr_stmt|;
name|b
operator|.
name|setCommitter
argument_list|(
name|personIdent
argument_list|)
expr_stmt|;
if|if
condition|(
name|parents
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|b
operator|.
name|setParentIds
argument_list|(
name|parents
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
specifier|final
name|ObjectId
name|commitId
init|=
name|inserter
operator|.
name|insert
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|inserter
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|commitId
return|;
block|}
DECL|method|buildCommitMessage (final List<ObjectId> bannedCommits, final String reason)
specifier|private
specifier|static
name|String
name|buildCommitMessage
parameter_list|(
specifier|final
name|List
argument_list|<
name|ObjectId
argument_list|>
name|bannedCommits
parameter_list|,
specifier|final
name|String
name|reason
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|commitMsg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|commitMsg
operator|.
name|append
argument_list|(
literal|"Banning "
argument_list|)
expr_stmt|;
name|commitMsg
operator|.
name|append
argument_list|(
name|bannedCommits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commitMsg
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|commitMsg
operator|.
name|append
argument_list|(
name|bannedCommits
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|"commit"
else|:
literal|"commits"
argument_list|)
expr_stmt|;
name|commitMsg
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
block|{
name|commitMsg
operator|.
name|append
argument_list|(
literal|"Reason: "
argument_list|)
expr_stmt|;
name|commitMsg
operator|.
name|append
argument_list|(
name|reason
argument_list|)
expr_stmt|;
name|commitMsg
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
name|commitMsg
operator|.
name|append
argument_list|(
literal|"The following commits are banned:\n"
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|commitList
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|ObjectId
name|c
range|:
name|bannedCommits
control|)
block|{
if|if
condition|(
name|commitList
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|commitList
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
block|}
name|commitList
operator|.
name|append
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|commitMsg
operator|.
name|append
argument_list|(
name|commitList
argument_list|)
expr_stmt|;
return|return
name|commitMsg
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|updateRef (final Repository repo, final RevWalk revWalk, final ObjectInserter inserter, final NoteMap ourNoteMap, final ObjectId oursCommit, final NoteMap baseNoteMap, final ObjectId baseCommit)
specifier|public
name|void
name|updateRef
parameter_list|(
specifier|final
name|Repository
name|repo
parameter_list|,
specifier|final
name|RevWalk
name|revWalk
parameter_list|,
specifier|final
name|ObjectInserter
name|inserter
parameter_list|,
specifier|final
name|NoteMap
name|ourNoteMap
parameter_list|,
specifier|final
name|ObjectId
name|oursCommit
parameter_list|,
specifier|final
name|NoteMap
name|baseNoteMap
parameter_list|,
specifier|final
name|ObjectId
name|baseCommit
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
throws|,
name|CorruptObjectException
throws|,
name|MergeException
block|{
name|int
name|remainingLockFailureCalls
init|=
name|MAX_LOCK_FAILURE_CALLS
decl_stmt|;
name|RefUpdate
name|refUpdate
init|=
name|createRefUpdate
argument_list|(
name|repo
argument_list|,
name|oursCommit
argument_list|,
name|baseCommit
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|Result
name|result
init|=
name|refUpdate
operator|.
name|update
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|Result
operator|.
name|LOCK_FAILURE
condition|)
block|{
if|if
condition|(
operator|--
name|remainingLockFailureCalls
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_ON_LOCK_FAILURE_MS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Failed to lock the ref: "
operator|+
name|REF_REJECT_COMMITS
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|result
operator|==
name|Result
operator|.
name|REJECTED
condition|)
block|{
specifier|final
name|RevCommit
name|theirsCommit
init|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|refUpdate
operator|.
name|getOldObjectId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|NoteMap
name|theirNoteMap
init|=
name|NoteMap
operator|.
name|read
argument_list|(
name|revWalk
operator|.
name|getObjectReader
argument_list|()
argument_list|,
name|theirsCommit
argument_list|)
decl_stmt|;
specifier|final
name|NoteMapMerger
name|merger
init|=
operator|new
name|NoteMapMerger
argument_list|(
name|repo
argument_list|)
decl_stmt|;
specifier|final
name|NoteMap
name|merged
init|=
name|merger
operator|.
name|merge
argument_list|(
name|baseNoteMap
argument_list|,
name|ourNoteMap
argument_list|,
name|theirNoteMap
argument_list|)
decl_stmt|;
specifier|final
name|ObjectId
name|mergeCommit
init|=
name|createCommit
argument_list|(
name|merged
argument_list|,
name|inserter
argument_list|,
name|gerritIdent
argument_list|,
literal|"Merged note commits\n"
argument_list|,
name|oursCommit
argument_list|,
name|theirsCommit
argument_list|)
decl_stmt|;
name|refUpdate
operator|=
name|createRefUpdate
argument_list|(
name|repo
argument_list|,
name|mergeCommit
argument_list|,
name|theirsCommit
argument_list|)
expr_stmt|;
name|remainingLockFailureCalls
operator|=
name|MAX_LOCK_FAILURE_CALLS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|==
name|Result
operator|.
name|IO_FAILURE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't create commit reject notes because of IO_FAILURE"
argument_list|)
throw|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
DECL|method|createRefUpdate (final Repository repo, final ObjectId newObjectId, final ObjectId expectedOldObjectId)
specifier|private
specifier|static
name|RefUpdate
name|createRefUpdate
parameter_list|(
specifier|final
name|Repository
name|repo
parameter_list|,
specifier|final
name|ObjectId
name|newObjectId
parameter_list|,
specifier|final
name|ObjectId
name|expectedOldObjectId
parameter_list|)
throws|throws
name|IOException
block|{
name|RefUpdate
name|refUpdate
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|REF_REJECT_COMMITS
argument_list|)
decl_stmt|;
name|refUpdate
operator|.
name|setNewObjectId
argument_list|(
name|newObjectId
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedOldObjectId
operator|==
literal|null
condition|)
block|{
name|refUpdate
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|refUpdate
operator|.
name|setExpectedOldObjectId
argument_list|(
name|expectedOldObjectId
argument_list|)
expr_stmt|;
block|}
return|return
name|refUpdate
return|;
block|}
block|}
end_class

end_unit

