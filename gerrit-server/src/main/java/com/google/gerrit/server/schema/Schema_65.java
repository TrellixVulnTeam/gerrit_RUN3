begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ContributorAgreement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupMember
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupMemberAudit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupUUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AnonymousCowardName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|NoReplication
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|VersionedMetaData
operator|.
name|BatchMetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|jdbc
operator|.
name|JdbcSchema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|SystemReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_class
DECL|class|Schema_65
specifier|public
class|class
name|Schema_65
extends|extends
name|SchemaVersion
block|{
DECL|field|allProjects
specifier|private
specifier|final
name|AllProjectsName
name|allProjects
decl_stmt|;
DECL|field|mgr
specifier|private
specifier|final
name|GitRepositoryManager
name|mgr
decl_stmt|;
DECL|field|serverUser
specifier|private
specifier|final
name|PersonIdent
name|serverUser
decl_stmt|;
DECL|field|anonymousCowardName
specifier|private
specifier|final
annotation|@
name|AnonymousCowardName
name|String
name|anonymousCowardName
decl_stmt|;
annotation|@
name|Inject
DECL|method|Schema_65 (Provider<Schema_64> prior, AllProjectsName allProjects, GitRepositoryManager mgr, @GerritPersonIdent PersonIdent serverUser, @AnonymousCowardName String anonymousCowardName)
name|Schema_65
parameter_list|(
name|Provider
argument_list|<
name|Schema_64
argument_list|>
name|prior
parameter_list|,
name|AllProjectsName
name|allProjects
parameter_list|,
name|GitRepositoryManager
name|mgr
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverUser
parameter_list|,
annotation|@
name|AnonymousCowardName
name|String
name|anonymousCowardName
parameter_list|)
block|{
name|super
argument_list|(
name|prior
argument_list|)
expr_stmt|;
name|this
operator|.
name|allProjects
operator|=
name|allProjects
expr_stmt|;
name|this
operator|.
name|mgr
operator|=
name|mgr
expr_stmt|;
name|this
operator|.
name|serverUser
operator|=
name|serverUser
expr_stmt|;
name|this
operator|.
name|anonymousCowardName
operator|=
name|anonymousCowardName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|migrateData (ReviewDb db, UpdateUI ui)
specifier|protected
name|void
name|migrateData
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|UpdateUI
name|ui
parameter_list|)
throws|throws
name|OrmException
throws|,
name|SQLException
block|{
name|Repository
name|git
decl_stmt|;
try|try
block|{
name|git
operator|=
name|mgr
operator|.
name|openRepository
argument_list|(
name|allProjects
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|MetaDataUpdate
name|md
init|=
operator|new
name|MetaDataUpdate
argument_list|(
operator|new
name|NoReplication
argument_list|()
argument_list|,
name|allProjects
argument_list|,
name|git
argument_list|)
decl_stmt|;
name|ProjectConfig
name|config
init|=
name|ProjectConfig
operator|.
name|read
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|ContributorAgreement
argument_list|>
name|agreements
init|=
name|getAgreementToAdd
argument_list|(
name|db
argument_list|,
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|agreements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|ui
operator|.
name|message
argument_list|(
literal|"Moved contributor agreements to project.config"
argument_list|)
expr_stmt|;
comment|// Create the auto verify groups.
name|List
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|adminGroupIds
init|=
name|getAdministrateServerGroups
argument_list|(
name|db
argument_list|,
name|config
argument_list|)
decl_stmt|;
for|for
control|(
name|ContributorAgreement
name|agreement
range|:
name|agreements
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|agreement
operator|.
name|getAutoVerify
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getOrCreateGroupForIndividuals
argument_list|(
name|db
argument_list|,
name|config
argument_list|,
name|adminGroupIds
argument_list|,
name|agreement
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Scan AccountAgreement
name|long
name|minTime
init|=
name|addAccountAgreements
argument_list|(
name|db
argument_list|,
name|config
argument_list|,
name|adminGroupIds
argument_list|,
name|agreements
argument_list|)
decl_stmt|;
name|ProjectConfig
name|base
init|=
name|ProjectConfig
operator|.
name|read
argument_list|(
name|md
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|ContributorAgreement
name|agreement
range|:
name|agreements
operator|.
name|values
argument_list|()
control|)
block|{
name|base
operator|.
name|replace
argument_list|(
name|agreement
argument_list|)
expr_stmt|;
block|}
name|base
operator|.
name|getAccountsSection
argument_list|()
operator|.
name|setSameGroupVisibility
argument_list|(
name|config
operator|.
name|getAccountsSection
argument_list|()
operator|.
name|getSameGroupVisibility
argument_list|()
argument_list|)
expr_stmt|;
name|BatchMetaDataUpdate
name|batch
init|=
name|base
operator|.
name|openUpdate
argument_list|(
name|md
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Scan AccountGroupAgreement
name|List
argument_list|<
name|AccountGroupAgreement
argument_list|>
name|groupAgreements
init|=
name|getAccountGroupAgreements
argument_list|(
name|db
argument_list|,
name|agreements
argument_list|)
decl_stmt|;
comment|// Find the earliest change
for|for
control|(
name|AccountGroupAgreement
name|aga
range|:
name|groupAgreements
control|)
block|{
name|minTime
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minTime
argument_list|,
name|aga
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|minTime
operator|-=
literal|60
operator|*
literal|1000
expr_stmt|;
comment|// 1 Minute
name|CommitBuilder
name|commit
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|commit
operator|.
name|setAuthor
argument_list|(
operator|new
name|PersonIdent
argument_list|(
name|serverUser
argument_list|,
operator|new
name|Date
argument_list|(
name|minTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setCommitter
argument_list|(
operator|new
name|PersonIdent
argument_list|(
name|serverUser
argument_list|,
operator|new
name|Date
argument_list|(
name|minTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setMessage
argument_list|(
literal|"Add the ContributorAgreements for upgrade to Gerrit Code Review schema 65\n"
argument_list|)
expr_stmt|;
name|batch
operator|.
name|write
argument_list|(
name|commit
argument_list|)
expr_stmt|;
for|for
control|(
name|AccountGroupAgreement
name|aga
range|:
name|groupAgreements
control|)
block|{
name|AccountGroup
name|group
init|=
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|get
argument_list|(
name|aga
operator|.
name|groupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|ContributorAgreement
name|agreement
init|=
name|agreements
operator|.
name|get
argument_list|(
name|aga
operator|.
name|claId
argument_list|)
decl_stmt|;
name|agreement
operator|.
name|getAccepted
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|PermissionRule
argument_list|(
name|config
operator|.
name|resolve
argument_list|(
name|group
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|base
operator|.
name|replace
argument_list|(
name|agreement
argument_list|)
expr_stmt|;
name|PersonIdent
name|ident
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|aga
operator|.
name|reviewedBy
operator|!=
literal|null
condition|)
block|{
name|Account
name|ua
init|=
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|aga
operator|.
name|reviewedBy
argument_list|)
decl_stmt|;
if|if
condition|(
name|ua
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|ua
operator|.
name|getFullName
argument_list|()
decl_stmt|;
name|String
name|email
init|=
name|ua
operator|.
name|getPreferredEmail
argument_list|()
decl_stmt|;
if|if
condition|(
name|email
operator|==
literal|null
operator|||
name|email
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No preferred email is configured. Use a generic identity so we
comment|// don't leak an address the user may have given us, but doesn't
comment|// necessarily want to publish through Git records.
comment|//
name|String
name|user
init|=
name|ua
operator|.
name|getUserName
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|user
operator|=
literal|"account-"
operator|+
name|ua
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|String
name|host
init|=
name|SystemReader
operator|.
name|getInstance
argument_list|()
operator|.
name|getHostname
argument_list|()
decl_stmt|;
name|email
operator|=
name|user
operator|+
literal|"@"
operator|+
name|host
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|int
name|at
init|=
name|email
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|at
condition|)
block|{
name|name
operator|=
name|email
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|at
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|anonymousCowardName
expr_stmt|;
block|}
block|}
name|ident
operator|=
operator|new
name|PersonIdent
argument_list|(
name|name
argument_list|,
name|email
argument_list|,
operator|new
name|Date
argument_list|(
name|aga
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|,
name|TimeZone
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ident
operator|==
literal|null
condition|)
block|{
name|ident
operator|=
operator|new
name|PersonIdent
argument_list|(
name|serverUser
argument_list|,
operator|new
name|Date
argument_list|(
name|aga
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Build the commits such that it keeps track of the date added and
comment|// who added it.
name|commit
operator|=
operator|new
name|CommitBuilder
argument_list|()
expr_stmt|;
name|commit
operator|.
name|setAuthor
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setCommitter
argument_list|(
operator|new
name|PersonIdent
argument_list|(
name|serverUser
argument_list|,
operator|new
name|Date
argument_list|(
name|aga
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Accept %s contributor agreement for %s\n"
argument_list|,
name|agreement
operator|.
name|getName
argument_list|()
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|aga
operator|.
name|reviewComments
argument_list|)
condition|)
block|{
name|msg
operator|+=
literal|"\n"
operator|+
name|aga
operator|.
name|reviewComments
operator|+
literal|"\n"
expr_stmt|;
block|}
name|commit
operator|.
name|setMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|batch
operator|.
name|write
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
comment|// Merge the agreements with the other data in project.config.
name|commit
operator|=
operator|new
name|CommitBuilder
argument_list|()
expr_stmt|;
name|commit
operator|.
name|setAuthor
argument_list|(
name|serverUser
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setCommitter
argument_list|(
name|serverUser
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setMessage
argument_list|(
literal|"Upgrade to Gerrit Code Review schema 65\n"
argument_list|)
expr_stmt|;
name|commit
operator|.
name|addParentId
argument_list|(
name|config
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|batch
operator|.
name|write
argument_list|(
name|config
argument_list|,
name|commit
argument_list|)
expr_stmt|;
comment|// Save the the final metadata.
if|if
condition|(
operator|!
name|batch
operator|.
name|commitAt
argument_list|(
name|config
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Cannot update "
operator|+
name|allProjects
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|git
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getAgreementToAdd ( ReviewDb db, ProjectConfig config)
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|ContributorAgreement
argument_list|>
name|getAgreementToAdd
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ProjectConfig
name|config
parameter_list|)
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
operator|(
operator|(
name|JdbcSchema
operator|)
name|db
operator|)
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT short_name, id, require_contact_information,"
operator|+
literal|"       short_description, agreement_url, auto_verify "
operator|+
literal|"FROM contributor_agreements WHERE active = 'Y'"
argument_list|)
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|ContributorAgreement
argument_list|>
name|agreements
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getContributorAgreement
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
continue|continue;
comment|// already exists
block|}
name|ContributorAgreement
name|a
init|=
name|config
operator|.
name|getContributorAgreement
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|agreements
operator|.
name|put
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|a
operator|.
name|setRequireContactInformation
argument_list|(
literal|"Y"
operator|.
name|equals
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDescription
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setAgreementUrl
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Y"
operator|.
name|equals
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|6
argument_list|)
argument_list|)
condition|)
block|{
name|a
operator|.
name|setAutoVerify
argument_list|(
operator|new
name|GroupReference
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|agreements
return|;
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createGroup (ReviewDb db, String groupName, AccountGroup.Id adminGroupId, String description)
specifier|private
name|AccountGroup
name|createGroup
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|String
name|groupName
parameter_list|,
name|AccountGroup
operator|.
name|Id
name|adminGroupId
parameter_list|,
name|String
name|description
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|AccountGroup
operator|.
name|Id
name|groupId
init|=
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|db
operator|.
name|nextAccountGroupId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AccountGroup
operator|.
name|NameKey
name|nameKey
init|=
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
specifier|final
name|AccountGroup
operator|.
name|UUID
name|uuid
init|=
name|GroupUUID
operator|.
name|make
argument_list|(
name|groupName
argument_list|,
name|serverUser
argument_list|)
decl_stmt|;
specifier|final
name|AccountGroup
name|group
init|=
operator|new
name|AccountGroup
argument_list|(
name|nameKey
argument_list|,
name|groupId
argument_list|,
name|uuid
argument_list|)
decl_stmt|;
name|group
operator|.
name|setOwnerGroupId
argument_list|(
name|adminGroupId
argument_list|)
expr_stmt|;
name|group
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
specifier|final
name|AccountGroupName
name|gn
init|=
operator|new
name|AccountGroupName
argument_list|(
name|group
argument_list|)
decl_stmt|;
comment|// first insert the group name to validate that the group name hasn't
comment|// already been used to create another group
name|db
operator|.
name|accountGroupNames
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|gn
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|group
return|;
block|}
DECL|method|getAdministrateServerGroups ( ReviewDb db, ProjectConfig cfg)
specifier|private
name|List
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|getAdministrateServerGroups
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ProjectConfig
name|cfg
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|rules
init|=
name|cfg
operator|.
name|getAccessSection
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|)
operator|.
name|getPermission
argument_list|(
name|GlobalCapability
operator|.
name|ADMINISTRATE_SERVER
argument_list|)
operator|.
name|getRules
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|groups
init|=
name|Lists
operator|.
name|newArrayListWithExpectedSize
argument_list|(
name|rules
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PermissionRule
name|rule
range|:
name|rules
control|)
block|{
if|if
condition|(
name|rule
operator|.
name|getAction
argument_list|()
operator|==
name|Action
operator|.
name|ALLOW
condition|)
block|{
name|groups
operator|.
name|add
argument_list|(
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|byUUID
argument_list|(
name|rule
operator|.
name|getGroup
argument_list|()
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|groups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no administrator group found"
argument_list|)
throw|;
block|}
return|return
name|groups
return|;
block|}
DECL|method|getOrCreateGroupForIndividuals (ReviewDb db, ProjectConfig config, List<AccountGroup.Id> adminGroupIds, ContributorAgreement agreement)
specifier|private
name|GroupReference
name|getOrCreateGroupForIndividuals
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ProjectConfig
name|config
parameter_list|,
name|List
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|adminGroupIds
parameter_list|,
name|ContributorAgreement
name|agreement
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
operator|!
name|agreement
operator|.
name|getAccepted
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|agreement
operator|.
name|getAccepted
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGroup
argument_list|()
return|;
block|}
name|String
name|name
init|=
literal|"CLA Accepted - "
operator|+
name|agreement
operator|.
name|getName
argument_list|()
decl_stmt|;
name|AccountGroupName
name|agn
init|=
name|db
operator|.
name|accountGroupNames
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|AccountGroup
name|ag
decl_stmt|;
if|if
condition|(
name|agn
operator|!=
literal|null
condition|)
block|{
name|ag
operator|=
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|get
argument_list|(
name|agn
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ag
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"account group name exists but account group does not: "
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|adminGroupIds
operator|.
name|contains
argument_list|(
name|ag
operator|.
name|getOwnerGroupId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"individual group exists with non admin owner group: "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|ag
operator|=
name|createGroup
argument_list|(
name|db
argument_list|,
name|name
argument_list|,
name|adminGroupIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Users who have accepted the %s CLA"
argument_list|,
name|agreement
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GroupReference
name|group
init|=
name|config
operator|.
name|resolve
argument_list|(
name|ag
argument_list|)
decl_stmt|;
name|agreement
operator|.
name|setAccepted
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|PermissionRule
argument_list|(
name|group
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|agreement
operator|.
name|getAutoVerify
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|agreement
operator|.
name|setAutoVerify
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
comment|// Don't allow accounts in the same individual CLA group to see each
comment|// other in same group visibility mode.
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|sameGroupVisibility
init|=
name|config
operator|.
name|getAccountsSection
argument_list|()
operator|.
name|getSameGroupVisibility
argument_list|()
decl_stmt|;
name|PermissionRule
name|rule
init|=
operator|new
name|PermissionRule
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|rule
operator|.
name|setDeny
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|sameGroupVisibility
operator|.
name|contains
argument_list|(
name|rule
argument_list|)
condition|)
block|{
name|sameGroupVisibility
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
return|return
name|group
return|;
block|}
DECL|method|addAccountAgreements (ReviewDb db, ProjectConfig config, List<AccountGroup.Id> adminGroupIds, Map<Integer, ContributorAgreement> agreements)
specifier|private
name|long
name|addAccountAgreements
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ProjectConfig
name|config
parameter_list|,
name|List
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|adminGroupIds
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|ContributorAgreement
argument_list|>
name|agreements
parameter_list|)
throws|throws
name|SQLException
throws|,
name|OrmException
block|{
name|Statement
name|stmt
init|=
operator|(
operator|(
name|JdbcSchema
operator|)
name|db
operator|)
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT account_id, cla_id, accepted_on, reviewed_by,"
operator|+
literal|"       reviewed_on, review_comments "
operator|+
literal|"FROM account_agreements WHERE status = 'V'"
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|minTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|Account
operator|.
name|Id
name|accountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|reviewerId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|wasNull
argument_list|()
condition|)
block|{
name|reviewerId
operator|=
name|accountId
expr_stmt|;
block|}
name|int
name|claId
init|=
name|rs
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ContributorAgreement
name|agreement
init|=
name|agreements
operator|.
name|get
argument_list|(
name|claId
argument_list|)
decl_stmt|;
if|if
condition|(
name|agreement
operator|==
literal|null
condition|)
block|{
continue|continue;
comment|// Agreement is invalid
block|}
name|Timestamp
name|acceptedOn
init|=
name|rs
operator|.
name|getTimestamp
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|minTime
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minTime
argument_list|,
name|acceptedOn
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// Enter Agreement
name|GroupReference
name|individualGroup
init|=
name|getOrCreateGroupForIndividuals
argument_list|(
name|db
argument_list|,
name|config
argument_list|,
name|adminGroupIds
argument_list|,
name|agreement
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|Id
name|groupId
init|=
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|byUUID
argument_list|(
name|individualGroup
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|AccountGroupMember
operator|.
name|Key
name|key
init|=
operator|new
name|AccountGroupMember
operator|.
name|Key
argument_list|(
name|accountId
argument_list|,
name|groupId
argument_list|)
decl_stmt|;
name|AccountGroupMember
name|m
init|=
name|db
operator|.
name|accountGroupMembers
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|m
operator|=
operator|new
name|AccountGroupMember
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountGroupMembersAudit
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|AccountGroupMemberAudit
argument_list|(
name|m
argument_list|,
name|reviewerId
argument_list|,
name|acceptedOn
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountGroupMembers
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|minTime
return|;
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|AccountGroupAgreement
specifier|private
specifier|static
class|class
name|AccountGroupAgreement
block|{
DECL|field|groupId
specifier|private
name|AccountGroup
operator|.
name|Id
name|groupId
decl_stmt|;
DECL|field|claId
specifier|private
name|int
name|claId
decl_stmt|;
DECL|field|acceptedOn
specifier|private
name|Timestamp
name|acceptedOn
decl_stmt|;
DECL|field|reviewedBy
specifier|private
name|Account
operator|.
name|Id
name|reviewedBy
decl_stmt|;
DECL|field|reviewedOn
specifier|private
name|Timestamp
name|reviewedOn
decl_stmt|;
DECL|field|reviewComments
specifier|private
name|String
name|reviewComments
decl_stmt|;
DECL|method|getTime ()
specifier|private
name|long
name|getTime
parameter_list|()
block|{
return|return
operator|(
name|reviewedOn
operator|==
literal|null
operator|)
condition|?
name|acceptedOn
operator|.
name|getTime
argument_list|()
else|:
name|reviewedOn
operator|.
name|getTime
argument_list|()
return|;
block|}
block|}
DECL|method|getAccountGroupAgreements ( ReviewDb db, Map<Integer, ContributorAgreement> agreements)
specifier|private
name|List
argument_list|<
name|AccountGroupAgreement
argument_list|>
name|getAccountGroupAgreements
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|ContributorAgreement
argument_list|>
name|agreements
parameter_list|)
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
operator|(
operator|(
name|JdbcSchema
operator|)
name|db
operator|)
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT group_id, cla_id, accepted_on, reviewed_by, reviewed_on, "
operator|+
literal|"       review_comments "
operator|+
literal|"FROM account_group_agreements"
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|AccountGroupAgreement
argument_list|>
name|groupAgreements
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|AccountGroupAgreement
name|a
init|=
operator|new
name|AccountGroupAgreement
argument_list|()
decl_stmt|;
name|a
operator|.
name|groupId
operator|=
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|claId
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|agreements
operator|.
name|containsKey
argument_list|(
name|a
operator|.
name|claId
argument_list|)
condition|)
block|{
continue|continue;
comment|// Agreement is invalid
block|}
name|a
operator|.
name|acceptedOn
operator|=
name|rs
operator|.
name|getTimestamp
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|a
operator|.
name|reviewedBy
operator|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|wasNull
argument_list|()
condition|)
block|{
name|a
operator|.
name|reviewedBy
operator|=
literal|null
expr_stmt|;
block|}
name|a
operator|.
name|reviewedOn
operator|=
name|rs
operator|.
name|getTimestamp
argument_list|(
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|wasNull
argument_list|()
condition|)
block|{
name|a
operator|.
name|reviewedOn
operator|=
literal|null
expr_stmt|;
block|}
name|a
operator|.
name|reviewComments
operator|=
name|rs
operator|.
name|getString
argument_list|(
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|wasNull
argument_list|()
condition|)
block|{
name|a
operator|.
name|reviewComments
operator|=
literal|null
expr_stmt|;
block|}
name|groupAgreements
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
return|return
name|groupAgreements
return|;
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

