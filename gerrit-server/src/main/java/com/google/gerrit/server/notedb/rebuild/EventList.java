begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb.rebuild
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|rebuild
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
DECL|class|EventList
class|class
name|EventList
parameter_list|<
name|E
extends|extends
name|Event
parameter_list|>
implements|implements
name|Iterable
argument_list|<
name|E
argument_list|>
block|{
DECL|field|list
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|E
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|isSubmit
specifier|private
name|boolean
name|isSubmit
decl_stmt|;
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|list
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|add (E e)
name|void
name|add
parameter_list|(
name|E
name|e
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|isSubmit
argument_list|()
condition|)
block|{
name|isSubmit
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|clear ()
name|void
name|clear
parameter_list|()
block|{
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|isSubmit
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|isEmpty ()
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|list
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|canAdd (E e)
name|boolean
name|canAdd
parameter_list|(
name|E
name|e
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|FinalUpdatesEvent
condition|)
block|{
return|return
literal|false
return|;
comment|// FinalUpdatesEvent always gets its own update.
block|}
name|Event
name|last
init|=
name|getLast
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|e
operator|.
name|user
argument_list|,
name|last
operator|.
name|user
argument_list|)
operator|||
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|e
operator|.
name|realUser
argument_list|,
name|last
operator|.
name|realUser
argument_list|)
operator|||
operator|!
name|e
operator|.
name|psId
operator|.
name|equals
argument_list|(
name|last
operator|.
name|psId
argument_list|)
operator|||
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|e
operator|.
name|tag
argument_list|,
name|last
operator|.
name|tag
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// Different patch set, author, or tag.
block|}
if|if
condition|(
name|e
operator|.
name|isPostSubmitApproval
argument_list|()
operator|&&
name|isSubmit
condition|)
block|{
comment|// Post-submit approvals must come after the update that submits.
return|return
literal|false
return|;
block|}
name|long
name|t
init|=
name|e
operator|.
name|when
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|tFirst
init|=
name|getFirstTime
argument_list|()
decl_stmt|;
name|long
name|tLast
init|=
name|getLastTime
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|t
operator|>=
name|tLast
argument_list|,
literal|"event %s is before previous event in list %s"
argument_list|,
name|e
argument_list|,
name|last
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|-
name|tLast
operator|>
name|ChangeRebuilderImpl
operator|.
name|MAX_DELTA_MS
operator|||
name|t
operator|-
name|tFirst
operator|>
name|ChangeRebuilderImpl
operator|.
name|MAX_WINDOW_MS
condition|)
block|{
return|return
literal|false
return|;
comment|// Too much time elapsed.
block|}
if|if
condition|(
operator|!
name|e
operator|.
name|uniquePerUpdate
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|Event
name|o
range|:
name|this
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getClass
argument_list|()
operator|==
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
comment|// Only one event of this type allowed per update.
block|}
block|}
comment|// TODO(dborowitz): Additional heuristics, like keeping events separate if
comment|// they affect overlapping fields within a single entity.
return|return
literal|true
return|;
block|}
DECL|method|getWhen ()
name|Timestamp
name|getWhen
parameter_list|()
block|{
return|return
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|when
return|;
block|}
DECL|method|getPatchSetId ()
name|PatchSet
operator|.
name|Id
name|getPatchSetId
parameter_list|()
block|{
name|PatchSet
operator|.
name|Id
name|id
init|=
name|checkNotNull
argument_list|(
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|psId
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|checkState
argument_list|(
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|psId
operator|.
name|equals
argument_list|(
name|id
argument_list|)
argument_list|,
literal|"mismatched patch sets in EventList: %s != %s"
argument_list|,
name|id
argument_list|,
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|psId
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
DECL|method|getAccountId ()
name|Account
operator|.
name|Id
name|getAccountId
parameter_list|()
block|{
name|Account
operator|.
name|Id
name|id
init|=
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|user
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|checkState
argument_list|(
name|Objects
operator|.
name|equals
argument_list|(
name|id
argument_list|,
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|user
argument_list|)
argument_list|,
literal|"mismatched users in EventList: %s != %s"
argument_list|,
name|id
argument_list|,
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|user
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
DECL|method|getRealAccountId ()
name|Account
operator|.
name|Id
name|getRealAccountId
parameter_list|()
block|{
name|Account
operator|.
name|Id
name|id
init|=
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|realUser
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|checkState
argument_list|(
name|Objects
operator|.
name|equals
argument_list|(
name|id
argument_list|,
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|realUser
argument_list|)
argument_list|,
literal|"mismatched real users in EventList: %s != %s"
argument_list|,
name|id
argument_list|,
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|realUser
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
DECL|method|getTag ()
name|String
name|getTag
parameter_list|()
block|{
return|return
name|getLast
argument_list|()
operator|.
name|tag
return|;
block|}
DECL|method|get (int i)
specifier|private
name|E
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
DECL|method|size ()
specifier|private
name|int
name|size
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getLast ()
specifier|private
name|E
name|getLast
parameter_list|()
block|{
return|return
name|list
operator|.
name|get
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|getLastTime ()
specifier|private
name|long
name|getLastTime
parameter_list|()
block|{
return|return
name|getLast
argument_list|()
operator|.
name|when
operator|.
name|getTime
argument_list|()
return|;
block|}
DECL|method|getFirstTime ()
specifier|private
name|long
name|getFirstTime
parameter_list|()
block|{
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|when
operator|.
name|getTime
argument_list|()
return|;
block|}
block|}
end_class

end_unit

