begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|RefRight
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|RefRight
operator|.
name|RefPattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefControl
operator|.
name|RefRightsForPattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_class
DECL|class|Schema_34
specifier|public
class|class
name|Schema_34
extends|extends
name|SchemaVersion
block|{
annotation|@
name|Inject
DECL|method|Schema_34 (Provider<Schema_33> prior)
name|Schema_34
parameter_list|(
name|Provider
argument_list|<
name|Schema_33
argument_list|>
name|prior
parameter_list|)
block|{
name|super
argument_list|(
name|prior
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|migrateData (ReviewDb db, UpdateUI ui)
specifier|protected
name|void
name|migrateData
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|UpdateUI
name|ui
parameter_list|)
throws|throws
name|OrmException
block|{
name|Iterable
argument_list|<
name|Project
argument_list|>
name|projects
init|=
name|db
operator|.
name|projects
argument_list|()
operator|.
name|all
argument_list|()
decl_stmt|;
name|boolean
name|showedBanner
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|RefRight
argument_list|>
name|toUpdate
init|=
operator|new
name|ArrayList
argument_list|<
name|RefRight
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RefRight
argument_list|>
name|toDelete
init|=
operator|new
name|ArrayList
argument_list|<
name|RefRight
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Project
name|p
range|:
name|projects
control|)
block|{
name|boolean
name|showedProject
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|RefRight
argument_list|>
name|pr
init|=
name|db
operator|.
name|refRights
argument_list|()
operator|.
name|byProject
argument_list|(
name|p
operator|.
name|getNameKey
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApprovalCategory
operator|.
name|Id
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RefRightsForPattern
argument_list|>
argument_list|>
name|r
init|=
operator|new
name|HashMap
argument_list|<
name|ApprovalCategory
operator|.
name|Id
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RefRightsForPattern
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RefRight
name|right
range|:
name|pr
control|)
block|{
name|ApprovalCategory
operator|.
name|Id
name|cat
init|=
name|right
operator|.
name|getApprovalCategoryId
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|get
argument_list|(
name|cat
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RefRightsForPattern
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|RefRightsForPattern
argument_list|>
argument_list|(
name|RefControl
operator|.
name|DESCENDING_SORT
argument_list|)
decl_stmt|;
name|r
operator|.
name|put
argument_list|(
name|cat
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|get
argument_list|(
name|cat
argument_list|)
operator|.
name|get
argument_list|(
name|right
operator|.
name|getRefPattern
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|RefRightsForPattern
name|s
init|=
operator|new
name|RefRightsForPattern
argument_list|()
decl_stmt|;
name|r
operator|.
name|get
argument_list|(
name|cat
argument_list|)
operator|.
name|put
argument_list|(
name|right
operator|.
name|getRefPattern
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|get
argument_list|(
name|cat
argument_list|)
operator|.
name|get
argument_list|(
name|right
operator|.
name|getRefPattern
argument_list|()
argument_list|)
operator|.
name|addRight
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|RefRightsForPattern
argument_list|>
name|categoryRights
range|:
name|r
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|RefRightsForPattern
name|rrp
range|:
name|categoryRights
operator|.
name|values
argument_list|()
control|)
block|{
name|RefRight
name|oldRight
init|=
name|rrp
operator|.
name|getRights
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldPrompt
argument_list|(
name|oldRight
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|showedBanner
condition|)
block|{
name|ui
operator|.
name|message
argument_list|(
literal|"Entering interactive reference rights migration tool..."
argument_list|)
expr_stmt|;
name|showedBanner
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|showedProject
condition|)
block|{
name|ui
operator|.
name|message
argument_list|(
literal|"In project "
operator|+
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|showedProject
operator|=
literal|true
expr_stmt|;
block|}
name|ui
operator|.
name|message
argument_list|(
literal|"For category "
operator|+
name|oldRight
operator|.
name|getApprovalCategoryId
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isWildcard
init|=
name|oldRight
operator|.
name|getRefPattern
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
decl_stmt|;
name|boolean
name|shouldUpdate
init|=
name|ui
operator|.
name|yesno
argument_list|(
operator|!
name|isWildcard
argument_list|,
literal|"Should rights for pattern "
operator|+
name|oldRight
operator|.
name|getRefPattern
argument_list|()
operator|+
literal|" be considered exclusive?"
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldUpdate
condition|)
block|{
name|RefRight
operator|.
name|Key
name|newKey
init|=
operator|new
name|RefRight
operator|.
name|Key
argument_list|(
name|oldRight
operator|.
name|getProjectNameKey
argument_list|()
argument_list|,
operator|new
name|RefPattern
argument_list|(
literal|"-"
operator|+
name|oldRight
operator|.
name|getRefPattern
argument_list|()
argument_list|)
argument_list|,
name|oldRight
operator|.
name|getApprovalCategoryId
argument_list|()
argument_list|,
name|oldRight
operator|.
name|getAccountGroupId
argument_list|()
argument_list|)
decl_stmt|;
name|RefRight
name|newRight
init|=
operator|new
name|RefRight
argument_list|(
name|newKey
argument_list|)
decl_stmt|;
name|newRight
operator|.
name|setMaxValue
argument_list|(
name|oldRight
operator|.
name|getMaxValue
argument_list|()
argument_list|)
expr_stmt|;
name|newRight
operator|.
name|setMinValue
argument_list|(
name|oldRight
operator|.
name|getMinValue
argument_list|()
argument_list|)
expr_stmt|;
name|toUpdate
operator|.
name|add
argument_list|(
name|newRight
argument_list|)
expr_stmt|;
name|toDelete
operator|.
name|add
argument_list|(
name|oldRight
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|db
operator|.
name|refRights
argument_list|()
operator|.
name|insert
argument_list|(
name|toUpdate
argument_list|)
expr_stmt|;
name|db
operator|.
name|refRights
argument_list|()
operator|.
name|delete
argument_list|(
name|toDelete
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldPrompt (RefRight right)
specifier|private
name|boolean
name|shouldPrompt
parameter_list|(
name|RefRight
name|right
parameter_list|)
block|{
return|return
operator|!
name|right
operator|.
name|getRefPattern
argument_list|()
operator|.
name|equals
argument_list|(
literal|"refs/*"
argument_list|)
operator|&&
operator|!
name|right
operator|.
name|getRefPattern
argument_list|()
operator|.
name|equals
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|&&
operator|!
name|right
operator|.
name|getRefPattern
argument_list|()
operator|.
name|equals
argument_list|(
literal|"refs/tags/*"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

