begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|Schema_67
specifier|public
class|class
name|Schema_67
extends|extends
name|SchemaVersion
block|{
annotation|@
name|Inject
DECL|method|Schema_67 (Provider<Schema_66> prior)
name|Schema_67
parameter_list|(
name|Provider
argument_list|<
name|Schema_66
argument_list|>
name|prior
parameter_list|)
block|{
name|super
argument_list|(
name|prior
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|migrateData (ReviewDb db, UpdateUI ui)
specifier|protected
name|void
name|migrateData
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|UpdateUI
name|ui
parameter_list|)
throws|throws
name|OrmException
throws|,
name|SQLException
block|{
name|ui
operator|.
name|message
argument_list|(
literal|"Update ownerGroupId to ownerGroupUUID"
argument_list|)
expr_stmt|;
comment|// Scan all AccountGroup, and find the ones that need the owner_group_id
comment|// migrated to owner_group_uuid.
name|Map
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|,
name|AccountGroup
operator|.
name|Id
argument_list|>
name|idMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|newStatement
argument_list|(
name|db
argument_list|)
init|;
name|ResultSet
name|rs
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT group_id, owner_group_id FROM account_groups"
operator|+
literal|" WHERE owner_group_uuid is NULL or owner_group_uuid =''"
argument_list|)
init|)
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|AccountGroup
operator|.
name|Id
name|groupId
init|=
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|Id
name|ownerId
init|=
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|idMap
operator|.
name|put
argument_list|(
name|groupId
argument_list|,
name|ownerId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Lookup up all groups by ID.
name|Set
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|all
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|idMap
operator|.
name|keySet
argument_list|()
argument_list|,
name|idMap
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|,
name|AccountGroup
argument_list|>
name|groups
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|ResultSet
argument_list|<
name|AccountGroup
argument_list|>
name|rs
init|=
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|get
argument_list|(
name|all
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|AccountGroup
name|group
range|:
name|rs
control|)
block|{
name|groups
operator|.
name|put
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Update the ownerGroupUUID.
name|List
argument_list|<
name|AccountGroup
argument_list|>
name|toUpdate
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|idMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|,
name|AccountGroup
operator|.
name|Id
argument_list|>
name|entry
range|:
name|idMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|AccountGroup
name|group
init|=
name|groups
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|AccountGroup
name|owner
init|=
name|groups
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|group
operator|.
name|setOwnerGroupUUID
argument_list|(
name|owner
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
expr_stmt|;
name|toUpdate
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|update
argument_list|(
name|toUpdate
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

