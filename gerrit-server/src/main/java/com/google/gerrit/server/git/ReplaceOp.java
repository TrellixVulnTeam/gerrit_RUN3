begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|FooterConstants
operator|.
name|CHANGE_ID
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MailUtil
operator|.
name|getRecipientsFromFooters
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MailUtil
operator|.
name|getRecipientsFromReviewers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeKind
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalCopier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchSetUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountResolver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeKindCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|CommentAdded
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|RevisionCreated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|BatchUpdate
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|BatchUpdate
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|BatchUpdate
operator|.
name|RepoContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ReceiveCommits
operator|.
name|MagicBranchInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MailUtil
operator|.
name|MailRecipients
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|ReplacePatchSetSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestScopePropagator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|AssistedInject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushCertificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_class
DECL|class|ReplaceOp
specifier|public
class|class
name|ReplaceOp
extends|extends
name|BatchUpdate
operator|.
name|Op
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create ( RequestScopePropagator requestScopePropagator, ProjectControl projectControl, Branch.NameKey dest, boolean checkMergedInto, @Assisted(R) PatchSet.Id priorPatchSetId, @Assisted(R) RevCommit priorCommit, @Assisted(R) PatchSet.Id patchSetId, @Assisted(R) RevCommit commit, PatchSetInfo info, List<String> groups, @Nullable MagicBranchInput magicBranch, @Nullable PushCertificate pushCertificate)
name|ReplaceOp
name|create
parameter_list|(
name|RequestScopePropagator
name|requestScopePropagator
parameter_list|,
name|ProjectControl
name|projectControl
parameter_list|,
name|Branch
operator|.
name|NameKey
name|dest
parameter_list|,
name|boolean
name|checkMergedInto
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"priorPatchSetId"
argument_list|)
name|PatchSet
operator|.
name|Id
name|priorPatchSetId
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"priorCommit"
argument_list|)
name|RevCommit
name|priorCommit
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"patchSetId"
argument_list|)
name|PatchSet
operator|.
name|Id
name|patchSetId
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"commit"
argument_list|)
name|RevCommit
name|commit
parameter_list|,
name|PatchSetInfo
name|info
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|,
annotation|@
name|Nullable
name|MagicBranchInput
name|magicBranch
parameter_list|,
annotation|@
name|Nullable
name|PushCertificate
name|pushCertificate
parameter_list|)
function_decl|;
block|}
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplaceOp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CHANGE_IS_CLOSED
specifier|private
specifier|static
specifier|final
name|String
name|CHANGE_IS_CLOSED
init|=
literal|"change is closed"
decl_stmt|;
DECL|field|accountResolver
specifier|private
specifier|final
name|AccountResolver
name|accountResolver
decl_stmt|;
DECL|field|approvalCopier
specifier|private
specifier|final
name|ApprovalCopier
name|approvalCopier
decl_stmt|;
DECL|field|approvalsUtil
specifier|private
specifier|final
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
DECL|field|changeControlFactory
specifier|private
specifier|final
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
DECL|field|changeDataFactory
specifier|private
specifier|final
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
decl_stmt|;
DECL|field|changeKindCache
specifier|private
specifier|final
name|ChangeKindCache
name|changeKindCache
decl_stmt|;
DECL|field|cmUtil
specifier|private
specifier|final
name|ChangeMessagesUtil
name|cmUtil
decl_stmt|;
DECL|field|sendEmailExecutor
specifier|private
specifier|final
name|ExecutorService
name|sendEmailExecutor
decl_stmt|;
DECL|field|gitRefUpdated
specifier|private
specifier|final
name|GitReferenceUpdated
name|gitRefUpdated
decl_stmt|;
DECL|field|revisionCreated
specifier|private
specifier|final
name|RevisionCreated
name|revisionCreated
decl_stmt|;
DECL|field|commentAdded
specifier|private
specifier|final
name|CommentAdded
name|commentAdded
decl_stmt|;
DECL|field|mergedByPushOpFactory
specifier|private
specifier|final
name|MergedByPushOp
operator|.
name|Factory
name|mergedByPushOpFactory
decl_stmt|;
DECL|field|psUtil
specifier|private
specifier|final
name|PatchSetUtil
name|psUtil
decl_stmt|;
DECL|field|replacePatchSetFactory
specifier|private
specifier|final
name|ReplacePatchSetSender
operator|.
name|Factory
name|replacePatchSetFactory
decl_stmt|;
DECL|field|requestScopePropagator
specifier|private
specifier|final
name|RequestScopePropagator
name|requestScopePropagator
decl_stmt|;
DECL|field|projectControl
specifier|private
specifier|final
name|ProjectControl
name|projectControl
decl_stmt|;
DECL|field|dest
specifier|private
specifier|final
name|Branch
operator|.
name|NameKey
name|dest
decl_stmt|;
DECL|field|checkMergedInto
specifier|private
specifier|final
name|boolean
name|checkMergedInto
decl_stmt|;
DECL|field|priorPatchSetId
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|priorPatchSetId
decl_stmt|;
DECL|field|priorCommit
specifier|private
specifier|final
name|RevCommit
name|priorCommit
decl_stmt|;
DECL|field|patchSetId
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|patchSetId
decl_stmt|;
DECL|field|commit
specifier|private
specifier|final
name|RevCommit
name|commit
decl_stmt|;
DECL|field|info
specifier|private
specifier|final
name|PatchSetInfo
name|info
decl_stmt|;
DECL|field|magicBranch
specifier|private
specifier|final
name|MagicBranchInput
name|magicBranch
decl_stmt|;
DECL|field|pushCertificate
specifier|private
specifier|final
name|PushCertificate
name|pushCertificate
decl_stmt|;
DECL|field|groups
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|approvals
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|approvals
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|recipients
specifier|private
specifier|final
name|MailRecipients
name|recipients
init|=
operator|new
name|MailRecipients
argument_list|()
decl_stmt|;
DECL|field|change
specifier|private
name|Change
name|change
decl_stmt|;
DECL|field|newPatchSet
specifier|private
name|PatchSet
name|newPatchSet
decl_stmt|;
DECL|field|changeKind
specifier|private
name|ChangeKind
name|changeKind
decl_stmt|;
DECL|field|msg
specifier|private
name|ChangeMessage
name|msg
decl_stmt|;
DECL|field|rejectMessage
specifier|private
name|String
name|rejectMessage
decl_stmt|;
DECL|field|mergedByPushOp
specifier|private
name|MergedByPushOp
name|mergedByPushOp
decl_stmt|;
annotation|@
name|AssistedInject
DECL|method|ReplaceOp (AccountResolver accountResolver, ApprovalCopier approvalCopier, ApprovalsUtil approvalsUtil, ChangeControl.GenericFactory changeControlFactory, ChangeData.Factory changeDataFactory, ChangeKindCache changeKindCache, ChangeMessagesUtil cmUtil, GitReferenceUpdated gitRefUpdated, RevisionCreated revisionCreated, CommentAdded commentAdded, MergedByPushOp.Factory mergedByPushOpFactory, PatchSetUtil psUtil, ReplacePatchSetSender.Factory replacePatchSetFactory, @SendEmailExecutor ExecutorService sendEmailExecutor, @Assisted RequestScopePropagator requestScopePropagator, @Assisted ProjectControl projectControl, @Assisted Branch.NameKey dest, @Assisted boolean checkMergedInto, @Assisted(R) PatchSet.Id priorPatchSetId, @Assisted(R) RevCommit priorCommit, @Assisted(R) PatchSet.Id patchSetId, @Assisted(R) RevCommit commit, @Assisted PatchSetInfo info, @Assisted List<String> groups, @Assisted @Nullable MagicBranchInput magicBranch, @Assisted @Nullable PushCertificate pushCertificate)
name|ReplaceOp
parameter_list|(
name|AccountResolver
name|accountResolver
parameter_list|,
name|ApprovalCopier
name|approvalCopier
parameter_list|,
name|ApprovalsUtil
name|approvalsUtil
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
parameter_list|,
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
parameter_list|,
name|ChangeKindCache
name|changeKindCache
parameter_list|,
name|ChangeMessagesUtil
name|cmUtil
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|,
name|RevisionCreated
name|revisionCreated
parameter_list|,
name|CommentAdded
name|commentAdded
parameter_list|,
name|MergedByPushOp
operator|.
name|Factory
name|mergedByPushOpFactory
parameter_list|,
name|PatchSetUtil
name|psUtil
parameter_list|,
name|ReplacePatchSetSender
operator|.
name|Factory
name|replacePatchSetFactory
parameter_list|,
annotation|@
name|SendEmailExecutor
name|ExecutorService
name|sendEmailExecutor
parameter_list|,
annotation|@
name|Assisted
name|RequestScopePropagator
name|requestScopePropagator
parameter_list|,
annotation|@
name|Assisted
name|ProjectControl
name|projectControl
parameter_list|,
annotation|@
name|Assisted
name|Branch
operator|.
name|NameKey
name|dest
parameter_list|,
annotation|@
name|Assisted
name|boolean
name|checkMergedInto
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"priorPatchSetId"
argument_list|)
name|PatchSet
operator|.
name|Id
name|priorPatchSetId
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"priorCommit"
argument_list|)
name|RevCommit
name|priorCommit
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"patchSetId"
argument_list|)
name|PatchSet
operator|.
name|Id
name|patchSetId
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"commit"
argument_list|)
name|RevCommit
name|commit
parameter_list|,
annotation|@
name|Assisted
name|PatchSetInfo
name|info
parameter_list|,
annotation|@
name|Assisted
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|,
annotation|@
name|Assisted
annotation|@
name|Nullable
name|MagicBranchInput
name|magicBranch
parameter_list|,
annotation|@
name|Assisted
annotation|@
name|Nullable
name|PushCertificate
name|pushCertificate
parameter_list|)
block|{
name|this
operator|.
name|accountResolver
operator|=
name|accountResolver
expr_stmt|;
name|this
operator|.
name|approvalCopier
operator|=
name|approvalCopier
expr_stmt|;
name|this
operator|.
name|approvalsUtil
operator|=
name|approvalsUtil
expr_stmt|;
name|this
operator|.
name|changeControlFactory
operator|=
name|changeControlFactory
expr_stmt|;
name|this
operator|.
name|changeDataFactory
operator|=
name|changeDataFactory
expr_stmt|;
name|this
operator|.
name|changeKindCache
operator|=
name|changeKindCache
expr_stmt|;
name|this
operator|.
name|cmUtil
operator|=
name|cmUtil
expr_stmt|;
name|this
operator|.
name|gitRefUpdated
operator|=
name|gitRefUpdated
expr_stmt|;
name|this
operator|.
name|revisionCreated
operator|=
name|revisionCreated
expr_stmt|;
name|this
operator|.
name|commentAdded
operator|=
name|commentAdded
expr_stmt|;
name|this
operator|.
name|mergedByPushOpFactory
operator|=
name|mergedByPushOpFactory
expr_stmt|;
name|this
operator|.
name|psUtil
operator|=
name|psUtil
expr_stmt|;
name|this
operator|.
name|replacePatchSetFactory
operator|=
name|replacePatchSetFactory
expr_stmt|;
name|this
operator|.
name|sendEmailExecutor
operator|=
name|sendEmailExecutor
expr_stmt|;
name|this
operator|.
name|requestScopePropagator
operator|=
name|requestScopePropagator
expr_stmt|;
name|this
operator|.
name|projectControl
operator|=
name|projectControl
expr_stmt|;
name|this
operator|.
name|dest
operator|=
name|dest
expr_stmt|;
name|this
operator|.
name|checkMergedInto
operator|=
name|checkMergedInto
expr_stmt|;
name|this
operator|.
name|priorPatchSetId
operator|=
name|priorPatchSetId
expr_stmt|;
name|this
operator|.
name|priorCommit
operator|=
name|priorCommit
expr_stmt|;
name|this
operator|.
name|patchSetId
operator|=
name|patchSetId
expr_stmt|;
name|this
operator|.
name|commit
operator|=
name|commit
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
name|this
operator|.
name|groups
operator|=
name|groups
expr_stmt|;
name|this
operator|.
name|magicBranch
operator|=
name|magicBranch
expr_stmt|;
name|this
operator|.
name|pushCertificate
operator|=
name|pushCertificate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateRepo (RepoContext ctx)
specifier|public
name|void
name|updateRepo
parameter_list|(
name|RepoContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|changeKind
operator|=
name|changeKindCache
operator|.
name|getChangeKind
argument_list|(
name|projectControl
operator|.
name|getProjectState
argument_list|()
argument_list|,
name|ctx
operator|.
name|getRepository
argument_list|()
argument_list|,
name|priorCommit
argument_list|,
name|commit
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkMergedInto
condition|)
block|{
name|Ref
name|mergedInto
init|=
name|findMergedInto
argument_list|(
name|ctx
argument_list|,
name|dest
operator|.
name|get
argument_list|()
argument_list|,
name|commit
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergedInto
operator|!=
literal|null
condition|)
block|{
name|mergedByPushOp
operator|=
name|mergedByPushOpFactory
operator|.
name|create
argument_list|(
name|requestScopePropagator
argument_list|,
name|patchSetId
argument_list|,
name|mergedInto
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|updateChange (ChangeContext ctx)
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
name|change
operator|=
name|ctx
operator|.
name|getChange
argument_list|()
expr_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
operator|||
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|rejectMessage
operator|=
name|CHANGE_IS_CLOSED
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|groups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PatchSet
name|prevPs
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|)
decl_stmt|;
name|groups
operator|=
name|prevPs
operator|!=
literal|null
condition|?
name|prevPs
operator|.
name|getGroups
argument_list|()
else|:
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
expr_stmt|;
block|}
name|ChangeUpdate
name|update
init|=
name|ctx
operator|.
name|getUpdate
argument_list|(
name|patchSetId
argument_list|)
decl_stmt|;
name|update
operator|.
name|setSubjectForCommit
argument_list|(
literal|"Create patch set "
operator|+
name|patchSetId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|reviewMessage
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|magicBranch
operator|!=
literal|null
condition|)
block|{
name|recipients
operator|.
name|add
argument_list|(
name|magicBranch
operator|.
name|getMailRecipients
argument_list|()
argument_list|)
expr_stmt|;
name|reviewMessage
operator|=
name|magicBranch
operator|.
name|message
expr_stmt|;
name|approvals
operator|.
name|putAll
argument_list|(
name|magicBranch
operator|.
name|labels
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
init|=
name|magicBranch
operator|.
name|hashtags
decl_stmt|;
if|if
condition|(
name|hashtags
operator|!=
literal|null
operator|&&
operator|!
name|hashtags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hashtags
operator|.
name|addAll
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
operator|.
name|getHashtags
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setHashtags
argument_list|(
name|hashtags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|magicBranch
operator|.
name|topic
operator|!=
literal|null
operator|&&
operator|!
name|magicBranch
operator|.
name|topic
operator|.
name|equals
argument_list|(
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|getTopic
argument_list|()
argument_list|)
condition|)
block|{
name|update
operator|.
name|setTopic
argument_list|(
name|magicBranch
operator|.
name|topic
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|draft
init|=
name|magicBranch
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|draft
decl_stmt|;
name|newPatchSet
operator|=
name|psUtil
operator|.
name|insert
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|update
argument_list|,
name|patchSetId
argument_list|,
name|commit
argument_list|,
name|draft
argument_list|,
name|groups
argument_list|,
name|pushCertificate
operator|!=
literal|null
condition|?
name|pushCertificate
operator|.
name|toTextWithSignature
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|recipients
operator|.
name|add
argument_list|(
name|getRecipientsFromFooters
argument_list|(
name|accountResolver
argument_list|,
name|draft
argument_list|,
name|commit
operator|.
name|getFooterLines
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|recipients
operator|.
name|remove
argument_list|(
name|ctx
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeData
name|cd
init|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getControl
argument_list|()
argument_list|)
decl_stmt|;
name|MailRecipients
name|oldRecipients
init|=
name|getRecipientsFromReviewers
argument_list|(
name|cd
operator|.
name|reviewers
argument_list|()
argument_list|)
decl_stmt|;
name|approvalCopier
operator|.
name|copy
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getControl
argument_list|()
argument_list|,
name|newPatchSet
argument_list|)
expr_stmt|;
name|approvalsUtil
operator|.
name|addReviewers
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|update
argument_list|,
name|projectControl
operator|.
name|getLabelTypes
argument_list|()
argument_list|,
name|change
argument_list|,
name|newPatchSet
argument_list|,
name|info
argument_list|,
name|recipients
operator|.
name|getReviewers
argument_list|()
argument_list|,
name|oldRecipients
operator|.
name|getAll
argument_list|()
argument_list|)
expr_stmt|;
name|approvalsUtil
operator|.
name|addApprovals
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|update
argument_list|,
name|projectControl
operator|.
name|getLabelTypes
argument_list|()
argument_list|,
name|newPatchSet
argument_list|,
name|ctx
operator|.
name|getControl
argument_list|()
argument_list|,
name|approvals
argument_list|)
expr_stmt|;
name|recipients
operator|.
name|add
argument_list|(
name|oldRecipients
argument_list|)
expr_stmt|;
name|String
name|approvalMessage
init|=
name|ApprovalsUtil
operator|.
name|renderMessageWithApprovals
argument_list|(
name|patchSetId
operator|.
name|get
argument_list|()
argument_list|,
name|approvals
argument_list|,
name|scanLabels
argument_list|(
name|ctx
argument_list|,
name|approvals
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|(
name|approvalMessage
argument_list|)
decl_stmt|;
name|String
name|kindMessage
init|=
name|changeKindMessage
argument_list|(
name|changeKind
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|kindMessage
argument_list|)
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
name|kindMessage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|reviewMessage
argument_list|)
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|reviewMessage
argument_list|)
expr_stmt|;
block|}
name|msg
operator|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|ctx
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|,
name|patchSetId
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setMessage
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cmUtil
operator|.
name|addChangeMessage
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|update
argument_list|,
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergedByPushOp
operator|==
literal|null
condition|)
block|{
name|resetChange
argument_list|(
name|ctx
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mergedByPushOp
operator|.
name|setPatchSetProvider
argument_list|(
name|Providers
operator|.
name|of
argument_list|(
name|newPatchSet
argument_list|)
argument_list|)
operator|.
name|updateChange
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|changeKindMessage (ChangeKind changeKind)
specifier|private
name|String
name|changeKindMessage
parameter_list|(
name|ChangeKind
name|changeKind
parameter_list|)
block|{
switch|switch
condition|(
name|changeKind
condition|)
block|{
case|case
name|MERGE_FIRST_PARENT_UPDATE
case|:
case|case
name|TRIVIAL_REBASE
case|:
case|case
name|NO_CHANGE
case|:
return|return
literal|": Patch Set "
operator|+
name|priorPatchSetId
operator|.
name|get
argument_list|()
operator|+
literal|" was rebased"
return|;
case|case
name|NO_CODE_CHANGE
case|:
return|return
literal|": Commit message was updated"
return|;
case|case
name|REWORK
case|:
default|default:
return|return
literal|null
return|;
block|}
block|}
DECL|method|scanLabels (ChangeContext ctx, Map<String, Short> approvals)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PatchSetApproval
argument_list|>
name|scanLabels
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|approvals
parameter_list|)
throws|throws
name|OrmException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PatchSetApproval
argument_list|>
name|current
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// We optimize here and only retrieve current when approvals provided
if|if
condition|(
operator|!
name|approvals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|approvalsUtil
operator|.
name|byPatchSetUser
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getControl
argument_list|()
argument_list|,
name|priorPatchSetId
argument_list|,
name|ctx
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|a
operator|.
name|isLegacySubmit
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|LabelType
name|lt
init|=
name|projectControl
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|byLabel
argument_list|(
name|a
operator|.
name|getLabelId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lt
operator|!=
literal|null
condition|)
block|{
name|current
operator|.
name|put
argument_list|(
name|lt
operator|.
name|getName
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|current
return|;
block|}
DECL|method|resetChange (ChangeContext ctx, ChangeMessage msg)
specifier|private
name|void
name|resetChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|,
name|ChangeMessage
name|msg
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|change
init|=
name|ctx
operator|.
name|getChange
argument_list|()
decl_stmt|;
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|ctx
operator|.
name|getDb
argument_list|()
operator|.
name|patchSets
argument_list|()
operator|.
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|newPatchSet
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getDb
argument_list|()
operator|.
name|changeMessages
argument_list|()
operator|.
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|rejectMessage
operator|=
name|CHANGE_IS_CLOSED
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|change
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|equals
argument_list|(
name|priorPatchSetId
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|topic
operator|!=
literal|null
condition|)
block|{
name|change
operator|.
name|setTopic
argument_list|(
name|magicBranch
operator|.
name|topic
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|DRAFT
operator|&&
name|newPatchSet
operator|.
name|isDraft
argument_list|()
condition|)
block|{
comment|// Leave in draft status.
block|}
else|else
block|{
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|idList
init|=
name|commit
operator|.
name|getFooterLines
argument_list|(
name|CHANGE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|idList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|change
operator|.
name|setKey
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
literal|"I"
operator|+
name|commit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|change
operator|.
name|setKey
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|idList
operator|.
name|get
argument_list|(
name|idList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|postUpdate (final Context ctx)
specifier|public
name|void
name|postUpdate
parameter_list|(
specifier|final
name|Context
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Normally the ref updated hook is fired by BatchUpdate, but ReplaceOp is
comment|// special because its ref is actually updated by ReceiveCommits, so from
comment|// BatchUpdate's perspective there is no ref update. Thus we have to fire it
comment|// manually.
name|Account
name|account
init|=
name|ctx
operator|.
name|getUser
argument_list|()
operator|.
name|asIdentifiedUser
argument_list|()
operator|.
name|getAccount
argument_list|()
decl_stmt|;
name|gitRefUpdated
operator|.
name|fire
argument_list|(
name|ctx
operator|.
name|getProject
argument_list|()
argument_list|,
name|newPatchSet
operator|.
name|getRefName
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|commit
argument_list|,
name|account
argument_list|)
expr_stmt|;
if|if
condition|(
name|changeKind
operator|!=
name|ChangeKind
operator|.
name|TRIVIAL_REBASE
condition|)
block|{
name|Runnable
name|sender
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ReplacePatchSetSender
name|cm
init|=
name|replacePatchSetFactory
operator|.
name|create
argument_list|(
name|projectControl
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|cm
operator|.
name|setFrom
argument_list|(
name|ctx
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setPatchSet
argument_list|(
name|newPatchSet
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setChangeMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|notify
operator|!=
literal|null
condition|)
block|{
name|cm
operator|.
name|setNotify
argument_list|(
name|magicBranch
operator|.
name|notify
argument_list|)
expr_stmt|;
block|}
name|cm
operator|.
name|addReviewers
argument_list|(
name|recipients
operator|.
name|getReviewers
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addExtraCC
argument_list|(
name|recipients
operator|.
name|getCcOnly
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email for new patch set "
operator|+
name|newPatchSet
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"send-email newpatchset"
return|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|requestScopePropagator
operator|!=
literal|null
condition|)
block|{
name|sendEmailExecutor
operator|.
name|submit
argument_list|(
name|requestScopePropagator
operator|.
name|wrap
argument_list|(
name|sender
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sender
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
name|revisionCreated
operator|.
name|fire
argument_list|(
name|change
argument_list|,
name|newPatchSet
argument_list|,
name|ctx
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|fireCommentAddedEvent
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"comment-added event invocation failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mergedByPushOp
operator|!=
literal|null
condition|)
block|{
name|mergedByPushOp
operator|.
name|postUpdate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fireCommentAddedEvent (final Context ctx)
specifier|private
name|void
name|fireCommentAddedEvent
parameter_list|(
specifier|final
name|Context
name|ctx
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|OrmException
block|{
if|if
condition|(
name|approvals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|/* For labels that are not set in this operation, show the "current" value      * of 0, and no oldValue as the value was not modified by this operation.      * For labels that are set in this operation, the value was modified, so      * show a transition from an oldValue of 0 to the new value.      */
name|ChangeControl
name|changeControl
init|=
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|change
argument_list|,
name|ctx
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LabelType
argument_list|>
name|labels
init|=
name|changeControl
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|getLabelTypes
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|allApprovals
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|oldApprovals
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|LabelType
name|lt
range|:
name|labels
control|)
block|{
name|allApprovals
operator|.
name|put
argument_list|(
name|lt
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|oldApprovals
operator|.
name|put
argument_list|(
name|lt
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|entry
range|:
name|approvals
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|allApprovals
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oldApprovals
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|commentAdded
operator|.
name|fire
argument_list|(
name|change
argument_list|,
name|newPatchSet
argument_list|,
name|ctx
operator|.
name|getUser
argument_list|()
operator|.
name|asIdentifiedUser
argument_list|()
operator|.
name|getAccount
argument_list|()
argument_list|,
literal|null
argument_list|,
name|allApprovals
argument_list|,
name|oldApprovals
argument_list|,
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getPatchSet ()
specifier|public
name|PatchSet
name|getPatchSet
parameter_list|()
block|{
return|return
name|newPatchSet
return|;
block|}
DECL|method|getRejectMessage ()
specifier|public
name|String
name|getRejectMessage
parameter_list|()
block|{
return|return
name|rejectMessage
return|;
block|}
DECL|method|findMergedInto (Context ctx, String first, RevCommit commit)
specifier|private
name|Ref
name|findMergedInto
parameter_list|(
name|Context
name|ctx
parameter_list|,
name|String
name|first
parameter_list|,
name|RevCommit
name|commit
parameter_list|)
block|{
try|try
block|{
name|RefDatabase
name|refDatabase
init|=
name|ctx
operator|.
name|getRepository
argument_list|()
operator|.
name|getRefDatabase
argument_list|()
decl_stmt|;
name|Ref
name|firstRef
init|=
name|refDatabase
operator|.
name|exactRef
argument_list|(
name|first
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstRef
operator|!=
literal|null
operator|&&
name|isMergedInto
argument_list|(
name|ctx
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|commit
argument_list|,
name|firstRef
argument_list|)
condition|)
block|{
return|return
name|firstRef
return|;
block|}
for|for
control|(
name|Ref
name|ref
range|:
name|refDatabase
operator|.
name|getRefs
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|isMergedInto
argument_list|(
name|ctx
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|commit
argument_list|,
name|ref
argument_list|)
condition|)
block|{
return|return
name|ref
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Can't check for already submitted change"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|isMergedInto (RevWalk rw, RevCommit commit, Ref ref)
specifier|private
specifier|static
name|boolean
name|isMergedInto
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|RevCommit
name|commit
parameter_list|,
name|Ref
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rw
operator|.
name|isMergedInto
argument_list|(
name|commit
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

