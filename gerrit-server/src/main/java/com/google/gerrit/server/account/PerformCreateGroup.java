begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|NameAlreadyUsedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupById
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupByIdAud
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupMember
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupMemberAudit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmDuplicateKeyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|PerformCreateGroup
specifier|public
class|class
name|PerformCreateGroup
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (CreateGroupArgs createGroupArgs)
name|PerformCreateGroup
name|create
parameter_list|(
name|CreateGroupArgs
name|createGroupArgs
parameter_list|)
function_decl|;
block|}
DECL|field|db
specifier|private
specifier|final
name|ReviewDb
name|db
decl_stmt|;
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|groupIncludeCache
specifier|private
specifier|final
name|GroupIncludeCache
name|groupIncludeCache
decl_stmt|;
DECL|field|currentUser
specifier|private
specifier|final
name|IdentifiedUser
name|currentUser
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|PersonIdent
name|serverIdent
decl_stmt|;
DECL|field|groupCache
specifier|private
specifier|final
name|GroupCache
name|groupCache
decl_stmt|;
DECL|field|createGroupArgs
specifier|private
specifier|final
name|CreateGroupArgs
name|createGroupArgs
decl_stmt|;
annotation|@
name|Inject
DECL|method|PerformCreateGroup (ReviewDb db, AccountCache accountCache, GroupIncludeCache groupIncludeCache, IdentifiedUser currentUser, @GerritPersonIdent PersonIdent serverIdent, GroupCache groupCache, @Assisted CreateGroupArgs createGroupArgs)
name|PerformCreateGroup
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountCache
name|accountCache
parameter_list|,
name|GroupIncludeCache
name|groupIncludeCache
parameter_list|,
name|IdentifiedUser
name|currentUser
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverIdent
parameter_list|,
name|GroupCache
name|groupCache
parameter_list|,
annotation|@
name|Assisted
name|CreateGroupArgs
name|createGroupArgs
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|groupIncludeCache
operator|=
name|groupIncludeCache
expr_stmt|;
name|this
operator|.
name|currentUser
operator|=
name|currentUser
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
name|this
operator|.
name|groupCache
operator|=
name|groupCache
expr_stmt|;
name|this
operator|.
name|createGroupArgs
operator|=
name|createGroupArgs
expr_stmt|;
block|}
comment|/**    * Creates a new group.     * @return the new group    * @throws OrmException is thrown in case of any data store read or write    *         error    * @throws NameAlreadyUsedException is thrown in case a group with the given    *         name already exists    * @throws PermissionDeniedException user cannot create a group.    */
DECL|method|createGroup ()
specifier|public
name|AccountGroup
name|createGroup
parameter_list|()
throws|throws
name|OrmException
throws|,
name|NameAlreadyUsedException
throws|,
name|PermissionDeniedException
block|{
if|if
condition|(
operator|!
name|currentUser
operator|.
name|getCapabilities
argument_list|()
operator|.
name|canCreateGroup
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s does not have \"Create Group\" capability."
argument_list|,
name|currentUser
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|AccountGroup
operator|.
name|Id
name|groupId
init|=
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|db
operator|.
name|nextAccountGroupId
argument_list|()
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|uuid
init|=
name|GroupUUID
operator|.
name|make
argument_list|(
name|createGroupArgs
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|currentUser
operator|.
name|newCommitterIdent
argument_list|(
name|serverIdent
operator|.
name|getWhen
argument_list|()
argument_list|,
name|serverIdent
operator|.
name|getTimeZone
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|AccountGroup
name|group
init|=
operator|new
name|AccountGroup
argument_list|(
name|createGroupArgs
operator|.
name|getGroup
argument_list|()
argument_list|,
name|groupId
argument_list|,
name|uuid
argument_list|)
decl_stmt|;
name|group
operator|.
name|setVisibleToAll
argument_list|(
name|createGroupArgs
operator|.
name|visibleToAll
argument_list|)
expr_stmt|;
if|if
condition|(
name|createGroupArgs
operator|.
name|ownerGroupId
operator|!=
literal|null
condition|)
block|{
name|AccountGroup
name|ownerGroup
init|=
name|groupCache
operator|.
name|get
argument_list|(
name|createGroupArgs
operator|.
name|ownerGroupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ownerGroup
operator|!=
literal|null
condition|)
block|{
name|group
operator|.
name|setOwnerGroupUUID
argument_list|(
name|ownerGroup
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|createGroupArgs
operator|.
name|groupDescription
operator|!=
literal|null
condition|)
block|{
name|group
operator|.
name|setDescription
argument_list|(
name|createGroupArgs
operator|.
name|groupDescription
argument_list|)
expr_stmt|;
block|}
name|AccountGroupName
name|gn
init|=
operator|new
name|AccountGroupName
argument_list|(
name|group
argument_list|)
decl_stmt|;
comment|// first insert the group name to validate that the group name hasn't
comment|// already been used to create another group
try|try
block|{
name|db
operator|.
name|accountGroupNames
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|gn
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmDuplicateKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NameAlreadyUsedException
argument_list|(
name|createGroupArgs
operator|.
name|getGroupName
argument_list|()
argument_list|)
throw|;
block|}
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
name|addMembers
argument_list|(
name|groupId
argument_list|,
name|createGroupArgs
operator|.
name|initialMembers
argument_list|)
expr_stmt|;
if|if
condition|(
name|createGroupArgs
operator|.
name|initialGroups
operator|!=
literal|null
condition|)
block|{
name|addGroups
argument_list|(
name|groupId
argument_list|,
name|createGroupArgs
operator|.
name|initialGroups
argument_list|)
expr_stmt|;
name|groupIncludeCache
operator|.
name|evictSubgroupsOf
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
name|groupCache
operator|.
name|onCreateGroup
argument_list|(
name|createGroupArgs
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|group
return|;
block|}
DECL|method|addMembers (final AccountGroup.Id groupId, final Collection<? extends Account.Id> members)
specifier|private
name|void
name|addMembers
parameter_list|(
specifier|final
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|?
extends|extends
name|Account
operator|.
name|Id
argument_list|>
name|members
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|AccountGroupMember
argument_list|>
name|memberships
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AccountGroupMemberAudit
argument_list|>
name|membershipsAudit
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|accountId
range|:
name|members
control|)
block|{
specifier|final
name|AccountGroupMember
name|membership
init|=
operator|new
name|AccountGroupMember
argument_list|(
operator|new
name|AccountGroupMember
operator|.
name|Key
argument_list|(
name|accountId
argument_list|,
name|groupId
argument_list|)
argument_list|)
decl_stmt|;
name|memberships
operator|.
name|add
argument_list|(
name|membership
argument_list|)
expr_stmt|;
specifier|final
name|AccountGroupMemberAudit
name|audit
init|=
operator|new
name|AccountGroupMemberAudit
argument_list|(
name|membership
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|membershipsAudit
operator|.
name|add
argument_list|(
name|audit
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|accountGroupMembers
argument_list|()
operator|.
name|insert
argument_list|(
name|memberships
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountGroupMembersAudit
argument_list|()
operator|.
name|insert
argument_list|(
name|membershipsAudit
argument_list|)
expr_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|accountId
range|:
name|members
control|)
block|{
name|accountCache
operator|.
name|evict
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addGroups (final AccountGroup.Id groupId, final Collection<? extends AccountGroup.UUID> groups)
specifier|private
name|void
name|addGroups
parameter_list|(
specifier|final
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|?
extends|extends
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groups
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|AccountGroupById
argument_list|>
name|includeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AccountGroupByIdAud
argument_list|>
name|includesAudit
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountGroup
operator|.
name|UUID
name|includeUUID
range|:
name|groups
control|)
block|{
specifier|final
name|AccountGroupById
name|groupInclude
init|=
operator|new
name|AccountGroupById
argument_list|(
operator|new
name|AccountGroupById
operator|.
name|Key
argument_list|(
name|groupId
argument_list|,
name|includeUUID
argument_list|)
argument_list|)
decl_stmt|;
name|includeList
operator|.
name|add
argument_list|(
name|groupInclude
argument_list|)
expr_stmt|;
specifier|final
name|AccountGroupByIdAud
name|audit
init|=
operator|new
name|AccountGroupByIdAud
argument_list|(
name|groupInclude
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|includesAudit
operator|.
name|add
argument_list|(
name|audit
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|accountGroupById
argument_list|()
operator|.
name|insert
argument_list|(
name|includeList
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountGroupByIdAud
argument_list|()
operator|.
name|insert
argument_list|(
name|includesAudit
argument_list|)
expr_stmt|;
for|for
control|(
name|AccountGroup
operator|.
name|UUID
name|uuid
range|:
name|groups
control|)
block|{
name|groupIncludeCache
operator|.
name|evictParentGroupsOf
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

