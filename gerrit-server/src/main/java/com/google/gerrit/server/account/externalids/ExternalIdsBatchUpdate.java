begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account.externalids
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
operator|.
name|toAccountExternalIds
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_comment
comment|/**  * This class allows to do batch updates to external IDs.  *  *<p>For NoteDb all updates will result in a single commit to the refs/meta/external-ids branch.  * This means callers can prepare many updates by invoking {@link #replace(ExternalId, ExternalId)}  * multiple times and when {@link ExternalIdsBatchUpdate#commit(ReviewDb, String)} is invoked a  * single NoteDb commit is created that contains all the prepared updates.  */
end_comment

begin_class
DECL|class|ExternalIdsBatchUpdate
specifier|public
class|class
name|ExternalIdsBatchUpdate
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|PersonIdent
name|serverIdent
decl_stmt|;
DECL|field|externalIdCache
specifier|private
specifier|final
name|ExternalIdCache
name|externalIdCache
decl_stmt|;
DECL|field|toAdd
specifier|private
specifier|final
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|toAdd
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|toDelete
specifier|private
specifier|final
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|toDelete
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|ExternalIdsBatchUpdate ( GitRepositoryManager repoManager, AllUsersName allUsersName, @GerritPersonIdent PersonIdent serverIdent, ExternalIdCache externalIdCache)
specifier|public
name|ExternalIdsBatchUpdate
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverIdent
parameter_list|,
name|ExternalIdCache
name|externalIdCache
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
name|this
operator|.
name|externalIdCache
operator|=
name|externalIdCache
expr_stmt|;
block|}
comment|/**    * Adds an external ID replacement to the batch.    *    *<p>The actual replacement is only done when {@link #commit(ReviewDb, String)} is invoked.    */
DECL|method|replace (ExternalId extIdToDelete, ExternalId extIdToAdd)
specifier|public
name|void
name|replace
parameter_list|(
name|ExternalId
name|extIdToDelete
parameter_list|,
name|ExternalId
name|extIdToAdd
parameter_list|)
block|{
name|ExternalIdsUpdate
operator|.
name|checkSameAccount
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|extIdToDelete
argument_list|,
name|extIdToAdd
argument_list|)
argument_list|)
expr_stmt|;
name|toAdd
operator|.
name|add
argument_list|(
name|extIdToAdd
argument_list|)
expr_stmt|;
name|toDelete
operator|.
name|add
argument_list|(
name|extIdToDelete
argument_list|)
expr_stmt|;
block|}
comment|/**    * Commits this batch.    *    *<p>This means external ID replacements which were prepared by invoking {@link    * #replace(ExternalId, ExternalId)} are now executed. Deletion of external IDs is done before    * adding the new external IDs. This means if an external ID is specified for deletion and an    * external ID with the same key is specified to be added, the old external ID with that key is    * deleted first and then the new external ID is added (so the external ID for that key is    * replaced).    *    *<p>For NoteDb a single commit is created that contains all the external ID updates.    */
DECL|method|commit (ReviewDb db, String commitMessage)
specifier|public
name|void
name|commit
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|String
name|commitMessage
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
throws|,
name|ConfigInvalidException
block|{
if|if
condition|(
name|toDelete
operator|.
name|isEmpty
argument_list|()
operator|&&
name|toAdd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|delete
argument_list|(
name|toAccountExternalIds
argument_list|(
name|toDelete
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|insert
argument_list|(
name|toAccountExternalIds
argument_list|(
name|toAdd
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|;
name|ObjectInserter
name|ins
operator|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
name|ObjectId
name|rev
init|=
name|ExternalIdReader
operator|.
name|readRevision
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|NoteMap
name|noteMap
init|=
name|ExternalIdReader
operator|.
name|readNoteMap
argument_list|(
name|rw
argument_list|,
name|rev
argument_list|)
decl_stmt|;
for|for
control|(
name|ExternalId
name|extId
range|:
name|toDelete
control|)
block|{
name|ExternalIdsUpdate
operator|.
name|remove
argument_list|(
name|rw
argument_list|,
name|noteMap
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExternalId
name|extId
range|:
name|toAdd
control|)
block|{
name|ExternalIdsUpdate
operator|.
name|insert
argument_list|(
name|rw
argument_list|,
name|ins
argument_list|,
name|noteMap
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
name|ObjectId
name|newRev
init|=
name|ExternalIdsUpdate
operator|.
name|commit
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|ins
argument_list|,
name|rev
argument_list|,
name|noteMap
argument_list|,
name|commitMessage
argument_list|,
name|serverIdent
argument_list|,
name|serverIdent
argument_list|)
decl_stmt|;
name|externalIdCache
operator|.
name|onReplace
argument_list|(
name|rev
argument_list|,
name|newRev
argument_list|,
name|toDelete
argument_list|,
name|toAdd
argument_list|)
expr_stmt|;
block|}
name|toAdd
operator|.
name|clear
argument_list|()
expr_stmt|;
name|toDelete
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

