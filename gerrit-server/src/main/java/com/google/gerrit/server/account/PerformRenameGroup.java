begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|InvalidNameException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|NameAlreadyUsedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|NoSuchGroupException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|RenameGroupOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmDuplicateKeyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|PerformRenameGroup
specifier|public
class|class
name|PerformRenameGroup
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create ()
name|PerformRenameGroup
name|create
parameter_list|()
function_decl|;
block|}
DECL|field|db
specifier|private
specifier|final
name|ReviewDb
name|db
decl_stmt|;
DECL|field|groupCache
specifier|private
specifier|final
name|GroupCache
name|groupCache
decl_stmt|;
DECL|field|groupControlFactory
specifier|private
specifier|final
name|GroupControl
operator|.
name|Factory
name|groupControlFactory
decl_stmt|;
DECL|field|groupDetailFactory
specifier|private
specifier|final
name|GroupDetailFactory
operator|.
name|Factory
name|groupDetailFactory
decl_stmt|;
DECL|field|renameGroupOpFactory
specifier|private
specifier|final
name|RenameGroupOp
operator|.
name|Factory
name|renameGroupOpFactory
decl_stmt|;
DECL|field|currentUser
specifier|private
specifier|final
name|IdentifiedUser
name|currentUser
decl_stmt|;
annotation|@
name|Inject
DECL|method|PerformRenameGroup (final ReviewDb db, final GroupCache groupCache, final GroupControl.Factory groupControlFactory, final GroupDetailFactory.Factory groupDetailFactory, final RenameGroupOp.Factory renameGroupOpFactory, final IdentifiedUser currentUser)
name|PerformRenameGroup
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|GroupCache
name|groupCache
parameter_list|,
specifier|final
name|GroupControl
operator|.
name|Factory
name|groupControlFactory
parameter_list|,
specifier|final
name|GroupDetailFactory
operator|.
name|Factory
name|groupDetailFactory
parameter_list|,
specifier|final
name|RenameGroupOp
operator|.
name|Factory
name|renameGroupOpFactory
parameter_list|,
specifier|final
name|IdentifiedUser
name|currentUser
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|groupCache
operator|=
name|groupCache
expr_stmt|;
name|this
operator|.
name|groupControlFactory
operator|=
name|groupControlFactory
expr_stmt|;
name|this
operator|.
name|groupDetailFactory
operator|=
name|groupDetailFactory
expr_stmt|;
name|this
operator|.
name|renameGroupOpFactory
operator|=
name|renameGroupOpFactory
expr_stmt|;
name|this
operator|.
name|currentUser
operator|=
name|currentUser
expr_stmt|;
block|}
DECL|method|renameGroup (final String groupName, final String newGroupName)
specifier|public
name|GroupDetail
name|renameGroup
parameter_list|(
specifier|final
name|String
name|groupName
parameter_list|,
specifier|final
name|String
name|newGroupName
parameter_list|)
throws|throws
name|OrmException
throws|,
name|NameAlreadyUsedException
throws|,
name|NoSuchGroupException
throws|,
name|InvalidNameException
block|{
specifier|final
name|AccountGroup
operator|.
name|NameKey
name|groupNameKey
init|=
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
specifier|final
name|AccountGroup
name|group
init|=
name|groupCache
operator|.
name|get
argument_list|(
name|groupNameKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchGroupException
argument_list|(
name|groupNameKey
argument_list|)
throw|;
block|}
return|return
name|renameGroup
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|,
name|newGroupName
argument_list|)
return|;
block|}
DECL|method|renameGroup (final AccountGroup.Id groupId, final String newName)
specifier|public
name|GroupDetail
name|renameGroup
parameter_list|(
specifier|final
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|,
specifier|final
name|String
name|newName
parameter_list|)
throws|throws
name|OrmException
throws|,
name|NameAlreadyUsedException
throws|,
name|NoSuchGroupException
throws|,
name|InvalidNameException
block|{
specifier|final
name|GroupControl
name|ctl
init|=
name|groupControlFactory
operator|.
name|validateFor
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
specifier|final
name|AccountGroup
name|group
init|=
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|get
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
operator|||
operator|!
name|ctl
operator|.
name|isOwner
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchGroupException
argument_list|(
name|groupId
argument_list|)
throw|;
block|}
if|if
condition|(
name|newName
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidNameException
argument_list|()
throw|;
block|}
specifier|final
name|AccountGroup
operator|.
name|NameKey
name|old
init|=
name|group
operator|.
name|getNameKey
argument_list|()
decl_stmt|;
specifier|final
name|AccountGroup
operator|.
name|NameKey
name|key
init|=
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|newName
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|AccountGroupName
name|id
init|=
operator|new
name|AccountGroupName
argument_list|(
name|key
argument_list|,
name|groupId
argument_list|)
decl_stmt|;
name|db
operator|.
name|accountGroupNames
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmDuplicateKeyException
name|dupeErr
parameter_list|)
block|{
comment|// If we are using this identity, don't report the exception.
comment|//
name|AccountGroupName
name|other
init|=
name|db
operator|.
name|accountGroupNames
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|!=
literal|null
operator|&&
name|other
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|groupId
argument_list|)
condition|)
block|{
return|return
name|groupDetailFactory
operator|.
name|create
argument_list|(
name|groupId
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
comment|// Otherwise, someone else has this identity.
comment|//
throw|throw
operator|new
name|NameAlreadyUsedException
argument_list|()
throw|;
block|}
name|group
operator|.
name|setNameKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
name|AccountGroupName
name|priorName
init|=
name|db
operator|.
name|accountGroupNames
argument_list|()
operator|.
name|get
argument_list|(
name|old
argument_list|)
decl_stmt|;
if|if
condition|(
name|priorName
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|accountGroupNames
argument_list|()
operator|.
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|priorName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|groupCache
operator|.
name|evict
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|groupCache
operator|.
name|evictAfterRename
argument_list|(
name|old
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|renameGroupOpFactory
operator|.
name|create
argument_list|(
comment|//
name|currentUser
operator|.
name|newCommitterIdent
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|,
name|TimeZone
operator|.
name|getDefault
argument_list|()
argument_list|)
argument_list|,
comment|//
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|,
comment|//
name|old
operator|.
name|get
argument_list|()
argument_list|,
name|newName
argument_list|)
operator|.
name|start
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
return|return
name|groupDetailFactory
operator|.
name|create
argument_list|(
name|groupId
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
block|}
end_class

end_unit

