begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.mail.send
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|send
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|GeneralPreferencesInfo
operator|.
name|EmailStrategy
operator|.
name|CC_ON_OWN_COMMENTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|GeneralPreferencesInfo
operator|.
name|EmailStrategy
operator|.
name|DISABLED
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|EmailException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RecipientType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|GeneralPreferencesInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|GeneralPreferencesInfo
operator|.
name|EmailFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|UserIdentity
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|send
operator|.
name|EmailHeader
operator|.
name|AddressList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|validators
operator|.
name|OutgoingEmailValidationListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|validators
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|template
operator|.
name|soy
operator|.
name|data
operator|.
name|SanitizedContent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringJoiner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|VelocityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|context
operator|.
name|InternalContextAdapterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|RuntimeInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|parser
operator|.
name|node
operator|.
name|SimpleNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|SystemReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** Sends an email to one or more interested parties. */
end_comment

begin_class
DECL|class|OutgoingEmail
specifier|public
specifier|abstract
class|class
name|OutgoingEmail
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OutgoingEmail
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|HDR_TO
specifier|private
specifier|static
specifier|final
name|String
name|HDR_TO
init|=
literal|"To"
decl_stmt|;
DECL|field|HDR_CC
specifier|private
specifier|static
specifier|final
name|String
name|HDR_CC
init|=
literal|"CC"
decl_stmt|;
DECL|field|messageClass
specifier|protected
name|String
name|messageClass
decl_stmt|;
DECL|field|rcptTo
specifier|private
specifier|final
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|rcptTo
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|headers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|EmailHeader
argument_list|>
name|headers
decl_stmt|;
DECL|field|smtpRcptTo
specifier|private
specifier|final
name|Set
argument_list|<
name|Address
argument_list|>
name|smtpRcptTo
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|smtpFromAddress
specifier|private
name|Address
name|smtpFromAddress
decl_stmt|;
DECL|field|textBody
specifier|private
name|StringBuilder
name|textBody
decl_stmt|;
DECL|field|htmlBody
specifier|private
name|StringBuilder
name|htmlBody
decl_stmt|;
DECL|field|accountsToNotify
specifier|private
name|ListMultimap
argument_list|<
name|RecipientType
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|accountsToNotify
init|=
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|velocityContext
specifier|protected
name|VelocityContext
name|velocityContext
decl_stmt|;
DECL|field|soyContext
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|soyContext
decl_stmt|;
DECL|field|soyContextEmailData
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|soyContextEmailData
decl_stmt|;
DECL|field|footers
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|footers
decl_stmt|;
DECL|field|args
specifier|protected
specifier|final
name|EmailArguments
name|args
decl_stmt|;
DECL|field|fromId
specifier|protected
name|Account
operator|.
name|Id
name|fromId
decl_stmt|;
DECL|field|notify
specifier|protected
name|NotifyHandling
name|notify
init|=
name|NotifyHandling
operator|.
name|ALL
decl_stmt|;
DECL|method|OutgoingEmail (EmailArguments ea, String mc)
specifier|protected
name|OutgoingEmail
parameter_list|(
name|EmailArguments
name|ea
parameter_list|,
name|String
name|mc
parameter_list|)
block|{
name|args
operator|=
name|ea
expr_stmt|;
name|messageClass
operator|=
name|mc
expr_stmt|;
name|headers
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|setFrom (Account.Id id)
specifier|public
name|void
name|setFrom
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
name|fromId
operator|=
name|id
expr_stmt|;
block|}
DECL|method|setNotify (NotifyHandling notify)
specifier|public
name|void
name|setNotify
parameter_list|(
name|NotifyHandling
name|notify
parameter_list|)
block|{
name|this
operator|.
name|notify
operator|=
name|checkNotNull
argument_list|(
name|notify
argument_list|)
expr_stmt|;
block|}
DECL|method|setAccountsToNotify (ListMultimap<RecipientType, Account.Id> accountsToNotify)
specifier|public
name|void
name|setAccountsToNotify
parameter_list|(
name|ListMultimap
argument_list|<
name|RecipientType
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|accountsToNotify
parameter_list|)
block|{
name|this
operator|.
name|accountsToNotify
operator|=
name|checkNotNull
argument_list|(
name|accountsToNotify
argument_list|)
expr_stmt|;
block|}
comment|/**    * Format and enqueue the message for delivery.    *    * @throws EmailException    */
DECL|method|send ()
specifier|public
name|void
name|send
parameter_list|()
throws|throws
name|EmailException
block|{
if|if
condition|(
operator|!
name|args
operator|.
name|emailSender
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
comment|// Server has explicitly disabled email sending.
comment|//
name|logNotSending
argument_list|(
parameter_list|()
lambda|->
literal|"Email sending is disabled by server config"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|NotifyHandling
operator|.
name|NONE
operator|.
name|equals
argument_list|(
name|notify
argument_list|)
operator|&&
name|accountsToNotify
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logNotSending
argument_list|(
parameter_list|()
lambda|->
literal|"Notify handling is NONE"
argument_list|)
expr_stmt|;
return|return;
block|}
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|useHtml
argument_list|()
condition|)
block|{
name|appendHtml
argument_list|(
name|soyHtmlTemplate
argument_list|(
literal|"HeaderHtml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|format
argument_list|()
expr_stmt|;
name|appendText
argument_list|(
name|textTemplate
argument_list|(
literal|"Footer"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|useHtml
argument_list|()
condition|)
block|{
name|appendHtml
argument_list|(
name|soyHtmlTemplate
argument_list|(
literal|"FooterHtml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Address
argument_list|>
name|smtpRcptToPlaintextOnly
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|shouldSendMessage
argument_list|()
condition|)
block|{
if|if
condition|(
name|fromId
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Account
name|fromUser
init|=
name|args
operator|.
name|accountCache
operator|.
name|get
argument_list|(
name|fromId
argument_list|)
operator|.
name|getAccount
argument_list|()
decl_stmt|;
name|GeneralPreferencesInfo
name|senderPrefs
init|=
name|fromUser
operator|.
name|getGeneralPreferencesInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|senderPrefs
operator|!=
literal|null
operator|&&
name|senderPrefs
operator|.
name|getEmailStrategy
argument_list|()
operator|==
name|CC_ON_OWN_COMMENTS
condition|)
block|{
comment|// If we are impersonating a user, make sure they receive a CC of
comment|// this message so they can always review and audit what we sent
comment|// on their behalf to others.
comment|//
name|add
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
name|fromId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|accountsToNotify
operator|.
name|containsValue
argument_list|(
name|fromId
argument_list|)
operator|&&
name|rcptTo
operator|.
name|remove
argument_list|(
name|fromId
argument_list|)
condition|)
block|{
comment|// If they don't want a copy, but we queued one up anyway,
comment|// drop them from the recipient lists.
comment|//
name|removeUser
argument_list|(
name|fromUser
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check the preferences of all recipients. If any user has disabled
comment|// his email notifications then drop him from recipients' list.
comment|// In addition, check if users only want to receive plaintext email.
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|rcptTo
control|)
block|{
name|Account
name|thisUser
init|=
name|args
operator|.
name|accountCache
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getAccount
argument_list|()
decl_stmt|;
name|GeneralPreferencesInfo
name|prefs
init|=
name|thisUser
operator|.
name|getGeneralPreferencesInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefs
operator|==
literal|null
operator|||
name|prefs
operator|.
name|getEmailStrategy
argument_list|()
operator|==
name|DISABLED
condition|)
block|{
name|removeUser
argument_list|(
name|thisUser
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|useHtml
argument_list|()
operator|&&
name|prefs
operator|.
name|getEmailFormat
argument_list|()
operator|==
name|EmailFormat
operator|.
name|PLAINTEXT
condition|)
block|{
name|removeUser
argument_list|(
name|thisUser
argument_list|)
expr_stmt|;
name|smtpRcptToPlaintextOnly
operator|.
name|add
argument_list|(
operator|new
name|Address
argument_list|(
name|thisUser
operator|.
name|getFullName
argument_list|()
argument_list|,
name|thisUser
operator|.
name|getPreferredEmail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|smtpRcptTo
operator|.
name|isEmpty
argument_list|()
operator|&&
name|smtpRcptToPlaintextOnly
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logNotSending
argument_list|(
parameter_list|()
lambda|->
literal|"No SMTP recipients"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// Set Reply-To only if it hasn't been set by a child class
comment|// Reply-To will already be populated for the message types where Gerrit supports
comment|// inbound email replies.
if|if
condition|(
operator|!
name|headers
operator|.
name|containsKey
argument_list|(
literal|"Reply-To"
argument_list|)
condition|)
block|{
name|StringJoiner
name|j
init|=
operator|new
name|StringJoiner
argument_list|(
literal|", "
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromId
operator|!=
literal|null
condition|)
block|{
name|Address
name|address
init|=
name|toAddress
argument_list|(
name|fromId
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
name|j
operator|.
name|add
argument_list|(
name|address
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|smtpRcptTo
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|a
lambda|->
name|j
operator|.
name|add
argument_list|(
name|a
operator|.
name|getEmail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|smtpRcptToPlaintextOnly
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|a
lambda|->
name|j
operator|.
name|add
argument_list|(
name|a
operator|.
name|getEmail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
literal|"Reply-To"
argument_list|,
name|j
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|textPart
init|=
name|textBody
operator|.
name|toString
argument_list|()
decl_stmt|;
name|OutgoingEmailValidationListener
operator|.
name|Args
name|va
init|=
operator|new
name|OutgoingEmailValidationListener
operator|.
name|Args
argument_list|()
decl_stmt|;
name|va
operator|.
name|messageClass
operator|=
name|messageClass
expr_stmt|;
name|va
operator|.
name|smtpFromAddress
operator|=
name|smtpFromAddress
expr_stmt|;
name|va
operator|.
name|smtpRcptTo
operator|=
name|smtpRcptTo
expr_stmt|;
name|va
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
name|va
operator|.
name|body
operator|=
name|textPart
expr_stmt|;
if|if
condition|(
name|useHtml
argument_list|()
condition|)
block|{
name|va
operator|.
name|htmlBody
operator|=
name|htmlBody
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|va
operator|.
name|htmlBody
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|OutgoingEmailValidationListener
name|validator
range|:
name|args
operator|.
name|outgoingEmailValidationListeners
control|)
block|{
try|try
block|{
name|validator
operator|.
name|validateOutgoingEmail
argument_list|(
name|va
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValidationException
name|e
parameter_list|)
block|{
name|logNotSending
argument_list|(
parameter_list|()
lambda|->
name|String
operator|.
name|format
argument_list|(
literal|"Rejected by outgoing email validator: %s"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|Set
argument_list|<
name|Address
argument_list|>
name|intersection
init|=
name|Sets
operator|.
name|intersection
argument_list|(
name|smtpRcptTo
argument_list|,
name|smtpRcptToPlaintextOnly
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|intersection
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Email '{}' will be sent twice to {}"
argument_list|,
name|messageClass
argument_list|,
name|intersection
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|smtpRcptTo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Send multipart message
name|log
operator|.
name|debug
argument_list|(
literal|"Sending multipart '{}'"
argument_list|,
name|messageClass
argument_list|)
expr_stmt|;
name|args
operator|.
name|emailSender
operator|.
name|send
argument_list|(
name|va
operator|.
name|smtpFromAddress
argument_list|,
name|va
operator|.
name|smtpRcptTo
argument_list|,
name|va
operator|.
name|headers
argument_list|,
name|va
operator|.
name|body
argument_list|,
name|va
operator|.
name|htmlBody
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|smtpRcptToPlaintextOnly
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Sending plaintext '{}'"
argument_list|,
name|messageClass
argument_list|)
expr_stmt|;
comment|// Send plaintext message
name|Map
argument_list|<
name|String
argument_list|,
name|EmailHeader
argument_list|>
name|shallowCopy
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|shallowCopy
operator|.
name|putAll
argument_list|(
name|headers
argument_list|)
expr_stmt|;
comment|// Remove To and Cc
name|shallowCopy
operator|.
name|remove
argument_list|(
name|HDR_TO
argument_list|)
expr_stmt|;
name|shallowCopy
operator|.
name|remove
argument_list|(
name|HDR_CC
argument_list|)
expr_stmt|;
for|for
control|(
name|Address
name|a
range|:
name|smtpRcptToPlaintextOnly
control|)
block|{
comment|// Add new To
name|EmailHeader
operator|.
name|AddressList
name|to
init|=
operator|new
name|EmailHeader
operator|.
name|AddressList
argument_list|()
decl_stmt|;
name|to
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|shallowCopy
operator|.
name|put
argument_list|(
name|HDR_TO
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
name|args
operator|.
name|emailSender
operator|.
name|send
argument_list|(
name|va
operator|.
name|smtpFromAddress
argument_list|,
name|smtpRcptToPlaintextOnly
argument_list|,
name|shallowCopy
argument_list|,
name|va
operator|.
name|body
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Format the message body by calling {@link #appendText(String)}. */
DECL|method|format ()
specifier|protected
specifier|abstract
name|void
name|format
parameter_list|()
throws|throws
name|EmailException
function_decl|;
comment|/**    * Setup the message headers and envelope (TO, CC, BCC).    *    * @throws EmailException if an error occurred.    */
DECL|method|init ()
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|EmailException
block|{
name|setupVelocityContext
argument_list|()
expr_stmt|;
name|setupSoyContext
argument_list|()
expr_stmt|;
name|smtpFromAddress
operator|=
name|args
operator|.
name|fromAddressGenerator
operator|.
name|from
argument_list|(
name|fromId
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
literal|"Date"
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"From"
argument_list|,
operator|new
name|EmailHeader
operator|.
name|AddressList
argument_list|(
name|smtpFromAddress
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HDR_TO
argument_list|,
operator|new
name|EmailHeader
operator|.
name|AddressList
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HDR_CC
argument_list|,
operator|new
name|EmailHeader
operator|.
name|AddressList
argument_list|()
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
literal|"Message-ID"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|RecipientType
name|recipientType
range|:
name|accountsToNotify
operator|.
name|keySet
argument_list|()
control|)
block|{
name|add
argument_list|(
name|recipientType
argument_list|,
name|accountsToNotify
operator|.
name|get
argument_list|(
name|recipientType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setHeader
argument_list|(
literal|"X-Gerrit-MessageType"
argument_list|,
name|messageClass
argument_list|)
expr_stmt|;
name|textBody
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|htmlBody
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromId
operator|!=
literal|null
operator|&&
name|args
operator|.
name|fromAddressGenerator
operator|.
name|isGenericAddress
argument_list|(
name|fromId
argument_list|)
condition|)
block|{
name|appendText
argument_list|(
name|getFromLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFromLine ()
specifier|protected
name|String
name|getFromLine
parameter_list|()
block|{
specifier|final
name|Account
name|account
init|=
name|args
operator|.
name|accountCache
operator|.
name|get
argument_list|(
name|fromId
argument_list|)
operator|.
name|getAccount
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|account
operator|.
name|getFullName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|email
init|=
name|account
operator|.
name|getPreferredEmail
argument_list|()
decl_stmt|;
name|StringBuilder
name|f
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|email
operator|!=
literal|null
operator|&&
operator|!
name|email
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|f
operator|.
name|append
argument_list|(
literal|"From"
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|f
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|email
operator|!=
literal|null
operator|&&
operator|!
name|email
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|f
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
operator|.
name|append
argument_list|(
name|email
argument_list|)
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|append
argument_list|(
literal|":\n\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|f
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getGerritHost ()
specifier|public
name|String
name|getGerritHost
parameter_list|()
block|{
if|if
condition|(
name|getGerritUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
operator|new
name|URL
argument_list|(
name|getGerritUrl
argument_list|()
argument_list|)
operator|.
name|getHost
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// Try something else.
block|}
block|}
comment|// Fall back onto whatever the local operating system thinks
comment|// this server is called. We hopefully didn't get here as a
comment|// good admin would have configured the canonical url.
comment|//
return|return
name|SystemReader
operator|.
name|getInstance
argument_list|()
operator|.
name|getHostname
argument_list|()
return|;
block|}
DECL|method|getSettingsUrl ()
specifier|public
name|String
name|getSettingsUrl
parameter_list|()
block|{
if|if
condition|(
name|getGerritUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|r
operator|.
name|append
argument_list|(
name|getGerritUrl
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|"settings"
argument_list|)
expr_stmt|;
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getGerritUrl ()
specifier|public
name|String
name|getGerritUrl
parameter_list|()
block|{
return|return
name|args
operator|.
name|urlProvider
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** Set a header in the outgoing message using a template. */
DECL|method|setVHeader (String name, String value)
specifier|protected
name|void
name|setVHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|EmailException
block|{
name|setHeader
argument_list|(
name|name
argument_list|,
name|velocify
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Set a header in the outgoing message. */
DECL|method|setHeader (String name, String value)
specifier|protected
name|void
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|EmailHeader
operator|.
name|String
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Remove a header from the outgoing message. */
DECL|method|removeHeader (String name)
specifier|protected
name|void
name|removeHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|headers
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|setHeader (String name, Date date)
specifier|protected
name|void
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|EmailHeader
operator|.
name|Date
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Append text to the outgoing email body. */
DECL|method|appendText (String text)
specifier|protected
name|void
name|appendText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|textBody
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Append html to the outgoing email body. */
DECL|method|appendHtml (String html)
specifier|protected
name|void
name|appendHtml
parameter_list|(
name|String
name|html
parameter_list|)
block|{
if|if
condition|(
name|html
operator|!=
literal|null
condition|)
block|{
name|htmlBody
operator|.
name|append
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Gets the human readable name for an account, usually the "full name".    *    * @param accountId user to fetch.    * @return name of the account, or the server identity name if null.    */
DECL|method|getNameFor (@ullable Account.Id accountId)
specifier|protected
name|String
name|getNameFor
parameter_list|(
annotation|@
name|Nullable
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
if|if
condition|(
name|accountId
operator|==
literal|null
condition|)
block|{
return|return
name|args
operator|.
name|gerritPersonIdent
operator|.
name|getName
argument_list|()
return|;
block|}
return|return
name|args
operator|.
name|accountCache
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
operator|.
name|getAccount
argument_list|()
operator|.
name|getName
argument_list|(
name|args
operator|.
name|anonymousCowardName
argument_list|)
return|;
block|}
comment|/**    * Gets the human readable name and email for an account.    *    * @param accountId user to fetch.    * @return name/email of account; Anonymous Coward if unset or the server identity if null.    */
DECL|method|getNameEmailFor (@ullable Account.Id accountId)
specifier|protected
name|String
name|getNameEmailFor
parameter_list|(
annotation|@
name|Nullable
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
if|if
condition|(
name|accountId
operator|==
literal|null
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s<%s>"
argument_list|,
name|args
operator|.
name|gerritPersonIdent
operator|.
name|getName
argument_list|()
argument_list|,
name|args
operator|.
name|gerritPersonIdent
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
return|;
block|}
return|return
name|args
operator|.
name|accountCache
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
operator|.
name|getAccount
argument_list|()
operator|.
name|getNameEmail
argument_list|(
name|args
operator|.
name|anonymousCowardName
argument_list|)
return|;
block|}
comment|/**    * Gets the human readable name and email for an account; if both are unavailable, returns the    * username. If no username is set, this function returns null.    *    * @param accountId user to fetch.    * @return name/email of account, username, or null if unset.    */
annotation|@
name|Nullable
DECL|method|getUserNameEmailFor (@ullable Account.Id accountId)
specifier|protected
name|String
name|getUserNameEmailFor
parameter_list|(
annotation|@
name|Nullable
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
if|if
condition|(
name|accountId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|AccountState
name|who
init|=
name|args
operator|.
name|accountCache
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|who
operator|.
name|getAccount
argument_list|()
operator|.
name|getFullName
argument_list|()
decl_stmt|;
name|String
name|email
init|=
name|who
operator|.
name|getAccount
argument_list|()
operator|.
name|getPreferredEmail
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|email
operator|!=
literal|null
condition|)
block|{
return|return
name|name
operator|+
literal|"<"
operator|+
name|email
operator|+
literal|">"
return|;
block|}
elseif|else
if|if
condition|(
name|email
operator|!=
literal|null
condition|)
block|{
return|return
name|email
return|;
block|}
elseif|else
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
return|return
name|name
return|;
block|}
name|String
name|username
init|=
name|who
operator|.
name|getUserName
argument_list|()
decl_stmt|;
if|if
condition|(
name|username
operator|!=
literal|null
condition|)
block|{
return|return
name|username
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|shouldSendMessage ()
specifier|protected
name|boolean
name|shouldSendMessage
parameter_list|()
block|{
if|if
condition|(
name|textBody
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// If we have no message body, don't send.
name|logNotSending
argument_list|(
parameter_list|()
lambda|->
literal|"No message body"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|smtpRcptTo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If we have nobody to send this message to, then all of our
comment|// selection filters previously for this type of message were
comment|// unable to match a destination. Don't bother sending it.
name|logNotSending
argument_list|(
parameter_list|()
lambda|->
literal|"No recipients"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|accountsToNotify
operator|==
literal|null
operator|||
name|accountsToNotify
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|smtpRcptTo
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|rcptTo
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|rcptTo
operator|.
name|contains
argument_list|(
name|fromId
argument_list|)
condition|)
block|{
comment|// If the only recipient is also the sender, don't bother.
comment|//
name|logNotSending
argument_list|(
parameter_list|()
lambda|->
literal|"Sender is only recipient"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|logNotSending (Supplier<String> reason)
specifier|private
name|void
name|logNotSending
parameter_list|(
name|Supplier
argument_list|<
name|String
argument_list|>
name|reason
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Not sending '{}': {}"
argument_list|,
name|messageClass
argument_list|,
name|reason
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Schedule this message for delivery to the listed accounts. */
DECL|method|add (RecipientType rt, Collection<Account.Id> list)
specifier|protected
name|void
name|add
parameter_list|(
name|RecipientType
name|rt
parameter_list|,
name|Collection
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|list
parameter_list|)
block|{
name|add
argument_list|(
name|rt
argument_list|,
name|list
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** Schedule this message for delivery to the listed accounts. */
DECL|method|add (RecipientType rt, Collection<Account.Id> list, boolean override)
specifier|protected
name|void
name|add
parameter_list|(
name|RecipientType
name|rt
parameter_list|,
name|Collection
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|list
parameter_list|,
name|boolean
name|override
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Account
operator|.
name|Id
name|id
range|:
name|list
control|)
block|{
name|add
argument_list|(
name|rt
argument_list|,
name|id
argument_list|,
name|override
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Schedule this message for delivery to the listed address. */
DECL|method|addByEmail (RecipientType rt, Collection<Address> list)
specifier|protected
name|void
name|addByEmail
parameter_list|(
name|RecipientType
name|rt
parameter_list|,
name|Collection
argument_list|<
name|Address
argument_list|>
name|list
parameter_list|)
block|{
name|addByEmail
argument_list|(
name|rt
argument_list|,
name|list
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** Schedule this message for delivery to the listed address. */
DECL|method|addByEmail (RecipientType rt, Collection<Address> list, boolean override)
specifier|protected
name|void
name|addByEmail
parameter_list|(
name|RecipientType
name|rt
parameter_list|,
name|Collection
argument_list|<
name|Address
argument_list|>
name|list
parameter_list|,
name|boolean
name|override
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Address
name|id
range|:
name|list
control|)
block|{
name|add
argument_list|(
name|rt
argument_list|,
name|id
argument_list|,
name|override
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|add (RecipientType rt, UserIdentity who)
specifier|protected
name|void
name|add
parameter_list|(
name|RecipientType
name|rt
parameter_list|,
name|UserIdentity
name|who
parameter_list|)
block|{
name|add
argument_list|(
name|rt
argument_list|,
name|who
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|add (RecipientType rt, UserIdentity who, boolean override)
specifier|protected
name|void
name|add
parameter_list|(
name|RecipientType
name|rt
parameter_list|,
name|UserIdentity
name|who
parameter_list|,
name|boolean
name|override
parameter_list|)
block|{
if|if
condition|(
name|who
operator|!=
literal|null
operator|&&
name|who
operator|.
name|getAccount
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|add
argument_list|(
name|rt
argument_list|,
name|who
operator|.
name|getAccount
argument_list|()
argument_list|,
name|override
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Schedule delivery of this message to the given account. */
DECL|method|add (RecipientType rt, Account.Id to)
specifier|protected
name|void
name|add
parameter_list|(
name|RecipientType
name|rt
parameter_list|,
name|Account
operator|.
name|Id
name|to
parameter_list|)
block|{
name|add
argument_list|(
name|rt
argument_list|,
name|to
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|add (RecipientType rt, Account.Id to, boolean override)
specifier|protected
name|void
name|add
parameter_list|(
name|RecipientType
name|rt
parameter_list|,
name|Account
operator|.
name|Id
name|to
parameter_list|,
name|boolean
name|override
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|rcptTo
operator|.
name|contains
argument_list|(
name|to
argument_list|)
operator|&&
name|isVisibleTo
argument_list|(
name|to
argument_list|)
condition|)
block|{
name|rcptTo
operator|.
name|add
argument_list|(
name|to
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|rt
argument_list|,
name|toAddress
argument_list|(
name|to
argument_list|)
argument_list|,
name|override
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
decl||
name|PermissionBackendException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error reading database for account: "
operator|+
name|to
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param to account.    * @throws OrmException    * @throws PermissionBackendException    * @return whether this email is visible to the given account.    */
DECL|method|isVisibleTo (Account.Id to)
specifier|protected
name|boolean
name|isVisibleTo
parameter_list|(
name|Account
operator|.
name|Id
name|to
parameter_list|)
throws|throws
name|OrmException
throws|,
name|PermissionBackendException
block|{
return|return
literal|true
return|;
block|}
comment|/** Schedule delivery of this message to the given account. */
DECL|method|add (RecipientType rt, Address addr)
specifier|protected
name|void
name|add
parameter_list|(
name|RecipientType
name|rt
parameter_list|,
name|Address
name|addr
parameter_list|)
block|{
name|add
argument_list|(
name|rt
argument_list|,
name|addr
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|add (RecipientType rt, Address addr, boolean override)
specifier|protected
name|void
name|add
parameter_list|(
name|RecipientType
name|rt
parameter_list|,
name|Address
name|addr
parameter_list|,
name|boolean
name|override
parameter_list|)
block|{
if|if
condition|(
name|addr
operator|!=
literal|null
operator|&&
name|addr
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
operator|&&
name|addr
operator|.
name|getEmail
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|args
operator|.
name|validator
operator|.
name|isValid
argument_list|(
name|addr
operator|.
name|getEmail
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Not emailing "
operator|+
name|addr
operator|.
name|getEmail
argument_list|()
operator|+
literal|" (invalid email address)"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|args
operator|.
name|emailSender
operator|.
name|canEmail
argument_list|(
name|addr
operator|.
name|getEmail
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Not emailing "
operator|+
name|addr
operator|.
name|getEmail
argument_list|()
operator|+
literal|" (prohibited by allowrcpt)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|smtpRcptTo
operator|.
name|add
argument_list|(
name|addr
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|override
condition|)
block|{
return|return;
block|}
operator|(
operator|(
name|EmailHeader
operator|.
name|AddressList
operator|)
name|headers
operator|.
name|get
argument_list|(
name|HDR_TO
argument_list|)
operator|)
operator|.
name|remove
argument_list|(
name|addr
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EmailHeader
operator|.
name|AddressList
operator|)
name|headers
operator|.
name|get
argument_list|(
name|HDR_CC
argument_list|)
operator|)
operator|.
name|remove
argument_list|(
name|addr
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|rt
condition|)
block|{
case|case
name|TO
case|:
operator|(
operator|(
name|EmailHeader
operator|.
name|AddressList
operator|)
name|headers
operator|.
name|get
argument_list|(
name|HDR_TO
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|addr
argument_list|)
expr_stmt|;
break|break;
case|case
name|CC
case|:
operator|(
operator|(
name|EmailHeader
operator|.
name|AddressList
operator|)
name|headers
operator|.
name|get
argument_list|(
name|HDR_CC
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|addr
argument_list|)
expr_stmt|;
break|break;
case|case
name|BCC
case|:
break|break;
block|}
block|}
block|}
block|}
DECL|method|toAddress (Account.Id id)
specifier|private
name|Address
name|toAddress
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
specifier|final
name|Account
name|a
init|=
name|args
operator|.
name|accountCache
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getAccount
argument_list|()
decl_stmt|;
specifier|final
name|String
name|e
init|=
name|a
operator|.
name|getPreferredEmail
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|a
operator|.
name|isActive
argument_list|()
operator|||
name|e
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Address
argument_list|(
name|a
operator|.
name|getFullName
argument_list|()
argument_list|,
name|e
argument_list|)
return|;
block|}
DECL|method|setupVelocityContext ()
specifier|protected
name|void
name|setupVelocityContext
parameter_list|()
block|{
name|velocityContext
operator|=
operator|new
name|VelocityContext
argument_list|()
expr_stmt|;
name|velocityContext
operator|.
name|put
argument_list|(
literal|"email"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|velocityContext
operator|.
name|put
argument_list|(
literal|"messageClass"
argument_list|,
name|messageClass
argument_list|)
expr_stmt|;
name|velocityContext
operator|.
name|put
argument_list|(
literal|"StringUtils"
argument_list|,
name|StringUtils
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|setupSoyContext ()
specifier|protected
name|void
name|setupSoyContext
parameter_list|()
block|{
name|soyContext
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|footers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|soyContext
operator|.
name|put
argument_list|(
literal|"messageClass"
argument_list|,
name|messageClass
argument_list|)
expr_stmt|;
name|soyContext
operator|.
name|put
argument_list|(
literal|"footers"
argument_list|,
name|footers
argument_list|)
expr_stmt|;
name|soyContextEmailData
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|soyContextEmailData
operator|.
name|put
argument_list|(
literal|"settingsUrl"
argument_list|,
name|getSettingsUrl
argument_list|()
argument_list|)
expr_stmt|;
name|soyContextEmailData
operator|.
name|put
argument_list|(
literal|"gerritHost"
argument_list|,
name|getGerritHost
argument_list|()
argument_list|)
expr_stmt|;
name|soyContextEmailData
operator|.
name|put
argument_list|(
literal|"gerritUrl"
argument_list|,
name|getGerritUrl
argument_list|()
argument_list|)
expr_stmt|;
name|soyContext
operator|.
name|put
argument_list|(
literal|"email"
argument_list|,
name|soyContextEmailData
argument_list|)
expr_stmt|;
block|}
DECL|method|velocify (String template)
specifier|protected
name|String
name|velocify
parameter_list|(
name|String
name|template
parameter_list|)
throws|throws
name|EmailException
block|{
try|try
block|{
name|RuntimeInstance
name|runtime
init|=
name|args
operator|.
name|velocityRuntime
decl_stmt|;
name|String
name|templateName
init|=
literal|"OutgoingEmail"
decl_stmt|;
name|SimpleNode
name|tree
init|=
name|runtime
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|template
argument_list|)
argument_list|,
name|templateName
argument_list|)
decl_stmt|;
name|InternalContextAdapterImpl
name|ica
init|=
operator|new
name|InternalContextAdapterImpl
argument_list|(
name|velocityContext
argument_list|)
decl_stmt|;
name|ica
operator|.
name|pushCurrentTemplateName
argument_list|(
name|templateName
argument_list|)
expr_stmt|;
try|try
block|{
name|tree
operator|.
name|init
argument_list|(
name|ica
argument_list|,
name|runtime
argument_list|)
expr_stmt|;
name|StringWriter
name|w
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|tree
operator|.
name|render
argument_list|(
name|ica
argument_list|,
name|w
argument_list|)
expr_stmt|;
return|return
name|w
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|ica
operator|.
name|popCurrentTemplateName
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EmailException
argument_list|(
literal|"Cannot format velocity template: "
operator|+
name|template
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|velocifyFile (String name)
specifier|protected
name|String
name|velocifyFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|EmailException
block|{
try|try
block|{
name|RuntimeInstance
name|runtime
init|=
name|args
operator|.
name|velocityRuntime
decl_stmt|;
if|if
condition|(
name|runtime
operator|.
name|getLoaderNameForResource
argument_list|(
name|name
argument_list|)
operator|==
literal|null
condition|)
block|{
name|name
operator|=
literal|"com/google/gerrit/server/mail/"
operator|+
name|name
expr_stmt|;
block|}
name|Template
name|template
init|=
name|runtime
operator|.
name|getTemplate
argument_list|(
name|name
argument_list|,
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|StringWriter
name|w
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|template
operator|.
name|merge
argument_list|(
name|velocityContext
argument_list|,
name|w
argument_list|)
expr_stmt|;
return|return
name|w
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EmailException
argument_list|(
literal|"Cannot format velocity template "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|soyTemplate (String name, SanitizedContent.ContentKind kind)
specifier|private
name|String
name|soyTemplate
parameter_list|(
name|String
name|name
parameter_list|,
name|SanitizedContent
operator|.
name|ContentKind
name|kind
parameter_list|)
block|{
return|return
name|args
operator|.
name|soyTofu
operator|.
name|newRenderer
argument_list|(
literal|"com.google.gerrit.server.mail.template."
operator|+
name|name
argument_list|)
operator|.
name|setContentKind
argument_list|(
name|kind
argument_list|)
operator|.
name|setData
argument_list|(
name|soyContext
argument_list|)
operator|.
name|render
argument_list|()
return|;
block|}
DECL|method|soyTextTemplate (String name)
specifier|protected
name|String
name|soyTextTemplate
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|soyTemplate
argument_list|(
name|name
argument_list|,
name|SanitizedContent
operator|.
name|ContentKind
operator|.
name|TEXT
argument_list|)
return|;
block|}
DECL|method|soyHtmlTemplate (String name)
specifier|protected
name|String
name|soyHtmlTemplate
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|soyTemplate
argument_list|(
name|name
argument_list|,
name|SanitizedContent
operator|.
name|ContentKind
operator|.
name|HTML
argument_list|)
return|;
block|}
comment|/**    * Evaluate the named template according to the following priority: 1) Velocity file override,    * OR... 2) Soy file override, OR... 3) Soy resource.    */
DECL|method|textTemplate (String name)
specifier|protected
name|String
name|textTemplate
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|EmailException
block|{
name|String
name|velocityName
init|=
name|name
operator|+
literal|".vm"
decl_stmt|;
name|Path
name|filePath
init|=
name|args
operator|.
name|site
operator|.
name|mail_dir
operator|.
name|resolve
argument_list|(
name|velocityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isRegularFile
argument_list|(
name|filePath
argument_list|)
condition|)
block|{
return|return
name|velocifyFile
argument_list|(
name|velocityName
argument_list|)
return|;
block|}
return|return
name|soyTextTemplate
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|removeUser (Account user)
specifier|protected
name|void
name|removeUser
parameter_list|(
name|Account
name|user
parameter_list|)
block|{
name|String
name|fromEmail
init|=
name|user
operator|.
name|getPreferredEmail
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Address
argument_list|>
name|j
init|=
name|smtpRcptTo
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|j
operator|.
name|next
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|.
name|equals
argument_list|(
name|fromEmail
argument_list|)
condition|)
block|{
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|EmailHeader
argument_list|>
name|entry
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Don't remove fromEmail from the "From" header though!
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|AddressList
operator|&&
operator|!
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"From"
argument_list|)
condition|)
block|{
operator|(
operator|(
name|AddressList
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|remove
argument_list|(
name|fromEmail
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|useHtml ()
specifier|protected
specifier|final
name|boolean
name|useHtml
parameter_list|()
block|{
return|return
name|args
operator|.
name|settings
operator|.
name|html
operator|&&
name|supportsHtml
argument_list|()
return|;
block|}
comment|/** Override this method to enable HTML in a subclass. */
DECL|method|supportsHtml ()
specifier|protected
name|boolean
name|supportsHtml
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

