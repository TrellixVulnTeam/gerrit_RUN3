begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.auth.oauth
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|auth
operator|.
name|oauth
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|auth
operator|.
name|oauth
operator|.
name|OAuthToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|auth
operator|.
name|oauth
operator|.
name|OAuthTokenEncrypter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|auth
operator|.
name|oauth
operator|.
name|OAuthUserInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|CacheModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|OAuthTokenCache
specifier|public
class|class
name|OAuthTokenCache
block|{
DECL|field|OAUTH_TOKENS
specifier|public
specifier|static
specifier|final
name|String
name|OAUTH_TOKENS
init|=
literal|"oauth_tokens"
decl_stmt|;
DECL|field|encrypter
specifier|private
specifier|final
name|DynamicItem
argument_list|<
name|OAuthTokenEncrypter
argument_list|>
name|encrypter
decl_stmt|;
DECL|method|module ()
specifier|public
specifier|static
name|Module
name|module
parameter_list|()
block|{
return|return
operator|new
name|CacheModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|persist
argument_list|(
name|OAUTH_TOKENS
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|OAuthToken
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|field|cache
specifier|private
specifier|final
name|Cache
argument_list|<
name|String
argument_list|,
name|OAuthToken
argument_list|>
name|cache
decl_stmt|;
annotation|@
name|Inject
DECL|method|OAuthTokenCache (@amedOAUTH_TOKENS) Cache<String, OAuthToken> cache, DynamicItem<OAuthTokenEncrypter> encrypter)
name|OAuthTokenCache
parameter_list|(
annotation|@
name|Named
argument_list|(
name|OAUTH_TOKENS
argument_list|)
name|Cache
argument_list|<
name|String
argument_list|,
name|OAuthToken
argument_list|>
name|cache
parameter_list|,
name|DynamicItem
argument_list|<
name|OAuthTokenEncrypter
argument_list|>
name|encrypter
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
name|this
operator|.
name|encrypter
operator|=
name|encrypter
expr_stmt|;
block|}
DECL|method|has (OAuthUserInfo user)
specifier|public
name|boolean
name|has
parameter_list|(
name|OAuthUserInfo
name|user
parameter_list|)
block|{
return|return
name|user
operator|!=
literal|null
condition|?
name|cache
operator|.
name|getIfPresent
argument_list|(
name|user
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|!=
literal|null
else|:
literal|false
return|;
block|}
DECL|method|get (OAuthUserInfo user)
specifier|public
name|OAuthToken
name|get
parameter_list|(
name|OAuthUserInfo
name|user
parameter_list|)
block|{
return|return
name|user
operator|!=
literal|null
condition|?
name|get
argument_list|(
name|user
operator|.
name|getUserName
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|get (String userName)
specifier|public
name|OAuthToken
name|get
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|OAuthToken
name|accessToken
init|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessToken
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|accessToken
operator|=
name|decrypt
argument_list|(
name|accessToken
argument_list|)
expr_stmt|;
if|if
condition|(
name|accessToken
operator|.
name|isExpired
argument_list|()
condition|)
block|{
name|cache
operator|.
name|invalidate
argument_list|(
name|userName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|accessToken
return|;
block|}
DECL|method|put (OAuthUserInfo user, OAuthToken accessToken)
specifier|public
name|void
name|put
parameter_list|(
name|OAuthUserInfo
name|user
parameter_list|,
name|OAuthToken
name|accessToken
parameter_list|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|checkNotNull
argument_list|(
name|user
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|,
name|encrypt
argument_list|(
name|checkNotNull
argument_list|(
name|accessToken
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|remove (OAuthUserInfo user)
specifier|public
name|void
name|remove
parameter_list|(
name|OAuthUserInfo
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|invalidate
argument_list|(
name|user
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|encrypt (OAuthToken token)
specifier|private
name|OAuthToken
name|encrypt
parameter_list|(
name|OAuthToken
name|token
parameter_list|)
block|{
name|OAuthTokenEncrypter
name|enc
init|=
name|encrypter
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|enc
operator|==
literal|null
condition|)
block|{
return|return
name|token
return|;
block|}
return|return
name|enc
operator|.
name|encrypt
argument_list|(
name|token
argument_list|)
return|;
block|}
DECL|method|decrypt (OAuthToken token)
specifier|private
name|OAuthToken
name|decrypt
parameter_list|(
name|OAuthToken
name|token
parameter_list|)
block|{
name|OAuthTokenEncrypter
name|enc
init|=
name|encrypter
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|enc
operator|==
literal|null
condition|)
block|{
return|return
name|token
return|;
block|}
return|return
name|enc
operator|.
name|decrypt
argument_list|(
name|token
argument_list|)
return|;
block|}
block|}
end_class

end_unit

