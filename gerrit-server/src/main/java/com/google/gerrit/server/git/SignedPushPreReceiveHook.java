begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignature
operator|.
name|CERTIFICATION_REVOCATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignature
operator|.
name|DEFAULT_CERTIFICATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignature
operator|.
name|POSITIVE_CERTIFICATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|OBJ_BLOB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|ArmoredInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKeyRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignatureList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|bc
operator|.
name|BcPGPObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|operator
operator|.
name|bc
operator|.
name|BcPGPContentVerifierBuilderProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|Note
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PreReceiveHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushCertificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushCertificate
operator|.
name|NonceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushCertificateIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceivePack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Pre-receive hook to validate signed pushes.  *<p>  * If configured, prior to processing any push using {@link ReceiveCommits},  * requires that any push certificate present must be valid.  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|SignedPushPreReceiveHook
specifier|public
class|class
name|SignedPushPreReceiveHook
implements|implements
name|PreReceiveHook
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SignedPushPreReceiveHook
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsers
specifier|private
specifier|final
name|AllUsersName
name|allUsers
decl_stmt|;
annotation|@
name|Inject
DECL|method|SignedPushPreReceiveHook ( GitRepositoryManager repoManager, AllUsersName allUsers)
specifier|public
name|SignedPushPreReceiveHook
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsers
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsers
operator|=
name|allUsers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onPreReceive (ReceivePack rp, Collection<ReceiveCommand> commands)
specifier|public
name|void
name|onPreReceive
parameter_list|(
name|ReceivePack
name|rp
parameter_list|,
name|Collection
argument_list|<
name|ReceiveCommand
argument_list|>
name|commands
parameter_list|)
block|{
try|try
init|(
name|Writer
name|msgOut
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|rp
operator|.
name|getMessageOutputStream
argument_list|()
argument_list|)
init|)
block|{
name|PushCertificate
name|cert
init|=
name|rp
operator|.
name|getPushCertificate
argument_list|()
decl_stmt|;
if|if
condition|(
name|cert
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|cert
operator|.
name|getNonceStatus
argument_list|()
operator|!=
name|NonceStatus
operator|.
name|OK
condition|)
block|{
name|rejectInvalid
argument_list|(
name|commands
argument_list|)
expr_stmt|;
return|return;
block|}
name|verifySignature
argument_list|(
name|cert
argument_list|,
name|commands
argument_list|,
name|msgOut
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error verifying push certificate"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|commands
argument_list|,
literal|"push cert error"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifySignature (PushCertificate cert, Collection<ReceiveCommand> commands, Writer msgOut)
specifier|private
name|void
name|verifySignature
parameter_list|(
name|PushCertificate
name|cert
parameter_list|,
name|Collection
argument_list|<
name|ReceiveCommand
argument_list|>
name|commands
parameter_list|,
name|Writer
name|msgOut
parameter_list|)
throws|throws
name|IOException
block|{
name|PGPSignature
name|sig
init|=
name|readSignature
argument_list|(
name|cert
argument_list|)
decl_stmt|;
if|if
condition|(
name|sig
operator|==
literal|null
condition|)
block|{
name|msgOut
operator|.
name|write
argument_list|(
literal|"Invalid signature format\n"
argument_list|)
expr_stmt|;
name|rejectInvalid
argument_list|(
name|commands
argument_list|)
expr_stmt|;
return|return;
block|}
name|PGPPublicKey
name|key
init|=
name|readPublicKey
argument_list|(
name|sig
operator|.
name|getKeyID
argument_list|()
argument_list|,
name|cert
operator|.
name|getPusherIdent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|msgOut
operator|.
name|write
argument_list|(
literal|"No valid public key found for ID "
operator|+
name|keyIdToString
argument_list|(
name|sig
operator|.
name|getKeyID
argument_list|()
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|rejectInvalid
argument_list|(
name|commands
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|sig
operator|.
name|init
argument_list|(
operator|new
name|BcPGPContentVerifierBuilderProvider
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|sig
operator|.
name|update
argument_list|(
name|Constants
operator|.
name|encode
argument_list|(
name|cert
operator|.
name|toText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sig
operator|.
name|verify
argument_list|()
condition|)
block|{
name|msgOut
operator|.
name|write
argument_list|(
literal|"Push certificate signature does not match\n"
argument_list|)
expr_stmt|;
name|rejectInvalid
argument_list|(
name|commands
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
catch|catch
parameter_list|(
name|PGPException
name|e
parameter_list|)
block|{
name|msgOut
operator|.
name|write
argument_list|(
literal|"Push certificate verification error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|rejectInvalid
argument_list|(
name|commands
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
DECL|method|readSignature (PushCertificate cert)
specifier|private
name|PGPSignature
name|readSignature
parameter_list|(
name|PushCertificate
name|cert
parameter_list|)
throws|throws
name|IOException
block|{
name|ArmoredInputStream
name|in
init|=
operator|new
name|ArmoredInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|Constants
operator|.
name|encode
argument_list|(
name|cert
operator|.
name|getSignature
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|PGPObjectFactory
name|factory
init|=
operator|new
name|BcPGPObjectFactory
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|PGPSignature
name|sig
init|=
literal|null
decl_stmt|;
name|Object
name|obj
decl_stmt|;
while|while
condition|(
operator|(
name|obj
operator|=
name|factory
operator|.
name|nextObject
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|PGPSignatureList
operator|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected packet in push cert: {}"
argument_list|,
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|sig
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Multiple signature packets found in push cert"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|PGPSignatureList
name|sigs
init|=
operator|(
name|PGPSignatureList
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|sigs
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Expected 1 signature in push cert, found {}"
argument_list|,
name|sigs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|sig
operator|=
name|sigs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|sig
return|;
block|}
DECL|method|readPublicKey (long keyId, PushCertificateIdent expectedIdent)
specifier|private
name|PGPPublicKey
name|readPublicKey
parameter_list|(
name|long
name|keyId
parameter_list|,
name|PushCertificateIdent
name|expectedIdent
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|REFS_GPG_KEYS
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|NoteMap
name|notes
init|=
name|NoteMap
operator|.
name|read
argument_list|(
name|rw
operator|.
name|getObjectReader
argument_list|()
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Note
name|note
init|=
name|notes
operator|.
name|getNote
argument_list|(
name|keyObjectId
argument_list|(
name|keyId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|note
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
init|(
name|InputStream
name|objIn
init|=
name|rw
operator|.
name|getObjectReader
argument_list|()
operator|.
name|open
argument_list|(
name|note
operator|.
name|getData
argument_list|()
argument_list|,
name|OBJ_BLOB
argument_list|)
operator|.
name|openStream
argument_list|()
init|;
name|ArmoredInputStream
name|in
operator|=
operator|new
name|ArmoredInputStream
argument_list|(
name|objIn
argument_list|)
init|)
block|{
name|PGPObjectFactory
name|factory
init|=
operator|new
name|BcPGPObjectFactory
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|PGPPublicKey
name|matched
init|=
literal|null
decl_stmt|;
name|Object
name|obj
decl_stmt|;
while|while
condition|(
operator|(
name|obj
operator|=
name|factory
operator|.
name|nextObject
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|PGPPublicKeyRing
operator|)
condition|)
block|{
comment|// TODO(dborowitz): Support assertions signed by a trusted key.
name|log
operator|.
name|info
argument_list|(
literal|"Ignoring {} packet in {}"
argument_list|,
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|note
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|PGPPublicKeyRing
name|keyRing
init|=
operator|(
name|PGPPublicKeyRing
operator|)
name|obj
decl_stmt|;
name|PGPPublicKey
name|key
init|=
name|keyRing
operator|.
name|getPublicKey
argument_list|(
name|keyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Public key ring in {} does not contain key ID {}"
argument_list|,
name|note
operator|.
name|getName
argument_list|()
argument_list|,
name|keyObjectId
argument_list|(
name|keyId
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|matched
operator|!=
literal|null
condition|)
block|{
comment|// TODO(dborowitz): Try all keys.
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring key with duplicate ID: {}"
argument_list|,
name|toString
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|verifyPublicKey
argument_list|(
name|key
argument_list|,
name|expectedIdent
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|matched
operator|=
name|key
expr_stmt|;
block|}
return|return
name|matched
return|;
block|}
block|}
block|}
DECL|method|verifyPublicKey (PGPPublicKey key, PushCertificateIdent ident)
specifier|private
name|boolean
name|verifyPublicKey
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|,
name|PushCertificateIdent
name|ident
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|isRevoked
argument_list|()
condition|)
block|{
comment|// TODO(dborowitz): isRevoked is overeager:
comment|// http://www.bouncycastle.org/jira/browse/BJB-45
name|log
operator|.
name|warn
argument_list|(
literal|"Key is revoked: {}"
argument_list|,
name|toString
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|getValidSeconds
argument_list|()
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Key is expired: {}"
argument_list|,
name|toString
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|verifyPublicKeyCertifications
argument_list|(
name|key
argument_list|,
name|ident
argument_list|)
return|;
block|}
DECL|method|verifyPublicKeyCertifications (PGPPublicKey key, PushCertificateIdent ident)
specifier|private
name|boolean
name|verifyPublicKeyCertifications
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|,
name|PushCertificateIdent
name|ident
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|PGPSignature
argument_list|>
name|sigs
init|=
name|key
operator|.
name|getSignaturesForID
argument_list|(
name|ident
operator|.
name|getUserId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sigs
operator|==
literal|null
condition|)
block|{
name|sigs
operator|=
name|Collections
operator|.
name|emptyIterator
argument_list|()
expr_stmt|;
block|}
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
name|boolean
name|revoked
init|=
literal|false
decl_stmt|;
try|try
block|{
while|while
condition|(
name|sigs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PGPSignature
name|sig
init|=
name|sigs
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|sig
operator|.
name|getKeyID
argument_list|()
operator|!=
name|key
operator|.
name|getKeyID
argument_list|()
condition|)
block|{
comment|// TODO(dborowitz): Support certifications by other trusted keys?
continue|continue;
block|}
elseif|else
if|if
condition|(
name|sig
operator|.
name|getSignatureType
argument_list|()
operator|!=
name|DEFAULT_CERTIFICATION
operator|&&
name|sig
operator|.
name|getSignatureType
argument_list|()
operator|!=
name|POSITIVE_CERTIFICATION
operator|&&
name|sig
operator|.
name|getSignatureType
argument_list|()
operator|!=
name|CERTIFICATION_REVOCATION
condition|)
block|{
continue|continue;
block|}
name|sig
operator|.
name|init
argument_list|(
operator|new
name|BcPGPContentVerifierBuilderProvider
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|sig
operator|.
name|verifyCertification
argument_list|(
name|ident
operator|.
name|getUserId
argument_list|()
argument_list|,
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
name|sig
operator|.
name|getSignatureType
argument_list|()
operator|==
name|CERTIFICATION_REVOCATION
condition|)
block|{
name|revoked
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|valid
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid signature for pusher identity {} in key: {}"
argument_list|,
name|ident
operator|.
name|getUserId
argument_list|()
argument_list|,
name|toString
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|PGPException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error in signature verification for public key"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|revoked
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Pusher identity {} is revoked in key {}"
argument_list|,
name|ident
operator|.
name|getUserId
argument_list|()
argument_list|,
name|toString
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|valid
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Key does not contain valid certification for pusher identity {}: {}"
argument_list|,
name|ident
operator|.
name|getUserId
argument_list|()
argument_list|,
name|toString
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|keyObjectId (long keyId)
specifier|static
name|ObjectId
name|keyObjectId
parameter_list|(
name|long
name|keyId
parameter_list|)
block|{
comment|// Right-pad key IDs in network byte order to ObjectId length. This allows
comment|// us to reuse the fanout code in NoteMap for free. (If we ever fix the
comment|// fanout code to work with variable-length byte strings, we will need to
comment|// fall back to this key format during a transition period.)
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[
name|Constants
operator|.
name|OBJECT_ID_LENGTH
index|]
argument_list|)
decl_stmt|;
name|buf
operator|.
name|putLong
argument_list|(
name|keyId
argument_list|)
expr_stmt|;
return|return
name|ObjectId
operator|.
name|fromRaw
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toString (PGPPublicKey key)
specifier|static
name|String
name|toString
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|key
operator|.
name|getUserIDs
argument_list|()
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|key
operator|.
name|getFingerprint
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s %s(%04X %04X %04X %04X %04X  %04X %04X %04X %04X %04X)"
argument_list|,
name|keyIdToString
argument_list|(
name|key
operator|.
name|getKeyID
argument_list|()
argument_list|)
argument_list|,
name|it
operator|.
name|hasNext
argument_list|()
condition|?
name|it
operator|.
name|next
argument_list|()
operator|+
literal|" "
else|:
literal|""
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|,
name|buf
operator|.
name|getShort
argument_list|()
argument_list|)
return|;
block|}
DECL|method|reject (Collection<ReceiveCommand> commands, String reason)
specifier|private
specifier|static
name|void
name|reject
parameter_list|(
name|Collection
argument_list|<
name|ReceiveCommand
argument_list|>
name|commands
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
for|for
control|(
name|ReceiveCommand
name|cmd
range|:
name|commands
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|==
name|ReceiveCommand
operator|.
name|Result
operator|.
name|NOT_ATTEMPTED
condition|)
block|{
name|cmd
operator|.
name|setResult
argument_list|(
name|ReceiveCommand
operator|.
name|Result
operator|.
name|REJECTED_OTHER_REASON
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|keyIdToString (long keyId)
specifier|static
name|String
name|keyIdToString
parameter_list|(
name|long
name|keyId
parameter_list|)
block|{
comment|// Match key ID format from gpg --list-keys.
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%08X"
argument_list|,
operator|(
name|int
operator|)
name|keyId
argument_list|)
return|;
block|}
DECL|method|rejectInvalid (Collection<ReceiveCommand> commands)
specifier|private
specifier|static
name|void
name|rejectInvalid
parameter_list|(
name|Collection
argument_list|<
name|ReceiveCommand
argument_list|>
name|commands
parameter_list|)
block|{
name|reject
argument_list|(
name|commands
argument_list|,
literal|"invalid push cert"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

