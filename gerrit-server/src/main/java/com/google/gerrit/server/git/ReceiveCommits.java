begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|FooterConstants
operator|.
name|CHANGE_ID
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|REFS_CHANGES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|HashtagsUtil
operator|.
name|cleanupHashtag
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MultiProgressMonitor
operator|.
name|UNKNOWN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MailUtil
operator|.
name|getRecipientsFromFooters
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MailUtil
operator|.
name|getRecipientsFromReviewers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|R_HEADS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefDatabase
operator|.
name|ALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
operator|.
name|NOT_ATTEMPTED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
operator|.
name|OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
operator|.
name|REJECTED_MISSING_OBJECT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
operator|.
name|REJECTED_NONFASTFORWARD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
operator|.
name|REJECTED_OTHER_REASON
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CheckedFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|ChangeHookRunner
operator|.
name|HookResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|ChangeHooks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Capable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicMap
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|SubmoduleSubscription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalCopier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountResolver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeInserter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeKind
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeKindCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangesCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|RevisionResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|Submit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|PluginConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ProjectConfigEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|ChangeEdit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|ChangeEditUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|CommitReceivedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MultiProgressMonitor
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidationMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|ChangeIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MailUtil
operator|.
name|MailRecipients
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MergedSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|ReplacePatchSetSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|SshInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|LabelVote
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|MagicBranch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestScopePropagator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|util
operator|.
name|cli
operator|.
name|CmdLineParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|AtomicUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BatchRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|filter
operator|.
name|RevFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|AdvertiseRefsHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|AdvertiseRefsHookChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|BaseReceivePack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceivePack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RefFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ServiceMayNotContinueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|UploadPack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|CmdLineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/** Receives change upload using the Git receive-pack protocol. */
end_comment

begin_class
DECL|class|ReceiveCommits
specifier|public
class|class
name|ReceiveCommits
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReceiveCommits
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NEW_PATCHSET
specifier|public
specifier|static
specifier|final
name|Pattern
name|NEW_PATCHSET
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^"
operator|+
name|REFS_CHANGES
operator|+
literal|"(?:[0-9][0-9]/)?([1-9][0-9]*)(?:/new)?$"
argument_list|)
decl_stmt|;
DECL|field|COMMAND_REJECTION_MESSAGE_FOOTER
specifier|private
specifier|static
specifier|final
name|String
name|COMMAND_REJECTION_MESSAGE_FOOTER
init|=
literal|"Please read the documentation and contact an administrator\n"
operator|+
literal|"if you feel the configuration is incorrect"
decl_stmt|;
DECL|enum|Error
specifier|private
enum|enum
name|Error
block|{
DECL|enumConstant|CONFIG_UPDATE
name|CONFIG_UPDATE
argument_list|(
literal|"You are not allowed to perform this operation.\n"
operator|+
literal|"Configuration changes can only be pushed by project owners\n"
operator|+
literal|"who also have 'Push' rights on "
operator|+
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
block|,
DECL|enumConstant|UPDATE
name|UPDATE
argument_list|(
literal|"You are not allowed to perform this operation.\n"
operator|+
literal|"To push into this reference you need 'Push' rights."
argument_list|)
block|,
DECL|enumConstant|DELETE
name|DELETE
argument_list|(
literal|"You need 'Push' rights with the 'Force Push'\n"
operator|+
literal|"flag set to delete references."
argument_list|)
block|,
DECL|enumConstant|DELETE_CHANGES
name|DELETE_CHANGES
argument_list|(
literal|"Cannot delete from '"
operator|+
name|REFS_CHANGES
operator|+
literal|"'"
argument_list|)
block|,
DECL|enumConstant|CODE_REVIEW
name|CODE_REVIEW
argument_list|(
literal|"You need 'Push' rights to upload code review requests.\n"
operator|+
literal|"Verify that you are pushing to the right branch."
argument_list|)
block|;
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
DECL|method|Error (String value)
name|Error
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|get ()
specifier|public
name|String
name|get
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
DECL|interface|Factory
interface|interface
name|Factory
block|{
DECL|method|create (ProjectControl projectControl, Repository repository)
name|ReceiveCommits
name|create
parameter_list|(
name|ProjectControl
name|projectControl
parameter_list|,
name|Repository
name|repository
parameter_list|)
function_decl|;
block|}
DECL|interface|MessageSender
specifier|public
interface|interface
name|MessageSender
block|{
DECL|method|sendMessage (String what)
name|void
name|sendMessage
parameter_list|(
name|String
name|what
parameter_list|)
function_decl|;
DECL|method|sendError (String what)
name|void
name|sendError
parameter_list|(
name|String
name|what
parameter_list|)
function_decl|;
DECL|method|sendBytes (byte[] what)
name|void
name|sendBytes
parameter_list|(
name|byte
index|[]
name|what
parameter_list|)
function_decl|;
DECL|method|sendBytes (byte[] what, int off, int len)
name|void
name|sendBytes
parameter_list|(
name|byte
index|[]
name|what
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
DECL|method|flush ()
name|void
name|flush
parameter_list|()
function_decl|;
block|}
DECL|class|ReceivePackMessageSender
specifier|private
class|class
name|ReceivePackMessageSender
implements|implements
name|MessageSender
block|{
annotation|@
name|Override
DECL|method|sendMessage (String what)
specifier|public
name|void
name|sendMessage
parameter_list|(
name|String
name|what
parameter_list|)
block|{
name|rp
operator|.
name|sendMessage
argument_list|(
name|what
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendError (String what)
specifier|public
name|void
name|sendError
parameter_list|(
name|String
name|what
parameter_list|)
block|{
name|rp
operator|.
name|sendError
argument_list|(
name|what
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendBytes (byte[] what)
specifier|public
name|void
name|sendBytes
parameter_list|(
name|byte
index|[]
name|what
parameter_list|)
block|{
name|sendBytes
argument_list|(
name|what
argument_list|,
literal|0
argument_list|,
name|what
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendBytes (byte[] what, int off, int len)
specifier|public
name|void
name|sendBytes
parameter_list|(
name|byte
index|[]
name|what
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
try|try
block|{
name|rp
operator|.
name|getMessageOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|what
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore write failures (matching JGit behavior).
block|}
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{
try|try
block|{
name|rp
operator|.
name|getMessageOutputStream
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore write failures (matching JGit behavior).
block|}
block|}
block|}
DECL|field|INSERT_EXCEPTION
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|Exception
argument_list|,
name|InsertException
argument_list|>
name|INSERT_EXCEPTION
init|=
operator|new
name|Function
argument_list|<
name|Exception
argument_list|,
name|InsertException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InsertException
name|apply
parameter_list|(
name|Exception
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|instanceof
name|OrmException
condition|)
block|{
return|return
operator|new
name|InsertException
argument_list|(
literal|"ORM error"
argument_list|,
name|input
argument_list|)
return|;
block|}
if|if
condition|(
name|input
operator|instanceof
name|IOException
condition|)
block|{
return|return
operator|new
name|InsertException
argument_list|(
literal|"IO error"
argument_list|,
name|input
argument_list|)
return|;
block|}
return|return
operator|new
name|InsertException
argument_list|(
literal|"Error inserting change/patchset"
argument_list|,
name|input
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|reviewersFromCommandLine
specifier|private
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewersFromCommandLine
init|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|()
decl_stmt|;
DECL|field|ccFromCommandLine
specifier|private
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|ccFromCommandLine
init|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|()
decl_stmt|;
DECL|field|currentUser
specifier|private
specifier|final
name|IdentifiedUser
name|currentUser
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|ReviewDb
name|db
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|changeDataFactory
specifier|private
specifier|final
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
decl_stmt|;
DECL|field|updateFactory
specifier|private
specifier|final
name|ChangeUpdate
operator|.
name|Factory
name|updateFactory
decl_stmt|;
DECL|field|schemaFactory
specifier|private
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
decl_stmt|;
DECL|field|accountResolver
specifier|private
specifier|final
name|AccountResolver
name|accountResolver
decl_stmt|;
DECL|field|optionParserFactory
specifier|private
specifier|final
name|CmdLineParser
operator|.
name|Factory
name|optionParserFactory
decl_stmt|;
DECL|field|mergedSenderFactory
specifier|private
specifier|final
name|MergedSender
operator|.
name|Factory
name|mergedSenderFactory
decl_stmt|;
DECL|field|replacePatchSetFactory
specifier|private
specifier|final
name|ReplacePatchSetSender
operator|.
name|Factory
name|replacePatchSetFactory
decl_stmt|;
DECL|field|gitRefUpdated
specifier|private
specifier|final
name|GitReferenceUpdated
name|gitRefUpdated
decl_stmt|;
DECL|field|patchSetInfoFactory
specifier|private
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
decl_stmt|;
DECL|field|hooks
specifier|private
specifier|final
name|ChangeHooks
name|hooks
decl_stmt|;
DECL|field|approvalsUtil
specifier|private
specifier|final
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
DECL|field|approvalCopier
specifier|private
specifier|final
name|ApprovalCopier
name|approvalCopier
decl_stmt|;
DECL|field|cmUtil
specifier|private
specifier|final
name|ChangeMessagesUtil
name|cmUtil
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|canonicalWebUrl
specifier|private
specifier|final
name|String
name|canonicalWebUrl
decl_stmt|;
DECL|field|commitValidatorsFactory
specifier|private
specifier|final
name|CommitValidators
operator|.
name|Factory
name|commitValidatorsFactory
decl_stmt|;
DECL|field|tagCache
specifier|private
specifier|final
name|TagCache
name|tagCache
decl_stmt|;
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|changes
specifier|private
specifier|final
name|ChangesCollection
name|changes
decl_stmt|;
DECL|field|changeInserterFactory
specifier|private
specifier|final
name|ChangeInserter
operator|.
name|Factory
name|changeInserterFactory
decl_stmt|;
DECL|field|workQueue
specifier|private
specifier|final
name|WorkQueue
name|workQueue
decl_stmt|;
DECL|field|changeUpdateExector
specifier|private
specifier|final
name|ListeningExecutorService
name|changeUpdateExector
decl_stmt|;
DECL|field|requestScopePropagator
specifier|private
specifier|final
name|RequestScopePropagator
name|requestScopePropagator
decl_stmt|;
DECL|field|indexer
specifier|private
specifier|final
name|ChangeIndexer
name|indexer
decl_stmt|;
DECL|field|sshInfo
specifier|private
specifier|final
name|SshInfo
name|sshInfo
decl_stmt|;
DECL|field|allProjectsName
specifier|private
specifier|final
name|AllProjectsName
name|allProjectsName
decl_stmt|;
DECL|field|receiveConfig
specifier|private
specifier|final
name|ReceiveConfig
name|receiveConfig
decl_stmt|;
DECL|field|changeKindCache
specifier|private
specifier|final
name|ChangeKindCache
name|changeKindCache
decl_stmt|;
DECL|field|projectControl
specifier|private
specifier|final
name|ProjectControl
name|projectControl
decl_stmt|;
DECL|field|project
specifier|private
specifier|final
name|Project
name|project
decl_stmt|;
DECL|field|labelTypes
specifier|private
specifier|final
name|LabelTypes
name|labelTypes
decl_stmt|;
DECL|field|repo
specifier|private
specifier|final
name|Repository
name|repo
decl_stmt|;
DECL|field|rp
specifier|private
specifier|final
name|ReceivePack
name|rp
decl_stmt|;
DECL|field|rejectCommits
specifier|private
specifier|final
name|NoteMap
name|rejectCommits
decl_stmt|;
DECL|field|magicBranch
specifier|private
name|MagicBranchInput
name|magicBranch
decl_stmt|;
DECL|field|newChangeForAllNotInTarget
specifier|private
name|boolean
name|newChangeForAllNotInTarget
decl_stmt|;
DECL|field|newChanges
specifier|private
name|List
argument_list|<
name|CreateRequest
argument_list|>
name|newChanges
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|replaceByChange
specifier|private
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ReplaceRequest
argument_list|>
name|replaceByChange
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|validCommits
specifier|private
specifier|final
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|validCommits
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|refsByChange
specifier|private
name|ListMultimap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|Ref
argument_list|>
name|refsByChange
decl_stmt|;
DECL|field|refsById
specifier|private
name|SetMultimap
argument_list|<
name|ObjectId
argument_list|,
name|Ref
argument_list|>
name|refsById
decl_stmt|;
DECL|field|allRefs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|allRefs
decl_stmt|;
DECL|field|subOpFactory
specifier|private
specifier|final
name|SubmoduleOp
operator|.
name|Factory
name|subOpFactory
decl_stmt|;
DECL|field|submitProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|Submit
argument_list|>
name|submitProvider
decl_stmt|;
DECL|field|mergeQueue
specifier|private
specifier|final
name|MergeQueue
name|mergeQueue
decl_stmt|;
DECL|field|pluginConfigEntries
specifier|private
specifier|final
name|DynamicMap
argument_list|<
name|ProjectConfigEntry
argument_list|>
name|pluginConfigEntries
decl_stmt|;
DECL|field|notesMigration
specifier|private
specifier|final
name|NotesMigration
name|notesMigration
decl_stmt|;
DECL|field|editUtil
specifier|private
specifier|final
name|ChangeEditUtil
name|editUtil
decl_stmt|;
DECL|field|messages
specifier|private
specifier|final
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|errors
specifier|private
name|ListMultimap
argument_list|<
name|Error
argument_list|,
name|String
argument_list|>
name|errors
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|field|newProgress
specifier|private
name|Task
name|newProgress
decl_stmt|;
DECL|field|replaceProgress
specifier|private
name|Task
name|replaceProgress
decl_stmt|;
DECL|field|closeProgress
specifier|private
name|Task
name|closeProgress
decl_stmt|;
DECL|field|commandProgress
specifier|private
name|Task
name|commandProgress
decl_stmt|;
DECL|field|messageSender
specifier|private
name|MessageSender
name|messageSender
decl_stmt|;
DECL|field|batch
specifier|private
name|BatchRefUpdate
name|batch
decl_stmt|;
annotation|@
name|Inject
DECL|method|ReceiveCommits (final ReviewDb db, final Provider<InternalChangeQuery> queryProvider, final SchemaFactory<ReviewDb> schemaFactory, final ChangeData.Factory changeDataFactory, final ChangeUpdate.Factory updateFactory, final AccountResolver accountResolver, final CmdLineParser.Factory optionParserFactory, final MergedSender.Factory mergedSenderFactory, final ReplacePatchSetSender.Factory replacePatchSetFactory, final GitReferenceUpdated gitRefUpdated, final PatchSetInfoFactory patchSetInfoFactory, final ChangeHooks hooks, final ApprovalsUtil approvalsUtil, final ApprovalCopier approvalCopier, final ChangeMessagesUtil cmUtil, final ProjectCache projectCache, final GitRepositoryManager repoManager, final TagCache tagCache, final AccountCache accountCache, final ChangeCache changeCache, final ChangesCollection changes, final ChangeInserter.Factory changeInserterFactory, final CommitValidators.Factory commitValidatorsFactory, @CanonicalWebUrl final String canonicalWebUrl, final WorkQueue workQueue, @ChangeUpdateExecutor ListeningExecutorService changeUpdateExector, final RequestScopePropagator requestScopePropagator, final ChangeIndexer indexer, final SshInfo sshInfo, final AllProjectsName allProjectsName, ReceiveConfig config, @Assisted final ProjectControl projectControl, @Assisted final Repository repo, final SubmoduleOp.Factory subOpFactory, final Provider<Submit> submitProvider, final MergeQueue mergeQueue, final ChangeKindCache changeKindCache, final DynamicMap<ProjectConfigEntry> pluginConfigEntries, final NotesMigration notesMigration, final ChangeEditUtil editUtil)
name|ReceiveCommits
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
parameter_list|,
specifier|final
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
parameter_list|,
specifier|final
name|ChangeUpdate
operator|.
name|Factory
name|updateFactory
parameter_list|,
specifier|final
name|AccountResolver
name|accountResolver
parameter_list|,
specifier|final
name|CmdLineParser
operator|.
name|Factory
name|optionParserFactory
parameter_list|,
specifier|final
name|MergedSender
operator|.
name|Factory
name|mergedSenderFactory
parameter_list|,
specifier|final
name|ReplacePatchSetSender
operator|.
name|Factory
name|replacePatchSetFactory
parameter_list|,
specifier|final
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|,
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
parameter_list|,
specifier|final
name|ChangeHooks
name|hooks
parameter_list|,
specifier|final
name|ApprovalsUtil
name|approvalsUtil
parameter_list|,
specifier|final
name|ApprovalCopier
name|approvalCopier
parameter_list|,
specifier|final
name|ChangeMessagesUtil
name|cmUtil
parameter_list|,
specifier|final
name|ProjectCache
name|projectCache
parameter_list|,
specifier|final
name|GitRepositoryManager
name|repoManager
parameter_list|,
specifier|final
name|TagCache
name|tagCache
parameter_list|,
specifier|final
name|AccountCache
name|accountCache
parameter_list|,
specifier|final
name|ChangeCache
name|changeCache
parameter_list|,
specifier|final
name|ChangesCollection
name|changes
parameter_list|,
specifier|final
name|ChangeInserter
operator|.
name|Factory
name|changeInserterFactory
parameter_list|,
specifier|final
name|CommitValidators
operator|.
name|Factory
name|commitValidatorsFactory
parameter_list|,
annotation|@
name|CanonicalWebUrl
specifier|final
name|String
name|canonicalWebUrl
parameter_list|,
specifier|final
name|WorkQueue
name|workQueue
parameter_list|,
annotation|@
name|ChangeUpdateExecutor
name|ListeningExecutorService
name|changeUpdateExector
parameter_list|,
specifier|final
name|RequestScopePropagator
name|requestScopePropagator
parameter_list|,
specifier|final
name|ChangeIndexer
name|indexer
parameter_list|,
specifier|final
name|SshInfo
name|sshInfo
parameter_list|,
specifier|final
name|AllProjectsName
name|allProjectsName
parameter_list|,
name|ReceiveConfig
name|config
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|ProjectControl
name|projectControl
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|Repository
name|repo
parameter_list|,
specifier|final
name|SubmoduleOp
operator|.
name|Factory
name|subOpFactory
parameter_list|,
specifier|final
name|Provider
argument_list|<
name|Submit
argument_list|>
name|submitProvider
parameter_list|,
specifier|final
name|MergeQueue
name|mergeQueue
parameter_list|,
specifier|final
name|ChangeKindCache
name|changeKindCache
parameter_list|,
specifier|final
name|DynamicMap
argument_list|<
name|ProjectConfigEntry
argument_list|>
name|pluginConfigEntries
parameter_list|,
specifier|final
name|NotesMigration
name|notesMigration
parameter_list|,
specifier|final
name|ChangeEditUtil
name|editUtil
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|currentUser
operator|=
operator|(
name|IdentifiedUser
operator|)
name|projectControl
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|changeDataFactory
operator|=
name|changeDataFactory
expr_stmt|;
name|this
operator|.
name|updateFactory
operator|=
name|updateFactory
expr_stmt|;
name|this
operator|.
name|schemaFactory
operator|=
name|schemaFactory
expr_stmt|;
name|this
operator|.
name|accountResolver
operator|=
name|accountResolver
expr_stmt|;
name|this
operator|.
name|optionParserFactory
operator|=
name|optionParserFactory
expr_stmt|;
name|this
operator|.
name|mergedSenderFactory
operator|=
name|mergedSenderFactory
expr_stmt|;
name|this
operator|.
name|replacePatchSetFactory
operator|=
name|replacePatchSetFactory
expr_stmt|;
name|this
operator|.
name|gitRefUpdated
operator|=
name|gitRefUpdated
expr_stmt|;
name|this
operator|.
name|patchSetInfoFactory
operator|=
name|patchSetInfoFactory
expr_stmt|;
name|this
operator|.
name|hooks
operator|=
name|hooks
expr_stmt|;
name|this
operator|.
name|approvalsUtil
operator|=
name|approvalsUtil
expr_stmt|;
name|this
operator|.
name|approvalCopier
operator|=
name|approvalCopier
expr_stmt|;
name|this
operator|.
name|cmUtil
operator|=
name|cmUtil
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|canonicalWebUrl
operator|=
name|canonicalWebUrl
expr_stmt|;
name|this
operator|.
name|tagCache
operator|=
name|tagCache
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|changes
operator|=
name|changes
expr_stmt|;
name|this
operator|.
name|changeInserterFactory
operator|=
name|changeInserterFactory
expr_stmt|;
name|this
operator|.
name|commitValidatorsFactory
operator|=
name|commitValidatorsFactory
expr_stmt|;
name|this
operator|.
name|workQueue
operator|=
name|workQueue
expr_stmt|;
name|this
operator|.
name|changeUpdateExector
operator|=
name|changeUpdateExector
expr_stmt|;
name|this
operator|.
name|requestScopePropagator
operator|=
name|requestScopePropagator
expr_stmt|;
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
name|this
operator|.
name|sshInfo
operator|=
name|sshInfo
expr_stmt|;
name|this
operator|.
name|allProjectsName
operator|=
name|allProjectsName
expr_stmt|;
name|this
operator|.
name|receiveConfig
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|changeKindCache
operator|=
name|changeKindCache
expr_stmt|;
name|this
operator|.
name|projectControl
operator|=
name|projectControl
expr_stmt|;
name|this
operator|.
name|labelTypes
operator|=
name|projectControl
operator|.
name|getLabelTypes
argument_list|()
expr_stmt|;
name|this
operator|.
name|project
operator|=
name|projectControl
operator|.
name|getProject
argument_list|()
expr_stmt|;
name|this
operator|.
name|repo
operator|=
name|repo
expr_stmt|;
name|this
operator|.
name|rp
operator|=
operator|new
name|ReceivePack
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|this
operator|.
name|rejectCommits
operator|=
name|BanCommit
operator|.
name|loadRejectCommitsMap
argument_list|(
name|repo
argument_list|,
name|rp
operator|.
name|getRevWalk
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|subOpFactory
operator|=
name|subOpFactory
expr_stmt|;
name|this
operator|.
name|submitProvider
operator|=
name|submitProvider
expr_stmt|;
name|this
operator|.
name|mergeQueue
operator|=
name|mergeQueue
expr_stmt|;
name|this
operator|.
name|pluginConfigEntries
operator|=
name|pluginConfigEntries
expr_stmt|;
name|this
operator|.
name|notesMigration
operator|=
name|notesMigration
expr_stmt|;
name|this
operator|.
name|editUtil
operator|=
name|editUtil
expr_stmt|;
name|this
operator|.
name|messageSender
operator|=
operator|new
name|ReceivePackMessageSender
argument_list|()
expr_stmt|;
name|ProjectState
name|ps
init|=
name|projectControl
operator|.
name|getProjectState
argument_list|()
decl_stmt|;
name|this
operator|.
name|newChangeForAllNotInTarget
operator|=
name|ps
operator|.
name|isCreateNewChangeForAllNotInTarget
argument_list|()
expr_stmt|;
name|rp
operator|.
name|setAllowCreates
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setAllowDeletes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setAllowNonFastForwards
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setCheckReceivedObjects
argument_list|(
name|ps
operator|.
name|getConfig
argument_list|()
operator|.
name|getCheckReceivedObjects
argument_list|()
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setRefFilter
argument_list|(
operator|new
name|RefFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|filter
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|refs
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|filteredRefs
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|refs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|e
range|:
name|refs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
name|REFS_CHANGES
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|startsWith
argument_list|(
name|RefNames
operator|.
name|REFS_CACHE_AUTOMERGE
argument_list|)
condition|)
block|{
name|filteredRefs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filteredRefs
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|projectControl
operator|.
name|allRefsAreVisible
argument_list|()
condition|)
block|{
name|rp
operator|.
name|setCheckReferencedObjectsAreReachable
argument_list|(
name|config
operator|.
name|checkReferencedObjectsAreReachable
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setAdvertiseRefsHook
argument_list|(
operator|new
name|VisibleRefFilter
argument_list|(
name|tagCache
argument_list|,
name|changeCache
argument_list|,
name|repo
argument_list|,
name|projectControl
argument_list|,
name|db
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|AdvertiseRefsHook
argument_list|>
name|advHooks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|advHooks
operator|.
name|add
argument_list|(
operator|new
name|AdvertiseRefsHook
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|advertiseRefs
parameter_list|(
name|BaseReceivePack
name|rp
parameter_list|)
throws|throws
name|ServiceMayNotContinueException
block|{
name|allRefs
operator|=
name|rp
operator|.
name|getAdvertisedRefs
argument_list|()
expr_stmt|;
if|if
condition|(
name|allRefs
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|allRefs
operator|=
name|rp
operator|.
name|getRepository
argument_list|()
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceMayNotContinueException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ServiceMayNotContinueException
name|ex
init|=
operator|new
name|ServiceMayNotContinueException
argument_list|()
decl_stmt|;
name|ex
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
name|rp
operator|.
name|setAdvertisedRefs
argument_list|(
name|allRefs
argument_list|,
name|rp
operator|.
name|getAdvertisedObjects
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|advertiseRefs
parameter_list|(
name|UploadPack
name|uploadPack
parameter_list|)
block|{       }
block|}
argument_list|)
expr_stmt|;
name|advHooks
operator|.
name|add
argument_list|(
name|rp
operator|.
name|getAdvertiseRefsHook
argument_list|()
argument_list|)
expr_stmt|;
name|advHooks
operator|.
name|add
argument_list|(
operator|new
name|ReceiveCommitsAdvertiseRefsHook
argument_list|(
name|db
argument_list|,
name|queryProvider
argument_list|,
name|projectControl
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setAdvertiseRefsHook
argument_list|(
name|AdvertiseRefsHookChain
operator|.
name|newChain
argument_list|(
name|advHooks
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Add reviewers for new (or updated) changes. */
DECL|method|addReviewers (Collection<Account.Id> who)
specifier|public
name|void
name|addReviewers
parameter_list|(
name|Collection
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|who
parameter_list|)
block|{
name|reviewersFromCommandLine
operator|.
name|addAll
argument_list|(
name|who
argument_list|)
expr_stmt|;
block|}
comment|/** Add reviewers for new (or updated) changes. */
DECL|method|addExtraCC (Collection<Account.Id> who)
specifier|public
name|void
name|addExtraCC
parameter_list|(
name|Collection
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|who
parameter_list|)
block|{
name|ccFromCommandLine
operator|.
name|addAll
argument_list|(
name|who
argument_list|)
expr_stmt|;
block|}
comment|/** Set a message sender for this operation. */
DECL|method|setMessageSender (final MessageSender ms)
specifier|public
name|void
name|setMessageSender
parameter_list|(
specifier|final
name|MessageSender
name|ms
parameter_list|)
block|{
name|messageSender
operator|=
name|ms
operator|!=
literal|null
condition|?
name|ms
else|:
operator|new
name|ReceivePackMessageSender
argument_list|()
expr_stmt|;
block|}
DECL|method|getMessageSender ()
name|MessageSender
name|getMessageSender
parameter_list|()
block|{
if|if
condition|(
name|messageSender
operator|==
literal|null
condition|)
block|{
name|setMessageSender
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|messageSender
return|;
block|}
DECL|method|getProject ()
name|Project
name|getProject
parameter_list|()
block|{
return|return
name|project
return|;
block|}
comment|/** @return the ReceivePack instance to speak the native Git protocol. */
DECL|method|getReceivePack ()
specifier|public
name|ReceivePack
name|getReceivePack
parameter_list|()
block|{
return|return
name|rp
return|;
block|}
comment|/** Determine if the user can upload commits. */
DECL|method|canUpload ()
specifier|public
name|Capable
name|canUpload
parameter_list|()
block|{
name|Capable
name|result
init|=
name|projectControl
operator|.
name|canPushToAtLeastOneRef
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|Capable
operator|.
name|OK
condition|)
block|{
return|return
name|result
return|;
block|}
if|if
condition|(
name|receiveConfig
operator|.
name|checkMagicRefs
condition|)
block|{
name|result
operator|=
name|MagicBranch
operator|.
name|checkMagicBranchRefs
argument_list|(
name|repo
argument_list|,
name|project
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|addMessage (String message)
specifier|private
name|void
name|addMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|messages
operator|.
name|add
argument_list|(
operator|new
name|CommitValidationMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addError (String error)
name|void
name|addError
parameter_list|(
name|String
name|error
parameter_list|)
block|{
name|messages
operator|.
name|add
argument_list|(
operator|new
name|CommitValidationMessage
argument_list|(
name|error
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sendMessages ()
name|void
name|sendMessages
parameter_list|()
block|{
for|for
control|(
name|CommitValidationMessage
name|m
range|:
name|messages
control|)
block|{
if|if
condition|(
name|m
operator|.
name|isError
argument_list|()
condition|)
block|{
name|messageSender
operator|.
name|sendError
argument_list|(
name|m
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageSender
operator|.
name|sendMessage
argument_list|(
name|m
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|processCommands (final Collection<ReceiveCommand> commands, final MultiProgressMonitor progress)
name|void
name|processCommands
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|ReceiveCommand
argument_list|>
name|commands
parameter_list|,
specifier|final
name|MultiProgressMonitor
name|progress
parameter_list|)
block|{
name|newProgress
operator|=
name|progress
operator|.
name|beginSubTask
argument_list|(
literal|"new"
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
name|replaceProgress
operator|=
name|progress
operator|.
name|beginSubTask
argument_list|(
literal|"updated"
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
name|closeProgress
operator|=
name|progress
operator|.
name|beginSubTask
argument_list|(
literal|"closed"
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
name|commandProgress
operator|=
name|progress
operator|.
name|beginSubTask
argument_list|(
literal|"refs"
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
name|batch
operator|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|newBatchUpdate
argument_list|()
expr_stmt|;
name|batch
operator|.
name|setRefLogIdent
argument_list|(
name|rp
operator|.
name|getRefLogIdent
argument_list|()
argument_list|)
expr_stmt|;
name|batch
operator|.
name|setRefLogMessage
argument_list|(
literal|"push"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|parseCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|cmd
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|selectNewAndReplacedChangesFromMagicBranch
argument_list|()
expr_stmt|;
block|}
name|preparePatchSetsForReplace
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|batch
operator|.
name|getCommands
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|batch
operator|.
name|isAllowNonFastForwards
argument_list|()
operator|&&
name|magicBranch
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|edit
condition|)
block|{
name|batch
operator|.
name|setAllowNonFastForwards
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|execute
argument_list|(
name|rp
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|commandProgress
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ReceiveCommand
name|cmd
range|:
name|batch
operator|.
name|getCommands
argument_list|()
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_OTHER_REASON
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
block|}
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to store %d refs in %s"
argument_list|,
name|cnt
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
name|insertChangesAndPatchSets
argument_list|()
expr_stmt|;
name|newProgress
operator|.
name|end
argument_list|()
expr_stmt|;
name|replaceProgress
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Error
name|error
range|:
name|errors
operator|.
name|keySet
argument_list|()
control|)
block|{
name|rp
operator|.
name|sendMessage
argument_list|(
name|buildError
argument_list|(
name|error
argument_list|,
name|errors
operator|.
name|get
argument_list|(
name|error
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rp
operator|.
name|sendMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"User: %s"
argument_list|,
name|displayName
argument_list|(
name|currentUser
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rp
operator|.
name|sendMessage
argument_list|(
name|COMMAND_REJECTION_MESSAGE_FOOTER
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|ReceiveCommand
name|c
range|:
name|commands
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getResult
argument_list|()
operator|==
name|OK
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|getType
argument_list|()
operator|==
name|ReceiveCommand
operator|.
name|Type
operator|.
name|UPDATE
condition|)
block|{
comment|// aka fast-forward
name|tagCache
operator|.
name|updateFastForward
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|c
operator|.
name|getRefName
argument_list|()
argument_list|,
name|c
operator|.
name|getOldId
argument_list|()
argument_list|,
name|c
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isHead
argument_list|(
name|c
argument_list|)
operator|||
name|isConfig
argument_list|(
name|c
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|c
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|UPDATE
case|:
case|case
name|UPDATE_NONFASTFORWARD
case|:
name|autoCloseChanges
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|ResultSet
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|submoduleSubscriptions
init|=
literal|null
decl_stmt|;
name|Branch
operator|.
name|NameKey
name|projRef
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|c
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|submoduleSubscriptions
operator|=
name|db
operator|.
name|submoduleSubscriptions
argument_list|()
operator|.
name|bySuperProject
argument_list|(
name|projRef
argument_list|)
expr_stmt|;
name|db
operator|.
name|submoduleSubscriptions
argument_list|()
operator|.
name|delete
argument_list|(
name|submoduleSubscriptions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot delete submodule subscription(s) of branch "
operator|+
name|projRef
operator|+
literal|": "
operator|+
name|submoduleSubscriptions
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|isConfig
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|projectCache
operator|.
name|evict
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|ProjectState
name|ps
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
decl_stmt|;
name|repoManager
operator|.
name|setProjectDescription
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
comment|//
name|ps
operator|.
name|getProject
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|MagicBranch
operator|.
name|isMagicBranch
argument_list|(
name|c
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
comment|// We only fire gitRefUpdated for direct refs updates.
comment|// Events for change refs are fired when they are created.
comment|//
name|gitRefUpdated
operator|.
name|fire
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|c
operator|.
name|getRefName
argument_list|()
argument_list|,
name|c
operator|.
name|getOldId
argument_list|()
argument_list|,
name|c
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
name|hooks
operator|.
name|doRefUpdatedHook
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|c
operator|.
name|getRefName
argument_list|()
argument_list|)
argument_list|,
name|c
operator|.
name|getOldId
argument_list|()
argument_list|,
name|c
operator|.
name|getNewId
argument_list|()
argument_list|,
name|currentUser
operator|.
name|getAccount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|closeProgress
operator|.
name|end
argument_list|()
expr_stmt|;
name|commandProgress
operator|.
name|end
argument_list|()
expr_stmt|;
name|progress
operator|.
name|end
argument_list|()
expr_stmt|;
name|reportMessages
argument_list|()
expr_stmt|;
block|}
DECL|method|reportMessages ()
specifier|private
name|void
name|reportMessages
parameter_list|()
block|{
name|Iterable
argument_list|<
name|CreateRequest
argument_list|>
name|created
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|newChanges
argument_list|,
operator|new
name|Predicate
argument_list|<
name|CreateRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|CreateRequest
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|created
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|created
argument_list|)
condition|)
block|{
name|addMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
literal|"New Changes:"
argument_list|)
expr_stmt|;
for|for
control|(
name|CreateRequest
name|c
range|:
name|created
control|)
block|{
name|addMessage
argument_list|(
name|formatChangeUrl
argument_list|(
name|canonicalWebUrl
argument_list|,
name|c
operator|.
name|change
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ReplaceRequest
argument_list|>
name|updated
init|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|replaceByChange
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|Predicate
argument_list|<
name|ReplaceRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|ReplaceRequest
name|input
parameter_list|)
block|{
return|return
operator|!
name|input
operator|.
name|skip
operator|&&
name|input
operator|.
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|==
name|OK
return|;
block|}
block|}
argument_list|)
operator|.
name|toSortedList
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|onResultOf
argument_list|(
operator|new
name|Function
argument_list|<
name|ReplaceRequest
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|ReplaceRequest
name|in
parameter_list|)
block|{
return|return
name|in
operator|.
name|change
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|updated
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
literal|"Updated Changes:"
argument_list|)
expr_stmt|;
name|boolean
name|edit
init|=
name|magicBranch
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|edit
decl_stmt|;
for|for
control|(
name|ReplaceRequest
name|u
range|:
name|updated
control|)
block|{
name|addMessage
argument_list|(
name|formatChangeUrl
argument_list|(
name|canonicalWebUrl
argument_list|,
name|u
operator|.
name|change
argument_list|,
name|edit
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|formatChangeUrl (String url, Change change, boolean edit)
specifier|private
specifier|static
name|String
name|formatChangeUrl
parameter_list|(
name|String
name|url
parameter_list|,
name|Change
name|change
parameter_list|,
name|boolean
name|edit
parameter_list|)
block|{
name|StringBuilder
name|m
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
operator|.
name|append
argument_list|(
name|url
argument_list|)
operator|.
name|append
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|ChangeUtil
operator|.
name|cropSubject
argument_list|(
name|change
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|DRAFT
condition|)
block|{
name|m
operator|.
name|append
argument_list|(
literal|" [DRAFT]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|edit
condition|)
block|{
name|m
operator|.
name|append
argument_list|(
literal|" [EDIT]"
argument_list|)
expr_stmt|;
block|}
return|return
name|m
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|insertChangesAndPatchSets ()
specifier|private
name|void
name|insertChangesAndPatchSets
parameter_list|()
block|{
name|int
name|replaceCount
init|=
literal|0
decl_stmt|;
name|int
name|okToInsert
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ReplaceRequest
argument_list|>
name|e
range|:
name|replaceByChange
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ReplaceRequest
name|replace
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
name|replace
operator|.
name|inputCommand
operator|==
name|magicBranch
operator|.
name|cmd
condition|)
block|{
name|replaceCount
operator|++
expr_stmt|;
if|if
condition|(
name|replace
operator|.
name|cmd
operator|!=
literal|null
operator|&&
name|replace
operator|.
name|cmd
operator|.
name|getResult
argument_list|()
operator|==
name|OK
condition|)
block|{
name|okToInsert
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|replace
operator|.
name|cmd
operator|!=
literal|null
operator|&&
name|replace
operator|.
name|cmd
operator|.
name|getResult
argument_list|()
operator|==
name|OK
condition|)
block|{
try|try
block|{
if|if
condition|(
name|replace
operator|.
name|insertPatchSet
argument_list|()
operator|.
name|checkedGet
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|replace
operator|.
name|inputCommand
operator|.
name|setResult
argument_list|(
name|OK
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|reject
argument_list|(
name|replace
operator|.
name|inputCommand
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot add patch set to %d of %s"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InsertException
name|err
parameter_list|)
block|{
name|reject
argument_list|(
name|replace
operator|.
name|inputCommand
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot add patch set to %d of %s"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|replace
operator|.
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|reject
argument_list|(
name|replace
operator|.
name|inputCommand
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Replacement for project %s was not attempted"
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|magicBranch
operator|==
literal|null
operator|||
name|magicBranch
operator|.
name|cmd
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
comment|// refs/for/ or refs/drafts/ not used, or it already failed earlier.
comment|// No need to continue.
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|lastCreateChangeErrors
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|CreateRequest
name|create
range|:
name|newChanges
control|)
block|{
if|if
condition|(
name|create
operator|.
name|cmd
operator|.
name|getResult
argument_list|()
operator|==
name|OK
condition|)
block|{
name|okToInsert
operator|++
expr_stmt|;
block|}
else|else
block|{
name|String
name|createChangeResult
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s %s"
argument_list|,
name|create
operator|.
name|cmd
operator|.
name|getResult
argument_list|()
argument_list|,
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|create
operator|.
name|cmd
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|lastCreateChangeErrors
operator|.
name|add
argument_list|(
name|createChangeResult
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Command %s on %s:%s not completed: %s"
argument_list|,
name|create
operator|.
name|cmd
operator|.
name|getType
argument_list|()
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|,
name|create
operator|.
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|,
name|createChangeResult
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|okToInsert
operator|!=
name|replaceCount
operator|+
name|newChanges
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// One or more new references failed to create. Assume the
comment|// system isn't working correctly anymore and abort.
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"Unable to create changes: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|' '
argument_list|)
operator|.
name|join
argument_list|(
name|lastCreateChangeErrors
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Only %d of %d new change refs created in %s; aborting"
argument_list|,
name|okToInsert
argument_list|,
name|replaceCount
operator|+
name|newChanges
operator|.
name|size
argument_list|()
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|List
argument_list|<
name|CheckedFuture
argument_list|<
name|?
argument_list|,
name|InsertException
argument_list|>
argument_list|>
name|futures
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ReplaceRequest
name|replace
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
name|replace
operator|.
name|inputCommand
operator|==
name|magicBranch
operator|.
name|cmd
condition|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|replace
operator|.
name|insertPatchSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CreateRequest
name|create
range|:
name|newChanges
control|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|create
operator|.
name|insertChange
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CheckedFuture
argument_list|<
name|?
argument_list|,
name|InsertException
argument_list|>
name|f
range|:
name|futures
control|)
block|{
name|f
operator|.
name|checkedGet
argument_list|()
expr_stmt|;
block|}
name|magicBranch
operator|.
name|cmd
operator|.
name|setResult
argument_list|(
name|OK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InsertException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't insert change/patchset for "
operator|+
name|project
operator|.
name|getName
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't read commits for "
operator|+
name|project
operator|.
name|getName
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildError (Error error, List<String> branches)
specifier|private
name|String
name|buildError
parameter_list|(
name|Error
name|error
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|branches
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|branches
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Branch "
argument_list|)
operator|.
name|append
argument_list|(
name|branches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|":\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|error
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"Branches"
argument_list|)
expr_stmt|;
name|String
name|delim
init|=
literal|" "
decl_stmt|;
for|for
control|(
name|String
name|branch
range|:
name|branches
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|delim
argument_list|)
operator|.
name|append
argument_list|(
name|branch
argument_list|)
expr_stmt|;
name|delim
operator|=
literal|", "
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|append
argument_list|(
literal|":\n"
argument_list|)
operator|.
name|append
argument_list|(
name|error
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|displayName (IdentifiedUser user)
specifier|private
specifier|static
name|String
name|displayName
parameter_list|(
name|IdentifiedUser
name|user
parameter_list|)
block|{
name|String
name|displayName
init|=
name|user
operator|.
name|getUserName
argument_list|()
decl_stmt|;
if|if
condition|(
name|displayName
operator|==
literal|null
condition|)
block|{
name|displayName
operator|=
name|user
operator|.
name|getAccount
argument_list|()
operator|.
name|getPreferredEmail
argument_list|()
expr_stmt|;
block|}
return|return
name|displayName
return|;
block|}
DECL|method|parseCommands (final Collection<ReceiveCommand> commands)
specifier|private
name|void
name|parseCommands
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|ReceiveCommand
argument_list|>
name|commands
parameter_list|)
block|{
for|for
control|(
specifier|final
name|ReceiveCommand
name|cmd
range|:
name|commands
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
comment|// Already rejected by the core receive process.
comment|//
continue|continue;
block|}
if|if
condition|(
operator|!
name|Repository
operator|.
name|isValidRefName
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|||
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"//"
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"not valid ref"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|HookResult
name|result
init|=
name|hooks
operator|.
name|doRefUpdateHook
argument_list|(
name|project
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|,
name|currentUser
operator|.
name|getAccount
argument_list|()
argument_list|,
name|cmd
operator|.
name|getOldId
argument_list|()
argument_list|,
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|message
init|=
name|result
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getExitValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
name|message
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|rp
operator|.
name|sendMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|MagicBranch
operator|.
name|isMagicBranch
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
name|parseMagicBranch
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|Matcher
name|m
init|=
name|NEW_PATCHSET
operator|.
name|matcher
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// The referenced change must exist and must still be open.
comment|//
specifier|final
name|Change
operator|.
name|Id
name|changeId
init|=
name|Change
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|parseReplaceCommand
argument_list|(
name|cmd
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
continue|continue;
block|}
switch|switch
condition|(
name|cmd
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
name|parseCreate
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPDATE
case|:
name|parseUpdate
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|parseDelete
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPDATE_NONFASTFORWARD
case|:
name|parseRewind
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
break|break;
default|default:
name|reject
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isConfig
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|projectControl
operator|.
name|isOwner
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"not project owner"
argument_list|)
expr_stmt|;
continue|continue;
block|}
switch|switch
condition|(
name|cmd
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|UPDATE
case|:
case|case
name|UPDATE_NONFASTFORWARD
case|:
try|try
block|{
name|ProjectConfig
name|cfg
init|=
operator|new
name|ProjectConfig
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|load
argument_list|(
name|repo
argument_list|,
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cfg
operator|.
name|getValidationErrors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addError
argument_list|(
literal|"Invalid project configuration:"
argument_list|)
expr_stmt|;
for|for
control|(
name|ValidationError
name|err
range|:
name|cfg
operator|.
name|getValidationErrors
argument_list|()
control|)
block|{
name|addError
argument_list|(
literal|"  "
operator|+
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid project configuration"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"User "
operator|+
name|currentUser
operator|.
name|getUserName
argument_list|()
operator|+
literal|" tried to push invalid project configuration "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Project
operator|.
name|NameKey
name|newParent
init|=
name|cfg
operator|.
name|getProject
argument_list|()
operator|.
name|getParent
argument_list|(
name|allProjectsName
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|oldParent
init|=
name|project
operator|.
name|getParent
argument_list|(
name|allProjectsName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldParent
operator|==
literal|null
condition|)
block|{
comment|// update of the 'All-Projects' project
if|if
condition|(
name|newParent
operator|!=
literal|null
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid project configuration: root project cannot have parent"
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|oldParent
operator|.
name|equals
argument_list|(
name|newParent
argument_list|)
operator|&&
operator|!
name|currentUser
operator|.
name|getCapabilities
argument_list|()
operator|.
name|canAdministrateServer
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid project configuration: only Gerrit admin can set parent"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|projectCache
operator|.
name|get
argument_list|(
name|newParent
argument_list|)
operator|==
literal|null
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid project configuration: parent does not exist"
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|ProjectConfigEntry
argument_list|>
name|e
range|:
name|pluginConfigEntries
control|)
block|{
name|PluginConfig
name|pluginCfg
init|=
name|cfg
operator|.
name|getPluginConfig
argument_list|(
name|e
operator|.
name|getPluginName
argument_list|()
argument_list|)
decl_stmt|;
name|ProjectConfigEntry
name|configEntry
init|=
name|e
operator|.
name|getProvider
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|pluginCfg
operator|.
name|getString
argument_list|(
name|e
operator|.
name|getExportName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|oldValue
init|=
name|projectControl
operator|.
name|getProjectState
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getPluginConfig
argument_list|(
name|e
operator|.
name|getPluginName
argument_list|()
argument_list|)
operator|.
name|getString
argument_list|(
name|e
operator|.
name|getExportName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|configEntry
operator|.
name|getType
argument_list|()
operator|==
name|ProjectConfigEntry
operator|.
name|Type
operator|.
name|ARRAY
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|projectControl
operator|.
name|getProjectState
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getPluginConfig
argument_list|(
name|e
operator|.
name|getPluginName
argument_list|()
argument_list|)
operator|.
name|getStringList
argument_list|(
name|e
operator|.
name|getExportName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|oldValue
operator|=
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|join
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|value
operator|==
literal|null
condition|?
name|oldValue
operator|!=
literal|null
else|:
operator|!
name|value
operator|.
name|equals
argument_list|(
name|oldValue
argument_list|)
operator|)
operator|&&
operator|!
name|configEntry
operator|.
name|isEditable
argument_list|(
name|projectControl
operator|.
name|getProjectState
argument_list|()
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"invalid project configuration: Not allowed to set parameter"
operator|+
literal|" '%s' of plugin '%s' on project '%s'."
argument_list|,
name|e
operator|.
name|getExportName
argument_list|()
argument_list|,
name|e
operator|.
name|getPluginName
argument_list|()
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|ProjectConfigEntry
operator|.
name|Type
operator|.
name|LIST
operator|.
name|equals
argument_list|(
name|configEntry
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|value
operator|!=
literal|null
operator|&&
operator|!
name|configEntry
operator|.
name|getPermittedValues
argument_list|()
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"invalid project configuration: The value '%s' is "
operator|+
literal|"not permitted for parameter '%s' of plugin '%s'."
argument_list|,
name|value
argument_list|,
name|e
operator|.
name|getExportName
argument_list|()
argument_list|,
name|e
operator|.
name|getPluginName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid project configuration"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"User "
operator|+
name|currentUser
operator|.
name|getUserName
argument_list|()
operator|+
literal|" tried to push invalid project configuration "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|project
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
break|break;
case|case
name|DELETE
case|:
break|break;
default|default:
name|reject
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
block|}
DECL|method|parseCreate (final ReceiveCommand cmd)
specifier|private
name|void
name|parseCreate
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|RevObject
name|obj
decl_stmt|;
try|try
block|{
name|obj
operator|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseAny
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid object "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|cmd
operator|.
name|getRefName
argument_list|()
operator|+
literal|" creation"
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid object"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isHead
argument_list|(
name|cmd
argument_list|)
operator|&&
operator|!
name|isCommit
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
return|return;
block|}
name|RefControl
name|ctl
init|=
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctl
operator|.
name|canCreate
argument_list|(
name|db
argument_list|,
name|rp
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|obj
argument_list|)
condition|)
block|{
name|validateNewCommits
argument_list|(
name|ctl
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
name|batch
operator|.
name|addCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reject
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseUpdate (final ReceiveCommand cmd)
specifier|private
name|void
name|parseUpdate
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|RefControl
name|ctl
init|=
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctl
operator|.
name|canUpdate
argument_list|()
condition|)
block|{
if|if
condition|(
name|isHead
argument_list|(
name|cmd
argument_list|)
operator|&&
operator|!
name|isCommit
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
return|return;
block|}
name|validateNewCommits
argument_list|(
name|ctl
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
name|batch
operator|.
name|addCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|RefNames
operator|.
name|REFS_CONFIG
operator|.
name|equals
argument_list|(
name|ctl
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
name|errors
operator|.
name|put
argument_list|(
name|Error
operator|.
name|CONFIG_UPDATE
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|put
argument_list|(
name|Error
operator|.
name|UPDATE
argument_list|,
name|ctl
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reject
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isCommit (final ReceiveCommand cmd)
specifier|private
name|boolean
name|isCommit
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|RevObject
name|obj
decl_stmt|;
try|try
block|{
name|obj
operator|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseAny
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid object "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid object"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|RevCommit
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"not a commit"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|parseDelete (final ReceiveCommand cmd)
specifier|private
name|void
name|parseDelete
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|RefControl
name|ctl
init|=
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctl
operator|.
name|getRefName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|REFS_CHANGES
argument_list|)
condition|)
block|{
name|errors
operator|.
name|put
argument_list|(
name|Error
operator|.
name|DELETE_CHANGES
argument_list|,
name|ctl
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"cannot delete changes"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctl
operator|.
name|canDelete
argument_list|()
condition|)
block|{
name|batch
operator|.
name|addCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|RefNames
operator|.
name|REFS_CONFIG
operator|.
name|equals
argument_list|(
name|ctl
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"cannot delete project configuration"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|put
argument_list|(
name|Error
operator|.
name|DELETE
argument_list|,
name|ctl
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"cannot delete references"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseRewind (final ReceiveCommand cmd)
specifier|private
name|void
name|parseRewind
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|RevCommit
name|newObject
decl_stmt|;
try|try
block|{
name|newObject
operator|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|notCommit
parameter_list|)
block|{
name|newObject
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid object "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|cmd
operator|.
name|getRefName
argument_list|()
operator|+
literal|" forced update"
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid object"
argument_list|)
expr_stmt|;
return|return;
block|}
name|RefControl
name|ctl
init|=
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newObject
operator|!=
literal|null
condition|)
block|{
name|validateNewCommits
argument_list|(
name|ctl
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
return|return;
block|}
block|}
if|if
condition|(
name|ctl
operator|.
name|canForceUpdate
argument_list|()
condition|)
block|{
name|batch
operator|.
name|setAllowNonFastForwards
argument_list|(
literal|true
argument_list|)
operator|.
name|addCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_NONFASTFORWARD
argument_list|,
literal|" need '"
operator|+
name|PermissionRule
operator|.
name|FORCE_PUSH
operator|+
literal|"' privilege."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MagicBranchInput
specifier|private
specifier|static
class|class
name|MagicBranchInput
block|{
DECL|field|COMMAS
specifier|private
specifier|static
specifier|final
name|Splitter
name|COMMAS
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
decl_stmt|;
DECL|field|cmd
specifier|final
name|ReceiveCommand
name|cmd
decl_stmt|;
DECL|field|dest
name|Branch
operator|.
name|NameKey
name|dest
decl_stmt|;
DECL|field|ctl
name|RefControl
name|ctl
decl_stmt|;
DECL|field|reviewer
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewer
init|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|()
decl_stmt|;
DECL|field|cc
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|cc
init|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|()
decl_stmt|;
DECL|field|labels
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|labels
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|baseCommit
name|List
argument_list|<
name|RevCommit
argument_list|>
name|baseCommit
decl_stmt|;
DECL|field|labelTypes
name|LabelTypes
name|labelTypes
decl_stmt|;
DECL|field|clp
name|CmdLineParser
name|clp
decl_stmt|;
DECL|field|hashtags
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|notesMigration
name|NotesMigration
name|notesMigration
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--base"
argument_list|,
name|metaVar
operator|=
literal|"BASE"
argument_list|,
name|usage
operator|=
literal|"merge base of changes"
argument_list|)
DECL|field|base
name|List
argument_list|<
name|ObjectId
argument_list|>
name|base
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--topic"
argument_list|,
name|metaVar
operator|=
literal|"NAME"
argument_list|,
name|usage
operator|=
literal|"attach topic to changes"
argument_list|)
DECL|field|topic
name|String
name|topic
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--draft"
argument_list|,
name|usage
operator|=
literal|"mark new/updated changes as draft"
argument_list|)
DECL|field|draft
name|boolean
name|draft
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--edit"
argument_list|,
name|aliases
operator|=
block|{
literal|"-e"
block|}
argument_list|,
name|usage
operator|=
literal|"upload as change edit"
argument_list|)
DECL|field|edit
name|boolean
name|edit
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--submit"
argument_list|,
name|usage
operator|=
literal|"immediately submit the change"
argument_list|)
DECL|field|submit
name|boolean
name|submit
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--reviewer"
argument_list|,
name|aliases
operator|=
block|{
literal|"-r"
block|}
argument_list|,
name|metaVar
operator|=
literal|"EMAIL"
argument_list|,
name|usage
operator|=
literal|"add reviewer to changes"
argument_list|)
DECL|method|reviewer (Account.Id id)
name|void
name|reviewer
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
name|reviewer
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--cc"
argument_list|,
name|metaVar
operator|=
literal|"EMAIL"
argument_list|,
name|usage
operator|=
literal|"notify user by CC"
argument_list|)
DECL|method|cc (Account.Id id)
name|void
name|cc
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
name|cc
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--publish"
argument_list|,
name|usage
operator|=
literal|"publish new/updated changes"
argument_list|)
DECL|method|publish (boolean publish)
name|void
name|publish
parameter_list|(
name|boolean
name|publish
parameter_list|)
block|{
name|draft
operator|=
operator|!
name|publish
expr_stmt|;
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--label"
argument_list|,
name|aliases
operator|=
block|{
literal|"-l"
block|}
argument_list|,
name|metaVar
operator|=
literal|"LABEL+VALUE"
argument_list|,
name|usage
operator|=
literal|"label(s) to assign (defaults to +1 if no value provided"
argument_list|)
DECL|method|addLabel (final String token)
name|void
name|addLabel
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
throws|throws
name|CmdLineException
block|{
name|LabelVote
name|v
init|=
name|LabelVote
operator|.
name|parse
argument_list|(
name|token
argument_list|)
decl_stmt|;
try|try
block|{
name|LabelType
operator|.
name|checkName
argument_list|(
name|v
operator|.
name|label
argument_list|()
argument_list|)
expr_stmt|;
name|ApprovalsUtil
operator|.
name|checkLabel
argument_list|(
name|labelTypes
argument_list|,
name|v
operator|.
name|label
argument_list|()
argument_list|,
name|v
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
name|clp
operator|.
name|reject
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|labels
operator|.
name|put
argument_list|(
name|v
operator|.
name|label
argument_list|()
argument_list|,
name|v
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--hashtag"
argument_list|,
name|aliases
operator|=
block|{
literal|"-t"
block|}
argument_list|,
name|metaVar
operator|=
literal|"HASHTAG"
argument_list|,
name|usage
operator|=
literal|"add hashtag to changes"
argument_list|)
DECL|method|addHashtag (String token)
name|void
name|addHashtag
parameter_list|(
name|String
name|token
parameter_list|)
throws|throws
name|CmdLineException
block|{
if|if
condition|(
operator|!
name|notesMigration
operator|.
name|enabled
argument_list|()
condition|)
block|{
throw|throw
name|clp
operator|.
name|reject
argument_list|(
literal|"cannot add hashtags; noteDb is disabled"
argument_list|)
throw|;
block|}
name|String
name|hashtag
init|=
name|cleanupHashtag
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hashtag
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hashtags
operator|.
name|add
argument_list|(
name|hashtag
argument_list|)
expr_stmt|;
block|}
comment|//TODO(dpursehouse): validate hashtags
block|}
annotation|@
name|Inject
DECL|method|MagicBranchInput (ReceiveCommand cmd, LabelTypes labelTypes, NotesMigration notesMigration)
name|MagicBranchInput
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|NotesMigration
name|notesMigration
parameter_list|)
block|{
name|this
operator|.
name|cmd
operator|=
name|cmd
expr_stmt|;
name|this
operator|.
name|draft
operator|=
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|MagicBranch
operator|.
name|NEW_DRAFT_CHANGE
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelTypes
operator|=
name|labelTypes
expr_stmt|;
name|this
operator|.
name|notesMigration
operator|=
name|notesMigration
expr_stmt|;
block|}
DECL|method|getMailRecipients ()
name|MailRecipients
name|getMailRecipients
parameter_list|()
block|{
return|return
operator|new
name|MailRecipients
argument_list|(
name|reviewer
argument_list|,
name|cc
argument_list|)
return|;
block|}
DECL|method|parse (CmdLineParser clp, Repository repo, Set<String> refs)
name|String
name|parse
parameter_list|(
name|CmdLineParser
name|clp
parameter_list|,
name|Repository
name|repo
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|refs
parameter_list|)
throws|throws
name|CmdLineException
block|{
name|String
name|ref
init|=
name|MagicBranch
operator|.
name|getDestBranchName
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_REFS
argument_list|)
condition|)
block|{
name|ref
operator|=
name|Constants
operator|.
name|R_HEADS
operator|+
name|ref
expr_stmt|;
block|}
name|int
name|optionStart
init|=
name|ref
operator|.
name|indexOf
argument_list|(
literal|'%'
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|optionStart
condition|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|COMMAS
operator|.
name|split
argument_list|(
name|ref
operator|.
name|substring
argument_list|(
name|optionStart
operator|+
literal|1
argument_list|)
argument_list|)
control|)
block|{
name|int
name|e
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|e
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|e
argument_list|)
argument_list|,
name|s
operator|.
name|substring
argument_list|(
name|e
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|options
operator|.
name|put
argument_list|(
name|s
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
name|clp
operator|.
name|parseOptionMap
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|ref
operator|=
name|ref
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|optionStart
argument_list|)
expr_stmt|;
block|}
comment|// Split the destination branch by branch and topic. The topic
comment|// suffix is entirely optional, so it might not even exist.
name|String
name|head
init|=
name|readHEAD
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|int
name|split
init|=
name|ref
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|String
name|name
init|=
name|ref
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|split
argument_list|)
decl_stmt|;
if|if
condition|(
name|refs
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|head
argument_list|)
condition|)
block|{
break|break;
block|}
name|split
operator|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|,
name|split
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|split
operator|<=
name|Constants
operator|.
name|R_REFS
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
name|ref
return|;
block|}
block|}
if|if
condition|(
name|split
operator|<
name|ref
operator|.
name|length
argument_list|()
condition|)
block|{
name|topic
operator|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|ref
operator|.
name|substring
argument_list|(
name|split
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ref
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|split
argument_list|)
return|;
block|}
block|}
DECL|method|parseMagicBranch (final ReceiveCommand cmd)
specifier|private
name|void
name|parseMagicBranch
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
comment|// Permit exactly one new change request per push.
if|if
condition|(
name|magicBranch
operator|!=
literal|null
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"duplicate request"
argument_list|)
expr_stmt|;
return|return;
block|}
name|magicBranch
operator|=
operator|new
name|MagicBranchInput
argument_list|(
name|cmd
argument_list|,
name|labelTypes
argument_list|,
name|notesMigration
argument_list|)
expr_stmt|;
name|magicBranch
operator|.
name|reviewer
operator|.
name|addAll
argument_list|(
name|reviewersFromCommandLine
argument_list|)
expr_stmt|;
name|magicBranch
operator|.
name|cc
operator|.
name|addAll
argument_list|(
name|ccFromCommandLine
argument_list|)
expr_stmt|;
name|String
name|ref
decl_stmt|;
name|CmdLineParser
name|clp
init|=
name|optionParserFactory
operator|.
name|create
argument_list|(
name|magicBranch
argument_list|)
decl_stmt|;
name|magicBranch
operator|.
name|clp
operator|=
name|clp
expr_stmt|;
try|try
block|{
name|ref
operator|=
name|magicBranch
operator|.
name|parse
argument_list|(
name|clp
argument_list|,
name|repo
argument_list|,
name|rp
operator|.
name|getAdvertisedRefs
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CmdLineException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|clp
operator|.
name|wasHelpRequestedByOption
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ref
operator|=
literal|null
expr_stmt|;
comment|// never happen
block|}
if|if
condition|(
name|clp
operator|.
name|wasHelpRequestedByOption
argument_list|()
condition|)
block|{
name|StringWriter
name|w
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"\nHelp for refs/for/branch:\n\n"
argument_list|)
expr_stmt|;
name|clp
operator|.
name|printUsage
argument_list|(
name|w
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
name|w
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"see help"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|rp
operator|.
name|getAdvertisedRefs
argument_list|()
operator|.
name|containsKey
argument_list|(
name|ref
argument_list|)
operator|&&
operator|!
name|ref
operator|.
name|equals
argument_list|(
name|readHEAD
argument_list|(
name|repo
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|ref
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
condition|)
block|{
name|String
name|n
init|=
name|ref
operator|.
name|substring
argument_list|(
name|Constants
operator|.
name|R_HEADS
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"branch "
operator|+
name|n
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
name|ref
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|magicBranch
operator|.
name|dest
operator|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|magicBranch
operator|.
name|ctl
operator|=
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|magicBranch
operator|.
name|ctl
operator|.
name|canWrite
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"project is read only"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|magicBranch
operator|.
name|draft
condition|)
block|{
if|if
condition|(
operator|!
name|receiveConfig
operator|.
name|allowDrafts
condition|)
block|{
name|errors
operator|.
name|put
argument_list|(
name|Error
operator|.
name|CODE_REVIEW
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"draft workflow is disabled"
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|projectControl
operator|.
name|controlForRef
argument_list|(
literal|"refs/drafts/"
operator|+
name|ref
argument_list|)
operator|.
name|isBlocked
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
condition|)
block|{
name|errors
operator|.
name|put
argument_list|(
name|Error
operator|.
name|CODE_REVIEW
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"cannot upload drafts"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|magicBranch
operator|.
name|ctl
operator|.
name|canUpload
argument_list|()
condition|)
block|{
name|errors
operator|.
name|put
argument_list|(
name|Error
operator|.
name|CODE_REVIEW
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"cannot upload review"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|magicBranch
operator|.
name|draft
operator|&&
name|magicBranch
operator|.
name|submit
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"cannot submit draft"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|magicBranch
operator|.
name|submit
operator|&&
operator|!
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|MagicBranch
operator|.
name|NEW_CHANGE
operator|+
name|ref
argument_list|)
operator|.
name|canSubmit
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"submit not allowed"
argument_list|)
expr_stmt|;
return|return;
block|}
name|RevWalk
name|walk
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|RevCommit
name|tip
decl_stmt|;
try|try
block|{
name|tip
operator|=
name|walk
operator|.
name|parseCommit
argument_list|(
name|magicBranch
operator|.
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|magicBranch
operator|.
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_MISSING_OBJECT
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Invalid pack upload; one or more objects weren't sent"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// If tip is a merge commit, or the root commit or
comment|// if %base was specified, ignore newChangeForAllNotInTarget
if|if
condition|(
name|tip
operator|.
name|getParentCount
argument_list|()
operator|>
literal|1
operator|||
name|magicBranch
operator|.
name|base
operator|!=
literal|null
operator|||
name|tip
operator|.
name|getParentCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|newChangeForAllNotInTarget
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|magicBranch
operator|.
name|base
operator|!=
literal|null
condition|)
block|{
name|magicBranch
operator|.
name|baseCommit
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|magicBranch
operator|.
name|base
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectId
name|id
range|:
name|magicBranch
operator|.
name|base
control|)
block|{
try|try
block|{
name|magicBranch
operator|.
name|baseCommit
operator|.
name|add
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|notCommit
parameter_list|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"base must be a commit"
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|MissingObjectException
name|e
parameter_list|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"base not found"
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Project %s cannot read %s"
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|,
name|id
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|newChangeForAllNotInTarget
condition|)
block|{
name|String
name|destBranch
init|=
name|magicBranch
operator|.
name|dest
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|ObjectId
name|baseHead
init|=
name|repo
operator|.
name|getRef
argument_list|(
name|destBranch
argument_list|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|magicBranch
operator|.
name|baseCommit
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|baseHead
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Project %s cannot read %s"
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|,
name|destBranch
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// Validate that the new commits are connected with the target
comment|// branch.  If they aren't, we want to abort. We do this check by
comment|// looking to see if we can compute a merge base between the new
comment|// commits and the target branch head.
comment|//
try|try
block|{
name|Ref
name|targetRef
init|=
name|rp
operator|.
name|getAdvertisedRefs
argument_list|()
operator|.
name|get
argument_list|(
name|magicBranch
operator|.
name|ctl
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetRef
operator|==
literal|null
operator|||
name|targetRef
operator|.
name|getObjectId
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// The destination branch does not yet exist. Assume the
comment|// history being sent for review will start it and thus
comment|// is "connected" to the branch.
return|return;
block|}
specifier|final
name|RevCommit
name|h
init|=
name|walk
operator|.
name|parseCommit
argument_list|(
name|targetRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RevFilter
name|oldRevFilter
init|=
name|walk
operator|.
name|getRevFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|walk
operator|.
name|reset
argument_list|()
expr_stmt|;
name|walk
operator|.
name|setRevFilter
argument_list|(
name|RevFilter
operator|.
name|MERGE_BASE
argument_list|)
expr_stmt|;
name|walk
operator|.
name|markStart
argument_list|(
name|tip
argument_list|)
expr_stmt|;
name|walk
operator|.
name|markStart
argument_list|(
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
name|walk
operator|.
name|next
argument_list|()
operator|==
literal|null
condition|)
block|{
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"no common ancestry"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|walk
operator|.
name|reset
argument_list|()
expr_stmt|;
name|walk
operator|.
name|setRevFilter
argument_list|(
name|oldRevFilter
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|magicBranch
operator|.
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_MISSING_OBJECT
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Invalid pack upload; one or more objects weren't sent"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readHEAD (Repository repo)
specifier|private
specifier|static
name|String
name|readHEAD
parameter_list|(
name|Repository
name|repo
parameter_list|)
block|{
try|try
block|{
return|return
name|repo
operator|.
name|getFullBranch
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot read HEAD symref"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|parseReplaceCommand (final ReceiveCommand cmd, final Change.Id changeId)
specifier|private
name|void
name|parseReplaceCommand
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|,
specifier|final
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|.
name|getType
argument_list|()
operator|!=
name|ReceiveCommand
operator|.
name|Type
operator|.
name|CREATE
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid usage"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|RevCommit
name|newCommit
decl_stmt|;
try|try
block|{
name|newCommit
operator|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot parse "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" as commit"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid commit"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Change
name|changeEnt
decl_stmt|;
try|try
block|{
name|changeEnt
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot lookup existing change "
operator|+
name|changeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"database error"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|changeEnt
operator|==
literal|null
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"change "
operator|+
name|changeId
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|project
operator|.
name|getNameKey
argument_list|()
operator|.
name|equals
argument_list|(
name|changeEnt
operator|.
name|getProject
argument_list|()
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"change "
operator|+
name|changeId
operator|+
literal|" does not belong to project "
operator|+
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|requestReplace
argument_list|(
name|cmd
argument_list|,
literal|true
argument_list|,
name|changeEnt
argument_list|,
name|newCommit
argument_list|)
expr_stmt|;
block|}
DECL|method|requestReplace (final ReceiveCommand cmd, final boolean checkMergedInto, final Change change, final RevCommit newCommit)
specifier|private
name|boolean
name|requestReplace
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|,
specifier|final
name|boolean
name|checkMergedInto
parameter_list|,
specifier|final
name|Change
name|change
parameter_list|,
specifier|final
name|RevCommit
name|newCommit
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"change "
operator|+
name|canonicalWebUrl
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|" closed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|ReplaceRequest
name|req
init|=
operator|new
name|ReplaceRequest
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|newCommit
argument_list|,
name|cmd
argument_list|,
name|checkMergedInto
argument_list|)
decl_stmt|;
if|if
condition|(
name|replaceByChange
operator|.
name|containsKey
argument_list|(
name|req
operator|.
name|ontoChange
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"duplicate request"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|replaceByChange
operator|.
name|put
argument_list|(
name|req
operator|.
name|ontoChange
argument_list|,
name|req
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|selectNewAndReplacedChangesFromMagicBranch ()
specifier|private
name|void
name|selectNewAndReplacedChangesFromMagicBranch
parameter_list|()
block|{
name|newChanges
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
specifier|final
name|RevWalk
name|walk
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|walk
operator|.
name|reset
argument_list|()
expr_stmt|;
name|walk
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|walk
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|existing
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|walk
operator|.
name|markStart
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|magicBranch
operator|.
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|magicBranch
operator|.
name|baseCommit
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RevCommit
name|c
range|:
name|magicBranch
operator|.
name|baseCommit
control|)
block|{
name|walk
operator|.
name|markUninteresting
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|Ref
name|targetRef
init|=
name|allRefs
operator|.
name|get
argument_list|(
name|magicBranch
operator|.
name|ctl
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetRef
operator|!=
literal|null
condition|)
block|{
name|walk
operator|.
name|markUninteresting
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|targetRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|markHeadsAsUninteresting
argument_list|(
name|walk
argument_list|,
name|existing
argument_list|,
name|magicBranch
operator|.
name|ctl
operator|!=
literal|null
condition|?
name|magicBranch
operator|.
name|ctl
operator|.
name|getRefName
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ChangeLookup
argument_list|>
name|pending
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Change
operator|.
name|Key
argument_list|>
name|newChangeIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|maxBatchChanges
init|=
name|receiveConfig
operator|.
name|getEffectiveMaxBatchChangesLimit
argument_list|(
name|currentUser
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|RevCommit
name|c
init|=
name|walk
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|existing
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
block|{
comment|// Commit is already tracked.
continue|continue;
block|}
if|if
condition|(
operator|!
name|validCommit
argument_list|(
name|magicBranch
operator|.
name|ctl
argument_list|,
name|magicBranch
operator|.
name|cmd
argument_list|,
name|c
argument_list|)
condition|)
block|{
comment|// Not a change the user can propose? Abort as early as possible.
name|newChanges
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// Don't allow merges to be uploaded in commit chain via all-not-in-target
if|if
condition|(
name|newChangeForAllNotInTarget
operator|&&
name|c
operator|.
name|getParentCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"Pushing merges in commit chains with 'all not in target' is not allowed,\n"
operator|+
literal|"to override please set the base manually"
argument_list|)
expr_stmt|;
block|}
name|Change
operator|.
name|Key
name|changeKey
init|=
operator|new
name|Change
operator|.
name|Key
argument_list|(
literal|"I"
operator|+
name|c
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|idList
init|=
name|c
operator|.
name|getFooterLines
argument_list|(
name|CHANGE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|idList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newChanges
operator|.
name|add
argument_list|(
operator|new
name|CreateRequest
argument_list|(
name|magicBranch
operator|.
name|ctl
argument_list|,
name|c
argument_list|,
name|changeKey
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|idStr
init|=
name|idList
operator|.
name|get
argument_list|(
name|idList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|idStr
operator|.
name|matches
argument_list|(
literal|"^I00*$"
argument_list|)
condition|)
block|{
comment|// Reject this invalid line from EGit.
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"invalid Change-Id"
argument_list|)
expr_stmt|;
name|newChanges
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
return|return;
block|}
name|changeKey
operator|=
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|idStr
argument_list|)
expr_stmt|;
name|pending
operator|.
name|add
argument_list|(
operator|new
name|ChangeLookup
argument_list|(
name|c
argument_list|,
name|changeKey
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxBatchChanges
operator|!=
literal|0
operator|&&
name|pending
operator|.
name|size
argument_list|()
operator|+
name|newChanges
operator|.
name|size
argument_list|()
operator|>
name|maxBatchChanges
condition|)
block|{
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"the number of pushed changes in a batch exceeds the max limit "
operator|+
name|maxBatchChanges
argument_list|)
expr_stmt|;
name|newChanges
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
for|for
control|(
name|ChangeLookup
name|p
range|:
name|pending
control|)
block|{
if|if
condition|(
name|newChangeIds
operator|.
name|contains
argument_list|(
name|p
operator|.
name|changeKey
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"squash commits first"
argument_list|)
expr_stmt|;
name|newChanges
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changes
init|=
name|p
operator|.
name|destChanges
decl_stmt|;
if|if
condition|(
name|changes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// WTF, multiple changes in this project have the same key?
comment|// Since the commit is new, the user should recreate it with
comment|// a different Change-Id. In practice, we should never see
comment|// this error message as Change-Id should be unique.
comment|//
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
name|p
operator|.
name|changeKey
operator|.
name|get
argument_list|()
operator|+
literal|" has duplicates"
argument_list|)
expr_stmt|;
name|newChanges
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|changes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Schedule as a replacement to this one matching change.
comment|//
if|if
condition|(
name|requestReplace
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|false
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|change
argument_list|()
argument_list|,
name|p
operator|.
name|commit
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|newChanges
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|changes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|isValidChangeId
argument_list|(
name|p
operator|.
name|changeKey
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"invalid Change-Id"
argument_list|)
expr_stmt|;
name|newChanges
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
return|return;
block|}
name|newChangeIds
operator|.
name|add
argument_list|(
name|p
operator|.
name|changeKey
argument_list|)
expr_stmt|;
block|}
name|newChanges
operator|.
name|add
argument_list|(
operator|new
name|CreateRequest
argument_list|(
name|magicBranch
operator|.
name|ctl
argument_list|,
name|p
operator|.
name|commit
argument_list|,
name|p
operator|.
name|changeKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Should never happen, the core receive process would have
comment|// identified the missing object earlier before we got control.
comment|//
name|magicBranch
operator|.
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_MISSING_OBJECT
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Invalid pack upload; one or more objects weren't sent"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|newChanges
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot query database to locate prior changes"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"database error"
argument_list|)
expr_stmt|;
name|newChanges
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|newChanges
operator|.
name|isEmpty
argument_list|()
operator|&&
name|replaceByChange
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"no new changes"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|newChanges
operator|.
name|isEmpty
argument_list|()
operator|&&
name|magicBranch
operator|.
name|edit
condition|)
block|{
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"edit is not supported for new changes"
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|CreateRequest
name|create
range|:
name|newChanges
control|)
block|{
name|batch
operator|.
name|addCommand
argument_list|(
name|create
operator|.
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|markHeadsAsUninteresting ( final RevWalk walk, Set<ObjectId> existing, @Nullable String forRef)
specifier|private
name|void
name|markHeadsAsUninteresting
parameter_list|(
specifier|final
name|RevWalk
name|walk
parameter_list|,
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|existing
parameter_list|,
annotation|@
name|Nullable
name|String
name|forRef
parameter_list|)
block|{
for|for
control|(
name|Ref
name|ref
range|:
name|allRefs
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|ref
operator|.
name|getObjectId
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|ref
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|REFS_CHANGES
argument_list|)
condition|)
block|{
name|existing
operator|.
name|add
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ref
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|R_HEADS
argument_list|)
operator|||
operator|(
name|forRef
operator|!=
literal|null
operator|&&
name|forRef
operator|.
name|equals
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
try|try
block|{
name|walk
operator|.
name|markUninteresting
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid ref %s in %s"
argument_list|,
name|ref
operator|.
name|getName
argument_list|()
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
block|}
DECL|method|isValidChangeId (String idStr)
specifier|private
specifier|static
name|boolean
name|isValidChangeId
parameter_list|(
name|String
name|idStr
parameter_list|)
block|{
return|return
name|idStr
operator|.
name|matches
argument_list|(
literal|"^I[0-9a-fA-F]{40}$"
argument_list|)
operator|&&
operator|!
name|idStr
operator|.
name|matches
argument_list|(
literal|"^I00*$"
argument_list|)
return|;
block|}
DECL|class|ChangeLookup
specifier|private
class|class
name|ChangeLookup
block|{
DECL|field|commit
specifier|final
name|RevCommit
name|commit
decl_stmt|;
DECL|field|changeKey
specifier|final
name|Change
operator|.
name|Key
name|changeKey
decl_stmt|;
DECL|field|destChanges
specifier|final
name|List
argument_list|<
name|ChangeData
argument_list|>
name|destChanges
decl_stmt|;
DECL|method|ChangeLookup (RevCommit c, Change.Key key)
name|ChangeLookup
parameter_list|(
name|RevCommit
name|c
parameter_list|,
name|Change
operator|.
name|Key
name|key
parameter_list|)
throws|throws
name|OrmException
block|{
name|commit
operator|=
name|c
expr_stmt|;
name|changeKey
operator|=
name|key
expr_stmt|;
name|destChanges
operator|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byBranchKey
argument_list|(
name|magicBranch
operator|.
name|dest
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CreateRequest
specifier|private
class|class
name|CreateRequest
block|{
DECL|field|commit
specifier|final
name|RevCommit
name|commit
decl_stmt|;
DECL|field|change
specifier|final
name|Change
name|change
decl_stmt|;
DECL|field|cmd
specifier|final
name|ReceiveCommand
name|cmd
decl_stmt|;
DECL|field|ins
specifier|final
name|ChangeInserter
name|ins
decl_stmt|;
DECL|field|created
name|boolean
name|created
decl_stmt|;
DECL|method|CreateRequest (RefControl ctl, RevCommit c, Change.Key changeKey)
name|CreateRequest
parameter_list|(
name|RefControl
name|ctl
parameter_list|,
name|RevCommit
name|c
parameter_list|,
name|Change
operator|.
name|Key
name|changeKey
parameter_list|)
throws|throws
name|OrmException
block|{
name|commit
operator|=
name|c
expr_stmt|;
name|change
operator|=
operator|new
name|Change
argument_list|(
name|changeKey
argument_list|,
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|db
operator|.
name|nextChangeId
argument_list|()
argument_list|)
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|magicBranch
operator|.
name|dest
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
name|change
operator|.
name|setTopic
argument_list|(
name|magicBranch
operator|.
name|topic
argument_list|)
expr_stmt|;
name|ins
operator|=
name|changeInserterFactory
operator|.
name|create
argument_list|(
name|ctl
operator|.
name|getProjectControl
argument_list|()
argument_list|,
name|change
argument_list|,
name|c
argument_list|)
operator|.
name|setDraft
argument_list|(
name|magicBranch
operator|.
name|draft
argument_list|)
expr_stmt|;
name|cmd
operator|=
operator|new
name|ReceiveCommand
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|c
argument_list|,
name|ins
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|insertChange ()
name|CheckedFuture
argument_list|<
name|Void
argument_list|,
name|InsertException
argument_list|>
name|insertChange
parameter_list|()
throws|throws
name|IOException
block|{
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|commit
argument_list|)
expr_stmt|;
specifier|final
name|Thread
name|caller
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|changeUpdateExector
operator|.
name|submit
argument_list|(
name|requestScopePropagator
operator|.
name|wrap
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|OrmException
throws|,
name|IOException
block|{
if|if
condition|(
name|caller
operator|==
name|Thread
operator|.
name|currentThread
argument_list|()
condition|)
block|{
name|insertChange
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ReviewDb
name|db
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
name|insertChange
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|newProgress
init|)
block|{
name|newProgress
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Futures
operator|.
name|makeChecked
argument_list|(
name|future
argument_list|,
name|INSERT_EXCEPTION
argument_list|)
return|;
block|}
DECL|method|insertChange (ReviewDb db)
specifier|private
name|void
name|insertChange
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
specifier|final
name|PatchSet
name|ps
init|=
name|ins
operator|.
name|getPatchSet
argument_list|()
decl_stmt|;
specifier|final
name|Account
operator|.
name|Id
name|me
init|=
name|currentUser
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footerLines
init|=
name|commit
operator|.
name|getFooterLines
argument_list|()
decl_stmt|;
specifier|final
name|MailRecipients
name|recipients
init|=
operator|new
name|MailRecipients
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|approvals
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|magicBranch
operator|!=
literal|null
condition|)
block|{
name|recipients
operator|.
name|add
argument_list|(
name|magicBranch
operator|.
name|getMailRecipients
argument_list|()
argument_list|)
expr_stmt|;
name|approvals
operator|=
name|magicBranch
operator|.
name|labels
expr_stmt|;
name|ins
operator|.
name|setHashtags
argument_list|(
name|magicBranch
operator|.
name|hashtags
argument_list|)
expr_stmt|;
block|}
name|recipients
operator|.
name|add
argument_list|(
name|getRecipientsFromFooters
argument_list|(
name|accountResolver
argument_list|,
name|ps
argument_list|,
name|footerLines
argument_list|)
argument_list|)
expr_stmt|;
name|recipients
operator|.
name|remove
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|ChangeMessage
name|msg
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|,
name|me
argument_list|,
name|ps
operator|.
name|getCreatedOn
argument_list|()
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|msgs
init|=
name|renderMessageWithApprovals
argument_list|(
name|ps
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|approvals
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|PatchSetApproval
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setMessage
argument_list|(
name|msgs
operator|.
name|toString
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|ins
operator|.
name|setReviewers
argument_list|(
name|recipients
operator|.
name|getReviewers
argument_list|()
argument_list|)
operator|.
name|setExtraCC
argument_list|(
name|recipients
operator|.
name|getCcOnly
argument_list|()
argument_list|)
operator|.
name|setApprovals
argument_list|(
name|approvals
argument_list|)
operator|.
name|setMessage
argument_list|(
name|msg
argument_list|)
operator|.
name|setRequestScopePropagator
argument_list|(
name|requestScopePropagator
argument_list|)
operator|.
name|setSendMail
argument_list|(
literal|true
argument_list|)
operator|.
name|insert
argument_list|()
expr_stmt|;
name|created
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|submit
condition|)
block|{
name|submit
argument_list|(
name|projectControl
operator|.
name|controlFor
argument_list|(
name|change
argument_list|)
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|submit (ChangeControl changeCtl, PatchSet ps)
specifier|private
name|void
name|submit
parameter_list|(
name|ChangeControl
name|changeCtl
parameter_list|,
name|PatchSet
name|ps
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
name|Submit
name|submit
init|=
name|submitProvider
operator|.
name|get
argument_list|()
decl_stmt|;
name|RevisionResource
name|rsrc
init|=
operator|new
name|RevisionResource
argument_list|(
name|changes
operator|.
name|parse
argument_list|(
name|changeCtl
argument_list|)
argument_list|,
name|ps
argument_list|)
decl_stmt|;
name|Change
name|c
decl_stmt|;
try|try
block|{
comment|// Force submit even if submit rule evaluation fails.
name|c
operator|=
name|submit
operator|.
name|submit
argument_list|(
name|rsrc
argument_list|,
name|currentUser
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|addError
argument_list|(
literal|"Submitting change "
operator|+
name|changeCtl
operator|.
name|getChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
operator|+
literal|" failed."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|mergeQueue
operator|.
name|merge
argument_list|(
name|c
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|c
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|SUBMITTED
case|:
name|addMessage
argument_list|(
literal|"Change "
operator|+
name|c
operator|.
name|getChangeId
argument_list|()
operator|+
literal|" submitted."
argument_list|)
expr_stmt|;
break|break;
case|case
name|MERGED
case|:
name|addMessage
argument_list|(
literal|"Change "
operator|+
name|c
operator|.
name|getChangeId
argument_list|()
operator|+
literal|" merged."
argument_list|)
expr_stmt|;
break|break;
case|case
name|NEW
case|:
name|ChangeMessage
name|msg
init|=
name|submit
operator|.
name|getConflictMessage
argument_list|(
name|rsrc
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|addMessage
argument_list|(
literal|"Change "
operator|+
name|c
operator|.
name|getChangeId
argument_list|()
operator|+
literal|": "
operator|+
name|msg
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
comment|//$FALL-THROUGH$
default|default:
name|addMessage
argument_list|(
literal|"change "
operator|+
name|c
operator|.
name|getChangeId
argument_list|()
operator|+
literal|" is "
operator|+
name|c
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|preparePatchSetsForReplace ()
specifier|private
name|void
name|preparePatchSetsForReplace
parameter_list|()
block|{
try|try
block|{
name|readChangesForReplace
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ReplaceRequest
argument_list|>
name|itr
init|=
name|replaceByChange
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ReplaceRequest
name|req
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|req
operator|.
name|validate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|req
operator|.
name|skip
operator|&&
name|req
operator|.
name|cmd
operator|==
literal|null
condition|)
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot read database before replacement for project %s"
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|err
argument_list|)
expr_stmt|;
for|for
control|(
name|ReplaceRequest
name|req
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|req
operator|.
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|req
operator|.
name|inputCommand
operator|.
name|setResult
argument_list|(
name|REJECTED_OTHER_REASON
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot read repository before replacement for project %s"
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|err
argument_list|)
expr_stmt|;
for|for
control|(
name|ReplaceRequest
name|req
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|req
operator|.
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|req
operator|.
name|inputCommand
operator|.
name|setResult
argument_list|(
name|REJECTED_OTHER_REASON
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|ReplaceRequest
name|req
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|req
operator|.
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
operator|&&
name|req
operator|.
name|cmd
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|req
operator|.
name|prev
operator|!=
literal|null
condition|)
block|{
name|batch
operator|.
name|addCommand
argument_list|(
name|req
operator|.
name|prev
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|addCommand
argument_list|(
name|req
operator|.
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|cmd
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
comment|// Cancel creations tied to refs/for/ or refs/drafts/ command.
for|for
control|(
name|ReplaceRequest
name|req
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|req
operator|.
name|inputCommand
operator|==
name|magicBranch
operator|.
name|cmd
operator|&&
name|req
operator|.
name|cmd
operator|!=
literal|null
condition|)
block|{
name|req
operator|.
name|cmd
operator|.
name|setResult
argument_list|(
name|Result
operator|.
name|REJECTED_OTHER_REASON
argument_list|,
literal|"aborted"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CreateRequest
name|req
range|:
name|newChanges
control|)
block|{
name|req
operator|.
name|cmd
operator|.
name|setResult
argument_list|(
name|Result
operator|.
name|REJECTED_OTHER_REASON
argument_list|,
literal|"aborted"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|readChangesForReplace ()
specifier|private
name|void
name|readChangesForReplace
parameter_list|()
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|CheckedFuture
argument_list|<
name|Change
argument_list|,
name|OrmException
argument_list|>
argument_list|>
name|futures
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|replaceByChange
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ReplaceRequest
name|request
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|getAsync
argument_list|(
name|request
operator|.
name|ontoChange
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CheckedFuture
argument_list|<
name|Change
argument_list|,
name|OrmException
argument_list|>
name|f
range|:
name|futures
control|)
block|{
name|Change
name|c
init|=
name|f
operator|.
name|checkedGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|replaceByChange
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|change
operator|=
name|c
expr_stmt|;
block|}
block|}
block|}
DECL|method|renderMessageWithApprovals (int patchSetId, Map<String, Short> n, Map<String, PatchSetApproval> c)
specifier|private
name|StringBuilder
name|renderMessageWithApprovals
parameter_list|(
name|int
name|patchSetId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|n
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PatchSetApproval
argument_list|>
name|c
parameter_list|)
block|{
name|StringBuilder
name|msgs
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Uploaded patch set "
operator|+
name|patchSetId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|n
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|e
range|:
name|n
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|containsKey
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
name|c
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
operator|==
name|e
operator|.
name|getValue
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|first
condition|)
block|{
name|msgs
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|msgs
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|LabelVote
operator|.
name|create
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|msgs
return|;
block|}
DECL|class|ReplaceRequest
specifier|private
class|class
name|ReplaceRequest
block|{
DECL|field|ontoChange
specifier|final
name|Change
operator|.
name|Id
name|ontoChange
decl_stmt|;
DECL|field|newCommit
specifier|final
name|RevCommit
name|newCommit
decl_stmt|;
DECL|field|inputCommand
specifier|final
name|ReceiveCommand
name|inputCommand
decl_stmt|;
DECL|field|checkMergedInto
specifier|final
name|boolean
name|checkMergedInto
decl_stmt|;
DECL|field|change
name|Change
name|change
decl_stmt|;
DECL|field|changeCtl
name|ChangeControl
name|changeCtl
decl_stmt|;
DECL|field|revisions
name|BiMap
argument_list|<
name|RevCommit
argument_list|,
name|PatchSet
operator|.
name|Id
argument_list|>
name|revisions
decl_stmt|;
DECL|field|newPatchSet
name|PatchSet
name|newPatchSet
decl_stmt|;
DECL|field|prev
name|ReceiveCommand
name|prev
decl_stmt|;
DECL|field|cmd
name|ReceiveCommand
name|cmd
decl_stmt|;
DECL|field|info
name|PatchSetInfo
name|info
decl_stmt|;
DECL|field|msg
name|ChangeMessage
name|msg
decl_stmt|;
DECL|field|mergedIntoRef
name|String
name|mergedIntoRef
decl_stmt|;
DECL|field|skip
name|boolean
name|skip
decl_stmt|;
DECL|field|priorPatchSet
specifier|private
name|PatchSet
operator|.
name|Id
name|priorPatchSet
decl_stmt|;
DECL|method|ReplaceRequest (final Change.Id toChange, final RevCommit newCommit, final ReceiveCommand cmd, final boolean checkMergedInto)
name|ReplaceRequest
parameter_list|(
specifier|final
name|Change
operator|.
name|Id
name|toChange
parameter_list|,
specifier|final
name|RevCommit
name|newCommit
parameter_list|,
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|,
specifier|final
name|boolean
name|checkMergedInto
parameter_list|)
block|{
name|this
operator|.
name|ontoChange
operator|=
name|toChange
expr_stmt|;
name|this
operator|.
name|newCommit
operator|=
name|newCommit
expr_stmt|;
name|this
operator|.
name|inputCommand
operator|=
name|cmd
expr_stmt|;
name|this
operator|.
name|checkMergedInto
operator|=
name|checkMergedInto
expr_stmt|;
name|revisions
operator|=
name|HashBiMap
operator|.
name|create
argument_list|()
expr_stmt|;
for|for
control|(
name|Ref
name|ref
range|:
name|refs
argument_list|(
name|toChange
argument_list|)
control|)
block|{
try|try
block|{
name|revisions
operator|.
name|forcePut
argument_list|(
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|,
name|PatchSet
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Project %s contains invalid change ref %s"
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|,
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|validate (boolean autoClose)
name|boolean
name|validate
parameter_list|(
name|boolean
name|autoClose
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|autoClose
operator|&&
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"change "
operator|+
name|ontoChange
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|priorPatchSet
operator|=
name|change
operator|.
name|currentPatchSetId
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|revisions
operator|.
name|containsValue
argument_list|(
name|priorPatchSet
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"change "
operator|+
name|ontoChange
operator|+
literal|" missing revisions"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|RevCommit
name|priorCommit
init|=
name|revisions
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
name|priorPatchSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCommit
operator|==
name|priorCommit
condition|)
block|{
comment|// Ignore requests to make the change its current state.
name|skip
operator|=
literal|true
expr_stmt|;
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"commit already exists (as current patchset)"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|changeCtl
operator|=
name|projectControl
operator|.
name|controlFor
argument_list|(
name|change
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|changeCtl
operator|.
name|canAddPatchSet
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"cannot replace "
operator|+
name|ontoChange
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"change "
operator|+
name|ontoChange
operator|+
literal|" closed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|revisions
operator|.
name|containsKey
argument_list|(
name|newCommit
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"commit already exists (in the change)"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
for|for
control|(
specifier|final
name|Ref
name|r
range|:
name|rp
operator|.
name|getRepository
argument_list|()
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
literal|"refs/changes"
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getObjectId
argument_list|()
operator|.
name|equals
argument_list|(
name|newCommit
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"commit already exists (in the project)"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
for|for
control|(
name|RevCommit
name|prior
range|:
name|revisions
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|// Don't allow a change to directly depend upon itself. This is a
comment|// very common error due to users making a new commit rather than
comment|// amending when trying to address review comments.
if|if
condition|(
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|isMergedInto
argument_list|(
name|prior
argument_list|,
name|newCommit
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"squash commits first"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|newCommit
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validCommit
argument_list|(
name|changeCtl
operator|.
name|getRefControl
argument_list|()
argument_list|,
name|inputCommand
argument_list|,
name|newCommit
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|priorCommit
argument_list|)
expr_stmt|;
comment|// Don't allow the same tree if the commit message is unmodified
comment|// or no parents were updated (rebase), else warn that only part
comment|// of the commit was modified.
if|if
condition|(
name|newCommit
operator|.
name|getTree
argument_list|()
operator|==
name|priorCommit
operator|.
name|getTree
argument_list|()
condition|)
block|{
specifier|final
name|boolean
name|messageEq
init|=
name|eq
argument_list|(
name|newCommit
operator|.
name|getFullMessage
argument_list|()
argument_list|,
name|priorCommit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|parentsEq
init|=
name|parentsEqual
argument_list|(
name|newCommit
argument_list|,
name|priorCommit
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|authorEq
init|=
name|authorEqual
argument_list|(
name|newCommit
argument_list|,
name|priorCommit
argument_list|)
decl_stmt|;
specifier|final
name|ObjectReader
name|reader
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|getObjectReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageEq
operator|&&
name|parentsEq
operator|&&
name|authorEq
operator|&&
operator|!
name|autoClose
condition|)
block|{
name|addMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"(W) No changes between prior commit %s and new commit %s"
argument_list|,
name|reader
operator|.
name|abbreviate
argument_list|(
name|priorCommit
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|reader
operator|.
name|abbreviate
argument_list|(
name|newCommit
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"no changes made"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"(W) "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|reader
operator|.
name|abbreviate
argument_list|(
name|newCommit
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" no files changed"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|authorEq
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|", author changed"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|messageEq
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|", message updated"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|parentsEq
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|", was rebased"
argument_list|)
expr_stmt|;
block|}
name|addMessage
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|edit
condition|)
block|{
return|return
name|newEdit
argument_list|()
return|;
block|}
name|newPatchSet
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|newEdit ()
specifier|private
name|boolean
name|newEdit
parameter_list|()
block|{
name|newPatchSet
operator|=
operator|new
name|PatchSet
argument_list|(
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
literal|null
decl_stmt|;
try|try
block|{
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|change
argument_list|,
name|currentUser
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannt retrieve edit"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|edit
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getBasePatchSet
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|newPatchSet
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
comment|// replace edit
name|cmd
operator|=
operator|new
name|ReceiveCommand
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRef
argument_list|()
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|newCommit
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// delete old edit ref on rebase
name|prev
operator|=
operator|new
name|ReceiveCommand
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRef
argument_list|()
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|createEditCommand
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|createEditCommand
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|createEditCommand ()
specifier|private
name|void
name|createEditCommand
parameter_list|()
block|{
comment|// create new edit
name|cmd
operator|=
operator|new
name|ReceiveCommand
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|newCommit
argument_list|,
name|RefNames
operator|.
name|refsEdit
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|newPatchSet
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newPatchSet ()
specifier|private
name|void
name|newPatchSet
parameter_list|()
block|{
name|PatchSet
operator|.
name|Id
name|id
init|=
name|ChangeUtil
operator|.
name|nextPatchSetId
argument_list|(
name|allRefs
argument_list|,
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|newPatchSet
operator|=
operator|new
name|PatchSet
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|newPatchSet
operator|.
name|setCreatedOn
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
name|newPatchSet
operator|.
name|setUploader
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|newPatchSet
operator|.
name|setRevision
argument_list|(
name|toRevId
argument_list|(
name|newCommit
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|draft
condition|)
block|{
name|newPatchSet
operator|.
name|setDraft
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|info
operator|=
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|newCommit
argument_list|,
name|newPatchSet
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|=
operator|new
name|ReceiveCommand
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|newCommit
argument_list|,
name|newPatchSet
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|insertPatchSet ()
name|CheckedFuture
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|InsertException
argument_list|>
name|insertPatchSet
parameter_list|()
throws|throws
name|IOException
block|{
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|newCommit
argument_list|)
expr_stmt|;
specifier|final
name|Thread
name|caller
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
name|ListenableFuture
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|future
init|=
name|changeUpdateExector
operator|.
name|submit
argument_list|(
name|requestScopePropagator
operator|.
name|wrap
argument_list|(
operator|new
name|Callable
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PatchSet
operator|.
name|Id
name|call
parameter_list|()
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|NoSuchChangeException
block|{
try|try
block|{
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|edit
condition|)
block|{
return|return
name|upsertEdit
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|caller
operator|==
name|Thread
operator|.
name|currentThread
argument_list|()
condition|)
block|{
return|return
name|insertPatchSet
argument_list|(
name|db
argument_list|)
return|;
block|}
else|else
block|{
name|ReviewDb
name|db
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|insertPatchSet
argument_list|(
name|db
argument_list|)
return|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|replaceProgress
init|)
block|{
name|replaceProgress
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Futures
operator|.
name|makeChecked
argument_list|(
name|future
argument_list|,
name|INSERT_EXCEPTION
argument_list|)
return|;
block|}
DECL|method|newChangeMessage (ReviewDb db, ChangeKind changeKind, Map<String, Short> approvals)
specifier|private
name|ChangeMessage
name|newChangeMessage
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ChangeKind
name|changeKind
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|approvals
parameter_list|)
throws|throws
name|OrmException
block|{
name|msg
operator|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|newPatchSet
operator|.
name|getCreatedOn
argument_list|()
argument_list|,
name|newPatchSet
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|msgs
init|=
name|renderMessageWithApprovals
argument_list|(
name|newPatchSet
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|approvals
argument_list|,
name|scanLabels
argument_list|(
name|db
argument_list|,
name|approvals
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|changeKind
condition|)
block|{
case|case
name|TRIVIAL_REBASE
case|:
case|case
name|NO_CHANGE
case|:
name|msgs
operator|.
name|append
argument_list|(
literal|": Patch Set "
operator|+
name|priorPatchSet
operator|.
name|get
argument_list|()
operator|+
literal|" was rebased"
argument_list|)
expr_stmt|;
break|break;
case|case
name|NO_CODE_CHANGE
case|:
name|msgs
operator|.
name|append
argument_list|(
literal|": Commit message was updated"
argument_list|)
expr_stmt|;
break|break;
case|case
name|REWORK
case|:
default|default:
break|break;
block|}
name|msg
operator|.
name|setMessage
argument_list|(
name|msgs
operator|.
name|toString
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
name|msg
return|;
block|}
DECL|method|scanLabels (ReviewDb db, Map<String, Short> approvals)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PatchSetApproval
argument_list|>
name|scanLabels
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|approvals
parameter_list|)
throws|throws
name|OrmException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PatchSetApproval
argument_list|>
name|current
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// We optimize here and only retrieve current when approvals provided
if|if
condition|(
operator|!
name|approvals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|approvalsUtil
operator|.
name|byPatchSetUser
argument_list|(
name|db
argument_list|,
name|changeCtl
argument_list|,
name|priorPatchSet
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|a
operator|.
name|isSubmit
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|LabelType
name|lt
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|a
operator|.
name|getLabelId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lt
operator|!=
literal|null
condition|)
block|{
name|current
operator|.
name|put
argument_list|(
name|lt
operator|.
name|getName
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|current
return|;
block|}
DECL|method|upsertEdit ()
name|PatchSet
operator|.
name|Id
name|upsertEdit
parameter_list|()
block|{
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|cmd
operator|.
name|execute
argument_list|(
name|rp
argument_list|)
expr_stmt|;
block|}
return|return
name|newPatchSet
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|method|insertPatchSet (ReviewDb db)
name|PatchSet
operator|.
name|Id
name|insertPatchSet
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
specifier|final
name|Account
operator|.
name|Id
name|me
init|=
name|currentUser
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footerLines
init|=
name|newCommit
operator|.
name|getFooterLines
argument_list|()
decl_stmt|;
specifier|final
name|MailRecipients
name|recipients
init|=
operator|new
name|MailRecipients
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|approvals
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|changeCtl
argument_list|,
name|newPatchSet
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
decl_stmt|;
name|update
operator|.
name|setPatchSetId
argument_list|(
name|newPatchSet
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|magicBranch
operator|!=
literal|null
condition|)
block|{
name|recipients
operator|.
name|add
argument_list|(
name|magicBranch
operator|.
name|getMailRecipients
argument_list|()
argument_list|)
expr_stmt|;
name|approvals
operator|=
name|magicBranch
operator|.
name|labels
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
init|=
name|magicBranch
operator|.
name|hashtags
decl_stmt|;
if|if
condition|(
operator|!
name|hashtags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ChangeNotes
name|notes
init|=
name|changeCtl
operator|.
name|getNotes
argument_list|()
operator|.
name|load
argument_list|()
decl_stmt|;
name|hashtags
operator|.
name|addAll
argument_list|(
name|notes
operator|.
name|getHashtags
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setHashtags
argument_list|(
name|hashtags
argument_list|)
expr_stmt|;
block|}
block|}
name|recipients
operator|.
name|add
argument_list|(
name|getRecipientsFromFooters
argument_list|(
name|accountResolver
argument_list|,
name|newPatchSet
argument_list|,
name|footerLines
argument_list|)
argument_list|)
expr_stmt|;
name|recipients
operator|.
name|remove
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeKind
name|changeKind
init|=
name|ChangeKind
operator|.
name|REWORK
decl_stmt|;
try|try
block|{
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
operator|||
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"change is closed"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ChangeUtil
operator|.
name|insertAncestors
argument_list|(
name|db
argument_list|,
name|newPatchSet
operator|.
name|getId
argument_list|()
argument_list|,
name|newCommit
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|newPatchSet
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkMergedInto
condition|)
block|{
specifier|final
name|Ref
name|mergedInto
init|=
name|findMergedInto
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|newCommit
argument_list|)
decl_stmt|;
name|mergedIntoRef
operator|=
name|mergedInto
operator|!=
literal|null
condition|?
name|mergedInto
operator|.
name|getName
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
name|ChangeData
name|cd
init|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|changeCtl
argument_list|)
decl_stmt|;
name|MailRecipients
name|oldRecipients
init|=
name|getRecipientsFromReviewers
argument_list|(
name|cd
operator|.
name|reviewers
argument_list|()
argument_list|)
decl_stmt|;
name|approvalCopier
operator|.
name|copy
argument_list|(
name|db
argument_list|,
name|changeCtl
argument_list|,
name|newPatchSet
argument_list|)
expr_stmt|;
name|approvalsUtil
operator|.
name|addReviewers
argument_list|(
name|db
argument_list|,
name|update
argument_list|,
name|labelTypes
argument_list|,
name|change
argument_list|,
name|newPatchSet
argument_list|,
name|info
argument_list|,
name|recipients
operator|.
name|getReviewers
argument_list|()
argument_list|,
name|oldRecipients
operator|.
name|getAll
argument_list|()
argument_list|)
expr_stmt|;
name|approvalsUtil
operator|.
name|addApprovals
argument_list|(
name|db
argument_list|,
name|update
argument_list|,
name|labelTypes
argument_list|,
name|newPatchSet
argument_list|,
name|info
argument_list|,
name|changeCtl
argument_list|,
name|approvals
argument_list|)
expr_stmt|;
name|recipients
operator|.
name|add
argument_list|(
name|oldRecipients
argument_list|)
expr_stmt|;
name|RevCommit
name|priorCommit
init|=
name|revisions
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
name|priorPatchSet
argument_list|)
decl_stmt|;
name|changeKind
operator|=
name|changeKindCache
operator|.
name|getChangeKind
argument_list|(
name|projectControl
operator|.
name|getProjectState
argument_list|()
argument_list|,
name|repo
argument_list|,
name|priorCommit
argument_list|,
name|newCommit
argument_list|)
expr_stmt|;
name|cmUtil
operator|.
name|addChangeMessage
argument_list|(
name|db
argument_list|,
name|update
argument_list|,
name|newChangeMessage
argument_list|(
name|db
argument_list|,
name|changeKind
argument_list|,
name|approvals
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergedIntoRef
operator|==
literal|null
condition|)
block|{
comment|// Change should be new, so it can go through review again.
comment|//
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|change
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|equals
argument_list|(
name|priorPatchSet
argument_list|)
condition|)
block|{
return|return
name|change
return|;
block|}
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|topic
operator|!=
literal|null
condition|)
block|{
name|change
operator|.
name|setTopic
argument_list|(
name|magicBranch
operator|.
name|topic
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|DRAFT
operator|&&
name|newPatchSet
operator|.
name|isDraft
argument_list|()
condition|)
block|{
comment|// Leave in draft status.
block|}
else|else
block|{
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
name|info
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|idList
init|=
name|newCommit
operator|.
name|getFooterLines
argument_list|(
name|CHANGE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|idList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|change
operator|.
name|setKey
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
literal|"I"
operator|+
name|newCommit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|change
operator|.
name|setKey
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|idList
operator|.
name|get
argument_list|(
name|idList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|change
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|newPatchSet
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"change is closed"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
name|mergedIntoRef
operator|!=
literal|null
condition|)
block|{
comment|// Change was already submitted to a branch, close it.
comment|//
name|markChangeMergedByPush
argument_list|(
name|db
argument_list|,
name|this
argument_list|,
name|changeCtl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|cmd
operator|.
name|execute
argument_list|(
name|rp
argument_list|)
expr_stmt|;
block|}
name|CheckedFuture
argument_list|<
name|?
argument_list|,
name|IOException
argument_list|>
name|f
init|=
name|indexer
operator|.
name|indexAsync
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|changeKind
operator|!=
name|ChangeKind
operator|.
name|TRIVIAL_REBASE
condition|)
block|{
name|workQueue
operator|.
name|getDefaultQueue
argument_list|()
operator|.
name|submit
argument_list|(
name|requestScopePropagator
operator|.
name|wrap
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ReplacePatchSetSender
name|cm
init|=
name|replacePatchSetFactory
operator|.
name|create
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|cm
operator|.
name|setFrom
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setPatchSet
argument_list|(
name|newPatchSet
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setChangeMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addReviewers
argument_list|(
name|recipients
operator|.
name|getReviewers
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addExtraCC
argument_list|(
name|recipients
operator|.
name|getCcOnly
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email for new patch set "
operator|+
name|newPatchSet
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mergedIntoRef
operator|!=
literal|null
condition|)
block|{
name|sendMergedEmail
argument_list|(
name|ReplaceRequest
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"send-email newpatchset"
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|checkedGet
argument_list|()
expr_stmt|;
name|gitRefUpdated
operator|.
name|fire
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|newPatchSet
operator|.
name|getRefName
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|newCommit
argument_list|)
expr_stmt|;
name|hooks
operator|.
name|doPatchsetCreatedHook
argument_list|(
name|change
argument_list|,
name|newPatchSet
argument_list|,
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergedIntoRef
operator|!=
literal|null
condition|)
block|{
name|hooks
operator|.
name|doChangeMergedHook
argument_list|(
name|change
argument_list|,
name|currentUser
operator|.
name|getAccount
argument_list|()
argument_list|,
name|newPatchSet
argument_list|,
name|db
argument_list|,
name|newCommit
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|submit
condition|)
block|{
name|submit
argument_list|(
name|changeCtl
argument_list|,
name|newPatchSet
argument_list|)
expr_stmt|;
block|}
return|return
name|newPatchSet
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
DECL|method|refs (Change.Id changeId)
specifier|private
name|List
argument_list|<
name|Ref
argument_list|>
name|refs
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
block|{
return|return
name|refsByChange
argument_list|()
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
return|;
block|}
DECL|method|initChangeRefMaps ()
specifier|private
name|void
name|initChangeRefMaps
parameter_list|()
block|{
if|if
condition|(
name|refsByChange
operator|==
literal|null
condition|)
block|{
name|int
name|estRefsPerChange
init|=
literal|4
decl_stmt|;
name|refsById
operator|=
name|HashMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
name|refsByChange
operator|=
name|ArrayListMultimap
operator|.
name|create
argument_list|(
name|allRefs
operator|.
name|size
argument_list|()
operator|/
name|estRefsPerChange
argument_list|,
name|estRefsPerChange
argument_list|)
expr_stmt|;
for|for
control|(
name|Ref
name|ref
range|:
name|allRefs
operator|.
name|values
argument_list|()
control|)
block|{
name|ObjectId
name|obj
init|=
name|ref
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|PatchSet
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|psId
operator|!=
literal|null
condition|)
block|{
name|refsById
operator|.
name|put
argument_list|(
name|obj
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|refsByChange
operator|.
name|put
argument_list|(
name|psId
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|refsByChange ()
specifier|private
name|ListMultimap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|Ref
argument_list|>
name|refsByChange
parameter_list|()
block|{
name|initChangeRefMaps
argument_list|()
expr_stmt|;
return|return
name|refsByChange
return|;
block|}
DECL|method|changeRefsById ()
specifier|private
name|SetMultimap
argument_list|<
name|ObjectId
argument_list|,
name|Ref
argument_list|>
name|changeRefsById
parameter_list|()
block|{
name|initChangeRefMaps
argument_list|()
expr_stmt|;
return|return
name|refsById
return|;
block|}
DECL|method|parentsEqual (RevCommit a, RevCommit b)
specifier|static
name|boolean
name|parentsEqual
parameter_list|(
name|RevCommit
name|a
parameter_list|,
name|RevCommit
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|getParentCount
argument_list|()
operator|!=
name|b
operator|.
name|getParentCount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|getParentCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getParent
argument_list|(
name|i
argument_list|)
operator|!=
name|b
operator|.
name|getParent
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|authorEqual (RevCommit a, RevCommit b)
specifier|static
name|boolean
name|authorEqual
parameter_list|(
name|RevCommit
name|a
parameter_list|,
name|RevCommit
name|b
parameter_list|)
block|{
name|PersonIdent
name|aAuthor
init|=
name|a
operator|.
name|getAuthorIdent
argument_list|()
decl_stmt|;
name|PersonIdent
name|bAuthor
init|=
name|b
operator|.
name|getAuthorIdent
argument_list|()
decl_stmt|;
if|if
condition|(
name|aAuthor
operator|==
literal|null
operator|&&
name|bAuthor
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|aAuthor
operator|==
literal|null
operator|||
name|bAuthor
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|eq
argument_list|(
name|aAuthor
operator|.
name|getName
argument_list|()
argument_list|,
name|bAuthor
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|eq
argument_list|(
name|aAuthor
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
name|bAuthor
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
return|;
block|}
DECL|method|eq (String a, String b)
specifier|static
name|boolean
name|eq
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
operator|&&
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|==
literal|null
operator|||
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
DECL|method|findMergedInto (final String first, final RevCommit commit)
specifier|private
name|Ref
name|findMergedInto
parameter_list|(
specifier|final
name|String
name|first
parameter_list|,
specifier|final
name|RevCommit
name|commit
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|all
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|ALL
argument_list|)
decl_stmt|;
name|Ref
name|firstRef
init|=
name|all
operator|.
name|get
argument_list|(
name|first
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstRef
operator|!=
literal|null
operator|&&
name|isMergedInto
argument_list|(
name|commit
argument_list|,
name|firstRef
argument_list|)
condition|)
block|{
return|return
name|firstRef
return|;
block|}
for|for
control|(
name|Ref
name|ref
range|:
name|all
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|isHead
argument_list|(
name|ref
argument_list|)
condition|)
block|{
if|if
condition|(
name|isMergedInto
argument_list|(
name|commit
argument_list|,
name|ref
argument_list|)
condition|)
block|{
return|return
name|ref
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Can't check for already submitted change"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|isMergedInto (final RevCommit commit, final Ref ref)
specifier|private
name|boolean
name|isMergedInto
parameter_list|(
specifier|final
name|RevCommit
name|commit
parameter_list|,
specifier|final
name|Ref
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RevWalk
name|rw
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
return|return
name|rw
operator|.
name|isMergedInto
argument_list|(
name|commit
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|validateNewCommits (RefControl ctl, ReceiveCommand cmd)
specifier|private
name|void
name|validateNewCommits
parameter_list|(
name|RefControl
name|ctl
parameter_list|,
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
if|if
condition|(
name|ctl
operator|.
name|canForgeAuthor
argument_list|()
operator|&&
name|ctl
operator|.
name|canForgeCommitter
argument_list|()
operator|&&
name|ctl
operator|.
name|canForgeGerritServerIdentity
argument_list|()
operator|&&
name|ctl
operator|.
name|canUploadMerges
argument_list|()
operator|&&
operator|!
name|projectControl
operator|.
name|getProjectState
argument_list|()
operator|.
name|isUseSignedOffBy
argument_list|()
operator|&&
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|rejectCommits
argument_list|)
operator|&&
operator|!
name|RefNames
operator|.
name|REFS_CONFIG
operator|.
name|equals
argument_list|(
name|ctl
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|&&
operator|!
operator|(
name|MagicBranch
operator|.
name|isMagicBranch
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|||
name|NEW_PATCHSET
operator|.
name|matcher
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
name|boolean
name|defaultName
init|=
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|currentUser
operator|.
name|getAccount
argument_list|()
operator|.
name|getFullName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RevWalk
name|walk
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|walk
operator|.
name|reset
argument_list|()
expr_stmt|;
name|walk
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|NONE
argument_list|)
expr_stmt|;
try|try
block|{
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|existing
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|RevObject
name|parsedObject
init|=
name|walk
operator|.
name|parseAny
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|parsedObject
operator|instanceof
name|RevCommit
operator|)
condition|)
block|{
return|return;
block|}
name|walk
operator|.
name|markStart
argument_list|(
operator|(
name|RevCommit
operator|)
name|parsedObject
argument_list|)
expr_stmt|;
name|markHeadsAsUninteresting
argument_list|(
name|walk
argument_list|,
name|existing
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|walk
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existing
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|!
name|validCommit
argument_list|(
name|ctl
argument_list|,
name|cmd
argument_list|,
name|c
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|defaultName
operator|&&
name|currentUser
operator|.
name|hasEmailAddress
argument_list|(
name|c
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|Account
name|a
init|=
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|a
operator|.
name|getFullName
argument_list|()
argument_list|)
condition|)
block|{
name|a
operator|.
name|setFullName
argument_list|(
name|c
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|currentUser
operator|.
name|getAccount
argument_list|()
operator|.
name|setFullName
argument_list|(
name|a
operator|.
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
name|accountCache
operator|.
name|evict
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot default full_name"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|defaultName
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_MISSING_OBJECT
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Invalid pack upload; one or more objects weren't sent"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validCommit (final RefControl ctl, final ReceiveCommand cmd, final RevCommit c)
specifier|private
name|boolean
name|validCommit
parameter_list|(
specifier|final
name|RefControl
name|ctl
parameter_list|,
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|,
specifier|final
name|RevCommit
name|c
parameter_list|)
block|{
if|if
condition|(
name|validCommits
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|CommitReceivedEvent
name|receiveEvent
init|=
operator|new
name|CommitReceivedEvent
argument_list|(
name|cmd
argument_list|,
name|project
argument_list|,
name|ctl
operator|.
name|getRefName
argument_list|()
argument_list|,
name|c
argument_list|,
name|currentUser
argument_list|)
decl_stmt|;
name|CommitValidators
name|commitValidators
init|=
name|commitValidatorsFactory
operator|.
name|create
argument_list|(
name|ctl
argument_list|,
name|sshInfo
argument_list|,
name|repo
argument_list|)
decl_stmt|;
try|try
block|{
name|messages
operator|.
name|addAll
argument_list|(
name|commitValidators
operator|.
name|validateForReceiveCommits
argument_list|(
name|receiveEvent
argument_list|,
name|rejectCommits
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitValidationException
name|e
parameter_list|)
block|{
name|messages
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getMessages
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|validCommits
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|autoCloseChanges (final ReceiveCommand cmd)
specifier|private
name|void
name|autoCloseChanges
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
specifier|final
name|RevWalk
name|rw
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
try|try
block|{
name|RevCommit
name|newTip
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
decl_stmt|;
name|Branch
operator|.
name|NameKey
name|branch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|newTip
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ObjectId
operator|.
name|zeroId
argument_list|()
operator|.
name|equals
argument_list|(
name|cmd
operator|.
name|getOldId
argument_list|()
argument_list|)
condition|)
block|{
name|rw
operator|.
name|markUninteresting
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getOldId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SetMultimap
argument_list|<
name|ObjectId
argument_list|,
name|Ref
argument_list|>
name|byCommit
init|=
name|changeRefsById
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Change
operator|.
name|Key
argument_list|,
name|Change
argument_list|>
name|byKey
init|=
literal|null
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ReplaceRequest
argument_list|>
name|toClose
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RevCommit
name|c
init|;
operator|(
name|c
operator|=
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
for|for
control|(
name|Ref
name|ref
range|:
name|byCommit
operator|.
name|get
argument_list|(
name|c
operator|.
name|copy
argument_list|()
argument_list|)
control|)
block|{
name|Change
operator|.
name|Key
name|closedChange
init|=
name|closeChange
argument_list|(
name|cmd
argument_list|,
name|PatchSet
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|closeProgress
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|closedChange
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|byKey
operator|==
literal|null
condition|)
block|{
name|byKey
operator|=
name|openChangesByBranch
argument_list|(
name|branch
argument_list|)
expr_stmt|;
block|}
name|byKey
operator|.
name|remove
argument_list|(
name|closedChange
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|String
name|changeId
range|:
name|c
operator|.
name|getFooterLines
argument_list|(
name|CHANGE_ID
argument_list|)
control|)
block|{
if|if
condition|(
name|byKey
operator|==
literal|null
condition|)
block|{
name|byKey
operator|=
name|openChangesByBranch
argument_list|(
name|branch
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Change
name|onto
init|=
name|byKey
operator|.
name|get
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|changeId
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|onto
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ReplaceRequest
name|req
init|=
operator|new
name|ReplaceRequest
argument_list|(
name|onto
operator|.
name|getId
argument_list|()
argument_list|,
name|c
argument_list|,
name|cmd
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|req
operator|.
name|change
operator|=
name|onto
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
for|for
control|(
specifier|final
name|ReplaceRequest
name|req
range|:
name|toClose
control|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|psi
init|=
name|req
operator|.
name|validate
argument_list|(
literal|true
argument_list|)
condition|?
name|req
operator|.
name|insertPatchSet
argument_list|()
operator|.
name|checkedGet
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|psi
operator|!=
literal|null
condition|)
block|{
name|closeChange
argument_list|(
name|req
operator|.
name|inputCommand
argument_list|,
name|psi
argument_list|,
name|req
operator|.
name|newCommit
argument_list|)
expr_stmt|;
name|closeProgress
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Update superproject gitlinks if required.
name|subOpFactory
operator|.
name|create
argument_list|(
name|branch
argument_list|,
name|newTip
argument_list|,
name|rw
argument_list|,
name|repo
argument_list|,
name|project
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Change
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|CodeReviewCommit
argument_list|>
argument_list|()
argument_list|,
name|currentUser
operator|.
name|getAccount
argument_list|()
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InsertException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't insert patchset"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't scan for changes to close"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't scan for changes to close"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SubmoduleException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't complete git links check"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|closeChange (final ReceiveCommand cmd, final PatchSet.Id psi, final RevCommit commit)
specifier|private
name|Change
operator|.
name|Key
name|closeChange
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|,
specifier|final
name|PatchSet
operator|.
name|Id
name|psi
parameter_list|,
specifier|final
name|RevCommit
name|commit
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
specifier|final
name|String
name|refName
init|=
name|cmd
operator|.
name|getRefName
argument_list|()
decl_stmt|;
specifier|final
name|Change
operator|.
name|Id
name|cid
init|=
name|psi
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
specifier|final
name|Change
name|change
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|cid
argument_list|)
decl_stmt|;
specifier|final
name|PatchSet
name|ps
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psi
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
operator|||
name|ps
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|project
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|psi
operator|+
literal|" is missing"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|MERGED
operator|||
name|change
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
operator|||
operator|!
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|refName
argument_list|)
condition|)
block|{
comment|// If it's already merged or the commit is not aimed for
comment|// this change's destination, don't make further updates.
comment|//
return|return
literal|null
return|;
block|}
name|ReplaceRequest
name|result
init|=
operator|new
name|ReplaceRequest
argument_list|(
name|cid
argument_list|,
name|commit
argument_list|,
name|cmd
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|result
operator|.
name|change
operator|=
name|change
expr_stmt|;
name|result
operator|.
name|changeCtl
operator|=
name|projectControl
operator|.
name|controlFor
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|result
operator|.
name|newPatchSet
operator|=
name|ps
expr_stmt|;
name|result
operator|.
name|info
operator|=
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|commit
argument_list|,
name|psi
argument_list|)
expr_stmt|;
name|result
operator|.
name|mergedIntoRef
operator|=
name|refName
expr_stmt|;
name|markChangeMergedByPush
argument_list|(
name|db
argument_list|,
name|result
argument_list|,
name|result
operator|.
name|changeCtl
argument_list|)
expr_stmt|;
name|hooks
operator|.
name|doChangeMergedHook
argument_list|(
name|change
argument_list|,
name|currentUser
operator|.
name|getAccount
argument_list|()
argument_list|,
name|result
operator|.
name|newPatchSet
argument_list|,
name|db
argument_list|,
name|commit
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sendMergedEmail
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|change
operator|.
name|getKey
argument_list|()
return|;
block|}
DECL|method|openChangesByBranch (Branch.NameKey branch)
specifier|private
name|Map
argument_list|<
name|Change
operator|.
name|Key
argument_list|,
name|Change
argument_list|>
name|openChangesByBranch
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Key
argument_list|,
name|Change
argument_list|>
name|r
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byBranchOpen
argument_list|(
name|branch
argument_list|)
control|)
block|{
name|r
operator|.
name|put
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|,
name|cd
operator|.
name|change
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
DECL|method|markChangeMergedByPush (ReviewDb db, final ReplaceRequest result, ChangeControl control)
specifier|private
name|void
name|markChangeMergedByPush
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|ReplaceRequest
name|result
parameter_list|,
name|ChangeControl
name|control
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|result
operator|.
name|change
operator|.
name|getId
argument_list|()
decl_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|Change
name|change
decl_stmt|;
name|ChangeUpdate
name|update
decl_stmt|;
try|try
block|{
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|id
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
name|result
operator|.
name|info
argument_list|)
expr_stmt|;
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
return|return
name|change
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|String
name|mergedIntoRef
init|=
name|result
operator|.
name|mergedIntoRef
decl_stmt|;
name|StringBuilder
name|msgBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msgBuf
operator|.
name|append
argument_list|(
literal|"Change has been successfully pushed"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mergedIntoRef
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|msgBuf
operator|.
name|append
argument_list|(
literal|" into "
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergedIntoRef
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
condition|)
block|{
name|msgBuf
operator|.
name|append
argument_list|(
literal|"branch "
argument_list|)
expr_stmt|;
name|msgBuf
operator|.
name|append
argument_list|(
name|Repository
operator|.
name|shortenRefName
argument_list|(
name|mergedIntoRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msgBuf
operator|.
name|append
argument_list|(
name|mergedIntoRef
argument_list|)
expr_stmt|;
block|}
block|}
name|msgBuf
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|ChangeMessage
name|msg
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|id
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|change
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|,
name|result
operator|.
name|info
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setMessage
argument_list|(
name|msgBuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|=
name|updateFactory
operator|.
name|create
argument_list|(
name|control
argument_list|,
name|change
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|cmUtil
operator|.
name|addChangeMessage
argument_list|(
name|db
argument_list|,
name|update
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|sendMergedEmail (final ReplaceRequest result)
specifier|private
name|void
name|sendMergedEmail
parameter_list|(
specifier|final
name|ReplaceRequest
name|result
parameter_list|)
block|{
name|workQueue
operator|.
name|getDefaultQueue
argument_list|()
operator|.
name|submit
argument_list|(
name|requestScopePropagator
operator|.
name|wrap
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
specifier|final
name|MergedSender
name|cm
init|=
name|mergedSenderFactory
operator|.
name|create
argument_list|(
name|result
operator|.
name|changeCtl
argument_list|)
decl_stmt|;
name|cm
operator|.
name|setFrom
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setPatchSet
argument_list|(
name|result
operator|.
name|newPatchSet
argument_list|,
name|result
operator|.
name|info
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|psi
init|=
name|result
operator|.
name|newPatchSet
operator|.
name|getId
argument_list|()
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email for submitted patch set "
operator|+
name|psi
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"send-email merged"
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|toRevId (final RevCommit src)
specifier|private
specifier|static
name|RevId
name|toRevId
parameter_list|(
specifier|final
name|RevCommit
name|src
parameter_list|)
block|{
return|return
operator|new
name|RevId
argument_list|(
name|src
operator|.
name|getId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
DECL|method|reject (final ReceiveCommand cmd)
specifier|private
name|void
name|reject
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"prohibited by Gerrit"
argument_list|)
expr_stmt|;
block|}
DECL|method|reject (final ReceiveCommand cmd, final String why)
specifier|private
name|void
name|reject
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|,
specifier|final
name|String
name|why
parameter_list|)
block|{
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_OTHER_REASON
argument_list|,
name|why
argument_list|)
expr_stmt|;
name|commandProgress
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|isHead (final Ref ref)
specifier|private
specifier|static
name|boolean
name|isHead
parameter_list|(
specifier|final
name|Ref
name|ref
parameter_list|)
block|{
return|return
name|ref
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
return|;
block|}
DECL|method|isHead (final ReceiveCommand cmd)
specifier|private
specifier|static
name|boolean
name|isHead
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
return|return
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
return|;
block|}
DECL|method|isConfig (final ReceiveCommand cmd)
specifier|private
specifier|static
name|boolean
name|isConfig
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
return|return
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|equals
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
return|;
block|}
block|}
end_class

end_unit

