begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MultiProgressMonitor
operator|.
name|UNKNOWN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|R_HEADS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
operator|.
name|NOT_ATTEMPTED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
operator|.
name|OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
operator|.
name|REJECTED_MISSING_OBJECT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
operator|.
name|REJECTED_NONFASTFORWARD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
operator|.
name|REJECTED_OTHER_REASON
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CheckedFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|ChangeHooks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Capable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|NoSuchAccountException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetAncestor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountResolver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|TrackingFooters
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|CommitReceivedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MultiProgressMonitor
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidationResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidationListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|CreateChangeSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MergedSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|ReplacePatchSetSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|PluginLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|SshInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|MagicBranch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestScopePropagator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|AtomicUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|HostKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AbbreviatedObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BatchRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|filter
operator|.
name|RevFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|AdvertiseRefsHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|AdvertiseRefsHookChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceivePack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|SystemReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/** Receives change upload using the Git receive-pack protocol. */
end_comment

begin_class
DECL|class|ReceiveCommits
specifier|public
class|class
name|ReceiveCommits
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReceiveCommits
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NEW_PATCHSET
specifier|private
specifier|static
specifier|final
name|Pattern
name|NEW_PATCHSET
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^refs/changes/(?:[0-9][0-9]/)?([1-9][0-9]*)(?:/new)?$"
argument_list|)
decl_stmt|;
DECL|field|REVIEWED_BY
specifier|private
specifier|static
specifier|final
name|FooterKey
name|REVIEWED_BY
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Reviewed-by"
argument_list|)
decl_stmt|;
DECL|field|TESTED_BY
specifier|private
specifier|static
specifier|final
name|FooterKey
name|TESTED_BY
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Tested-by"
argument_list|)
decl_stmt|;
DECL|field|CHANGE_ID
specifier|private
specifier|static
specifier|final
name|FooterKey
name|CHANGE_ID
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Change-Id"
argument_list|)
decl_stmt|;
DECL|field|COMMAND_REJECTION_MESSAGE_FOOTER
specifier|private
specifier|static
specifier|final
name|String
name|COMMAND_REJECTION_MESSAGE_FOOTER
init|=
literal|"Please read the documentation and contact an administrator\n"
operator|+
literal|"if you feel the configuration is incorrect"
decl_stmt|;
DECL|enum|Error
specifier|private
enum|enum
name|Error
block|{
DECL|enumConstant|CONFIG_UPDATE
name|CONFIG_UPDATE
argument_list|(
literal|"You are not allowed to perform this operation.\n"
operator|+
literal|"Configuration changes can only be pushed by project owners\n"
operator|+
literal|"who also have 'Push' rights on "
operator|+
name|GitRepositoryManager
operator|.
name|REF_CONFIG
argument_list|)
block|,
DECL|enumConstant|UPDATE
name|UPDATE
argument_list|(
literal|"You are not allowed to perform this operation.\n"
operator|+
literal|"To push into this reference you need 'Push' rights."
argument_list|)
block|,
DECL|enumConstant|DELETE
name|DELETE
argument_list|(
literal|"You need 'Push' rights with the 'Force Push'\n"
operator|+
literal|"flag set to delete references."
argument_list|)
block|,
DECL|enumConstant|CODE_REVIEW
name|CODE_REVIEW
argument_list|(
literal|"You need 'Push' rights to upload code review requests.\n"
operator|+
literal|"Verify that you are pushing to the right branch."
argument_list|)
block|,
DECL|enumConstant|CREATE
name|CREATE
argument_list|(
literal|"You are not allowed to perform this operation.\n"
operator|+
literal|"To create new references you need 'Create Reference' rights."
argument_list|)
block|;
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
DECL|method|Error (String value)
name|Error
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|get ()
specifier|public
name|String
name|get
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
DECL|interface|Factory
interface|interface
name|Factory
block|{
DECL|method|create (ProjectControl projectControl, Repository repository)
name|ReceiveCommits
name|create
parameter_list|(
name|ProjectControl
name|projectControl
parameter_list|,
name|Repository
name|repository
parameter_list|)
function_decl|;
block|}
DECL|interface|MessageSender
specifier|public
interface|interface
name|MessageSender
block|{
DECL|method|sendMessage (String what)
name|void
name|sendMessage
parameter_list|(
name|String
name|what
parameter_list|)
function_decl|;
DECL|method|sendError (String what)
name|void
name|sendError
parameter_list|(
name|String
name|what
parameter_list|)
function_decl|;
DECL|method|sendBytes (byte[] what)
name|void
name|sendBytes
parameter_list|(
name|byte
index|[]
name|what
parameter_list|)
function_decl|;
DECL|method|sendBytes (byte[] what, int off, int len)
name|void
name|sendBytes
parameter_list|(
name|byte
index|[]
name|what
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
DECL|method|flush ()
name|void
name|flush
parameter_list|()
function_decl|;
block|}
DECL|class|ReceivePackMessageSender
specifier|private
class|class
name|ReceivePackMessageSender
implements|implements
name|MessageSender
block|{
annotation|@
name|Override
DECL|method|sendMessage (String what)
specifier|public
name|void
name|sendMessage
parameter_list|(
name|String
name|what
parameter_list|)
block|{
name|rp
operator|.
name|sendMessage
argument_list|(
name|what
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendError (String what)
specifier|public
name|void
name|sendError
parameter_list|(
name|String
name|what
parameter_list|)
block|{
name|rp
operator|.
name|sendError
argument_list|(
name|what
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendBytes (byte[] what)
specifier|public
name|void
name|sendBytes
parameter_list|(
name|byte
index|[]
name|what
parameter_list|)
block|{
name|sendBytes
argument_list|(
name|what
argument_list|,
literal|0
argument_list|,
name|what
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendBytes (byte[] what, int off, int len)
specifier|public
name|void
name|sendBytes
parameter_list|(
name|byte
index|[]
name|what
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
try|try
block|{
name|rp
operator|.
name|getMessageOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|what
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore write failures (matching JGit behavior).
block|}
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{
try|try
block|{
name|rp
operator|.
name|getMessageOutputStream
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore write failures (matching JGit behavior).
block|}
block|}
block|}
DECL|class|Message
specifier|private
specifier|static
class|class
name|Message
block|{
DECL|field|message
specifier|private
specifier|final
name|String
name|message
decl_stmt|;
DECL|field|isError
specifier|private
specifier|final
name|boolean
name|isError
decl_stmt|;
DECL|method|Message (final String message, final boolean isError)
specifier|private
name|Message
parameter_list|(
specifier|final
name|String
name|message
parameter_list|,
specifier|final
name|boolean
name|isError
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|isError
operator|=
name|isError
expr_stmt|;
block|}
block|}
DECL|field|ORM_EXCEPTION
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|Exception
argument_list|,
name|OrmException
argument_list|>
name|ORM_EXCEPTION
init|=
operator|new
name|Function
argument_list|<
name|Exception
argument_list|,
name|OrmException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OrmException
name|apply
parameter_list|(
name|Exception
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|instanceof
name|OrmException
condition|)
block|{
return|return
operator|(
name|OrmException
operator|)
name|input
return|;
block|}
return|return
operator|new
name|OrmException
argument_list|(
literal|"Error updating database"
argument_list|,
name|input
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|reviewerId
specifier|private
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewerId
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|ccId
specifier|private
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|ccId
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|currentUser
specifier|private
specifier|final
name|IdentifiedUser
name|currentUser
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|ReviewDb
name|db
decl_stmt|;
DECL|field|schemaFactory
specifier|private
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
decl_stmt|;
DECL|field|accountResolver
specifier|private
specifier|final
name|AccountResolver
name|accountResolver
decl_stmt|;
DECL|field|createChangeSenderFactory
specifier|private
specifier|final
name|CreateChangeSender
operator|.
name|Factory
name|createChangeSenderFactory
decl_stmt|;
DECL|field|mergedSenderFactory
specifier|private
specifier|final
name|MergedSender
operator|.
name|Factory
name|mergedSenderFactory
decl_stmt|;
DECL|field|replacePatchSetFactory
specifier|private
specifier|final
name|ReplacePatchSetSender
operator|.
name|Factory
name|replacePatchSetFactory
decl_stmt|;
DECL|field|replication
specifier|private
specifier|final
name|GitReferenceUpdated
name|replication
decl_stmt|;
DECL|field|patchSetInfoFactory
specifier|private
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
decl_stmt|;
DECL|field|hooks
specifier|private
specifier|final
name|ChangeHooks
name|hooks
decl_stmt|;
DECL|field|approvalsUtil
specifier|private
specifier|final
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|canonicalWebUrl
specifier|private
specifier|final
name|String
name|canonicalWebUrl
decl_stmt|;
DECL|field|gerritIdent
specifier|private
specifier|final
name|PersonIdent
name|gerritIdent
decl_stmt|;
DECL|field|trackingFooters
specifier|private
specifier|final
name|TrackingFooters
name|trackingFooters
decl_stmt|;
DECL|field|tagCache
specifier|private
specifier|final
name|TagCache
name|tagCache
decl_stmt|;
DECL|field|workQueue
specifier|private
specifier|final
name|WorkQueue
name|workQueue
decl_stmt|;
DECL|field|changeUpdateExector
specifier|private
specifier|final
name|ListeningExecutorService
name|changeUpdateExector
decl_stmt|;
DECL|field|requestScopePropagator
specifier|private
specifier|final
name|RequestScopePropagator
name|requestScopePropagator
decl_stmt|;
DECL|field|sshInfo
specifier|private
specifier|final
name|SshInfo
name|sshInfo
decl_stmt|;
DECL|field|projectControl
specifier|private
specifier|final
name|ProjectControl
name|projectControl
decl_stmt|;
DECL|field|project
specifier|private
specifier|final
name|Project
name|project
decl_stmt|;
DECL|field|repo
specifier|private
specifier|final
name|Repository
name|repo
decl_stmt|;
DECL|field|rp
specifier|private
specifier|final
name|ReceivePack
name|rp
decl_stmt|;
DECL|field|rejectCommits
specifier|private
specifier|final
name|NoteMap
name|rejectCommits
decl_stmt|;
DECL|field|newChange
specifier|private
name|ReceiveCommand
name|newChange
decl_stmt|;
DECL|field|destBranch
specifier|private
name|Branch
operator|.
name|NameKey
name|destBranch
decl_stmt|;
DECL|field|destBranchCtl
specifier|private
name|RefControl
name|destBranchCtl
decl_stmt|;
DECL|field|newChanges
specifier|private
name|List
argument_list|<
name|CreateRequest
argument_list|>
name|newChanges
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|replaceByChange
specifier|private
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ReplaceRequest
argument_list|>
name|replaceByChange
init|=
operator|new
name|HashMap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ReplaceRequest
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|replaceByCommit
specifier|private
specifier|final
name|Map
argument_list|<
name|RevCommit
argument_list|,
name|ReplaceRequest
argument_list|>
name|replaceByCommit
init|=
operator|new
name|HashMap
argument_list|<
name|RevCommit
argument_list|,
name|ReplaceRequest
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|existingObjects
specifier|private
name|Collection
argument_list|<
name|ObjectId
argument_list|>
name|existingObjects
decl_stmt|;
DECL|field|refsById
specifier|private
name|Map
argument_list|<
name|ObjectId
argument_list|,
name|Ref
argument_list|>
name|refsById
decl_stmt|;
DECL|field|destTopicName
specifier|private
name|String
name|destTopicName
decl_stmt|;
DECL|field|subOpFactory
specifier|private
specifier|final
name|SubmoduleOp
operator|.
name|Factory
name|subOpFactory
decl_stmt|;
DECL|field|messages
specifier|private
specifier|final
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|errors
specifier|private
name|ListMultimap
argument_list|<
name|Error
argument_list|,
name|String
argument_list|>
name|errors
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|field|newProgress
specifier|private
name|Task
name|newProgress
decl_stmt|;
DECL|field|replaceProgress
specifier|private
name|Task
name|replaceProgress
decl_stmt|;
DECL|field|closeProgress
specifier|private
name|Task
name|closeProgress
decl_stmt|;
DECL|field|commandProgress
specifier|private
name|Task
name|commandProgress
decl_stmt|;
DECL|field|messageSender
specifier|private
name|MessageSender
name|messageSender
decl_stmt|;
DECL|field|batch
specifier|private
name|BatchRefUpdate
name|batch
decl_stmt|;
DECL|field|commitValidators
specifier|private
specifier|final
name|DynamicSet
argument_list|<
name|CommitValidationListener
argument_list|>
name|commitValidators
decl_stmt|;
DECL|field|pluginLoader
specifier|private
specifier|final
name|PluginLoader
name|pluginLoader
decl_stmt|;
annotation|@
name|Inject
DECL|method|ReceiveCommits (final ReviewDb db, final SchemaFactory<ReviewDb> schemaFactory, final AccountResolver accountResolver, final CreateChangeSender.Factory createChangeSenderFactory, final MergedSender.Factory mergedSenderFactory, final ReplacePatchSetSender.Factory replacePatchSetFactory, final GitReferenceUpdated replication, final PatchSetInfoFactory patchSetInfoFactory, final ChangeHooks hooks, final ApprovalsUtil approvalsUtil, final ProjectCache projectCache, final GitRepositoryManager repoManager, final TagCache tagCache, final ChangeCache changeCache, @CanonicalWebUrl @Nullable final String canonicalWebUrl, @GerritPersonIdent final PersonIdent gerritIdent, final TrackingFooters trackingFooters, final WorkQueue workQueue, @ChangeUpdateExecutor ListeningExecutorService changeUpdateExector, final RequestScopePropagator requestScopePropagator, final SshInfo sshInfo, final DynamicSet<CommitValidationListener> commitValidationListeners, @Assisted final ProjectControl projectControl, @Assisted final Repository repo, final SubmoduleOp.Factory subOpFactory, final PluginLoader pluginLoader)
name|ReceiveCommits
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
parameter_list|,
specifier|final
name|AccountResolver
name|accountResolver
parameter_list|,
specifier|final
name|CreateChangeSender
operator|.
name|Factory
name|createChangeSenderFactory
parameter_list|,
specifier|final
name|MergedSender
operator|.
name|Factory
name|mergedSenderFactory
parameter_list|,
specifier|final
name|ReplacePatchSetSender
operator|.
name|Factory
name|replacePatchSetFactory
parameter_list|,
specifier|final
name|GitReferenceUpdated
name|replication
parameter_list|,
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
parameter_list|,
specifier|final
name|ChangeHooks
name|hooks
parameter_list|,
specifier|final
name|ApprovalsUtil
name|approvalsUtil
parameter_list|,
specifier|final
name|ProjectCache
name|projectCache
parameter_list|,
specifier|final
name|GitRepositoryManager
name|repoManager
parameter_list|,
specifier|final
name|TagCache
name|tagCache
parameter_list|,
specifier|final
name|ChangeCache
name|changeCache
parameter_list|,
annotation|@
name|CanonicalWebUrl
annotation|@
name|Nullable
specifier|final
name|String
name|canonicalWebUrl
parameter_list|,
annotation|@
name|GerritPersonIdent
specifier|final
name|PersonIdent
name|gerritIdent
parameter_list|,
specifier|final
name|TrackingFooters
name|trackingFooters
parameter_list|,
specifier|final
name|WorkQueue
name|workQueue
parameter_list|,
annotation|@
name|ChangeUpdateExecutor
name|ListeningExecutorService
name|changeUpdateExector
parameter_list|,
specifier|final
name|RequestScopePropagator
name|requestScopePropagator
parameter_list|,
specifier|final
name|SshInfo
name|sshInfo
parameter_list|,
specifier|final
name|DynamicSet
argument_list|<
name|CommitValidationListener
argument_list|>
name|commitValidationListeners
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|ProjectControl
name|projectControl
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|Repository
name|repo
parameter_list|,
specifier|final
name|SubmoduleOp
operator|.
name|Factory
name|subOpFactory
parameter_list|,
specifier|final
name|PluginLoader
name|pluginLoader
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|currentUser
operator|=
operator|(
name|IdentifiedUser
operator|)
name|projectControl
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|schemaFactory
operator|=
name|schemaFactory
expr_stmt|;
name|this
operator|.
name|accountResolver
operator|=
name|accountResolver
expr_stmt|;
name|this
operator|.
name|createChangeSenderFactory
operator|=
name|createChangeSenderFactory
expr_stmt|;
name|this
operator|.
name|mergedSenderFactory
operator|=
name|mergedSenderFactory
expr_stmt|;
name|this
operator|.
name|replacePatchSetFactory
operator|=
name|replacePatchSetFactory
expr_stmt|;
name|this
operator|.
name|replication
operator|=
name|replication
expr_stmt|;
name|this
operator|.
name|patchSetInfoFactory
operator|=
name|patchSetInfoFactory
expr_stmt|;
name|this
operator|.
name|hooks
operator|=
name|hooks
expr_stmt|;
name|this
operator|.
name|approvalsUtil
operator|=
name|approvalsUtil
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|canonicalWebUrl
operator|=
name|canonicalWebUrl
expr_stmt|;
name|this
operator|.
name|gerritIdent
operator|=
name|gerritIdent
expr_stmt|;
name|this
operator|.
name|trackingFooters
operator|=
name|trackingFooters
expr_stmt|;
name|this
operator|.
name|tagCache
operator|=
name|tagCache
expr_stmt|;
name|this
operator|.
name|workQueue
operator|=
name|workQueue
expr_stmt|;
name|this
operator|.
name|changeUpdateExector
operator|=
name|changeUpdateExector
expr_stmt|;
name|this
operator|.
name|requestScopePropagator
operator|=
name|requestScopePropagator
expr_stmt|;
name|this
operator|.
name|sshInfo
operator|=
name|sshInfo
expr_stmt|;
name|this
operator|.
name|projectControl
operator|=
name|projectControl
expr_stmt|;
name|this
operator|.
name|project
operator|=
name|projectControl
operator|.
name|getProject
argument_list|()
expr_stmt|;
name|this
operator|.
name|repo
operator|=
name|repo
expr_stmt|;
name|this
operator|.
name|pluginLoader
operator|=
name|pluginLoader
expr_stmt|;
name|this
operator|.
name|rp
operator|=
operator|new
name|ReceivePack
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|this
operator|.
name|rejectCommits
operator|=
name|loadRejectCommitsMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|subOpFactory
operator|=
name|subOpFactory
expr_stmt|;
name|this
operator|.
name|commitValidators
operator|=
name|commitValidationListeners
expr_stmt|;
name|this
operator|.
name|messageSender
operator|=
operator|new
name|ReceivePackMessageSender
argument_list|()
expr_stmt|;
name|rp
operator|.
name|setAllowCreates
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setAllowDeletes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setAllowNonFastForwards
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setCheckReceivedObjects
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|projectControl
operator|.
name|allRefsAreVisible
argument_list|()
condition|)
block|{
name|rp
operator|.
name|setCheckReferencedObjectsAreReachable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setAdvertiseRefsHook
argument_list|(
operator|new
name|VisibleRefFilter
argument_list|(
name|tagCache
argument_list|,
name|changeCache
argument_list|,
name|repo
argument_list|,
name|projectControl
argument_list|,
name|db
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|AdvertiseRefsHook
argument_list|>
name|advHooks
init|=
operator|new
name|ArrayList
argument_list|<
name|AdvertiseRefsHook
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|advHooks
operator|.
name|add
argument_list|(
name|rp
operator|.
name|getAdvertiseRefsHook
argument_list|()
argument_list|)
expr_stmt|;
name|advHooks
operator|.
name|add
argument_list|(
operator|new
name|ReceiveCommitsAdvertiseRefsHook
argument_list|()
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setAdvertiseRefsHook
argument_list|(
name|AdvertiseRefsHookChain
operator|.
name|newChain
argument_list|(
name|advHooks
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Add reviewers for new (or updated) changes. */
DECL|method|addReviewers (Collection<Account.Id> who)
specifier|public
name|void
name|addReviewers
parameter_list|(
name|Collection
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|who
parameter_list|)
block|{
name|reviewerId
operator|.
name|addAll
argument_list|(
name|who
argument_list|)
expr_stmt|;
block|}
comment|/** Add reviewers for new (or updated) changes. */
DECL|method|addExtraCC (Collection<Account.Id> who)
specifier|public
name|void
name|addExtraCC
parameter_list|(
name|Collection
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|who
parameter_list|)
block|{
name|ccId
operator|.
name|addAll
argument_list|(
name|who
argument_list|)
expr_stmt|;
block|}
comment|/** Set a message sender for this operation. */
DECL|method|setMessageSender (final MessageSender ms)
specifier|public
name|void
name|setMessageSender
parameter_list|(
specifier|final
name|MessageSender
name|ms
parameter_list|)
block|{
name|messageSender
operator|=
name|ms
operator|!=
literal|null
condition|?
name|ms
else|:
operator|new
name|ReceivePackMessageSender
argument_list|()
expr_stmt|;
block|}
DECL|method|getMessageSender ()
name|MessageSender
name|getMessageSender
parameter_list|()
block|{
if|if
condition|(
name|messageSender
operator|==
literal|null
condition|)
block|{
name|setMessageSender
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|messageSender
return|;
block|}
DECL|method|getProject ()
name|Project
name|getProject
parameter_list|()
block|{
return|return
name|project
return|;
block|}
comment|/** @return the ReceivePack instance to speak the native Git protocol. */
DECL|method|getReceivePack ()
specifier|public
name|ReceivePack
name|getReceivePack
parameter_list|()
block|{
return|return
name|rp
return|;
block|}
comment|/** Scan part of history and include it in the advertisement. */
DECL|method|advertiseHistory ()
specifier|public
name|void
name|advertiseHistory
parameter_list|()
block|{
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|toInclude
init|=
operator|new
name|HashSet
argument_list|<
name|ObjectId
argument_list|>
argument_list|()
decl_stmt|;
comment|// Advertise some recent open changes, in case a commit is based one.
try|try
block|{
name|Set
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|toGet
init|=
operator|new
name|HashSet
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Change
name|change
range|:
name|db
operator|.
name|changes
argument_list|()
operator|.
name|byProjectOpenNext
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
literal|"z"
argument_list|,
literal|32
argument_list|)
control|)
block|{
name|PatchSet
operator|.
name|Id
name|id
init|=
name|change
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|toGet
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|PatchSet
name|ps
range|:
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|toGet
argument_list|)
control|)
block|{
if|if
condition|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|!=
literal|null
operator|&&
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toInclude
operator|.
name|add
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot list open changes of "
operator|+
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
comment|// Size of an additional ".have" line.
specifier|final
name|int
name|haveLineLen
init|=
literal|4
operator|+
name|Constants
operator|.
name|OBJECT_ID_STRING_LENGTH
operator|+
literal|1
operator|+
literal|5
operator|+
literal|1
decl_stmt|;
comment|// Maximum number of bytes to "waste" in the advertisement with
comment|// a peek at this repository's current reachable history.
specifier|final
name|int
name|maxExtraSize
init|=
literal|8192
decl_stmt|;
comment|// Number of recent commits to advertise immediately, hoping to
comment|// show a client a nearby merge base.
specifier|final
name|int
name|base
init|=
literal|64
decl_stmt|;
comment|// Number of commits to skip once base has already been shown.
specifier|final
name|int
name|step
init|=
literal|16
decl_stmt|;
comment|// Total number of commits to extract from the history.
specifier|final
name|int
name|max
init|=
name|maxExtraSize
operator|/
name|haveLineLen
decl_stmt|;
comment|// Scan history until the advertisement is full.
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|alreadySending
init|=
name|rp
operator|.
name|getAdvertisedObjects
argument_list|()
decl_stmt|;
name|RevWalk
name|rw
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectId
name|haveId
range|:
name|alreadySending
control|)
block|{
try|try
block|{
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|haveId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|badCommit
parameter_list|)
block|{
continue|continue;
block|}
block|}
name|int
name|stepCnt
init|=
literal|0
decl_stmt|;
name|RevCommit
name|c
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|c
operator|=
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
name|toInclude
operator|.
name|size
argument_list|()
operator|<
name|max
condition|)
block|{
if|if
condition|(
name|alreadySending
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
block|{         }
elseif|else
if|if
condition|(
name|toInclude
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
block|{         }
elseif|else
if|if
condition|(
name|c
operator|.
name|getParentCount
argument_list|()
operator|>
literal|1
condition|)
block|{         }
elseif|else
if|if
condition|(
name|toInclude
operator|.
name|size
argument_list|()
operator|<
name|base
condition|)
block|{
name|toInclude
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stepCnt
operator|=
operator|++
name|stepCnt
operator|%
name|step
expr_stmt|;
if|if
condition|(
name|stepCnt
operator|==
literal|0
condition|)
block|{
name|toInclude
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error trying to advertise history on "
operator|+
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rp
operator|.
name|getAdvertisedObjects
argument_list|()
operator|.
name|addAll
argument_list|(
name|toInclude
argument_list|)
expr_stmt|;
block|}
comment|/** Determine if the user can upload commits. */
DECL|method|canUpload ()
specifier|public
name|Capable
name|canUpload
parameter_list|()
block|{
name|Capable
name|result
init|=
name|projectControl
operator|.
name|canPushToAtLeastOneRef
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|Capable
operator|.
name|OK
condition|)
block|{
return|return
name|result
return|;
block|}
return|return
name|MagicBranch
operator|.
name|checkMagicBranchRefs
argument_list|(
name|repo
argument_list|,
name|project
argument_list|)
return|;
block|}
DECL|method|addMessage (String message)
specifier|private
name|void
name|addMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|messages
operator|.
name|add
argument_list|(
operator|new
name|Message
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addError (String error)
name|void
name|addError
parameter_list|(
name|String
name|error
parameter_list|)
block|{
name|messages
operator|.
name|add
argument_list|(
operator|new
name|Message
argument_list|(
name|error
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sendMessages ()
name|void
name|sendMessages
parameter_list|()
block|{
for|for
control|(
name|Message
name|m
range|:
name|messages
control|)
block|{
if|if
condition|(
name|m
operator|.
name|isError
condition|)
block|{
name|messageSender
operator|.
name|sendError
argument_list|(
name|m
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageSender
operator|.
name|sendMessage
argument_list|(
name|m
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|processCommands (final Collection<ReceiveCommand> commands, final MultiProgressMonitor progress)
name|void
name|processCommands
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|ReceiveCommand
argument_list|>
name|commands
parameter_list|,
specifier|final
name|MultiProgressMonitor
name|progress
parameter_list|)
block|{
name|newProgress
operator|=
name|progress
operator|.
name|beginSubTask
argument_list|(
literal|"new"
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
name|replaceProgress
operator|=
name|progress
operator|.
name|beginSubTask
argument_list|(
literal|"updated"
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
name|closeProgress
operator|=
name|progress
operator|.
name|beginSubTask
argument_list|(
literal|"closed"
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
name|commandProgress
operator|=
name|progress
operator|.
name|beginSubTask
argument_list|(
literal|"refs"
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
name|batch
operator|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|newBatchUpdate
argument_list|()
expr_stmt|;
name|batch
operator|.
name|setRefLogIdent
argument_list|(
name|rp
operator|.
name|getRefLogIdent
argument_list|()
argument_list|)
expr_stmt|;
name|batch
operator|.
name|setRefLogMessage
argument_list|(
literal|"push"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|parseCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
if|if
condition|(
name|newChange
operator|!=
literal|null
operator|&&
name|newChange
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|newChanges
operator|=
name|selectNewChanges
argument_list|()
expr_stmt|;
block|}
name|preparePatchSetsForReplace
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|batch
operator|.
name|getCommands
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|batch
operator|.
name|execute
argument_list|(
name|rp
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|commandProgress
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ReceiveCommand
name|cmd
range|:
name|batch
operator|.
name|getCommands
argument_list|()
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_OTHER_REASON
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
block|}
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to store %d refs in %s"
argument_list|,
name|cnt
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
name|insertChangesAndPatchSets
argument_list|()
expr_stmt|;
name|newProgress
operator|.
name|end
argument_list|()
expr_stmt|;
name|replaceProgress
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Error
name|error
range|:
name|errors
operator|.
name|keySet
argument_list|()
control|)
block|{
name|rp
operator|.
name|sendMessage
argument_list|(
name|buildError
argument_list|(
name|error
argument_list|,
name|errors
operator|.
name|get
argument_list|(
name|error
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rp
operator|.
name|sendMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"User: %s"
argument_list|,
name|displayName
argument_list|(
name|currentUser
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rp
operator|.
name|sendMessage
argument_list|(
name|COMMAND_REJECTION_MESSAGE_FOOTER
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|ReceiveCommand
name|c
range|:
name|commands
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getResult
argument_list|()
operator|==
name|OK
condition|)
block|{
switch|switch
condition|(
name|c
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
if|if
condition|(
name|isHead
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|autoCloseChanges
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|UPDATE
case|:
comment|// otherwise known as a fast-forward
name|tagCache
operator|.
name|updateFastForward
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|c
operator|.
name|getRefName
argument_list|()
argument_list|,
name|c
operator|.
name|getOldId
argument_list|()
argument_list|,
name|c
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isHead
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|autoCloseChanges
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|UPDATE_NONFASTFORWARD
case|:
if|if
condition|(
name|isHead
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|autoCloseChanges
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|isConfig
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|projectCache
operator|.
name|evict
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|ProjectState
name|ps
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
decl_stmt|;
name|repoManager
operator|.
name|setProjectDescription
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
comment|//
name|ps
operator|.
name|getProject
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|MagicBranch
operator|.
name|isMagicBranch
argument_list|(
name|c
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
comment|// We only schedule direct refs updates for replication.
comment|// Change refs are scheduled when they are created.
comment|//
name|replication
operator|.
name|fire
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|c
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|hooks
operator|.
name|doRefUpdatedHook
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|c
operator|.
name|getRefName
argument_list|()
argument_list|)
argument_list|,
name|c
operator|.
name|getOldId
argument_list|()
argument_list|,
name|c
operator|.
name|getNewId
argument_list|()
argument_list|,
name|currentUser
operator|.
name|getAccount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|closeProgress
operator|.
name|end
argument_list|()
expr_stmt|;
name|commandProgress
operator|.
name|end
argument_list|()
expr_stmt|;
name|progress
operator|.
name|end
argument_list|()
expr_stmt|;
name|Iterable
argument_list|<
name|CreateRequest
argument_list|>
name|created
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|newChanges
argument_list|,
operator|new
name|Predicate
argument_list|<
name|CreateRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|CreateRequest
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|created
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|created
argument_list|)
operator|&&
name|canonicalWebUrl
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|url
init|=
name|canonicalWebUrl
decl_stmt|;
name|addMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
literal|"New Changes:"
argument_list|)
expr_stmt|;
for|for
control|(
name|CreateRequest
name|c
range|:
name|created
control|)
block|{
name|StringBuilder
name|m
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
operator|.
name|append
argument_list|(
name|url
argument_list|)
operator|.
name|append
argument_list|(
name|c
operator|.
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|change
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|DRAFT
condition|)
block|{
name|m
operator|.
name|append
argument_list|(
literal|" [DRAFT]"
argument_list|)
expr_stmt|;
block|}
name|addMessage
argument_list|(
name|m
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|insertChangesAndPatchSets ()
specifier|private
name|void
name|insertChangesAndPatchSets
parameter_list|()
block|{
name|int
name|replaceCount
init|=
literal|0
decl_stmt|;
name|int
name|okToInsert
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ReplaceRequest
name|replace
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|replace
operator|.
name|inputCommand
operator|==
name|newChange
condition|)
block|{
name|replaceCount
operator|++
expr_stmt|;
if|if
condition|(
name|replace
operator|.
name|cmd
operator|!=
literal|null
operator|&&
name|replace
operator|.
name|cmd
operator|.
name|getResult
argument_list|()
operator|==
name|OK
condition|)
block|{
name|okToInsert
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|replace
operator|.
name|cmd
operator|!=
literal|null
operator|&&
name|replace
operator|.
name|cmd
operator|.
name|getResult
argument_list|()
operator|==
name|OK
condition|)
block|{
try|try
block|{
if|if
condition|(
name|replace
operator|.
name|insertPatchSet
argument_list|()
operator|.
name|checkedGet
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|replace
operator|.
name|inputCommand
operator|.
name|setResult
argument_list|(
name|OK
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|reject
argument_list|(
name|replace
operator|.
name|inputCommand
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot add patch set to %d of %s"
argument_list|,
name|replace
operator|.
name|newPatchSet
operator|.
name|getId
argument_list|()
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|reject
argument_list|(
name|replace
operator|.
name|inputCommand
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot add patch set to %d of %s"
argument_list|,
name|replace
operator|.
name|newPatchSet
operator|.
name|getId
argument_list|()
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|reject
argument_list|(
name|replace
operator|.
name|inputCommand
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newChange
operator|==
literal|null
operator|||
name|newChange
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
comment|// refs/for/ or refs/drafts/ not used, or it already failed earlier.
comment|// No need to continue.
return|return;
block|}
for|for
control|(
name|CreateRequest
name|create
range|:
name|newChanges
control|)
block|{
if|if
condition|(
name|create
operator|.
name|cmd
operator|.
name|getResult
argument_list|()
operator|==
name|OK
condition|)
block|{
name|okToInsert
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|okToInsert
operator|!=
name|replaceCount
operator|+
name|newChanges
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// One or more new references failed to create. Assume the
comment|// system isn't working correctly anymore and abort.
name|reject
argument_list|(
name|newChange
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Only %d of %d new change refs created in %s; aborting"
argument_list|,
name|okToInsert
argument_list|,
name|newChanges
operator|.
name|size
argument_list|()
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|List
argument_list|<
name|CheckedFuture
argument_list|<
name|?
argument_list|,
name|OrmException
argument_list|>
argument_list|>
name|futures
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ReplaceRequest
name|replace
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|replace
operator|.
name|inputCommand
operator|==
name|newChange
condition|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|replace
operator|.
name|insertPatchSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CreateRequest
name|create
range|:
name|newChanges
control|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|create
operator|.
name|insertChange
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CheckedFuture
argument_list|<
name|?
argument_list|,
name|OrmException
argument_list|>
name|f
range|:
name|futures
control|)
block|{
name|f
operator|.
name|checkedGet
argument_list|()
expr_stmt|;
block|}
name|newChange
operator|.
name|setResult
argument_list|(
name|OK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't insert changes for "
operator|+
name|project
operator|.
name|getName
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|newChange
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't read commits for "
operator|+
name|project
operator|.
name|getName
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|newChange
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildError (Error error, List<String> branches)
specifier|private
name|String
name|buildError
parameter_list|(
name|Error
name|error
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|branches
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|branches
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Branch "
argument_list|)
operator|.
name|append
argument_list|(
name|branches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|":\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|error
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"Branches"
argument_list|)
expr_stmt|;
name|String
name|delim
init|=
literal|" "
decl_stmt|;
for|for
control|(
name|String
name|branch
range|:
name|branches
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|delim
argument_list|)
operator|.
name|append
argument_list|(
name|branch
argument_list|)
expr_stmt|;
name|delim
operator|=
literal|", "
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|append
argument_list|(
literal|":\n"
argument_list|)
operator|.
name|append
argument_list|(
name|error
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|displayName (IdentifiedUser user)
specifier|private
specifier|static
name|String
name|displayName
parameter_list|(
name|IdentifiedUser
name|user
parameter_list|)
block|{
name|String
name|displayName
init|=
name|user
operator|.
name|getUserName
argument_list|()
decl_stmt|;
if|if
condition|(
name|displayName
operator|==
literal|null
condition|)
block|{
name|displayName
operator|=
name|user
operator|.
name|getAccount
argument_list|()
operator|.
name|getPreferredEmail
argument_list|()
expr_stmt|;
block|}
return|return
name|displayName
return|;
block|}
DECL|method|toAccountId (final String nameOrEmail)
specifier|private
name|Account
operator|.
name|Id
name|toAccountId
parameter_list|(
specifier|final
name|String
name|nameOrEmail
parameter_list|)
throws|throws
name|OrmException
throws|,
name|NoSuchAccountException
block|{
specifier|final
name|Account
name|a
init|=
name|accountResolver
operator|.
name|findByNameOrEmail
argument_list|(
name|nameOrEmail
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchAccountException
argument_list|(
literal|"\""
operator|+
name|nameOrEmail
operator|+
literal|"\" is not registered"
argument_list|)
throw|;
block|}
return|return
name|a
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|method|parseCommands (final Collection<ReceiveCommand> commands)
specifier|private
name|void
name|parseCommands
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|ReceiveCommand
argument_list|>
name|commands
parameter_list|)
block|{
for|for
control|(
specifier|final
name|ReceiveCommand
name|cmd
range|:
name|commands
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
comment|// Already rejected by the core receive process.
comment|//
continue|continue;
block|}
if|if
condition|(
operator|!
name|Repository
operator|.
name|isValidRefName
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|||
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"//"
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"not valid ref"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|MagicBranch
operator|.
name|isMagicBranch
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
name|parseNewChangeCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|Matcher
name|m
init|=
name|NEW_PATCHSET
operator|.
name|matcher
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// The referenced change must exist and must still be open.
comment|//
specifier|final
name|Change
operator|.
name|Id
name|changeId
init|=
name|Change
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|parseReplaceCommand
argument_list|(
name|cmd
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
continue|continue;
block|}
switch|switch
condition|(
name|cmd
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
name|parseCreate
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPDATE
case|:
name|parseUpdate
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|parseDelete
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPDATE_NONFASTFORWARD
case|:
name|parseRewind
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
break|break;
default|default:
name|reject
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isConfig
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|projectControl
operator|.
name|isOwner
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"not project owner"
argument_list|)
expr_stmt|;
continue|continue;
block|}
switch|switch
condition|(
name|cmd
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|UPDATE
case|:
case|case
name|UPDATE_NONFASTFORWARD
case|:
try|try
block|{
name|ProjectConfig
name|cfg
init|=
operator|new
name|ProjectConfig
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|load
argument_list|(
name|repo
argument_list|,
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cfg
operator|.
name|getValidationErrors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addError
argument_list|(
literal|"Invalid project configuration:"
argument_list|)
expr_stmt|;
for|for
control|(
name|ValidationError
name|err
range|:
name|cfg
operator|.
name|getValidationErrors
argument_list|()
control|)
block|{
name|addError
argument_list|(
literal|"  "
operator|+
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid project configuration"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"User "
operator|+
name|currentUser
operator|.
name|getUserName
argument_list|()
operator|+
literal|" tried to push invalid project configuration "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid project configuration"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"User "
operator|+
name|currentUser
operator|.
name|getUserName
argument_list|()
operator|+
literal|" tried to push invalid project configuration "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|project
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
break|break;
case|case
name|DELETE
case|:
break|break;
default|default:
name|reject
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
block|}
DECL|method|parseCreate (final ReceiveCommand cmd)
specifier|private
name|void
name|parseCreate
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|RevObject
name|obj
decl_stmt|;
try|try
block|{
name|obj
operator|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseAny
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid object "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|cmd
operator|.
name|getRefName
argument_list|()
operator|+
literal|" creation"
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid object"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isHead
argument_list|(
name|cmd
argument_list|)
operator|&&
operator|!
name|isCommit
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
return|return;
block|}
name|RefControl
name|ctl
init|=
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctl
operator|.
name|canCreate
argument_list|(
name|rp
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|obj
argument_list|)
condition|)
block|{
name|validateNewCommits
argument_list|(
name|ctl
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
name|batch
operator|.
name|addCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|put
argument_list|(
name|Error
operator|.
name|CREATE
argument_list|,
name|ctl
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseUpdate (final ReceiveCommand cmd)
specifier|private
name|void
name|parseUpdate
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|RefControl
name|ctl
init|=
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctl
operator|.
name|canUpdate
argument_list|()
condition|)
block|{
if|if
condition|(
name|isHead
argument_list|(
name|cmd
argument_list|)
operator|&&
operator|!
name|isCommit
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
return|return;
block|}
name|validateNewCommits
argument_list|(
name|ctl
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
name|batch
operator|.
name|addCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|GitRepositoryManager
operator|.
name|REF_CONFIG
operator|.
name|equals
argument_list|(
name|ctl
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
name|errors
operator|.
name|put
argument_list|(
name|Error
operator|.
name|CONFIG_UPDATE
argument_list|,
name|GitRepositoryManager
operator|.
name|REF_CONFIG
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|put
argument_list|(
name|Error
operator|.
name|UPDATE
argument_list|,
name|ctl
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reject
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isCommit (final ReceiveCommand cmd)
specifier|private
name|boolean
name|isCommit
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|RevObject
name|obj
decl_stmt|;
try|try
block|{
name|obj
operator|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseAny
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid object "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid object"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|RevCommit
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"not a commit"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|parseDelete (final ReceiveCommand cmd)
specifier|private
name|void
name|parseDelete
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|RefControl
name|ctl
init|=
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctl
operator|.
name|canDelete
argument_list|()
condition|)
block|{
name|batch
operator|.
name|addCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|GitRepositoryManager
operator|.
name|REF_CONFIG
operator|.
name|equals
argument_list|(
name|ctl
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"cannot delete project configuration"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|put
argument_list|(
name|Error
operator|.
name|DELETE
argument_list|,
name|ctl
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"cannot delete references"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseRewind (final ReceiveCommand cmd)
specifier|private
name|void
name|parseRewind
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|RevCommit
name|newObject
decl_stmt|;
try|try
block|{
name|newObject
operator|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|notCommit
parameter_list|)
block|{
name|newObject
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid object "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|cmd
operator|.
name|getRefName
argument_list|()
operator|+
literal|" forced update"
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid object"
argument_list|)
expr_stmt|;
return|return;
block|}
name|RefControl
name|ctl
init|=
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newObject
operator|!=
literal|null
condition|)
block|{
name|validateNewCommits
argument_list|(
name|ctl
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
return|return;
block|}
block|}
if|if
condition|(
name|ctl
operator|.
name|canForceUpdate
argument_list|()
condition|)
block|{
name|batch
operator|.
name|setAllowNonFastForwards
argument_list|(
literal|true
argument_list|)
operator|.
name|addCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_NONFASTFORWARD
argument_list|,
literal|" need '"
operator|+
name|PermissionRule
operator|.
name|FORCE_PUSH
operator|+
literal|"' privilege."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseNewChangeCommand (final ReceiveCommand cmd)
specifier|private
name|void
name|parseNewChangeCommand
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
comment|// Permit exactly one new change request per push.
comment|//
if|if
condition|(
name|newChange
operator|!=
literal|null
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"duplicate request"
argument_list|)
expr_stmt|;
return|return;
block|}
name|newChange
operator|=
name|cmd
expr_stmt|;
name|String
name|destBranchName
init|=
name|MagicBranch
operator|.
name|getDestBranchName
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destBranchName
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_REFS
argument_list|)
condition|)
block|{
name|destBranchName
operator|=
name|Constants
operator|.
name|R_HEADS
operator|+
name|destBranchName
expr_stmt|;
block|}
specifier|final
name|String
name|head
decl_stmt|;
try|try
block|{
name|head
operator|=
name|repo
operator|.
name|getFullBranch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot read HEAD symref"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"internal error"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Split the destination branch by branch and topic.  The topic
comment|// suffix is entirely optional, so it might not even exist.
comment|//
name|int
name|split
init|=
name|destBranchName
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|String
name|name
init|=
name|destBranchName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|split
argument_list|)
decl_stmt|;
if|if
condition|(
name|rp
operator|.
name|getAdvertisedRefs
argument_list|()
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// We advertised the branch to the client so we know
comment|// the branch exists. Target this branch for the upload.
comment|//
break|break;
block|}
elseif|else
if|if
condition|(
name|head
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// We didn't advertise the branch, because it doesn't exist yet.
comment|// Allow it anyway as HEAD is a symbolic reference to the name.
comment|//
break|break;
block|}
name|split
operator|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|,
name|split
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|split
operator|<=
name|Constants
operator|.
name|R_REFS
operator|.
name|length
argument_list|()
condition|)
block|{
name|String
name|n
init|=
name|destBranchName
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
condition|)
name|n
operator|=
name|n
operator|.
name|substring
argument_list|(
name|Constants
operator|.
name|R_HEADS
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"branch "
operator|+
name|n
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|split
operator|<
name|destBranchName
operator|.
name|length
argument_list|()
condition|)
block|{
name|destTopicName
operator|=
name|destBranchName
operator|.
name|substring
argument_list|(
name|split
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|destTopicName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|destTopicName
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|destTopicName
operator|=
literal|null
expr_stmt|;
block|}
name|destBranch
operator|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
comment|//
name|destBranchName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|split
argument_list|)
argument_list|)
expr_stmt|;
name|destBranchCtl
operator|=
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|destBranch
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|destBranchCtl
operator|.
name|canUpload
argument_list|()
condition|)
block|{
name|errors
operator|.
name|put
argument_list|(
name|Error
operator|.
name|CODE_REVIEW
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"cannot upload review"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Validate that the new commits are connected with the target
comment|// branch.  If they aren't, we want to abort. We do this check by
comment|// looking to see if we can compute a merge base between the new
comment|// commits and the target branch head.
comment|//
try|try
block|{
specifier|final
name|RevWalk
name|walk
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
specifier|final
name|RevCommit
name|tip
init|=
name|walk
operator|.
name|parseCommit
argument_list|(
name|newChange
operator|.
name|getNewId
argument_list|()
argument_list|)
decl_stmt|;
name|Ref
name|targetRef
init|=
name|rp
operator|.
name|getAdvertisedRefs
argument_list|()
operator|.
name|get
argument_list|(
name|destBranchName
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetRef
operator|==
literal|null
operator|||
name|targetRef
operator|.
name|getObjectId
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// The destination branch does not yet exist. Assume the
comment|// history being sent for review will start it and thus
comment|// is "connected" to the branch.
return|return;
block|}
specifier|final
name|RevCommit
name|h
init|=
name|walk
operator|.
name|parseCommit
argument_list|(
name|targetRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RevFilter
name|oldRevFilter
init|=
name|walk
operator|.
name|getRevFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|walk
operator|.
name|reset
argument_list|()
expr_stmt|;
name|walk
operator|.
name|setRevFilter
argument_list|(
name|RevFilter
operator|.
name|MERGE_BASE
argument_list|)
expr_stmt|;
name|walk
operator|.
name|markStart
argument_list|(
name|tip
argument_list|)
expr_stmt|;
name|walk
operator|.
name|markStart
argument_list|(
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
name|walk
operator|.
name|next
argument_list|()
operator|==
literal|null
condition|)
block|{
name|reject
argument_list|(
name|newChange
argument_list|,
literal|"no common ancestry"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
finally|finally
block|{
name|walk
operator|.
name|reset
argument_list|()
expr_stmt|;
name|walk
operator|.
name|setRevFilter
argument_list|(
name|oldRevFilter
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|newChange
operator|.
name|setResult
argument_list|(
name|REJECTED_MISSING_OBJECT
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Invalid pack upload; one or more objects weren't sent"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|/**    * Loads a list of commits to reject from {@code refs/meta/reject-commits}.    *    * @return NoteMap of commits to be rejected, null if there are none.    * @throws IOException the map cannot be loaded.    */
DECL|method|loadRejectCommitsMap ()
specifier|private
name|NoteMap
name|loadRejectCommitsMap
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|getRef
argument_list|(
name|GitRepositoryManager
operator|.
name|REF_REJECT_COMMITS
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
name|NoteMap
operator|.
name|newEmptyMap
argument_list|()
return|;
block|}
name|RevWalk
name|rw
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|RevCommit
name|map
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|NoteMap
operator|.
name|read
argument_list|(
name|rw
operator|.
name|getObjectReader
argument_list|()
argument_list|,
name|map
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|badMap
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot load "
operator|+
name|GitRepositoryManager
operator|.
name|REF_REJECT_COMMITS
argument_list|,
name|badMap
argument_list|)
throw|;
block|}
block|}
DECL|method|parseReplaceCommand (final ReceiveCommand cmd, final Change.Id changeId)
specifier|private
name|void
name|parseReplaceCommand
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|,
specifier|final
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|.
name|getType
argument_list|()
operator|!=
name|ReceiveCommand
operator|.
name|Type
operator|.
name|CREATE
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid usage"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|RevCommit
name|newCommit
decl_stmt|;
try|try
block|{
name|newCommit
operator|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot parse "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" as commit"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid commit"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Change
name|changeEnt
decl_stmt|;
try|try
block|{
name|changeEnt
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot lookup existing change "
operator|+
name|changeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"database error"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|changeEnt
operator|==
literal|null
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"change "
operator|+
name|changeId
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|project
operator|.
name|getNameKey
argument_list|()
operator|.
name|equals
argument_list|(
name|changeEnt
operator|.
name|getProject
argument_list|()
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"change "
operator|+
name|changeId
operator|+
literal|" does not belong to project "
operator|+
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|requestReplace
argument_list|(
name|cmd
argument_list|,
literal|true
argument_list|,
name|changeEnt
argument_list|,
name|newCommit
argument_list|)
expr_stmt|;
block|}
DECL|method|requestReplace (final ReceiveCommand cmd, final boolean checkMergedInto, final Change change, final RevCommit newCommit)
specifier|private
name|boolean
name|requestReplace
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|,
specifier|final
name|boolean
name|checkMergedInto
parameter_list|,
specifier|final
name|Change
name|change
parameter_list|,
specifier|final
name|RevCommit
name|newCommit
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"change "
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|" closed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|ReplaceRequest
name|req
init|=
operator|new
name|ReplaceRequest
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|newCommit
argument_list|,
name|cmd
argument_list|,
name|checkMergedInto
argument_list|)
decl_stmt|;
if|if
condition|(
name|replaceByChange
operator|.
name|containsKey
argument_list|(
name|req
operator|.
name|ontoChange
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"duplicate request"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|replaceByCommit
operator|.
name|containsKey
argument_list|(
name|req
operator|.
name|newCommit
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"duplicate request"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|replaceByChange
operator|.
name|put
argument_list|(
name|req
operator|.
name|ontoChange
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|replaceByCommit
operator|.
name|put
argument_list|(
name|req
operator|.
name|newCommit
argument_list|,
name|req
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|selectNewChanges ()
specifier|private
name|List
argument_list|<
name|CreateRequest
argument_list|>
name|selectNewChanges
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|CreateRequest
argument_list|>
name|newChanges
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|RevWalk
name|walk
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|walk
operator|.
name|reset
argument_list|()
expr_stmt|;
name|walk
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|walk
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|existing
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|walk
operator|.
name|markStart
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|newChange
operator|.
name|getNewId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Ref
name|ref
range|:
name|repo
operator|.
name|getAllRefs
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|ref
operator|.
name|getObjectId
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|ref
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"refs/changes/"
argument_list|)
condition|)
block|{
name|existing
operator|.
name|add
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ref
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|R_HEADS
argument_list|)
operator|||
name|ref
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|destBranchCtl
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|walk
operator|.
name|markUninteresting
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid ref %s in %s"
argument_list|,
name|ref
operator|.
name|getName
argument_list|()
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
name|List
argument_list|<
name|ChangeLookup
argument_list|>
name|pending
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Change
operator|.
name|Key
argument_list|>
name|newChangeIds
init|=
operator|new
name|HashSet
argument_list|<
name|Change
operator|.
name|Key
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|RevCommit
name|c
init|=
name|walk
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|existing
operator|.
name|contains
argument_list|(
name|c
argument_list|)
operator|||
name|replaceByCommit
operator|.
name|containsKey
argument_list|(
name|c
argument_list|)
condition|)
block|{
comment|// This commit was already scheduled to replace an existing PatchSet.
comment|//
continue|continue;
block|}
if|if
condition|(
operator|!
name|validCommit
argument_list|(
name|destBranchCtl
argument_list|,
name|newChange
argument_list|,
name|c
argument_list|)
condition|)
block|{
comment|// Not a change the user can propose? Abort as early as possible.
comment|//
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Change
operator|.
name|Key
name|changeKey
init|=
operator|new
name|Change
operator|.
name|Key
argument_list|(
literal|"I"
operator|+
name|c
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|idList
init|=
name|c
operator|.
name|getFooterLines
argument_list|(
name|CHANGE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|idList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newChanges
operator|.
name|add
argument_list|(
operator|new
name|CreateRequest
argument_list|(
name|c
argument_list|,
name|changeKey
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|idStr
init|=
name|idList
operator|.
name|get
argument_list|(
name|idList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|idStr
operator|.
name|matches
argument_list|(
literal|"^I00*$"
argument_list|)
condition|)
block|{
comment|// Reject this invalid line from EGit.
name|reject
argument_list|(
name|newChange
argument_list|,
literal|"invalid Change-Id"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|changeKey
operator|=
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|idStr
argument_list|)
expr_stmt|;
name|pending
operator|.
name|add
argument_list|(
operator|new
name|ChangeLookup
argument_list|(
name|c
argument_list|,
name|changeKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChangeLookup
name|p
range|:
name|pending
control|)
block|{
if|if
condition|(
name|newChangeIds
operator|.
name|contains
argument_list|(
name|p
operator|.
name|changeKey
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|newChange
argument_list|,
literal|"squash commits first"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Change
argument_list|>
name|changes
init|=
name|p
operator|.
name|changes
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
name|changes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// WTF, multiple changes in this project have the same key?
comment|// Since the commit is new, the user should recreate it with
comment|// a different Change-Id. In practice, we should never see
comment|// this error message as Change-Id should be unique.
comment|//
name|reject
argument_list|(
name|newChange
argument_list|,
name|p
operator|.
name|changeKey
operator|.
name|get
argument_list|()
operator|+
literal|" has duplicates"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
name|changes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Schedule as a replacement to this one matching change.
comment|//
if|if
condition|(
name|requestReplace
argument_list|(
name|newChange
argument_list|,
literal|false
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|p
operator|.
name|commit
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|changes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|isValidChangeId
argument_list|(
name|p
operator|.
name|changeKey
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|newChange
argument_list|,
literal|"invalid Change-Id"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|newChangeIds
operator|.
name|add
argument_list|(
name|p
operator|.
name|changeKey
argument_list|)
expr_stmt|;
block|}
name|newChanges
operator|.
name|add
argument_list|(
operator|new
name|CreateRequest
argument_list|(
name|p
operator|.
name|commit
argument_list|,
name|p
operator|.
name|changeKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Should never happen, the core receive process would have
comment|// identified the missing object earlier before we got control.
comment|//
name|newChange
operator|.
name|setResult
argument_list|(
name|REJECTED_MISSING_OBJECT
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Invalid pack upload; one or more objects weren't sent"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot query database to locate prior changes"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|newChange
argument_list|,
literal|"database error"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
name|newChanges
operator|.
name|isEmpty
argument_list|()
operator|&&
name|replaceByChange
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|newChange
argument_list|,
literal|"no new changes"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
for|for
control|(
name|CreateRequest
name|create
range|:
name|newChanges
control|)
block|{
name|batch
operator|.
name|addCommand
argument_list|(
name|create
operator|.
name|cmd
argument_list|)
expr_stmt|;
block|}
return|return
name|newChanges
return|;
block|}
DECL|method|isValidChangeId (String idStr)
specifier|private
specifier|static
name|boolean
name|isValidChangeId
parameter_list|(
name|String
name|idStr
parameter_list|)
block|{
return|return
name|idStr
operator|.
name|matches
argument_list|(
literal|"^I[0-9a-fA-F]{40}$"
argument_list|)
operator|&&
operator|!
name|idStr
operator|.
name|matches
argument_list|(
literal|"^I00*$"
argument_list|)
return|;
block|}
DECL|class|ChangeLookup
specifier|private
class|class
name|ChangeLookup
block|{
DECL|field|commit
specifier|final
name|RevCommit
name|commit
decl_stmt|;
DECL|field|changeKey
specifier|final
name|Change
operator|.
name|Key
name|changeKey
decl_stmt|;
DECL|field|changes
specifier|final
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|changes
decl_stmt|;
DECL|method|ChangeLookup (RevCommit c, Change.Key key)
name|ChangeLookup
parameter_list|(
name|RevCommit
name|c
parameter_list|,
name|Change
operator|.
name|Key
name|key
parameter_list|)
throws|throws
name|OrmException
block|{
name|commit
operator|=
name|c
expr_stmt|;
name|changeKey
operator|=
name|key
expr_stmt|;
name|changes
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|byBranchKey
argument_list|(
name|destBranch
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CreateRequest
specifier|private
class|class
name|CreateRequest
block|{
DECL|field|commit
specifier|final
name|RevCommit
name|commit
decl_stmt|;
DECL|field|change
specifier|final
name|Change
name|change
decl_stmt|;
DECL|field|ps
specifier|final
name|PatchSet
name|ps
decl_stmt|;
DECL|field|cmd
specifier|final
name|ReceiveCommand
name|cmd
decl_stmt|;
DECL|field|info
specifier|private
specifier|final
name|PatchSetInfo
name|info
decl_stmt|;
DECL|field|created
name|boolean
name|created
decl_stmt|;
DECL|method|CreateRequest (RevCommit c, Change.Key changeKey)
name|CreateRequest
parameter_list|(
name|RevCommit
name|c
parameter_list|,
name|Change
operator|.
name|Key
name|changeKey
parameter_list|)
throws|throws
name|OrmException
block|{
name|commit
operator|=
name|c
expr_stmt|;
name|change
operator|=
operator|new
name|Change
argument_list|(
name|changeKey
argument_list|,
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|db
operator|.
name|nextChangeId
argument_list|()
argument_list|)
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|destBranch
argument_list|)
expr_stmt|;
name|change
operator|.
name|setTopic
argument_list|(
name|destTopicName
argument_list|)
expr_stmt|;
name|change
operator|.
name|nextPatchSetId
argument_list|()
expr_stmt|;
name|ps
operator|=
operator|new
name|PatchSet
argument_list|(
name|change
operator|.
name|currPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setCreatedOn
argument_list|(
name|change
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setUploader
argument_list|(
name|change
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setRevision
argument_list|(
name|toRevId
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|MagicBranch
operator|.
name|isDraft
argument_list|(
name|newChange
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|DRAFT
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setDraft
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|info
operator|=
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|c
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|cmd
operator|=
operator|new
name|ReceiveCommand
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|c
argument_list|,
name|ps
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|insertChange ()
name|CheckedFuture
argument_list|<
name|Void
argument_list|,
name|OrmException
argument_list|>
name|insertChange
parameter_list|()
throws|throws
name|IOException
block|{
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|warnMalformedMessage
argument_list|(
name|commit
argument_list|)
expr_stmt|;
specifier|final
name|Thread
name|caller
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|changeUpdateExector
operator|.
name|submit
argument_list|(
name|requestScopePropagator
operator|.
name|wrap
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|caller
operator|==
name|Thread
operator|.
name|currentThread
argument_list|()
condition|)
block|{
name|insertChange
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ReviewDb
name|db
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
name|insertChange
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|newProgress
init|)
block|{
name|newProgress
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Futures
operator|.
name|makeChecked
argument_list|(
name|future
argument_list|,
name|ORM_EXCEPTION
argument_list|)
return|;
block|}
DECL|method|insertChange (ReviewDb db)
specifier|private
name|void
name|insertChange
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|Account
operator|.
name|Id
name|me
init|=
name|currentUser
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|(
name|reviewerId
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|cc
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|(
name|ccId
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footerLines
init|=
name|commit
operator|.
name|getFooterLines
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|FooterLine
name|footerLine
range|:
name|footerLines
control|)
block|{
try|try
block|{
if|if
condition|(
name|ps
operator|.
name|isDraft
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isReviewer
argument_list|(
name|footerLine
argument_list|)
condition|)
block|{
name|reviewers
operator|.
name|add
argument_list|(
name|toAccountId
argument_list|(
name|footerLine
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|footerLine
operator|.
name|matches
argument_list|(
name|FooterKey
operator|.
name|CC
argument_list|)
condition|)
block|{
name|cc
operator|.
name|add
argument_list|(
name|toAccountId
argument_list|(
name|footerLine
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchAccountException
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
name|reviewers
operator|.
name|remove
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|cc
operator|.
name|remove
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|cc
operator|.
name|removeAll
argument_list|(
name|reviewers
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|insertAncestors
argument_list|(
name|db
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeUtil
operator|.
name|updateTrackingIds
argument_list|(
name|db
argument_list|,
name|change
argument_list|,
name|trackingFooters
argument_list|,
name|footerLines
argument_list|)
expr_stmt|;
name|approvalsUtil
operator|.
name|addReviewers
argument_list|(
name|db
argument_list|,
name|change
argument_list|,
name|ps
argument_list|,
name|info
argument_list|,
name|reviewers
argument_list|,
name|Collections
operator|.
expr|<
name|Account
operator|.
name|Id
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|created
operator|=
literal|true
expr_stmt|;
name|replication
operator|.
name|fire
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|ps
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|hooks
operator|.
name|doPatchsetCreatedHook
argument_list|(
name|change
argument_list|,
name|ps
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|workQueue
operator|.
name|getDefaultQueue
argument_list|()
operator|.
name|submit
argument_list|(
name|requestScopePropagator
operator|.
name|wrap
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|CreateChangeSender
name|cm
init|=
name|createChangeSenderFactory
operator|.
name|create
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|cm
operator|.
name|setFrom
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setPatchSet
argument_list|(
name|ps
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addReviewers
argument_list|(
name|reviewers
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addExtraCC
argument_list|(
name|cc
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email for new change "
operator|+
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"send-email newchange"
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isReviewer (final FooterLine candidateFooterLine)
specifier|private
specifier|static
name|boolean
name|isReviewer
parameter_list|(
specifier|final
name|FooterLine
name|candidateFooterLine
parameter_list|)
block|{
return|return
name|candidateFooterLine
operator|.
name|matches
argument_list|(
name|FooterKey
operator|.
name|SIGNED_OFF_BY
argument_list|)
operator|||
name|candidateFooterLine
operator|.
name|matches
argument_list|(
name|FooterKey
operator|.
name|ACKED_BY
argument_list|)
operator|||
name|candidateFooterLine
operator|.
name|matches
argument_list|(
name|REVIEWED_BY
argument_list|)
operator|||
name|candidateFooterLine
operator|.
name|matches
argument_list|(
name|TESTED_BY
argument_list|)
return|;
block|}
DECL|method|preparePatchSetsForReplace ()
specifier|private
name|void
name|preparePatchSetsForReplace
parameter_list|()
block|{
try|try
block|{
name|readChangesForReplace
argument_list|()
expr_stmt|;
name|readPatchSetsForReplace
argument_list|()
expr_stmt|;
for|for
control|(
name|ReplaceRequest
name|req
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|req
operator|.
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|req
operator|.
name|validate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot read database before replacement"
argument_list|,
name|err
argument_list|)
expr_stmt|;
for|for
control|(
name|ReplaceRequest
name|req
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|req
operator|.
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|req
operator|.
name|inputCommand
operator|.
name|setResult
argument_list|(
name|REJECTED_OTHER_REASON
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot read repository before replacement"
argument_list|,
name|err
argument_list|)
expr_stmt|;
for|for
control|(
name|ReplaceRequest
name|req
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|req
operator|.
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|req
operator|.
name|inputCommand
operator|.
name|setResult
argument_list|(
name|REJECTED_OTHER_REASON
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|ReplaceRequest
name|req
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|req
operator|.
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
operator|&&
name|req
operator|.
name|cmd
operator|!=
literal|null
condition|)
block|{
name|batch
operator|.
name|addCommand
argument_list|(
name|req
operator|.
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newChange
operator|!=
literal|null
operator|&&
name|newChange
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
comment|// Cancel creations tied to refs/for/ or refs/drafts/ command.
for|for
control|(
name|ReplaceRequest
name|req
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|req
operator|.
name|inputCommand
operator|==
name|newChange
operator|&&
name|req
operator|.
name|cmd
operator|!=
literal|null
condition|)
block|{
name|req
operator|.
name|cmd
operator|.
name|setResult
argument_list|(
name|Result
operator|.
name|REJECTED_OTHER_REASON
argument_list|,
literal|"aborted"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CreateRequest
name|req
range|:
name|newChanges
control|)
block|{
name|req
operator|.
name|cmd
operator|.
name|setResult
argument_list|(
name|Result
operator|.
name|REJECTED_OTHER_REASON
argument_list|,
literal|"aborted"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|readChangesForReplace ()
specifier|private
name|void
name|readChangesForReplace
parameter_list|()
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|CheckedFuture
argument_list|<
name|Change
argument_list|,
name|OrmException
argument_list|>
argument_list|>
name|futures
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|replaceByChange
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ReplaceRequest
name|request
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|getAsync
argument_list|(
name|request
operator|.
name|ontoChange
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CheckedFuture
argument_list|<
name|Change
argument_list|,
name|OrmException
argument_list|>
name|f
range|:
name|futures
control|)
block|{
name|Change
name|c
init|=
name|f
operator|.
name|checkedGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|replaceByChange
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|change
operator|=
name|c
expr_stmt|;
block|}
block|}
block|}
DECL|method|readPatchSetsForReplace ()
specifier|private
name|void
name|readPatchSetsForReplace
parameter_list|()
throws|throws
name|OrmException
block|{
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ResultSet
argument_list|<
name|PatchSet
argument_list|>
argument_list|>
name|results
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|ReplaceRequest
name|request
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|request
operator|.
name|ontoChange
decl_stmt|;
name|results
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|byChange
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ReplaceRequest
name|req
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
name|req
operator|.
name|patchSets
operator|=
name|results
operator|.
name|get
argument_list|(
name|req
operator|.
name|ontoChange
argument_list|)
operator|.
name|toList
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ReplaceRequest
specifier|private
class|class
name|ReplaceRequest
block|{
DECL|field|ontoChange
specifier|final
name|Change
operator|.
name|Id
name|ontoChange
decl_stmt|;
DECL|field|newCommit
specifier|final
name|RevCommit
name|newCommit
decl_stmt|;
DECL|field|inputCommand
specifier|final
name|ReceiveCommand
name|inputCommand
decl_stmt|;
DECL|field|checkMergedInto
specifier|final
name|boolean
name|checkMergedInto
decl_stmt|;
DECL|field|change
name|Change
name|change
decl_stmt|;
DECL|field|changeCtl
name|ChangeControl
name|changeCtl
decl_stmt|;
DECL|field|patchSets
name|List
argument_list|<
name|PatchSet
argument_list|>
name|patchSets
decl_stmt|;
DECL|field|newPatchSet
name|PatchSet
name|newPatchSet
decl_stmt|;
DECL|field|cmd
name|ReceiveCommand
name|cmd
decl_stmt|;
DECL|field|info
name|PatchSetInfo
name|info
decl_stmt|;
DECL|field|msg
name|ChangeMessage
name|msg
decl_stmt|;
DECL|field|mergedIntoRef
name|String
name|mergedIntoRef
decl_stmt|;
DECL|field|priorPatchSet
specifier|private
name|PatchSet
operator|.
name|Id
name|priorPatchSet
decl_stmt|;
DECL|method|ReplaceRequest (final Change.Id toChange, final RevCommit newCommit, final ReceiveCommand cmd, final boolean checkMergedInto)
name|ReplaceRequest
parameter_list|(
specifier|final
name|Change
operator|.
name|Id
name|toChange
parameter_list|,
specifier|final
name|RevCommit
name|newCommit
parameter_list|,
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|,
specifier|final
name|boolean
name|checkMergedInto
parameter_list|)
block|{
name|this
operator|.
name|ontoChange
operator|=
name|toChange
expr_stmt|;
name|this
operator|.
name|newCommit
operator|=
name|newCommit
expr_stmt|;
name|this
operator|.
name|inputCommand
operator|=
name|cmd
expr_stmt|;
name|this
operator|.
name|checkMergedInto
operator|=
name|checkMergedInto
expr_stmt|;
block|}
DECL|method|validate (boolean ignoreNoChanges)
name|boolean
name|validate
parameter_list|(
name|boolean
name|ignoreNoChanges
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|change
operator|==
literal|null
operator|||
name|patchSets
operator|==
literal|null
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"change "
operator|+
name|ontoChange
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"change "
operator|+
name|ontoChange
operator|+
literal|" closed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|changeCtl
operator|=
name|projectControl
operator|.
name|controlFor
argument_list|(
name|change
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|changeCtl
operator|.
name|canAddPatchSet
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"cannot replace "
operator|+
name|ontoChange
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|newCommit
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validCommit
argument_list|(
name|changeCtl
operator|.
name|getRefControl
argument_list|()
argument_list|,
name|inputCommand
argument_list|,
name|newCommit
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|priorPatchSet
operator|=
name|change
operator|.
name|currentPatchSetId
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|PatchSet
name|ps
range|:
name|patchSets
control|)
block|{
if|if
condition|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Patch set "
operator|+
name|ps
operator|.
name|getId
argument_list|()
operator|+
literal|" has no revision"
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"change state corrupt"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|revIdStr
init|=
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|ObjectId
name|commitId
decl_stmt|;
try|try
block|{
name|commitId
operator|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|revIdStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid revision in "
operator|+
name|ps
operator|.
name|getId
argument_list|()
operator|+
literal|": "
operator|+
name|revIdStr
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"change state corrupt"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
specifier|final
name|RevCommit
name|prior
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|commitId
argument_list|)
decl_stmt|;
comment|// Don't allow a change to directly depend upon itself. This is a
comment|// very common error due to users making a new commit rather than
comment|// amending when trying to address review comments.
comment|//
if|if
condition|(
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|isMergedInto
argument_list|(
name|prior
argument_list|,
name|newCommit
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"squash commits first"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Don't allow the same commit to appear twice on the same change
comment|//
if|if
condition|(
name|newCommit
operator|==
name|prior
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"commit already exists"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Don't allow the same tree if the commit message is unmodified
comment|// or no parents were updated (rebase), else warn that only part
comment|// of the commit was modified.
comment|//
if|if
condition|(
name|priorPatchSet
operator|.
name|equals
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
operator|&&
name|newCommit
operator|.
name|getTree
argument_list|()
operator|==
name|prior
operator|.
name|getTree
argument_list|()
condition|)
block|{
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|prior
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|messageEq
init|=
name|eq
argument_list|(
name|newCommit
operator|.
name|getFullMessage
argument_list|()
argument_list|,
name|prior
operator|.
name|getFullMessage
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|parentsEq
init|=
name|parentsEqual
argument_list|(
name|newCommit
argument_list|,
name|prior
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|authorEq
init|=
name|authorEqual
argument_list|(
name|newCommit
argument_list|,
name|prior
argument_list|)
decl_stmt|;
if|if
condition|(
name|messageEq
operator|&&
name|parentsEq
operator|&&
name|authorEq
operator|&&
operator|!
name|ignoreNoChanges
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"no changes made"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|ObjectReader
name|reader
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|getObjectReader
argument_list|()
decl_stmt|;
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"(W) "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|reader
operator|.
name|abbreviate
argument_list|(
name|newCommit
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" no files changed"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|authorEq
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|", author changed"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|messageEq
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|", message updated"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|parentsEq
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|", was rebased"
argument_list|)
expr_stmt|;
block|}
name|addMessage
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Change "
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|" missing "
operator|+
name|revIdStr
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"change state corrupt"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|change
operator|.
name|nextPatchSetId
argument_list|()
expr_stmt|;
name|newPatchSet
operator|=
operator|new
name|PatchSet
argument_list|(
name|change
operator|.
name|currPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|newPatchSet
operator|.
name|setCreatedOn
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newPatchSet
operator|.
name|setUploader
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|newPatchSet
operator|.
name|setRevision
argument_list|(
name|toRevId
argument_list|(
name|newCommit
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|newChange
operator|!=
literal|null
operator|&&
name|MagicBranch
operator|.
name|isDraft
argument_list|(
name|newChange
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
name|newPatchSet
operator|.
name|setDraft
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|info
operator|=
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|newCommit
argument_list|,
name|newPatchSet
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|=
operator|new
name|ReceiveCommand
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|newCommit
argument_list|,
name|newPatchSet
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|insertPatchSet ()
name|CheckedFuture
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|OrmException
argument_list|>
name|insertPatchSet
parameter_list|()
throws|throws
name|IOException
block|{
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|newCommit
argument_list|)
expr_stmt|;
name|warnMalformedMessage
argument_list|(
name|newCommit
argument_list|)
expr_stmt|;
specifier|final
name|Thread
name|caller
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
name|ListenableFuture
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|future
init|=
name|changeUpdateExector
operator|.
name|submit
argument_list|(
name|requestScopePropagator
operator|.
name|wrap
argument_list|(
operator|new
name|Callable
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PatchSet
operator|.
name|Id
name|call
parameter_list|()
throws|throws
name|OrmException
block|{
try|try
block|{
if|if
condition|(
name|caller
operator|==
name|Thread
operator|.
name|currentThread
argument_list|()
condition|)
block|{
return|return
name|insertPatchSet
argument_list|(
name|db
argument_list|)
return|;
block|}
else|else
block|{
name|ReviewDb
name|db
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|insertPatchSet
argument_list|(
name|db
argument_list|)
return|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|newProgress
init|)
block|{
name|replaceProgress
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Futures
operator|.
name|makeChecked
argument_list|(
name|future
argument_list|,
name|ORM_EXCEPTION
argument_list|)
return|;
block|}
DECL|method|insertPatchSet (ReviewDb db)
name|PatchSet
operator|.
name|Id
name|insertPatchSet
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|Account
operator|.
name|Id
name|me
init|=
name|currentUser
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|(
name|reviewerId
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|cc
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|(
name|ccId
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footerLines
init|=
name|newCommit
operator|.
name|getFooterLines
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|FooterLine
name|footerLine
range|:
name|footerLines
control|)
block|{
try|try
block|{
if|if
condition|(
name|isReviewer
argument_list|(
name|footerLine
argument_list|)
condition|)
block|{
name|reviewers
operator|.
name|add
argument_list|(
name|toAccountId
argument_list|(
name|footerLine
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|footerLine
operator|.
name|matches
argument_list|(
name|FooterKey
operator|.
name|CC
argument_list|)
condition|)
block|{
name|cc
operator|.
name|add
argument_list|(
name|toAccountId
argument_list|(
name|footerLine
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchAccountException
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
name|reviewers
operator|.
name|remove
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|cc
operator|.
name|remove
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|cc
operator|.
name|removeAll
argument_list|(
name|reviewers
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|oldReviewers
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|oldCC
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|change
operator|.
name|updateNumberOfPatchSets
argument_list|(
name|newPatchSet
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"change is closed"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|insertAncestors
argument_list|(
name|db
argument_list|,
name|newPatchSet
operator|.
name|getId
argument_list|()
argument_list|,
name|newCommit
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|newPatchSet
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkMergedInto
condition|)
block|{
specifier|final
name|Ref
name|mergedInto
init|=
name|findMergedInto
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|newCommit
argument_list|)
decl_stmt|;
name|mergedIntoRef
operator|=
name|mergedInto
operator|!=
literal|null
condition|?
name|mergedInto
operator|.
name|getName
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|patchSetApprovals
init|=
name|approvalsUtil
operator|.
name|copyVetosToLatestPatchSet
argument_list|(
name|db
argument_list|,
name|change
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|haveApprovals
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
name|oldReviewers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|oldCC
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|patchSetApprovals
control|)
block|{
name|haveApprovals
operator|.
name|add
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|oldReviewers
operator|.
name|add
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oldCC
operator|.
name|add
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|approvalsUtil
operator|.
name|addReviewers
argument_list|(
name|db
argument_list|,
name|change
argument_list|,
name|newPatchSet
argument_list|,
name|info
argument_list|,
name|reviewers
argument_list|,
name|haveApprovals
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|,
name|me
argument_list|,
name|newPatchSet
operator|.
name|getCreatedOn
argument_list|()
argument_list|,
name|newPatchSet
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setMessage
argument_list|(
literal|"Uploaded patch set "
operator|+
name|newPatchSet
operator|.
name|getPatchSetId
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|equals
argument_list|(
name|priorPatchSet
argument_list|)
condition|)
block|{
name|ChangeUtil
operator|.
name|updateTrackingIds
argument_list|(
name|db
argument_list|,
name|change
argument_list|,
name|trackingFooters
argument_list|,
name|footerLines
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mergedIntoRef
operator|==
literal|null
condition|)
block|{
comment|// Change should be new, so it can go through review again.
comment|//
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|change
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|equals
argument_list|(
name|priorPatchSet
argument_list|)
condition|)
block|{
return|return
name|change
return|;
block|}
if|if
condition|(
name|destTopicName
operator|!=
literal|null
condition|)
block|{
name|change
operator|.
name|setTopic
argument_list|(
name|destTopicName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|DRAFT
operator|&&
name|newPatchSet
operator|.
name|isDraft
argument_list|()
condition|)
block|{
comment|// Leave in draft status.
block|}
else|else
block|{
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
name|change
operator|.
name|setLastSha1MergeTested
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|change
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|newPatchSet
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"change is closed"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mergedIntoRef
operator|!=
literal|null
condition|)
block|{
comment|// Change was already submitted to a branch, close it.
comment|//
name|markChangeMergedByPush
argument_list|(
name|db
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|replication
operator|.
name|fire
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|newPatchSet
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|hooks
operator|.
name|doPatchsetCreatedHook
argument_list|(
name|change
argument_list|,
name|newPatchSet
argument_list|,
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergedIntoRef
operator|!=
literal|null
condition|)
block|{
name|hooks
operator|.
name|doChangeMergedHook
argument_list|(
name|change
argument_list|,
name|currentUser
operator|.
name|getAccount
argument_list|()
argument_list|,
name|newPatchSet
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
name|workQueue
operator|.
name|getDefaultQueue
argument_list|()
operator|.
name|submit
argument_list|(
name|requestScopePropagator
operator|.
name|wrap
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ReplacePatchSetSender
name|cm
init|=
name|replacePatchSetFactory
operator|.
name|create
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|cm
operator|.
name|setFrom
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setPatchSet
argument_list|(
name|newPatchSet
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setChangeMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addReviewers
argument_list|(
name|reviewers
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addExtraCC
argument_list|(
name|cc
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addReviewers
argument_list|(
name|oldReviewers
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addExtraCC
argument_list|(
name|oldCC
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email for new patch set "
operator|+
name|newPatchSet
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mergedIntoRef
operator|!=
literal|null
condition|)
block|{
name|sendMergedEmail
argument_list|(
name|ReplaceRequest
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"send-email newpatchset"
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|newPatchSet
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
DECL|method|parentsEqual (RevCommit a, RevCommit b)
specifier|static
name|boolean
name|parentsEqual
parameter_list|(
name|RevCommit
name|a
parameter_list|,
name|RevCommit
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|getParentCount
argument_list|()
operator|!=
name|b
operator|.
name|getParentCount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|getParentCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getParent
argument_list|(
name|i
argument_list|)
operator|!=
name|b
operator|.
name|getParent
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|authorEqual (RevCommit a, RevCommit b)
specifier|static
name|boolean
name|authorEqual
parameter_list|(
name|RevCommit
name|a
parameter_list|,
name|RevCommit
name|b
parameter_list|)
block|{
name|PersonIdent
name|aAuthor
init|=
name|a
operator|.
name|getAuthorIdent
argument_list|()
decl_stmt|;
name|PersonIdent
name|bAuthor
init|=
name|b
operator|.
name|getAuthorIdent
argument_list|()
decl_stmt|;
if|if
condition|(
name|aAuthor
operator|==
literal|null
operator|&&
name|bAuthor
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|aAuthor
operator|==
literal|null
operator|||
name|bAuthor
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|eq
argument_list|(
name|aAuthor
operator|.
name|getName
argument_list|()
argument_list|,
name|bAuthor
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|eq
argument_list|(
name|aAuthor
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
name|bAuthor
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
return|;
block|}
DECL|method|eq (String a, String b)
specifier|static
name|boolean
name|eq
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
operator|&&
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|==
literal|null
operator|||
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
DECL|method|findMergedInto (final String first, final RevCommit commit)
specifier|private
name|Ref
name|findMergedInto
parameter_list|(
specifier|final
name|String
name|first
parameter_list|,
specifier|final
name|RevCommit
name|commit
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|all
init|=
name|repo
operator|.
name|getAllRefs
argument_list|()
decl_stmt|;
name|Ref
name|firstRef
init|=
name|all
operator|.
name|get
argument_list|(
name|first
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstRef
operator|!=
literal|null
operator|&&
name|isMergedInto
argument_list|(
name|commit
argument_list|,
name|firstRef
argument_list|)
condition|)
block|{
return|return
name|firstRef
return|;
block|}
for|for
control|(
name|Ref
name|ref
range|:
name|all
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|isHead
argument_list|(
name|ref
argument_list|)
condition|)
block|{
if|if
condition|(
name|isMergedInto
argument_list|(
name|commit
argument_list|,
name|ref
argument_list|)
condition|)
block|{
return|return
name|ref
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Can't check for already submitted change"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|isMergedInto (final RevCommit commit, final Ref ref)
specifier|private
name|boolean
name|isMergedInto
parameter_list|(
specifier|final
name|RevCommit
name|commit
parameter_list|,
specifier|final
name|Ref
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RevWalk
name|rw
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
return|return
name|rw
operator|.
name|isMergedInto
argument_list|(
name|commit
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|validateNewCommits (RefControl ctl, ReceiveCommand cmd)
specifier|private
name|void
name|validateNewCommits
parameter_list|(
name|RefControl
name|ctl
parameter_list|,
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
if|if
condition|(
name|ctl
operator|.
name|canForgeAuthor
argument_list|()
operator|&&
name|ctl
operator|.
name|canForgeCommitter
argument_list|()
operator|&&
name|ctl
operator|.
name|canForgeGerritServerIdentity
argument_list|()
operator|&&
name|ctl
operator|.
name|canUploadMerges
argument_list|()
operator|&&
operator|!
name|projectControl
operator|.
name|getProjectState
argument_list|()
operator|.
name|isUseSignedOffBy
argument_list|()
operator|&&
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|rejectCommits
argument_list|)
operator|&&
operator|!
name|GitRepositoryManager
operator|.
name|REF_CONFIG
operator|.
name|equals
argument_list|(
name|ctl
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|&&
operator|!
operator|(
name|MagicBranch
operator|.
name|isMagicBranch
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|||
name|NEW_PATCHSET
operator|.
name|matcher
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
specifier|final
name|RevWalk
name|walk
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|walk
operator|.
name|reset
argument_list|()
expr_stmt|;
name|walk
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|NONE
argument_list|)
expr_stmt|;
try|try
block|{
name|walk
operator|.
name|markStart
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectId
name|id
range|:
name|existingObjects
argument_list|()
control|)
block|{
try|try
block|{
name|walk
operator|.
name|markUninteresting
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
name|RevCommit
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|walk
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|validCommit
argument_list|(
name|ctl
argument_list|,
name|cmd
argument_list|,
name|c
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_MISSING_OBJECT
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Invalid pack upload; one or more objects weren't sent"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|existingObjects ()
specifier|private
name|Collection
argument_list|<
name|ObjectId
argument_list|>
name|existingObjects
parameter_list|()
block|{
if|if
condition|(
name|existingObjects
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|refs
init|=
name|repo
operator|.
name|getAllRefs
argument_list|()
decl_stmt|;
name|existingObjects
operator|=
operator|new
name|ArrayList
argument_list|<
name|ObjectId
argument_list|>
argument_list|(
name|refs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Ref
name|r
range|:
name|refs
operator|.
name|values
argument_list|()
control|)
block|{
name|existingObjects
operator|.
name|add
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|existingObjects
return|;
block|}
DECL|method|validCommit (final RefControl ctl, final ReceiveCommand cmd, final RevCommit c)
specifier|private
name|boolean
name|validCommit
parameter_list|(
specifier|final
name|RefControl
name|ctl
parameter_list|,
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|,
specifier|final
name|RevCommit
name|c
parameter_list|)
throws|throws
name|MissingObjectException
throws|,
name|IOException
block|{
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
specifier|final
name|PersonIdent
name|committer
init|=
name|c
operator|.
name|getCommitterIdent
argument_list|()
decl_stmt|;
specifier|final
name|PersonIdent
name|author
init|=
name|c
operator|.
name|getAuthorIdent
argument_list|()
decl_stmt|;
comment|// Require permission to upload merges.
if|if
condition|(
name|c
operator|.
name|getParentCount
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|ctl
operator|.
name|canUploadMerges
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"you are not allowed to upload merges"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Don't allow the user to amend a merge created by Gerrit Code Review.
comment|// This seems to happen all too often, due to users not paying any
comment|// attention to what they are doing.
comment|//
if|if
condition|(
name|c
operator|.
name|getParentCount
argument_list|()
operator|>
literal|1
operator|&&
name|author
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|gerritIdent
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|author
operator|.
name|getEmailAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|gerritIdent
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|&&
operator|!
name|ctl
operator|.
name|canForgeGerritServerIdentity
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"do not amend merges not made by you"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Require that author matches the uploader.
comment|//
if|if
condition|(
operator|!
name|currentUser
operator|.
name|getEmailAddresses
argument_list|()
operator|.
name|contains
argument_list|(
name|author
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|&&
operator|!
name|ctl
operator|.
name|canForgeAuthor
argument_list|()
condition|)
block|{
name|sendInvalidEmailError
argument_list|(
name|c
argument_list|,
literal|"author"
argument_list|,
name|author
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid author"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Require that committer matches the uploader.
comment|//
if|if
condition|(
operator|!
name|currentUser
operator|.
name|getEmailAddresses
argument_list|()
operator|.
name|contains
argument_list|(
name|committer
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|&&
operator|!
name|ctl
operator|.
name|canForgeCommitter
argument_list|()
condition|)
block|{
name|sendInvalidEmailError
argument_list|(
name|c
argument_list|,
literal|"committer"
argument_list|,
name|committer
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid committer"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|projectControl
operator|.
name|getProjectState
argument_list|()
operator|.
name|isUseSignedOffBy
argument_list|()
condition|)
block|{
comment|// If the project wants Signed-off-by / Acked-by lines, verify we
comment|// have them for the blamable parties involved on this change.
comment|//
name|boolean
name|sboAuthor
init|=
literal|false
decl_stmt|,
name|sboCommitter
init|=
literal|false
decl_stmt|,
name|sboMe
init|=
literal|false
decl_stmt|;
for|for
control|(
specifier|final
name|FooterLine
name|footer
range|:
name|c
operator|.
name|getFooterLines
argument_list|()
control|)
block|{
if|if
condition|(
name|footer
operator|.
name|matches
argument_list|(
name|FooterKey
operator|.
name|SIGNED_OFF_BY
argument_list|)
condition|)
block|{
specifier|final
name|String
name|e
init|=
name|footer
operator|.
name|getEmailAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|sboAuthor
operator||=
name|author
operator|.
name|getEmailAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|sboCommitter
operator||=
name|committer
operator|.
name|getEmailAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|sboMe
operator||=
name|currentUser
operator|.
name|getEmailAddresses
argument_list|()
operator|.
name|contains
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|sboAuthor
operator|&&
operator|!
name|sboCommitter
operator|&&
operator|!
name|sboMe
operator|&&
operator|!
name|ctl
operator|.
name|canForgeCommitter
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"not Signed-off-by author/committer/uploader in commit message footer"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|idList
init|=
name|c
operator|.
name|getFooterLines
argument_list|(
name|CHANGE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|MagicBranch
operator|.
name|isMagicBranch
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|||
name|NEW_PATCHSET
operator|.
name|matcher
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
name|idList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|projectControl
operator|.
name|getProjectState
argument_list|()
operator|.
name|isRequireChangeID
argument_list|()
condition|)
block|{
name|String
name|errMsg
init|=
literal|"missing Change-Id in commit message footer"
decl_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
name|getFixedCommitMsgWithChangeId
argument_list|(
name|errMsg
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|idList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"multiple Change-Id lines in commit message footer"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
specifier|final
name|String
name|v
init|=
name|idList
operator|.
name|get
argument_list|(
name|idList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|v
operator|.
name|matches
argument_list|(
literal|"^I[0-9a-f]{8,}.*$"
argument_list|)
condition|)
block|{
specifier|final
name|String
name|errMsg
init|=
literal|"missing or invalid Change-Id line format in commit message footer"
decl_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
name|getFixedCommitMsgWithChangeId
argument_list|(
name|errMsg
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
comment|// Check for banned commits to prevent them from entering the tree again.
if|if
condition|(
name|rejectCommits
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"contains banned commit "
operator|+
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// If this is the special project configuration branch, validate the config.
if|if
condition|(
name|GitRepositoryManager
operator|.
name|REF_CONFIG
operator|.
name|equals
argument_list|(
name|ctl
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|ProjectConfig
name|cfg
init|=
operator|new
name|ProjectConfig
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|load
argument_list|(
name|repo
argument_list|,
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cfg
operator|.
name|getValidationErrors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addError
argument_list|(
literal|"Invalid project configuration:"
argument_list|)
expr_stmt|;
for|for
control|(
name|ValidationError
name|err
range|:
name|cfg
operator|.
name|getValidationErrors
argument_list|()
control|)
block|{
name|addError
argument_list|(
literal|"  "
operator|+
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid project configuration"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"User "
operator|+
name|currentUser
operator|.
name|getUserName
argument_list|()
operator|+
literal|" tried to push invalid project configuration "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid project configuration"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"User "
operator|+
name|currentUser
operator|.
name|getUserName
argument_list|()
operator|+
literal|" tried to push invalid project configuration "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|project
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
for|for
control|(
name|CommitValidationListener
name|validator
range|:
name|commitValidators
control|)
block|{
name|CommitValidationResult
name|validationResult
init|=
name|validator
operator|.
name|onCommitReceived
argument_list|(
operator|new
name|CommitReceivedEvent
argument_list|(
name|cmd
argument_list|,
name|project
argument_list|,
name|ctl
operator|.
name|getRefName
argument_list|()
argument_list|,
name|c
argument_list|,
name|currentUser
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|pluginName
init|=
name|pluginLoader
operator|.
name|getPluginName
argument_list|(
name|validator
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validationResult
operator|.
name|validated
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s (rejected by plugin %s)"
argument_list|,
name|validationResult
operator|.
name|message
argument_list|,
name|pluginName
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|validationResult
operator|.
name|message
argument_list|)
condition|)
block|{
name|addMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s (from plugin %s)"
argument_list|,
name|pluginName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Get the Gerrit hostname.    * @return the hostname from the canonical URL if it is configured,    * otherwise whatever the OS says the hostname is.    */
DECL|method|getGerritHost ()
specifier|private
name|String
name|getGerritHost
parameter_list|()
block|{
name|String
name|host
decl_stmt|;
if|if
condition|(
name|canonicalWebUrl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|host
operator|=
operator|new
name|URL
argument_list|(
name|canonicalWebUrl
argument_list|)
operator|.
name|getHost
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|host
operator|=
name|SystemReader
operator|.
name|getInstance
argument_list|()
operator|.
name|getHostname
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|host
operator|=
name|SystemReader
operator|.
name|getInstance
argument_list|()
operator|.
name|getHostname
argument_list|()
expr_stmt|;
block|}
return|return
name|host
return|;
block|}
comment|/**    * Get the Gerrit URL.    * @return the canonical URL (with any trailing slash removed) if it is    * configured, otherwise fall back to "http://hostname" where hostname is    * the value returned by {@link #getGerritHost()}.    */
DECL|method|getGerritUrl ()
specifier|private
name|String
name|getGerritUrl
parameter_list|()
block|{
if|if
condition|(
name|canonicalWebUrl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|canonicalWebUrl
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
name|canonicalWebUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|canonicalWebUrl
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
return|;
block|}
return|return
name|canonicalWebUrl
return|;
block|}
else|else
block|{
return|return
literal|"http://"
operator|+
name|getGerritHost
argument_list|()
return|;
block|}
block|}
comment|/**    * Get the text with instructions for installing the commit-msg hook, specific    * to the server hostname and transport protocol.    * @return commit-msg hook installation instructions as a String.    */
DECL|method|getCommitMessageHookInstallationHint ()
specifier|private
name|String
name|getCommitMessageHookInstallationHint
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|HostKey
argument_list|>
name|hostKeys
init|=
name|sshInfo
operator|.
name|getHostKeys
argument_list|()
decl_stmt|;
comment|// If there are no SSH keys, the commit-msg hook must be installed via HTTP(S)
if|if
condition|(
name|hostKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|"$ curl -o .git/hooks/commit-msg "
operator|+
name|getGerritUrl
argument_list|()
operator|+
literal|"/tools/hooks/commit-msg\n"
operator|+
literal|"$ chmod +x .git/hooks/commit-msg"
return|;
block|}
comment|// SSH keys exist, so the hook can be installed with scp.
name|String
name|sshHost
decl_stmt|;
name|int
name|sshPort
decl_stmt|;
name|String
name|host
init|=
name|hostKeys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|c
init|=
name|host
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|c
condition|)
block|{
if|if
condition|(
name|host
operator|.
name|startsWith
argument_list|(
literal|"*:"
argument_list|)
condition|)
block|{
name|sshHost
operator|=
name|getGerritHost
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sshHost
operator|=
name|host
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|sshPort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|host
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sshHost
operator|=
name|host
expr_stmt|;
name|sshPort
operator|=
literal|22
expr_stmt|;
block|}
return|return
literal|"$ scp -p -P "
operator|+
name|sshPort
operator|+
literal|" "
operator|+
name|currentUser
operator|.
name|getUserName
argument_list|()
operator|+
literal|"@"
operator|+
name|sshHost
operator|+
literal|":hooks/commit-msg .git/hooks/"
return|;
block|}
DECL|method|getFixedCommitMsgWithChangeId (String errMsg, RevCommit c)
specifier|private
name|String
name|getFixedCommitMsgWithChangeId
parameter_list|(
name|String
name|errMsg
parameter_list|,
name|RevCommit
name|c
parameter_list|)
block|{
comment|// We handle 3 cases:
comment|// 1. No change id in the commit message at all.
comment|// 2. change id last in the commit message but missing empty line to create the footer.
comment|// 3. there is a change-id somewhere in the commit message, but we ignore it.
specifier|final
name|String
name|changeId
init|=
literal|"Change-Id:"
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR: "
argument_list|)
operator|.
name|append
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Suggestion for commit message:\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getFullMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
name|changeId
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|changeId
argument_list|)
operator|.
name|append
argument_list|(
literal|" I"
argument_list|)
operator|.
name|append
argument_list|(
name|c
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|lines
index|[]
init|=
name|c
operator|.
name|getFullMessage
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|String
name|lastLine
init|=
name|lines
operator|.
name|length
operator|>
literal|0
condition|?
name|lines
index|[
name|lines
operator|.
name|length
operator|-
literal|1
index|]
else|:
literal|""
decl_stmt|;
if|if
condition|(
name|lastLine
operator|.
name|indexOf
argument_list|(
name|changeId
argument_list|)
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lines
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|lines
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|lastLine
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|changeId
argument_list|)
operator|.
name|append
argument_list|(
literal|" I"
argument_list|)
operator|.
name|append
argument_list|(
name|c
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nHint: A potential Change-Id was found, but it was not in the footer of the commit message."
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Hint: To automatically add a Change-Id to commit messages, install the commit-msg hook:\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getCommitMessageHookInstallationHint
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|sendInvalidEmailError (RevCommit c, String type, PersonIdent who)
specifier|private
name|void
name|sendInvalidEmailError
parameter_list|(
name|RevCommit
name|c
parameter_list|,
name|String
name|type
parameter_list|,
name|PersonIdent
name|who
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:  In commit "
operator|+
name|c
operator|.
name|name
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:  "
operator|+
name|type
operator|+
literal|" email address "
operator|+
name|who
operator|.
name|getEmailAddress
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:  does not match your user account.\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentUser
operator|.
name|getEmailAddresses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:  You have not registered any email addresses.\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:  The following addresses are currently registered:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|address
range|:
name|currentUser
operator|.
name|getEmailAddresses
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:    "
operator|+
name|address
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|canonicalWebUrl
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:  To register an email address, please visit:\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:  "
operator|+
name|canonicalWebUrl
operator|+
literal|"#"
operator|+
name|PageLinks
operator|.
name|SETTINGS_CONTACT
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|warnMalformedMessage (RevCommit c)
specifier|private
name|void
name|warnMalformedMessage
parameter_list|(
name|RevCommit
name|c
parameter_list|)
block|{
name|ObjectReader
name|reader
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|getObjectReader
argument_list|()
decl_stmt|;
if|if
condition|(
literal|65
operator|<
name|c
operator|.
name|getShortMessage
argument_list|()
operator|.
name|length
argument_list|()
condition|)
block|{
name|AbbreviatedObjectId
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|reader
operator|.
name|abbreviate
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|id
operator|=
name|c
operator|.
name|abbreviate
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
name|addMessage
argument_list|(
literal|"(W) "
operator|+
name|id
operator|.
name|name
argument_list|()
comment|//
operator|+
literal|": commit subject>65 characters; use shorter first paragraph"
argument_list|)
expr_stmt|;
block|}
name|int
name|longLineCnt
init|=
literal|0
decl_stmt|,
name|nonEmptyCnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|c
operator|.
name|getFullMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|line
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nonEmptyCnt
operator|++
expr_stmt|;
block|}
if|if
condition|(
literal|70
operator|<
name|line
operator|.
name|length
argument_list|()
condition|)
block|{
name|longLineCnt
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|0
operator|<
name|longLineCnt
operator|&&
literal|33
operator|<
name|longLineCnt
operator|*
literal|100
operator|/
name|nonEmptyCnt
condition|)
block|{
name|AbbreviatedObjectId
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|reader
operator|.
name|abbreviate
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|id
operator|=
name|c
operator|.
name|abbreviate
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
name|addMessage
argument_list|(
literal|"(W) "
operator|+
name|id
operator|.
name|name
argument_list|()
comment|//
operator|+
literal|": commit message lines>70 characters; manually wrap lines"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|autoCloseChanges (final ReceiveCommand cmd)
specifier|private
name|void
name|autoCloseChanges
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
specifier|final
name|RevWalk
name|rw
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
try|try
block|{
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ObjectId
operator|.
name|zeroId
argument_list|()
operator|.
name|equals
argument_list|(
name|cmd
operator|.
name|getOldId
argument_list|()
argument_list|)
condition|)
block|{
name|rw
operator|.
name|markUninteresting
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getOldId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|ObjectId
argument_list|,
name|Ref
argument_list|>
name|byCommit
init|=
name|changeRefsById
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Key
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|byKey
init|=
name|openChangesByKey
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ReplaceRequest
argument_list|>
name|toClose
init|=
operator|new
name|ArrayList
argument_list|<
name|ReplaceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|RevCommit
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Ref
name|ref
init|=
name|byCommit
operator|.
name|get
argument_list|(
name|c
operator|.
name|copy
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|Change
operator|.
name|Key
name|closedChange
init|=
name|closeChange
argument_list|(
name|cmd
argument_list|,
name|PatchSet
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|closeProgress
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|closedChange
operator|!=
literal|null
condition|)
block|{
name|byKey
operator|.
name|remove
argument_list|(
name|closedChange
argument_list|)
expr_stmt|;
block|}
block|}
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|changeId
range|:
name|c
operator|.
name|getFooterLines
argument_list|(
name|CHANGE_ID
argument_list|)
control|)
block|{
specifier|final
name|Change
operator|.
name|Id
name|onto
init|=
name|byKey
operator|.
name|get
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|changeId
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|onto
operator|!=
literal|null
condition|)
block|{
name|toClose
operator|.
name|add
argument_list|(
operator|new
name|ReplaceRequest
argument_list|(
name|onto
argument_list|,
name|c
argument_list|,
name|cmd
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
for|for
control|(
specifier|final
name|ReplaceRequest
name|req
range|:
name|toClose
control|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|psi
init|=
name|req
operator|.
name|validate
argument_list|(
literal|true
argument_list|)
condition|?
name|req
operator|.
name|insertPatchSet
argument_list|()
operator|.
name|checkedGet
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|psi
operator|!=
literal|null
condition|)
block|{
name|closeChange
argument_list|(
name|req
operator|.
name|inputCommand
argument_list|,
name|psi
argument_list|,
name|req
operator|.
name|newCommit
argument_list|)
expr_stmt|;
name|closeProgress
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// It handles gitlinks if required.
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
specifier|final
name|RevCommit
name|codeReviewCommit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|SubmoduleOp
name|subOp
init|=
name|subOpFactory
operator|.
name|create
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
argument_list|,
name|codeReviewCommit
argument_list|,
name|rw
argument_list|,
name|repo
argument_list|,
name|project
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Change
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|CodeReviewCommit
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|subOp
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't scan for changes to close"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't scan for changes to close"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SubmoduleException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't complete git links check"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|closeChange (final ReceiveCommand cmd, final PatchSet.Id psi, final RevCommit commit)
specifier|private
name|Change
operator|.
name|Key
name|closeChange
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|,
specifier|final
name|PatchSet
operator|.
name|Id
name|psi
parameter_list|,
specifier|final
name|RevCommit
name|commit
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|String
name|refName
init|=
name|cmd
operator|.
name|getRefName
argument_list|()
decl_stmt|;
specifier|final
name|Change
operator|.
name|Id
name|cid
init|=
name|psi
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
specifier|final
name|Change
name|change
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|cid
argument_list|)
decl_stmt|;
specifier|final
name|PatchSet
name|ps
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psi
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
operator|||
name|ps
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|project
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|psi
operator|+
literal|" is missing"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|MERGED
operator|||
name|change
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
condition|)
block|{
comment|// If its already merged, don't make further updates, it
comment|// might just be moving from an experimental branch into
comment|// a more stable branch.
comment|//
return|return
literal|null
return|;
block|}
name|ReplaceRequest
name|result
init|=
operator|new
name|ReplaceRequest
argument_list|(
name|cid
argument_list|,
name|commit
argument_list|,
name|cmd
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|result
operator|.
name|change
operator|=
name|change
expr_stmt|;
name|result
operator|.
name|newPatchSet
operator|=
name|ps
expr_stmt|;
name|result
operator|.
name|info
operator|=
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|commit
argument_list|,
name|psi
argument_list|)
expr_stmt|;
name|result
operator|.
name|mergedIntoRef
operator|=
name|refName
expr_stmt|;
name|markChangeMergedByPush
argument_list|(
name|db
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|hooks
operator|.
name|doChangeMergedHook
argument_list|(
name|change
argument_list|,
name|currentUser
operator|.
name|getAccount
argument_list|()
argument_list|,
name|result
operator|.
name|newPatchSet
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|sendMergedEmail
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|change
operator|.
name|getKey
argument_list|()
return|;
block|}
DECL|method|changeRefsById ()
specifier|private
name|Map
argument_list|<
name|ObjectId
argument_list|,
name|Ref
argument_list|>
name|changeRefsById
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|refsById
operator|==
literal|null
condition|)
block|{
name|refsById
operator|=
operator|new
name|HashMap
argument_list|<
name|ObjectId
argument_list|,
name|Ref
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Ref
name|r
range|:
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
literal|"refs/changes/"
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|PatchSet
operator|.
name|isRef
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|refsById
operator|.
name|put
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|refsById
return|;
block|}
DECL|method|openChangesByKey (Branch.NameKey branch)
specifier|private
name|Map
argument_list|<
name|Change
operator|.
name|Key
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|openChangesByKey
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Key
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|r
init|=
operator|new
name|HashMap
argument_list|<
name|Change
operator|.
name|Key
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Change
name|c
range|:
name|db
operator|.
name|changes
argument_list|()
operator|.
name|byBranchOpenAll
argument_list|(
name|branch
argument_list|)
control|)
block|{
name|r
operator|.
name|put
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
DECL|method|markChangeMergedByPush (final ReviewDb db, final ReplaceRequest result)
specifier|private
name|void
name|markChangeMergedByPush
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|ReplaceRequest
name|result
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|Change
name|change
init|=
name|result
operator|.
name|change
decl_stmt|;
specifier|final
name|String
name|mergedIntoRef
init|=
name|result
operator|.
name|mergedIntoRef
decl_stmt|;
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
name|result
operator|.
name|info
argument_list|)
expr_stmt|;
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|approvalsUtil
operator|.
name|syncChangeStatus
argument_list|(
name|change
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|msgBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msgBuf
operator|.
name|append
argument_list|(
literal|"Change has been successfully pushed"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mergedIntoRef
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|msgBuf
operator|.
name|append
argument_list|(
literal|" into "
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergedIntoRef
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
condition|)
block|{
name|msgBuf
operator|.
name|append
argument_list|(
literal|"branch "
argument_list|)
expr_stmt|;
name|msgBuf
operator|.
name|append
argument_list|(
name|Repository
operator|.
name|shortenRefName
argument_list|(
name|mergedIntoRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msgBuf
operator|.
name|append
argument_list|(
name|mergedIntoRef
argument_list|)
expr_stmt|;
block|}
block|}
name|msgBuf
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
specifier|final
name|ChangeMessage
name|msg
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|result
operator|.
name|info
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setMessage
argument_list|(
name|msgBuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
name|result
operator|.
name|info
argument_list|)
expr_stmt|;
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
return|return
name|change
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|sendMergedEmail (final ReplaceRequest result)
specifier|private
name|void
name|sendMergedEmail
parameter_list|(
specifier|final
name|ReplaceRequest
name|result
parameter_list|)
block|{
name|workQueue
operator|.
name|getDefaultQueue
argument_list|()
operator|.
name|submit
argument_list|(
name|requestScopePropagator
operator|.
name|wrap
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
specifier|final
name|MergedSender
name|cm
init|=
name|mergedSenderFactory
operator|.
name|create
argument_list|(
name|result
operator|.
name|change
argument_list|)
decl_stmt|;
name|cm
operator|.
name|setFrom
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setPatchSet
argument_list|(
name|result
operator|.
name|newPatchSet
argument_list|,
name|result
operator|.
name|info
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|psi
init|=
name|result
operator|.
name|newPatchSet
operator|.
name|getId
argument_list|()
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email for submitted patch set "
operator|+
name|psi
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"send-email merged"
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|insertAncestors (ReviewDb db, PatchSet.Id id, RevCommit src)
specifier|private
name|void
name|insertAncestors
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|PatchSet
operator|.
name|Id
name|id
parameter_list|,
name|RevCommit
name|src
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|int
name|cnt
init|=
name|src
operator|.
name|getParentCount
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PatchSetAncestor
argument_list|>
name|toInsert
init|=
operator|new
name|ArrayList
argument_list|<
name|PatchSetAncestor
argument_list|>
argument_list|(
name|cnt
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|cnt
condition|;
name|p
operator|++
control|)
block|{
name|PatchSetAncestor
name|a
decl_stmt|;
name|a
operator|=
operator|new
name|PatchSetAncestor
argument_list|(
operator|new
name|PatchSetAncestor
operator|.
name|Id
argument_list|(
name|id
argument_list|,
name|p
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setAncestorRevision
argument_list|(
name|toRevId
argument_list|(
name|src
operator|.
name|getParent
argument_list|(
name|p
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|toInsert
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|patchSetAncestors
argument_list|()
operator|.
name|insert
argument_list|(
name|toInsert
argument_list|)
expr_stmt|;
block|}
DECL|method|toRevId (final RevCommit src)
specifier|private
specifier|static
name|RevId
name|toRevId
parameter_list|(
specifier|final
name|RevCommit
name|src
parameter_list|)
block|{
return|return
operator|new
name|RevId
argument_list|(
name|src
operator|.
name|getId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
DECL|method|reject (final ReceiveCommand cmd)
specifier|private
name|void
name|reject
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"prohibited by Gerrit"
argument_list|)
expr_stmt|;
block|}
DECL|method|reject (final ReceiveCommand cmd, final String why)
specifier|private
name|void
name|reject
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|,
specifier|final
name|String
name|why
parameter_list|)
block|{
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_OTHER_REASON
argument_list|,
name|why
argument_list|)
expr_stmt|;
name|commandProgress
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|isHead (final Ref ref)
specifier|private
specifier|static
name|boolean
name|isHead
parameter_list|(
specifier|final
name|Ref
name|ref
parameter_list|)
block|{
return|return
name|ref
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
return|;
block|}
DECL|method|isHead (final ReceiveCommand cmd)
specifier|private
specifier|static
name|boolean
name|isHead
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
return|return
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
return|;
block|}
DECL|method|isConfig (final ReceiveCommand cmd)
specifier|private
specifier|static
name|boolean
name|isConfig
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
return|return
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|equals
argument_list|(
name|GitRepositoryManager
operator|.
name|REF_CONFIG
argument_list|)
return|;
block|}
block|}
end_class

end_unit

