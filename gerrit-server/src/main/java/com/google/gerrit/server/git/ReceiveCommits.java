begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|ChangeHookRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|NoSuchAccountException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AbstractAgreement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountAgreement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountGroupAgreement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ContributorAgreement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|PatchSetAncestor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|PatchSetInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountResolver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|TrackingFooters
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|CreateChangeSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|EmailException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MergedSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|ReplacePatchSetSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|AtomicUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AbbreviatedObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevFlagSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PostReceiveHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PreReceiveHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceivePack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/** Receives change upload using the Git receive-pack protocol. */
end_comment

begin_class
DECL|class|ReceiveCommits
specifier|public
class|class
name|ReceiveCommits
implements|implements
name|PreReceiveHook
implements|,
name|PostReceiveHook
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReceiveCommits
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NEW_CHANGE
specifier|public
specifier|static
specifier|final
name|String
name|NEW_CHANGE
init|=
literal|"refs/for/"
decl_stmt|;
DECL|field|NEW_PATCHSET
specifier|private
specifier|static
specifier|final
name|Pattern
name|NEW_PATCHSET
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^refs/changes/(?:[0-9][0-9]/)?([1-9][0-9]*)(?:/new)?$"
argument_list|)
decl_stmt|;
DECL|field|REVIEWED_BY
specifier|private
specifier|static
specifier|final
name|FooterKey
name|REVIEWED_BY
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Reviewed-by"
argument_list|)
decl_stmt|;
DECL|field|TESTED_BY
specifier|private
specifier|static
specifier|final
name|FooterKey
name|TESTED_BY
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Tested-by"
argument_list|)
decl_stmt|;
DECL|field|CHANGE_ID
specifier|private
specifier|static
specifier|final
name|FooterKey
name|CHANGE_ID
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Change-Id"
argument_list|)
decl_stmt|;
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (ProjectControl projectControl, Repository repository)
name|ReceiveCommits
name|create
parameter_list|(
name|ProjectControl
name|projectControl
parameter_list|,
name|Repository
name|repository
parameter_list|)
function_decl|;
block|}
DECL|class|Capable
specifier|public
specifier|static
class|class
name|Capable
block|{
DECL|field|OK
specifier|public
specifier|static
specifier|final
name|Capable
name|OK
init|=
operator|new
name|Capable
argument_list|(
literal|"OK"
argument_list|)
decl_stmt|;
DECL|field|message
specifier|private
specifier|final
name|String
name|message
decl_stmt|;
DECL|method|Capable (String msg)
name|Capable
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|message
operator|=
name|msg
expr_stmt|;
block|}
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
block|}
DECL|field|reviewerId
specifier|private
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewerId
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|ccId
specifier|private
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|ccId
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|currentUser
specifier|private
specifier|final
name|IdentifiedUser
name|currentUser
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|ReviewDb
name|db
decl_stmt|;
DECL|field|approvalTypes
specifier|private
specifier|final
name|ApprovalTypes
name|approvalTypes
decl_stmt|;
DECL|field|accountResolver
specifier|private
specifier|final
name|AccountResolver
name|accountResolver
decl_stmt|;
DECL|field|createChangeSenderFactory
specifier|private
specifier|final
name|CreateChangeSender
operator|.
name|Factory
name|createChangeSenderFactory
decl_stmt|;
DECL|field|mergedSenderFactory
specifier|private
specifier|final
name|MergedSender
operator|.
name|Factory
name|mergedSenderFactory
decl_stmt|;
DECL|field|replacePatchSetFactory
specifier|private
specifier|final
name|ReplacePatchSetSender
operator|.
name|Factory
name|replacePatchSetFactory
decl_stmt|;
DECL|field|replication
specifier|private
specifier|final
name|ReplicationQueue
name|replication
decl_stmt|;
DECL|field|patchSetInfoFactory
specifier|private
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
decl_stmt|;
DECL|field|hooks
specifier|private
specifier|final
name|ChangeHookRunner
name|hooks
decl_stmt|;
DECL|field|canonicalWebUrl
specifier|private
specifier|final
name|String
name|canonicalWebUrl
decl_stmt|;
DECL|field|gerritIdent
specifier|private
specifier|final
name|PersonIdent
name|gerritIdent
decl_stmt|;
DECL|field|trackingFooters
specifier|private
specifier|final
name|TrackingFooters
name|trackingFooters
decl_stmt|;
DECL|field|projectControl
specifier|private
specifier|final
name|ProjectControl
name|projectControl
decl_stmt|;
DECL|field|project
specifier|private
specifier|final
name|Project
name|project
decl_stmt|;
DECL|field|repo
specifier|private
specifier|final
name|Repository
name|repo
decl_stmt|;
DECL|field|rp
specifier|private
specifier|final
name|ReceivePack
name|rp
decl_stmt|;
DECL|field|rejectCommits
specifier|private
specifier|final
name|NoteMap
name|rejectCommits
decl_stmt|;
DECL|field|newChange
specifier|private
name|ReceiveCommand
name|newChange
decl_stmt|;
DECL|field|destBranch
specifier|private
name|Branch
operator|.
name|NameKey
name|destBranch
decl_stmt|;
DECL|field|destBranchCtl
specifier|private
name|RefControl
name|destBranchCtl
decl_stmt|;
DECL|field|allNewChanges
specifier|private
specifier|final
name|List
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|allNewChanges
init|=
operator|new
name|ArrayList
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|replaceByChange
specifier|private
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ReplaceRequest
argument_list|>
name|replaceByChange
init|=
operator|new
name|HashMap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ReplaceRequest
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|replaceByCommit
specifier|private
specifier|final
name|Map
argument_list|<
name|RevCommit
argument_list|,
name|ReplaceRequest
argument_list|>
name|replaceByCommit
init|=
operator|new
name|HashMap
argument_list|<
name|RevCommit
argument_list|,
name|ReplaceRequest
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|existingObjects
specifier|private
name|Collection
argument_list|<
name|ObjectId
argument_list|>
name|existingObjects
decl_stmt|;
DECL|field|refsById
specifier|private
name|Map
argument_list|<
name|ObjectId
argument_list|,
name|Ref
argument_list|>
name|refsById
decl_stmt|;
DECL|field|destTopicName
specifier|private
name|String
name|destTopicName
decl_stmt|;
annotation|@
name|Inject
DECL|method|ReceiveCommits (final ReviewDb db, final ApprovalTypes approvalTypes, final AccountResolver accountResolver, final CreateChangeSender.Factory createChangeSenderFactory, final MergedSender.Factory mergedSenderFactory, final ReplacePatchSetSender.Factory replacePatchSetFactory, final ReplicationQueue replication, final PatchSetInfoFactory patchSetInfoFactory, final ChangeHookRunner hooks, @CanonicalWebUrl @Nullable final String canonicalWebUrl, @GerritPersonIdent final PersonIdent gerritIdent, final TrackingFooters trackingFooters, @Assisted final ProjectControl projectControl, @Assisted final Repository repo)
name|ReceiveCommits
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|ApprovalTypes
name|approvalTypes
parameter_list|,
specifier|final
name|AccountResolver
name|accountResolver
parameter_list|,
specifier|final
name|CreateChangeSender
operator|.
name|Factory
name|createChangeSenderFactory
parameter_list|,
specifier|final
name|MergedSender
operator|.
name|Factory
name|mergedSenderFactory
parameter_list|,
specifier|final
name|ReplacePatchSetSender
operator|.
name|Factory
name|replacePatchSetFactory
parameter_list|,
specifier|final
name|ReplicationQueue
name|replication
parameter_list|,
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
parameter_list|,
specifier|final
name|ChangeHookRunner
name|hooks
parameter_list|,
annotation|@
name|CanonicalWebUrl
annotation|@
name|Nullable
specifier|final
name|String
name|canonicalWebUrl
parameter_list|,
annotation|@
name|GerritPersonIdent
specifier|final
name|PersonIdent
name|gerritIdent
parameter_list|,
specifier|final
name|TrackingFooters
name|trackingFooters
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|ProjectControl
name|projectControl
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|currentUser
operator|=
operator|(
name|IdentifiedUser
operator|)
name|projectControl
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|approvalTypes
operator|=
name|approvalTypes
expr_stmt|;
name|this
operator|.
name|accountResolver
operator|=
name|accountResolver
expr_stmt|;
name|this
operator|.
name|createChangeSenderFactory
operator|=
name|createChangeSenderFactory
expr_stmt|;
name|this
operator|.
name|mergedSenderFactory
operator|=
name|mergedSenderFactory
expr_stmt|;
name|this
operator|.
name|replacePatchSetFactory
operator|=
name|replacePatchSetFactory
expr_stmt|;
name|this
operator|.
name|replication
operator|=
name|replication
expr_stmt|;
name|this
operator|.
name|patchSetInfoFactory
operator|=
name|patchSetInfoFactory
expr_stmt|;
name|this
operator|.
name|hooks
operator|=
name|hooks
expr_stmt|;
name|this
operator|.
name|canonicalWebUrl
operator|=
name|canonicalWebUrl
expr_stmt|;
name|this
operator|.
name|gerritIdent
operator|=
name|gerritIdent
expr_stmt|;
name|this
operator|.
name|trackingFooters
operator|=
name|trackingFooters
expr_stmt|;
name|this
operator|.
name|projectControl
operator|=
name|projectControl
expr_stmt|;
name|this
operator|.
name|project
operator|=
name|projectControl
operator|.
name|getProject
argument_list|()
expr_stmt|;
name|this
operator|.
name|repo
operator|=
name|repo
expr_stmt|;
name|this
operator|.
name|rp
operator|=
operator|new
name|ReceivePack
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|this
operator|.
name|rejectCommits
operator|=
name|loadRejectCommitsMap
argument_list|()
expr_stmt|;
name|rp
operator|.
name|setAllowCreates
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setAllowDeletes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setAllowNonFastForwards
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setCheckReceivedObjects
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|projectControl
operator|.
name|allRefsAreVisible
argument_list|()
condition|)
block|{
name|rp
operator|.
name|setCheckReferencedObjectsAreReachable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setRefFilter
argument_list|(
operator|new
name|VisibleRefFilter
argument_list|(
name|repo
argument_list|,
name|projectControl
argument_list|,
name|db
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rp
operator|.
name|setRefFilter
argument_list|(
operator|new
name|ReceiveCommitsRefFilter
argument_list|(
name|rp
operator|.
name|getRefFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setPreReceiveHook
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setPostReceiveHook
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/** Add reviewers for new (or updated) changes. */
DECL|method|addReviewers (Collection<Account.Id> who)
specifier|public
name|void
name|addReviewers
parameter_list|(
name|Collection
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|who
parameter_list|)
block|{
name|reviewerId
operator|.
name|addAll
argument_list|(
name|who
argument_list|)
expr_stmt|;
block|}
comment|/** Add reviewers for new (or updated) changes. */
DECL|method|addExtraCC (Collection<Account.Id> who)
specifier|public
name|void
name|addExtraCC
parameter_list|(
name|Collection
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|who
parameter_list|)
block|{
name|ccId
operator|.
name|addAll
argument_list|(
name|who
argument_list|)
expr_stmt|;
block|}
comment|/** @return the ReceivePack instance to speak the native Git protocol. */
DECL|method|getReceivePack ()
specifier|public
name|ReceivePack
name|getReceivePack
parameter_list|()
block|{
return|return
name|rp
return|;
block|}
comment|/** Determine if the user can upload commits. */
DECL|method|canUpload ()
specifier|public
name|Capable
name|canUpload
parameter_list|()
block|{
if|if
condition|(
operator|!
name|projectControl
operator|.
name|canPushToAtLeastOneRef
argument_list|()
condition|)
block|{
name|String
name|reqName
init|=
name|project
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|new
name|Capable
argument_list|(
literal|"Upload denied for project '"
operator|+
name|reqName
operator|+
literal|"'"
argument_list|)
return|;
block|}
comment|// Don't permit receive-pack to be executed if a refs/for/branch_name
comment|// reference exists in the destination repository. These block the
comment|// client from being able to even send us a pack file, as it is very
comment|// unlikely the user passed the --force flag and the new commit is
comment|// probably not going to fast-forward the branch.
comment|//
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|blockingFors
decl_stmt|;
try|try
block|{
name|blockingFors
operator|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
literal|"refs/for/"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|String
name|projName
init|=
name|project
operator|.
name|getName
argument_list|()
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot scan refs in '"
operator|+
name|projName
operator|+
literal|"'"
argument_list|,
name|err
argument_list|)
expr_stmt|;
return|return
operator|new
name|Capable
argument_list|(
literal|"Server process cannot read '"
operator|+
name|projName
operator|+
literal|"'"
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|blockingFors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|projName
init|=
name|project
operator|.
name|getName
argument_list|()
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Repository '"
operator|+
name|projName
operator|+
literal|"' needs the following refs removed to receive changes: "
operator|+
name|blockingFors
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Capable
argument_list|(
literal|"One or more refs/for/ names blocks change upload"
argument_list|)
return|;
block|}
if|if
condition|(
name|project
operator|.
name|isUseContributorAgreements
argument_list|()
condition|)
block|{
try|try
block|{
return|return
name|verifyActiveContributorAgreement
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot query database for agreements"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|Capable
argument_list|(
literal|"Cannot verify contribution agreement"
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|Capable
operator|.
name|OK
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|onPreReceive (final ReceivePack arg0, final Collection<ReceiveCommand> commands)
specifier|public
name|void
name|onPreReceive
parameter_list|(
specifier|final
name|ReceivePack
name|arg0
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|ReceiveCommand
argument_list|>
name|commands
parameter_list|)
block|{
name|parseCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
if|if
condition|(
name|newChange
operator|!=
literal|null
operator|&&
name|newChange
operator|.
name|getResult
argument_list|()
operator|==
name|ReceiveCommand
operator|.
name|Result
operator|.
name|NOT_ATTEMPTED
condition|)
block|{
name|createNewChanges
argument_list|()
expr_stmt|;
block|}
name|doReplaces
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onPostReceive (final ReceivePack arg0, final Collection<ReceiveCommand> commands)
specifier|public
name|void
name|onPostReceive
parameter_list|(
specifier|final
name|ReceivePack
name|arg0
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|ReceiveCommand
argument_list|>
name|commands
parameter_list|)
block|{
for|for
control|(
specifier|final
name|ReceiveCommand
name|c
range|:
name|commands
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getResult
argument_list|()
operator|==
name|Result
operator|.
name|OK
condition|)
block|{
if|if
condition|(
name|isHead
argument_list|(
name|c
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|c
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
name|autoCloseChanges
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
break|break;
case|case
name|UPDATE
case|:
case|case
name|UPDATE_NONFASTFORWARD
case|:
name|autoCloseChanges
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|c
operator|.
name|getRefName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|NEW_CHANGE
argument_list|)
condition|)
block|{
comment|// We only schedule direct refs updates for replication.
comment|// Change refs are scheduled when they are created.
comment|//
name|replication
operator|.
name|scheduleUpdate
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|c
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|Branch
operator|.
name|NameKey
name|destBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|c
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|hooks
operator|.
name|doRefUpdatedHook
argument_list|(
name|destBranch
argument_list|,
name|c
operator|.
name|getOldId
argument_list|()
argument_list|,
name|c
operator|.
name|getNewId
argument_list|()
argument_list|,
name|currentUser
operator|.
name|getAccount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|allNewChanges
operator|.
name|isEmpty
argument_list|()
operator|&&
name|canonicalWebUrl
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|url
init|=
name|canonicalWebUrl
decl_stmt|;
name|rp
operator|.
name|sendMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|rp
operator|.
name|sendMessage
argument_list|(
literal|"New Changes:"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Change
operator|.
name|Id
name|c
range|:
name|allNewChanges
control|)
block|{
name|rp
operator|.
name|sendMessage
argument_list|(
literal|"  "
operator|+
name|url
operator|+
name|c
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rp
operator|.
name|sendMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyActiveContributorAgreement ()
specifier|private
name|Capable
name|verifyActiveContributorAgreement
parameter_list|()
throws|throws
name|OrmException
block|{
name|AbstractAgreement
name|bestAgreement
init|=
literal|null
decl_stmt|;
name|ContributorAgreement
name|bestCla
init|=
literal|null
decl_stmt|;
name|OUTER
label|:
for|for
control|(
name|AccountGroup
operator|.
name|Id
name|groupId
range|:
name|currentUser
operator|.
name|getEffectiveGroups
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|AccountGroupAgreement
argument_list|>
name|temp
init|=
name|db
operator|.
name|accountGroupAgreements
argument_list|()
operator|.
name|byGroup
argument_list|(
name|groupId
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|temp
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|AccountGroupAgreement
name|a
range|:
name|temp
control|)
block|{
specifier|final
name|ContributorAgreement
name|cla
init|=
name|db
operator|.
name|contributorAgreements
argument_list|()
operator|.
name|get
argument_list|(
name|a
operator|.
name|getAgreementId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cla
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|bestAgreement
operator|=
name|a
expr_stmt|;
name|bestCla
operator|=
name|cla
expr_stmt|;
break|break
name|OUTER
break|;
block|}
block|}
if|if
condition|(
name|bestAgreement
operator|==
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|AccountAgreement
argument_list|>
name|temp
init|=
name|db
operator|.
name|accountAgreements
argument_list|()
operator|.
name|byAccount
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|temp
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|AccountAgreement
name|a
range|:
name|temp
control|)
block|{
specifier|final
name|ContributorAgreement
name|cla
init|=
name|db
operator|.
name|contributorAgreements
argument_list|()
operator|.
name|get
argument_list|(
name|a
operator|.
name|getAgreementId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cla
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|bestAgreement
operator|=
name|a
expr_stmt|;
name|bestCla
operator|=
name|cla
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|bestCla
operator|!=
literal|null
operator|&&
operator|!
name|bestCla
operator|.
name|isActive
argument_list|()
condition|)
block|{
specifier|final
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|bestCla
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" contributor agreement is expired.\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|canonicalWebUrl
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"\nPlease complete a new agreement"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|":\n\n  "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|canonicalWebUrl
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|PageLinks
operator|.
name|SETTINGS_AGREEMENTS
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Capable
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|bestCla
operator|!=
literal|null
operator|&&
name|bestCla
operator|.
name|isRequireContactInformation
argument_list|()
condition|)
block|{
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
name|fail
operator||=
name|missing
argument_list|(
name|currentUser
operator|.
name|getAccount
argument_list|()
operator|.
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
operator||=
name|missing
argument_list|(
name|currentUser
operator|.
name|getAccount
argument_list|()
operator|.
name|getPreferredEmail
argument_list|()
argument_list|)
expr_stmt|;
name|fail
operator||=
operator|!
name|currentUser
operator|.
name|getAccount
argument_list|()
operator|.
name|isContactFiled
argument_list|()
expr_stmt|;
if|if
condition|(
name|fail
condition|)
block|{
specifier|final
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|bestCla
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" contributor agreement requires"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" current contact information.\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|canonicalWebUrl
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"\nPlease review your contact information"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|":\n\n  "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|canonicalWebUrl
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|PageLinks
operator|.
name|SETTINGS_CONTACT
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Capable
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|bestAgreement
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|bestAgreement
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|VERIFIED
case|:
return|return
name|Capable
operator|.
name|OK
return|;
case|case
name|REJECTED
case|:
return|return
operator|new
name|Capable
argument_list|(
name|bestCla
operator|.
name|getShortName
argument_list|()
operator|+
literal|" contributor agreement was rejected."
operator|+
literal|"\n       (rejected on "
operator|+
name|bestAgreement
operator|.
name|getReviewedOn
argument_list|()
operator|+
literal|")\n"
argument_list|)
return|;
case|case
name|NEW
case|:
return|return
operator|new
name|Capable
argument_list|(
name|bestCla
operator|.
name|getShortName
argument_list|()
operator|+
literal|" contributor agreement is still pending review.\n"
argument_list|)
return|;
block|}
block|}
specifier|final
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" A Contributor Agreement must be completed before uploading"
argument_list|)
expr_stmt|;
if|if
condition|(
name|canonicalWebUrl
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|":\n\n  "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|canonicalWebUrl
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|PageLinks
operator|.
name|SETTINGS_AGREEMENTS
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Capable
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|missing (final String value)
specifier|private
specifier|static
name|boolean
name|missing
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
return|;
block|}
DECL|method|toAccountId (final String nameOrEmail)
specifier|private
name|Account
operator|.
name|Id
name|toAccountId
parameter_list|(
specifier|final
name|String
name|nameOrEmail
parameter_list|)
throws|throws
name|OrmException
throws|,
name|NoSuchAccountException
block|{
specifier|final
name|Account
name|a
init|=
name|accountResolver
operator|.
name|findByNameOrEmail
argument_list|(
name|nameOrEmail
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchAccountException
argument_list|(
literal|"\""
operator|+
name|nameOrEmail
operator|+
literal|"\" is not registered"
argument_list|)
throw|;
block|}
return|return
name|a
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|method|parseCommands (final Collection<ReceiveCommand> commands)
specifier|private
name|void
name|parseCommands
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|ReceiveCommand
argument_list|>
name|commands
parameter_list|)
block|{
for|for
control|(
specifier|final
name|ReceiveCommand
name|cmd
range|:
name|commands
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|!=
name|ReceiveCommand
operator|.
name|Result
operator|.
name|NOT_ATTEMPTED
condition|)
block|{
comment|// Already rejected by the core receive process.
comment|//
continue|continue;
block|}
if|if
condition|(
operator|!
name|Repository
operator|.
name|isValidRefName
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|||
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"//"
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"not valid ref"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|NEW_CHANGE
argument_list|)
condition|)
block|{
name|parseNewChangeCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|Matcher
name|m
init|=
name|NEW_PATCHSET
operator|.
name|matcher
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// The referenced change must exist and must still be open.
comment|//
specifier|final
name|Change
operator|.
name|Id
name|changeId
init|=
name|Change
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|parseReplaceCommand
argument_list|(
name|cmd
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
continue|continue;
block|}
switch|switch
condition|(
name|cmd
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
name|parseCreate
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
continue|continue;
case|case
name|UPDATE
case|:
name|parseUpdate
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
continue|continue;
case|case
name|DELETE
case|:
name|parseDelete
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
continue|continue;
case|case
name|UPDATE_NONFASTFORWARD
case|:
name|parseRewind
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Everything else is bogus as far as we are concerned.
comment|//
name|reject
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseCreate (final ReceiveCommand cmd)
specifier|private
name|void
name|parseCreate
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|RevObject
name|obj
decl_stmt|;
try|try
block|{
name|obj
operator|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseAny
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid object "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|cmd
operator|.
name|getRefName
argument_list|()
operator|+
literal|" creation"
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid object"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isHead
argument_list|(
name|cmd
argument_list|)
operator|&&
operator|!
name|isCommit
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
return|return;
block|}
name|RefControl
name|ctl
init|=
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctl
operator|.
name|canCreate
argument_list|(
name|rp
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|obj
argument_list|)
condition|)
block|{
name|validateNewCommits
argument_list|(
name|ctl
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
comment|// Let the core receive process handle it
block|}
else|else
block|{
name|reject
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseUpdate (final ReceiveCommand cmd)
specifier|private
name|void
name|parseUpdate
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|RefControl
name|ctl
init|=
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctl
operator|.
name|canUpdate
argument_list|()
condition|)
block|{
if|if
condition|(
name|isHead
argument_list|(
name|cmd
argument_list|)
operator|&&
operator|!
name|isCommit
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
return|return;
block|}
name|validateNewCommits
argument_list|(
name|ctl
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
comment|// Let the core receive process handle it
block|}
else|else
block|{
name|reject
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isCommit (final ReceiveCommand cmd)
specifier|private
name|boolean
name|isCommit
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|RevObject
name|obj
decl_stmt|;
try|try
block|{
name|obj
operator|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseAny
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid object "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid object"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|RevCommit
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"not a commit"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|parseDelete (final ReceiveCommand cmd)
specifier|private
name|void
name|parseDelete
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|RefControl
name|ctl
init|=
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctl
operator|.
name|canDelete
argument_list|()
condition|)
block|{
comment|// Let the core receive process handle it
block|}
else|else
block|{
name|reject
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseRewind (final ReceiveCommand cmd)
specifier|private
name|void
name|parseRewind
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|RevCommit
name|newObject
decl_stmt|;
try|try
block|{
name|newObject
operator|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|notCommit
parameter_list|)
block|{
name|newObject
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid object "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|cmd
operator|.
name|getRefName
argument_list|()
operator|+
literal|" forced update"
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid object"
argument_list|)
expr_stmt|;
return|return;
block|}
name|RefControl
name|ctl
init|=
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newObject
operator|!=
literal|null
condition|)
block|{
name|validateNewCommits
argument_list|(
name|ctl
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|!=
name|ReceiveCommand
operator|.
name|Result
operator|.
name|NOT_ATTEMPTED
condition|)
block|{
return|return;
block|}
block|}
if|if
condition|(
name|ctl
operator|.
name|canForceUpdate
argument_list|()
condition|)
block|{
comment|// Let the core receive process handle it
block|}
else|else
block|{
name|cmd
operator|.
name|setResult
argument_list|(
name|ReceiveCommand
operator|.
name|Result
operator|.
name|REJECTED_NONFASTFORWARD
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseNewChangeCommand (final ReceiveCommand cmd)
specifier|private
name|void
name|parseNewChangeCommand
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
comment|// Permit exactly one new change request per push.
comment|//
if|if
condition|(
name|newChange
operator|!=
literal|null
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"duplicate request"
argument_list|)
expr_stmt|;
return|return;
block|}
name|newChange
operator|=
name|cmd
expr_stmt|;
name|String
name|destBranchName
init|=
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|substring
argument_list|(
name|NEW_CHANGE
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destBranchName
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_REFS
argument_list|)
condition|)
block|{
name|destBranchName
operator|=
name|Constants
operator|.
name|R_HEADS
operator|+
name|destBranchName
expr_stmt|;
block|}
specifier|final
name|String
name|head
decl_stmt|;
try|try
block|{
name|head
operator|=
name|repo
operator|.
name|getFullBranch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot read HEAD symref"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"internal error"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Split the destination branch by branch and topic.  The topic
comment|// suffix is entirely optional, so it might not even exist.
comment|//
name|int
name|split
init|=
name|destBranchName
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|String
name|name
init|=
name|destBranchName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|split
argument_list|)
decl_stmt|;
if|if
condition|(
name|rp
operator|.
name|getAdvertisedRefs
argument_list|()
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// We advertised the branch to the client so we know
comment|// the branch exists. Target this branch for the upload.
comment|//
break|break;
block|}
elseif|else
if|if
condition|(
name|head
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// We didn't advertise the branch, because it doesn't exist yet.
comment|// Allow it anyway as HEAD is a symbolic reference to the name.
comment|//
break|break;
block|}
name|split
operator|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|,
name|split
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|split
operator|<=
name|Constants
operator|.
name|R_REFS
operator|.
name|length
argument_list|()
condition|)
block|{
name|String
name|n
init|=
name|destBranchName
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
condition|)
name|n
operator|=
name|n
operator|.
name|substring
argument_list|(
name|Constants
operator|.
name|R_HEADS
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"branch "
operator|+
name|n
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|split
operator|<
name|destBranchName
operator|.
name|length
argument_list|()
condition|)
block|{
name|destTopicName
operator|=
name|destBranchName
operator|.
name|substring
argument_list|(
name|split
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|destTopicName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|destTopicName
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|destTopicName
operator|=
literal|null
expr_stmt|;
block|}
name|destBranch
operator|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
comment|//
name|destBranchName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|split
argument_list|)
argument_list|)
expr_stmt|;
name|destBranchCtl
operator|=
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|destBranch
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|destBranchCtl
operator|.
name|canUpload
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
comment|// Validate that the new commits are connected with the existing heads
comment|// or tags of this repository. If they aren't, we want to abort. We do
comment|// this check by coloring the tip CONNECTED and letting a RevWalk push
comment|// that color through the graph until it reaches at least one of our
comment|// already existing heads or tags. We then test to see if that color
comment|// made it back onto that set.
comment|//
try|try
block|{
specifier|final
name|RevWalk
name|walk
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
specifier|final
name|RevFlag
name|SIDE_NEW
init|=
name|walk
operator|.
name|newFlag
argument_list|(
literal|"NEW"
argument_list|)
decl_stmt|;
specifier|final
name|RevFlag
name|SIDE_HAVE
init|=
name|walk
operator|.
name|newFlag
argument_list|(
literal|"HAVE"
argument_list|)
decl_stmt|;
specifier|final
name|RevFlagSet
name|COMMON
init|=
operator|new
name|RevFlagSet
argument_list|()
decl_stmt|;
name|COMMON
operator|.
name|add
argument_list|(
name|SIDE_NEW
argument_list|)
expr_stmt|;
name|COMMON
operator|.
name|add
argument_list|(
name|SIDE_HAVE
argument_list|)
expr_stmt|;
name|walk
operator|.
name|carry
argument_list|(
name|COMMON
argument_list|)
expr_stmt|;
name|walk
operator|.
name|reset
argument_list|()
expr_stmt|;
name|walk
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|walk
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|RevCommit
name|tip
init|=
name|walk
operator|.
name|parseCommit
argument_list|(
name|newChange
operator|.
name|getNewId
argument_list|()
argument_list|)
decl_stmt|;
name|tip
operator|.
name|add
argument_list|(
name|SIDE_NEW
argument_list|)
expr_stmt|;
name|walk
operator|.
name|markStart
argument_list|(
name|tip
argument_list|)
expr_stmt|;
name|boolean
name|haveHeads
init|=
literal|false
decl_stmt|;
for|for
control|(
specifier|final
name|Ref
name|r
range|:
name|rp
operator|.
name|getAdvertisedRefs
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|isHead
argument_list|(
name|r
argument_list|)
operator|||
name|isTag
argument_list|(
name|r
argument_list|)
condition|)
block|{
try|try
block|{
specifier|final
name|RevCommit
name|h
init|=
name|walk
operator|.
name|parseCommit
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|h
operator|.
name|add
argument_list|(
name|SIDE_HAVE
argument_list|)
expr_stmt|;
name|walk
operator|.
name|markStart
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|haveHeads
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
block|}
if|if
condition|(
name|haveHeads
condition|)
block|{
name|boolean
name|isConnected
init|=
literal|false
decl_stmt|;
name|RevCommit
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|walk
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|hasAll
argument_list|(
name|COMMON
argument_list|)
condition|)
block|{
name|isConnected
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|isConnected
condition|)
block|{
name|reject
argument_list|(
name|newChange
argument_list|,
literal|"no common ancestry"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|newChange
operator|.
name|setResult
argument_list|(
name|Result
operator|.
name|REJECTED_MISSING_OBJECT
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Invalid pack upload; one or more objects weren't sent"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|/**    * Loads a list of commits to reject from {@code refs/meta/reject-commits}.    *    * @return NoteMap of commits to be rejected, null if there are none.    * @throws IOException the map cannot be loaded.    */
DECL|method|loadRejectCommitsMap ()
specifier|private
name|NoteMap
name|loadRejectCommitsMap
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|getRef
argument_list|(
name|GitRepositoryManager
operator|.
name|REF_REJECT_COMMITS
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
name|NoteMap
operator|.
name|newEmptyMap
argument_list|()
return|;
block|}
name|RevWalk
name|rw
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|RevCommit
name|map
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|NoteMap
operator|.
name|read
argument_list|(
name|rw
operator|.
name|getObjectReader
argument_list|()
argument_list|,
name|map
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|badMap
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot load "
operator|+
name|GitRepositoryManager
operator|.
name|REF_REJECT_COMMITS
argument_list|,
name|badMap
argument_list|)
throw|;
block|}
block|}
DECL|method|parseReplaceCommand (final ReceiveCommand cmd, final Change.Id changeId)
specifier|private
name|void
name|parseReplaceCommand
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|,
specifier|final
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|.
name|getType
argument_list|()
operator|!=
name|ReceiveCommand
operator|.
name|Type
operator|.
name|CREATE
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid usage"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|RevCommit
name|newCommit
decl_stmt|;
try|try
block|{
name|newCommit
operator|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot parse "
operator|+
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" as commit"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid commit"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Change
name|changeEnt
decl_stmt|;
try|try
block|{
name|changeEnt
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot lookup existing change "
operator|+
name|changeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"database error"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|changeEnt
operator|==
literal|null
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"change "
operator|+
name|changeId
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|project
operator|.
name|getNameKey
argument_list|()
operator|.
name|equals
argument_list|(
name|changeEnt
operator|.
name|getProject
argument_list|()
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"change "
operator|+
name|changeId
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return;
block|}
name|requestReplace
argument_list|(
name|cmd
argument_list|,
name|changeEnt
argument_list|,
name|newCommit
argument_list|)
expr_stmt|;
block|}
DECL|method|requestReplace (final ReceiveCommand cmd, final Change change, final RevCommit newCommit)
specifier|private
name|boolean
name|requestReplace
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|,
specifier|final
name|Change
name|change
parameter_list|,
specifier|final
name|RevCommit
name|newCommit
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"change "
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|" closed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|ReplaceRequest
name|req
init|=
operator|new
name|ReplaceRequest
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|newCommit
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|replaceByChange
operator|.
name|containsKey
argument_list|(
name|req
operator|.
name|ontoChange
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"duplicate request"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|replaceByCommit
operator|.
name|containsKey
argument_list|(
name|req
operator|.
name|newCommit
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"duplicate request"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|replaceByChange
operator|.
name|put
argument_list|(
name|req
operator|.
name|ontoChange
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|replaceByCommit
operator|.
name|put
argument_list|(
name|req
operator|.
name|newCommit
argument_list|,
name|req
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|createNewChanges ()
specifier|private
name|void
name|createNewChanges
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|RevCommit
argument_list|>
name|toCreate
init|=
operator|new
name|ArrayList
argument_list|<
name|RevCommit
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|RevWalk
name|walk
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|walk
operator|.
name|reset
argument_list|()
expr_stmt|;
name|walk
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|walk
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|walk
operator|.
name|markStart
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|newChange
operator|.
name|getNewId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectId
name|id
range|:
name|existingObjects
argument_list|()
control|)
block|{
try|try
block|{
name|walk
operator|.
name|markUninteresting
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
specifier|final
name|Set
argument_list|<
name|Change
operator|.
name|Key
argument_list|>
name|newChangeIds
init|=
operator|new
name|HashSet
argument_list|<
name|Change
operator|.
name|Key
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|RevCommit
name|c
init|=
name|walk
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|replaceByCommit
operator|.
name|containsKey
argument_list|(
name|c
argument_list|)
condition|)
block|{
comment|// This commit was already scheduled to replace an existing PatchSet.
comment|//
continue|continue;
block|}
if|if
condition|(
operator|!
name|validCommit
argument_list|(
name|destBranchCtl
argument_list|,
name|newChange
argument_list|,
name|c
argument_list|)
condition|)
block|{
comment|// Not a change the user can propose? Abort as early as possible.
comment|//
return|return;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|idList
init|=
name|c
operator|.
name|getFooterLines
argument_list|(
name|CHANGE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|String
name|idStr
init|=
name|idList
operator|.
name|get
argument_list|(
name|idList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
specifier|final
name|Change
operator|.
name|Key
name|key
init|=
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|idStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|newChangeIds
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|newChange
argument_list|,
literal|"squash commits first"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|List
argument_list|<
name|Change
argument_list|>
name|changes
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|byProjectKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|key
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
name|changes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// WTF, multiple changes in this project have the same key?
comment|// Since the commit is new, the user should recreate it with
comment|// a different Change-Id. In practice, we should never see
comment|// this error message as Change-Id should be unique.
comment|//
name|reject
argument_list|(
name|newChange
argument_list|,
name|key
operator|.
name|get
argument_list|()
operator|+
literal|" has duplicates"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|changes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Schedule as a replacement to this one matching change.
comment|//
if|if
condition|(
name|requestReplace
argument_list|(
name|newChange
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|c
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
return|return;
block|}
block|}
if|if
condition|(
name|changes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|newChangeIds
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|toCreate
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Should never happen, the core receive process would have
comment|// identified the missing object earlier before we got control.
comment|//
name|newChange
operator|.
name|setResult
argument_list|(
name|Result
operator|.
name|REJECTED_MISSING_OBJECT
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Invalid pack upload; one or more objects weren't sent"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot query database to locate prior changes"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|newChange
argument_list|,
literal|"database error"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|toCreate
operator|.
name|isEmpty
argument_list|()
operator|&&
name|replaceByChange
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|newChange
argument_list|,
literal|"no new changes"
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
specifier|final
name|RevCommit
name|c
range|:
name|toCreate
control|)
block|{
try|try
block|{
name|createChange
argument_list|(
name|walk
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error computing patch of commit "
operator|+
name|c
operator|.
name|name
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|newChange
argument_list|,
literal|"diff error"
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error creating change for commit "
operator|+
name|c
operator|.
name|name
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|newChange
argument_list|,
literal|"database error"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|newChange
operator|.
name|setResult
argument_list|(
name|ReceiveCommand
operator|.
name|Result
operator|.
name|OK
argument_list|)
expr_stmt|;
block|}
DECL|method|createChange (final RevWalk walk, final RevCommit c)
specifier|private
name|void
name|createChange
parameter_list|(
specifier|final
name|RevWalk
name|walk
parameter_list|,
specifier|final
name|RevCommit
name|c
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
name|walk
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|warnMalformedMessage
argument_list|(
name|c
argument_list|)
expr_stmt|;
specifier|final
name|Account
operator|.
name|Id
name|me
init|=
name|currentUser
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Key
name|changeKey
init|=
operator|new
name|Change
operator|.
name|Key
argument_list|(
literal|"I"
operator|+
name|c
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|(
name|reviewerId
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|cc
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|(
name|ccId
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footerLines
init|=
name|c
operator|.
name|getFooterLines
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|FooterLine
name|footerLine
range|:
name|footerLines
control|)
block|{
try|try
block|{
if|if
condition|(
name|footerLine
operator|.
name|matches
argument_list|(
name|CHANGE_ID
argument_list|)
condition|)
block|{
specifier|final
name|String
name|v
init|=
name|footerLine
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|matches
argument_list|(
literal|"^I[0-9a-f]{8,}.*$"
argument_list|)
condition|)
block|{
name|changeKey
operator|=
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isReviewer
argument_list|(
name|footerLine
argument_list|)
condition|)
block|{
name|reviewers
operator|.
name|add
argument_list|(
name|toAccountId
argument_list|(
name|footerLine
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|footerLine
operator|.
name|matches
argument_list|(
name|FooterKey
operator|.
name|CC
argument_list|)
condition|)
block|{
name|cc
operator|.
name|add
argument_list|(
name|toAccountId
argument_list|(
name|footerLine
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchAccountException
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
name|reviewers
operator|.
name|remove
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|cc
operator|.
name|remove
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|cc
operator|.
name|removeAll
argument_list|(
name|reviewers
argument_list|)
expr_stmt|;
specifier|final
name|Change
name|change
init|=
operator|new
name|Change
argument_list|(
name|changeKey
argument_list|,
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|db
operator|.
name|nextChangeId
argument_list|()
argument_list|)
argument_list|,
name|me
argument_list|,
name|destBranch
argument_list|)
decl_stmt|;
name|change
operator|.
name|setTopic
argument_list|(
name|destTopicName
argument_list|)
expr_stmt|;
name|change
operator|.
name|nextPatchSetId
argument_list|()
expr_stmt|;
specifier|final
name|PatchSet
name|ps
init|=
operator|new
name|PatchSet
argument_list|(
name|change
operator|.
name|currPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setCreatedOn
argument_list|(
name|change
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setUploader
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setRevision
argument_list|(
name|toRevId
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|insertAncestors
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|PatchSetInfo
name|info
init|=
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|c
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|haveApprovals
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ApprovalType
argument_list|>
name|allTypes
init|=
name|approvalTypes
operator|.
name|getApprovalTypes
argument_list|()
decl_stmt|;
name|haveApprovals
operator|.
name|add
argument_list|(
name|me
argument_list|)
expr_stmt|;
if|if
condition|(
name|allTypes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|Account
operator|.
name|Id
name|authorId
init|=
name|info
operator|.
name|getAuthor
argument_list|()
operator|!=
literal|null
condition|?
name|info
operator|.
name|getAuthor
argument_list|()
operator|.
name|getAccount
argument_list|()
else|:
literal|null
decl_stmt|;
specifier|final
name|Account
operator|.
name|Id
name|committerId
init|=
name|info
operator|.
name|getCommitter
argument_list|()
operator|!=
literal|null
condition|?
name|info
operator|.
name|getCommitter
argument_list|()
operator|.
name|getAccount
argument_list|()
else|:
literal|null
decl_stmt|;
specifier|final
name|ApprovalCategory
operator|.
name|Id
name|catId
init|=
name|allTypes
operator|.
name|get
argument_list|(
name|allTypes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getCategory
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|authorId
operator|!=
literal|null
operator|&&
name|haveApprovals
operator|.
name|add
argument_list|(
name|authorId
argument_list|)
condition|)
block|{
name|insertDummyApproval
argument_list|(
name|change
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|authorId
argument_list|,
name|catId
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|committerId
operator|!=
literal|null
operator|&&
name|haveApprovals
operator|.
name|add
argument_list|(
name|committerId
argument_list|)
condition|)
block|{
name|insertDummyApproval
argument_list|(
name|change
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|committerId
argument_list|,
name|catId
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Account
operator|.
name|Id
name|reviewer
range|:
name|reviewers
control|)
block|{
if|if
condition|(
name|haveApprovals
operator|.
name|add
argument_list|(
name|reviewer
argument_list|)
condition|)
block|{
name|insertDummyApproval
argument_list|(
name|change
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|reviewer
argument_list|,
name|catId
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|ps
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|ru
operator|.
name|disableRefLog
argument_list|()
expr_stmt|;
if|if
condition|(
name|ru
operator|.
name|update
argument_list|(
name|walk
argument_list|)
operator|!=
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create ref "
operator|+
name|ps
operator|.
name|getRefName
argument_list|()
operator|+
literal|" in "
operator|+
name|repo
operator|.
name|getDirectory
argument_list|()
operator|+
literal|": "
operator|+
name|ru
operator|.
name|getResult
argument_list|()
argument_list|)
throw|;
block|}
name|replication
operator|.
name|scheduleUpdate
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|ru
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|allNewChanges
operator|.
name|add
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|CreateChangeSender
name|cm
decl_stmt|;
name|cm
operator|=
name|createChangeSenderFactory
operator|.
name|create
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setFrom
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setPatchSet
argument_list|(
name|ps
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addReviewers
argument_list|(
name|reviewers
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addExtraCC
argument_list|(
name|cc
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EmailException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email for new change "
operator|+
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|ChangeUtil
operator|.
name|updateTrackingIds
argument_list|(
name|db
argument_list|,
name|change
argument_list|,
name|trackingFooters
argument_list|,
name|footerLines
argument_list|)
expr_stmt|;
name|hooks
operator|.
name|doPatchsetCreatedHook
argument_list|(
name|change
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
DECL|method|isReviewer (final FooterLine candidateFooterLine)
specifier|private
specifier|static
name|boolean
name|isReviewer
parameter_list|(
specifier|final
name|FooterLine
name|candidateFooterLine
parameter_list|)
block|{
return|return
name|candidateFooterLine
operator|.
name|matches
argument_list|(
name|FooterKey
operator|.
name|SIGNED_OFF_BY
argument_list|)
operator|||
name|candidateFooterLine
operator|.
name|matches
argument_list|(
name|FooterKey
operator|.
name|ACKED_BY
argument_list|)
operator|||
name|candidateFooterLine
operator|.
name|matches
argument_list|(
name|REVIEWED_BY
argument_list|)
operator|||
name|candidateFooterLine
operator|.
name|matches
argument_list|(
name|TESTED_BY
argument_list|)
return|;
block|}
DECL|method|doReplaces ()
specifier|private
name|void
name|doReplaces
parameter_list|()
block|{
for|for
control|(
specifier|final
name|ReplaceRequest
name|request
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|doReplace
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error computing replacement patch for change "
operator|+
name|request
operator|.
name|ontoChange
operator|+
literal|", commit "
operator|+
name|request
operator|.
name|newCommit
operator|.
name|name
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|request
operator|.
name|cmd
argument_list|,
literal|"diff error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error storing replacement patch for change "
operator|+
name|request
operator|.
name|ontoChange
operator|+
literal|", commit "
operator|+
name|request
operator|.
name|newCommit
operator|.
name|name
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|request
operator|.
name|cmd
argument_list|,
literal|"database error"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|cmd
operator|.
name|getResult
argument_list|()
operator|==
name|ReceiveCommand
operator|.
name|Result
operator|.
name|NOT_ATTEMPTED
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Replacement patch for change "
operator|+
name|request
operator|.
name|ontoChange
operator|+
literal|", commit "
operator|+
name|request
operator|.
name|newCommit
operator|.
name|name
argument_list|()
operator|+
literal|" wasn't attempted."
operator|+
literal|"  This is a bug in the receive process implementation."
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|request
operator|.
name|cmd
argument_list|,
literal|"internal error"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doReplace (final ReplaceRequest request)
specifier|private
name|PatchSet
operator|.
name|Id
name|doReplace
parameter_list|(
specifier|final
name|ReplaceRequest
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
block|{
specifier|final
name|RevCommit
name|c
init|=
name|request
operator|.
name|newCommit
decl_stmt|;
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|warnMalformedMessage
argument_list|(
name|c
argument_list|)
expr_stmt|;
specifier|final
name|Account
operator|.
name|Id
name|me
init|=
name|currentUser
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|(
name|reviewerId
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|cc
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|(
name|ccId
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footerLines
init|=
name|c
operator|.
name|getFooterLines
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|FooterLine
name|footerLine
range|:
name|footerLines
control|)
block|{
try|try
block|{
if|if
condition|(
name|isReviewer
argument_list|(
name|footerLine
argument_list|)
condition|)
block|{
name|reviewers
operator|.
name|add
argument_list|(
name|toAccountId
argument_list|(
name|footerLine
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|footerLine
operator|.
name|matches
argument_list|(
name|FooterKey
operator|.
name|CC
argument_list|)
condition|)
block|{
name|cc
operator|.
name|add
argument_list|(
name|toAccountId
argument_list|(
name|footerLine
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchAccountException
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
name|reviewers
operator|.
name|remove
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|cc
operator|.
name|remove
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|cc
operator|.
name|removeAll
argument_list|(
name|reviewers
argument_list|)
expr_stmt|;
specifier|final
name|ReplaceResult
name|result
init|=
operator|new
name|ReplaceResult
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|oldReviewers
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|oldCC
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
name|Change
name|change
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|ontoChange
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
name|reject
argument_list|(
name|request
operator|.
name|cmd
argument_list|,
literal|"change "
operator|+
name|request
operator|.
name|ontoChange
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|request
operator|.
name|cmd
argument_list|,
literal|"change "
operator|+
name|request
operator|.
name|ontoChange
operator|+
literal|" closed"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|final
name|ChangeControl
name|changeCtl
init|=
name|projectControl
operator|.
name|controlFor
argument_list|(
name|change
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|changeCtl
operator|.
name|canAddPatchSet
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|request
operator|.
name|cmd
argument_list|,
literal|"cannot replace "
operator|+
name|request
operator|.
name|ontoChange
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|validCommit
argument_list|(
name|changeCtl
operator|.
name|getRefControl
argument_list|()
argument_list|,
name|request
operator|.
name|cmd
argument_list|,
name|c
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|PatchSet
operator|.
name|Id
name|priorPatchSet
init|=
name|change
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|PatchSet
name|ps
range|:
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|byChange
argument_list|(
name|request
operator|.
name|ontoChange
argument_list|)
control|)
block|{
if|if
condition|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Patch set "
operator|+
name|ps
operator|.
name|getId
argument_list|()
operator|+
literal|" has no revision"
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|request
operator|.
name|cmd
argument_list|,
literal|"change state corrupt"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|revIdStr
init|=
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|ObjectId
name|commitId
decl_stmt|;
try|try
block|{
name|commitId
operator|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|revIdStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid revision in "
operator|+
name|ps
operator|.
name|getId
argument_list|()
operator|+
literal|": "
operator|+
name|revIdStr
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|request
operator|.
name|cmd
argument_list|,
literal|"change state corrupt"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
specifier|final
name|RevCommit
name|prior
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|commitId
argument_list|)
decl_stmt|;
comment|// Don't allow a change to directly depend upon itself. This is a
comment|// very common error due to users making a new commit rather than
comment|// amending when trying to address review comments.
comment|//
if|if
condition|(
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|isMergedInto
argument_list|(
name|prior
argument_list|,
name|c
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|request
operator|.
name|cmd
argument_list|,
literal|"squash commits first"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Don't allow the same commit to appear twice on the same change
comment|//
if|if
condition|(
name|c
operator|==
name|prior
condition|)
block|{
name|reject
argument_list|(
name|request
operator|.
name|cmd
argument_list|,
literal|"commit already exists"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Don't allow the same tree if the commit message is unmodified
comment|// or no parents were updated (rebase), else warn that only part
comment|// of the commit was modified.
comment|//
if|if
condition|(
name|priorPatchSet
operator|.
name|equals
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
operator|&&
name|c
operator|.
name|getTree
argument_list|()
operator|==
name|prior
operator|.
name|getTree
argument_list|()
condition|)
block|{
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|prior
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|messageEq
init|=
name|eq
argument_list|(
name|c
operator|.
name|getFullMessage
argument_list|()
argument_list|,
name|prior
operator|.
name|getFullMessage
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|parentsEq
init|=
name|parentsEqual
argument_list|(
name|c
argument_list|,
name|prior
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|authorEq
init|=
name|authorEqual
argument_list|(
name|c
argument_list|,
name|prior
argument_list|)
decl_stmt|;
if|if
condition|(
name|messageEq
operator|&&
name|parentsEq
operator|&&
name|authorEq
condition|)
block|{
name|reject
argument_list|(
name|request
operator|.
name|cmd
argument_list|,
literal|"no changes made"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|ObjectReader
name|reader
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|getObjectReader
argument_list|()
decl_stmt|;
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"(W) "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|reader
operator|.
name|abbreviate
argument_list|(
name|c
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" no files changed"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|authorEq
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|", author changed"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|messageEq
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|", message updated"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|parentsEq
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|", was rebased"
argument_list|)
expr_stmt|;
block|}
name|rp
operator|.
name|sendMessage
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Change "
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|" missing "
operator|+
name|revIdStr
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|request
operator|.
name|cmd
argument_list|,
literal|"change state corrupt"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|change
operator|.
name|nextPatchSetId
argument_list|()
expr_stmt|;
return|return
name|change
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
name|reject
argument_list|(
name|request
operator|.
name|cmd
argument_list|,
literal|"change is closed"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|final
name|PatchSet
name|ps
init|=
operator|new
name|PatchSet
argument_list|(
name|change
operator|.
name|currPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setCreatedOn
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setUploader
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setRevision
argument_list|(
name|toRevId
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|insertAncestors
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Ref
name|mergedInto
init|=
name|findMergedInto
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|result
operator|.
name|mergedIntoRef
operator|=
name|mergedInto
operator|!=
literal|null
condition|?
name|mergedInto
operator|.
name|getName
argument_list|()
else|:
literal|null
expr_stmt|;
name|result
operator|.
name|change
operator|=
name|change
expr_stmt|;
name|result
operator|.
name|patchSet
operator|=
name|ps
expr_stmt|;
name|result
operator|.
name|info
operator|=
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|c
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Account
operator|.
name|Id
name|authorId
init|=
name|result
operator|.
name|info
operator|.
name|getAuthor
argument_list|()
operator|!=
literal|null
condition|?
name|result
operator|.
name|info
operator|.
name|getAuthor
argument_list|()
operator|.
name|getAccount
argument_list|()
else|:
literal|null
decl_stmt|;
specifier|final
name|Account
operator|.
name|Id
name|committerId
init|=
name|result
operator|.
name|info
operator|.
name|getCommitter
argument_list|()
operator|!=
literal|null
condition|?
name|result
operator|.
name|info
operator|.
name|getCommitter
argument_list|()
operator|.
name|getAccount
argument_list|()
else|:
literal|null
decl_stmt|;
name|boolean
name|haveAuthor
init|=
literal|false
decl_stmt|;
name|boolean
name|haveCommitter
init|=
literal|false
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|haveApprovals
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
name|oldReviewers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|oldCC
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byChange
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
control|)
block|{
name|haveApprovals
operator|.
name|add
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|oldReviewers
operator|.
name|add
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oldCC
operator|.
name|add
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ApprovalType
name|type
init|=
name|approvalTypes
operator|.
name|getApprovalType
argument_list|(
name|a
operator|.
name|getCategoryId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|equals
argument_list|(
name|priorPatchSet
argument_list|)
operator|&&
name|type
operator|.
name|getCategory
argument_list|()
operator|.
name|isCopyMinScore
argument_list|()
operator|&&
name|type
operator|.
name|isMaxNegative
argument_list|(
name|a
argument_list|)
condition|)
block|{
comment|// If there was a negative vote on the prior patch set, carry it
comment|// into this patch set.
comment|//
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|PatchSetApproval
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|a
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|haveAuthor
operator|&&
name|authorId
operator|!=
literal|null
operator|&&
name|a
operator|.
name|getAccountId
argument_list|()
operator|.
name|equals
argument_list|(
name|authorId
argument_list|)
condition|)
block|{
name|haveAuthor
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|haveCommitter
operator|&&
name|committerId
operator|!=
literal|null
operator|&&
name|a
operator|.
name|getAccountId
argument_list|()
operator|.
name|equals
argument_list|(
name|committerId
argument_list|)
condition|)
block|{
name|haveCommitter
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|final
name|ChangeMessage
name|msg
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|,
name|me
argument_list|,
name|ps
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setMessage
argument_list|(
literal|"Uploaded patch set "
operator|+
name|ps
operator|.
name|getPatchSetId
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|msg
operator|=
name|msg
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|mergedIntoRef
operator|!=
literal|null
condition|)
block|{
comment|// Change was already submitted to a branch, close it.
comment|//
name|markChangeMergedByPush
argument_list|(
name|db
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Change should be new, so it can go through review again.
comment|//
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
if|if
condition|(
name|destTopicName
operator|!=
literal|null
condition|)
block|{
name|change
operator|.
name|setTopic
argument_list|(
name|destTopicName
argument_list|)
expr_stmt|;
block|}
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
name|result
operator|.
name|info
argument_list|)
expr_stmt|;
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|change
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|request
operator|.
name|cmd
argument_list|,
literal|"change is closed"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|ApprovalType
argument_list|>
name|allTypes
init|=
name|approvalTypes
operator|.
name|getApprovalTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|allTypes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|ApprovalCategory
operator|.
name|Id
name|catId
init|=
name|allTypes
operator|.
name|get
argument_list|(
name|allTypes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getCategory
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|authorId
operator|!=
literal|null
operator|&&
name|haveApprovals
operator|.
name|add
argument_list|(
name|authorId
argument_list|)
condition|)
block|{
name|insertDummyApproval
argument_list|(
name|result
argument_list|,
name|authorId
argument_list|,
name|catId
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|committerId
operator|!=
literal|null
operator|&&
name|haveApprovals
operator|.
name|add
argument_list|(
name|committerId
argument_list|)
condition|)
block|{
name|insertDummyApproval
argument_list|(
name|result
argument_list|,
name|committerId
argument_list|,
name|catId
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Account
operator|.
name|Id
name|reviewer
range|:
name|reviewers
control|)
block|{
if|if
condition|(
name|haveApprovals
operator|.
name|add
argument_list|(
name|reviewer
argument_list|)
condition|)
block|{
name|insertDummyApproval
argument_list|(
name|result
argument_list|,
name|reviewer
argument_list|,
name|catId
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
block|}
name|hooks
operator|.
name|doPatchsetCreatedHook
argument_list|(
name|result
operator|.
name|change
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|ps
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|ru
operator|.
name|disableRefLog
argument_list|()
expr_stmt|;
if|if
condition|(
name|ru
operator|.
name|update
argument_list|(
name|rp
operator|.
name|getRevWalk
argument_list|()
argument_list|)
operator|!=
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create ref "
operator|+
name|ps
operator|.
name|getRefName
argument_list|()
operator|+
literal|" in "
operator|+
name|repo
operator|.
name|getDirectory
argument_list|()
operator|+
literal|": "
operator|+
name|ru
operator|.
name|getResult
argument_list|()
argument_list|)
throw|;
block|}
name|replication
operator|.
name|scheduleUpdate
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|ru
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|cmd
operator|.
name|setResult
argument_list|(
name|ReceiveCommand
operator|.
name|Result
operator|.
name|OK
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|ReplacePatchSetSender
name|cm
decl_stmt|;
name|cm
operator|=
name|replacePatchSetFactory
operator|.
name|create
argument_list|(
name|result
operator|.
name|change
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setFrom
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setPatchSet
argument_list|(
name|ps
argument_list|,
name|result
operator|.
name|info
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setChangeMessage
argument_list|(
name|result
operator|.
name|msg
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addReviewers
argument_list|(
name|reviewers
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addExtraCC
argument_list|(
name|cc
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addReviewers
argument_list|(
name|oldReviewers
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addExtraCC
argument_list|(
name|oldCC
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EmailException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email for new patch set "
operator|+
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|ChangeUtil
operator|.
name|updateTrackingIds
argument_list|(
name|db
argument_list|,
name|change
argument_list|,
name|trackingFooters
argument_list|,
name|footerLines
argument_list|)
expr_stmt|;
name|sendMergedEmail
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
operator|!=
literal|null
condition|?
name|result
operator|.
name|info
operator|.
name|getKey
argument_list|()
else|:
literal|null
return|;
block|}
DECL|method|parentsEqual (RevCommit a, RevCommit b)
specifier|static
name|boolean
name|parentsEqual
parameter_list|(
name|RevCommit
name|a
parameter_list|,
name|RevCommit
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|getParentCount
argument_list|()
operator|!=
name|b
operator|.
name|getParentCount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|getParentCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getParent
argument_list|(
name|i
argument_list|)
operator|!=
name|b
operator|.
name|getParent
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|authorEqual (RevCommit a, RevCommit b)
specifier|static
name|boolean
name|authorEqual
parameter_list|(
name|RevCommit
name|a
parameter_list|,
name|RevCommit
name|b
parameter_list|)
block|{
name|PersonIdent
name|aAuthor
init|=
name|a
operator|.
name|getAuthorIdent
argument_list|()
decl_stmt|;
name|PersonIdent
name|bAuthor
init|=
name|b
operator|.
name|getAuthorIdent
argument_list|()
decl_stmt|;
if|if
condition|(
name|aAuthor
operator|==
literal|null
operator|&&
name|bAuthor
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|aAuthor
operator|==
literal|null
operator|||
name|bAuthor
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|eq
argument_list|(
name|aAuthor
operator|.
name|getName
argument_list|()
argument_list|,
name|bAuthor
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|eq
argument_list|(
name|aAuthor
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
name|bAuthor
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
return|;
block|}
DECL|method|eq (String a, String b)
specifier|static
name|boolean
name|eq
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
operator|&&
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|==
literal|null
operator|||
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
DECL|method|insertDummyApproval (final ReplaceResult result, final Account.Id forAccount, final ApprovalCategory.Id catId, final ReviewDb db)
specifier|private
name|void
name|insertDummyApproval
parameter_list|(
specifier|final
name|ReplaceResult
name|result
parameter_list|,
specifier|final
name|Account
operator|.
name|Id
name|forAccount
parameter_list|,
specifier|final
name|ApprovalCategory
operator|.
name|Id
name|catId
parameter_list|,
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
name|insertDummyApproval
argument_list|(
name|result
operator|.
name|change
argument_list|,
name|result
operator|.
name|patchSet
operator|.
name|getId
argument_list|()
argument_list|,
name|forAccount
argument_list|,
name|catId
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
DECL|method|insertDummyApproval (final Change change, final PatchSet.Id psId, final Account.Id forAccount, final ApprovalCategory.Id catId, final ReviewDb db)
specifier|private
name|void
name|insertDummyApproval
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|,
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
specifier|final
name|Account
operator|.
name|Id
name|forAccount
parameter_list|,
specifier|final
name|ApprovalCategory
operator|.
name|Id
name|catId
parameter_list|,
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|PatchSetApproval
name|ca
init|=
operator|new
name|PatchSetApproval
argument_list|(
operator|new
name|PatchSetApproval
operator|.
name|Key
argument_list|(
name|psId
argument_list|,
name|forAccount
argument_list|,
name|catId
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
name|ca
operator|.
name|cache
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|ca
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|findMergedInto (final String first, final RevCommit commit)
specifier|private
name|Ref
name|findMergedInto
parameter_list|(
specifier|final
name|String
name|first
parameter_list|,
specifier|final
name|RevCommit
name|commit
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|all
init|=
name|repo
operator|.
name|getAllRefs
argument_list|()
decl_stmt|;
name|Ref
name|firstRef
init|=
name|all
operator|.
name|get
argument_list|(
name|first
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstRef
operator|!=
literal|null
operator|&&
name|isMergedInto
argument_list|(
name|commit
argument_list|,
name|firstRef
argument_list|)
condition|)
block|{
return|return
name|firstRef
return|;
block|}
for|for
control|(
name|Ref
name|ref
range|:
name|all
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|isHead
argument_list|(
name|ref
argument_list|)
condition|)
block|{
if|if
condition|(
name|isMergedInto
argument_list|(
name|commit
argument_list|,
name|ref
argument_list|)
condition|)
block|{
return|return
name|ref
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Can't check for already submitted change"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|isMergedInto (final RevCommit commit, final Ref ref)
specifier|private
name|boolean
name|isMergedInto
parameter_list|(
specifier|final
name|RevCommit
name|commit
parameter_list|,
specifier|final
name|Ref
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RevWalk
name|rw
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
return|return
name|rw
operator|.
name|isMergedInto
argument_list|(
name|commit
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|class|ReplaceRequest
specifier|private
specifier|static
class|class
name|ReplaceRequest
block|{
DECL|field|ontoChange
specifier|final
name|Change
operator|.
name|Id
name|ontoChange
decl_stmt|;
DECL|field|newCommit
specifier|final
name|RevCommit
name|newCommit
decl_stmt|;
DECL|field|cmd
specifier|final
name|ReceiveCommand
name|cmd
decl_stmt|;
DECL|method|ReplaceRequest (final Change.Id toChange, final RevCommit newCommit, final ReceiveCommand cmd)
name|ReplaceRequest
parameter_list|(
specifier|final
name|Change
operator|.
name|Id
name|toChange
parameter_list|,
specifier|final
name|RevCommit
name|newCommit
parameter_list|,
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|this
operator|.
name|ontoChange
operator|=
name|toChange
expr_stmt|;
name|this
operator|.
name|newCommit
operator|=
name|newCommit
expr_stmt|;
name|this
operator|.
name|cmd
operator|=
name|cmd
expr_stmt|;
block|}
block|}
DECL|class|ReplaceResult
specifier|private
specifier|static
class|class
name|ReplaceResult
block|{
DECL|field|change
name|Change
name|change
decl_stmt|;
DECL|field|patchSet
name|PatchSet
name|patchSet
decl_stmt|;
DECL|field|info
name|PatchSetInfo
name|info
decl_stmt|;
DECL|field|msg
name|ChangeMessage
name|msg
decl_stmt|;
DECL|field|mergedIntoRef
name|String
name|mergedIntoRef
decl_stmt|;
block|}
DECL|method|validateNewCommits (RefControl ctl, ReceiveCommand cmd)
specifier|private
name|void
name|validateNewCommits
parameter_list|(
name|RefControl
name|ctl
parameter_list|,
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
specifier|final
name|RevWalk
name|walk
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|walk
operator|.
name|reset
argument_list|()
expr_stmt|;
name|walk
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|NONE
argument_list|)
expr_stmt|;
try|try
block|{
name|walk
operator|.
name|markStart
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectId
name|id
range|:
name|existingObjects
argument_list|()
control|)
block|{
try|try
block|{
name|walk
operator|.
name|markUninteresting
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
name|RevCommit
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|walk
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|validCommit
argument_list|(
name|ctl
argument_list|,
name|cmd
argument_list|,
name|c
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|cmd
operator|.
name|setResult
argument_list|(
name|Result
operator|.
name|REJECTED_MISSING_OBJECT
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Invalid pack upload; one or more objects weren't sent"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|existingObjects ()
specifier|private
name|Collection
argument_list|<
name|ObjectId
argument_list|>
name|existingObjects
parameter_list|()
block|{
if|if
condition|(
name|existingObjects
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|refs
init|=
name|repo
operator|.
name|getAllRefs
argument_list|()
decl_stmt|;
name|existingObjects
operator|=
operator|new
name|ArrayList
argument_list|<
name|ObjectId
argument_list|>
argument_list|(
name|refs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Ref
name|r
range|:
name|refs
operator|.
name|values
argument_list|()
control|)
block|{
name|existingObjects
operator|.
name|add
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|existingObjects
return|;
block|}
DECL|method|validCommit (final RefControl ctl, final ReceiveCommand cmd, final RevCommit c)
specifier|private
name|boolean
name|validCommit
parameter_list|(
specifier|final
name|RefControl
name|ctl
parameter_list|,
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|,
specifier|final
name|RevCommit
name|c
parameter_list|)
throws|throws
name|MissingObjectException
throws|,
name|IOException
block|{
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
specifier|final
name|PersonIdent
name|committer
init|=
name|c
operator|.
name|getCommitterIdent
argument_list|()
decl_stmt|;
specifier|final
name|PersonIdent
name|author
init|=
name|c
operator|.
name|getAuthorIdent
argument_list|()
decl_stmt|;
comment|// Don't allow the user to amend a merge created by Gerrit Code Review.
comment|// This seems to happen all too often, due to users not paying any
comment|// attention to what they are doing.
comment|//
if|if
condition|(
name|c
operator|.
name|getParentCount
argument_list|()
operator|>
literal|1
operator|&&
name|author
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|gerritIdent
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|author
operator|.
name|getEmailAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|gerritIdent
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|&&
operator|!
name|ctl
operator|.
name|canForgeGerritServerIdentity
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"do not amend merges not made by you"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Require that author matches the uploader.
comment|//
if|if
condition|(
operator|!
name|currentUser
operator|.
name|getEmailAddresses
argument_list|()
operator|.
name|contains
argument_list|(
name|author
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|&&
operator|!
name|ctl
operator|.
name|canForgeAuthor
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"you are not author "
operator|+
name|author
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Require that committer matches the uploader.
comment|//
if|if
condition|(
operator|!
name|currentUser
operator|.
name|getEmailAddresses
argument_list|()
operator|.
name|contains
argument_list|(
name|committer
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|&&
operator|!
name|ctl
operator|.
name|canForgeCommitter
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"you are not committer "
operator|+
name|committer
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|project
operator|.
name|isUseSignedOffBy
argument_list|()
condition|)
block|{
comment|// If the project wants Signed-off-by / Acked-by lines, verify we
comment|// have them for the blamable parties involved on this change.
comment|//
name|boolean
name|sboAuthor
init|=
literal|false
decl_stmt|,
name|sboCommitter
init|=
literal|false
decl_stmt|,
name|sboMe
init|=
literal|false
decl_stmt|;
for|for
control|(
specifier|final
name|FooterLine
name|footer
range|:
name|c
operator|.
name|getFooterLines
argument_list|()
control|)
block|{
if|if
condition|(
name|footer
operator|.
name|matches
argument_list|(
name|FooterKey
operator|.
name|SIGNED_OFF_BY
argument_list|)
condition|)
block|{
specifier|final
name|String
name|e
init|=
name|footer
operator|.
name|getEmailAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|sboAuthor
operator||=
name|author
operator|.
name|getEmailAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|sboCommitter
operator||=
name|committer
operator|.
name|getEmailAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|sboMe
operator||=
name|currentUser
operator|.
name|getEmailAddresses
argument_list|()
operator|.
name|contains
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|sboAuthor
operator|&&
operator|!
name|sboCommitter
operator|&&
operator|!
name|sboMe
operator|&&
operator|!
name|ctl
operator|.
name|canForgeCommitter
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"not Signed-off-by author/committer/uploader"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|idList
init|=
name|c
operator|.
name|getFooterLines
argument_list|(
name|CHANGE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|idList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|project
operator|.
name|isRequireChangeID
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"missing Change-Id in commit message"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|idList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"multiple Change-Id lines in commit message"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
specifier|final
name|String
name|v
init|=
name|idList
operator|.
name|get
argument_list|(
name|idList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|v
operator|.
name|matches
argument_list|(
literal|"^I[0-9a-f]{8,}.*$"
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid Change-Id line format in commit message "
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// Check for banned commits to prevent them from entering the tree again.
if|if
condition|(
name|rejectCommits
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|newChange
argument_list|,
literal|"contains banned commit "
operator|+
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|warnMalformedMessage (RevCommit c)
specifier|private
name|void
name|warnMalformedMessage
parameter_list|(
name|RevCommit
name|c
parameter_list|)
block|{
name|ObjectReader
name|reader
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
operator|.
name|getObjectReader
argument_list|()
decl_stmt|;
if|if
condition|(
literal|65
operator|<
name|c
operator|.
name|getShortMessage
argument_list|()
operator|.
name|length
argument_list|()
condition|)
block|{
name|AbbreviatedObjectId
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|reader
operator|.
name|abbreviate
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|id
operator|=
name|c
operator|.
name|abbreviate
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
name|rp
operator|.
name|sendMessage
argument_list|(
literal|"(W) "
operator|+
name|id
operator|.
name|name
argument_list|()
comment|//
operator|+
literal|": commit subject>65 characters; use shorter first paragraph"
argument_list|)
expr_stmt|;
block|}
name|int
name|longLineCnt
init|=
literal|0
decl_stmt|,
name|nonEmptyCnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|c
operator|.
name|getFullMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|line
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nonEmptyCnt
operator|++
expr_stmt|;
block|}
if|if
condition|(
literal|70
operator|<
name|line
operator|.
name|length
argument_list|()
condition|)
block|{
name|longLineCnt
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|0
operator|<
name|longLineCnt
operator|&&
literal|33
operator|<
name|longLineCnt
operator|*
literal|100
operator|/
name|nonEmptyCnt
condition|)
block|{
name|AbbreviatedObjectId
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|reader
operator|.
name|abbreviate
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|id
operator|=
name|c
operator|.
name|abbreviate
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
name|rp
operator|.
name|sendMessage
argument_list|(
literal|"(W) "
operator|+
name|id
operator|.
name|name
argument_list|()
comment|//
operator|+
literal|": commit message lines>70 characters; manually wrap lines"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|autoCloseChanges (final ReceiveCommand cmd)
specifier|private
name|void
name|autoCloseChanges
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
specifier|final
name|RevWalk
name|rw
init|=
name|rp
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
try|try
block|{
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ObjectId
operator|.
name|zeroId
argument_list|()
operator|.
name|equals
argument_list|(
name|cmd
operator|.
name|getOldId
argument_list|()
argument_list|)
condition|)
block|{
name|rw
operator|.
name|markUninteresting
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getOldId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|ObjectId
argument_list|,
name|Ref
argument_list|>
name|byCommit
init|=
name|changeRefsById
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Key
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|byKey
init|=
name|openChangesByKey
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ReplaceRequest
argument_list|>
name|toClose
init|=
operator|new
name|ArrayList
argument_list|<
name|ReplaceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|RevCommit
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Ref
name|ref
init|=
name|byCommit
operator|.
name|get
argument_list|(
name|c
operator|.
name|copy
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|closeChange
argument_list|(
name|cmd
argument_list|,
name|PatchSet
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|changeId
range|:
name|c
operator|.
name|getFooterLines
argument_list|(
name|CHANGE_ID
argument_list|)
control|)
block|{
specifier|final
name|Change
operator|.
name|Id
name|onto
init|=
name|byKey
operator|.
name|get
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|changeId
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|onto
operator|!=
literal|null
condition|)
block|{
name|toClose
operator|.
name|add
argument_list|(
operator|new
name|ReplaceRequest
argument_list|(
name|onto
argument_list|,
name|c
argument_list|,
name|cmd
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
for|for
control|(
specifier|final
name|ReplaceRequest
name|req
range|:
name|toClose
control|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|psi
init|=
name|doReplace
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|psi
operator|!=
literal|null
condition|)
block|{
name|closeChange
argument_list|(
name|req
operator|.
name|cmd
argument_list|,
name|psi
argument_list|,
name|req
operator|.
name|newCommit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't scan for changes to close"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't scan for changes to close"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|closeChange (final ReceiveCommand cmd, final PatchSet.Id psi, final RevCommit commit)
specifier|private
name|void
name|closeChange
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|,
specifier|final
name|PatchSet
operator|.
name|Id
name|psi
parameter_list|,
specifier|final
name|RevCommit
name|commit
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|String
name|refName
init|=
name|cmd
operator|.
name|getRefName
argument_list|()
decl_stmt|;
specifier|final
name|Change
operator|.
name|Id
name|cid
init|=
name|psi
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
specifier|final
name|Change
name|change
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|cid
argument_list|)
decl_stmt|;
specifier|final
name|PatchSet
name|ps
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psi
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
operator|||
name|ps
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|project
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|psi
operator|+
literal|" is missing"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|MERGED
condition|)
block|{
comment|// If its already merged, don't make further updates, it
comment|// might just be moving from an experimental branch into
comment|// a more stable branch.
comment|//
return|return;
block|}
specifier|final
name|ReplaceResult
name|result
init|=
operator|new
name|ReplaceResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|change
operator|=
name|change
expr_stmt|;
name|result
operator|.
name|patchSet
operator|=
name|ps
expr_stmt|;
name|result
operator|.
name|info
operator|=
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|commit
argument_list|,
name|psi
argument_list|)
expr_stmt|;
name|result
operator|.
name|mergedIntoRef
operator|=
name|refName
expr_stmt|;
name|markChangeMergedByPush
argument_list|(
name|db
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|sendMergedEmail
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|changeRefsById ()
specifier|private
name|Map
argument_list|<
name|ObjectId
argument_list|,
name|Ref
argument_list|>
name|changeRefsById
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|refsById
operator|==
literal|null
condition|)
block|{
name|refsById
operator|=
operator|new
name|HashMap
argument_list|<
name|ObjectId
argument_list|,
name|Ref
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Ref
name|r
range|:
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
literal|"refs/changes/"
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|PatchSet
operator|.
name|isRef
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|refsById
operator|.
name|put
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|refsById
return|;
block|}
DECL|method|openChangesByKey ()
specifier|private
name|Map
argument_list|<
name|Change
operator|.
name|Key
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|openChangesByKey
parameter_list|()
throws|throws
name|OrmException
block|{
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Key
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|r
init|=
operator|new
name|HashMap
argument_list|<
name|Change
operator|.
name|Key
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Change
name|c
range|:
name|db
operator|.
name|changes
argument_list|()
operator|.
name|byProjectOpenAll
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
control|)
block|{
name|r
operator|.
name|put
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
DECL|method|markChangeMergedByPush (final ReviewDb db, final ReplaceResult result)
specifier|private
name|void
name|markChangeMergedByPush
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|ReplaceResult
name|result
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|Change
name|change
init|=
name|result
operator|.
name|change
decl_stmt|;
specifier|final
name|String
name|mergedIntoRef
init|=
name|result
operator|.
name|mergedIntoRef
decl_stmt|;
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
name|result
operator|.
name|info
argument_list|)
expr_stmt|;
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|change
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvals
init|=
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byChange
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|approvals
control|)
block|{
name|a
operator|.
name|cache
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|update
argument_list|(
name|approvals
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|msgBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msgBuf
operator|.
name|append
argument_list|(
literal|"Change has been successfully pushed"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mergedIntoRef
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|msgBuf
operator|.
name|append
argument_list|(
literal|" into "
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergedIntoRef
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
condition|)
block|{
name|msgBuf
operator|.
name|append
argument_list|(
literal|"branch "
argument_list|)
expr_stmt|;
name|msgBuf
operator|.
name|append
argument_list|(
name|repo
operator|.
name|shortenRefName
argument_list|(
name|mergedIntoRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msgBuf
operator|.
name|append
argument_list|(
name|mergedIntoRef
argument_list|)
expr_stmt|;
block|}
block|}
name|msgBuf
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
specifier|final
name|ChangeMessage
name|msg
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setMessage
argument_list|(
name|msgBuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
name|result
operator|.
name|info
argument_list|)
expr_stmt|;
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
return|return
name|change
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|sendMergedEmail (final ReplaceResult result)
specifier|private
name|void
name|sendMergedEmail
parameter_list|(
specifier|final
name|ReplaceResult
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|mergedIntoRef
operator|!=
literal|null
condition|)
block|{
try|try
block|{
specifier|final
name|MergedSender
name|cm
init|=
name|mergedSenderFactory
operator|.
name|create
argument_list|(
name|result
operator|.
name|change
argument_list|)
decl_stmt|;
name|cm
operator|.
name|setFrom
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setPatchSet
argument_list|(
name|result
operator|.
name|patchSet
argument_list|,
name|result
operator|.
name|info
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setDest
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|result
operator|.
name|mergedIntoRef
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EmailException
name|e
parameter_list|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|psi
init|=
name|result
operator|.
name|patchSet
operator|.
name|getId
argument_list|()
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email for submitted patch set "
operator|+
name|psi
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|hooks
operator|.
name|doChangeMergedHook
argument_list|(
name|result
operator|.
name|change
argument_list|,
name|currentUser
operator|.
name|getAccount
argument_list|()
argument_list|,
name|result
operator|.
name|patchSet
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|insertAncestors (PatchSet.Id id, RevCommit src)
specifier|private
name|void
name|insertAncestors
parameter_list|(
name|PatchSet
operator|.
name|Id
name|id
parameter_list|,
name|RevCommit
name|src
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|int
name|cnt
init|=
name|src
operator|.
name|getParentCount
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PatchSetAncestor
argument_list|>
name|toInsert
init|=
operator|new
name|ArrayList
argument_list|<
name|PatchSetAncestor
argument_list|>
argument_list|(
name|cnt
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|cnt
condition|;
name|p
operator|++
control|)
block|{
name|PatchSetAncestor
name|a
decl_stmt|;
name|a
operator|=
operator|new
name|PatchSetAncestor
argument_list|(
operator|new
name|PatchSetAncestor
operator|.
name|Id
argument_list|(
name|id
argument_list|,
name|p
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setAncestorRevision
argument_list|(
name|toRevId
argument_list|(
name|src
operator|.
name|getParent
argument_list|(
name|p
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|toInsert
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|patchSetAncestors
argument_list|()
operator|.
name|insert
argument_list|(
name|toInsert
argument_list|)
expr_stmt|;
block|}
DECL|method|toRevId (final RevCommit src)
specifier|private
specifier|static
name|RevId
name|toRevId
parameter_list|(
specifier|final
name|RevCommit
name|src
parameter_list|)
block|{
return|return
operator|new
name|RevId
argument_list|(
name|src
operator|.
name|getId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
DECL|method|reject (final ReceiveCommand cmd)
specifier|private
specifier|static
name|void
name|reject
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"prohibited by Gerrit"
argument_list|)
expr_stmt|;
block|}
DECL|method|reject (final ReceiveCommand cmd, final String why)
specifier|private
specifier|static
name|void
name|reject
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|,
specifier|final
name|String
name|why
parameter_list|)
block|{
name|cmd
operator|.
name|setResult
argument_list|(
name|ReceiveCommand
operator|.
name|Result
operator|.
name|REJECTED_OTHER_REASON
argument_list|,
name|why
argument_list|)
expr_stmt|;
block|}
DECL|method|isTag (final Ref ref)
specifier|private
specifier|static
name|boolean
name|isTag
parameter_list|(
specifier|final
name|Ref
name|ref
parameter_list|)
block|{
return|return
name|ref
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_TAGS
argument_list|)
return|;
block|}
DECL|method|isTag (final ReceiveCommand cmd)
specifier|private
specifier|static
name|boolean
name|isTag
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
return|return
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_TAGS
argument_list|)
return|;
block|}
DECL|method|isHead (final Ref ref)
specifier|private
specifier|static
name|boolean
name|isHead
parameter_list|(
specifier|final
name|Ref
name|ref
parameter_list|)
block|{
return|return
name|ref
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
return|;
block|}
DECL|method|isHead (final ReceiveCommand cmd)
specifier|private
specifier|static
name|boolean
name|isHead
parameter_list|(
specifier|final
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
return|return
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
return|;
block|}
block|}
end_class

end_unit

