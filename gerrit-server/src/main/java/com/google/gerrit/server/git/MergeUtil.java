begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|FooterConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|MergeConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|LabelId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|CodeReviewCommit
operator|.
name|CodeReviewRevWalk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|strategy
operator|.
name|CommitMergeStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|AssistedInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|AmbiguousObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|LargeObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|NoMergeBaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|NoMergeBaseException
operator|.
name|MergeBaseFailureReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RevisionSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AnyObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|merge
operator|.
name|MergeStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|merge
operator|.
name|Merger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|merge
operator|.
name|ResolveMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|merge
operator|.
name|ThreeWayMergeStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|merge
operator|.
name|ThreeWayMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Utility methods used during the merge process.  *<p>  *<strong>Note:</strong> Unless otherwise specified, the methods in this class  *<strong>do not</strong> flush {@link ObjectInserter}s. Callers that want to  * read back objects before flushing should use {@link  * ObjectInserter#newReader()}. This is already the default behavior of {@code  * BatchUpdate}.  */
end_comment

begin_class
DECL|class|MergeUtil
specifier|public
class|class
name|MergeUtil
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MergeUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|R_HEADS_MASTER
specifier|private
specifier|static
specifier|final
name|String
name|R_HEADS_MASTER
init|=
name|Constants
operator|.
name|R_HEADS
operator|+
name|Constants
operator|.
name|MASTER
decl_stmt|;
DECL|method|useRecursiveMerge (Config cfg)
specifier|public
specifier|static
name|boolean
name|useRecursiveMerge
parameter_list|(
name|Config
name|cfg
parameter_list|)
block|{
return|return
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"core"
argument_list|,
literal|null
argument_list|,
literal|"useRecursiveMerge"
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getMergeStrategy (Config cfg)
specifier|public
specifier|static
name|ThreeWayMergeStrategy
name|getMergeStrategy
parameter_list|(
name|Config
name|cfg
parameter_list|)
block|{
return|return
name|useRecursiveMerge
argument_list|(
name|cfg
argument_list|)
condition|?
name|MergeStrategy
operator|.
name|RECURSIVE
else|:
name|MergeStrategy
operator|.
name|RESOLVE
return|;
block|}
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (ProjectState project)
name|MergeUtil
name|create
parameter_list|(
name|ProjectState
name|project
parameter_list|)
function_decl|;
DECL|method|create (ProjectState project, boolean useContentMerge)
name|MergeUtil
name|create
parameter_list|(
name|ProjectState
name|project
parameter_list|,
name|boolean
name|useContentMerge
parameter_list|)
function_decl|;
block|}
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|identifiedUserFactory
specifier|private
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
decl_stmt|;
DECL|field|urlProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|String
argument_list|>
name|urlProvider
decl_stmt|;
DECL|field|approvalsUtil
specifier|private
specifier|final
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
DECL|field|project
specifier|private
specifier|final
name|ProjectState
name|project
decl_stmt|;
DECL|field|useContentMerge
specifier|private
specifier|final
name|boolean
name|useContentMerge
decl_stmt|;
DECL|field|useRecursiveMerge
specifier|private
specifier|final
name|boolean
name|useRecursiveMerge
decl_stmt|;
annotation|@
name|AssistedInject
DECL|method|MergeUtil (@erritServerConfig Config serverConfig, final Provider<ReviewDb> db, final IdentifiedUser.GenericFactory identifiedUserFactory, @CanonicalWebUrl @Nullable final Provider<String> urlProvider, final ApprovalsUtil approvalsUtil, @Assisted final ProjectState project)
name|MergeUtil
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|serverConfig
parameter_list|,
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
parameter_list|,
annotation|@
name|CanonicalWebUrl
annotation|@
name|Nullable
specifier|final
name|Provider
argument_list|<
name|String
argument_list|>
name|urlProvider
parameter_list|,
specifier|final
name|ApprovalsUtil
name|approvalsUtil
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|ProjectState
name|project
parameter_list|)
block|{
name|this
argument_list|(
name|serverConfig
argument_list|,
name|db
argument_list|,
name|identifiedUserFactory
argument_list|,
name|urlProvider
argument_list|,
name|approvalsUtil
argument_list|,
name|project
argument_list|,
name|project
operator|.
name|isUseContentMerge
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AssistedInject
DECL|method|MergeUtil (@erritServerConfig Config serverConfig, final Provider<ReviewDb> db, final IdentifiedUser.GenericFactory identifiedUserFactory, @CanonicalWebUrl @Nullable final Provider<String> urlProvider, final ApprovalsUtil approvalsUtil, @Assisted final ProjectState project, @Assisted boolean useContentMerge)
name|MergeUtil
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|serverConfig
parameter_list|,
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
parameter_list|,
annotation|@
name|CanonicalWebUrl
annotation|@
name|Nullable
specifier|final
name|Provider
argument_list|<
name|String
argument_list|>
name|urlProvider
parameter_list|,
specifier|final
name|ApprovalsUtil
name|approvalsUtil
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|ProjectState
name|project
parameter_list|,
annotation|@
name|Assisted
name|boolean
name|useContentMerge
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|identifiedUserFactory
operator|=
name|identifiedUserFactory
expr_stmt|;
name|this
operator|.
name|urlProvider
operator|=
name|urlProvider
expr_stmt|;
name|this
operator|.
name|approvalsUtil
operator|=
name|approvalsUtil
expr_stmt|;
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
name|this
operator|.
name|useContentMerge
operator|=
name|useContentMerge
expr_stmt|;
name|this
operator|.
name|useRecursiveMerge
operator|=
name|useRecursiveMerge
argument_list|(
name|serverConfig
argument_list|)
expr_stmt|;
block|}
DECL|method|getFirstFastForward ( final CodeReviewCommit mergeTip, final RevWalk rw, final List<CodeReviewCommit> toMerge)
specifier|public
name|CodeReviewCommit
name|getFirstFastForward
parameter_list|(
specifier|final
name|CodeReviewCommit
name|mergeTip
parameter_list|,
specifier|final
name|RevWalk
name|rw
parameter_list|,
specifier|final
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|toMerge
parameter_list|)
throws|throws
name|IntegrationException
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|CodeReviewCommit
argument_list|>
name|i
init|=
name|toMerge
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
try|try
block|{
specifier|final
name|CodeReviewCommit
name|n
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|mergeTip
operator|==
literal|null
operator|||
name|rw
operator|.
name|isMergedInto
argument_list|(
name|mergeTip
argument_list|,
name|n
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
name|n
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Cannot fast-forward test during merge"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|mergeTip
return|;
block|}
DECL|method|reduceToMinimalMerge (MergeSorter mergeSorter, Collection<CodeReviewCommit> toSort)
specifier|public
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|reduceToMinimalMerge
parameter_list|(
name|MergeSorter
name|mergeSorter
parameter_list|,
name|Collection
argument_list|<
name|CodeReviewCommit
argument_list|>
name|toSort
parameter_list|)
throws|throws
name|IntegrationException
block|{
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|addAll
argument_list|(
name|mergeSorter
operator|.
name|sort
argument_list|(
name|toSort
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Branch head sorting failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|result
argument_list|,
name|CodeReviewCommit
operator|.
name|ORDER
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|createCherryPickFromCommit (Repository repo, ObjectInserter inserter, RevCommit mergeTip, RevCommit originalCommit, PersonIdent cherryPickCommitterIdent, String commitMsg, CodeReviewRevWalk rw)
specifier|public
name|CodeReviewCommit
name|createCherryPickFromCommit
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|ObjectInserter
name|inserter
parameter_list|,
name|RevCommit
name|mergeTip
parameter_list|,
name|RevCommit
name|originalCommit
parameter_list|,
name|PersonIdent
name|cherryPickCommitterIdent
parameter_list|,
name|String
name|commitMsg
parameter_list|,
name|CodeReviewRevWalk
name|rw
parameter_list|)
throws|throws
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
throws|,
name|IOException
throws|,
name|MergeIdenticalTreeException
throws|,
name|MergeConflictException
block|{
specifier|final
name|ThreeWayMerger
name|m
init|=
name|newThreeWayMerger
argument_list|(
name|repo
argument_list|,
name|inserter
argument_list|)
decl_stmt|;
name|m
operator|.
name|setBase
argument_list|(
name|originalCommit
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|merge
argument_list|(
name|mergeTip
argument_list|,
name|originalCommit
argument_list|)
condition|)
block|{
name|ObjectId
name|tree
init|=
name|m
operator|.
name|getResultTreeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|equals
argument_list|(
name|mergeTip
operator|.
name|getTree
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MergeIdenticalTreeException
argument_list|(
literal|"identical tree"
argument_list|)
throw|;
block|}
name|CommitBuilder
name|mergeCommit
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|mergeCommit
operator|.
name|setTreeId
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setParentId
argument_list|(
name|mergeTip
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setAuthor
argument_list|(
name|originalCommit
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setCommitter
argument_list|(
name|cherryPickCommitterIdent
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setMessage
argument_list|(
name|commitMsg
argument_list|)
expr_stmt|;
return|return
name|rw
operator|.
name|parseCommit
argument_list|(
name|inserter
operator|.
name|insert
argument_list|(
name|mergeCommit
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|MergeConflictException
argument_list|(
literal|"merge conflict"
argument_list|)
throw|;
block|}
DECL|method|createMergeCommit (Repository repo, ObjectInserter inserter, RevCommit mergeTip, RevCommit originalCommit, String mergeStrategy, PersonIdent committerIndent, String commitMsg, RevWalk rw)
specifier|public
specifier|static
name|RevCommit
name|createMergeCommit
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|ObjectInserter
name|inserter
parameter_list|,
name|RevCommit
name|mergeTip
parameter_list|,
name|RevCommit
name|originalCommit
parameter_list|,
name|String
name|mergeStrategy
parameter_list|,
name|PersonIdent
name|committerIndent
parameter_list|,
name|String
name|commitMsg
parameter_list|,
name|RevWalk
name|rw
parameter_list|)
throws|throws
name|IOException
throws|,
name|MergeIdenticalTreeException
throws|,
name|MergeConflictException
block|{
if|if
condition|(
name|rw
operator|.
name|isMergedInto
argument_list|(
name|originalCommit
argument_list|,
name|mergeTip
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ChangeAlreadyMergedException
argument_list|(
literal|"'"
operator|+
name|originalCommit
operator|.
name|getName
argument_list|()
operator|+
literal|"' has already been merged"
argument_list|)
throw|;
block|}
name|Merger
name|m
init|=
name|newMerger
argument_list|(
name|repo
argument_list|,
name|inserter
argument_list|,
name|mergeStrategy
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|merge
argument_list|(
literal|false
argument_list|,
name|mergeTip
argument_list|,
name|originalCommit
argument_list|)
condition|)
block|{
name|ObjectId
name|tree
init|=
name|m
operator|.
name|getResultTreeId
argument_list|()
decl_stmt|;
name|CommitBuilder
name|mergeCommit
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|mergeCommit
operator|.
name|setTreeId
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setParentIds
argument_list|(
name|mergeTip
argument_list|,
name|originalCommit
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setAuthor
argument_list|(
name|committerIndent
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setCommitter
argument_list|(
name|committerIndent
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setMessage
argument_list|(
name|commitMsg
argument_list|)
expr_stmt|;
return|return
name|rw
operator|.
name|parseCommit
argument_list|(
name|inserter
operator|.
name|insert
argument_list|(
name|mergeCommit
argument_list|)
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|conflicts
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|instanceof
name|ResolveMerger
condition|)
block|{
name|conflicts
operator|=
operator|(
operator|(
name|ResolveMerger
operator|)
name|m
operator|)
operator|.
name|getUnmergedPaths
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|MergeConflictException
argument_list|(
name|createConflictMessage
argument_list|(
name|conflicts
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|createConflictMessage (List<String> conflicts)
specifier|public
specifier|static
name|String
name|createConflictMessage
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|conflicts
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"merge conflict(s)"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|conflicts
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
operator|+
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|createCherryPickCommitMessage (RevCommit n, ChangeControl ctl, PatchSet.Id psId)
specifier|public
name|String
name|createCherryPickCommitMessage
parameter_list|(
name|RevCommit
name|n
parameter_list|,
name|ChangeControl
name|ctl
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|)
block|{
name|Change
name|c
init|=
name|ctl
operator|.
name|getChange
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footers
init|=
name|n
operator|.
name|getFooterLines
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|msgbuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|n
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|msgbuf
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// WTF, an empty commit message?
name|msgbuf
operator|.
name|append
argument_list|(
literal|"<no commit message provided>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|msgbuf
operator|.
name|charAt
argument_list|(
name|msgbuf
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|'\n'
condition|)
block|{
comment|// Missing a trailing LF? Correct it (perhaps the editor was broken).
name|msgbuf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|footers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Doesn't end in a "Signed-off-by: ..." style line? Add another line
comment|// break to start a new paragraph for the reviewed-by tag lines.
comment|//
name|msgbuf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contains
argument_list|(
name|footers
argument_list|,
name|FooterConstants
operator|.
name|CHANGE_ID
argument_list|,
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
name|FooterConstants
operator|.
name|CHANGE_ID
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|siteUrl
init|=
name|urlProvider
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|siteUrl
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|url
init|=
name|siteUrl
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|contains
argument_list|(
name|footers
argument_list|,
name|FooterConstants
operator|.
name|REVIEWED_ON
argument_list|,
name|url
argument_list|)
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
name|FooterConstants
operator|.
name|REVIEWED_ON
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
name|PatchSetApproval
name|submitAudit
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|PatchSetApproval
name|a
range|:
name|safeGetApprovals
argument_list|(
name|ctl
argument_list|,
name|psId
argument_list|)
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getValue
argument_list|()
operator|<=
literal|0
condition|)
block|{
comment|// Negative votes aren't counted.
continue|continue;
block|}
if|if
condition|(
name|a
operator|.
name|isLegacySubmit
argument_list|()
condition|)
block|{
comment|// Submit is treated specially, below (becomes committer)
comment|//
if|if
condition|(
name|submitAudit
operator|==
literal|null
operator|||
name|a
operator|.
name|getGranted
argument_list|()
operator|.
name|compareTo
argument_list|(
name|submitAudit
operator|.
name|getGranted
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|submitAudit
operator|=
name|a
expr_stmt|;
block|}
continue|continue;
block|}
specifier|final
name|Account
name|acc
init|=
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|identbuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|acc
operator|.
name|getFullName
argument_list|()
operator|!=
literal|null
operator|&&
name|acc
operator|.
name|getFullName
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|identbuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|identbuf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|identbuf
operator|.
name|append
argument_list|(
name|acc
operator|.
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acc
operator|.
name|getPreferredEmail
argument_list|()
operator|!=
literal|null
operator|&&
name|acc
operator|.
name|getPreferredEmail
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|isSignedOffBy
argument_list|(
name|footers
argument_list|,
name|acc
operator|.
name|getPreferredEmail
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|identbuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|identbuf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|identbuf
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|identbuf
operator|.
name|append
argument_list|(
name|acc
operator|.
name|getPreferredEmail
argument_list|()
argument_list|)
expr_stmt|;
name|identbuf
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|identbuf
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Nothing reasonable to describe them by? Ignore them.
continue|continue;
block|}
specifier|final
name|String
name|tag
decl_stmt|;
if|if
condition|(
name|isCodeReview
argument_list|(
name|a
operator|.
name|getLabelId
argument_list|()
argument_list|)
condition|)
block|{
name|tag
operator|=
literal|"Reviewed-by"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isVerified
argument_list|(
name|a
operator|.
name|getLabelId
argument_list|()
argument_list|)
condition|)
block|{
name|tag
operator|=
literal|"Tested-by"
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|LabelType
name|lt
init|=
name|project
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|byLabel
argument_list|(
name|a
operator|.
name|getLabelId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lt
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|tag
operator|=
name|lt
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contains
argument_list|(
name|footers
argument_list|,
operator|new
name|FooterKey
argument_list|(
name|tag
argument_list|)
argument_list|,
name|identbuf
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|identbuf
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|msgbuf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|createCherryPickCommitMessage (final CodeReviewCommit n)
specifier|public
name|String
name|createCherryPickCommitMessage
parameter_list|(
specifier|final
name|CodeReviewCommit
name|n
parameter_list|)
block|{
return|return
name|createCherryPickCommitMessage
argument_list|(
name|n
argument_list|,
name|n
operator|.
name|getControl
argument_list|()
argument_list|,
name|n
operator|.
name|getPatchsetId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isCodeReview (LabelId id)
specifier|private
specifier|static
name|boolean
name|isCodeReview
parameter_list|(
name|LabelId
name|id
parameter_list|)
block|{
return|return
literal|"Code-Review"
operator|.
name|equalsIgnoreCase
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isVerified (LabelId id)
specifier|private
specifier|static
name|boolean
name|isVerified
parameter_list|(
name|LabelId
name|id
parameter_list|)
block|{
return|return
literal|"Verified"
operator|.
name|equalsIgnoreCase
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|safeGetApprovals ( ChangeControl ctl, PatchSet.Id psId)
specifier|private
name|Iterable
argument_list|<
name|PatchSetApproval
argument_list|>
name|safeGetApprovals
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|)
block|{
try|try
block|{
return|return
name|approvalsUtil
operator|.
name|byPatchSet
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|ctl
argument_list|,
name|psId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't read approval records for "
operator|+
name|psId
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
DECL|method|contains (List<FooterLine> footers, FooterKey key, String val)
specifier|private
specifier|static
name|boolean
name|contains
parameter_list|(
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footers
parameter_list|,
name|FooterKey
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
for|for
control|(
specifier|final
name|FooterLine
name|line
range|:
name|footers
control|)
block|{
if|if
condition|(
name|line
operator|.
name|matches
argument_list|(
name|key
argument_list|)
operator|&&
name|val
operator|.
name|equals
argument_list|(
name|line
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isSignedOffBy (List<FooterLine> footers, String email)
specifier|private
specifier|static
name|boolean
name|isSignedOffBy
parameter_list|(
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footers
parameter_list|,
name|String
name|email
parameter_list|)
block|{
for|for
control|(
specifier|final
name|FooterLine
name|line
range|:
name|footers
control|)
block|{
if|if
condition|(
name|line
operator|.
name|matches
argument_list|(
name|FooterKey
operator|.
name|SIGNED_OFF_BY
argument_list|)
operator|&&
name|email
operator|.
name|equals
argument_list|(
name|line
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|canMerge (final MergeSorter mergeSorter, final Repository repo, final CodeReviewCommit mergeTip, final CodeReviewCommit toMerge)
specifier|public
name|boolean
name|canMerge
parameter_list|(
specifier|final
name|MergeSorter
name|mergeSorter
parameter_list|,
specifier|final
name|Repository
name|repo
parameter_list|,
specifier|final
name|CodeReviewCommit
name|mergeTip
parameter_list|,
specifier|final
name|CodeReviewCommit
name|toMerge
parameter_list|)
throws|throws
name|IntegrationException
block|{
if|if
condition|(
name|hasMissingDependencies
argument_list|(
name|mergeSorter
argument_list|,
name|toMerge
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
init|(
name|ObjectInserter
name|ins
init|=
operator|new
name|InMemoryInserter
argument_list|(
name|repo
argument_list|)
init|)
block|{
return|return
name|newThreeWayMerger
argument_list|(
name|repo
argument_list|,
name|ins
argument_list|)
operator|.
name|merge
argument_list|(
operator|new
name|AnyObjectId
index|[]
block|{
name|mergeTip
block|,
name|toMerge
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LargeObjectException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot merge due to LargeObjectException: "
operator|+
name|toMerge
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|NoMergeBaseException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Cannot merge "
operator|+
name|toMerge
operator|.
name|name
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|canFastForward (MergeSorter mergeSorter, CodeReviewCommit mergeTip, CodeReviewRevWalk rw, CodeReviewCommit toMerge)
specifier|public
name|boolean
name|canFastForward
parameter_list|(
name|MergeSorter
name|mergeSorter
parameter_list|,
name|CodeReviewCommit
name|mergeTip
parameter_list|,
name|CodeReviewRevWalk
name|rw
parameter_list|,
name|CodeReviewCommit
name|toMerge
parameter_list|)
throws|throws
name|IntegrationException
block|{
if|if
condition|(
name|hasMissingDependencies
argument_list|(
name|mergeSorter
argument_list|,
name|toMerge
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
return|return
name|mergeTip
operator|==
literal|null
operator|||
name|rw
operator|.
name|isMergedInto
argument_list|(
name|mergeTip
argument_list|,
name|toMerge
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Cannot fast-forward test during merge"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|canCherryPick (MergeSorter mergeSorter, Repository repo, CodeReviewCommit mergeTip, CodeReviewRevWalk rw, CodeReviewCommit toMerge)
specifier|public
name|boolean
name|canCherryPick
parameter_list|(
name|MergeSorter
name|mergeSorter
parameter_list|,
name|Repository
name|repo
parameter_list|,
name|CodeReviewCommit
name|mergeTip
parameter_list|,
name|CodeReviewRevWalk
name|rw
parameter_list|,
name|CodeReviewCommit
name|toMerge
parameter_list|)
throws|throws
name|IntegrationException
block|{
if|if
condition|(
name|mergeTip
operator|==
literal|null
condition|)
block|{
comment|// The branch is unborn. Fast-forward is possible.
comment|//
return|return
literal|true
return|;
block|}
if|if
condition|(
name|toMerge
operator|.
name|getParentCount
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Refuse to merge a root commit into an existing branch,
comment|// we cannot obtain a delta for the cherry-pick to apply.
comment|//
return|return
literal|false
return|;
block|}
if|if
condition|(
name|toMerge
operator|.
name|getParentCount
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// If there is only one parent, a cherry-pick can be done by
comment|// taking the delta relative to that one parent and redoing
comment|// that on the current merge tip.
comment|//
try|try
init|(
name|ObjectInserter
name|ins
init|=
operator|new
name|InMemoryInserter
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|ThreeWayMerger
name|m
init|=
name|newThreeWayMerger
argument_list|(
name|repo
argument_list|,
name|ins
argument_list|)
decl_stmt|;
name|m
operator|.
name|setBase
argument_list|(
name|toMerge
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|m
operator|.
name|merge
argument_list|(
name|mergeTip
argument_list|,
name|toMerge
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot merge commit %s with mergetip %s"
argument_list|,
name|toMerge
operator|.
name|name
argument_list|()
argument_list|,
name|mergeTip
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// There are multiple parents, so this is a merge commit. We
comment|// don't want to cherry-pick the merge as clients can't easily
comment|// rebase their history with that merge present and replaced
comment|// by an equivalent merge with a different first parent. So
comment|// instead behave as though MERGE_IF_NECESSARY was configured.
comment|//
return|return
name|canFastForward
argument_list|(
name|mergeSorter
argument_list|,
name|mergeTip
argument_list|,
name|rw
argument_list|,
name|toMerge
argument_list|)
operator|||
name|canMerge
argument_list|(
name|mergeSorter
argument_list|,
name|repo
argument_list|,
name|mergeTip
argument_list|,
name|toMerge
argument_list|)
return|;
block|}
DECL|method|hasMissingDependencies (final MergeSorter mergeSorter, final CodeReviewCommit toMerge)
specifier|public
name|boolean
name|hasMissingDependencies
parameter_list|(
specifier|final
name|MergeSorter
name|mergeSorter
parameter_list|,
specifier|final
name|CodeReviewCommit
name|toMerge
parameter_list|)
throws|throws
name|IntegrationException
block|{
try|try
block|{
return|return
operator|!
name|mergeSorter
operator|.
name|sort
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|toMerge
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|toMerge
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Branch head sorting failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|mergeOneCommit (PersonIdent author, PersonIdent committer, Repository repo, CodeReviewRevWalk rw, ObjectInserter inserter, Branch.NameKey destBranch, CodeReviewCommit mergeTip, CodeReviewCommit n)
specifier|public
name|CodeReviewCommit
name|mergeOneCommit
parameter_list|(
name|PersonIdent
name|author
parameter_list|,
name|PersonIdent
name|committer
parameter_list|,
name|Repository
name|repo
parameter_list|,
name|CodeReviewRevWalk
name|rw
parameter_list|,
name|ObjectInserter
name|inserter
parameter_list|,
name|Branch
operator|.
name|NameKey
name|destBranch
parameter_list|,
name|CodeReviewCommit
name|mergeTip
parameter_list|,
name|CodeReviewCommit
name|n
parameter_list|)
throws|throws
name|IntegrationException
block|{
specifier|final
name|ThreeWayMerger
name|m
init|=
name|newThreeWayMerger
argument_list|(
name|repo
argument_list|,
name|inserter
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|m
operator|.
name|merge
argument_list|(
operator|new
name|AnyObjectId
index|[]
block|{
name|mergeTip
operator|,
name|n
block|}
block|)
block|)
block|{
return|return
name|writeMergeCommit
argument_list|(
name|author
argument_list|,
name|committer
argument_list|,
name|rw
argument_list|,
name|inserter
argument_list|,
name|destBranch
argument_list|,
name|mergeTip
argument_list|,
name|m
operator|.
name|getResultTreeId
argument_list|()
argument_list|,
name|n
argument_list|)
return|;
block|}
name|failed
parameter_list|(
name|rw
parameter_list|,
name|mergeTip
parameter_list|,
name|n
parameter_list|,
name|CommitMergeStatus
operator|.
name|PATH_CONFLICT
parameter_list|)
constructor_decl|;
block|}
end_class

begin_catch
catch|catch
parameter_list|(
name|NoMergeBaseException
name|e
parameter_list|)
block|{
try|try
block|{
name|failed
argument_list|(
name|rw
argument_list|,
name|mergeTip
argument_list|,
name|n
argument_list|,
name|getCommitMergeStatus
argument_list|(
name|e
operator|.
name|getReason
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e2
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Cannot merge "
operator|+
name|n
operator|.
name|name
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_catch

begin_catch
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Cannot merge "
operator|+
name|n
operator|.
name|name
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
end_catch

begin_return
return|return
name|mergeTip
return|;
end_return

begin_function
unit|}    private
DECL|method|getCommitMergeStatus ( MergeBaseFailureReason reason)
specifier|static
name|CommitMergeStatus
name|getCommitMergeStatus
parameter_list|(
name|MergeBaseFailureReason
name|reason
parameter_list|)
block|{
switch|switch
condition|(
name|reason
condition|)
block|{
case|case
name|MULTIPLE_MERGE_BASES_NOT_SUPPORTED
case|:
case|case
name|TOO_MANY_MERGE_BASES
case|:
default|default:
return|return
name|CommitMergeStatus
operator|.
name|MANUAL_RECURSIVE_MERGE
return|;
case|case
name|CONFLICTS_DURING_MERGE_BASE_CALCULATION
case|:
return|return
name|CommitMergeStatus
operator|.
name|PATH_CONFLICT
return|;
block|}
block|}
end_function

begin_function
DECL|method|failed (CodeReviewRevWalk rw, CodeReviewCommit mergeTip, CodeReviewCommit n, CommitMergeStatus failure)
specifier|private
specifier|static
name|CodeReviewCommit
name|failed
parameter_list|(
name|CodeReviewRevWalk
name|rw
parameter_list|,
name|CodeReviewCommit
name|mergeTip
parameter_list|,
name|CodeReviewCommit
name|n
parameter_list|,
name|CommitMergeStatus
name|failure
parameter_list|)
throws|throws
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
throws|,
name|IOException
block|{
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markUninteresting
argument_list|(
name|mergeTip
argument_list|)
expr_stmt|;
name|CodeReviewCommit
name|failed
decl_stmt|;
while|while
condition|(
operator|(
name|failed
operator|=
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|failed
operator|.
name|setStatusCode
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
return|return
name|failed
return|;
block|}
end_function

begin_function
DECL|method|writeMergeCommit (PersonIdent author, PersonIdent committer, CodeReviewRevWalk rw, ObjectInserter inserter, Branch.NameKey destBranch, CodeReviewCommit mergeTip, ObjectId treeId, CodeReviewCommit n)
specifier|public
name|CodeReviewCommit
name|writeMergeCommit
parameter_list|(
name|PersonIdent
name|author
parameter_list|,
name|PersonIdent
name|committer
parameter_list|,
name|CodeReviewRevWalk
name|rw
parameter_list|,
name|ObjectInserter
name|inserter
parameter_list|,
name|Branch
operator|.
name|NameKey
name|destBranch
parameter_list|,
name|CodeReviewCommit
name|mergeTip
parameter_list|,
name|ObjectId
name|treeId
parameter_list|,
name|CodeReviewCommit
name|n
parameter_list|)
throws|throws
name|IOException
throws|,
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
block|{
specifier|final
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|merged
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markUninteresting
argument_list|(
name|mergeTip
argument_list|)
expr_stmt|;
name|CodeReviewCommit
name|crc
decl_stmt|;
while|while
condition|(
operator|(
name|crc
operator|=
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|crc
operator|.
name|getPatchsetId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|merged
operator|.
name|add
argument_list|(
name|crc
argument_list|)
expr_stmt|;
block|}
block|}
name|StringBuilder
name|msgbuf
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|summarize
argument_list|(
name|rw
argument_list|,
name|merged
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|R_HEADS_MASTER
operator|.
name|equals
argument_list|(
name|destBranch
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
literal|" into "
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|destBranch
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|merged
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
literal|"\n\n* changes:\n"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|CodeReviewCommit
name|c
range|:
name|merged
control|)
block|{
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|c
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|CommitBuilder
name|mergeCommit
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|mergeCommit
operator|.
name|setTreeId
argument_list|(
name|treeId
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setParentIds
argument_list|(
name|mergeTip
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setAuthor
argument_list|(
name|author
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setCommitter
argument_list|(
name|committer
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setMessage
argument_list|(
name|msgbuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|CodeReviewCommit
name|mergeResult
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|inserter
operator|.
name|insert
argument_list|(
name|mergeCommit
argument_list|)
argument_list|)
decl_stmt|;
name|mergeResult
operator|.
name|setControl
argument_list|(
name|n
operator|.
name|getControl
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mergeResult
return|;
block|}
end_function

begin_function
DECL|method|summarize (RevWalk rw, List<CodeReviewCommit> merged)
specifier|private
name|String
name|summarize
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|merged
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|merged
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|CodeReviewCommit
name|c
init|=
name|merged
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"Merge \"%s\""
argument_list|,
name|c
operator|.
name|getShortMessage
argument_list|()
argument_list|)
return|;
block|}
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|topics
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|CodeReviewCommit
name|c
range|:
name|merged
control|)
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|c
operator|.
name|change
argument_list|()
operator|.
name|getTopic
argument_list|()
argument_list|)
condition|)
block|{
name|topics
operator|.
name|add
argument_list|(
name|c
operator|.
name|change
argument_list|()
operator|.
name|getTopic
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|topics
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"Merge changes from topic '%s'"
argument_list|,
name|Iterables
operator|.
name|getFirst
argument_list|(
name|topics
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|topics
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"Merge changes from topics '%s'"
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|"', '"
argument_list|)
operator|.
name|join
argument_list|(
name|topics
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"Merge changes %s%s"
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|Iterables
operator|.
name|limit
argument_list|(
name|merged
argument_list|,
literal|5
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|CodeReviewCommit
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|CodeReviewCommit
name|in
parameter_list|)
block|{
return|return
name|in
operator|.
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|abbreviate
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|,
name|merged
operator|.
name|size
argument_list|()
operator|>
literal|5
condition|?
literal|", ..."
else|:
literal|""
argument_list|)
return|;
block|}
block|}
end_function

begin_function
DECL|method|newThreeWayMerger (final Repository repo, final ObjectInserter inserter)
specifier|public
name|ThreeWayMerger
name|newThreeWayMerger
parameter_list|(
specifier|final
name|Repository
name|repo
parameter_list|,
specifier|final
name|ObjectInserter
name|inserter
parameter_list|)
block|{
return|return
name|newThreeWayMerger
argument_list|(
name|repo
argument_list|,
name|inserter
argument_list|,
name|mergeStrategyName
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|mergeStrategyName ()
specifier|public
name|String
name|mergeStrategyName
parameter_list|()
block|{
return|return
name|mergeStrategyName
argument_list|(
name|useContentMerge
argument_list|,
name|useRecursiveMerge
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|mergeStrategyName (boolean useContentMerge, boolean useRecursiveMerge)
specifier|public
specifier|static
name|String
name|mergeStrategyName
parameter_list|(
name|boolean
name|useContentMerge
parameter_list|,
name|boolean
name|useRecursiveMerge
parameter_list|)
block|{
if|if
condition|(
name|useContentMerge
condition|)
block|{
comment|// Settings for this project allow us to try and automatically resolve
comment|// conflicts within files if needed. Use either the old resolve merger or
comment|// new recursive merger, and instruct to operate in core.
if|if
condition|(
name|useRecursiveMerge
condition|)
block|{
return|return
name|MergeStrategy
operator|.
name|RECURSIVE
operator|.
name|getName
argument_list|()
return|;
block|}
return|return
name|MergeStrategy
operator|.
name|RESOLVE
operator|.
name|getName
argument_list|()
return|;
block|}
comment|// No auto conflict resolving allowed. If any of the
comment|// affected files was modified, merge will fail.
return|return
name|MergeStrategy
operator|.
name|SIMPLE_TWO_WAY_IN_CORE
operator|.
name|getName
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|newThreeWayMerger (Repository repo, final ObjectInserter inserter, String strategyName)
specifier|public
specifier|static
name|ThreeWayMerger
name|newThreeWayMerger
parameter_list|(
name|Repository
name|repo
parameter_list|,
specifier|final
name|ObjectInserter
name|inserter
parameter_list|,
name|String
name|strategyName
parameter_list|)
block|{
name|Merger
name|m
init|=
name|newMerger
argument_list|(
name|repo
argument_list|,
name|inserter
argument_list|,
name|strategyName
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|m
operator|instanceof
name|ThreeWayMerger
argument_list|,
literal|"merge strategy %s does not support three-way merging"
argument_list|,
name|strategyName
argument_list|)
expr_stmt|;
return|return
operator|(
name|ThreeWayMerger
operator|)
name|m
return|;
block|}
end_function

begin_function
DECL|method|newMerger (Repository repo, final ObjectInserter inserter, String strategyName)
specifier|public
specifier|static
name|Merger
name|newMerger
parameter_list|(
name|Repository
name|repo
parameter_list|,
specifier|final
name|ObjectInserter
name|inserter
parameter_list|,
name|String
name|strategyName
parameter_list|)
block|{
name|MergeStrategy
name|strategy
init|=
name|MergeStrategy
operator|.
name|get
argument_list|(
name|strategyName
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|strategy
operator|!=
literal|null
argument_list|,
literal|"invalid merge strategy: %s"
argument_list|,
name|strategyName
argument_list|)
expr_stmt|;
name|Merger
name|m
init|=
name|strategy
operator|.
name|newMerger
argument_list|(
name|repo
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|m
operator|.
name|setObjectInserter
argument_list|(
operator|new
name|ObjectInserter
operator|.
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ObjectInserter
name|delegate
parameter_list|()
block|{
return|return
name|inserter
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{       }
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{       }
block|}
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
end_function

begin_function
DECL|method|markCleanMerges (final RevWalk rw, final RevFlag canMergeFlag, final CodeReviewCommit mergeTip, final Set<RevCommit> alreadyAccepted)
specifier|public
name|void
name|markCleanMerges
parameter_list|(
specifier|final
name|RevWalk
name|rw
parameter_list|,
specifier|final
name|RevFlag
name|canMergeFlag
parameter_list|,
specifier|final
name|CodeReviewCommit
name|mergeTip
parameter_list|,
specifier|final
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|alreadyAccepted
parameter_list|)
throws|throws
name|IntegrationException
block|{
if|if
condition|(
name|mergeTip
operator|==
literal|null
condition|)
block|{
comment|// If mergeTip is null here, branchTip was null, indicating a new branch
comment|// at the start of the merge process. We also elected to merge nothing,
comment|// probably due to missing dependencies. Nothing was cleanly merged.
comment|//
return|return;
block|}
try|try
block|{
name|rw
operator|.
name|resetRetain
argument_list|(
name|canMergeFlag
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|mergeTip
argument_list|)
expr_stmt|;
for|for
control|(
name|RevCommit
name|c
range|:
name|alreadyAccepted
control|)
block|{
comment|// If branch was not created by this submit.
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|c
argument_list|,
name|mergeTip
argument_list|)
condition|)
block|{
name|rw
operator|.
name|markUninteresting
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|CodeReviewCommit
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
operator|(
name|CodeReviewCommit
operator|)
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|getPatchsetId
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getStatusCode
argument_list|()
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|setStatusCode
argument_list|(
name|CommitMergeStatus
operator|.
name|CLEAN_MERGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Cannot mark clean merges"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|findUnmergedChanges (Set<Change.Id> expected, CodeReviewRevWalk rw, RevFlag canMergeFlag, CodeReviewCommit oldTip, CodeReviewCommit mergeTip, Iterable<Change.Id> alreadyMerged)
specifier|public
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|findUnmergedChanges
parameter_list|(
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|expected
parameter_list|,
name|CodeReviewRevWalk
name|rw
parameter_list|,
name|RevFlag
name|canMergeFlag
parameter_list|,
name|CodeReviewCommit
name|oldTip
parameter_list|,
name|CodeReviewCommit
name|mergeTip
parameter_list|,
name|Iterable
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|alreadyMerged
parameter_list|)
throws|throws
name|IntegrationException
block|{
if|if
condition|(
name|mergeTip
operator|==
literal|null
condition|)
block|{
return|return
name|expected
return|;
block|}
try|try
block|{
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|found
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Iterables
operator|.
name|addAll
argument_list|(
name|found
argument_list|,
name|alreadyMerged
argument_list|)
expr_stmt|;
name|rw
operator|.
name|resetRetain
argument_list|(
name|canMergeFlag
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|mergeTip
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldTip
operator|!=
literal|null
condition|)
block|{
name|rw
operator|.
name|markUninteresting
argument_list|(
name|oldTip
argument_list|)
expr_stmt|;
block|}
name|CodeReviewCommit
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|getPatchsetId
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Change
operator|.
name|Id
name|id
init|=
name|c
operator|.
name|getPatchsetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|expected
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|found
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|found
operator|.
name|size
argument_list|()
operator|==
name|expected
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
block|}
return|return
name|Sets
operator|.
name|difference
argument_list|(
name|expected
argument_list|,
name|found
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Cannot check if changes were merged"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|findAnyMergedInto (CodeReviewRevWalk rw, Iterable<CodeReviewCommit> commits, CodeReviewCommit tip)
specifier|public
specifier|static
name|CodeReviewCommit
name|findAnyMergedInto
parameter_list|(
name|CodeReviewRevWalk
name|rw
parameter_list|,
name|Iterable
argument_list|<
name|CodeReviewCommit
argument_list|>
name|commits
parameter_list|,
name|CodeReviewCommit
name|tip
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|CodeReviewCommit
name|c
range|:
name|commits
control|)
block|{
comment|// TODO(dborowitz): Seems like this could get expensive for many patch
comment|// sets. Is there a more efficient implementation?
if|if
condition|(
name|rw
operator|.
name|isMergedInto
argument_list|(
name|c
argument_list|,
name|tip
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
DECL|method|resolveCommit (Repository repo, RevWalk rw, String str)
specifier|public
specifier|static
name|RevCommit
name|resolveCommit
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|String
name|str
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|ResourceNotFoundException
throws|,
name|IOException
block|{
try|try
block|{
name|ObjectId
name|commitId
init|=
name|repo
operator|.
name|resolve
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Cannot resolve '"
operator|+
name|str
operator|+
literal|"' to a commit"
argument_list|)
throw|;
block|}
return|return
name|rw
operator|.
name|parseCommit
argument_list|(
name|commitId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|AmbiguousObjectException
decl||
name|IncorrectObjectTypeException
decl||
name|RevisionSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MissingObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_function

unit|}
end_unit

