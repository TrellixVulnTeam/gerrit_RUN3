begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AnyObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|MutableObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|merge
operator|.
name|MergeStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|merge
operator|.
name|ThreeWayMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PackParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_class
DECL|class|MergeUtil
specifier|public
class|class
name|MergeUtil
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MergeUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|R_HEADS_MASTER
specifier|private
specifier|static
specifier|final
name|String
name|R_HEADS_MASTER
init|=
name|Constants
operator|.
name|R_HEADS
operator|+
name|Constants
operator|.
name|MASTER
decl_stmt|;
DECL|field|CRVW
specifier|private
specifier|static
specifier|final
name|ApprovalCategory
operator|.
name|Id
name|CRVW
init|=
comment|//
operator|new
name|ApprovalCategory
operator|.
name|Id
argument_list|(
literal|"CRVW"
argument_list|)
decl_stmt|;
DECL|field|VRIF
specifier|private
specifier|static
specifier|final
name|ApprovalCategory
operator|.
name|Id
name|VRIF
init|=
comment|//
operator|new
name|ApprovalCategory
operator|.
name|Id
argument_list|(
literal|"VRIF"
argument_list|)
decl_stmt|;
DECL|field|REVIEWED_ON
specifier|private
specifier|static
specifier|final
name|FooterKey
name|REVIEWED_ON
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Reviewed-on"
argument_list|)
decl_stmt|;
DECL|field|CHANGE_ID
specifier|private
specifier|static
specifier|final
name|FooterKey
name|CHANGE_ID
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Change-Id"
argument_list|)
decl_stmt|;
DECL|method|getFirstFastForward ( final CodeReviewCommit mergeTip, final RevWalk rw, final List<CodeReviewCommit> toMerge)
specifier|public
specifier|static
name|CodeReviewCommit
name|getFirstFastForward
parameter_list|(
specifier|final
name|CodeReviewCommit
name|mergeTip
parameter_list|,
specifier|final
name|RevWalk
name|rw
parameter_list|,
specifier|final
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|toMerge
parameter_list|)
throws|throws
name|MergeException
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|CodeReviewCommit
argument_list|>
name|i
init|=
name|toMerge
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
try|try
block|{
specifier|final
name|CodeReviewCommit
name|n
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|mergeTip
operator|==
literal|null
operator|||
name|rw
operator|.
name|isMergedInto
argument_list|(
name|mergeTip
argument_list|,
name|n
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
name|n
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot fast-forward test during merge"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|mergeTip
return|;
block|}
DECL|method|reduceToMinimalMerge (final MergeSorter mergeSorter, final List<CodeReviewCommit> toSort)
specifier|public
specifier|static
name|void
name|reduceToMinimalMerge
parameter_list|(
specifier|final
name|MergeSorter
name|mergeSorter
parameter_list|,
specifier|final
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|toSort
parameter_list|)
throws|throws
name|MergeException
block|{
specifier|final
name|Collection
argument_list|<
name|CodeReviewCommit
argument_list|>
name|heads
decl_stmt|;
try|try
block|{
name|heads
operator|=
name|mergeSorter
operator|.
name|sort
argument_list|(
name|toSort
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Branch head sorting failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|toSort
operator|.
name|clear
argument_list|()
expr_stmt|;
name|toSort
operator|.
name|addAll
argument_list|(
name|heads
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|toSort
argument_list|,
operator|new
name|Comparator
argument_list|<
name|CodeReviewCommit
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|CodeReviewCommit
name|a
parameter_list|,
specifier|final
name|CodeReviewCommit
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|originalOrder
operator|-
name|b
operator|.
name|originalOrder
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getSubmitter (final ReviewDb reviewDb, final PatchSet.Id c)
specifier|public
specifier|static
name|PatchSetApproval
name|getSubmitter
parameter_list|(
specifier|final
name|ReviewDb
name|reviewDb
parameter_list|,
specifier|final
name|PatchSet
operator|.
name|Id
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PatchSetApproval
name|submitter
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvals
init|=
name|reviewDb
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|c
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|approvals
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getValue
argument_list|()
operator|>
literal|0
operator|&&
name|ApprovalCategory
operator|.
name|SUBMIT
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getCategoryId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|submitter
operator|==
literal|null
operator|||
name|a
operator|.
name|getGranted
argument_list|()
operator|.
name|compareTo
argument_list|(
name|submitter
operator|.
name|getGranted
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|submitter
operator|=
name|a
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{     }
return|return
name|submitter
return|;
block|}
DECL|method|createCherryPickFromCommit (Repository repo, ObjectInserter inserter, CodeReviewCommit mergeTip, CodeReviewCommit originalCommit, PersonIdent cherryPickCommitterIdent, String commitMsg, RevWalk rw, Boolean useContentMerge)
specifier|public
specifier|static
name|CodeReviewCommit
name|createCherryPickFromCommit
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|ObjectInserter
name|inserter
parameter_list|,
name|CodeReviewCommit
name|mergeTip
parameter_list|,
name|CodeReviewCommit
name|originalCommit
parameter_list|,
name|PersonIdent
name|cherryPickCommitterIdent
parameter_list|,
name|String
name|commitMsg
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|Boolean
name|useContentMerge
parameter_list|)
throws|throws
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
throws|,
name|IOException
block|{
specifier|final
name|ThreeWayMerger
name|m
init|=
name|newThreeWayMerger
argument_list|(
name|repo
argument_list|,
name|inserter
argument_list|,
name|useContentMerge
argument_list|)
decl_stmt|;
name|m
operator|.
name|setBase
argument_list|(
name|originalCommit
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|merge
argument_list|(
name|mergeTip
argument_list|,
name|originalCommit
argument_list|)
condition|)
block|{
specifier|final
name|CommitBuilder
name|mergeCommit
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|mergeCommit
operator|.
name|setTreeId
argument_list|(
name|m
operator|.
name|getResultTreeId
argument_list|()
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setParentId
argument_list|(
name|mergeTip
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setAuthor
argument_list|(
name|originalCommit
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setCommitter
argument_list|(
name|cherryPickCommitterIdent
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setMessage
argument_list|(
name|commitMsg
argument_list|)
expr_stmt|;
specifier|final
name|ObjectId
name|id
init|=
name|commit
argument_list|(
name|inserter
argument_list|,
name|mergeCommit
argument_list|)
decl_stmt|;
specifier|final
name|CodeReviewCommit
name|newCommit
init|=
operator|(
name|CodeReviewCommit
operator|)
name|rw
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
decl_stmt|;
return|return
name|newCommit
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|createCherryPickCommitMessage (final CodeReviewCommit n, final ApprovalTypes approvalTypes, final Provider<String> urlProvider, final ReviewDb db, final IdentifiedUser.GenericFactory identifiedUserFactory)
specifier|public
specifier|static
name|String
name|createCherryPickCommitMessage
parameter_list|(
specifier|final
name|CodeReviewCommit
name|n
parameter_list|,
specifier|final
name|ApprovalTypes
name|approvalTypes
parameter_list|,
specifier|final
name|Provider
argument_list|<
name|String
argument_list|>
name|urlProvider
parameter_list|,
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footers
init|=
name|n
operator|.
name|getFooterLines
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|msgbuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|n
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|msgbuf
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// WTF, an empty commit message?
name|msgbuf
operator|.
name|append
argument_list|(
literal|"<no commit message provided>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|msgbuf
operator|.
name|charAt
argument_list|(
name|msgbuf
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|'\n'
condition|)
block|{
comment|// Missing a trailing LF? Correct it (perhaps the editor was broken).
name|msgbuf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|footers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Doesn't end in a "Signed-off-by: ..." style line? Add another line
comment|// break to start a new paragraph for the reviewed-by tag lines.
comment|//
name|msgbuf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contains
argument_list|(
name|footers
argument_list|,
name|CHANGE_ID
argument_list|,
name|n
operator|.
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
name|CHANGE_ID
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|n
operator|.
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|siteUrl
init|=
name|urlProvider
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|siteUrl
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|url
init|=
name|siteUrl
operator|+
name|n
operator|.
name|patchsetId
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|contains
argument_list|(
name|footers
argument_list|,
name|REVIEWED_ON
argument_list|,
name|url
argument_list|)
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
name|REVIEWED_ON
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
name|PatchSetApproval
name|submitAudit
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|PatchSetApproval
name|a
range|:
name|getApprovalsForCommit
argument_list|(
name|db
argument_list|,
name|n
argument_list|)
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getValue
argument_list|()
operator|<=
literal|0
condition|)
block|{
comment|// Negative votes aren't counted.
continue|continue;
block|}
if|if
condition|(
name|ApprovalCategory
operator|.
name|SUBMIT
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getCategoryId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Submit is treated specially, below (becomes committer)
comment|//
if|if
condition|(
name|submitAudit
operator|==
literal|null
operator|||
name|a
operator|.
name|getGranted
argument_list|()
operator|.
name|compareTo
argument_list|(
name|submitAudit
operator|.
name|getGranted
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|submitAudit
operator|=
name|a
expr_stmt|;
block|}
continue|continue;
block|}
specifier|final
name|Account
name|acc
init|=
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|identbuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|acc
operator|.
name|getFullName
argument_list|()
operator|!=
literal|null
operator|&&
name|acc
operator|.
name|getFullName
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|identbuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|identbuf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|identbuf
operator|.
name|append
argument_list|(
name|acc
operator|.
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acc
operator|.
name|getPreferredEmail
argument_list|()
operator|!=
literal|null
operator|&&
name|acc
operator|.
name|getPreferredEmail
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|isSignedOffBy
argument_list|(
name|footers
argument_list|,
name|acc
operator|.
name|getPreferredEmail
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|identbuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|identbuf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|identbuf
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|identbuf
operator|.
name|append
argument_list|(
name|acc
operator|.
name|getPreferredEmail
argument_list|()
argument_list|)
expr_stmt|;
name|identbuf
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|identbuf
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Nothing reasonable to describe them by? Ignore them.
continue|continue;
block|}
specifier|final
name|String
name|tag
decl_stmt|;
if|if
condition|(
name|CRVW
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getCategoryId
argument_list|()
argument_list|)
condition|)
block|{
name|tag
operator|=
literal|"Reviewed-by"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|VRIF
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getCategoryId
argument_list|()
argument_list|)
condition|)
block|{
name|tag
operator|=
literal|"Tested-by"
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|ApprovalType
name|at
init|=
name|approvalTypes
operator|.
name|byId
argument_list|(
name|a
operator|.
name|getCategoryId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|==
literal|null
condition|)
block|{
comment|// TODO: Support arbitrary labels.
continue|continue;
block|}
name|tag
operator|=
name|at
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contains
argument_list|(
name|footers
argument_list|,
operator|new
name|FooterKey
argument_list|(
name|tag
argument_list|)
argument_list|,
name|identbuf
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|identbuf
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|msgbuf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getApprovalsForCommit (final ReviewDb db, final CodeReviewCommit n)
specifier|public
specifier|static
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|getApprovalsForCommit
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|CodeReviewCommit
name|n
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvalList
init|=
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|n
operator|.
name|patchsetId
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|approvalList
argument_list|,
operator|new
name|Comparator
argument_list|<
name|PatchSetApproval
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|PatchSetApproval
name|a
parameter_list|,
specifier|final
name|PatchSetApproval
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|getGranted
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getGranted
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|approvalList
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't read approval records for "
operator|+
name|n
operator|.
name|patchsetId
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
DECL|method|contains (List<FooterLine> footers, FooterKey key, String val)
specifier|private
specifier|static
name|boolean
name|contains
parameter_list|(
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footers
parameter_list|,
name|FooterKey
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
for|for
control|(
specifier|final
name|FooterLine
name|line
range|:
name|footers
control|)
block|{
if|if
condition|(
name|line
operator|.
name|matches
argument_list|(
name|key
argument_list|)
operator|&&
name|val
operator|.
name|equals
argument_list|(
name|line
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isSignedOffBy (List<FooterLine> footers, String email)
specifier|private
specifier|static
name|boolean
name|isSignedOffBy
parameter_list|(
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footers
parameter_list|,
name|String
name|email
parameter_list|)
block|{
for|for
control|(
specifier|final
name|FooterLine
name|line
range|:
name|footers
control|)
block|{
if|if
condition|(
name|line
operator|.
name|matches
argument_list|(
name|FooterKey
operator|.
name|SIGNED_OFF_BY
argument_list|)
operator|&&
name|email
operator|.
name|equals
argument_list|(
name|line
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|computeMergeCommitAuthor (final ReviewDb reviewDb, final IdentifiedUser.GenericFactory identifiedUserFactory, final PersonIdent myIdent, final RevWalk rw, final List<CodeReviewCommit> codeReviewCommits)
specifier|public
specifier|static
name|PersonIdent
name|computeMergeCommitAuthor
parameter_list|(
specifier|final
name|ReviewDb
name|reviewDb
parameter_list|,
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
parameter_list|,
specifier|final
name|PersonIdent
name|myIdent
parameter_list|,
specifier|final
name|RevWalk
name|rw
parameter_list|,
specifier|final
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|codeReviewCommits
parameter_list|)
block|{
name|PatchSetApproval
name|submitter
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|CodeReviewCommit
name|c
range|:
name|codeReviewCommits
control|)
block|{
name|PatchSetApproval
name|s
init|=
name|getSubmitter
argument_list|(
name|reviewDb
argument_list|,
name|c
operator|.
name|patchsetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|submitter
operator|==
literal|null
operator|||
operator|(
name|s
operator|!=
literal|null
operator|&&
name|s
operator|.
name|getGranted
argument_list|()
operator|.
name|compareTo
argument_list|(
name|submitter
operator|.
name|getGranted
argument_list|()
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
name|submitter
operator|=
name|s
expr_stmt|;
block|}
block|}
comment|// Try to use the submitter's identity for the merge commit author.
comment|// If all of the commits being merged are created by the submitter,
comment|// prefer the identity line they used in the commits rather than the
comment|// preferred identity stored in the user account. This way the Git
comment|// commit records are more consistent internally.
comment|//
name|PersonIdent
name|authorIdent
decl_stmt|;
if|if
condition|(
name|submitter
operator|!=
literal|null
condition|)
block|{
name|IdentifiedUser
name|who
init|=
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|emails
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RevCommit
name|c
range|:
name|codeReviewCommits
control|)
block|{
try|try
block|{
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot parse commit "
operator|+
name|c
operator|.
name|name
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|emails
operator|.
name|add
argument_list|(
name|c
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Timestamp
name|dt
init|=
name|submitter
operator|.
name|getGranted
argument_list|()
decl_stmt|;
specifier|final
name|TimeZone
name|tz
init|=
name|myIdent
operator|.
name|getTimeZone
argument_list|()
decl_stmt|;
if|if
condition|(
name|emails
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|who
operator|.
name|getEmailAddresses
argument_list|()
operator|.
name|contains
argument_list|(
name|emails
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
name|authorIdent
operator|=
operator|new
name|PersonIdent
argument_list|(
name|codeReviewCommits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAuthorIdent
argument_list|()
argument_list|,
name|dt
argument_list|,
name|tz
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authorIdent
operator|=
name|who
operator|.
name|newCommitterIdent
argument_list|(
name|dt
argument_list|,
name|tz
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|authorIdent
operator|=
name|myIdent
expr_stmt|;
block|}
return|return
name|authorIdent
return|;
block|}
DECL|method|canMerge (final MergeSorter mergeSorter, final Repository repo, final boolean useContentMerge, final CodeReviewCommit mergeTip, final CodeReviewCommit toMerge)
specifier|public
specifier|static
name|boolean
name|canMerge
parameter_list|(
specifier|final
name|MergeSorter
name|mergeSorter
parameter_list|,
specifier|final
name|Repository
name|repo
parameter_list|,
specifier|final
name|boolean
name|useContentMerge
parameter_list|,
specifier|final
name|CodeReviewCommit
name|mergeTip
parameter_list|,
specifier|final
name|CodeReviewCommit
name|toMerge
parameter_list|)
throws|throws
name|MergeException
block|{
if|if
condition|(
name|hasMissingDependencies
argument_list|(
name|mergeSorter
argument_list|,
name|toMerge
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|ThreeWayMerger
name|m
init|=
name|newThreeWayMerger
argument_list|(
name|repo
argument_list|,
name|createDryRunInserter
argument_list|()
argument_list|,
name|useContentMerge
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|m
operator|.
name|merge
argument_list|(
operator|new
name|AnyObjectId
index|[]
block|{
name|mergeTip
block|,
name|toMerge
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Multiple merge bases for"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot merge "
operator|+
name|toMerge
operator|.
name|name
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|canFastForward (final MergeSorter mergeSorter, final CodeReviewCommit mergeTip, final RevWalk rw, final CodeReviewCommit toMerge)
specifier|public
specifier|static
name|boolean
name|canFastForward
parameter_list|(
specifier|final
name|MergeSorter
name|mergeSorter
parameter_list|,
specifier|final
name|CodeReviewCommit
name|mergeTip
parameter_list|,
specifier|final
name|RevWalk
name|rw
parameter_list|,
specifier|final
name|CodeReviewCommit
name|toMerge
parameter_list|)
throws|throws
name|MergeException
block|{
if|if
condition|(
name|hasMissingDependencies
argument_list|(
name|mergeSorter
argument_list|,
name|toMerge
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
return|return
name|mergeTip
operator|==
literal|null
operator|||
name|rw
operator|.
name|isMergedInto
argument_list|(
name|mergeTip
argument_list|,
name|toMerge
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot fast-forward test during merge"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|canCherryPick (final MergeSorter mergeSorter, final Repository repo, final boolean useContentMerge, final CodeReviewCommit mergeTip, final RevWalk rw, final CodeReviewCommit toMerge)
specifier|public
specifier|static
name|boolean
name|canCherryPick
parameter_list|(
specifier|final
name|MergeSorter
name|mergeSorter
parameter_list|,
specifier|final
name|Repository
name|repo
parameter_list|,
specifier|final
name|boolean
name|useContentMerge
parameter_list|,
specifier|final
name|CodeReviewCommit
name|mergeTip
parameter_list|,
specifier|final
name|RevWalk
name|rw
parameter_list|,
specifier|final
name|CodeReviewCommit
name|toMerge
parameter_list|)
throws|throws
name|MergeException
block|{
if|if
condition|(
name|mergeTip
operator|==
literal|null
condition|)
block|{
comment|// The branch is unborn. Fast-forward is possible.
comment|//
return|return
literal|true
return|;
block|}
if|if
condition|(
name|toMerge
operator|.
name|getParentCount
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Refuse to merge a root commit into an existing branch,
comment|// we cannot obtain a delta for the cherry-pick to apply.
comment|//
return|return
literal|false
return|;
block|}
if|if
condition|(
name|toMerge
operator|.
name|getParentCount
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// If there is only one parent, a cherry-pick can be done by
comment|// taking the delta relative to that one parent and redoing
comment|// that on the current merge tip.
comment|//
try|try
block|{
specifier|final
name|ThreeWayMerger
name|m
init|=
name|newThreeWayMerger
argument_list|(
name|repo
argument_list|,
name|createDryRunInserter
argument_list|()
argument_list|,
name|useContentMerge
argument_list|)
decl_stmt|;
name|m
operator|.
name|setBase
argument_list|(
name|toMerge
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|m
operator|.
name|merge
argument_list|(
name|mergeTip
argument_list|,
name|toMerge
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot merge "
operator|+
name|toMerge
operator|.
name|name
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// There are multiple parents, so this is a merge commit. We
comment|// don't want to cherry-pick the merge as clients can't easily
comment|// rebase their history with that merge present and replaced
comment|// by an equivalent merge with a different first parent. So
comment|// instead behave as though MERGE_IF_NECESSARY was configured.
comment|//
return|return
name|canFastForward
argument_list|(
name|mergeSorter
argument_list|,
name|mergeTip
argument_list|,
name|rw
argument_list|,
name|toMerge
argument_list|)
operator|||
name|canMerge
argument_list|(
name|mergeSorter
argument_list|,
name|repo
argument_list|,
name|useContentMerge
argument_list|,
name|mergeTip
argument_list|,
name|toMerge
argument_list|)
return|;
block|}
DECL|method|hasMissingDependencies (final MergeSorter mergeSorter, final CodeReviewCommit toMerge)
specifier|public
specifier|static
name|boolean
name|hasMissingDependencies
parameter_list|(
specifier|final
name|MergeSorter
name|mergeSorter
parameter_list|,
specifier|final
name|CodeReviewCommit
name|toMerge
parameter_list|)
throws|throws
name|MergeException
block|{
try|try
block|{
return|return
operator|!
name|mergeSorter
operator|.
name|sort
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|toMerge
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|toMerge
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Branch head sorting failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createDryRunInserter ()
specifier|public
specifier|static
name|ObjectInserter
name|createDryRunInserter
parameter_list|()
block|{
return|return
operator|new
name|ObjectInserter
argument_list|()
block|{
specifier|private
specifier|final
name|MutableObjectId
name|buf
init|=
operator|new
name|MutableObjectId
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|LAST_BYTE
init|=
name|Constants
operator|.
name|OBJECT_ID_LENGTH
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectId
name|insert
parameter_list|(
name|int
name|objectType
parameter_list|,
name|long
name|length
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create non-existing dummy ID
name|buf
operator|.
name|setByte
argument_list|(
name|LAST_BYTE
argument_list|,
name|buf
operator|.
name|getByte
argument_list|(
name|LAST_BYTE
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|copy
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PackParser
name|newPackParser
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Do nothing.
block|}
annotation|@
name|Override
specifier|public
name|void
name|release
parameter_list|()
block|{
comment|// Do nothing.
block|}
block|}
return|;
block|}
DECL|method|mergeOneCommit (final ReviewDb reviewDb, final IdentifiedUser.GenericFactory identifiedUserFactory, final PersonIdent myIdent, final Repository repo, final RevWalk rw, final ObjectInserter inserter, final RevFlag canMergeFlag, final boolean useContentMerge, final Branch.NameKey destBranch, final CodeReviewCommit mergeTip, final CodeReviewCommit n)
specifier|public
specifier|static
name|CodeReviewCommit
name|mergeOneCommit
parameter_list|(
specifier|final
name|ReviewDb
name|reviewDb
parameter_list|,
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
parameter_list|,
specifier|final
name|PersonIdent
name|myIdent
parameter_list|,
specifier|final
name|Repository
name|repo
parameter_list|,
specifier|final
name|RevWalk
name|rw
parameter_list|,
specifier|final
name|ObjectInserter
name|inserter
parameter_list|,
specifier|final
name|RevFlag
name|canMergeFlag
parameter_list|,
specifier|final
name|boolean
name|useContentMerge
parameter_list|,
specifier|final
name|Branch
operator|.
name|NameKey
name|destBranch
parameter_list|,
specifier|final
name|CodeReviewCommit
name|mergeTip
parameter_list|,
specifier|final
name|CodeReviewCommit
name|n
parameter_list|)
throws|throws
name|MergeException
block|{
specifier|final
name|ThreeWayMerger
name|m
init|=
name|newThreeWayMerger
argument_list|(
name|repo
argument_list|,
name|inserter
argument_list|,
name|useContentMerge
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|m
operator|.
name|merge
argument_list|(
operator|new
name|AnyObjectId
index|[]
block|{
name|mergeTip
operator|,
name|n
block|}
block|)
block|)
block|{
return|return
name|writeMergeCommit
argument_list|(
name|reviewDb
argument_list|,
name|identifiedUserFactory
argument_list|,
name|myIdent
argument_list|,
name|rw
argument_list|,
name|inserter
argument_list|,
name|canMergeFlag
argument_list|,
name|destBranch
argument_list|,
name|mergeTip
argument_list|,
name|m
operator|.
name|getResultTreeId
argument_list|()
argument_list|,
name|n
argument_list|)
return|;
block|}
else|else
block|{
name|failed
argument_list|(
name|rw
argument_list|,
name|canMergeFlag
argument_list|,
name|mergeTip
argument_list|,
name|n
argument_list|,
name|CommitMergeStatus
operator|.
name|PATH_CONFLICT
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_catch
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Multiple merge bases for"
argument_list|)
condition|)
block|{
try|try
block|{
name|failed
argument_list|(
name|rw
argument_list|,
name|canMergeFlag
argument_list|,
name|mergeTip
argument_list|,
name|n
argument_list|,
name|CommitMergeStatus
operator|.
name|CRISS_CROSS_MERGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e2
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot merge "
operator|+
name|n
operator|.
name|name
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot merge "
operator|+
name|n
operator|.
name|name
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_catch

begin_return
return|return
name|mergeTip
return|;
end_return

begin_function
unit|}    private
DECL|method|failed (final RevWalk rw, final RevFlag canMergeFlag, final CodeReviewCommit mergeTip, final CodeReviewCommit n, final CommitMergeStatus failure)
specifier|static
name|CodeReviewCommit
name|failed
parameter_list|(
specifier|final
name|RevWalk
name|rw
parameter_list|,
specifier|final
name|RevFlag
name|canMergeFlag
parameter_list|,
specifier|final
name|CodeReviewCommit
name|mergeTip
parameter_list|,
specifier|final
name|CodeReviewCommit
name|n
parameter_list|,
specifier|final
name|CommitMergeStatus
name|failure
parameter_list|)
throws|throws
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
throws|,
name|IOException
block|{
name|rw
operator|.
name|resetRetain
argument_list|(
name|canMergeFlag
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markUninteresting
argument_list|(
name|mergeTip
argument_list|)
expr_stmt|;
name|CodeReviewCommit
name|failed
decl_stmt|;
while|while
condition|(
operator|(
name|failed
operator|=
operator|(
name|CodeReviewCommit
operator|)
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|failed
operator|.
name|statusCode
operator|=
name|failure
expr_stmt|;
block|}
return|return
name|failed
return|;
block|}
end_function

begin_function
DECL|method|writeMergeCommit (final ReviewDb reviewDb, final IdentifiedUser.GenericFactory identifiedUserFactory, final PersonIdent myIdent, final RevWalk rw, final ObjectInserter inserter, final RevFlag canMergeFlag, final Branch.NameKey destBranch, final CodeReviewCommit mergeTip, final ObjectId treeId, final CodeReviewCommit n)
specifier|public
specifier|static
name|CodeReviewCommit
name|writeMergeCommit
parameter_list|(
specifier|final
name|ReviewDb
name|reviewDb
parameter_list|,
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
parameter_list|,
specifier|final
name|PersonIdent
name|myIdent
parameter_list|,
specifier|final
name|RevWalk
name|rw
parameter_list|,
specifier|final
name|ObjectInserter
name|inserter
parameter_list|,
specifier|final
name|RevFlag
name|canMergeFlag
parameter_list|,
specifier|final
name|Branch
operator|.
name|NameKey
name|destBranch
parameter_list|,
specifier|final
name|CodeReviewCommit
name|mergeTip
parameter_list|,
specifier|final
name|ObjectId
name|treeId
parameter_list|,
specifier|final
name|CodeReviewCommit
name|n
parameter_list|)
throws|throws
name|IOException
throws|,
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
block|{
specifier|final
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|merged
init|=
operator|new
name|ArrayList
argument_list|<
name|CodeReviewCommit
argument_list|>
argument_list|()
decl_stmt|;
name|rw
operator|.
name|resetRetain
argument_list|(
name|canMergeFlag
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markUninteresting
argument_list|(
name|mergeTip
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|RevCommit
name|c
range|:
name|rw
control|)
block|{
specifier|final
name|CodeReviewCommit
name|crc
init|=
operator|(
name|CodeReviewCommit
operator|)
name|c
decl_stmt|;
if|if
condition|(
name|crc
operator|.
name|patchsetId
operator|!=
literal|null
condition|)
block|{
name|merged
operator|.
name|add
argument_list|(
name|crc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|StringBuilder
name|msgbuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|merged
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|CodeReviewCommit
name|c
init|=
name|merged
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|"Merge \""
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|c
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msgbuf
operator|.
name|append
argument_list|(
literal|"Merge changes "
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|CodeReviewCommit
argument_list|>
name|i
init|=
name|merged
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|abbreviate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|R_HEADS_MASTER
operator|.
name|equals
argument_list|(
name|destBranch
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
literal|" into "
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|destBranch
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|merged
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
literal|"\n\n* changes:\n"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|CodeReviewCommit
name|c
range|:
name|merged
control|)
block|{
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|c
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|PersonIdent
name|authorIdent
init|=
name|computeMergeCommitAuthor
argument_list|(
name|reviewDb
argument_list|,
name|identifiedUserFactory
argument_list|,
name|myIdent
argument_list|,
name|rw
argument_list|,
name|merged
argument_list|)
decl_stmt|;
specifier|final
name|CommitBuilder
name|mergeCommit
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|mergeCommit
operator|.
name|setTreeId
argument_list|(
name|treeId
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setParentIds
argument_list|(
name|mergeTip
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setAuthor
argument_list|(
name|authorIdent
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setCommitter
argument_list|(
name|myIdent
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setMessage
argument_list|(
name|msgbuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|CodeReviewCommit
operator|)
name|rw
operator|.
name|parseCommit
argument_list|(
name|commit
argument_list|(
name|inserter
argument_list|,
name|mergeCommit
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|newThreeWayMerger (final Repository repo, final ObjectInserter inserter, final boolean useContentMerge)
specifier|public
specifier|static
name|ThreeWayMerger
name|newThreeWayMerger
parameter_list|(
specifier|final
name|Repository
name|repo
parameter_list|,
specifier|final
name|ObjectInserter
name|inserter
parameter_list|,
specifier|final
name|boolean
name|useContentMerge
parameter_list|)
block|{
name|ThreeWayMerger
name|m
decl_stmt|;
if|if
condition|(
name|useContentMerge
condition|)
block|{
comment|// Settings for this project allow us to try and
comment|// automatically resolve conflicts within files if needed.
comment|// Use ResolveMerge and instruct to operate in core.
name|m
operator|=
name|MergeStrategy
operator|.
name|RESOLVE
operator|.
name|newMerger
argument_list|(
name|repo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No auto conflict resolving allowed. If any of the
comment|// affected files was modified, merge will fail.
name|m
operator|=
name|MergeStrategy
operator|.
name|SIMPLE_TWO_WAY_IN_CORE
operator|.
name|newMerger
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|setObjectInserter
argument_list|(
operator|new
name|ObjectInserter
operator|.
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ObjectInserter
name|delegate
parameter_list|()
block|{
return|return
name|inserter
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{       }
annotation|@
name|Override
specifier|public
name|void
name|release
parameter_list|()
block|{       }
block|}
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
end_function

begin_function
DECL|method|commit (final ObjectInserter inserter, final CommitBuilder mergeCommit)
specifier|public
specifier|static
name|ObjectId
name|commit
parameter_list|(
specifier|final
name|ObjectInserter
name|inserter
parameter_list|,
specifier|final
name|CommitBuilder
name|mergeCommit
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedEncodingException
block|{
name|ObjectId
name|id
init|=
name|inserter
operator|.
name|insert
argument_list|(
name|mergeCommit
argument_list|)
decl_stmt|;
name|inserter
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|id
return|;
block|}
end_function

begin_function
DECL|method|markCleanMerges (final ReviewDb reviewDb, final RevWalk rw, final RevFlag canMergeFlag, final CodeReviewCommit mergeTip, final Set<RevCommit> alreadyAccepted)
specifier|public
specifier|static
name|PatchSetApproval
name|markCleanMerges
parameter_list|(
specifier|final
name|ReviewDb
name|reviewDb
parameter_list|,
specifier|final
name|RevWalk
name|rw
parameter_list|,
specifier|final
name|RevFlag
name|canMergeFlag
parameter_list|,
specifier|final
name|CodeReviewCommit
name|mergeTip
parameter_list|,
specifier|final
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|alreadyAccepted
parameter_list|)
throws|throws
name|MergeException
block|{
if|if
condition|(
name|mergeTip
operator|==
literal|null
condition|)
block|{
comment|// If mergeTip is null here, branchTip was null, indicating a new branch
comment|// at the start of the merge process. We also elected to merge nothing,
comment|// probably due to missing dependencies. Nothing was cleanly merged.
comment|//
return|return
literal|null
return|;
block|}
try|try
block|{
name|PatchSetApproval
name|submitApproval
init|=
literal|null
decl_stmt|;
name|rw
operator|.
name|resetRetain
argument_list|(
name|canMergeFlag
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|mergeTip
argument_list|)
expr_stmt|;
for|for
control|(
name|RevCommit
name|c
range|:
name|alreadyAccepted
control|)
block|{
name|rw
operator|.
name|markUninteresting
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|CodeReviewCommit
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
operator|(
name|CodeReviewCommit
operator|)
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|patchsetId
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|statusCode
operator|=
name|CommitMergeStatus
operator|.
name|CLEAN_MERGE
expr_stmt|;
if|if
condition|(
name|submitApproval
operator|==
literal|null
condition|)
block|{
name|submitApproval
operator|=
name|getSubmitter
argument_list|(
name|reviewDb
argument_list|,
name|c
operator|.
name|patchsetId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|submitApproval
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot mark clean merges"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

unit|}
end_unit

