begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbTable
operator|.
name|CHANGES
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbChangeState
operator|.
name|PrimaryStorage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_comment
comment|/**  * Implement NoteDb migration stages using {@code gerrit.config}.  *  *<p>This class controls the state of the migration according to options in {@code gerrit.config}.  * In general, any changes to these options should only be made by adventurous administrators, who  * know what they're doing, on non-production data, for the purposes of testing the NoteDb  * implementation. Changing options quite likely requires re-running {@code MigrateToNoteDb}. For  * these reasons, the options remain undocumented.  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|ConfigNotesMigration
specifier|public
class|class
name|ConfigNotesMigration
extends|extends
name|NotesMigration
block|{
DECL|class|Module
specifier|public
specifier|static
class|class
name|Module
extends|extends
name|AbstractModule
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|NotesMigration
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|ConfigNotesMigration
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|SECTION_NOTE_DB
specifier|public
specifier|static
specifier|final
name|String
name|SECTION_NOTE_DB
init|=
literal|"noteDb"
decl_stmt|;
DECL|field|DISABLE_REVIEW_DB
specifier|private
specifier|static
specifier|final
name|String
name|DISABLE_REVIEW_DB
init|=
literal|"disableReviewDb"
decl_stmt|;
DECL|field|FUSE_UPDATES
specifier|private
specifier|static
specifier|final
name|String
name|FUSE_UPDATES
init|=
literal|"fuseUpdates"
decl_stmt|;
DECL|field|PRIMARY_STORAGE
specifier|private
specifier|static
specifier|final
name|String
name|PRIMARY_STORAGE
init|=
literal|"primaryStorage"
decl_stmt|;
DECL|field|READ
specifier|private
specifier|static
specifier|final
name|String
name|READ
init|=
literal|"read"
decl_stmt|;
DECL|field|SEQUENCE
specifier|private
specifier|static
specifier|final
name|String
name|SEQUENCE
init|=
literal|"sequence"
decl_stmt|;
DECL|field|WRITE
specifier|private
specifier|static
specifier|final
name|String
name|WRITE
init|=
literal|"write"
decl_stmt|;
DECL|method|allEnabledConfig ()
specifier|public
specifier|static
name|Config
name|allEnabledConfig
parameter_list|()
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|WRITE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|READ
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|SEQUENCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|PRIMARY_STORAGE
argument_list|,
name|PrimaryStorage
operator|.
name|NOTE_DB
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|DISABLE_REVIEW_DB
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// TODO(dborowitz): Set to true when FileRepository supports it.
name|cfg
operator|.
name|setBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|FUSE_UPDATES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
DECL|method|setConfigValues (Config cfg, NotesMigration migration)
specifier|public
specifier|static
name|void
name|setConfigValues
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|NotesMigration
name|migration
parameter_list|)
block|{
name|cfg
operator|.
name|setBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|WRITE
argument_list|,
name|migration
operator|.
name|rawWriteChangesSetting
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|READ
argument_list|,
name|migration
operator|.
name|readChanges
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|SEQUENCE
argument_list|,
name|migration
operator|.
name|readChangeSequence
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setEnum
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|PRIMARY_STORAGE
argument_list|,
name|migration
operator|.
name|changePrimaryStorage
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|DISABLE_REVIEW_DB
argument_list|,
name|migration
operator|.
name|disableChangeReviewDb
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|FUSE_UPDATES
argument_list|,
name|migration
operator|.
name|fuseUpdates
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|toText (NotesMigration migration)
specifier|public
specifier|static
name|String
name|toText
parameter_list|(
name|NotesMigration
name|migration
parameter_list|)
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|setConfigValues
argument_list|(
name|cfg
argument_list|,
name|migration
argument_list|)
expr_stmt|;
return|return
name|cfg
operator|.
name|toText
argument_list|()
return|;
block|}
DECL|field|writeChanges
specifier|private
specifier|final
name|boolean
name|writeChanges
decl_stmt|;
DECL|field|readChanges
specifier|private
specifier|final
name|boolean
name|readChanges
decl_stmt|;
DECL|field|readChangeSequence
specifier|private
specifier|final
name|boolean
name|readChangeSequence
decl_stmt|;
DECL|field|changePrimaryStorage
specifier|private
specifier|final
name|PrimaryStorage
name|changePrimaryStorage
decl_stmt|;
DECL|field|disableChangeReviewDb
specifier|private
specifier|final
name|boolean
name|disableChangeReviewDb
decl_stmt|;
DECL|field|fuseUpdates
specifier|private
specifier|final
name|boolean
name|fuseUpdates
decl_stmt|;
annotation|@
name|Inject
DECL|method|ConfigNotesMigration (@erritServerConfig Config cfg)
specifier|public
name|ConfigNotesMigration
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|)
block|{
name|writeChanges
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|WRITE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|readChanges
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|READ
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Reading change sequence numbers from NoteDb is not the default even if
comment|// reading changes themselves is. Once this is enabled, it's not easy to
comment|// undo: ReviewDb might hand out numbers that have already been assigned by
comment|// NoteDb. This decision for the default may be reevaluated later.
name|readChangeSequence
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|SEQUENCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|changePrimaryStorage
operator|=
name|cfg
operator|.
name|getEnum
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|PRIMARY_STORAGE
argument_list|,
name|PrimaryStorage
operator|.
name|REVIEW_DB
argument_list|)
expr_stmt|;
name|disableChangeReviewDb
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|DISABLE_REVIEW_DB
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fuseUpdates
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|CHANGES
operator|.
name|key
argument_list|()
argument_list|,
name|FUSE_UPDATES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
operator|(
name|disableChangeReviewDb
operator|&&
name|changePrimaryStorage
operator|!=
name|PrimaryStorage
operator|.
name|NOTE_DB
operator|)
argument_list|,
literal|"cannot disable ReviewDb for changes if default change primary storage is ReviewDb"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rawWriteChangesSetting ()
specifier|public
name|boolean
name|rawWriteChangesSetting
parameter_list|()
block|{
return|return
name|writeChanges
return|;
block|}
annotation|@
name|Override
DECL|method|readChanges ()
specifier|public
name|boolean
name|readChanges
parameter_list|()
block|{
return|return
name|readChanges
return|;
block|}
annotation|@
name|Override
DECL|method|readChangeSequence ()
specifier|public
name|boolean
name|readChangeSequence
parameter_list|()
block|{
return|return
name|readChangeSequence
return|;
block|}
annotation|@
name|Override
DECL|method|changePrimaryStorage ()
specifier|public
name|PrimaryStorage
name|changePrimaryStorage
parameter_list|()
block|{
return|return
name|changePrimaryStorage
return|;
block|}
annotation|@
name|Override
DECL|method|disableChangeReviewDb ()
specifier|public
name|boolean
name|disableChangeReviewDb
parameter_list|()
block|{
return|return
name|disableChangeReviewDb
return|;
block|}
annotation|@
name|Override
DECL|method|fuseUpdates ()
specifier|public
name|boolean
name|fuseUpdates
parameter_list|()
block|{
return|return
name|fuseUpdates
return|;
block|}
block|}
end_class

end_unit

