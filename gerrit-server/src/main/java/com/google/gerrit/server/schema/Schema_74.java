begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupById
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupByIdAud
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_comment
comment|/* Handles copying all entries from AccountGroupIncludes(Audit) to the new tables */
end_comment

begin_class
DECL|class|Schema_74
specifier|public
class|class
name|Schema_74
extends|extends
name|SchemaVersion
block|{
annotation|@
name|Inject
DECL|method|Schema_74 (Provider<Schema_73> prior)
name|Schema_74
parameter_list|(
name|Provider
argument_list|<
name|Schema_73
argument_list|>
name|prior
parameter_list|)
block|{
name|super
argument_list|(
name|prior
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|migrateData (final ReviewDb db, final UpdateUI ui)
specifier|protected
name|void
name|migrateData
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|UpdateUI
name|ui
parameter_list|)
throws|throws
name|SQLException
throws|,
name|OrmException
block|{
comment|// Grab all the groups since we don't have the cache available
name|HashMap
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|,
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|allGroups
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountGroup
name|ag
range|:
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|all
argument_list|()
control|)
block|{
name|allGroups
operator|.
name|put
argument_list|(
name|ag
operator|.
name|getId
argument_list|()
argument_list|,
name|ag
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Initialize some variables
name|ArrayList
argument_list|<
name|AccountGroupById
argument_list|>
name|newIncludes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|AccountGroupByIdAud
argument_list|>
name|newIncludeAudits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Iterate over all entries in account_group_includes
try|try
init|(
name|Statement
name|oldGroupIncludesStmt
init|=
name|newStatement
argument_list|(
name|db
argument_list|)
init|;
name|ResultSet
name|oldGroupIncludes
operator|=
name|oldGroupIncludesStmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM account_group_includes"
argument_list|)
init|)
block|{
while|while
condition|(
name|oldGroupIncludes
operator|.
name|next
argument_list|()
condition|)
block|{
name|AccountGroup
operator|.
name|Id
name|oldGroupId
init|=
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|oldGroupIncludes
operator|.
name|getInt
argument_list|(
literal|"group_id"
argument_list|)
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|Id
name|oldIncludeId
init|=
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|oldGroupIncludes
operator|.
name|getInt
argument_list|(
literal|"include_id"
argument_list|)
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|uuidFromIncludeId
init|=
name|allGroups
operator|.
name|get
argument_list|(
name|oldIncludeId
argument_list|)
decl_stmt|;
comment|// If we've got an include, but the group no longer exists, don't bother converting
if|if
condition|(
name|uuidFromIncludeId
operator|==
literal|null
condition|)
block|{
name|ui
operator|.
name|message
argument_list|(
literal|"Skipping group_id = \""
operator|+
name|oldIncludeId
operator|.
name|get
argument_list|()
operator|+
literal|"\", not a current group"
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Create the new include entry
name|AccountGroupById
name|destIncludeEntry
init|=
operator|new
name|AccountGroupById
argument_list|(
operator|new
name|AccountGroupById
operator|.
name|Key
argument_list|(
name|oldGroupId
argument_list|,
name|uuidFromIncludeId
argument_list|)
argument_list|)
decl_stmt|;
comment|// Iterate over all the audits (for this group)
try|try
init|(
name|PreparedStatement
name|oldAuditsQueryStmt
init|=
name|prepareStatement
argument_list|(
name|db
argument_list|,
literal|"SELECT * FROM account_group_includes_audit WHERE group_id=? AND include_id=?"
argument_list|)
init|)
block|{
name|oldAuditsQueryStmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|oldGroupId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|oldAuditsQueryStmt
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|oldIncludeId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|oldGroupIncludeAudits
init|=
name|oldAuditsQueryStmt
operator|.
name|executeQuery
argument_list|()
init|)
block|{
while|while
condition|(
name|oldGroupIncludeAudits
operator|.
name|next
argument_list|()
condition|)
block|{
name|Account
operator|.
name|Id
name|addedBy
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|oldGroupIncludeAudits
operator|.
name|getInt
argument_list|(
literal|"added_by"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|removedBy
init|=
name|oldGroupIncludeAudits
operator|.
name|getInt
argument_list|(
literal|"removed_by"
argument_list|)
decl_stmt|;
comment|// Create the new audit entry
name|AccountGroupByIdAud
name|destAuditEntry
init|=
operator|new
name|AccountGroupByIdAud
argument_list|(
name|destIncludeEntry
argument_list|,
name|addedBy
argument_list|,
name|oldGroupIncludeAudits
operator|.
name|getTimestamp
argument_list|(
literal|"added_on"
argument_list|)
argument_list|)
decl_stmt|;
comment|// If this was a "removed on" entry, note that
if|if
condition|(
name|removedBy
operator|>
literal|0
condition|)
block|{
name|destAuditEntry
operator|.
name|removed
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|removedBy
argument_list|)
argument_list|,
name|oldGroupIncludeAudits
operator|.
name|getTimestamp
argument_list|(
literal|"removed_on"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newIncludeAudits
operator|.
name|add
argument_list|(
name|destAuditEntry
argument_list|)
expr_stmt|;
block|}
block|}
name|newIncludes
operator|.
name|add
argument_list|(
name|destIncludeEntry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Now insert all of the new entries to the database
name|db
operator|.
name|accountGroupById
argument_list|()
operator|.
name|insert
argument_list|(
name|newIncludes
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountGroupByIdAud
argument_list|()
operator|.
name|insert
argument_list|(
name|newIncludeAudits
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

