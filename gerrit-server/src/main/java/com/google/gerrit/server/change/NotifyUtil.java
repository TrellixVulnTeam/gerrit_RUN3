begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|joining
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RecipientType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountResolver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|NotifyUtil
specifier|public
class|class
name|NotifyUtil
block|{
DECL|field|dbProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
decl_stmt|;
DECL|field|accountResolver
specifier|private
specifier|final
name|AccountResolver
name|accountResolver
decl_stmt|;
annotation|@
name|Inject
DECL|method|NotifyUtil (Provider<ReviewDb> dbProvider, AccountResolver accountResolver)
name|NotifyUtil
parameter_list|(
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
parameter_list|,
name|AccountResolver
name|accountResolver
parameter_list|)
block|{
name|this
operator|.
name|dbProvider
operator|=
name|dbProvider
expr_stmt|;
name|this
operator|.
name|accountResolver
operator|=
name|accountResolver
expr_stmt|;
block|}
DECL|method|shouldNotify (NotifyHandling notify, @Nullable Map<RecipientType, NotifyInfo> notifyDetails)
specifier|public
specifier|static
name|boolean
name|shouldNotify
parameter_list|(
name|NotifyHandling
name|notify
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|RecipientType
argument_list|,
name|NotifyInfo
argument_list|>
name|notifyDetails
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|notifyDetails
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|notify
operator|.
name|compareTo
argument_list|(
name|NotifyHandling
operator|.
name|NONE
argument_list|)
operator|>
literal|0
return|;
block|}
DECL|method|isNullOrEmpty ( @ullable Map<RecipientType, NotifyInfo> notifyDetails)
specifier|private
specifier|static
name|boolean
name|isNullOrEmpty
parameter_list|(
annotation|@
name|Nullable
name|Map
argument_list|<
name|RecipientType
argument_list|,
name|NotifyInfo
argument_list|>
name|notifyDetails
parameter_list|)
block|{
if|if
condition|(
name|notifyDetails
operator|==
literal|null
operator|||
name|notifyDetails
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|NotifyInfo
name|notifyInfo
range|:
name|notifyDetails
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|notifyInfo
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|isEmpty (NotifyInfo notifyInfo)
specifier|private
specifier|static
name|boolean
name|isEmpty
parameter_list|(
name|NotifyInfo
name|notifyInfo
parameter_list|)
block|{
return|return
name|notifyInfo
operator|.
name|accounts
operator|==
literal|null
operator|||
name|notifyInfo
operator|.
name|accounts
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|resolveAccounts ( @ullable Map<RecipientType, NotifyInfo> notifyDetails)
specifier|public
name|ListMultimap
argument_list|<
name|RecipientType
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|resolveAccounts
parameter_list|(
annotation|@
name|Nullable
name|Map
argument_list|<
name|RecipientType
argument_list|,
name|NotifyInfo
argument_list|>
name|notifyDetails
parameter_list|)
throws|throws
name|OrmException
throws|,
name|BadRequestException
block|{
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|notifyDetails
argument_list|)
condition|)
block|{
return|return
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
return|;
block|}
name|ListMultimap
argument_list|<
name|RecipientType
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|m
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|RecipientType
argument_list|,
name|NotifyInfo
argument_list|>
name|e
range|:
name|notifyDetails
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|accounts
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|accounts
decl_stmt|;
if|if
condition|(
name|accounts
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|m
operator|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|m
operator|.
name|putAll
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|find
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
argument_list|,
name|accounts
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|m
operator|!=
literal|null
condition|?
name|m
else|:
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
return|;
block|}
DECL|method|find (ReviewDb db, List<String> nameOrEmails)
specifier|private
name|List
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|find
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|nameOrEmails
parameter_list|)
throws|throws
name|OrmException
throws|,
name|BadRequestException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|missing
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nameOrEmails
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nameOrEmails
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|nameOrEmail
range|:
name|nameOrEmails
control|)
block|{
name|Account
name|a
init|=
name|accountResolver
operator|.
name|find
argument_list|(
name|db
argument_list|,
name|nameOrEmail
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|missing
operator|.
name|add
argument_list|(
name|nameOrEmail
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|missing
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"The following accounts that should be notified could not be resolved: "
operator|+
name|missing
operator|.
name|stream
argument_list|()
operator|.
name|distinct
argument_list|()
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|r
return|;
block|}
block|}
end_class

end_unit

