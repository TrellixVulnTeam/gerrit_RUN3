begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git.gpg
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|gpg
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ReceivePackInitializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|BouncyCastleUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PreReceiveHookChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceivePack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|SignedPushConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_class
DECL|class|SignedPushModule
specifier|public
class|class
name|SignedPushModule
extends|extends
name|AbstractModule
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SignedPushModule
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|isEnabled (Config cfg)
specifier|public
specifier|static
name|boolean
name|isEnabled
parameter_list|(
name|Config
name|cfg
parameter_list|)
block|{
return|return
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"receive"
argument_list|,
literal|null
argument_list|,
literal|"enableSignedPush"
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|configure ()
specifier|protected
name|void
name|configure
parameter_list|()
block|{
if|if
condition|(
operator|!
name|BouncyCastleUtil
operator|.
name|havePGP
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"BouncyCastle PGP not installed; signed push verification is"
operator|+
literal|" disabled"
argument_list|)
expr_stmt|;
return|return;
block|}
name|bind
argument_list|(
name|PublicKeyChecker
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|GerritPublicKeyChecker
operator|.
name|class
argument_list|)
expr_stmt|;
name|DynamicSet
operator|.
name|bind
argument_list|(
name|binder
argument_list|()
argument_list|,
name|ReceivePackInitializer
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|Initializer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Singleton
DECL|class|Initializer
specifier|private
specifier|static
class|class
name|Initializer
implements|implements
name|ReceivePackInitializer
block|{
DECL|field|signedPushConfig
specifier|private
specifier|final
name|SignedPushConfig
name|signedPushConfig
decl_stmt|;
DECL|field|hook
specifier|private
specifier|final
name|SignedPushPreReceiveHook
name|hook
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
annotation|@
name|Inject
DECL|method|Initializer (@erritServerConfig Config cfg, SignedPushPreReceiveHook hook, ProjectCache projectCache)
name|Initializer
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|SignedPushPreReceiveHook
name|hook
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|)
block|{
name|this
operator|.
name|hook
operator|=
name|hook
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
if|if
condition|(
name|isEnabled
argument_list|(
name|cfg
argument_list|)
condition|)
block|{
name|String
name|seed
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"receive"
argument_list|,
literal|null
argument_list|,
literal|"certNonceSeed"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|seed
argument_list|)
condition|)
block|{
name|seed
operator|=
name|randomString
argument_list|(
literal|64
argument_list|)
expr_stmt|;
block|}
name|signedPushConfig
operator|=
operator|new
name|SignedPushConfig
argument_list|()
expr_stmt|;
name|signedPushConfig
operator|.
name|setCertNonceSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|signedPushConfig
operator|.
name|setCertNonceSlopLimit
argument_list|(
name|cfg
operator|.
name|getInt
argument_list|(
literal|"receive"
argument_list|,
literal|null
argument_list|,
literal|"certNonceSlop"
argument_list|,
literal|5
operator|*
literal|60
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|signedPushConfig
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|init (Project.NameKey project, ReceivePack rp)
specifier|public
name|void
name|init
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|ReceivePack
name|rp
parameter_list|)
block|{
name|ProjectState
name|ps
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|project
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ps
operator|.
name|isEnableSignedPush
argument_list|()
condition|)
block|{
name|rp
operator|.
name|setSignedPushConfig
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|signedPushConfig
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"receive.enableSignedPush is true for project {} but"
operator|+
literal|" false in gerrit.config, so signed push verification is"
operator|+
literal|" disabled"
argument_list|,
name|project
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rp
operator|.
name|setSignedPushConfig
argument_list|(
name|signedPushConfig
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setPreReceiveHook
argument_list|(
name|PreReceiveHookChain
operator|.
name|newChain
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|hook
argument_list|,
name|rp
operator|.
name|getPreReceiveHook
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomString (int len)
specifier|private
specifier|static
name|String
name|randomString
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|Random
name|random
decl_stmt|;
try|try
block|{
name|random
operator|=
name|SecureRandom
operator|.
name|getInstance
argument_list|(
literal|"SHA1PRNG"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

