begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|RefConfigSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|InvalidNameException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|InternalUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|dk
operator|.
name|brics
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Manages access control for Git references (aka branches, tags). */
end_comment

begin_class
DECL|class|RefControl
specifier|public
class|class
name|RefControl
block|{
DECL|field|projectControl
specifier|private
specifier|final
name|ProjectControl
name|projectControl
decl_stmt|;
DECL|field|refName
specifier|private
specifier|final
name|String
name|refName
decl_stmt|;
comment|/** All permissions that apply to this reference. */
DECL|field|relevant
specifier|private
specifier|final
name|PermissionCollection
name|relevant
decl_stmt|;
comment|/** Cached set of permissions matching this user. */
DECL|field|effective
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
argument_list|>
name|effective
decl_stmt|;
DECL|field|owner
specifier|private
name|Boolean
name|owner
decl_stmt|;
DECL|field|canForgeAuthor
specifier|private
name|Boolean
name|canForgeAuthor
decl_stmt|;
DECL|field|canForgeCommitter
specifier|private
name|Boolean
name|canForgeCommitter
decl_stmt|;
DECL|method|RefControl (ProjectControl projectControl, String ref, PermissionCollection relevant)
name|RefControl
parameter_list|(
name|ProjectControl
name|projectControl
parameter_list|,
name|String
name|ref
parameter_list|,
name|PermissionCollection
name|relevant
parameter_list|)
block|{
name|this
operator|.
name|projectControl
operator|=
name|projectControl
expr_stmt|;
name|this
operator|.
name|refName
operator|=
name|ref
expr_stmt|;
name|this
operator|.
name|relevant
operator|=
name|relevant
expr_stmt|;
name|this
operator|.
name|effective
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|getRefName ()
specifier|public
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|refName
return|;
block|}
DECL|method|getProjectControl ()
specifier|public
name|ProjectControl
name|getProjectControl
parameter_list|()
block|{
return|return
name|projectControl
return|;
block|}
DECL|method|getCurrentUser ()
specifier|public
name|CurrentUser
name|getCurrentUser
parameter_list|()
block|{
return|return
name|projectControl
operator|.
name|getCurrentUser
argument_list|()
return|;
block|}
DECL|method|forUser (CurrentUser who)
specifier|public
name|RefControl
name|forUser
parameter_list|(
name|CurrentUser
name|who
parameter_list|)
block|{
name|ProjectControl
name|newCtl
init|=
name|projectControl
operator|.
name|forUser
argument_list|(
name|who
argument_list|)
decl_stmt|;
if|if
condition|(
name|relevant
operator|.
name|isUserSpecific
argument_list|()
condition|)
block|{
return|return
name|newCtl
operator|.
name|controlForRef
argument_list|(
name|getRefName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|RefControl
argument_list|(
name|newCtl
argument_list|,
name|getRefName
argument_list|()
argument_list|,
name|relevant
argument_list|)
return|;
block|}
block|}
comment|/** Is this user a ref owner? */
DECL|method|isOwner ()
specifier|public
name|boolean
name|isOwner
parameter_list|()
block|{
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|canPerform
argument_list|(
name|Permission
operator|.
name|OWNER
argument_list|)
condition|)
block|{
name|owner
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|owner
operator|=
name|projectControl
operator|.
name|isOwner
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|owner
return|;
block|}
comment|/** Can this user see this reference exists? */
DECL|method|isVisible ()
specifier|public
name|boolean
name|isVisible
parameter_list|()
block|{
return|return
operator|(
name|getCurrentUser
argument_list|()
operator|instanceof
name|InternalUser
operator|||
name|canPerform
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|)
operator|&&
name|canRead
argument_list|()
return|;
block|}
comment|/**    * Determines whether the user can upload a change to the ref controlled by    * this object.    *    * @return {@code true} if the user specified can upload a change to the Git    *         ref    */
DECL|method|canUpload ()
specifier|public
name|boolean
name|canUpload
parameter_list|()
block|{
return|return
name|projectControl
operator|.
name|controlForRef
argument_list|(
literal|"refs/for/"
operator|+
name|getRefName
argument_list|()
argument_list|)
operator|.
name|canPerform
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|&&
name|canWrite
argument_list|()
return|;
block|}
comment|/** @return true if this user can submit merge patch sets to this ref */
DECL|method|canUploadMerges ()
specifier|public
name|boolean
name|canUploadMerges
parameter_list|()
block|{
return|return
name|projectControl
operator|.
name|controlForRef
argument_list|(
literal|"refs/for/"
operator|+
name|getRefName
argument_list|()
argument_list|)
operator|.
name|canPerform
argument_list|(
name|Permission
operator|.
name|PUSH_MERGE
argument_list|)
operator|&&
name|canWrite
argument_list|()
return|;
block|}
comment|/** @return true if this user can rebase changes on this ref */
DECL|method|canRebase ()
specifier|public
name|boolean
name|canRebase
parameter_list|()
block|{
return|return
name|canPerform
argument_list|(
name|Permission
operator|.
name|REBASE
argument_list|)
operator|&&
name|canWrite
argument_list|()
return|;
block|}
comment|/** @return true if this user can submit patch sets to this ref */
DECL|method|canSubmit ()
specifier|public
name|boolean
name|canSubmit
parameter_list|()
block|{
if|if
condition|(
name|GitRepositoryManager
operator|.
name|REF_CONFIG
operator|.
name|equals
argument_list|(
name|refName
argument_list|)
condition|)
block|{
comment|// Always allow project owners to submit configuration changes.
comment|// Submitting configuration changes modifies the access control
comment|// rules. Allowing this to be done by a non-project-owner opens
comment|// a security hole enabling editing of access rules, and thus
comment|// granting of powers beyond submitting to the configuration.
return|return
name|projectControl
operator|.
name|isOwner
argument_list|()
return|;
block|}
return|return
name|canPerform
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
operator|&&
name|canWrite
argument_list|()
return|;
block|}
comment|/** @return true if the user can update the reference as a fast-forward. */
DECL|method|canUpdate ()
specifier|public
name|boolean
name|canUpdate
parameter_list|()
block|{
if|if
condition|(
name|GitRepositoryManager
operator|.
name|REF_CONFIG
operator|.
name|equals
argument_list|(
name|refName
argument_list|)
operator|&&
operator|!
name|projectControl
operator|.
name|isOwner
argument_list|()
condition|)
block|{
comment|// Pushing requires being at least project owner, in addition to push.
comment|// Pushing configuration changes modifies the access control
comment|// rules. Allowing this to be done by a non-project-owner opens
comment|// a security hole enabling editing of access rules, and thus
comment|// granting of powers beyond pushing to the configuration.
comment|// On the AllProjects project the owner access right cannot be assigned,
comment|// this why for the AllProjects project we allow administrators to push
comment|// configuration changes if they have push without being project owner.
if|if
condition|(
operator|!
operator|(
name|projectControl
operator|.
name|getProjectState
argument_list|()
operator|.
name|isAllProjects
argument_list|()
operator|&&
name|getCurrentUser
argument_list|()
operator|.
name|getCapabilities
argument_list|()
operator|.
name|canAdministrateServer
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|canPerform
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|&&
name|canWrite
argument_list|()
return|;
block|}
comment|/** @return true if the user can rewind (force push) the reference. */
DECL|method|canForceUpdate ()
specifier|public
name|boolean
name|canForceUpdate
parameter_list|()
block|{
return|return
operator|(
name|canPushWithForce
argument_list|()
operator|||
name|canDelete
argument_list|()
operator|)
operator|&&
name|canWrite
argument_list|()
return|;
block|}
DECL|method|canWrite ()
specifier|public
name|boolean
name|canWrite
parameter_list|()
block|{
return|return
name|getProjectControl
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|Project
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
return|;
block|}
DECL|method|canRead ()
specifier|public
name|boolean
name|canRead
parameter_list|()
block|{
return|return
name|getProjectControl
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|Project
operator|.
name|State
operator|.
name|READ_ONLY
argument_list|)
operator|||
name|canWrite
argument_list|()
return|;
block|}
DECL|method|canPushWithForce ()
specifier|private
name|boolean
name|canPushWithForce
parameter_list|()
block|{
if|if
condition|(
operator|!
name|canWrite
argument_list|()
operator|||
operator|(
name|GitRepositoryManager
operator|.
name|REF_CONFIG
operator|.
name|equals
argument_list|(
name|refName
argument_list|)
operator|&&
operator|!
name|projectControl
operator|.
name|isOwner
argument_list|()
operator|)
condition|)
block|{
comment|// Pushing requires being at least project owner, in addition to push.
comment|// Pushing configuration changes modifies the access control
comment|// rules. Allowing this to be done by a non-project-owner opens
comment|// a security hole enabling editing of access rules, and thus
comment|// granting of powers beyond pushing to the configuration.
return|return
literal|false
return|;
block|}
name|boolean
name|result
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PermissionRule
name|rule
range|:
name|access
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
control|)
block|{
if|if
condition|(
name|rule
operator|.
name|isBlock
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|rule
operator|.
name|getForce
argument_list|()
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Determines whether the user can create a new Git ref.    *    * @param rw revision pool {@code object} was parsed in.    * @param object the object the user will start the reference with.    * @return {@code true} if the user specified can create a new Git ref    */
DECL|method|canCreate (RevWalk rw, RevObject object)
specifier|public
name|boolean
name|canCreate
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|RevObject
name|object
parameter_list|)
block|{
if|if
condition|(
operator|!
name|canWrite
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|owner
decl_stmt|;
switch|switch
condition|(
name|getCurrentUser
argument_list|()
operator|.
name|getAccessPath
argument_list|()
condition|)
block|{
case|case
name|REST_API
case|:
name|owner
operator|=
name|isOwner
argument_list|()
expr_stmt|;
break|break;
default|default:
name|owner
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|RevCommit
condition|)
block|{
return|return
name|owner
operator|||
name|canPerform
argument_list|(
name|Permission
operator|.
name|CREATE
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|RevTag
condition|)
block|{
specifier|final
name|RevTag
name|tag
init|=
operator|(
name|RevTag
operator|)
name|object
decl_stmt|;
try|try
block|{
name|rw
operator|.
name|parseBody
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|// If tagger is present, require it matches the user's email.
comment|//
specifier|final
name|PersonIdent
name|tagger
init|=
name|tag
operator|.
name|getTaggerIdent
argument_list|()
decl_stmt|;
if|if
condition|(
name|tagger
operator|!=
literal|null
condition|)
block|{
name|boolean
name|valid
decl_stmt|;
if|if
condition|(
name|getCurrentUser
argument_list|()
operator|instanceof
name|IdentifiedUser
condition|)
block|{
specifier|final
name|IdentifiedUser
name|user
init|=
operator|(
name|IdentifiedUser
operator|)
name|getCurrentUser
argument_list|()
decl_stmt|;
specifier|final
name|String
name|addr
init|=
name|tagger
operator|.
name|getEmailAddress
argument_list|()
decl_stmt|;
name|valid
operator|=
name|user
operator|.
name|getEmailAddresses
argument_list|()
operator|.
name|contains
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|valid
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|valid
operator|&&
operator|!
name|owner
operator|&&
operator|!
name|canForgeCommitter
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// If the tag has a PGP signature, allow a lower level of permission
comment|// than if it doesn't have a PGP signature.
comment|//
if|if
condition|(
name|tag
operator|.
name|getFullMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-----BEGIN PGP SIGNATURE-----\n"
argument_list|)
condition|)
block|{
return|return
name|owner
operator|||
name|canPerform
argument_list|(
name|Permission
operator|.
name|PUSH_TAG
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|owner
operator|||
name|canPerform
argument_list|(
name|Permission
operator|.
name|PUSH_TAG
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Determines whether the user can delete the Git ref controlled by this    * object.    *    * @return {@code true} if the user specified can delete a Git ref.    */
DECL|method|canDelete ()
specifier|public
name|boolean
name|canDelete
parameter_list|()
block|{
if|if
condition|(
operator|!
name|canWrite
argument_list|()
operator|||
operator|(
name|GitRepositoryManager
operator|.
name|REF_CONFIG
operator|.
name|equals
argument_list|(
name|refName
argument_list|)
operator|)
condition|)
block|{
comment|// Never allow removal of the refs/meta/config branch.
comment|// Deleting the branch would destroy all Gerrit specific
comment|// metadata about the project, including its access rules.
comment|// If a project is to be removed from Gerrit, its repository
comment|// should be removed first.
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|getCurrentUser
argument_list|()
operator|.
name|getAccessPath
argument_list|()
condition|)
block|{
case|case
name|REST_API
case|:
return|return
name|isOwner
argument_list|()
operator|||
name|canPushWithForce
argument_list|()
return|;
case|case
name|GIT
case|:
return|return
name|canPushWithForce
argument_list|()
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
comment|/** @return true if this user can forge the author line in a commit. */
DECL|method|canForgeAuthor ()
specifier|public
name|boolean
name|canForgeAuthor
parameter_list|()
block|{
if|if
condition|(
name|canForgeAuthor
operator|==
literal|null
condition|)
block|{
name|canForgeAuthor
operator|=
name|canPerform
argument_list|(
name|Permission
operator|.
name|FORGE_AUTHOR
argument_list|)
expr_stmt|;
block|}
return|return
name|canForgeAuthor
return|;
block|}
comment|/** @return true if this user can forge the committer line in a commit. */
DECL|method|canForgeCommitter ()
specifier|public
name|boolean
name|canForgeCommitter
parameter_list|()
block|{
if|if
condition|(
name|canForgeCommitter
operator|==
literal|null
condition|)
block|{
name|canForgeCommitter
operator|=
name|canPerform
argument_list|(
name|Permission
operator|.
name|FORGE_COMMITTER
argument_list|)
expr_stmt|;
block|}
return|return
name|canForgeCommitter
return|;
block|}
comment|/** @return true if this user can forge the server on the committer line. */
DECL|method|canForgeGerritServerIdentity ()
specifier|public
name|boolean
name|canForgeGerritServerIdentity
parameter_list|()
block|{
return|return
name|canPerform
argument_list|(
name|Permission
operator|.
name|FORGE_SERVER
argument_list|)
return|;
block|}
comment|/** @return true if this user can abandon a change for this ref */
DECL|method|canAbandon ()
specifier|public
name|boolean
name|canAbandon
parameter_list|()
block|{
return|return
name|canPerform
argument_list|(
name|Permission
operator|.
name|ABANDON
argument_list|)
return|;
block|}
comment|/** @return true if this user can remove a reviewer for a change. */
DECL|method|canRemoveReviewer ()
specifier|public
name|boolean
name|canRemoveReviewer
parameter_list|()
block|{
return|return
name|canPerform
argument_list|(
name|Permission
operator|.
name|REMOVE_REVIEWER
argument_list|)
return|;
block|}
comment|/** All value ranges of any allowed label permission. */
DECL|method|getLabelRanges ()
specifier|public
name|List
argument_list|<
name|PermissionRange
argument_list|>
name|getLabelRanges
parameter_list|()
block|{
name|List
argument_list|<
name|PermissionRange
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|PermissionRange
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
argument_list|>
name|e
range|:
name|relevant
operator|.
name|getDeclaredPermissions
argument_list|()
control|)
block|{
if|if
condition|(
name|Permission
operator|.
name|isLabel
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|min
init|=
literal|0
decl_stmt|;
name|int
name|max
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PermissionRule
name|rule
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|projectControl
operator|.
name|match
argument_list|(
name|rule
argument_list|)
condition|)
block|{
name|min
operator|=
name|Math
operator|.
name|min
argument_list|(
name|min
argument_list|,
name|rule
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|rule
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|min
operator|!=
literal|0
operator|||
name|max
operator|!=
literal|0
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
operator|new
name|PermissionRange
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|r
return|;
block|}
comment|/** The range of permitted values associated with a label permission. */
DECL|method|getRange (String permission)
specifier|public
name|PermissionRange
name|getRange
parameter_list|(
name|String
name|permission
parameter_list|)
block|{
if|if
condition|(
name|Permission
operator|.
name|isLabel
argument_list|(
name|permission
argument_list|)
condition|)
block|{
return|return
name|toRange
argument_list|(
name|permission
argument_list|,
name|access
argument_list|(
name|permission
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|toRange (String permissionName, List<PermissionRule> ruleList)
specifier|private
specifier|static
name|PermissionRange
name|toRange
parameter_list|(
name|String
name|permissionName
parameter_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|ruleList
parameter_list|)
block|{
name|int
name|min
init|=
literal|0
decl_stmt|;
name|int
name|max
init|=
literal|0
decl_stmt|;
name|int
name|blockMin
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
name|int
name|blockMax
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|PermissionRule
name|rule
range|:
name|ruleList
control|)
block|{
if|if
condition|(
name|rule
operator|.
name|isBlock
argument_list|()
condition|)
block|{
name|blockMin
operator|=
name|Math
operator|.
name|max
argument_list|(
name|blockMin
argument_list|,
name|rule
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|blockMax
operator|=
name|Math
operator|.
name|min
argument_list|(
name|blockMax
argument_list|,
name|rule
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|min
operator|=
name|Math
operator|.
name|min
argument_list|(
name|min
argument_list|,
name|rule
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|rule
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|blockMin
operator|>
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
name|min
operator|=
name|Math
operator|.
name|max
argument_list|(
name|min
argument_list|,
name|blockMin
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blockMax
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|max
operator|=
name|Math
operator|.
name|min
argument_list|(
name|max
argument_list|,
name|blockMax
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PermissionRange
argument_list|(
name|permissionName
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/** True if the user has this permission. Works only for non labels. */
DECL|method|canPerform (String permissionName)
name|boolean
name|canPerform
parameter_list|(
name|String
name|permissionName
parameter_list|)
block|{
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|access
init|=
name|access
argument_list|(
name|permissionName
argument_list|)
decl_stmt|;
for|for
control|(
name|PermissionRule
name|rule
range|:
name|access
control|)
block|{
if|if
condition|(
name|rule
operator|.
name|isBlock
argument_list|()
operator|&&
operator|!
name|rule
operator|.
name|getForce
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
operator|!
name|access
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/** Rules for the given permission, or the empty list. */
DECL|method|access (String permissionName)
specifier|private
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|access
parameter_list|(
name|String
name|permissionName
parameter_list|)
block|{
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|rules
init|=
name|effective
operator|.
name|get
argument_list|(
name|permissionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|rules
operator|!=
literal|null
condition|)
block|{
return|return
name|rules
return|;
block|}
name|rules
operator|=
name|relevant
operator|.
name|getPermission
argument_list|(
name|permissionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|rules
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|effective
operator|.
name|put
argument_list|(
name|permissionName
argument_list|,
name|rules
argument_list|)
expr_stmt|;
return|return
name|rules
return|;
block|}
if|if
condition|(
name|rules
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|projectControl
operator|.
name|match
argument_list|(
name|rules
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|rules
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|effective
operator|.
name|put
argument_list|(
name|permissionName
argument_list|,
name|rules
argument_list|)
expr_stmt|;
return|return
name|rules
return|;
block|}
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|mine
init|=
operator|new
name|ArrayList
argument_list|<
name|PermissionRule
argument_list|>
argument_list|(
name|rules
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PermissionRule
name|rule
range|:
name|rules
control|)
block|{
if|if
condition|(
name|projectControl
operator|.
name|match
argument_list|(
name|rule
argument_list|)
condition|)
block|{
name|mine
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mine
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mine
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|effective
operator|.
name|put
argument_list|(
name|permissionName
argument_list|,
name|mine
argument_list|)
expr_stmt|;
return|return
name|mine
return|;
block|}
DECL|method|isRE (String refPattern)
specifier|public
specifier|static
name|boolean
name|isRE
parameter_list|(
name|String
name|refPattern
parameter_list|)
block|{
return|return
name|refPattern
operator|.
name|startsWith
argument_list|(
name|AccessSection
operator|.
name|REGEX_PREFIX
argument_list|)
return|;
block|}
DECL|method|shortestExample (String pattern)
specifier|public
specifier|static
name|String
name|shortestExample
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|isRE
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
comment|// Since Brics will substitute dot [.] with \0 when generating
comment|// shortest example, any usage of dot will fail in
comment|// Repository.isValidRefName() if not combined with star [*].
comment|// To get around this, we substitute the \0 with an arbitrary
comment|// accepted character.
return|return
name|toRegExp
argument_list|(
name|pattern
argument_list|)
operator|.
name|toAutomaton
argument_list|()
operator|.
name|getShortestExample
argument_list|(
literal|true
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\0'
argument_list|,
literal|'-'
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pattern
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
return|return
name|pattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pattern
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|'1'
return|;
block|}
else|else
block|{
return|return
name|pattern
return|;
block|}
block|}
DECL|method|toRegExp (String refPattern)
specifier|public
specifier|static
name|RegExp
name|toRegExp
parameter_list|(
name|String
name|refPattern
parameter_list|)
block|{
if|if
condition|(
name|isRE
argument_list|(
name|refPattern
argument_list|)
condition|)
block|{
name|refPattern
operator|=
name|refPattern
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RegExp
argument_list|(
name|refPattern
argument_list|,
name|RegExp
operator|.
name|NONE
argument_list|)
return|;
block|}
DECL|method|validateRefPattern (String refPattern)
specifier|public
specifier|static
name|void
name|validateRefPattern
parameter_list|(
name|String
name|refPattern
parameter_list|)
throws|throws
name|InvalidNameException
block|{
if|if
condition|(
name|refPattern
operator|.
name|startsWith
argument_list|(
name|RefConfigSection
operator|.
name|REGEX_PREFIX
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|Repository
operator|.
name|isValidRefName
argument_list|(
name|RefControl
operator|.
name|shortestExample
argument_list|(
name|refPattern
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidNameException
argument_list|(
name|refPattern
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|refPattern
operator|.
name|equals
argument_list|(
name|RefConfigSection
operator|.
name|ALL
argument_list|)
condition|)
block|{
comment|// This is a special case we have to allow, it fails below.
block|}
elseif|else
if|if
condition|(
name|refPattern
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
name|String
name|prefix
init|=
name|refPattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|refPattern
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Repository
operator|.
name|isValidRefName
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidNameException
argument_list|(
name|refPattern
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|Repository
operator|.
name|isValidRefName
argument_list|(
name|refPattern
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidNameException
argument_list|(
name|refPattern
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

