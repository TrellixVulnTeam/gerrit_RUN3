begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
operator|.
name|OWN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
operator|.
name|PUSH_HEAD
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
operator|.
name|PUSH_HEAD_CREATE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
operator|.
name|PUSH_HEAD_REPLACE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
operator|.
name|PUSH_HEAD_UPDATE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
operator|.
name|PUSH_TAG
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
operator|.
name|PUSH_TAG_ANNOTATED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
operator|.
name|PUSH_TAG_ANY
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
operator|.
name|PUSH_TAG_SIGNED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
operator|.
name|READ
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|RefRight
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** Manages access control for Git references (aka branches, tags). */
end_comment

begin_class
DECL|class|RefControl
specifier|public
class|class
name|RefControl
block|{
DECL|field|projectControl
specifier|private
specifier|final
name|ProjectControl
name|projectControl
decl_stmt|;
DECL|field|refName
specifier|private
specifier|final
name|String
name|refName
decl_stmt|;
DECL|method|RefControl (final ProjectControl projectControl, final String refName)
name|RefControl
parameter_list|(
specifier|final
name|ProjectControl
name|projectControl
parameter_list|,
specifier|final
name|String
name|refName
parameter_list|)
block|{
name|this
operator|.
name|projectControl
operator|=
name|projectControl
expr_stmt|;
name|this
operator|.
name|refName
operator|=
name|refName
expr_stmt|;
block|}
DECL|method|getRefName ()
specifier|public
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|refName
return|;
block|}
DECL|method|getProjectControl ()
specifier|public
name|ProjectControl
name|getProjectControl
parameter_list|()
block|{
return|return
name|projectControl
return|;
block|}
DECL|method|getCurrentUser ()
specifier|public
name|CurrentUser
name|getCurrentUser
parameter_list|()
block|{
return|return
name|getProjectControl
argument_list|()
operator|.
name|getCurrentUser
argument_list|()
return|;
block|}
DECL|method|forAnonymousUser ()
specifier|public
name|RefControl
name|forAnonymousUser
parameter_list|()
block|{
return|return
name|getProjectControl
argument_list|()
operator|.
name|forAnonymousUser
argument_list|()
operator|.
name|controlForRef
argument_list|(
name|getRefName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|forUser (final CurrentUser who)
specifier|public
name|RefControl
name|forUser
parameter_list|(
specifier|final
name|CurrentUser
name|who
parameter_list|)
block|{
return|return
name|getProjectControl
argument_list|()
operator|.
name|forUser
argument_list|(
name|who
argument_list|)
operator|.
name|controlForRef
argument_list|(
name|getRefName
argument_list|()
argument_list|)
return|;
block|}
comment|/** Is this user a ref owner? */
DECL|method|isOwner ()
specifier|public
name|boolean
name|isOwner
parameter_list|()
block|{
return|return
name|canPerform
argument_list|(
name|OWN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|||
name|getProjectControl
argument_list|()
operator|.
name|isOwner
argument_list|()
return|;
block|}
comment|/** Can this user see this reference exists? */
DECL|method|isVisible ()
specifier|public
name|boolean
name|isVisible
parameter_list|()
block|{
return|return
name|canPerform
argument_list|(
name|READ
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
return|;
block|}
comment|/**    * Determines whether the user can upload a change to the ref controlled by    * this object.    *    * @return {@code true} if the user specified can upload a change to the Git    *         ref    */
DECL|method|canUpload ()
specifier|public
name|boolean
name|canUpload
parameter_list|()
block|{
return|return
name|canPerform
argument_list|(
name|READ
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
return|;
block|}
comment|/** @return true if the user can update the reference as a fast-forward. */
DECL|method|canUpdate ()
specifier|public
name|boolean
name|canUpdate
parameter_list|()
block|{
return|return
name|canPerform
argument_list|(
name|PUSH_HEAD
argument_list|,
name|PUSH_HEAD_UPDATE
argument_list|)
return|;
block|}
comment|/** @return true if the user can rewind (force push) the reference. */
DECL|method|canForceUpdate ()
specifier|public
name|boolean
name|canForceUpdate
parameter_list|()
block|{
return|return
name|canPerform
argument_list|(
name|PUSH_HEAD
argument_list|,
name|PUSH_HEAD_REPLACE
argument_list|)
operator|||
name|canDelete
argument_list|()
return|;
block|}
comment|/**    * Determines whether the user can create a new Git ref.    *    * @param rw revision pool {@code object} was parsed in.    * @param object the object the user will start the reference with.    * @return {@code true} if the user specified can create a new Git ref    */
DECL|method|canCreate (RevWalk rw, RevObject object)
specifier|public
name|boolean
name|canCreate
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|RevObject
name|object
parameter_list|)
block|{
name|boolean
name|owner
decl_stmt|;
switch|switch
condition|(
name|getCurrentUser
argument_list|()
operator|.
name|getAccessPath
argument_list|()
condition|)
block|{
case|case
name|WEB
case|:
name|owner
operator|=
name|isOwner
argument_list|()
expr_stmt|;
break|break;
default|default:
name|owner
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|RevCommit
condition|)
block|{
return|return
name|owner
operator|||
name|canPerform
argument_list|(
name|PUSH_HEAD
argument_list|,
name|PUSH_HEAD_CREATE
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|RevTag
condition|)
block|{
try|try
block|{
name|rw
operator|.
name|parseBody
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|RevTag
name|tag
init|=
operator|(
name|RevTag
operator|)
name|object
decl_stmt|;
comment|// Require the tagger to be present and match the current user's
comment|// email address, unless PUSH_ANY_TAG was granted.
comment|//
specifier|final
name|PersonIdent
name|tagger
init|=
name|tag
operator|.
name|getTaggerIdent
argument_list|()
decl_stmt|;
if|if
condition|(
name|tagger
operator|==
literal|null
operator|||
operator|!
operator|(
name|getCurrentUser
argument_list|()
operator|instanceof
name|IdentifiedUser
operator|)
condition|)
block|{
return|return
name|owner
operator|||
name|canPerform
argument_list|(
name|PUSH_TAG
argument_list|,
name|PUSH_TAG_ANY
argument_list|)
return|;
block|}
specifier|final
name|IdentifiedUser
name|user
init|=
operator|(
name|IdentifiedUser
operator|)
name|getCurrentUser
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|getEmailAddresses
argument_list|()
operator|.
name|contains
argument_list|(
name|tagger
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|owner
operator|||
name|canPerform
argument_list|(
name|PUSH_TAG
argument_list|,
name|PUSH_TAG_ANY
argument_list|)
return|;
block|}
comment|// If the tag has a PGP signature, allow a lower level of permission
comment|// than if it doesn't have a PGP signature.
comment|//
if|if
condition|(
name|tag
operator|.
name|getFullMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-----BEGIN PGP SIGNATURE-----\n"
argument_list|)
condition|)
block|{
return|return
name|owner
operator|||
name|canPerform
argument_list|(
name|PUSH_TAG
argument_list|,
name|PUSH_TAG_SIGNED
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|owner
operator|||
name|canPerform
argument_list|(
name|PUSH_TAG
argument_list|,
name|PUSH_TAG_ANNOTATED
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Determines whether the user can delete the Git ref controlled by this    * object.    *    * @return {@code true} if the user specified can delete a Git ref.    */
DECL|method|canDelete ()
specifier|public
name|boolean
name|canDelete
parameter_list|()
block|{
switch|switch
condition|(
name|getCurrentUser
argument_list|()
operator|.
name|getAccessPath
argument_list|()
condition|)
block|{
case|case
name|WEB
case|:
return|return
name|isOwner
argument_list|()
operator|||
name|canPerform
argument_list|(
name|PUSH_HEAD
argument_list|,
name|PUSH_HEAD_REPLACE
argument_list|)
return|;
case|case
name|SSH
case|:
return|return
name|canPerform
argument_list|(
name|PUSH_HEAD
argument_list|,
name|PUSH_HEAD_REPLACE
argument_list|)
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
DECL|method|canPerform (ApprovalCategory.Id actionId, short level)
specifier|private
name|boolean
name|canPerform
parameter_list|(
name|ApprovalCategory
operator|.
name|Id
name|actionId
parameter_list|,
name|short
name|level
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|groups
init|=
name|getCurrentUser
argument_list|()
operator|.
name|getEffectiveGroups
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
specifier|final
name|RefRight
name|right
range|:
name|getLocalRights
argument_list|()
control|)
block|{
if|if
condition|(
name|right
operator|.
name|getApprovalCategoryId
argument_list|()
operator|.
name|equals
argument_list|(
name|actionId
argument_list|)
operator|&&
name|groups
operator|.
name|contains
argument_list|(
name|right
operator|.
name|getAccountGroupId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
argument_list|<
literal|0
operator|&&
name|right
operator|.
name|getMaxValue
operator|(
operator|)
argument_list|>
literal|0
condition|)
block|{
comment|// If one of the user's groups had denied them access, but
comment|// this group grants them access, prefer the grant over
comment|// the denial. We have to break the tie somehow and we
comment|// prefer being "more open" to being "more closed".
comment|//
name|val
operator|=
name|right
operator|.
name|getMaxValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Otherwise we use the largest value we can get.
comment|//
name|val
operator|=
name|Math
operator|.
name|max
argument_list|(
name|right
operator|.
name|getMaxValue
argument_list|()
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|val
operator|==
name|Integer
operator|.
name|MIN_VALUE
operator|&&
name|actionId
operator|.
name|canInheritFromWildProject
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|RefRight
name|pr
range|:
name|getInheritedRights
argument_list|()
control|)
block|{
if|if
condition|(
name|actionId
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|getApprovalCategoryId
argument_list|()
argument_list|)
operator|&&
name|groups
operator|.
name|contains
argument_list|(
name|pr
operator|.
name|getAccountGroupId
argument_list|()
argument_list|)
condition|)
block|{
name|val
operator|=
name|Math
operator|.
name|max
argument_list|(
name|pr
operator|.
name|getMaxValue
argument_list|()
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|val
operator|>=
name|level
return|;
block|}
DECL|method|getLocalRights ()
specifier|private
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|getLocalRights
parameter_list|()
block|{
return|return
name|filter
argument_list|(
name|projectControl
operator|.
name|getProjectState
argument_list|()
operator|.
name|getLocalRights
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getInheritedRights ()
specifier|private
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|getInheritedRights
parameter_list|()
block|{
return|return
name|filter
argument_list|(
name|projectControl
operator|.
name|getProjectState
argument_list|()
operator|.
name|getInheritedRights
argument_list|()
argument_list|)
return|;
block|}
DECL|method|filter (Collection<RefRight> all)
specifier|private
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|filter
parameter_list|(
name|Collection
argument_list|<
name|RefRight
argument_list|>
name|all
parameter_list|)
block|{
name|List
argument_list|<
name|RefRight
argument_list|>
name|mine
init|=
operator|new
name|ArrayList
argument_list|<
name|RefRight
argument_list|>
argument_list|(
name|all
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RefRight
name|right
range|:
name|all
control|)
block|{
if|if
condition|(
name|matches
argument_list|(
name|getRefName
argument_list|()
argument_list|,
name|right
operator|.
name|getRefPattern
argument_list|()
argument_list|)
condition|)
block|{
name|mine
operator|.
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mine
return|;
block|}
DECL|method|matches (String refName, String refPattern)
specifier|public
specifier|static
name|boolean
name|matches
parameter_list|(
name|String
name|refName
parameter_list|,
name|String
name|refPattern
parameter_list|)
block|{
if|if
condition|(
name|refPattern
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
name|String
name|prefix
init|=
name|refPattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|refPattern
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|refName
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|refName
operator|.
name|equals
argument_list|(
name|refPattern
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

