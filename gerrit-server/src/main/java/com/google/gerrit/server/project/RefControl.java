begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|CollectionsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ParamertizedString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|dk
operator|.
name|brics
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/** Manages access control for Git references (aka branches, tags). */
end_comment

begin_class
DECL|class|RefControl
specifier|public
class|class
name|RefControl
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (ProjectControl projectControl, String ref)
name|RefControl
name|create
parameter_list|(
name|ProjectControl
name|projectControl
parameter_list|,
name|String
name|ref
parameter_list|)
function_decl|;
block|}
DECL|field|projectControl
specifier|private
specifier|final
name|ProjectControl
name|projectControl
decl_stmt|;
DECL|field|refName
specifier|private
specifier|final
name|String
name|refName
decl_stmt|;
DECL|field|permissions
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
argument_list|>
name|permissions
decl_stmt|;
DECL|field|owner
specifier|private
name|Boolean
name|owner
decl_stmt|;
DECL|field|canForgeAuthor
specifier|private
name|Boolean
name|canForgeAuthor
decl_stmt|;
DECL|field|canForgeCommitter
specifier|private
name|Boolean
name|canForgeCommitter
decl_stmt|;
annotation|@
name|Inject
DECL|method|RefControl (@ssisted final ProjectControl projectControl, @Assisted String ref)
specifier|protected
name|RefControl
parameter_list|(
annotation|@
name|Assisted
specifier|final
name|ProjectControl
name|projectControl
parameter_list|,
annotation|@
name|Assisted
name|String
name|ref
parameter_list|)
block|{
if|if
condition|(
name|isRE
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|ref
operator|=
name|shortestExample
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
name|ref
operator|=
name|ref
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ref
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|projectControl
operator|=
name|projectControl
expr_stmt|;
name|this
operator|.
name|refName
operator|=
name|ref
expr_stmt|;
block|}
DECL|method|getRefName ()
specifier|public
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|refName
return|;
block|}
DECL|method|getProjectControl ()
specifier|public
name|ProjectControl
name|getProjectControl
parameter_list|()
block|{
return|return
name|projectControl
return|;
block|}
DECL|method|getCurrentUser ()
specifier|public
name|CurrentUser
name|getCurrentUser
parameter_list|()
block|{
return|return
name|getProjectControl
argument_list|()
operator|.
name|getCurrentUser
argument_list|()
return|;
block|}
DECL|method|forAnonymousUser ()
specifier|public
name|RefControl
name|forAnonymousUser
parameter_list|()
block|{
return|return
name|getProjectControl
argument_list|()
operator|.
name|forAnonymousUser
argument_list|()
operator|.
name|controlForRef
argument_list|(
name|getRefName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|forUser (final CurrentUser who)
specifier|public
name|RefControl
name|forUser
parameter_list|(
specifier|final
name|CurrentUser
name|who
parameter_list|)
block|{
return|return
name|getProjectControl
argument_list|()
operator|.
name|forUser
argument_list|(
name|who
argument_list|)
operator|.
name|controlForRef
argument_list|(
name|getRefName
argument_list|()
argument_list|)
return|;
block|}
comment|/** Is this user a ref owner? */
DECL|method|isOwner ()
specifier|public
name|boolean
name|isOwner
parameter_list|()
block|{
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|canPerform
argument_list|(
name|Permission
operator|.
name|OWNER
argument_list|)
condition|)
block|{
name|owner
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getRefName
argument_list|()
operator|.
name|equals
argument_list|(
name|AccessSection
operator|.
name|ALL
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|AccessSection
operator|.
name|ALL
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
comment|// We have to prevent infinite recursion here, the project control
comment|// calls us to find out if there is ownership of all references in
comment|// order to determine project level ownership.
comment|//
name|owner
operator|=
name|getCurrentUser
argument_list|()
operator|.
name|isAdministrator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|owner
operator|=
name|getProjectControl
argument_list|()
operator|.
name|isOwner
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|owner
return|;
block|}
comment|/** Can this user see this reference exists? */
DECL|method|isVisible ()
specifier|public
name|boolean
name|isVisible
parameter_list|()
block|{
return|return
name|getProjectControl
argument_list|()
operator|.
name|visibleForReplication
argument_list|()
operator|||
name|canPerform
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
return|;
block|}
comment|/**    * Determines whether the user can upload a change to the ref controlled by    * this object.    *    * @return {@code true} if the user specified can upload a change to the Git    *         ref    */
DECL|method|canUpload ()
specifier|public
name|boolean
name|canUpload
parameter_list|()
block|{
return|return
name|getProjectControl
argument_list|()
operator|.
name|controlForRef
argument_list|(
literal|"refs/for/"
operator|+
name|getRefName
argument_list|()
argument_list|)
operator|.
name|canPerform
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
return|;
block|}
comment|/** @return true if this user can submit merge patch sets to this ref */
DECL|method|canUploadMerges ()
specifier|public
name|boolean
name|canUploadMerges
parameter_list|()
block|{
return|return
name|getProjectControl
argument_list|()
operator|.
name|controlForRef
argument_list|(
literal|"refs/for/"
operator|+
name|getRefName
argument_list|()
argument_list|)
operator|.
name|canPerform
argument_list|(
name|Permission
operator|.
name|PUSH_MERGE
argument_list|)
return|;
block|}
comment|/** @return true if this user can submit patch sets to this ref */
DECL|method|canSubmit ()
specifier|public
name|boolean
name|canSubmit
parameter_list|()
block|{
if|if
condition|(
name|GitRepositoryManager
operator|.
name|REF_CONFIG
operator|.
name|equals
argument_list|(
name|refName
argument_list|)
condition|)
block|{
comment|// Always allow project owners to submit configuration changes.
comment|// Submitting configuration changes modifies the access control
comment|// rules. Allowing this to be done by a non-project-owner opens
comment|// a security hole enabling editing of access rules, and thus
comment|// granting of powers beyond submitting to the configuration.
return|return
name|getProjectControl
argument_list|()
operator|.
name|isOwner
argument_list|()
return|;
block|}
return|return
name|canPerform
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
return|;
block|}
comment|/** @return true if the user can update the reference as a fast-forward. */
DECL|method|canUpdate ()
specifier|public
name|boolean
name|canUpdate
parameter_list|()
block|{
if|if
condition|(
name|GitRepositoryManager
operator|.
name|REF_CONFIG
operator|.
name|equals
argument_list|(
name|refName
argument_list|)
operator|&&
operator|!
name|getProjectControl
argument_list|()
operator|.
name|isOwner
argument_list|()
condition|)
block|{
comment|// Pushing requires being at least project owner, in addition to push.
comment|// Pushing configuration changes modifies the access control
comment|// rules. Allowing this to be done by a non-project-owner opens
comment|// a security hole enabling editing of access rules, and thus
comment|// granting of powers beyond pushing to the configuration.
return|return
literal|false
return|;
block|}
return|return
name|canPerform
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
return|;
block|}
comment|/** @return true if the user can rewind (force push) the reference. */
DECL|method|canForceUpdate ()
specifier|public
name|boolean
name|canForceUpdate
parameter_list|()
block|{
return|return
name|canPushWithForce
argument_list|()
operator|||
name|canDelete
argument_list|()
return|;
block|}
DECL|method|canPushWithForce ()
specifier|private
name|boolean
name|canPushWithForce
parameter_list|()
block|{
if|if
condition|(
name|GitRepositoryManager
operator|.
name|REF_CONFIG
operator|.
name|equals
argument_list|(
name|refName
argument_list|)
operator|&&
operator|!
name|getProjectControl
argument_list|()
operator|.
name|isOwner
argument_list|()
condition|)
block|{
comment|// Pushing requires being at least project owner, in addition to push.
comment|// Pushing configuration changes modifies the access control
comment|// rules. Allowing this to be done by a non-project-owner opens
comment|// a security hole enabling editing of access rules, and thus
comment|// granting of powers beyond pushing to the configuration.
return|return
literal|false
return|;
block|}
for|for
control|(
name|PermissionRule
name|rule
range|:
name|access
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
control|)
block|{
if|if
condition|(
name|rule
operator|.
name|getForce
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Determines whether the user can create a new Git ref.    *    * @param rw revision pool {@code object} was parsed in.    * @param object the object the user will start the reference with.    * @return {@code true} if the user specified can create a new Git ref    */
DECL|method|canCreate (RevWalk rw, RevObject object)
specifier|public
name|boolean
name|canCreate
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|RevObject
name|object
parameter_list|)
block|{
name|boolean
name|owner
decl_stmt|;
switch|switch
condition|(
name|getCurrentUser
argument_list|()
operator|.
name|getAccessPath
argument_list|()
condition|)
block|{
case|case
name|WEB_UI
case|:
name|owner
operator|=
name|isOwner
argument_list|()
expr_stmt|;
break|break;
default|default:
name|owner
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|RevCommit
condition|)
block|{
return|return
name|owner
operator|||
name|canPerform
argument_list|(
name|Permission
operator|.
name|CREATE
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|RevTag
condition|)
block|{
specifier|final
name|RevTag
name|tag
init|=
operator|(
name|RevTag
operator|)
name|object
decl_stmt|;
try|try
block|{
name|rw
operator|.
name|parseBody
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|// If tagger is present, require it matches the user's email.
comment|//
specifier|final
name|PersonIdent
name|tagger
init|=
name|tag
operator|.
name|getTaggerIdent
argument_list|()
decl_stmt|;
if|if
condition|(
name|tagger
operator|!=
literal|null
condition|)
block|{
name|boolean
name|valid
decl_stmt|;
if|if
condition|(
name|getCurrentUser
argument_list|()
operator|instanceof
name|IdentifiedUser
condition|)
block|{
specifier|final
name|IdentifiedUser
name|user
init|=
operator|(
name|IdentifiedUser
operator|)
name|getCurrentUser
argument_list|()
decl_stmt|;
specifier|final
name|String
name|addr
init|=
name|tagger
operator|.
name|getEmailAddress
argument_list|()
decl_stmt|;
name|valid
operator|=
name|user
operator|.
name|getEmailAddresses
argument_list|()
operator|.
name|contains
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|valid
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|valid
operator|&&
operator|!
name|owner
operator|&&
operator|!
name|canForgeCommitter
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// If the tag has a PGP signature, allow a lower level of permission
comment|// than if it doesn't have a PGP signature.
comment|//
if|if
condition|(
name|tag
operator|.
name|getFullMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-----BEGIN PGP SIGNATURE-----\n"
argument_list|)
condition|)
block|{
return|return
name|owner
operator|||
name|canPerform
argument_list|(
name|Permission
operator|.
name|PUSH_TAG
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|owner
operator|||
name|canPerform
argument_list|(
name|Permission
operator|.
name|PUSH_TAG
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Determines whether the user can delete the Git ref controlled by this    * object.    *    * @return {@code true} if the user specified can delete a Git ref.    */
DECL|method|canDelete ()
specifier|public
name|boolean
name|canDelete
parameter_list|()
block|{
if|if
condition|(
name|GitRepositoryManager
operator|.
name|REF_CONFIG
operator|.
name|equals
argument_list|(
name|refName
argument_list|)
condition|)
block|{
comment|// Never allow removal of the refs/meta/config branch.
comment|// Deleting the branch would destroy all Gerrit specific
comment|// metadata about the project, including its access rules.
comment|// If a project is to be removed from Gerrit, its repository
comment|// should be removed first.
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|getCurrentUser
argument_list|()
operator|.
name|getAccessPath
argument_list|()
condition|)
block|{
case|case
name|WEB_UI
case|:
return|return
name|isOwner
argument_list|()
operator|||
name|canPushWithForce
argument_list|()
return|;
case|case
name|GIT
case|:
return|return
name|canPushWithForce
argument_list|()
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
comment|/** @return true if this user can forge the author line in a commit. */
DECL|method|canForgeAuthor ()
specifier|public
name|boolean
name|canForgeAuthor
parameter_list|()
block|{
if|if
condition|(
name|canForgeAuthor
operator|==
literal|null
condition|)
block|{
name|canForgeAuthor
operator|=
name|canPerform
argument_list|(
name|Permission
operator|.
name|FORGE_AUTHOR
argument_list|)
expr_stmt|;
block|}
return|return
name|canForgeAuthor
return|;
block|}
comment|/** @return true if this user can forge the committer line in a commit. */
DECL|method|canForgeCommitter ()
specifier|public
name|boolean
name|canForgeCommitter
parameter_list|()
block|{
if|if
condition|(
name|canForgeCommitter
operator|==
literal|null
condition|)
block|{
name|canForgeCommitter
operator|=
name|canPerform
argument_list|(
name|Permission
operator|.
name|FORGE_COMMITTER
argument_list|)
expr_stmt|;
block|}
return|return
name|canForgeCommitter
return|;
block|}
comment|/** @return true if this user can forge the server on the committer line. */
DECL|method|canForgeGerritServerIdentity ()
specifier|public
name|boolean
name|canForgeGerritServerIdentity
parameter_list|()
block|{
return|return
name|canPerform
argument_list|(
name|Permission
operator|.
name|FORGE_SERVER
argument_list|)
return|;
block|}
comment|/** All value ranges of any allowed label permission. */
DECL|method|getLabelRanges ()
specifier|public
name|List
argument_list|<
name|PermissionRange
argument_list|>
name|getLabelRanges
parameter_list|()
block|{
name|List
argument_list|<
name|PermissionRange
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|PermissionRange
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
argument_list|>
name|e
range|:
name|permissions
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Permission
operator|.
name|isLabel
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|toRange
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
comment|/** The range of permitted values associated with a label permission. */
DECL|method|getRange (String permission)
specifier|public
name|PermissionRange
name|getRange
parameter_list|(
name|String
name|permission
parameter_list|)
block|{
if|if
condition|(
name|Permission
operator|.
name|isLabel
argument_list|(
name|permission
argument_list|)
condition|)
block|{
return|return
name|toRange
argument_list|(
name|permission
argument_list|,
name|access
argument_list|(
name|permission
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|toRange (String permissionName, List<PermissionRule> ruleList)
specifier|private
specifier|static
name|PermissionRange
name|toRange
parameter_list|(
name|String
name|permissionName
parameter_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|ruleList
parameter_list|)
block|{
name|int
name|min
init|=
literal|0
decl_stmt|;
name|int
name|max
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PermissionRule
name|rule
range|:
name|ruleList
control|)
block|{
name|min
operator|=
name|Math
operator|.
name|min
argument_list|(
name|min
argument_list|,
name|rule
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|rule
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PermissionRange
argument_list|(
name|permissionName
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/** True if the user has this permission. Works only for non labels. */
DECL|method|canPerform (String permissionName)
name|boolean
name|canPerform
parameter_list|(
name|String
name|permissionName
parameter_list|)
block|{
return|return
operator|!
name|access
argument_list|(
name|permissionName
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/** Rules for the given permission, or the empty list. */
DECL|method|access (String permissionName)
specifier|private
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|access
parameter_list|(
name|String
name|permissionName
parameter_list|)
block|{
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|r
init|=
name|permissions
argument_list|()
operator|.
name|get
argument_list|(
name|permissionName
argument_list|)
decl_stmt|;
return|return
name|r
operator|!=
literal|null
condition|?
name|r
else|:
name|Collections
operator|.
expr|<
name|PermissionRule
operator|>
name|emptyList
argument_list|()
return|;
block|}
comment|/** All rules that pertain to this user, on this reference. */
DECL|method|permissions ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
argument_list|>
name|permissions
parameter_list|()
block|{
if|if
condition|(
name|permissions
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|AccessSection
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|AccessSection
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessSection
name|section
range|:
name|projectControl
operator|.
name|access
argument_list|()
control|)
block|{
if|if
condition|(
name|appliesToRef
argument_list|(
name|section
argument_list|)
condition|)
block|{
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|sections
argument_list|,
operator|new
name|MostSpecificComparator
argument_list|(
name|getRefName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|SeenRule
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<
name|SeenRule
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|exclusiveGroupPermissions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|permissions
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|AccessSection
name|section
range|:
name|sections
control|)
block|{
for|for
control|(
name|Permission
name|permission
range|:
name|section
operator|.
name|getPermissions
argument_list|()
control|)
block|{
if|if
condition|(
name|exclusiveGroupPermissions
operator|.
name|contains
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|PermissionRule
name|rule
range|:
name|permission
operator|.
name|getRules
argument_list|()
control|)
block|{
if|if
condition|(
name|matchGroup
argument_list|(
name|rule
operator|.
name|getGroup
argument_list|()
operator|.
name|getUUID
argument_list|()
argument_list|)
condition|)
block|{
name|SeenRule
name|s
init|=
operator|new
name|SeenRule
argument_list|(
name|section
argument_list|,
name|permission
argument_list|,
name|rule
argument_list|)
decl_stmt|;
if|if
condition|(
name|seen
operator|.
name|add
argument_list|(
name|s
argument_list|)
operator|&&
operator|!
name|rule
operator|.
name|getDeny
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|r
init|=
name|permissions
operator|.
name|get
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|r
operator|=
operator|new
name|ArrayList
argument_list|<
name|PermissionRule
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|permissions
operator|.
name|put
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|permission
operator|.
name|getExclusiveGroup
argument_list|()
condition|)
block|{
name|exclusiveGroupPermissions
operator|.
name|add
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|permissions
return|;
block|}
DECL|method|appliesToRef (AccessSection section)
specifier|private
name|boolean
name|appliesToRef
parameter_list|(
name|AccessSection
name|section
parameter_list|)
block|{
name|String
name|refPattern
init|=
name|section
operator|.
name|getRefPattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|isTemplate
argument_list|(
name|refPattern
argument_list|)
condition|)
block|{
name|ParamertizedString
name|template
init|=
operator|new
name|ParamertizedString
argument_list|(
name|refPattern
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|getCurrentUser
argument_list|()
operator|instanceof
name|IdentifiedUser
condition|)
block|{
name|p
operator|.
name|put
argument_list|(
literal|"username"
argument_list|,
operator|(
operator|(
name|IdentifiedUser
operator|)
name|getCurrentUser
argument_list|()
operator|)
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Right now we only template the username. If not available
comment|// this rule cannot be matched at all.
comment|//
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isRE
argument_list|(
name|refPattern
argument_list|)
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ent
range|:
name|p
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ent
operator|.
name|setValue
argument_list|(
name|escape
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|refPattern
operator|=
name|template
operator|.
name|replace
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRE
argument_list|(
name|refPattern
argument_list|)
condition|)
block|{
return|return
name|Pattern
operator|.
name|matches
argument_list|(
name|refPattern
argument_list|,
name|getRefName
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|refPattern
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
name|String
name|prefix
init|=
name|refPattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|refPattern
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|getRefName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getRefName
argument_list|()
operator|.
name|equals
argument_list|(
name|refPattern
argument_list|)
return|;
block|}
block|}
DECL|method|matchGroup (AccountGroup.UUID uuid)
specifier|private
name|boolean
name|matchGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|userGroups
init|=
name|getCurrentUser
argument_list|()
operator|.
name|getEffectiveGroups
argument_list|()
decl_stmt|;
if|if
condition|(
name|AccountGroup
operator|.
name|PROJECT_OWNERS
operator|.
name|equals
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
name|ProjectState
name|state
init|=
name|projectControl
operator|.
name|getProjectState
argument_list|()
decl_stmt|;
return|return
name|CollectionsUtil
operator|.
name|isAnyIncludedIn
argument_list|(
name|state
operator|.
name|getAllOwners
argument_list|()
argument_list|,
name|userGroups
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|userGroups
operator|.
name|contains
argument_list|(
name|uuid
argument_list|)
return|;
block|}
block|}
DECL|method|isTemplate (String refPattern)
specifier|private
specifier|static
name|boolean
name|isTemplate
parameter_list|(
name|String
name|refPattern
parameter_list|)
block|{
return|return
literal|0
operator|<=
name|refPattern
operator|.
name|indexOf
argument_list|(
literal|"${"
argument_list|)
return|;
block|}
DECL|method|escape (String value)
specifier|private
specifier|static
name|String
name|escape
parameter_list|(
name|String
name|value
parameter_list|)
block|{
comment|// Right now the only special character allowed in a
comment|// variable value is a . in the username.
comment|//
return|return
name|value
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"\\."
argument_list|)
return|;
block|}
DECL|method|isRE (String refPattern)
specifier|private
specifier|static
name|boolean
name|isRE
parameter_list|(
name|String
name|refPattern
parameter_list|)
block|{
return|return
name|refPattern
operator|.
name|startsWith
argument_list|(
name|AccessSection
operator|.
name|REGEX_PREFIX
argument_list|)
return|;
block|}
DECL|method|shortestExample (String pattern)
specifier|public
specifier|static
name|String
name|shortestExample
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|isRE
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
return|return
name|toRegExp
argument_list|(
name|pattern
argument_list|)
operator|.
name|toAutomaton
argument_list|()
operator|.
name|getShortestExample
argument_list|(
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pattern
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
return|return
name|pattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pattern
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|'1'
return|;
block|}
else|else
block|{
return|return
name|pattern
return|;
block|}
block|}
DECL|method|toRegExp (String refPattern)
specifier|private
specifier|static
name|RegExp
name|toRegExp
parameter_list|(
name|String
name|refPattern
parameter_list|)
block|{
if|if
condition|(
name|isRE
argument_list|(
name|refPattern
argument_list|)
condition|)
block|{
name|refPattern
operator|=
name|refPattern
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RegExp
argument_list|(
name|refPattern
argument_list|,
name|RegExp
operator|.
name|NONE
argument_list|)
return|;
block|}
comment|/** Tracks whether or not a permission has been overridden. */
DECL|class|SeenRule
specifier|private
specifier|static
class|class
name|SeenRule
block|{
DECL|field|refPattern
specifier|final
name|String
name|refPattern
decl_stmt|;
DECL|field|permissionName
specifier|final
name|String
name|permissionName
decl_stmt|;
DECL|field|group
specifier|final
name|AccountGroup
operator|.
name|UUID
name|group
decl_stmt|;
DECL|method|SeenRule (AccessSection section, Permission permission, PermissionRule rule)
name|SeenRule
parameter_list|(
name|AccessSection
name|section
parameter_list|,
name|Permission
name|permission
parameter_list|,
name|PermissionRule
name|rule
parameter_list|)
block|{
name|refPattern
operator|=
name|section
operator|.
name|getRefPattern
argument_list|()
expr_stmt|;
name|permissionName
operator|=
name|permission
operator|.
name|getName
argument_list|()
expr_stmt|;
name|group
operator|=
name|rule
operator|.
name|getGroup
argument_list|()
operator|.
name|getUUID
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hc
init|=
name|refPattern
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|hc
operator|=
name|hc
operator|*
literal|31
operator|+
name|permissionName
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|hc
operator|=
name|hc
operator|*
literal|31
operator|+
name|group
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|hc
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|SeenRule
condition|)
block|{
name|SeenRule
name|a
init|=
name|this
decl_stmt|;
name|SeenRule
name|b
init|=
operator|(
name|SeenRule
operator|)
name|other
decl_stmt|;
return|return
name|a
operator|.
name|refPattern
operator|.
name|equals
argument_list|(
name|b
operator|.
name|refPattern
argument_list|)
comment|//
operator|&&
name|a
operator|.
name|permissionName
operator|.
name|equals
argument_list|(
name|b
operator|.
name|permissionName
argument_list|)
comment|//
operator|&&
name|eq
argument_list|(
name|a
operator|.
name|group
argument_list|,
name|b
operator|.
name|group
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|eq (AccountGroup.UUID a, AccountGroup.UUID b)
specifier|private
name|boolean
name|eq
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|a
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|b
parameter_list|)
block|{
return|return
name|a
operator|!=
literal|null
operator|&&
name|b
operator|!=
literal|null
operator|&&
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
comment|/**    * Order the Ref Pattern by the most specific. This sort is done by:    *<ul>    *<li>1 - The minor value of Levenshtein string distance between the branch    * name and the regex string shortest example. A shorter distance is a more    * specific match.    *<li>2 - Finites first, infinities after.    *<li>3 - Number of transitions.    *<li>4 - Length of the expression text.    *</ul>    *    * Levenshtein distance is a measure of the similarity between two strings.    * The distance is the number of deletions, insertions, or substitutions    * required to transform one string into another.    *    * For example, if given refs/heads/m* and refs/heads/*, the distances are 5    * and 6. It means that refs/heads/m* is more specific because it's closer to    * refs/heads/master than refs/heads/*.    *    * Another example could be refs/heads/* and refs/heads/[a-zA-Z]*, the    * distances are both 6. Both are infinite, but refs/heads/[a-zA-Z]* has more    * transitions, which after all turns it more specific.    */
DECL|class|MostSpecificComparator
specifier|private
specifier|static
specifier|final
class|class
name|MostSpecificComparator
implements|implements
name|Comparator
argument_list|<
name|AccessSection
argument_list|>
block|{
DECL|field|refName
specifier|private
specifier|final
name|String
name|refName
decl_stmt|;
DECL|method|MostSpecificComparator (String refName)
name|MostSpecificComparator
parameter_list|(
name|String
name|refName
parameter_list|)
block|{
name|this
operator|.
name|refName
operator|=
name|refName
expr_stmt|;
block|}
DECL|method|compare (AccessSection a, AccessSection b)
specifier|public
name|int
name|compare
parameter_list|(
name|AccessSection
name|a
parameter_list|,
name|AccessSection
name|b
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|a
operator|.
name|getRefPattern
argument_list|()
argument_list|,
name|b
operator|.
name|getRefPattern
argument_list|()
argument_list|)
return|;
block|}
DECL|method|compare (final String pattern1, final String pattern2)
specifier|private
name|int
name|compare
parameter_list|(
specifier|final
name|String
name|pattern1
parameter_list|,
specifier|final
name|String
name|pattern2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|distance
argument_list|(
name|pattern1
argument_list|)
operator|-
name|distance
argument_list|(
name|pattern2
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|boolean
name|p1_finite
init|=
name|finite
argument_list|(
name|pattern1
argument_list|)
decl_stmt|;
name|boolean
name|p2_finite
init|=
name|finite
argument_list|(
name|pattern2
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1_finite
operator|&&
operator|!
name|p2_finite
condition|)
block|{
name|cmp
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|p1_finite
operator|&&
name|p2_finite
condition|)
block|{
name|cmp
operator|=
literal|1
expr_stmt|;
block|}
else|else
comment|/* if (f1 == f2) */
block|{
name|cmp
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
name|transitions
argument_list|(
name|pattern1
argument_list|)
operator|-
name|transitions
argument_list|(
name|pattern2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
name|pattern2
operator|.
name|length
argument_list|()
operator|-
name|pattern1
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|cmp
return|;
block|}
DECL|method|distance (String pattern)
specifier|private
name|int
name|distance
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|String
name|example
decl_stmt|;
if|if
condition|(
name|isRE
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
name|example
operator|=
name|shortestExample
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pattern
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
name|example
operator|=
name|pattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pattern
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|'1'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pattern
operator|.
name|equals
argument_list|(
name|refName
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|pattern
operator|.
name|length
argument_list|()
argument_list|,
name|refName
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
return|return
name|StringUtils
operator|.
name|getLevenshteinDistance
argument_list|(
name|example
argument_list|,
name|refName
argument_list|)
return|;
block|}
DECL|method|finite (String pattern)
specifier|private
name|boolean
name|finite
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|isRE
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
return|return
name|toRegExp
argument_list|(
name|pattern
argument_list|)
operator|.
name|toAutomaton
argument_list|()
operator|.
name|isFinite
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|pattern
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|method|transitions (String pattern)
specifier|private
name|int
name|transitions
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|isRE
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
return|return
name|toRegExp
argument_list|(
name|pattern
argument_list|)
operator|.
name|toAutomaton
argument_list|()
operator|.
name|getNumberOfTransitions
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|pattern
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
return|return
name|pattern
operator|.
name|length
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|pattern
operator|.
name|length
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

