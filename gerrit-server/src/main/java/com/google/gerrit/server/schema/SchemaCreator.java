begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountGroupName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategoryValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|CurrentSchemaVersion
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|SystemConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupUUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|NoReplication
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|SignedToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|jdbc
operator|.
name|JdbcExecutor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|jdbc
operator|.
name|JdbcSchema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|schema
operator|.
name|sql
operator|.
name|DialectH2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|schema
operator|.
name|sql
operator|.
name|DialectMySQL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|schema
operator|.
name|sql
operator|.
name|DialectPostgreSQL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|schema
operator|.
name|sql
operator|.
name|SqlDialect
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/** Creates the current database schema and populates initial code rows. */
end_comment

begin_class
DECL|class|SchemaCreator
specifier|public
class|class
name|SchemaCreator
block|{
DECL|field|DEFAULT_WILD_NAME
specifier|private
specifier|static
specifier|final
name|Project
operator|.
name|NameKey
name|DEFAULT_WILD_NAME
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"All-Projects"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
annotation|@
name|SitePath
DECL|field|site_path
name|File
name|site_path
decl_stmt|;
DECL|field|mgr
specifier|private
specifier|final
name|GitRepositoryManager
name|mgr
decl_stmt|;
DECL|field|serverUser
specifier|private
specifier|final
name|PersonIdent
name|serverUser
decl_stmt|;
DECL|field|versionNbr
specifier|private
specifier|final
name|int
name|versionNbr
decl_stmt|;
DECL|field|index_generic
specifier|private
specifier|final
name|ScriptRunner
name|index_generic
decl_stmt|;
DECL|field|index_postgres
specifier|private
specifier|final
name|ScriptRunner
name|index_postgres
decl_stmt|;
DECL|field|mysql_nextval
specifier|private
specifier|final
name|ScriptRunner
name|mysql_nextval
decl_stmt|;
DECL|field|admin
specifier|private
name|AccountGroup
name|admin
decl_stmt|;
DECL|field|anonymous
specifier|private
name|AccountGroup
name|anonymous
decl_stmt|;
DECL|field|registered
specifier|private
name|AccountGroup
name|registered
decl_stmt|;
DECL|field|owners
specifier|private
name|AccountGroup
name|owners
decl_stmt|;
annotation|@
name|Inject
DECL|method|SchemaCreator (final SitePaths site, @Current final SchemaVersion version, final GitRepositoryManager mgr, @GerritPersonIdent final PersonIdent au)
specifier|public
name|SchemaCreator
parameter_list|(
specifier|final
name|SitePaths
name|site
parameter_list|,
annotation|@
name|Current
specifier|final
name|SchemaVersion
name|version
parameter_list|,
specifier|final
name|GitRepositoryManager
name|mgr
parameter_list|,
annotation|@
name|GerritPersonIdent
specifier|final
name|PersonIdent
name|au
parameter_list|)
block|{
name|this
argument_list|(
name|site
operator|.
name|site_path
argument_list|,
name|version
argument_list|,
name|mgr
argument_list|,
name|au
argument_list|)
expr_stmt|;
block|}
DECL|method|SchemaCreator (final @SitePath File site, @Current final SchemaVersion version, final GitRepositoryManager gitMgr, final @GerritPersonIdent PersonIdent au)
specifier|public
name|SchemaCreator
parameter_list|(
specifier|final
annotation|@
name|SitePath
name|File
name|site
parameter_list|,
annotation|@
name|Current
specifier|final
name|SchemaVersion
name|version
parameter_list|,
specifier|final
name|GitRepositoryManager
name|gitMgr
parameter_list|,
specifier|final
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|au
parameter_list|)
block|{
name|site_path
operator|=
name|site
expr_stmt|;
name|mgr
operator|=
name|gitMgr
expr_stmt|;
name|serverUser
operator|=
name|au
expr_stmt|;
name|versionNbr
operator|=
name|version
operator|.
name|getVersionNbr
argument_list|()
expr_stmt|;
name|index_generic
operator|=
operator|new
name|ScriptRunner
argument_list|(
literal|"index_generic.sql"
argument_list|)
expr_stmt|;
name|index_postgres
operator|=
operator|new
name|ScriptRunner
argument_list|(
literal|"index_postgres.sql"
argument_list|)
expr_stmt|;
name|mysql_nextval
operator|=
operator|new
name|ScriptRunner
argument_list|(
literal|"mysql_nextval.sql"
argument_list|)
expr_stmt|;
block|}
DECL|method|create (final ReviewDb db)
specifier|public
name|void
name|create
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
specifier|final
name|JdbcSchema
name|jdbc
init|=
operator|(
name|JdbcSchema
operator|)
name|db
decl_stmt|;
specifier|final
name|JdbcExecutor
name|e
init|=
operator|new
name|JdbcExecutor
argument_list|(
name|jdbc
argument_list|)
decl_stmt|;
try|try
block|{
name|jdbc
operator|.
name|updateSchema
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|e
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|final
name|CurrentSchemaVersion
name|sVer
init|=
name|CurrentSchemaVersion
operator|.
name|create
argument_list|()
decl_stmt|;
name|sVer
operator|.
name|versionNbr
operator|=
name|versionNbr
expr_stmt|;
name|db
operator|.
name|schemaVersion
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|sVer
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|SystemConfig
name|sConfig
init|=
name|initSystemConfig
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|initVerifiedCategory
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|initCodeReviewCategory
argument_list|(
name|db
argument_list|,
name|sConfig
argument_list|)
expr_stmt|;
if|if
condition|(
name|mgr
operator|!=
literal|null
condition|)
block|{
comment|// TODO This should never be null when initializing a site.
name|initWildCardProject
argument_list|()
expr_stmt|;
block|}
specifier|final
name|SqlDialect
name|d
init|=
name|jdbc
operator|.
name|getDialect
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|instanceof
name|DialectH2
condition|)
block|{
name|index_generic
operator|.
name|run
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|instanceof
name|DialectMySQL
condition|)
block|{
name|index_generic
operator|.
name|run
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|mysql_nextval
operator|.
name|run
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|instanceof
name|DialectPostgreSQL
condition|)
block|{
name|index_postgres
operator|.
name|run
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Unsupported database "
operator|+
name|d
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|newGroup (ReviewDb c, String name, AccountGroup.UUID uuid)
specifier|private
name|AccountGroup
name|newGroup
parameter_list|(
name|ReviewDb
name|c
parameter_list|,
name|String
name|name
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|uuid
operator|==
literal|null
condition|)
block|{
name|uuid
operator|=
name|GroupUUID
operator|.
name|make
argument_list|(
name|name
argument_list|,
name|serverUser
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AccountGroup
argument_list|(
comment|//
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|name
argument_list|)
argument_list|,
comment|//
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|c
operator|.
name|nextAccountGroupId
argument_list|()
argument_list|)
argument_list|,
comment|//
name|uuid
argument_list|)
return|;
block|}
DECL|method|initSystemConfig (final ReviewDb c)
specifier|private
name|SystemConfig
name|initSystemConfig
parameter_list|(
specifier|final
name|ReviewDb
name|c
parameter_list|)
throws|throws
name|OrmException
block|{
name|admin
operator|=
name|newGroup
argument_list|(
name|c
argument_list|,
literal|"Administrators"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setDescription
argument_list|(
literal|"Gerrit Site Administrators"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setType
argument_list|(
name|AccountGroup
operator|.
name|Type
operator|.
name|INTERNAL
argument_list|)
expr_stmt|;
name|c
operator|.
name|accountGroups
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|accountGroupNames
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|AccountGroupName
argument_list|(
name|admin
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|anonymous
operator|=
name|newGroup
argument_list|(
name|c
argument_list|,
literal|"Anonymous Users"
argument_list|,
name|AccountGroup
operator|.
name|ANONYMOUS_USERS
argument_list|)
expr_stmt|;
name|anonymous
operator|.
name|setDescription
argument_list|(
literal|"Any user, signed-in or not"
argument_list|)
expr_stmt|;
name|anonymous
operator|.
name|setOwnerGroupId
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|anonymous
operator|.
name|setType
argument_list|(
name|AccountGroup
operator|.
name|Type
operator|.
name|SYSTEM
argument_list|)
expr_stmt|;
name|c
operator|.
name|accountGroups
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|anonymous
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|accountGroupNames
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|AccountGroupName
argument_list|(
name|anonymous
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|registered
operator|=
name|newGroup
argument_list|(
name|c
argument_list|,
literal|"Registered Users"
argument_list|,
name|AccountGroup
operator|.
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|registered
operator|.
name|setDescription
argument_list|(
literal|"Any signed-in user"
argument_list|)
expr_stmt|;
name|registered
operator|.
name|setOwnerGroupId
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|registered
operator|.
name|setType
argument_list|(
name|AccountGroup
operator|.
name|Type
operator|.
name|SYSTEM
argument_list|)
expr_stmt|;
name|c
operator|.
name|accountGroups
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|registered
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|accountGroupNames
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|AccountGroupName
argument_list|(
name|registered
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AccountGroup
name|batchUsers
init|=
name|newGroup
argument_list|(
name|c
argument_list|,
literal|"Non-Interactive Users"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|batchUsers
operator|.
name|setDescription
argument_list|(
literal|"Users who perform batch actions on Gerrit"
argument_list|)
expr_stmt|;
name|batchUsers
operator|.
name|setOwnerGroupId
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|batchUsers
operator|.
name|setType
argument_list|(
name|AccountGroup
operator|.
name|Type
operator|.
name|INTERNAL
argument_list|)
expr_stmt|;
name|c
operator|.
name|accountGroups
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|batchUsers
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|accountGroupNames
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|AccountGroupName
argument_list|(
name|batchUsers
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|owners
operator|=
name|newGroup
argument_list|(
name|c
argument_list|,
literal|"Project Owners"
argument_list|,
name|AccountGroup
operator|.
name|PROJECT_OWNERS
argument_list|)
expr_stmt|;
name|owners
operator|.
name|setDescription
argument_list|(
literal|"Any owner of the project"
argument_list|)
expr_stmt|;
name|owners
operator|.
name|setOwnerGroupId
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|owners
operator|.
name|setType
argument_list|(
name|AccountGroup
operator|.
name|Type
operator|.
name|SYSTEM
argument_list|)
expr_stmt|;
name|c
operator|.
name|accountGroups
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|owners
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|accountGroupNames
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|AccountGroupName
argument_list|(
name|owners
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|SystemConfig
name|s
init|=
name|SystemConfig
operator|.
name|create
argument_list|()
decl_stmt|;
name|s
operator|.
name|registerEmailPrivateKey
operator|=
name|SignedToken
operator|.
name|generateRandomKey
argument_list|()
expr_stmt|;
name|s
operator|.
name|adminGroupId
operator|=
name|admin
operator|.
name|getId
argument_list|()
expr_stmt|;
name|s
operator|.
name|adminGroupUUID
operator|=
name|admin
operator|.
name|getGroupUUID
argument_list|()
expr_stmt|;
name|s
operator|.
name|anonymousGroupId
operator|=
name|anonymous
operator|.
name|getId
argument_list|()
expr_stmt|;
name|s
operator|.
name|registeredGroupId
operator|=
name|registered
operator|.
name|getId
argument_list|()
expr_stmt|;
name|s
operator|.
name|batchUsersGroupId
operator|=
name|batchUsers
operator|.
name|getId
argument_list|()
expr_stmt|;
name|s
operator|.
name|batchUsersGroupUUID
operator|=
name|batchUsers
operator|.
name|getGroupUUID
argument_list|()
expr_stmt|;
name|s
operator|.
name|ownerGroupId
operator|=
name|owners
operator|.
name|getId
argument_list|()
expr_stmt|;
name|s
operator|.
name|wildProjectName
operator|=
name|DEFAULT_WILD_NAME
expr_stmt|;
try|try
block|{
name|s
operator|.
name|sitePath
operator|=
name|site_path
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|s
operator|.
name|sitePath
operator|=
name|site_path
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
name|c
operator|.
name|systemConfig
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
DECL|method|initWildCardProject ()
specifier|private
name|void
name|initWildCardProject
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Repository
name|git
decl_stmt|;
try|try
block|{
name|git
operator|=
name|mgr
operator|.
name|openRepository
argument_list|(
name|DEFAULT_WILD_NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|notFound
parameter_list|)
block|{
comment|// A repository may be missing if this project existed only to store
comment|// inheritable permissions. For example 'All-Projects'.
try|try
block|{
name|git
operator|=
name|mgr
operator|.
name|createRepository
argument_list|(
name|DEFAULT_WILD_NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|err
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|DEFAULT_WILD_NAME
operator|.
name|get
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create repository "
operator|+
name|name
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|MetaDataUpdate
name|md
init|=
operator|new
name|MetaDataUpdate
argument_list|(
operator|new
name|NoReplication
argument_list|()
argument_list|,
name|DEFAULT_WILD_NAME
argument_list|,
name|git
argument_list|)
decl_stmt|;
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|serverUser
argument_list|)
expr_stmt|;
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
name|serverUser
argument_list|)
expr_stmt|;
name|ProjectConfig
name|config
init|=
name|ProjectConfig
operator|.
name|read
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|Project
name|p
init|=
name|config
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|p
operator|.
name|setDescription
argument_list|(
literal|"Rights inherited by all other projects"
argument_list|)
expr_stmt|;
name|p
operator|.
name|setUseContributorAgreements
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|AccessSection
name|capabilities
init|=
name|config
operator|.
name|getAccessSection
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PermissionRange
operator|.
name|WithDefaults
name|queryLimit
init|=
name|GlobalCapability
operator|.
name|getRange
argument_list|(
name|GlobalCapability
operator|.
name|QUERY_LIMIT
argument_list|)
decl_stmt|;
name|capabilities
operator|.
name|getPermission
argument_list|(
name|GlobalCapability
operator|.
name|QUERY_LIMIT
argument_list|,
literal|true
argument_list|)
operator|.
name|add
argument_list|(
name|rule
argument_list|(
name|config
argument_list|,
name|anonymous
argument_list|,
name|queryLimit
operator|.
name|getDefaultMax
argument_list|()
argument_list|,
name|queryLimit
operator|.
name|getDefaultMax
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|AccessSection
name|all
init|=
name|config
operator|.
name|getAccessSection
argument_list|(
name|AccessSection
operator|.
name|ALL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|AccessSection
name|heads
init|=
name|config
operator|.
name|getAccessSection
argument_list|(
name|AccessSection
operator|.
name|HEADS
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|AccessSection
name|meta
init|=
name|config
operator|.
name|getAccessSection
argument_list|(
name|GitRepositoryManager
operator|.
name|REF_CONFIG
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PermissionRule
name|review
init|=
name|rule
argument_list|(
name|config
argument_list|,
name|registered
argument_list|)
decl_stmt|;
name|review
operator|.
name|setRange
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|heads
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
literal|true
argument_list|)
operator|.
name|add
argument_list|(
name|review
argument_list|)
expr_stmt|;
name|all
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|READ
argument_list|,
literal|true
argument_list|)
comment|//
operator|.
name|add
argument_list|(
name|rule
argument_list|(
name|config
argument_list|,
name|admin
argument_list|)
argument_list|)
expr_stmt|;
name|all
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|READ
argument_list|,
literal|true
argument_list|)
comment|//
operator|.
name|add
argument_list|(
name|rule
argument_list|(
name|config
argument_list|,
name|anonymous
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|getAccessSection
argument_list|(
literal|"refs/for/"
operator|+
name|AccessSection
operator|.
name|ALL
argument_list|,
literal|true
argument_list|)
comment|//
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|,
literal|true
argument_list|)
comment|//
operator|.
name|add
argument_list|(
name|rule
argument_list|(
name|config
argument_list|,
name|registered
argument_list|)
argument_list|)
expr_stmt|;
name|all
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|FORGE_AUTHOR
argument_list|,
literal|true
argument_list|)
comment|//
operator|.
name|add
argument_list|(
name|rule
argument_list|(
name|config
argument_list|,
name|registered
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|READ
argument_list|,
literal|true
argument_list|)
comment|//
operator|.
name|add
argument_list|(
name|rule
argument_list|(
name|config
argument_list|,
name|owners
argument_list|)
argument_list|)
expr_stmt|;
name|md
operator|.
name|setMessage
argument_list|(
literal|"Initialized Gerrit Code Review "
operator|+
name|Version
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|commit
argument_list|(
name|md
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create "
operator|+
name|DEFAULT_WILD_NAME
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|git
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|rule (ProjectConfig config, AccountGroup group)
specifier|private
name|PermissionRule
name|rule
parameter_list|(
name|ProjectConfig
name|config
parameter_list|,
name|AccountGroup
name|group
parameter_list|)
block|{
return|return
operator|new
name|PermissionRule
argument_list|(
name|config
operator|.
name|resolve
argument_list|(
name|group
argument_list|)
argument_list|)
return|;
block|}
DECL|method|rule (ProjectConfig config, AccountGroup group, int min, int max)
specifier|private
name|PermissionRule
name|rule
parameter_list|(
name|ProjectConfig
name|config
parameter_list|,
name|AccountGroup
name|group
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|PermissionRule
name|rule
init|=
operator|new
name|PermissionRule
argument_list|(
name|config
operator|.
name|resolve
argument_list|(
name|group
argument_list|)
argument_list|)
decl_stmt|;
name|rule
operator|.
name|setRange
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
return|return
name|rule
return|;
block|}
DECL|method|initVerifiedCategory (final ReviewDb c)
specifier|private
name|void
name|initVerifiedCategory
parameter_list|(
specifier|final
name|ReviewDb
name|c
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|ApprovalCategory
name|cat
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ApprovalCategoryValue
argument_list|>
name|vals
decl_stmt|;
name|cat
operator|=
operator|new
name|ApprovalCategory
argument_list|(
operator|new
name|ApprovalCategory
operator|.
name|Id
argument_list|(
literal|"VRIF"
argument_list|)
argument_list|,
literal|"Verified"
argument_list|)
expr_stmt|;
name|cat
operator|.
name|setPosition
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|cat
operator|.
name|setAbbreviatedName
argument_list|(
literal|"V"
argument_list|)
expr_stmt|;
name|vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|ApprovalCategoryValue
argument_list|>
argument_list|()
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
literal|1
argument_list|,
literal|"Verified"
argument_list|)
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
operator|-
literal|1
argument_list|,
literal|"Fails"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|approvalCategories
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|cat
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|approvalCategoryValues
argument_list|()
operator|.
name|insert
argument_list|(
name|vals
argument_list|)
expr_stmt|;
block|}
DECL|method|initCodeReviewCategory (final ReviewDb c, final SystemConfig sConfig)
specifier|private
name|void
name|initCodeReviewCategory
parameter_list|(
specifier|final
name|ReviewDb
name|c
parameter_list|,
specifier|final
name|SystemConfig
name|sConfig
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|ApprovalCategory
name|cat
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ApprovalCategoryValue
argument_list|>
name|vals
decl_stmt|;
name|cat
operator|=
operator|new
name|ApprovalCategory
argument_list|(
operator|new
name|ApprovalCategory
operator|.
name|Id
argument_list|(
literal|"CRVW"
argument_list|)
argument_list|,
literal|"Code Review"
argument_list|)
expr_stmt|;
name|cat
operator|.
name|setPosition
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|cat
operator|.
name|setAbbreviatedName
argument_list|(
literal|"R"
argument_list|)
expr_stmt|;
name|cat
operator|.
name|setCopyMinScore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|ApprovalCategoryValue
argument_list|>
argument_list|()
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
literal|2
argument_list|,
literal|"Looks good to me, approved"
argument_list|)
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
literal|1
argument_list|,
literal|"Looks good to me, but someone else must approve"
argument_list|)
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
operator|-
literal|1
argument_list|,
literal|"I would prefer that you didn't submit this"
argument_list|)
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|value
argument_list|(
name|cat
argument_list|,
operator|-
literal|2
argument_list|,
literal|"Do not submit"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|approvalCategories
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|cat
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|approvalCategoryValues
argument_list|()
operator|.
name|insert
argument_list|(
name|vals
argument_list|)
expr_stmt|;
block|}
DECL|method|value (final ApprovalCategory cat, final int value, final String name)
specifier|private
specifier|static
name|ApprovalCategoryValue
name|value
parameter_list|(
specifier|final
name|ApprovalCategory
name|cat
parameter_list|,
specifier|final
name|int
name|value
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|ApprovalCategoryValue
argument_list|(
operator|new
name|ApprovalCategoryValue
operator|.
name|Id
argument_list|(
name|cat
operator|.
name|getId
argument_list|()
argument_list|,
operator|(
name|short
operator|)
name|value
argument_list|)
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

