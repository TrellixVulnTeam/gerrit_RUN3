begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ChangeAccess
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|IntPredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|QueryRewriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|RewritePredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|OutOfScopeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_class
DECL|class|ChangeQueryRewriter
specifier|public
class|class
name|ChangeQueryRewriter
extends|extends
name|QueryRewriter
argument_list|<
name|ChangeData
argument_list|>
block|{
DECL|field|mydef
specifier|private
specifier|static
specifier|final
name|QueryRewriter
operator|.
name|Definition
argument_list|<
name|ChangeData
argument_list|,
name|ChangeQueryRewriter
argument_list|>
name|mydef
init|=
operator|new
name|QueryRewriter
operator|.
name|Definition
argument_list|<
name|ChangeData
argument_list|,
name|ChangeQueryRewriter
argument_list|>
argument_list|(
name|ChangeQueryRewriter
operator|.
name|class
argument_list|,
operator|new
name|ChangeQueryBuilder
argument_list|(
operator|new
name|ChangeQueryBuilder
operator|.
name|Arguments
argument_list|(
comment|//
operator|new
name|InvalidProvider
argument_list|<
name|ReviewDb
argument_list|>
argument_list|()
argument_list|,
comment|//
operator|new
name|InvalidProvider
argument_list|<
name|ChangeQueryRewriter
argument_list|>
argument_list|()
argument_list|,
comment|//
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|dbProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChangeQueryRewriter (Provider<ReviewDb> dbProvider)
name|ChangeQueryRewriter
parameter_list|(
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
parameter_list|)
block|{
name|super
argument_list|(
name|mydef
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbProvider
operator|=
name|dbProvider
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|and (Collection<? extends Predicate<ChangeData>> l)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|and
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|l
parameter_list|)
block|{
return|return
name|hasSource
argument_list|(
name|l
argument_list|)
condition|?
operator|new
name|AndSource
argument_list|(
name|l
argument_list|)
else|:
name|super
operator|.
name|and
argument_list|(
name|l
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|or (Collection<? extends Predicate<ChangeData>> l)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|or
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|l
parameter_list|)
block|{
return|return
name|hasSource
argument_list|(
name|l
argument_list|)
condition|?
operator|new
name|OrSource
argument_list|(
name|l
argument_list|)
else|:
name|super
operator|.
name|or
argument_list|(
name|l
argument_list|)
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"-status:open"
argument_list|)
annotation|@
name|NoCostComputation
DECL|method|r00_notOpen ()
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r00_notOpen
parameter_list|()
block|{
return|return
name|ChangeStatusPredicate
operator|.
name|closed
argument_list|(
name|dbProvider
argument_list|)
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"-status:closed"
argument_list|)
annotation|@
name|NoCostComputation
DECL|method|r00_notClosed ()
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r00_notClosed
parameter_list|()
block|{
return|return
name|ChangeStatusPredicate
operator|.
name|open
argument_list|(
name|dbProvider
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|NoCostComputation
annotation|@
name|Rewrite
argument_list|(
literal|"-status:merged"
argument_list|)
DECL|method|r00_notMerged ()
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r00_notMerged
parameter_list|()
block|{
return|return
name|or
argument_list|(
name|ChangeStatusPredicate
operator|.
name|open
argument_list|(
name|dbProvider
argument_list|)
argument_list|,
operator|new
name|ChangeStatusPredicate
argument_list|(
name|dbProvider
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|NoCostComputation
annotation|@
name|Rewrite
argument_list|(
literal|"-status:abandoned"
argument_list|)
DECL|method|r00_notAbandoned ()
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r00_notAbandoned
parameter_list|()
block|{
return|return
name|or
argument_list|(
name|ChangeStatusPredicate
operator|.
name|open
argument_list|(
name|dbProvider
argument_list|)
argument_list|,
operator|new
name|ChangeStatusPredicate
argument_list|(
name|dbProvider
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|NoCostComputation
annotation|@
name|Rewrite
argument_list|(
literal|"sortkey_before:z A=(age:*)"
argument_list|)
DECL|method|r00_ageToSortKey (@amedR) AgePredicate a)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r00_ageToSortKey
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"A"
argument_list|)
name|AgePredicate
name|a
parameter_list|)
block|{
name|String
name|cut
init|=
name|ChangeUtil
operator|.
name|sortKey
argument_list|(
name|a
operator|.
name|getCut
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
return|return
name|and
argument_list|(
operator|new
name|SortKeyPredicate
operator|.
name|Before
argument_list|(
name|dbProvider
argument_list|,
name|cut
argument_list|)
argument_list|,
name|a
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|NoCostComputation
annotation|@
name|Rewrite
argument_list|(
literal|"A=(limit:*) B=(limit:*)"
argument_list|)
DECL|method|r00_smallestLimit ( @amedR) IntPredicate<ChangeData> a, @Named(R) IntPredicate<ChangeData> b)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r00_smallestLimit
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"A"
argument_list|)
name|IntPredicate
argument_list|<
name|ChangeData
argument_list|>
name|a
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"B"
argument_list|)
name|IntPredicate
argument_list|<
name|ChangeData
argument_list|>
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|intValue
argument_list|()
operator|<=
name|b
operator|.
name|intValue
argument_list|()
condition|?
name|a
else|:
name|b
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|NoCostComputation
annotation|@
name|Rewrite
argument_list|(
literal|"A=(sortkey_before:*) B=(sortkey_before:*)"
argument_list|)
DECL|method|r00_oldestSortKey ( @amedR) SortKeyPredicate.Before a, @Named(R) SortKeyPredicate.Before b)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r00_oldestSortKey
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"A"
argument_list|)
name|SortKeyPredicate
operator|.
name|Before
name|a
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"B"
argument_list|)
name|SortKeyPredicate
operator|.
name|Before
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getValue
argument_list|()
argument_list|)
operator|<=
literal|0
condition|?
name|a
else|:
name|b
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|NoCostComputation
annotation|@
name|Rewrite
argument_list|(
literal|"A=(sortkey_after:*) B=(sortkey_after:*)"
argument_list|)
DECL|method|r00_newestSortKey ( @amedR) SortKeyPredicate.After a, @Named(R) SortKeyPredicate.After b)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r00_newestSortKey
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"A"
argument_list|)
name|SortKeyPredicate
operator|.
name|After
name|a
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"B"
argument_list|)
name|SortKeyPredicate
operator|.
name|After
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getValue
argument_list|()
argument_list|)
operator|>=
literal|0
condition|?
name|a
else|:
name|b
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"status:open P=(project:*) S=(sortkey_after:*) L=(limit:*)"
argument_list|)
DECL|method|r10_byProjectOpenPrev ( @amedR) final ProjectPredicate p, @Named(R) final SortKeyPredicate.After s, @Named(R) final IntPredicate<ChangeData> l)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r10_byProjectOpenPrev
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"P"
argument_list|)
specifier|final
name|ProjectPredicate
name|p
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"S"
argument_list|)
specifier|final
name|SortKeyPredicate
operator|.
name|After
name|s
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"L"
argument_list|)
specifier|final
name|IntPredicate
argument_list|<
name|ChangeData
argument_list|>
name|l
parameter_list|)
block|{
return|return
operator|new
name|PaginatedSource
argument_list|(
literal|500
argument_list|,
name|s
operator|.
name|getValue
argument_list|()
argument_list|,
name|l
operator|.
name|intValue
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|a
operator|.
name|byProjectOpenPrev
argument_list|(
name|p
operator|.
name|getValueKey
argument_list|()
argument_list|,
name|key
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|cd
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
comment|//
operator|&&
name|p
operator|.
name|match
argument_list|(
name|cd
argument_list|)
comment|//
operator|&&
name|s
operator|.
name|match
argument_list|(
name|cd
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"status:open P=(project:*) S=(sortkey_before:*) L=(limit:*)"
argument_list|)
DECL|method|r10_byProjectOpenNext ( @amedR) final ProjectPredicate p, @Named(R) final SortKeyPredicate.Before s, @Named(R) final IntPredicate<ChangeData> l)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r10_byProjectOpenNext
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"P"
argument_list|)
specifier|final
name|ProjectPredicate
name|p
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"S"
argument_list|)
specifier|final
name|SortKeyPredicate
operator|.
name|Before
name|s
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"L"
argument_list|)
specifier|final
name|IntPredicate
argument_list|<
name|ChangeData
argument_list|>
name|l
parameter_list|)
block|{
return|return
operator|new
name|PaginatedSource
argument_list|(
literal|500
argument_list|,
name|s
operator|.
name|getValue
argument_list|()
argument_list|,
name|l
operator|.
name|intValue
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|a
operator|.
name|byProjectOpenNext
argument_list|(
name|p
operator|.
name|getValueKey
argument_list|()
argument_list|,
name|key
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|cd
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
comment|//
operator|&&
name|p
operator|.
name|match
argument_list|(
name|cd
argument_list|)
comment|//
operator|&&
name|s
operator|.
name|match
argument_list|(
name|cd
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"status:merged P=(project:*) S=(sortkey_after:*) L=(limit:*)"
argument_list|)
DECL|method|r10_byProjectMergedPrev ( @amedR) final ProjectPredicate p, @Named(R) final SortKeyPredicate.After s, @Named(R) final IntPredicate<ChangeData> l)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r10_byProjectMergedPrev
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"P"
argument_list|)
specifier|final
name|ProjectPredicate
name|p
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"S"
argument_list|)
specifier|final
name|SortKeyPredicate
operator|.
name|After
name|s
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"L"
argument_list|)
specifier|final
name|IntPredicate
argument_list|<
name|ChangeData
argument_list|>
name|l
parameter_list|)
block|{
return|return
operator|new
name|PaginatedSource
argument_list|(
literal|40000
argument_list|,
name|s
operator|.
name|getValue
argument_list|()
argument_list|,
name|l
operator|.
name|intValue
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|a
operator|.
name|byProjectClosedPrev
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
operator|.
name|getCode
argument_list|()
argument_list|,
comment|//
name|p
operator|.
name|getValueKey
argument_list|()
argument_list|,
name|key
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|cd
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|MERGED
operator|&&
name|p
operator|.
name|match
argument_list|(
name|cd
argument_list|)
comment|//
operator|&&
name|s
operator|.
name|match
argument_list|(
name|cd
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"status:merged P=(project:*) S=(sortkey_before:*) L=(limit:*)"
argument_list|)
DECL|method|r10_byProjectMergedNext ( @amedR) final ProjectPredicate p, @Named(R) final SortKeyPredicate.Before s, @Named(R) final IntPredicate<ChangeData> l)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r10_byProjectMergedNext
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"P"
argument_list|)
specifier|final
name|ProjectPredicate
name|p
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"S"
argument_list|)
specifier|final
name|SortKeyPredicate
operator|.
name|Before
name|s
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"L"
argument_list|)
specifier|final
name|IntPredicate
argument_list|<
name|ChangeData
argument_list|>
name|l
parameter_list|)
block|{
return|return
operator|new
name|PaginatedSource
argument_list|(
literal|40000
argument_list|,
name|s
operator|.
name|getValue
argument_list|()
argument_list|,
name|l
operator|.
name|intValue
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|a
operator|.
name|byProjectClosedNext
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
operator|.
name|getCode
argument_list|()
argument_list|,
comment|//
name|p
operator|.
name|getValueKey
argument_list|()
argument_list|,
name|key
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|cd
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|MERGED
operator|&&
name|p
operator|.
name|match
argument_list|(
name|cd
argument_list|)
comment|//
operator|&&
name|s
operator|.
name|match
argument_list|(
name|cd
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"status:abandoned P=(project:*) S=(sortkey_after:*) L=(limit:*)"
argument_list|)
DECL|method|r10_byProjectAbandonedPrev ( @amedR) final ProjectPredicate p, @Named(R) final SortKeyPredicate.After s, @Named(R) final IntPredicate<ChangeData> l)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r10_byProjectAbandonedPrev
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"P"
argument_list|)
specifier|final
name|ProjectPredicate
name|p
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"S"
argument_list|)
specifier|final
name|SortKeyPredicate
operator|.
name|After
name|s
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"L"
argument_list|)
specifier|final
name|IntPredicate
argument_list|<
name|ChangeData
argument_list|>
name|l
parameter_list|)
block|{
return|return
operator|new
name|PaginatedSource
argument_list|(
literal|40000
argument_list|,
name|s
operator|.
name|getValue
argument_list|()
argument_list|,
name|l
operator|.
name|intValue
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|a
operator|.
name|byProjectClosedPrev
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
operator|.
name|getCode
argument_list|()
argument_list|,
comment|//
name|p
operator|.
name|getValueKey
argument_list|()
argument_list|,
name|key
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|cd
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
operator|&&
name|p
operator|.
name|match
argument_list|(
name|cd
argument_list|)
comment|//
operator|&&
name|s
operator|.
name|match
argument_list|(
name|cd
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"status:abandoned P=(project:*) S=(sortkey_before:*) L=(limit:*)"
argument_list|)
DECL|method|r10_byProjectAbandonedNext ( @amedR) final ProjectPredicate p, @Named(R) final SortKeyPredicate.Before s, @Named(R) final IntPredicate<ChangeData> l)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r10_byProjectAbandonedNext
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"P"
argument_list|)
specifier|final
name|ProjectPredicate
name|p
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"S"
argument_list|)
specifier|final
name|SortKeyPredicate
operator|.
name|Before
name|s
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"L"
argument_list|)
specifier|final
name|IntPredicate
argument_list|<
name|ChangeData
argument_list|>
name|l
parameter_list|)
block|{
return|return
operator|new
name|PaginatedSource
argument_list|(
literal|40000
argument_list|,
name|s
operator|.
name|getValue
argument_list|()
argument_list|,
name|l
operator|.
name|intValue
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|a
operator|.
name|byProjectClosedNext
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
operator|.
name|getCode
argument_list|()
argument_list|,
comment|//
name|p
operator|.
name|getValueKey
argument_list|()
argument_list|,
name|key
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|cd
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
operator|&&
name|p
operator|.
name|match
argument_list|(
name|cd
argument_list|)
comment|//
operator|&&
name|s
operator|.
name|match
argument_list|(
name|cd
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"status:open S=(sortkey_after:*) L=(limit:*)"
argument_list|)
DECL|method|r20_byOpenPrev ( @amedR) final SortKeyPredicate.After s, @Named(R) final IntPredicate<ChangeData> l)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r20_byOpenPrev
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"S"
argument_list|)
specifier|final
name|SortKeyPredicate
operator|.
name|After
name|s
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"L"
argument_list|)
specifier|final
name|IntPredicate
argument_list|<
name|ChangeData
argument_list|>
name|l
parameter_list|)
block|{
return|return
operator|new
name|PaginatedSource
argument_list|(
literal|2000
argument_list|,
name|s
operator|.
name|getValue
argument_list|()
argument_list|,
name|l
operator|.
name|intValue
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|a
operator|.
name|allOpenPrev
argument_list|(
name|key
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|cd
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
operator|&&
name|s
operator|.
name|match
argument_list|(
name|cd
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"status:open S=(sortkey_before:*) L=(limit:*)"
argument_list|)
DECL|method|r20_byOpenNext ( @amedR) final SortKeyPredicate.Before s, @Named(R) final IntPredicate<ChangeData> l)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r20_byOpenNext
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"S"
argument_list|)
specifier|final
name|SortKeyPredicate
operator|.
name|Before
name|s
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"L"
argument_list|)
specifier|final
name|IntPredicate
argument_list|<
name|ChangeData
argument_list|>
name|l
parameter_list|)
block|{
return|return
operator|new
name|PaginatedSource
argument_list|(
literal|2000
argument_list|,
name|s
operator|.
name|getValue
argument_list|()
argument_list|,
name|l
operator|.
name|intValue
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|a
operator|.
name|allOpenNext
argument_list|(
name|key
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|cd
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
operator|&&
name|s
operator|.
name|match
argument_list|(
name|cd
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"status:merged S=(sortkey_after:*) L=(limit:*)"
argument_list|)
DECL|method|r20_byMergedPrev ( @amedR) final SortKeyPredicate.After s, @Named(R) final IntPredicate<ChangeData> l)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r20_byMergedPrev
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"S"
argument_list|)
specifier|final
name|SortKeyPredicate
operator|.
name|After
name|s
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"L"
argument_list|)
specifier|final
name|IntPredicate
argument_list|<
name|ChangeData
argument_list|>
name|l
parameter_list|)
block|{
return|return
operator|new
name|PaginatedSource
argument_list|(
literal|50000
argument_list|,
name|s
operator|.
name|getValue
argument_list|()
argument_list|,
name|l
operator|.
name|intValue
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|a
operator|.
name|allClosedPrev
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
operator|.
name|getCode
argument_list|()
argument_list|,
name|key
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|cd
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|MERGED
operator|&&
name|s
operator|.
name|match
argument_list|(
name|cd
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"status:merged S=(sortkey_before:*) L=(limit:*)"
argument_list|)
DECL|method|r20_byMergedNext ( @amedR) final SortKeyPredicate.Before s, @Named(R) final IntPredicate<ChangeData> l)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r20_byMergedNext
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"S"
argument_list|)
specifier|final
name|SortKeyPredicate
operator|.
name|Before
name|s
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"L"
argument_list|)
specifier|final
name|IntPredicate
argument_list|<
name|ChangeData
argument_list|>
name|l
parameter_list|)
block|{
return|return
operator|new
name|PaginatedSource
argument_list|(
literal|50000
argument_list|,
name|s
operator|.
name|getValue
argument_list|()
argument_list|,
name|l
operator|.
name|intValue
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|a
operator|.
name|allClosedNext
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
operator|.
name|getCode
argument_list|()
argument_list|,
name|key
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|cd
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|MERGED
operator|&&
name|s
operator|.
name|match
argument_list|(
name|cd
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"status:abandoned S=(sortkey_after:*) L=(limit:*)"
argument_list|)
DECL|method|r20_byAbandonedPrev ( @amedR) final SortKeyPredicate.After s, @Named(R) final IntPredicate<ChangeData> l)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r20_byAbandonedPrev
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"S"
argument_list|)
specifier|final
name|SortKeyPredicate
operator|.
name|After
name|s
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"L"
argument_list|)
specifier|final
name|IntPredicate
argument_list|<
name|ChangeData
argument_list|>
name|l
parameter_list|)
block|{
return|return
operator|new
name|PaginatedSource
argument_list|(
literal|50000
argument_list|,
name|s
operator|.
name|getValue
argument_list|()
argument_list|,
name|l
operator|.
name|intValue
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|a
operator|.
name|allClosedPrev
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
operator|.
name|getCode
argument_list|()
argument_list|,
name|key
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|cd
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
operator|&&
name|s
operator|.
name|match
argument_list|(
name|cd
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"status:abandoned S=(sortkey_before:*) L=(limit:*)"
argument_list|)
DECL|method|r20_byAbandonedNext ( @amedR) final SortKeyPredicate.Before s, @Named(R) final IntPredicate<ChangeData> l)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r20_byAbandonedNext
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"S"
argument_list|)
specifier|final
name|SortKeyPredicate
operator|.
name|Before
name|s
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"L"
argument_list|)
specifier|final
name|IntPredicate
argument_list|<
name|ChangeData
argument_list|>
name|l
parameter_list|)
block|{
return|return
operator|new
name|PaginatedSource
argument_list|(
literal|50000
argument_list|,
name|s
operator|.
name|getValue
argument_list|()
argument_list|,
name|l
operator|.
name|intValue
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|a
operator|.
name|allClosedNext
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
operator|.
name|getCode
argument_list|()
argument_list|,
name|key
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|cd
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
operator|&&
name|s
operator|.
name|match
argument_list|(
name|cd
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Rewrite
argument_list|(
literal|"status:closed S=(sortkey_after:*) L=(limit:*)"
argument_list|)
DECL|method|r20_byClosedPrev ( @amedR) final SortKeyPredicate.After s, @Named(R) final IntPredicate<ChangeData> l)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r20_byClosedPrev
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"S"
argument_list|)
specifier|final
name|SortKeyPredicate
operator|.
name|After
name|s
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"L"
argument_list|)
specifier|final
name|IntPredicate
argument_list|<
name|ChangeData
argument_list|>
name|l
parameter_list|)
block|{
return|return
name|or
argument_list|(
name|r20_byMergedPrev
argument_list|(
name|s
argument_list|,
name|l
argument_list|)
argument_list|,
name|r20_byAbandonedPrev
argument_list|(
name|s
argument_list|,
name|l
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Rewrite
argument_list|(
literal|"status:closed S=(sortkey_after:*) L=(limit:*)"
argument_list|)
DECL|method|r20_byClosedNext ( @amedR) final SortKeyPredicate.Before s, @Named(R) final IntPredicate<ChangeData> l)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r20_byClosedNext
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"S"
argument_list|)
specifier|final
name|SortKeyPredicate
operator|.
name|Before
name|s
parameter_list|,
annotation|@
name|Named
argument_list|(
literal|"L"
argument_list|)
specifier|final
name|IntPredicate
argument_list|<
name|ChangeData
argument_list|>
name|l
parameter_list|)
block|{
return|return
name|or
argument_list|(
name|r20_byMergedNext
argument_list|(
name|s
argument_list|,
name|l
argument_list|)
argument_list|,
name|r20_byAbandonedNext
argument_list|(
name|s
argument_list|,
name|l
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"status:open O=(owner:*)"
argument_list|)
DECL|method|r25_byOwnerOpen ( @amedR) final OwnerPredicate o)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r25_byOwnerOpen
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"O"
argument_list|)
specifier|final
name|OwnerPredicate
name|o
parameter_list|)
block|{
return|return
operator|new
name|ChangeSource
argument_list|(
literal|50
argument_list|)
block|{
annotation|@
name|Override
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|a
operator|.
name|byOwnerOpen
argument_list|(
name|o
operator|.
name|getAccountId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|cd
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
operator|&&
name|o
operator|.
name|match
argument_list|(
name|cd
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"status:closed O=(owner:*)"
argument_list|)
DECL|method|r25_byOwnerClosed ( @amedR) final OwnerPredicate o)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r25_byOwnerClosed
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"O"
argument_list|)
specifier|final
name|OwnerPredicate
name|o
parameter_list|)
block|{
return|return
operator|new
name|ChangeSource
argument_list|(
literal|5000
argument_list|)
block|{
annotation|@
name|Override
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|a
operator|.
name|byOwnerClosedAll
argument_list|(
name|o
operator|.
name|getAccountId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|cd
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
operator|&&
name|o
operator|.
name|match
argument_list|(
name|cd
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Rewrite
argument_list|(
literal|"O=(owner:*)"
argument_list|)
DECL|method|r26_byOwner (@amedR) OwnerPredicate o)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r26_byOwner
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"O"
argument_list|)
name|OwnerPredicate
name|o
parameter_list|)
block|{
return|return
name|or
argument_list|(
name|r25_byOwnerOpen
argument_list|(
name|o
argument_list|)
argument_list|,
name|r25_byOwnerClosed
argument_list|(
name|o
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"status:open R=(reviewer:*)"
argument_list|)
DECL|method|r30_byReviewerOpen ( @amedR) final ReviewerPredicate r)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r30_byReviewerOpen
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"R"
argument_list|)
specifier|final
name|ReviewerPredicate
name|r
parameter_list|)
block|{
return|return
operator|new
name|Source
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ResultSet
argument_list|<
name|ChangeData
argument_list|>
name|read
parameter_list|()
throws|throws
name|OrmException
block|{
return|return
name|ChangeDataResultSet
operator|.
name|patchSetApproval
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|openByUser
argument_list|(
name|r
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|change
init|=
name|cd
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
decl_stmt|;
return|return
name|change
operator|!=
literal|null
operator|&&
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
operator|&&
name|r
operator|.
name|match
argument_list|(
name|cd
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCardinality
parameter_list|()
block|{
return|return
literal|50
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
name|ChangeCosts
operator|.
name|cost
argument_list|(
name|ChangeCosts
operator|.
name|APPROVALS_SCAN
argument_list|,
name|getCardinality
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Rewrite
argument_list|(
literal|"status:closed R=(reviewer:*)"
argument_list|)
DECL|method|r30_byReviewerClosed ( @amedR) final ReviewerPredicate r)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r30_byReviewerClosed
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"R"
argument_list|)
specifier|final
name|ReviewerPredicate
name|r
parameter_list|)
block|{
return|return
operator|new
name|Source
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ResultSet
argument_list|<
name|ChangeData
argument_list|>
name|read
parameter_list|()
throws|throws
name|OrmException
block|{
return|return
name|ChangeDataResultSet
operator|.
name|patchSetApproval
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|closedByUserAll
argument_list|(
name|r
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|change
init|=
name|cd
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
decl_stmt|;
return|return
name|change
operator|!=
literal|null
operator|&&
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
operator|&&
name|r
operator|.
name|match
argument_list|(
name|cd
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCardinality
parameter_list|()
block|{
return|return
literal|5000
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
name|ChangeCosts
operator|.
name|cost
argument_list|(
name|ChangeCosts
operator|.
name|APPROVALS_SCAN
argument_list|,
name|getCardinality
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Rewrite
argument_list|(
literal|"R=(reviewer:*)"
argument_list|)
DECL|method|r31_byReviewer ( @amedR) final ReviewerPredicate r)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r31_byReviewer
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"R"
argument_list|)
specifier|final
name|ReviewerPredicate
name|r
parameter_list|)
block|{
return|return
name|or
argument_list|(
name|r30_byReviewerOpen
argument_list|(
name|r
argument_list|)
argument_list|,
name|r30_byReviewerClosed
argument_list|(
name|r
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Rewrite
argument_list|(
literal|"status:submitted"
argument_list|)
DECL|method|r99_allSubmitted ()
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r99_allSubmitted
parameter_list|()
block|{
return|return
operator|new
name|ChangeSource
argument_list|(
literal|50
argument_list|)
block|{
annotation|@
name|Override
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|a
operator|.
name|allSubmitted
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|cd
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|SUBMITTED
return|;
block|}
block|}
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Rewrite
argument_list|(
literal|"P=(project:*)"
argument_list|)
DECL|method|r99_byProject ( @amedR) final ProjectPredicate p)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r99_byProject
parameter_list|(
annotation|@
name|Named
argument_list|(
literal|"P"
argument_list|)
specifier|final
name|ProjectPredicate
name|p
parameter_list|)
block|{
return|return
operator|new
name|ChangeSource
argument_list|(
literal|1000000
argument_list|)
block|{
annotation|@
name|Override
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|a
operator|.
name|byProject
argument_list|(
name|p
operator|.
name|getValueKey
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|p
operator|.
name|match
argument_list|(
name|cd
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|hasSource (Collection<? extends Predicate<ChangeData>> l)
specifier|private
specifier|static
name|boolean
name|hasSource
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|l
parameter_list|)
block|{
for|for
control|(
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|p
range|:
name|l
control|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|ChangeDataSource
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|class|Source
specifier|private
specifier|abstract
specifier|static
class|class
name|Source
extends|extends
name|RewritePredicate
argument_list|<
name|ChangeData
argument_list|>
implements|implements
name|ChangeDataSource
block|{
annotation|@
name|Override
DECL|method|hasChange ()
specifier|public
name|boolean
name|hasChange
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|class|ChangeSource
specifier|private
specifier|abstract
class|class
name|ChangeSource
extends|extends
name|Source
block|{
DECL|field|cardinality
specifier|private
specifier|final
name|int
name|cardinality
decl_stmt|;
DECL|method|ChangeSource (int card)
name|ChangeSource
parameter_list|(
name|int
name|card
parameter_list|)
block|{
name|this
operator|.
name|cardinality
operator|=
name|card
expr_stmt|;
block|}
DECL|method|scan (ChangeAccess a)
specifier|abstract
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|)
throws|throws
name|OrmException
function_decl|;
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|ResultSet
argument_list|<
name|ChangeData
argument_list|>
name|read
parameter_list|()
throws|throws
name|OrmException
block|{
return|return
name|ChangeDataResultSet
operator|.
name|change
argument_list|(
name|scan
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
operator|.
name|changes
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hasChange ()
specifier|public
name|boolean
name|hasChange
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getCardinality ()
specifier|public
name|int
name|getCardinality
parameter_list|()
block|{
return|return
name|cardinality
return|;
block|}
annotation|@
name|Override
DECL|method|getCost ()
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
name|ChangeCosts
operator|.
name|cost
argument_list|(
name|ChangeCosts
operator|.
name|CHANGES_SCAN
argument_list|,
name|getCardinality
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|PaginatedSource
specifier|private
specifier|abstract
class|class
name|PaginatedSource
extends|extends
name|ChangeSource
implements|implements
name|Paginated
block|{
DECL|field|startKey
specifier|private
specifier|final
name|String
name|startKey
decl_stmt|;
DECL|field|limit
specifier|private
specifier|final
name|int
name|limit
decl_stmt|;
DECL|method|PaginatedSource (int card, String start, int lim)
name|PaginatedSource
parameter_list|(
name|int
name|card
parameter_list|,
name|String
name|start
parameter_list|,
name|int
name|lim
parameter_list|)
block|{
name|super
argument_list|(
name|card
argument_list|)
expr_stmt|;
name|this
operator|.
name|startKey
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|lim
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|limit ()
specifier|public
name|int
name|limit
parameter_list|()
block|{
return|return
name|limit
return|;
block|}
annotation|@
name|Override
DECL|method|scan (ChangeAccess a)
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|scan
argument_list|(
name|a
argument_list|,
name|startKey
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|restart (ChangeData last)
specifier|public
name|ResultSet
argument_list|<
name|ChangeData
argument_list|>
name|restart
parameter_list|(
name|ChangeData
name|last
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|ChangeDataResultSet
operator|.
name|change
argument_list|(
name|scan
argument_list|(
name|dbProvider
operator|.
name|get
argument_list|()
operator|.
name|changes
argument_list|()
argument_list|,
comment|//
name|last
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
operator|.
name|getSortKey
argument_list|()
argument_list|,
comment|//
name|limit
argument_list|)
argument_list|)
return|;
block|}
DECL|method|scan (ChangeAccess a, String key, int limit)
specifier|abstract
name|ResultSet
argument_list|<
name|Change
argument_list|>
name|scan
parameter_list|(
name|ChangeAccess
name|a
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|OrmException
function_decl|;
block|}
DECL|class|InvalidProvider
specifier|private
specifier|static
specifier|final
class|class
name|InvalidProvider
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Provider
argument_list|<
name|T
argument_list|>
block|{
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|T
name|get
parameter_list|()
block|{
throw|throw
operator|new
name|OutOfScopeException
argument_list|(
literal|"Not available at init"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

