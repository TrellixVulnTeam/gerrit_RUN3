begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
operator|.
name|sortApprovals
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitTypeRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RobotComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AnonymousUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CommentsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchSetUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ReviewerByEmailSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ReviewerSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ReviewerStatusUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StarredChangesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StarredChangesUtil
operator|.
name|StarRef
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|GetPureRevert
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|MergeabilityCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|TrackingFooters
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MergeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|DiffSummary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|SubmitRuleEvaluator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|SubmitRuleOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_class
DECL|class|ChangeData
specifier|public
class|class
name|ChangeData
block|{
DECL|field|BATCH_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BATCH_SIZE
init|=
literal|50
decl_stmt|;
DECL|method|asChanges (List<ChangeData> changeDatas)
specifier|public
specifier|static
name|List
argument_list|<
name|Change
argument_list|>
name|asChanges
parameter_list|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changeDatas
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|Change
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|changeDatas
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|changeDatas
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|cd
operator|.
name|change
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|asMap (List<ChangeData> changes)
specifier|public
specifier|static
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeData
argument_list|>
name|asMap
parameter_list|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|)
block|{
return|return
name|changes
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|toMap
argument_list|(
name|ChangeData
operator|::
name|getId
argument_list|,
name|cd
lambda|->
name|cd
argument_list|)
argument_list|)
return|;
block|}
DECL|method|ensureChangeLoaded (Iterable<ChangeData> changes)
specifier|public
specifier|static
name|void
name|ensureChangeLoaded
parameter_list|(
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeData
name|first
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|changes
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|first
operator|.
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
name|cd
operator|.
name|change
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeData
argument_list|>
name|missing
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|change
operator|==
literal|null
condition|)
block|{
name|missing
operator|.
name|put
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|missing
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|ChangeNotes
name|notes
range|:
name|first
operator|.
name|notesFactory
operator|.
name|create
argument_list|(
name|first
operator|.
name|db
argument_list|,
name|missing
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|missing
operator|.
name|get
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|change
operator|=
name|notes
operator|.
name|getChange
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|ensureAllPatchSetsLoaded (Iterable<ChangeData> changes)
specifier|public
specifier|static
name|void
name|ensureAllPatchSetsLoaded
parameter_list|(
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeData
name|first
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|changes
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|first
operator|.
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
name|cd
operator|.
name|patchSets
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
name|List
argument_list|<
name|ResultSet
argument_list|<
name|PatchSet
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|BATCH_SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|batch
range|:
name|Iterables
operator|.
name|partition
argument_list|(
name|changes
argument_list|,
name|BATCH_SIZE
argument_list|)
control|)
block|{
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|batch
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|patchSets
operator|==
literal|null
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|cd
operator|.
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|byChange
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ResultSet
argument_list|<
name|PatchSet
argument_list|>
name|result
init|=
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|batch
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|patchSets
operator|=
name|result
operator|.
name|toList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|ensureCurrentPatchSetLoaded (Iterable<ChangeData> changes)
specifier|public
specifier|static
name|void
name|ensureCurrentPatchSetLoaded
parameter_list|(
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeData
name|first
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|changes
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|first
operator|.
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
name|cd
operator|.
name|currentPatchSet
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|ChangeData
argument_list|>
name|missing
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|currentPatchSet
operator|==
literal|null
operator|&&
name|cd
operator|.
name|patchSets
operator|==
literal|null
condition|)
block|{
name|missing
operator|.
name|put
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|missing
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|PatchSet
name|ps
range|:
name|first
operator|.
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|missing
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|missing
operator|.
name|get
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|currentPatchSet
operator|=
name|ps
expr_stmt|;
block|}
block|}
DECL|method|ensureCurrentApprovalsLoaded (Iterable<ChangeData> changes)
specifier|public
specifier|static
name|void
name|ensureCurrentApprovalsLoaded
parameter_list|(
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeData
name|first
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|changes
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|first
operator|.
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
name|cd
operator|.
name|currentApprovals
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
name|List
argument_list|<
name|ResultSet
argument_list|<
name|PatchSetApproval
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|BATCH_SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|batch
range|:
name|Iterables
operator|.
name|partition
argument_list|(
name|changes
argument_list|,
name|BATCH_SIZE
argument_list|)
control|)
block|{
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|batch
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|currentApprovals
operator|==
literal|null
condition|)
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|cd
operator|.
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ResultSet
argument_list|<
name|PatchSetApproval
argument_list|>
name|result
init|=
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|batch
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|currentApprovals
operator|=
name|sortApprovals
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|ensureMessagesLoaded (Iterable<ChangeData> changes)
specifier|public
specifier|static
name|void
name|ensureMessagesLoaded
parameter_list|(
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeData
name|first
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|changes
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|first
operator|.
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
name|cd
operator|.
name|messages
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
name|List
argument_list|<
name|ResultSet
argument_list|<
name|ChangeMessage
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|BATCH_SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|batch
range|:
name|Iterables
operator|.
name|partition
argument_list|(
name|changes
argument_list|,
name|BATCH_SIZE
argument_list|)
control|)
block|{
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|batch
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|messages
operator|==
literal|null
condition|)
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|cd
operator|.
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ResultSet
argument_list|<
name|ChangeMessage
argument_list|>
name|result
init|=
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|batch
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|messages
operator|=
name|result
operator|.
name|toList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|ensureReviewedByLoadedForOpenChanges (Iterable<ChangeData> changes)
specifier|public
specifier|static
name|void
name|ensureReviewedByLoadedForOpenChanges
parameter_list|(
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|ChangeData
argument_list|>
name|pending
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|reviewedBy
operator|==
literal|null
operator|&&
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|pending
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|pending
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ensureAllPatchSetsLoaded
argument_list|(
name|pending
argument_list|)
expr_stmt|;
name|ensureMessagesLoaded
argument_list|(
name|pending
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|pending
control|)
block|{
name|cd
operator|.
name|reviewedBy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|field|assistedFactory
specifier|private
specifier|final
name|AssistedFactory
name|assistedFactory
decl_stmt|;
DECL|field|changeControlFactory
specifier|private
specifier|final
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|Factory (AssistedFactory assistedFactory, ChangeControl.GenericFactory changeControlFactory)
name|Factory
parameter_list|(
name|AssistedFactory
name|assistedFactory
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
parameter_list|)
block|{
name|this
operator|.
name|assistedFactory
operator|=
name|assistedFactory
expr_stmt|;
name|this
operator|.
name|changeControlFactory
operator|=
name|changeControlFactory
expr_stmt|;
block|}
DECL|method|create (ReviewDb db, Project.NameKey project, Change.Id id)
specifier|public
name|ChangeData
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|id
parameter_list|)
block|{
return|return
name|assistedFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|create (ReviewDb db, Change change)
specifier|public
name|ChangeData
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
name|change
parameter_list|)
block|{
return|return
name|assistedFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|change
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|create (ReviewDb db, ChangeNotes notes)
specifier|public
name|ChangeData
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|)
block|{
return|return
name|assistedFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|notes
operator|.
name|getChange
argument_list|()
argument_list|,
name|notes
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|create (ReviewDb db, ChangeControl control)
specifier|public
name|ChangeData
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ChangeControl
name|control
parameter_list|)
block|{
return|return
name|assistedFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|control
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|control
operator|.
name|getId
argument_list|()
argument_list|,
name|control
operator|.
name|getChange
argument_list|()
argument_list|,
name|control
operator|.
name|getNotes
argument_list|()
argument_list|,
name|control
argument_list|)
return|;
block|}
comment|// TODO(hiesel): Remove these after ChangeControl is removed from ChangeData
DECL|method|create (ReviewDb db, ChangeResource rsrc)
specifier|public
name|ChangeData
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ChangeResource
name|rsrc
parameter_list|)
throws|throws
name|NoSuchChangeException
block|{
return|return
name|create
argument_list|(
name|db
argument_list|,
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|rsrc
operator|.
name|getNotes
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|create (ReviewDb db, ChangeContext ctx)
specifier|public
name|ChangeData
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|NoSuchChangeException
block|{
return|return
name|create
argument_list|(
name|db
argument_list|,
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|,
name|ctx
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|interface|AssistedFactory
specifier|public
interface|interface
name|AssistedFactory
block|{
DECL|method|create ( ReviewDb db, Project.NameKey project, Change.Id id, @Nullable Change change, @Nullable ChangeNotes notes, @Nullable ChangeControl control)
name|ChangeData
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|id
parameter_list|,
annotation|@
name|Nullable
name|Change
name|change
parameter_list|,
annotation|@
name|Nullable
name|ChangeNotes
name|notes
parameter_list|,
annotation|@
name|Nullable
name|ChangeControl
name|control
parameter_list|)
function_decl|;
block|}
comment|/**    * Create an instance for testing only.    *    *<p>Attempting to lazy load data will fail with NPEs. Callers may consider manually setting    * fields that can be set.    *    * @param id change ID    * @return instance for testing.    */
DECL|method|createForTest ( Project.NameKey project, Change.Id id, int currentPatchSetId)
specifier|public
specifier|static
name|ChangeData
name|createForTest
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|int
name|currentPatchSetId
parameter_list|)
block|{
name|ChangeData
name|cd
init|=
operator|new
name|ChangeData
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|project
argument_list|,
name|id
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|cd
operator|.
name|currentPatchSet
operator|=
operator|new
name|PatchSet
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|id
argument_list|,
name|currentPatchSetId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cd
return|;
block|}
comment|// Injected fields.
DECL|field|starredChangesUtil
specifier|private
annotation|@
name|Nullable
specifier|final
name|StarredChangesUtil
name|starredChangesUtil
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|approvalsUtil
specifier|private
specifier|final
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
DECL|field|changeControlFactory
specifier|private
specifier|final
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
DECL|field|cmUtil
specifier|private
specifier|final
name|ChangeMessagesUtil
name|cmUtil
decl_stmt|;
DECL|field|notesFactory
specifier|private
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
decl_stmt|;
DECL|field|commentsUtil
specifier|private
specifier|final
name|CommentsUtil
name|commentsUtil
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|userFactory
specifier|private
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
DECL|field|mergeUtilFactory
specifier|private
specifier|final
name|MergeUtil
operator|.
name|Factory
name|mergeUtilFactory
decl_stmt|;
DECL|field|mergeabilityCache
specifier|private
specifier|final
name|MergeabilityCache
name|mergeabilityCache
decl_stmt|;
DECL|field|notesMigration
specifier|private
specifier|final
name|NotesMigration
name|notesMigration
decl_stmt|;
DECL|field|patchListCache
specifier|private
specifier|final
name|PatchListCache
name|patchListCache
decl_stmt|;
DECL|field|psUtil
specifier|private
specifier|final
name|PatchSetUtil
name|psUtil
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|trackingFooters
specifier|private
specifier|final
name|TrackingFooters
name|trackingFooters
decl_stmt|;
DECL|field|pureRevert
specifier|private
specifier|final
name|GetPureRevert
name|pureRevert
decl_stmt|;
DECL|field|submitRuleEvaluatorFactory
specifier|private
specifier|final
name|SubmitRuleEvaluator
operator|.
name|Factory
name|submitRuleEvaluatorFactory
decl_stmt|;
comment|// Required assisted injected fields.
DECL|field|db
specifier|private
specifier|final
name|ReviewDb
name|db
decl_stmt|;
DECL|field|project
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|project
decl_stmt|;
DECL|field|legacyId
specifier|private
specifier|final
name|Change
operator|.
name|Id
name|legacyId
decl_stmt|;
comment|// Lazily populated fields, including optional assisted injected fields.
DECL|field|submitRecords
specifier|private
specifier|final
name|Map
argument_list|<
name|SubmitRuleOptions
argument_list|,
name|List
argument_list|<
name|SubmitRecord
argument_list|>
argument_list|>
name|submitRecords
init|=
name|Maps
operator|.
name|newLinkedHashMapWithExpectedSize
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|lazyLoad
specifier|private
name|boolean
name|lazyLoad
init|=
literal|true
decl_stmt|;
DECL|field|change
specifier|private
name|Change
name|change
decl_stmt|;
DECL|field|notes
specifier|private
name|ChangeNotes
name|notes
decl_stmt|;
DECL|field|commitMessage
specifier|private
name|String
name|commitMessage
decl_stmt|;
DECL|field|commitFooters
specifier|private
name|List
argument_list|<
name|FooterLine
argument_list|>
name|commitFooters
decl_stmt|;
DECL|field|currentPatchSet
specifier|private
name|PatchSet
name|currentPatchSet
decl_stmt|;
DECL|field|patchSets
specifier|private
name|Collection
argument_list|<
name|PatchSet
argument_list|>
name|patchSets
decl_stmt|;
DECL|field|allApprovals
specifier|private
name|ListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|allApprovals
decl_stmt|;
DECL|field|currentApprovals
specifier|private
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|currentApprovals
decl_stmt|;
DECL|field|files
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|files
decl_stmt|;
DECL|field|diffSummaries
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Optional
argument_list|<
name|DiffSummary
argument_list|>
argument_list|>
name|diffSummaries
decl_stmt|;
DECL|field|publishedComments
specifier|private
name|Collection
argument_list|<
name|Comment
argument_list|>
name|publishedComments
decl_stmt|;
DECL|field|robotComments
specifier|private
name|Collection
argument_list|<
name|RobotComment
argument_list|>
name|robotComments
decl_stmt|;
DECL|field|visibleTo
specifier|private
name|CurrentUser
name|visibleTo
decl_stmt|;
DECL|field|changeControl
specifier|private
name|ChangeControl
name|changeControl
decl_stmt|;
DECL|field|messages
specifier|private
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|messages
decl_stmt|;
DECL|field|changedLines
specifier|private
name|Optional
argument_list|<
name|ChangedLines
argument_list|>
name|changedLines
decl_stmt|;
DECL|field|submitTypeRecord
specifier|private
name|SubmitTypeRecord
name|submitTypeRecord
decl_stmt|;
DECL|field|mergeable
specifier|private
name|Boolean
name|mergeable
decl_stmt|;
DECL|field|hashtags
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
decl_stmt|;
DECL|field|editsByUser
specifier|private
name|Map
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|Ref
argument_list|>
name|editsByUser
decl_stmt|;
DECL|field|reviewedBy
specifier|private
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewedBy
decl_stmt|;
DECL|field|draftsByUser
specifier|private
name|Map
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|Ref
argument_list|>
name|draftsByUser
decl_stmt|;
DECL|field|stars
specifier|private
name|ImmutableListMultimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|stars
decl_stmt|;
DECL|field|starsOf
specifier|private
name|StarsOf
name|starsOf
decl_stmt|;
DECL|field|starRefs
specifier|private
name|ImmutableMap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|StarRef
argument_list|>
name|starRefs
decl_stmt|;
DECL|field|reviewers
specifier|private
name|ReviewerSet
name|reviewers
decl_stmt|;
DECL|field|reviewersByEmail
specifier|private
name|ReviewerByEmailSet
name|reviewersByEmail
decl_stmt|;
DECL|field|pendingReviewers
specifier|private
name|ReviewerSet
name|pendingReviewers
decl_stmt|;
DECL|field|pendingReviewersByEmail
specifier|private
name|ReviewerByEmailSet
name|pendingReviewersByEmail
decl_stmt|;
DECL|field|reviewerUpdates
specifier|private
name|List
argument_list|<
name|ReviewerStatusUpdate
argument_list|>
name|reviewerUpdates
decl_stmt|;
DECL|field|author
specifier|private
name|PersonIdent
name|author
decl_stmt|;
DECL|field|committer
specifier|private
name|PersonIdent
name|committer
decl_stmt|;
DECL|field|unresolvedCommentCount
specifier|private
name|Integer
name|unresolvedCommentCount
decl_stmt|;
DECL|field|labelTypes
specifier|private
name|LabelTypes
name|labelTypes
decl_stmt|;
DECL|field|refStates
specifier|private
name|ImmutableList
argument_list|<
name|byte
index|[]
argument_list|>
name|refStates
decl_stmt|;
DECL|field|refStatePatterns
specifier|private
name|ImmutableList
argument_list|<
name|byte
index|[]
argument_list|>
name|refStatePatterns
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChangeData ( @ullable StarredChangesUtil starredChangesUtil, ApprovalsUtil approvalsUtil, AllUsersName allUsersName, ChangeControl.GenericFactory changeControlFactory, ChangeMessagesUtil cmUtil, ChangeNotes.Factory notesFactory, CommentsUtil commentsUtil, GitRepositoryManager repoManager, IdentifiedUser.GenericFactory userFactory, MergeUtil.Factory mergeUtilFactory, MergeabilityCache mergeabilityCache, NotesMigration notesMigration, PatchListCache patchListCache, PatchSetUtil psUtil, ProjectCache projectCache, TrackingFooters trackingFooters, GetPureRevert pureRevert, SubmitRuleEvaluator.Factory submitRuleEvaluatorFactory, @Assisted ReviewDb db, @Assisted Project.NameKey project, @Assisted Change.Id id, @Assisted @Nullable Change change, @Assisted @Nullable ChangeNotes notes, @Assisted @Nullable ChangeControl control)
specifier|private
name|ChangeData
parameter_list|(
annotation|@
name|Nullable
name|StarredChangesUtil
name|starredChangesUtil
parameter_list|,
name|ApprovalsUtil
name|approvalsUtil
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
parameter_list|,
name|ChangeMessagesUtil
name|cmUtil
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
parameter_list|,
name|CommentsUtil
name|commentsUtil
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
parameter_list|,
name|MergeUtil
operator|.
name|Factory
name|mergeUtilFactory
parameter_list|,
name|MergeabilityCache
name|mergeabilityCache
parameter_list|,
name|NotesMigration
name|notesMigration
parameter_list|,
name|PatchListCache
name|patchListCache
parameter_list|,
name|PatchSetUtil
name|psUtil
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|TrackingFooters
name|trackingFooters
parameter_list|,
name|GetPureRevert
name|pureRevert
parameter_list|,
name|SubmitRuleEvaluator
operator|.
name|Factory
name|submitRuleEvaluatorFactory
parameter_list|,
annotation|@
name|Assisted
name|ReviewDb
name|db
parameter_list|,
annotation|@
name|Assisted
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
annotation|@
name|Assisted
name|Change
operator|.
name|Id
name|id
parameter_list|,
annotation|@
name|Assisted
annotation|@
name|Nullable
name|Change
name|change
parameter_list|,
annotation|@
name|Assisted
annotation|@
name|Nullable
name|ChangeNotes
name|notes
parameter_list|,
annotation|@
name|Assisted
annotation|@
name|Nullable
name|ChangeControl
name|control
parameter_list|)
block|{
name|this
operator|.
name|approvalsUtil
operator|=
name|approvalsUtil
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|changeControlFactory
operator|=
name|changeControlFactory
expr_stmt|;
name|this
operator|.
name|cmUtil
operator|=
name|cmUtil
expr_stmt|;
name|this
operator|.
name|notesFactory
operator|=
name|notesFactory
expr_stmt|;
name|this
operator|.
name|commentsUtil
operator|=
name|commentsUtil
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|userFactory
operator|=
name|userFactory
expr_stmt|;
name|this
operator|.
name|mergeUtilFactory
operator|=
name|mergeUtilFactory
expr_stmt|;
name|this
operator|.
name|mergeabilityCache
operator|=
name|mergeabilityCache
expr_stmt|;
name|this
operator|.
name|notesMigration
operator|=
name|notesMigration
expr_stmt|;
name|this
operator|.
name|patchListCache
operator|=
name|patchListCache
expr_stmt|;
name|this
operator|.
name|psUtil
operator|=
name|psUtil
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|starredChangesUtil
operator|=
name|starredChangesUtil
expr_stmt|;
name|this
operator|.
name|trackingFooters
operator|=
name|trackingFooters
expr_stmt|;
name|this
operator|.
name|pureRevert
operator|=
name|pureRevert
expr_stmt|;
name|this
operator|.
name|submitRuleEvaluatorFactory
operator|=
name|submitRuleEvaluatorFactory
expr_stmt|;
comment|// May be null in tests when created via createForTest above, in which case lazy-loading will
comment|// intentionally fail with NPE. Still not marked @Nullable in the constructor, to force callers
comment|// using Guice to pass a non-null value.
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
name|this
operator|.
name|legacyId
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|change
operator|=
name|change
expr_stmt|;
name|this
operator|.
name|notes
operator|=
name|notes
expr_stmt|;
name|this
operator|.
name|changeControl
operator|=
name|control
expr_stmt|;
block|}
DECL|method|setLazyLoad (boolean load)
specifier|public
name|ChangeData
name|setLazyLoad
parameter_list|(
name|boolean
name|load
parameter_list|)
block|{
name|lazyLoad
operator|=
name|load
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|db ()
specifier|public
name|ReviewDb
name|db
parameter_list|()
block|{
return|return
name|db
return|;
block|}
DECL|method|getAllUsersNameForIndexing ()
specifier|public
name|AllUsersName
name|getAllUsersNameForIndexing
parameter_list|()
block|{
return|return
name|allUsersName
return|;
block|}
DECL|method|initFiles ()
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|initFiles
parameter_list|()
block|{
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|files
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
DECL|method|setCurrentFilePaths (List<String> filePaths)
specifier|public
name|void
name|setCurrentFilePaths
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|filePaths
parameter_list|)
throws|throws
name|OrmException
block|{
name|PatchSet
name|ps
init|=
name|currentPatchSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
block|{
name|initFiles
argument_list|()
operator|.
name|put
argument_list|(
name|ps
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|filePaths
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|currentFilePaths ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|currentFilePaths
parameter_list|()
throws|throws
name|OrmException
block|{
name|PatchSet
name|ps
init|=
name|currentPatchSet
argument_list|()
decl_stmt|;
return|return
name|ps
operator|!=
literal|null
condition|?
name|filePaths
argument_list|(
name|ps
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|filePaths (PatchSet ps)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|filePaths
parameter_list|(
name|PatchSet
name|ps
parameter_list|)
throws|throws
name|OrmException
block|{
name|Integer
name|psId
init|=
name|ps
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|r
init|=
name|initFiles
argument_list|()
operator|.
name|get
argument_list|(
name|psId
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|Change
name|c
init|=
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Optional
argument_list|<
name|DiffSummary
argument_list|>
name|p
init|=
name|getDiffSummary
argument_list|(
name|c
argument_list|,
name|ps
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|emptyFileList
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
if|if
condition|(
name|lazyLoad
condition|)
block|{
name|files
operator|.
name|put
argument_list|(
name|ps
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|emptyFileList
argument_list|)
expr_stmt|;
block|}
return|return
name|emptyFileList
return|;
block|}
name|r
operator|=
name|p
operator|.
name|get
argument_list|()
operator|.
name|getPaths
argument_list|()
expr_stmt|;
name|files
operator|.
name|put
argument_list|(
name|psId
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
DECL|method|getDiffSummary (Change c, PatchSet ps)
specifier|private
name|Optional
argument_list|<
name|DiffSummary
argument_list|>
name|getDiffSummary
parameter_list|(
name|Change
name|c
parameter_list|,
name|PatchSet
name|ps
parameter_list|)
block|{
name|Integer
name|psId
init|=
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|diffSummaries
operator|==
literal|null
condition|)
block|{
name|diffSummaries
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|Optional
argument_list|<
name|DiffSummary
argument_list|>
name|r
init|=
name|diffSummaries
operator|.
name|get
argument_list|(
name|psId
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
try|try
block|{
name|r
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|patchListCache
operator|.
name|getDiffSummary
argument_list|(
name|c
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatchListNotAvailableException
name|e
parameter_list|)
block|{
name|r
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
name|diffSummaries
operator|.
name|put
argument_list|(
name|psId
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
DECL|method|computeChangedLines ()
specifier|private
name|Optional
argument_list|<
name|ChangedLines
argument_list|>
name|computeChangedLines
parameter_list|()
throws|throws
name|OrmException
block|{
name|Change
name|c
init|=
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|PatchSet
name|ps
init|=
name|currentPatchSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|Optional
argument_list|<
name|DiffSummary
argument_list|>
name|ds
init|=
name|getDiffSummary
argument_list|(
name|c
argument_list|,
name|ps
argument_list|)
decl_stmt|;
if|if
condition|(
name|ds
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|ds
operator|.
name|get
argument_list|()
operator|.
name|getChangedLines
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|changedLines ()
specifier|public
name|Optional
argument_list|<
name|ChangedLines
argument_list|>
name|changedLines
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|changedLines
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|changedLines
operator|=
name|computeChangedLines
argument_list|()
expr_stmt|;
block|}
return|return
name|changedLines
return|;
block|}
DECL|method|setChangedLines (int insertions, int deletions)
specifier|public
name|void
name|setChangedLines
parameter_list|(
name|int
name|insertions
parameter_list|,
name|int
name|deletions
parameter_list|)
block|{
name|changedLines
operator|=
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|ChangedLines
argument_list|(
name|insertions
argument_list|,
name|deletions
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setNoChangedLines ()
specifier|public
name|void
name|setNoChangedLines
parameter_list|()
block|{
name|changedLines
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|Change
operator|.
name|Id
name|getId
parameter_list|()
block|{
return|return
name|legacyId
return|;
block|}
DECL|method|project ()
specifier|public
name|Project
operator|.
name|NameKey
name|project
parameter_list|()
block|{
return|return
name|project
return|;
block|}
DECL|method|fastIsVisibleTo (CurrentUser user)
name|boolean
name|fastIsVisibleTo
parameter_list|(
name|CurrentUser
name|user
parameter_list|)
block|{
return|return
name|visibleTo
operator|==
name|user
return|;
block|}
DECL|method|hasChangeControl ()
specifier|public
name|boolean
name|hasChangeControl
parameter_list|()
block|{
return|return
name|changeControl
operator|!=
literal|null
return|;
block|}
DECL|method|changeControl ()
specifier|public
name|ChangeControl
name|changeControl
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|changeControl
operator|==
literal|null
condition|)
block|{
name|Change
name|c
init|=
name|change
argument_list|()
decl_stmt|;
try|try
block|{
name|changeControl
operator|=
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|db
argument_list|,
name|c
argument_list|,
name|userFactory
operator|.
name|create
argument_list|(
name|c
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchChangeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|changeControl
return|;
block|}
DECL|method|changeControl (CurrentUser user)
specifier|public
name|ChangeControl
name|changeControl
parameter_list|(
name|CurrentUser
name|user
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|changeControl
operator|!=
literal|null
condition|)
block|{
name|CurrentUser
name|oldUser
init|=
name|user
decl_stmt|;
if|if
condition|(
name|sameUser
argument_list|(
name|user
argument_list|,
name|oldUser
argument_list|)
condition|)
block|{
return|return
name|changeControl
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"user already specified: "
operator|+
name|changeControl
operator|.
name|getUser
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|change
operator|!=
literal|null
condition|)
block|{
name|changeControl
operator|=
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|db
argument_list|,
name|change
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|changeControl
operator|=
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|db
argument_list|,
name|project
argument_list|()
argument_list|,
name|legacyId
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
return|return
name|changeControl
return|;
block|}
DECL|method|sameUser (CurrentUser a, CurrentUser b)
specifier|private
specifier|static
name|boolean
name|sameUser
parameter_list|(
name|CurrentUser
name|a
parameter_list|,
name|CurrentUser
name|b
parameter_list|)
block|{
comment|// TODO(dborowitz): This is a hack; general CurrentUser equality would be
comment|// better.
if|if
condition|(
name|a
operator|.
name|isInternalUser
argument_list|()
operator|&&
name|b
operator|.
name|isInternalUser
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|instanceof
name|AnonymousUser
operator|&&
name|b
operator|instanceof
name|AnonymousUser
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|.
name|isIdentifiedUser
argument_list|()
operator|&&
name|b
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
return|return
name|a
operator|.
name|getAccountId
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getAccountId
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|cacheVisibleTo (ChangeControl ctl)
name|void
name|cacheVisibleTo
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|)
block|{
name|visibleTo
operator|=
name|ctl
operator|.
name|getUser
argument_list|()
expr_stmt|;
name|changeControl
operator|=
name|ctl
expr_stmt|;
block|}
DECL|method|change ()
specifier|public
name|Change
name|change
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|change
operator|==
literal|null
operator|&&
name|lazyLoad
condition|)
block|{
name|reloadChange
argument_list|()
expr_stmt|;
block|}
return|return
name|change
return|;
block|}
DECL|method|setChange (Change c)
specifier|public
name|void
name|setChange
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
name|change
operator|=
name|c
expr_stmt|;
block|}
DECL|method|reloadChange ()
specifier|public
name|Change
name|reloadChange
parameter_list|()
throws|throws
name|OrmException
block|{
try|try
block|{
name|notes
operator|=
name|notesFactory
operator|.
name|createChecked
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|legacyId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchChangeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Unable to load change "
operator|+
name|legacyId
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|change
operator|=
name|notes
operator|.
name|getChange
argument_list|()
expr_stmt|;
name|setPatchSets
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
DECL|method|getLabelTypes ()
specifier|public
name|LabelTypes
name|getLabelTypes
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|labelTypes
operator|==
literal|null
condition|)
block|{
name|ProjectState
name|state
decl_stmt|;
try|try
block|{
name|state
operator|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"project state not available"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|labelTypes
operator|=
name|state
operator|.
name|getLabelTypes
argument_list|(
name|changeControl
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
argument_list|,
name|changeControl
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|labelTypes
return|;
block|}
DECL|method|notes ()
specifier|public
name|ChangeNotes
name|notes
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|notes
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"ChangeNotes not available, lazyLoad = false"
argument_list|)
throw|;
block|}
name|notes
operator|=
name|notesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|()
argument_list|,
name|legacyId
argument_list|)
expr_stmt|;
block|}
return|return
name|notes
return|;
block|}
DECL|method|currentPatchSet ()
specifier|public
name|PatchSet
name|currentPatchSet
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|currentPatchSet
operator|==
literal|null
condition|)
block|{
name|Change
name|c
init|=
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|PatchSet
name|p
range|:
name|patchSets
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
name|currentPatchSet
operator|=
name|p
expr_stmt|;
return|return
name|p
return|;
block|}
block|}
block|}
return|return
name|currentPatchSet
return|;
block|}
DECL|method|currentApprovals ()
specifier|public
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|currentApprovals
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|currentApprovals
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Change
name|c
init|=
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|currentApprovals
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|currentApprovals
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|approvalsUtil
operator|.
name|byPatchSet
argument_list|(
name|db
argument_list|,
name|notes
argument_list|()
argument_list|,
name|changeControl
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NoSuchChangeException
condition|)
block|{
name|currentApprovals
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
return|return
name|currentApprovals
return|;
block|}
DECL|method|setCurrentApprovals (List<PatchSetApproval> approvals)
specifier|public
name|void
name|setCurrentApprovals
parameter_list|(
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvals
parameter_list|)
block|{
name|currentApprovals
operator|=
name|approvals
expr_stmt|;
block|}
DECL|method|commitMessage ()
specifier|public
name|String
name|commitMessage
parameter_list|()
throws|throws
name|IOException
throws|,
name|OrmException
block|{
if|if
condition|(
name|commitMessage
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|loadCommitData
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|commitMessage
return|;
block|}
DECL|method|commitFooters ()
specifier|public
name|List
argument_list|<
name|FooterLine
argument_list|>
name|commitFooters
parameter_list|()
throws|throws
name|IOException
throws|,
name|OrmException
block|{
if|if
condition|(
name|commitFooters
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|loadCommitData
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|commitFooters
return|;
block|}
DECL|method|trackingFooters ()
specifier|public
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|trackingFooters
parameter_list|()
throws|throws
name|IOException
throws|,
name|OrmException
block|{
return|return
name|trackingFooters
operator|.
name|extract
argument_list|(
name|commitFooters
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getAuthor ()
specifier|public
name|PersonIdent
name|getAuthor
parameter_list|()
throws|throws
name|IOException
throws|,
name|OrmException
block|{
if|if
condition|(
name|author
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|loadCommitData
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|author
return|;
block|}
DECL|method|getCommitter ()
specifier|public
name|PersonIdent
name|getCommitter
parameter_list|()
throws|throws
name|IOException
throws|,
name|OrmException
block|{
if|if
condition|(
name|committer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|loadCommitData
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|committer
return|;
block|}
DECL|method|loadCommitData ()
specifier|private
name|boolean
name|loadCommitData
parameter_list|()
throws|throws
name|OrmException
throws|,
name|RepositoryNotFoundException
throws|,
name|IOException
throws|,
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
block|{
name|PatchSet
name|ps
init|=
name|currentPatchSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|sha1
init|=
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|()
argument_list|)
init|;
name|RevWalk
name|walk
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RevCommit
name|c
init|=
name|walk
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|sha1
argument_list|)
argument_list|)
decl_stmt|;
name|commitMessage
operator|=
name|c
operator|.
name|getFullMessage
argument_list|()
expr_stmt|;
name|commitFooters
operator|=
name|c
operator|.
name|getFooterLines
argument_list|()
expr_stmt|;
name|author
operator|=
name|c
operator|.
name|getAuthorIdent
argument_list|()
expr_stmt|;
name|committer
operator|=
name|c
operator|.
name|getCommitterIdent
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * @return patches for the change, in patch set ID order.    * @throws OrmException an error occurred reading the database.    */
DECL|method|patchSets ()
specifier|public
name|Collection
argument_list|<
name|PatchSet
argument_list|>
name|patchSets
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|patchSets
operator|==
literal|null
condition|)
block|{
name|patchSets
operator|=
name|psUtil
operator|.
name|byChange
argument_list|(
name|db
argument_list|,
name|notes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|patchSets
return|;
block|}
comment|/**    * @return patches for the change visible to the current user.    * @throws OrmException an error occurred reading the database.    */
DECL|method|visiblePatchSets ()
specifier|public
name|Collection
argument_list|<
name|PatchSet
argument_list|>
name|visiblePatchSets
parameter_list|()
throws|throws
name|OrmException
block|{
name|Predicate
argument_list|<
name|?
super|super
name|PatchSet
argument_list|>
name|predicate
init|=
name|ps
lambda|->
block|{
try|try
block|{
return|return
name|changeControl
argument_list|()
operator|.
name|isPatchVisible
argument_list|(
name|ps
argument_list|,
name|db
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
return|return
name|patchSets
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|predicate
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|setPatchSets (Collection<PatchSet> patchSets)
specifier|public
name|void
name|setPatchSets
parameter_list|(
name|Collection
argument_list|<
name|PatchSet
argument_list|>
name|patchSets
parameter_list|)
block|{
name|this
operator|.
name|currentPatchSet
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|patchSets
operator|=
name|patchSets
expr_stmt|;
block|}
comment|/**    * @return patch with the given ID, or null if it does not exist.    * @throws OrmException an error occurred reading the database.    */
DECL|method|patchSet (PatchSet.Id psId)
specifier|public
name|PatchSet
name|patchSet
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|currentPatchSet
operator|!=
literal|null
operator|&&
name|currentPatchSet
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
condition|)
block|{
return|return
name|currentPatchSet
return|;
block|}
for|for
control|(
name|PatchSet
name|ps
range|:
name|patchSets
argument_list|()
control|)
block|{
if|if
condition|(
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
condition|)
block|{
return|return
name|ps
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * @return all patch set approvals for the change, keyed by ID, ordered by timestamp within each    *     patch set.    * @throws OrmException an error occurred reading the database.    */
DECL|method|approvals ()
specifier|public
name|ListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|approvals
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|allApprovals
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
return|;
block|}
name|allApprovals
operator|=
name|approvalsUtil
operator|.
name|byChange
argument_list|(
name|db
argument_list|,
name|notes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|allApprovals
return|;
block|}
comment|/**    * @return The submit ('SUBM') approval label    * @throws OrmException an error occurred reading the database.    */
DECL|method|getSubmitApproval ()
specifier|public
name|Optional
argument_list|<
name|PatchSetApproval
argument_list|>
name|getSubmitApproval
parameter_list|()
throws|throws
name|OrmException
block|{
return|return
name|currentApprovals
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|PatchSetApproval
operator|::
name|isLegacySubmit
argument_list|)
operator|.
name|findFirst
argument_list|()
return|;
block|}
DECL|method|reviewers ()
specifier|public
name|ReviewerSet
name|reviewers
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|reviewers
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|ReviewerSet
operator|.
name|empty
argument_list|()
return|;
block|}
name|reviewers
operator|=
name|approvalsUtil
operator|.
name|getReviewers
argument_list|(
name|notes
argument_list|()
argument_list|,
name|approvals
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|reviewers
return|;
block|}
DECL|method|setReviewers (ReviewerSet reviewers)
specifier|public
name|void
name|setReviewers
parameter_list|(
name|ReviewerSet
name|reviewers
parameter_list|)
block|{
name|this
operator|.
name|reviewers
operator|=
name|reviewers
expr_stmt|;
block|}
DECL|method|getReviewers ()
specifier|public
name|ReviewerSet
name|getReviewers
parameter_list|()
block|{
return|return
name|reviewers
return|;
block|}
DECL|method|reviewersByEmail ()
specifier|public
name|ReviewerByEmailSet
name|reviewersByEmail
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|reviewersByEmail
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|ReviewerByEmailSet
operator|.
name|empty
argument_list|()
return|;
block|}
name|reviewersByEmail
operator|=
name|notes
argument_list|()
operator|.
name|getReviewersByEmail
argument_list|()
expr_stmt|;
block|}
return|return
name|reviewersByEmail
return|;
block|}
DECL|method|setReviewersByEmail (ReviewerByEmailSet reviewersByEmail)
specifier|public
name|void
name|setReviewersByEmail
parameter_list|(
name|ReviewerByEmailSet
name|reviewersByEmail
parameter_list|)
block|{
name|this
operator|.
name|reviewersByEmail
operator|=
name|reviewersByEmail
expr_stmt|;
block|}
DECL|method|getReviewersByEmail ()
specifier|public
name|ReviewerByEmailSet
name|getReviewersByEmail
parameter_list|()
block|{
return|return
name|reviewersByEmail
return|;
block|}
DECL|method|setPendingReviewers (ReviewerSet pendingReviewers)
specifier|public
name|void
name|setPendingReviewers
parameter_list|(
name|ReviewerSet
name|pendingReviewers
parameter_list|)
block|{
name|this
operator|.
name|pendingReviewers
operator|=
name|pendingReviewers
expr_stmt|;
block|}
DECL|method|getPendingReviewers ()
specifier|public
name|ReviewerSet
name|getPendingReviewers
parameter_list|()
block|{
return|return
name|this
operator|.
name|pendingReviewers
return|;
block|}
DECL|method|pendingReviewers ()
specifier|public
name|ReviewerSet
name|pendingReviewers
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|pendingReviewers
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|ReviewerSet
operator|.
name|empty
argument_list|()
return|;
block|}
name|pendingReviewers
operator|=
name|notes
argument_list|()
operator|.
name|getPendingReviewers
argument_list|()
expr_stmt|;
block|}
return|return
name|pendingReviewers
return|;
block|}
DECL|method|setPendingReviewersByEmail (ReviewerByEmailSet pendingReviewersByEmail)
specifier|public
name|void
name|setPendingReviewersByEmail
parameter_list|(
name|ReviewerByEmailSet
name|pendingReviewersByEmail
parameter_list|)
block|{
name|this
operator|.
name|pendingReviewersByEmail
operator|=
name|pendingReviewersByEmail
expr_stmt|;
block|}
DECL|method|getPendingReviewersByEmail ()
specifier|public
name|ReviewerByEmailSet
name|getPendingReviewersByEmail
parameter_list|()
block|{
return|return
name|pendingReviewersByEmail
return|;
block|}
DECL|method|pendingReviewersByEmail ()
specifier|public
name|ReviewerByEmailSet
name|pendingReviewersByEmail
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|pendingReviewersByEmail
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|ReviewerByEmailSet
operator|.
name|empty
argument_list|()
return|;
block|}
name|pendingReviewersByEmail
operator|=
name|notes
argument_list|()
operator|.
name|getPendingReviewersByEmail
argument_list|()
expr_stmt|;
block|}
return|return
name|pendingReviewersByEmail
return|;
block|}
DECL|method|reviewerUpdates ()
specifier|public
name|List
argument_list|<
name|ReviewerStatusUpdate
argument_list|>
name|reviewerUpdates
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|reviewerUpdates
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|reviewerUpdates
operator|=
name|approvalsUtil
operator|.
name|getReviewerUpdates
argument_list|(
name|notes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|reviewerUpdates
return|;
block|}
DECL|method|setReviewerUpdates (List<ReviewerStatusUpdate> reviewerUpdates)
specifier|public
name|void
name|setReviewerUpdates
parameter_list|(
name|List
argument_list|<
name|ReviewerStatusUpdate
argument_list|>
name|reviewerUpdates
parameter_list|)
block|{
name|this
operator|.
name|reviewerUpdates
operator|=
name|reviewerUpdates
expr_stmt|;
block|}
DECL|method|getReviewerUpdates ()
specifier|public
name|List
argument_list|<
name|ReviewerStatusUpdate
argument_list|>
name|getReviewerUpdates
parameter_list|()
block|{
return|return
name|reviewerUpdates
return|;
block|}
DECL|method|publishedComments ()
specifier|public
name|Collection
argument_list|<
name|Comment
argument_list|>
name|publishedComments
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|publishedComments
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|publishedComments
operator|=
name|commentsUtil
operator|.
name|publishedByChange
argument_list|(
name|db
argument_list|,
name|notes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|publishedComments
return|;
block|}
DECL|method|robotComments ()
specifier|public
name|Collection
argument_list|<
name|RobotComment
argument_list|>
name|robotComments
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|robotComments
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|robotComments
operator|=
name|commentsUtil
operator|.
name|robotCommentsByChange
argument_list|(
name|notes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|robotComments
return|;
block|}
DECL|method|unresolvedCommentCount ()
specifier|public
name|Integer
name|unresolvedCommentCount
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|unresolvedCommentCount
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Comment
argument_list|>
name|comments
init|=
name|Stream
operator|.
name|concat
argument_list|(
name|publishedComments
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|,
name|robotComments
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nonLeafSet
init|=
name|comments
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|parentUuid
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|count
init|=
name|comments
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|c
lambda|->
operator|(
name|c
operator|.
name|unresolved
operator|&&
operator|!
name|nonLeafSet
operator|.
name|contains
argument_list|(
name|c
operator|.
name|key
operator|.
name|uuid
argument_list|)
operator|)
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
name|unresolvedCommentCount
operator|=
name|count
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
return|return
name|unresolvedCommentCount
return|;
block|}
DECL|method|setUnresolvedCommentCount (Integer count)
specifier|public
name|void
name|setUnresolvedCommentCount
parameter_list|(
name|Integer
name|count
parameter_list|)
block|{
name|this
operator|.
name|unresolvedCommentCount
operator|=
name|count
expr_stmt|;
block|}
DECL|method|messages ()
specifier|public
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|messages
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|messages
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|messages
operator|=
name|cmUtil
operator|.
name|byChange
argument_list|(
name|db
argument_list|,
name|notes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|messages
return|;
block|}
DECL|method|submitRecords (SubmitRuleOptions options)
specifier|public
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|submitRecords
parameter_list|(
name|SubmitRuleOptions
name|options
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|records
init|=
name|submitRecords
operator|.
name|get
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|records
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|records
operator|=
name|submitRuleEvaluatorFactory
operator|.
name|create
argument_list|(
name|this
argument_list|)
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
operator|.
name|evaluate
argument_list|()
expr_stmt|;
name|submitRecords
operator|.
name|put
argument_list|(
name|options
argument_list|,
name|records
argument_list|)
expr_stmt|;
block|}
return|return
name|records
return|;
block|}
annotation|@
name|Nullable
DECL|method|getSubmitRecords (SubmitRuleOptions options)
specifier|public
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|getSubmitRecords
parameter_list|(
name|SubmitRuleOptions
name|options
parameter_list|)
block|{
return|return
name|submitRecords
operator|.
name|get
argument_list|(
name|options
argument_list|)
return|;
block|}
DECL|method|setSubmitRecords (SubmitRuleOptions options, List<SubmitRecord> records)
specifier|public
name|void
name|setSubmitRecords
parameter_list|(
name|SubmitRuleOptions
name|options
parameter_list|,
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|records
parameter_list|)
block|{
name|submitRecords
operator|.
name|put
argument_list|(
name|options
argument_list|,
name|records
argument_list|)
expr_stmt|;
block|}
DECL|method|submitTypeRecord ()
specifier|public
name|SubmitTypeRecord
name|submitTypeRecord
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|submitTypeRecord
operator|==
literal|null
condition|)
block|{
name|submitTypeRecord
operator|=
name|submitRuleEvaluatorFactory
operator|.
name|create
argument_list|(
name|this
argument_list|)
operator|.
name|getSubmitType
argument_list|()
expr_stmt|;
block|}
return|return
name|submitTypeRecord
return|;
block|}
DECL|method|setMergeable (Boolean mergeable)
specifier|public
name|void
name|setMergeable
parameter_list|(
name|Boolean
name|mergeable
parameter_list|)
block|{
name|this
operator|.
name|mergeable
operator|=
name|mergeable
expr_stmt|;
block|}
DECL|method|isMergeable ()
specifier|public
name|Boolean
name|isMergeable
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|mergeable
operator|==
literal|null
condition|)
block|{
name|Change
name|c
init|=
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|c
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|MERGED
condition|)
block|{
name|mergeable
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|isWorkInProgress
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PatchSet
name|ps
init|=
name|currentPatchSet
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ps
operator|==
literal|null
operator|||
operator|!
name|changeControl
argument_list|()
operator|.
name|isPatchVisible
argument_list|(
name|ps
argument_list|,
name|db
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NoSuchChangeException
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
name|e
throw|;
block|}
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|()
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
name|c
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|SubmitTypeRecord
name|str
init|=
name|submitTypeRecord
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|str
operator|.
name|isOk
argument_list|()
condition|)
block|{
comment|// If submit type rules are broken, it's definitely not mergeable.
comment|// No need to log, as SubmitRuleEvaluator already did it for us.
return|return
literal|false
return|;
block|}
name|String
name|mergeStrategy
init|=
name|mergeUtilFactory
operator|.
name|create
argument_list|(
name|projectCache
operator|.
name|get
argument_list|(
name|project
argument_list|()
argument_list|)
argument_list|)
operator|.
name|mergeStrategyName
argument_list|()
decl_stmt|;
name|mergeable
operator|=
name|mergeabilityCache
operator|.
name|get
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|ref
argument_list|,
name|str
operator|.
name|type
argument_list|,
name|mergeStrategy
argument_list|,
name|c
operator|.
name|getDest
argument_list|()
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|mergeable
return|;
block|}
DECL|method|editsByUser ()
specifier|public
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|editsByUser
parameter_list|()
throws|throws
name|OrmException
block|{
return|return
name|editRefs
argument_list|()
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|editRefs ()
specifier|public
name|Map
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|Ref
argument_list|>
name|editRefs
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|editsByUser
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|Change
name|c
init|=
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|editsByUser
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|checkNotNull
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|()
argument_list|)
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|e
range|:
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|RefNames
operator|.
name|REFS_USERS
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|Change
operator|.
name|Id
operator|.
name|fromEditRefPart
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|editsByUser
operator|.
name|put
argument_list|(
name|Account
operator|.
name|Id
operator|.
name|fromRefPart
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|editsByUser
return|;
block|}
DECL|method|draftsByUser ()
specifier|public
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|draftsByUser
parameter_list|()
throws|throws
name|OrmException
block|{
return|return
name|draftRefs
argument_list|()
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|draftRefs ()
specifier|public
name|Map
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|Ref
argument_list|>
name|draftRefs
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|draftsByUser
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|Change
name|c
init|=
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|draftsByUser
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
for|for
control|(
name|Ref
name|ref
range|:
name|commentsUtil
operator|.
name|getDraftRefs
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|)
control|)
block|{
name|Account
operator|.
name|Id
name|account
init|=
name|Account
operator|.
name|Id
operator|.
name|fromRefSuffix
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|!=
literal|null
comment|// Double-check that any drafts exist for this user after
comment|// filtering out zombies. If some but not all drafts in the ref
comment|// were zombies, the returned Ref still includes those zombies;
comment|// this is suboptimal, but is ok for the purposes of
comment|// draftsByUser(), and easier than trying to rebuild the change at
comment|// this point.
operator|&&
operator|!
name|notes
argument_list|()
operator|.
name|getDraftComments
argument_list|(
name|account
argument_list|,
name|ref
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|draftsByUser
operator|.
name|put
argument_list|(
name|account
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|Comment
name|sc
range|:
name|commentsUtil
operator|.
name|draftByChange
argument_list|(
name|db
argument_list|,
name|notes
argument_list|()
argument_list|)
control|)
block|{
name|draftsByUser
operator|.
name|put
argument_list|(
name|sc
operator|.
name|author
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|draftsByUser
return|;
block|}
DECL|method|reviewedBy ()
specifier|public
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewedBy
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|reviewedBy
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|Change
name|c
init|=
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ReviewedByEvent
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeMessage
name|msg
range|:
name|messages
argument_list|()
control|)
block|{
if|if
condition|(
name|msg
operator|.
name|getAuthor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
name|ReviewedByEvent
operator|.
name|create
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|events
operator|=
name|Lists
operator|.
name|reverse
argument_list|(
name|events
argument_list|)
expr_stmt|;
name|reviewedBy
operator|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|Account
operator|.
name|Id
name|owner
init|=
name|c
operator|.
name|getOwner
argument_list|()
decl_stmt|;
for|for
control|(
name|ReviewedByEvent
name|event
range|:
name|events
control|)
block|{
if|if
condition|(
name|owner
operator|.
name|equals
argument_list|(
name|event
operator|.
name|author
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
name|reviewedBy
operator|.
name|add
argument_list|(
name|event
operator|.
name|author
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|reviewedBy
return|;
block|}
DECL|method|setReviewedBy (Set<Account.Id> reviewedBy)
specifier|public
name|void
name|setReviewedBy
parameter_list|(
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewedBy
parameter_list|)
block|{
name|this
operator|.
name|reviewedBy
operator|=
name|reviewedBy
expr_stmt|;
block|}
DECL|method|hashtags ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|hashtags
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|hashtags
operator|=
name|notes
argument_list|()
operator|.
name|getHashtags
argument_list|()
expr_stmt|;
block|}
return|return
name|hashtags
return|;
block|}
DECL|method|setHashtags (Set<String> hashtags)
specifier|public
name|void
name|setHashtags
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
parameter_list|)
block|{
name|this
operator|.
name|hashtags
operator|=
name|hashtags
expr_stmt|;
block|}
DECL|method|stars ()
specifier|public
name|ImmutableListMultimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|stars
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|stars
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
return|;
block|}
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|b
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|StarRef
argument_list|>
name|e
range|:
name|starRefs
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|b
operator|.
name|putAll
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|labels
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|stars
return|;
block|}
DECL|method|setStars (ListMultimap<Account.Id, String> stars)
specifier|public
name|void
name|setStars
parameter_list|(
name|ListMultimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|stars
parameter_list|)
block|{
name|this
operator|.
name|stars
operator|=
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|stars
argument_list|)
expr_stmt|;
block|}
DECL|method|starRefs ()
specifier|public
name|ImmutableMap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|StarRef
argument_list|>
name|starRefs
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|starRefs
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
name|starRefs
operator|=
name|checkNotNull
argument_list|(
name|starredChangesUtil
argument_list|)
operator|.
name|byChange
argument_list|(
name|legacyId
argument_list|)
expr_stmt|;
block|}
return|return
name|starRefs
return|;
block|}
DECL|method|stars (Account.Id accountId)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|stars
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|starsOf
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|starsOf
operator|.
name|accountId
argument_list|()
operator|.
name|equals
argument_list|(
name|accountId
argument_list|)
condition|)
block|{
name|starsOf
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|starsOf
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|stars
operator|!=
literal|null
condition|)
block|{
name|starsOf
operator|=
name|StarsOf
operator|.
name|create
argument_list|(
name|accountId
argument_list|,
name|stars
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|lazyLoad
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
name|starsOf
operator|=
name|StarsOf
operator|.
name|create
argument_list|(
name|accountId
argument_list|,
name|starredChangesUtil
operator|.
name|getLabels
argument_list|(
name|accountId
argument_list|,
name|legacyId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|starsOf
operator|.
name|stars
argument_list|()
return|;
block|}
comment|/**    * @return {@code null} if {@code revertOf} is {@code null}; true if the change is a pure revert;    *     false otherwise.    */
annotation|@
name|Nullable
DECL|method|isPureRevert ()
specifier|public
name|Boolean
name|isPureRevert
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|change
argument_list|()
operator|.
name|getRevertOf
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|pureRevert
operator|.
name|getPureRevert
argument_list|(
name|notes
argument_list|()
argument_list|)
operator|.
name|isPureRevert
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|BadRequestException
decl||
name|ResourceConflictException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"could not compute pure revert"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|MoreObjects
operator|.
name|ToStringHelper
name|h
init|=
name|MoreObjects
operator|.
name|toStringHelper
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|!=
literal|null
condition|)
block|{
name|h
operator|.
name|addValue
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|h
operator|.
name|addValue
argument_list|(
name|legacyId
argument_list|)
expr_stmt|;
block|}
return|return
name|h
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|ChangedLines
specifier|public
specifier|static
class|class
name|ChangedLines
block|{
DECL|field|insertions
specifier|public
specifier|final
name|int
name|insertions
decl_stmt|;
DECL|field|deletions
specifier|public
specifier|final
name|int
name|deletions
decl_stmt|;
DECL|method|ChangedLines (int insertions, int deletions)
specifier|public
name|ChangedLines
parameter_list|(
name|int
name|insertions
parameter_list|,
name|int
name|deletions
parameter_list|)
block|{
name|this
operator|.
name|insertions
operator|=
name|insertions
expr_stmt|;
name|this
operator|.
name|deletions
operator|=
name|deletions
expr_stmt|;
block|}
block|}
DECL|method|getRefStates ()
specifier|public
name|ImmutableList
argument_list|<
name|byte
index|[]
argument_list|>
name|getRefStates
parameter_list|()
block|{
return|return
name|refStates
return|;
block|}
DECL|method|setRefStates (Iterable<byte[]> refStates)
specifier|public
name|void
name|setRefStates
parameter_list|(
name|Iterable
argument_list|<
name|byte
index|[]
argument_list|>
name|refStates
parameter_list|)
block|{
name|this
operator|.
name|refStates
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|refStates
argument_list|)
expr_stmt|;
block|}
DECL|method|getRefStatePatterns ()
specifier|public
name|ImmutableList
argument_list|<
name|byte
index|[]
argument_list|>
name|getRefStatePatterns
parameter_list|()
block|{
return|return
name|refStatePatterns
return|;
block|}
DECL|method|setRefStatePatterns (Iterable<byte[]> refStatePatterns)
specifier|public
name|void
name|setRefStatePatterns
parameter_list|(
name|Iterable
argument_list|<
name|byte
index|[]
argument_list|>
name|refStatePatterns
parameter_list|)
block|{
name|this
operator|.
name|refStatePatterns
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|refStatePatterns
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AutoValue
DECL|class|ReviewedByEvent
specifier|abstract
specifier|static
class|class
name|ReviewedByEvent
block|{
DECL|method|create (ChangeMessage msg)
specifier|private
specifier|static
name|ReviewedByEvent
name|create
parameter_list|(
name|ChangeMessage
name|msg
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_ChangeData_ReviewedByEvent
argument_list|(
name|msg
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|msg
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
return|;
block|}
DECL|method|author ()
specifier|public
specifier|abstract
name|Account
operator|.
name|Id
name|author
parameter_list|()
function_decl|;
DECL|method|ts ()
specifier|public
specifier|abstract
name|Timestamp
name|ts
parameter_list|()
function_decl|;
block|}
annotation|@
name|AutoValue
DECL|class|StarsOf
specifier|abstract
specifier|static
class|class
name|StarsOf
block|{
DECL|method|create (Account.Id accountId, Iterable<String> stars)
specifier|private
specifier|static
name|StarsOf
name|create
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|stars
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_ChangeData_StarsOf
argument_list|(
name|accountId
argument_list|,
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|stars
argument_list|)
argument_list|)
return|;
block|}
DECL|method|accountId ()
specifier|public
specifier|abstract
name|Account
operator|.
name|Id
name|accountId
parameter_list|()
function_decl|;
DECL|method|stars ()
specifier|public
specifier|abstract
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|stars
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

