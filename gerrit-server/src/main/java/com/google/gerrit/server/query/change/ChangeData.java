begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
operator|.
name|sortApprovals
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitTypeRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchLineCommentsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|MergeabilityCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MergeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ReviewerState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|SubmitRuleEvaluator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|AssistedInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ChangeData
specifier|public
class|class
name|ChangeData
block|{
DECL|field|BATCH_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BATCH_SIZE
init|=
literal|50
decl_stmt|;
DECL|method|asChanges (List<ChangeData> changeDatas)
specifier|public
specifier|static
name|List
argument_list|<
name|Change
argument_list|>
name|asChanges
parameter_list|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changeDatas
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|Change
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|changeDatas
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|changeDatas
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|cd
operator|.
name|change
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|asMap (List<ChangeData> changes)
specifier|public
specifier|static
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeData
argument_list|>
name|asMap
parameter_list|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|)
block|{
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeData
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|changes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|ensureChangeLoaded (Iterable<ChangeData> changes)
specifier|public
specifier|static
name|void
name|ensureChangeLoaded
parameter_list|(
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeData
name|first
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|changes
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|first
operator|.
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
name|cd
operator|.
name|change
argument_list|()
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeData
argument_list|>
name|missing
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|change
operator|==
literal|null
condition|)
block|{
name|missing
operator|.
name|put
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|missing
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Change
name|change
range|:
name|first
operator|.
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|missing
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|missing
operator|.
name|get
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|change
operator|=
name|change
expr_stmt|;
block|}
block|}
DECL|method|ensureAllPatchSetsLoaded (Iterable<ChangeData> changes)
specifier|public
specifier|static
name|void
name|ensureAllPatchSetsLoaded
parameter_list|(
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeData
name|first
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|changes
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|first
operator|.
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
name|cd
operator|.
name|patchSets
argument_list|()
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|ResultSet
argument_list|<
name|PatchSet
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|BATCH_SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|batch
range|:
name|Iterables
operator|.
name|partition
argument_list|(
name|changes
argument_list|,
name|BATCH_SIZE
argument_list|)
control|)
block|{
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|batch
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|patchSets
operator|==
literal|null
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|cd
operator|.
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|byChange
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ResultSet
argument_list|<
name|PatchSet
argument_list|>
name|result
init|=
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|batch
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|patchSets
operator|=
name|result
operator|.
name|toList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|ensureCurrentPatchSetLoaded (Iterable<ChangeData> changes)
specifier|public
specifier|static
name|void
name|ensureCurrentPatchSetLoaded
parameter_list|(
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeData
name|first
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|changes
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|first
operator|.
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
name|cd
operator|.
name|currentPatchSet
argument_list|()
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|ChangeData
argument_list|>
name|missing
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|currentPatchSet
operator|==
literal|null
operator|&&
name|cd
operator|.
name|patchSets
operator|==
literal|null
condition|)
block|{
name|missing
operator|.
name|put
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|missing
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|PatchSet
name|ps
range|:
name|first
operator|.
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|missing
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|missing
operator|.
name|get
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|currentPatchSet
operator|=
name|ps
expr_stmt|;
block|}
block|}
DECL|method|ensureCurrentApprovalsLoaded (Iterable<ChangeData> changes)
specifier|public
specifier|static
name|void
name|ensureCurrentApprovalsLoaded
parameter_list|(
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeData
name|first
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|changes
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|first
operator|.
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
name|cd
operator|.
name|currentApprovals
argument_list|()
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|ResultSet
argument_list|<
name|PatchSetApproval
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|BATCH_SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|batch
range|:
name|Iterables
operator|.
name|partition
argument_list|(
name|changes
argument_list|,
name|BATCH_SIZE
argument_list|)
control|)
block|{
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|batch
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|currentApprovals
operator|==
literal|null
condition|)
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|cd
operator|.
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ResultSet
argument_list|<
name|PatchSetApproval
argument_list|>
name|result
init|=
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|batch
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|currentApprovals
operator|=
name|sortApprovals
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|ensureMessagesLoaded (Iterable<ChangeData> changes)
specifier|public
specifier|static
name|void
name|ensureMessagesLoaded
parameter_list|(
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeData
name|first
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|changes
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|first
operator|.
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
name|cd
operator|.
name|messages
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
name|List
argument_list|<
name|ResultSet
argument_list|<
name|ChangeMessage
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|BATCH_SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|batch
range|:
name|Iterables
operator|.
name|partition
argument_list|(
name|changes
argument_list|,
name|BATCH_SIZE
argument_list|)
control|)
block|{
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|batch
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|messages
operator|==
literal|null
condition|)
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|cd
operator|.
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ResultSet
argument_list|<
name|ChangeMessage
argument_list|>
name|result
init|=
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|batch
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|messages
operator|=
name|result
operator|.
name|toList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|ensureReviewedByLoadedForOpenChanges ( Iterable<ChangeData> changes)
specifier|public
specifier|static
name|void
name|ensureReviewedByLoadedForOpenChanges
parameter_list|(
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|ChangeData
argument_list|>
name|pending
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|reviewedBy
operator|==
literal|null
operator|&&
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|pending
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|pending
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ensureAllPatchSetsLoaded
argument_list|(
name|pending
argument_list|)
expr_stmt|;
name|ensureMessagesLoaded
argument_list|(
name|pending
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|pending
control|)
block|{
name|cd
operator|.
name|reviewedBy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (ReviewDb db, Change.Id id)
name|ChangeData
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
operator|.
name|Id
name|id
parameter_list|)
function_decl|;
DECL|method|create (ReviewDb db, Change c)
name|ChangeData
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
name|c
parameter_list|)
function_decl|;
DECL|method|create (ReviewDb db, ChangeControl c)
name|ChangeData
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ChangeControl
name|c
parameter_list|)
function_decl|;
block|}
comment|/**    * Create an instance for testing only.    *<p>    * Attempting to lazy load data will fail with NPEs. Callers may consider    * manually setting fields that can be set.    *    * @param id change ID    * @return instance for testing.    */
DECL|method|createForTest (Change.Id id, int currentPatchSetId)
specifier|public
specifier|static
name|ChangeData
name|createForTest
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|int
name|currentPatchSetId
parameter_list|)
block|{
name|ChangeData
name|cd
init|=
operator|new
name|ChangeData
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|cd
operator|.
name|currentPatchSet
operator|=
operator|new
name|PatchSet
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|id
argument_list|,
name|currentPatchSetId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cd
return|;
block|}
DECL|field|db
specifier|private
specifier|final
name|ReviewDb
name|db
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|changeControlFactory
specifier|private
specifier|final
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
DECL|field|userFactory
specifier|private
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|mergeUtilFactory
specifier|private
specifier|final
name|MergeUtil
operator|.
name|Factory
name|mergeUtilFactory
decl_stmt|;
DECL|field|notesFactory
specifier|private
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
decl_stmt|;
DECL|field|approvalsUtil
specifier|private
specifier|final
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
DECL|field|cmUtil
specifier|private
specifier|final
name|ChangeMessagesUtil
name|cmUtil
decl_stmt|;
DECL|field|plcUtil
specifier|private
specifier|final
name|PatchLineCommentsUtil
name|plcUtil
decl_stmt|;
DECL|field|patchListCache
specifier|private
specifier|final
name|PatchListCache
name|patchListCache
decl_stmt|;
DECL|field|notesMigration
specifier|private
specifier|final
name|NotesMigration
name|notesMigration
decl_stmt|;
DECL|field|mergeabilityCache
specifier|private
specifier|final
name|MergeabilityCache
name|mergeabilityCache
decl_stmt|;
DECL|field|legacyId
specifier|private
specifier|final
name|Change
operator|.
name|Id
name|legacyId
decl_stmt|;
DECL|field|returnedBySource
specifier|private
name|ChangeDataSource
name|returnedBySource
decl_stmt|;
DECL|field|change
specifier|private
name|Change
name|change
decl_stmt|;
DECL|field|notes
specifier|private
name|ChangeNotes
name|notes
decl_stmt|;
DECL|field|commitMessage
specifier|private
name|String
name|commitMessage
decl_stmt|;
DECL|field|commitFooters
specifier|private
name|List
argument_list|<
name|FooterLine
argument_list|>
name|commitFooters
decl_stmt|;
DECL|field|currentPatchSet
specifier|private
name|PatchSet
name|currentPatchSet
decl_stmt|;
DECL|field|patchSets
specifier|private
name|Collection
argument_list|<
name|PatchSet
argument_list|>
name|patchSets
decl_stmt|;
DECL|field|allApprovals
specifier|private
name|ListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|allApprovals
decl_stmt|;
DECL|field|currentApprovals
specifier|private
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|currentApprovals
decl_stmt|;
DECL|field|files
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|files
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|publishedComments
specifier|private
name|Collection
argument_list|<
name|PatchLineComment
argument_list|>
name|publishedComments
decl_stmt|;
DECL|field|visibleTo
specifier|private
name|CurrentUser
name|visibleTo
decl_stmt|;
DECL|field|changeControl
specifier|private
name|ChangeControl
name|changeControl
decl_stmt|;
DECL|field|messages
specifier|private
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|messages
decl_stmt|;
DECL|field|submitRecords
specifier|private
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|submitRecords
decl_stmt|;
DECL|field|changedLines
specifier|private
name|ChangedLines
name|changedLines
decl_stmt|;
DECL|field|mergeable
specifier|private
name|Boolean
name|mergeable
decl_stmt|;
DECL|field|editsByUser
specifier|private
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|editsByUser
decl_stmt|;
DECL|field|reviewedBy
specifier|private
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewedBy
decl_stmt|;
DECL|field|author
specifier|private
name|PersonIdent
name|author
decl_stmt|;
DECL|field|committer
specifier|private
name|PersonIdent
name|committer
decl_stmt|;
annotation|@
name|AssistedInject
DECL|method|ChangeData ( GitRepositoryManager repoManager, ChangeControl.GenericFactory changeControlFactory, IdentifiedUser.GenericFactory userFactory, ProjectCache projectCache, MergeUtil.Factory mergeUtilFactory, ChangeNotes.Factory notesFactory, ApprovalsUtil approvalsUtil, ChangeMessagesUtil cmUtil, PatchLineCommentsUtil plcUtil, PatchListCache patchListCache, NotesMigration notesMigration, MergeabilityCache mergeabilityCache, @Assisted ReviewDb db, @Assisted Change.Id id)
specifier|private
name|ChangeData
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|MergeUtil
operator|.
name|Factory
name|mergeUtilFactory
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
parameter_list|,
name|ApprovalsUtil
name|approvalsUtil
parameter_list|,
name|ChangeMessagesUtil
name|cmUtil
parameter_list|,
name|PatchLineCommentsUtil
name|plcUtil
parameter_list|,
name|PatchListCache
name|patchListCache
parameter_list|,
name|NotesMigration
name|notesMigration
parameter_list|,
name|MergeabilityCache
name|mergeabilityCache
parameter_list|,
annotation|@
name|Assisted
name|ReviewDb
name|db
parameter_list|,
annotation|@
name|Assisted
name|Change
operator|.
name|Id
name|id
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|changeControlFactory
operator|=
name|changeControlFactory
expr_stmt|;
name|this
operator|.
name|userFactory
operator|=
name|userFactory
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|mergeUtilFactory
operator|=
name|mergeUtilFactory
expr_stmt|;
name|this
operator|.
name|notesFactory
operator|=
name|notesFactory
expr_stmt|;
name|this
operator|.
name|approvalsUtil
operator|=
name|approvalsUtil
expr_stmt|;
name|this
operator|.
name|cmUtil
operator|=
name|cmUtil
expr_stmt|;
name|this
operator|.
name|plcUtil
operator|=
name|plcUtil
expr_stmt|;
name|this
operator|.
name|patchListCache
operator|=
name|patchListCache
expr_stmt|;
name|this
operator|.
name|notesMigration
operator|=
name|notesMigration
expr_stmt|;
name|this
operator|.
name|mergeabilityCache
operator|=
name|mergeabilityCache
expr_stmt|;
name|legacyId
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|AssistedInject
DECL|method|ChangeData ( GitRepositoryManager repoManager, ChangeControl.GenericFactory changeControlFactory, IdentifiedUser.GenericFactory userFactory, ProjectCache projectCache, MergeUtil.Factory mergeUtilFactory, ChangeNotes.Factory notesFactory, ApprovalsUtil approvalsUtil, ChangeMessagesUtil cmUtil, PatchLineCommentsUtil plcUtil, PatchListCache patchListCache, NotesMigration notesMigration, MergeabilityCache mergeabilityCache, @Assisted ReviewDb db, @Assisted Change c)
specifier|private
name|ChangeData
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|MergeUtil
operator|.
name|Factory
name|mergeUtilFactory
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
parameter_list|,
name|ApprovalsUtil
name|approvalsUtil
parameter_list|,
name|ChangeMessagesUtil
name|cmUtil
parameter_list|,
name|PatchLineCommentsUtil
name|plcUtil
parameter_list|,
name|PatchListCache
name|patchListCache
parameter_list|,
name|NotesMigration
name|notesMigration
parameter_list|,
name|MergeabilityCache
name|mergeabilityCache
parameter_list|,
annotation|@
name|Assisted
name|ReviewDb
name|db
parameter_list|,
annotation|@
name|Assisted
name|Change
name|c
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|changeControlFactory
operator|=
name|changeControlFactory
expr_stmt|;
name|this
operator|.
name|userFactory
operator|=
name|userFactory
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|mergeUtilFactory
operator|=
name|mergeUtilFactory
expr_stmt|;
name|this
operator|.
name|notesFactory
operator|=
name|notesFactory
expr_stmt|;
name|this
operator|.
name|approvalsUtil
operator|=
name|approvalsUtil
expr_stmt|;
name|this
operator|.
name|cmUtil
operator|=
name|cmUtil
expr_stmt|;
name|this
operator|.
name|plcUtil
operator|=
name|plcUtil
expr_stmt|;
name|this
operator|.
name|patchListCache
operator|=
name|patchListCache
expr_stmt|;
name|this
operator|.
name|notesMigration
operator|=
name|notesMigration
expr_stmt|;
name|this
operator|.
name|mergeabilityCache
operator|=
name|mergeabilityCache
expr_stmt|;
name|legacyId
operator|=
name|c
operator|.
name|getId
argument_list|()
expr_stmt|;
name|change
operator|=
name|c
expr_stmt|;
block|}
annotation|@
name|AssistedInject
DECL|method|ChangeData ( GitRepositoryManager repoManager, ChangeControl.GenericFactory changeControlFactory, IdentifiedUser.GenericFactory userFactory, ProjectCache projectCache, MergeUtil.Factory mergeUtilFactory, ChangeNotes.Factory notesFactory, ApprovalsUtil approvalsUtil, ChangeMessagesUtil cmUtil, PatchLineCommentsUtil plcUtil, PatchListCache patchListCache, NotesMigration notesMigration, MergeabilityCache mergeabilityCache, @Assisted ReviewDb db, @Assisted ChangeControl c)
specifier|private
name|ChangeData
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|MergeUtil
operator|.
name|Factory
name|mergeUtilFactory
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
parameter_list|,
name|ApprovalsUtil
name|approvalsUtil
parameter_list|,
name|ChangeMessagesUtil
name|cmUtil
parameter_list|,
name|PatchLineCommentsUtil
name|plcUtil
parameter_list|,
name|PatchListCache
name|patchListCache
parameter_list|,
name|NotesMigration
name|notesMigration
parameter_list|,
name|MergeabilityCache
name|mergeabilityCache
parameter_list|,
annotation|@
name|Assisted
name|ReviewDb
name|db
parameter_list|,
annotation|@
name|Assisted
name|ChangeControl
name|c
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|changeControlFactory
operator|=
name|changeControlFactory
expr_stmt|;
name|this
operator|.
name|userFactory
operator|=
name|userFactory
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|mergeUtilFactory
operator|=
name|mergeUtilFactory
expr_stmt|;
name|this
operator|.
name|notesFactory
operator|=
name|notesFactory
expr_stmt|;
name|this
operator|.
name|approvalsUtil
operator|=
name|approvalsUtil
expr_stmt|;
name|this
operator|.
name|cmUtil
operator|=
name|cmUtil
expr_stmt|;
name|this
operator|.
name|plcUtil
operator|=
name|plcUtil
expr_stmt|;
name|this
operator|.
name|patchListCache
operator|=
name|patchListCache
expr_stmt|;
name|this
operator|.
name|notesMigration
operator|=
name|notesMigration
expr_stmt|;
name|this
operator|.
name|mergeabilityCache
operator|=
name|mergeabilityCache
expr_stmt|;
name|legacyId
operator|=
name|c
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|change
operator|=
name|c
operator|.
name|getChange
argument_list|()
expr_stmt|;
name|changeControl
operator|=
name|c
expr_stmt|;
name|notes
operator|=
name|c
operator|.
name|getNotes
argument_list|()
expr_stmt|;
block|}
DECL|method|db ()
specifier|public
name|ReviewDb
name|db
parameter_list|()
block|{
return|return
name|db
return|;
block|}
DECL|method|isFromSource (ChangeDataSource s)
specifier|public
name|boolean
name|isFromSource
parameter_list|(
name|ChangeDataSource
name|s
parameter_list|)
block|{
return|return
name|s
operator|==
name|returnedBySource
return|;
block|}
DECL|method|cacheFromSource (ChangeDataSource s)
specifier|public
name|void
name|cacheFromSource
parameter_list|(
name|ChangeDataSource
name|s
parameter_list|)
block|{
name|returnedBySource
operator|=
name|s
expr_stmt|;
block|}
DECL|method|setCurrentFilePaths (List<String> filePaths)
specifier|public
name|void
name|setCurrentFilePaths
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|filePaths
parameter_list|)
throws|throws
name|OrmException
block|{
name|PatchSet
name|ps
init|=
name|currentPatchSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
block|{
name|files
operator|.
name|put
argument_list|(
name|ps
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|filePaths
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|currentFilePaths ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|currentFilePaths
parameter_list|()
throws|throws
name|OrmException
block|{
name|PatchSet
name|ps
init|=
name|currentPatchSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|filePaths
argument_list|(
name|currentPatchSet
argument_list|)
return|;
block|}
DECL|method|filePaths (PatchSet ps)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|filePaths
parameter_list|(
name|PatchSet
name|ps
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
operator|!
name|files
operator|.
name|containsKey
argument_list|(
name|ps
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
name|Change
name|c
init|=
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PatchList
name|p
decl_stmt|;
try|try
block|{
name|p
operator|=
name|patchListCache
operator|.
name|get
argument_list|(
name|c
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatchListNotAvailableException
name|e
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|emptyFileList
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|files
operator|.
name|put
argument_list|(
name|ps
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|emptyFileList
argument_list|)
expr_stmt|;
return|return
name|emptyFileList
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|p
operator|.
name|getPatches
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchListEntry
name|e
range|:
name|p
operator|.
name|getPatches
argument_list|()
control|)
block|{
if|if
condition|(
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getNewName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
switch|switch
condition|(
name|e
operator|.
name|getChangeType
argument_list|()
condition|)
block|{
case|case
name|ADDED
case|:
case|case
name|MODIFIED
case|:
case|case
name|DELETED
case|:
case|case
name|COPIED
case|:
case|case
name|REWRITE
case|:
name|r
operator|.
name|add
argument_list|(
name|e
operator|.
name|getNewName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|RENAMED
case|:
name|r
operator|.
name|add
argument_list|(
name|e
operator|.
name|getOldName
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
name|e
operator|.
name|getNewName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|files
operator|.
name|put
argument_list|(
name|ps
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|files
operator|.
name|get
argument_list|(
name|ps
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|changedLines ()
specifier|public
name|ChangedLines
name|changedLines
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|changedLines
operator|==
literal|null
condition|)
block|{
name|Change
name|c
init|=
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PatchSet
name|ps
init|=
name|currentPatchSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PatchList
name|p
decl_stmt|;
try|try
block|{
name|p
operator|=
name|patchListCache
operator|.
name|get
argument_list|(
name|c
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatchListNotAvailableException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|changedLines
operator|=
operator|new
name|ChangedLines
argument_list|(
name|p
operator|.
name|getInsertions
argument_list|()
argument_list|,
name|p
operator|.
name|getDeletions
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|changedLines
return|;
block|}
DECL|method|setChangedLines (int insertions, int deletions)
specifier|public
name|void
name|setChangedLines
parameter_list|(
name|int
name|insertions
parameter_list|,
name|int
name|deletions
parameter_list|)
block|{
name|changedLines
operator|=
operator|new
name|ChangedLines
argument_list|(
name|insertions
argument_list|,
name|deletions
argument_list|)
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|Change
operator|.
name|Id
name|getId
parameter_list|()
block|{
return|return
name|legacyId
return|;
block|}
DECL|method|fastIsVisibleTo (CurrentUser user)
name|boolean
name|fastIsVisibleTo
parameter_list|(
name|CurrentUser
name|user
parameter_list|)
block|{
return|return
name|visibleTo
operator|==
name|user
return|;
block|}
DECL|method|hasChangeControl ()
specifier|public
name|boolean
name|hasChangeControl
parameter_list|()
block|{
return|return
name|changeControl
operator|!=
literal|null
return|;
block|}
DECL|method|changeControl ()
specifier|public
name|ChangeControl
name|changeControl
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|changeControl
operator|==
literal|null
condition|)
block|{
name|Change
name|c
init|=
name|change
argument_list|()
decl_stmt|;
try|try
block|{
name|changeControl
operator|=
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|c
argument_list|,
name|userFactory
operator|.
name|create
argument_list|(
name|c
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchChangeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|changeControl
return|;
block|}
DECL|method|cacheVisibleTo (ChangeControl ctl)
name|void
name|cacheVisibleTo
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|)
block|{
name|visibleTo
operator|=
name|ctl
operator|.
name|getUser
argument_list|()
expr_stmt|;
name|changeControl
operator|=
name|ctl
expr_stmt|;
block|}
DECL|method|change ()
specifier|public
name|Change
name|change
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
name|reloadChange
argument_list|()
expr_stmt|;
block|}
return|return
name|change
return|;
block|}
DECL|method|setChange (Change c)
specifier|public
name|void
name|setChange
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
name|change
operator|=
name|c
expr_stmt|;
block|}
DECL|method|reloadChange ()
specifier|public
name|Change
name|reloadChange
parameter_list|()
throws|throws
name|OrmException
block|{
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|legacyId
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Unable to load change "
operator|+
name|legacyId
argument_list|)
throw|;
block|}
return|return
name|change
return|;
block|}
DECL|method|notes ()
specifier|public
name|ChangeNotes
name|notes
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|notes
operator|==
literal|null
condition|)
block|{
name|notes
operator|=
name|notesFactory
operator|.
name|create
argument_list|(
name|change
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|notes
return|;
block|}
DECL|method|currentPatchSet ()
specifier|public
name|PatchSet
name|currentPatchSet
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|currentPatchSet
operator|==
literal|null
condition|)
block|{
name|Change
name|c
init|=
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|PatchSet
name|p
range|:
name|patchSets
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
name|currentPatchSet
operator|=
name|p
expr_stmt|;
return|return
name|p
return|;
block|}
block|}
block|}
return|return
name|currentPatchSet
return|;
block|}
DECL|method|currentApprovals ()
specifier|public
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|currentApprovals
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|currentApprovals
operator|==
literal|null
condition|)
block|{
name|Change
name|c
init|=
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|currentApprovals
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|currentApprovals
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|approvalsUtil
operator|.
name|byPatchSet
argument_list|(
name|db
argument_list|,
name|changeControl
argument_list|()
argument_list|,
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|currentApprovals
return|;
block|}
DECL|method|setCurrentApprovals (List<PatchSetApproval> approvals)
specifier|public
name|void
name|setCurrentApprovals
parameter_list|(
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvals
parameter_list|)
block|{
name|currentApprovals
operator|=
name|approvals
expr_stmt|;
block|}
DECL|method|commitMessage ()
specifier|public
name|String
name|commitMessage
parameter_list|()
throws|throws
name|IOException
throws|,
name|OrmException
block|{
if|if
condition|(
name|commitMessage
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|loadCommitData
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|commitMessage
return|;
block|}
DECL|method|commitFooters ()
specifier|public
name|List
argument_list|<
name|FooterLine
argument_list|>
name|commitFooters
parameter_list|()
throws|throws
name|IOException
throws|,
name|OrmException
block|{
if|if
condition|(
name|commitFooters
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|loadCommitData
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|commitFooters
return|;
block|}
DECL|method|getAuthor ()
specifier|public
name|PersonIdent
name|getAuthor
parameter_list|()
throws|throws
name|IOException
throws|,
name|OrmException
block|{
if|if
condition|(
name|author
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|loadCommitData
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|author
return|;
block|}
DECL|method|getCommitter ()
specifier|public
name|PersonIdent
name|getCommitter
parameter_list|()
throws|throws
name|IOException
throws|,
name|OrmException
block|{
if|if
condition|(
name|committer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|loadCommitData
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|committer
return|;
block|}
DECL|method|loadCommitData ()
specifier|private
name|boolean
name|loadCommitData
parameter_list|()
throws|throws
name|OrmException
throws|,
name|RepositoryNotFoundException
throws|,
name|IOException
throws|,
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
block|{
name|PatchSet
name|ps
init|=
name|currentPatchSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|sha1
init|=
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|change
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|)
init|;
name|RevWalk
name|walk
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RevCommit
name|c
init|=
name|walk
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|sha1
argument_list|)
argument_list|)
decl_stmt|;
name|commitMessage
operator|=
name|c
operator|.
name|getFullMessage
argument_list|()
expr_stmt|;
name|commitFooters
operator|=
name|c
operator|.
name|getFooterLines
argument_list|()
expr_stmt|;
name|author
operator|=
name|c
operator|.
name|getAuthorIdent
argument_list|()
expr_stmt|;
name|committer
operator|=
name|c
operator|.
name|getCommitterIdent
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * @return patches for the change.    * @throws OrmException an error occurred reading the database.    */
DECL|method|patchSets ()
specifier|public
name|Collection
argument_list|<
name|PatchSet
argument_list|>
name|patchSets
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|patchSets
operator|==
literal|null
condition|)
block|{
name|patchSets
operator|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|byChange
argument_list|(
name|legacyId
argument_list|)
operator|.
name|toList
argument_list|()
expr_stmt|;
block|}
return|return
name|patchSets
return|;
block|}
comment|/**    * @return patches for the change visible to the current user.    * @throws OrmException an error occurred reading the database.    */
DECL|method|visiblePatchSets ()
specifier|public
name|Collection
argument_list|<
name|PatchSet
argument_list|>
name|visiblePatchSets
parameter_list|()
throws|throws
name|OrmException
block|{
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|patchSets
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|Predicate
argument_list|<
name|PatchSet
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|PatchSet
name|input
parameter_list|)
block|{
try|try
block|{
return|return
name|changeControl
argument_list|()
operator|.
name|isPatchVisible
argument_list|(
name|input
argument_list|,
name|db
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
return|;
block|}
DECL|method|setPatchSets (Collection<PatchSet> patchSets)
specifier|public
name|void
name|setPatchSets
parameter_list|(
name|Collection
argument_list|<
name|PatchSet
argument_list|>
name|patchSets
parameter_list|)
block|{
name|this
operator|.
name|currentPatchSet
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|patchSets
operator|=
name|patchSets
expr_stmt|;
block|}
comment|/**    * @return patch with the given ID, or null if it does not exist.    * @throws OrmException an error occurred reading the database.    */
DECL|method|patchSet (PatchSet.Id psId)
specifier|public
name|PatchSet
name|patchSet
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|currentPatchSet
operator|!=
literal|null
operator|&&
name|currentPatchSet
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
condition|)
block|{
return|return
name|currentPatchSet
return|;
block|}
for|for
control|(
name|PatchSet
name|ps
range|:
name|patchSets
argument_list|()
control|)
block|{
if|if
condition|(
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
condition|)
block|{
return|return
name|ps
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * @return all patch set approvals for the change, keyed by ID, ordered by    *     timestamp within each patch set.    * @throws OrmException an error occurred reading the database.    */
DECL|method|approvals ()
specifier|public
name|ListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|approvals
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|allApprovals
operator|==
literal|null
condition|)
block|{
name|allApprovals
operator|=
name|approvalsUtil
operator|.
name|byChange
argument_list|(
name|db
argument_list|,
name|notes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|allApprovals
return|;
block|}
DECL|method|reviewers ()
specifier|public
name|SetMultimap
argument_list|<
name|ReviewerState
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
parameter_list|()
throws|throws
name|OrmException
block|{
return|return
name|approvalsUtil
operator|.
name|getReviewers
argument_list|(
name|notes
argument_list|()
argument_list|,
name|approvals
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
DECL|method|publishedComments ()
specifier|public
name|Collection
argument_list|<
name|PatchLineComment
argument_list|>
name|publishedComments
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|publishedComments
operator|==
literal|null
condition|)
block|{
name|publishedComments
operator|=
name|plcUtil
operator|.
name|publishedByChange
argument_list|(
name|db
argument_list|,
name|notes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|publishedComments
return|;
block|}
DECL|method|messages ()
specifier|public
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|messages
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|messages
operator|==
literal|null
condition|)
block|{
name|messages
operator|=
name|cmUtil
operator|.
name|byChange
argument_list|(
name|db
argument_list|,
name|notes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|messages
return|;
block|}
DECL|method|setSubmitRecords (List<SubmitRecord> records)
specifier|public
name|void
name|setSubmitRecords
parameter_list|(
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|records
parameter_list|)
block|{
name|submitRecords
operator|=
name|records
expr_stmt|;
block|}
DECL|method|getSubmitRecords ()
specifier|public
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|getSubmitRecords
parameter_list|()
block|{
return|return
name|submitRecords
return|;
block|}
DECL|method|setMergeable (Boolean mergeable)
specifier|public
name|void
name|setMergeable
parameter_list|(
name|Boolean
name|mergeable
parameter_list|)
block|{
name|this
operator|.
name|mergeable
operator|=
name|mergeable
expr_stmt|;
block|}
DECL|method|isMergeable ()
specifier|public
name|Boolean
name|isMergeable
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|mergeable
operator|==
literal|null
condition|)
block|{
name|Change
name|c
init|=
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|c
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|MERGED
condition|)
block|{
name|mergeable
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|PatchSet
name|ps
init|=
name|currentPatchSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
operator|||
operator|!
name|changeControl
argument_list|()
operator|.
name|isPatchVisible
argument_list|(
name|ps
argument_list|,
name|db
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|c
operator|.
name|getProject
argument_list|()
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
name|c
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|SubmitTypeRecord
name|rec
init|=
operator|new
name|SubmitRuleEvaluator
argument_list|(
name|this
argument_list|)
operator|.
name|getSubmitType
argument_list|()
decl_stmt|;
if|if
condition|(
name|rec
operator|.
name|status
operator|!=
name|SubmitTypeRecord
operator|.
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Error in mergeability check: "
operator|+
name|rec
operator|.
name|errorMessage
argument_list|)
throw|;
block|}
name|String
name|mergeStrategy
init|=
name|mergeUtilFactory
operator|.
name|create
argument_list|(
name|projectCache
operator|.
name|get
argument_list|(
name|c
operator|.
name|getProject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|mergeStrategyName
argument_list|()
decl_stmt|;
name|mergeable
operator|=
name|mergeabilityCache
operator|.
name|get
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|ref
argument_list|,
name|rec
operator|.
name|type
argument_list|,
name|mergeStrategy
argument_list|,
name|c
operator|.
name|getDest
argument_list|()
argument_list|,
name|repo
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|mergeable
return|;
block|}
DECL|method|editsByUser ()
specifier|public
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|editsByUser
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|editsByUser
operator|==
literal|null
condition|)
block|{
name|Change
name|c
init|=
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|editsByUser
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|change
operator|.
name|getId
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|ref
range|:
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|RefNames
operator|.
name|REFS_USERS
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Change
operator|.
name|Id
operator|.
name|fromEditRefPart
argument_list|(
name|ref
argument_list|)
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|editsByUser
operator|.
name|add
argument_list|(
name|Account
operator|.
name|Id
operator|.
name|fromRefPart
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|editsByUser
return|;
block|}
DECL|method|reviewedBy ()
specifier|public
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewedBy
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|reviewedBy
operator|==
literal|null
condition|)
block|{
name|Change
name|c
init|=
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ReviewedByEvent
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeMessage
name|msg
range|:
name|messages
argument_list|()
control|)
block|{
if|if
condition|(
name|msg
operator|.
name|getAuthor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
name|ReviewedByEvent
operator|.
name|create
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|PatchSet
name|ps
range|:
name|patchSets
argument_list|()
control|)
block|{
name|events
operator|.
name|add
argument_list|(
name|ReviewedByEvent
operator|.
name|create
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|events
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
name|reviewedBy
operator|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|Account
operator|.
name|Id
name|owner
init|=
name|c
operator|.
name|getOwner
argument_list|()
decl_stmt|;
for|for
control|(
name|ReviewedByEvent
name|event
range|:
name|events
control|)
block|{
if|if
condition|(
name|owner
operator|.
name|equals
argument_list|(
name|event
operator|.
name|author
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
name|reviewedBy
operator|.
name|add
argument_list|(
name|event
operator|.
name|author
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|reviewedBy
return|;
block|}
DECL|method|setReviewedBy (Set<Account.Id> reviewedBy)
specifier|public
name|void
name|setReviewedBy
parameter_list|(
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewedBy
parameter_list|)
block|{
name|this
operator|.
name|reviewedBy
operator|=
name|reviewedBy
expr_stmt|;
block|}
annotation|@
name|AutoValue
DECL|class|ReviewedByEvent
specifier|abstract
specifier|static
class|class
name|ReviewedByEvent
implements|implements
name|Comparable
argument_list|<
name|ReviewedByEvent
argument_list|>
block|{
DECL|method|create (PatchSet ps)
specifier|private
specifier|static
name|ReviewedByEvent
name|create
parameter_list|(
name|PatchSet
name|ps
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_ChangeData_ReviewedByEvent
argument_list|(
name|ps
operator|.
name|getUploader
argument_list|()
argument_list|,
name|ps
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
return|;
block|}
DECL|method|create (ChangeMessage msg)
specifier|private
specifier|static
name|ReviewedByEvent
name|create
parameter_list|(
name|ChangeMessage
name|msg
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_ChangeData_ReviewedByEvent
argument_list|(
name|msg
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|msg
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
return|;
block|}
DECL|method|author ()
specifier|public
specifier|abstract
name|Account
operator|.
name|Id
name|author
parameter_list|()
function_decl|;
DECL|method|ts ()
specifier|public
specifier|abstract
name|Timestamp
name|ts
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|compareTo (ReviewedByEvent other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ReviewedByEvent
name|other
parameter_list|)
block|{
return|return
name|ts
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|ts
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|MoreObjects
operator|.
name|ToStringHelper
name|h
init|=
name|MoreObjects
operator|.
name|toStringHelper
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|!=
literal|null
condition|)
block|{
name|h
operator|.
name|addValue
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|h
operator|.
name|addValue
argument_list|(
name|legacyId
argument_list|)
expr_stmt|;
block|}
return|return
name|h
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|ChangedLines
specifier|public
specifier|static
class|class
name|ChangedLines
block|{
DECL|field|insertions
specifier|public
specifier|final
name|int
name|insertions
decl_stmt|;
DECL|field|deletions
specifier|public
specifier|final
name|int
name|deletions
decl_stmt|;
DECL|method|ChangedLines (int insertions, int deletions)
name|ChangedLines
parameter_list|(
name|int
name|insertions
parameter_list|,
name|int
name|deletions
parameter_list|)
block|{
name|this
operator|.
name|insertions
operator|=
name|insertions
expr_stmt|;
name|this
operator|.
name|deletions
operator|=
name|deletions
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

