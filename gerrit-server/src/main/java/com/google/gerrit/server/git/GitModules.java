begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|SubmoduleSubscription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|SubmoduleSectionParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|AssistedInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BlobBasedConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|FileMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|treewalk
operator|.
name|TreeWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Loads the .gitmodules file of the specified project/branch.  * It can be queried which submodules this branch is subscribed to.  */
end_comment

begin_class
DECL|class|GitModules
specifier|public
class|class
name|GitModules
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GitModules
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (Branch.NameKey project, String submissionId)
name|GitModules
name|create
parameter_list|(
name|Branch
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|submissionId
parameter_list|)
function_decl|;
block|}
DECL|field|GIT_MODULES
specifier|private
specifier|static
specifier|final
name|String
name|GIT_MODULES
init|=
literal|".gitmodules"
decl_stmt|;
DECL|field|thisServer
specifier|private
specifier|final
name|String
name|thisServer
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|subSecParserFactory
specifier|private
specifier|final
name|SubmoduleSectionParser
operator|.
name|Factory
name|subSecParserFactory
decl_stmt|;
DECL|field|branch
specifier|private
specifier|final
name|Branch
operator|.
name|NameKey
name|branch
decl_stmt|;
DECL|field|submissionId
specifier|private
specifier|final
name|String
name|submissionId
decl_stmt|;
DECL|field|subscriptions
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|subscriptions
decl_stmt|;
annotation|@
name|AssistedInject
DECL|method|GitModules ( @anonicalWebUrl @ullable String canonicalWebUrl, GitRepositoryManager repoManager, SubmoduleSectionParser.Factory subSecParserFactory, @Assisted Branch.NameKey branch, @Assisted String submissionId)
name|GitModules
parameter_list|(
annotation|@
name|CanonicalWebUrl
annotation|@
name|Nullable
name|String
name|canonicalWebUrl
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|SubmoduleSectionParser
operator|.
name|Factory
name|subSecParserFactory
parameter_list|,
annotation|@
name|Assisted
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|,
annotation|@
name|Assisted
name|String
name|submissionId
parameter_list|)
throws|throws
name|SubmoduleException
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|subSecParserFactory
operator|=
name|subSecParserFactory
expr_stmt|;
name|this
operator|.
name|branch
operator|=
name|branch
expr_stmt|;
name|this
operator|.
name|submissionId
operator|=
name|submissionId
expr_stmt|;
try|try
block|{
name|this
operator|.
name|thisServer
operator|=
operator|new
name|URI
argument_list|(
name|canonicalWebUrl
argument_list|)
operator|.
name|getHost
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SubmoduleException
argument_list|(
literal|"Incorrect Gerrit canonical web url "
operator|+
literal|"provided in gerrit.config file."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|load ()
name|void
name|load
parameter_list|()
throws|throws
name|IOException
block|{
name|Project
operator|.
name|NameKey
name|project
init|=
name|branch
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|logDebug
argument_list|(
literal|"Loading .gitmodules of {} for project {}"
argument_list|,
name|branch
argument_list|,
name|project
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|ObjectId
name|id
init|=
name|repo
operator|.
name|resolve
argument_list|(
name|branch
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot open branch "
operator|+
name|branch
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
name|RevCommit
name|commit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|TreeWalk
name|tw
init|=
name|TreeWalk
operator|.
name|forPath
argument_list|(
name|repo
argument_list|,
name|GIT_MODULES
argument_list|,
name|commit
operator|.
name|getTree
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tw
operator|==
literal|null
operator|||
operator|(
name|tw
operator|.
name|getRawMode
argument_list|(
literal|0
argument_list|)
operator|&
name|FileMode
operator|.
name|TYPE_MASK
operator|)
operator|!=
name|FileMode
operator|.
name|TYPE_FILE
condition|)
block|{
return|return;
block|}
name|BlobBasedConfig
name|bbc
init|=
operator|new
name|BlobBasedConfig
argument_list|(
literal|null
argument_list|,
name|repo
argument_list|,
name|commit
argument_list|,
name|GIT_MODULES
argument_list|)
decl_stmt|;
name|subscriptions
operator|=
name|subSecParserFactory
operator|.
name|create
argument_list|(
name|bbc
argument_list|,
name|thisServer
argument_list|,
name|branch
argument_list|)
operator|.
name|parseAllSections
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not read .gitmodule file of super project: "
operator|+
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|subscribedTo (Branch.NameKey src)
specifier|public
name|Collection
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|subscribedTo
parameter_list|(
name|Branch
operator|.
name|NameKey
name|src
parameter_list|)
block|{
name|logDebug
argument_list|(
literal|"Checking for a subscription of "
operator|+
name|src
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubmoduleSubscription
name|s
range|:
name|subscriptions
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getSubmodule
argument_list|()
operator|.
name|equals
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|logDebug
argument_list|(
literal|"Found "
operator|+
name|s
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
DECL|method|logDebug (String msg, Object... args)
specifier|private
name|void
name|logDebug
parameter_list|(
name|String
name|msg
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|submissionId
operator|+
literal|"]"
operator|+
name|msg
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

