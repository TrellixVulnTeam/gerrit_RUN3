begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
operator|.
name|asChanges
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetAncestor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeInserter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeMessages
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeTriplet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|CommitReceivedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|ChangeIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|RevertedSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|InvalidChangeOperationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|SshInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|MagicBranch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmConcurrencyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BatchRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|NullProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|ChangeIdUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|ChangeUtil
specifier|public
class|class
name|ChangeUtil
block|{
DECL|field|uuidLock
specifier|private
specifier|static
specifier|final
name|Object
name|uuidLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|SEED
specifier|private
specifier|static
specifier|final
name|int
name|SEED
init|=
literal|0x2418e6f9
decl_stmt|;
DECL|field|uuidPrefix
specifier|private
specifier|static
name|int
name|uuidPrefix
decl_stmt|;
DECL|field|uuidSeq
specifier|private
specifier|static
name|int
name|uuidSeq
decl_stmt|;
DECL|field|SUBJECT_MAX_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|SUBJECT_MAX_LENGTH
init|=
literal|80
decl_stmt|;
DECL|field|SUBJECT_CROP_APPENDIX
specifier|private
specifier|static
specifier|final
name|String
name|SUBJECT_CROP_APPENDIX
init|=
literal|"..."
decl_stmt|;
DECL|field|SUBJECT_CROP_RANGE
specifier|private
specifier|static
specifier|final
name|int
name|SUBJECT_CROP_RANGE
init|=
literal|10
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChangeUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TO_PS_ID
specifier|public
specifier|static
specifier|final
name|Function
argument_list|<
name|PatchSet
argument_list|,
name|Integer
argument_list|>
name|TO_PS_ID
init|=
operator|new
name|Function
argument_list|<
name|PatchSet
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|PatchSet
name|in
parameter_list|)
block|{
return|return
name|in
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|PS_ID_ORDER
specifier|public
specifier|static
specifier|final
name|Ordering
argument_list|<
name|PatchSet
argument_list|>
name|PS_ID_ORDER
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|onResultOf
argument_list|(
name|TO_PS_ID
argument_list|)
decl_stmt|;
comment|/**    * Generate a new unique identifier for change message entities.    *    * @param db the database connection, used to increment the change message    *        allocation sequence.    * @return the new unique identifier.    * @throws OrmException the database couldn't be incremented.    */
DECL|method|messageUUID (ReviewDb db)
specifier|public
specifier|static
name|String
name|messageUUID
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
name|int
name|p
decl_stmt|;
name|int
name|s
decl_stmt|;
synchronized|synchronized
init|(
name|uuidLock
init|)
block|{
if|if
condition|(
name|uuidSeq
operator|==
literal|0
condition|)
block|{
name|uuidPrefix
operator|=
name|db
operator|.
name|nextChangeMessageId
argument_list|()
expr_stmt|;
name|uuidSeq
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|p
operator|=
name|uuidPrefix
expr_stmt|;
name|s
operator|=
name|uuidSeq
operator|--
expr_stmt|;
block|}
name|String
name|u
init|=
name|IdGenerator
operator|.
name|format
argument_list|(
name|IdGenerator
operator|.
name|mix
argument_list|(
name|SEED
argument_list|,
name|p
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|l
init|=
name|IdGenerator
operator|.
name|format
argument_list|(
name|IdGenerator
operator|.
name|mix
argument_list|(
name|p
argument_list|,
name|s
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|u
operator|+
literal|'_'
operator|+
name|l
return|;
block|}
DECL|method|touch (Change change, ReviewDb db)
specifier|public
specifier|static
name|void
name|touch
parameter_list|(
name|Change
name|change
parameter_list|,
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
block|{
name|updated
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmConcurrencyException
name|e
parameter_list|)
block|{
comment|// Ignore a concurrent update, we just wanted to tag it as newer.
block|}
block|}
DECL|method|bumpRowVersionNotLastUpdatedOn (Change.Id id, ReviewDb db)
specifier|public
specifier|static
name|void
name|bumpRowVersionNotLastUpdatedOn
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
comment|// Empty update of Change to bump rowVersion, changing its ETag.
name|Change
name|c
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updated (Change c)
specifier|public
specifier|static
name|void
name|updated
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
name|c
operator|.
name|setLastUpdatedOn
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|insertAncestors (ReviewDb db, PatchSet.Id id, RevCommit src)
specifier|public
specifier|static
name|void
name|insertAncestors
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|PatchSet
operator|.
name|Id
name|id
parameter_list|,
name|RevCommit
name|src
parameter_list|)
throws|throws
name|OrmException
block|{
name|int
name|cnt
init|=
name|src
operator|.
name|getParentCount
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PatchSetAncestor
argument_list|>
name|toInsert
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cnt
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|cnt
condition|;
name|p
operator|++
control|)
block|{
name|PatchSetAncestor
name|a
init|=
operator|new
name|PatchSetAncestor
argument_list|(
operator|new
name|PatchSetAncestor
operator|.
name|Id
argument_list|(
name|id
argument_list|,
name|p
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|setAncestorRevision
argument_list|(
operator|new
name|RevId
argument_list|(
name|src
operator|.
name|getParent
argument_list|(
name|p
argument_list|)
operator|.
name|getId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|toInsert
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|patchSetAncestors
argument_list|()
operator|.
name|insert
argument_list|(
name|toInsert
argument_list|)
expr_stmt|;
block|}
DECL|method|nextPatchSetId (Map<String, Ref> allRefs, PatchSet.Id id)
specifier|public
specifier|static
name|PatchSet
operator|.
name|Id
name|nextPatchSetId
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|allRefs
parameter_list|,
name|PatchSet
operator|.
name|Id
name|id
parameter_list|)
block|{
name|PatchSet
operator|.
name|Id
name|next
init|=
name|nextPatchSetId
argument_list|(
name|id
argument_list|)
decl_stmt|;
while|while
condition|(
name|allRefs
operator|.
name|containsKey
argument_list|(
name|next
operator|.
name|toRefName
argument_list|()
argument_list|)
condition|)
block|{
name|next
operator|=
name|nextPatchSetId
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
return|return
name|next
return|;
block|}
DECL|method|nextPatchSetId (Repository git, PatchSet.Id id)
specifier|public
specifier|static
name|PatchSet
operator|.
name|Id
name|nextPatchSetId
parameter_list|(
name|Repository
name|git
parameter_list|,
name|PatchSet
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|nextPatchSetId
argument_list|(
name|git
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|RefDatabase
operator|.
name|ALL
argument_list|)
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|cropSubject (String subject)
specifier|public
specifier|static
name|String
name|cropSubject
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
if|if
condition|(
name|subject
operator|.
name|length
argument_list|()
operator|>
name|SUBJECT_MAX_LENGTH
condition|)
block|{
name|int
name|maxLength
init|=
name|SUBJECT_MAX_LENGTH
operator|-
name|SUBJECT_CROP_APPENDIX
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|cropPosition
init|=
name|maxLength
init|;
name|cropPosition
operator|>
name|maxLength
operator|-
name|SUBJECT_CROP_RANGE
condition|;
name|cropPosition
operator|--
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|subject
operator|.
name|charAt
argument_list|(
name|cropPosition
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|subject
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|cropPosition
argument_list|)
operator|+
name|SUBJECT_CROP_APPENDIX
return|;
block|}
block|}
return|return
name|subject
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxLength
argument_list|)
operator|+
name|SUBJECT_CROP_APPENDIX
return|;
block|}
return|return
name|subject
return|;
block|}
DECL|field|userProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|userProvider
decl_stmt|;
DECL|field|commitValidatorsFactory
specifier|private
specifier|final
name|CommitValidators
operator|.
name|Factory
name|commitValidatorsFactory
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|revertedSenderFactory
specifier|private
specifier|final
name|RevertedSender
operator|.
name|Factory
name|revertedSenderFactory
decl_stmt|;
DECL|field|changeInserterFactory
specifier|private
specifier|final
name|ChangeInserter
operator|.
name|Factory
name|changeInserterFactory
decl_stmt|;
DECL|field|gitManager
specifier|private
specifier|final
name|GitRepositoryManager
name|gitManager
decl_stmt|;
DECL|field|gitRefUpdated
specifier|private
specifier|final
name|GitReferenceUpdated
name|gitRefUpdated
decl_stmt|;
DECL|field|indexer
specifier|private
specifier|final
name|ChangeIndexer
name|indexer
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChangeUtil (Provider<CurrentUser> userProvider, CommitValidators.Factory commitValidatorsFactory, Provider<ReviewDb> db, Provider<InternalChangeQuery> queryProvider, RevertedSender.Factory revertedSenderFactory, ChangeInserter.Factory changeInserterFactory, GitRepositoryManager gitManager, GitReferenceUpdated gitRefUpdated, ChangeIndexer indexer)
name|ChangeUtil
parameter_list|(
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|userProvider
parameter_list|,
name|CommitValidators
operator|.
name|Factory
name|commitValidatorsFactory
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
name|RevertedSender
operator|.
name|Factory
name|revertedSenderFactory
parameter_list|,
name|ChangeInserter
operator|.
name|Factory
name|changeInserterFactory
parameter_list|,
name|GitRepositoryManager
name|gitManager
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|,
name|ChangeIndexer
name|indexer
parameter_list|)
block|{
name|this
operator|.
name|userProvider
operator|=
name|userProvider
expr_stmt|;
name|this
operator|.
name|commitValidatorsFactory
operator|=
name|commitValidatorsFactory
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|revertedSenderFactory
operator|=
name|revertedSenderFactory
expr_stmt|;
name|this
operator|.
name|changeInserterFactory
operator|=
name|changeInserterFactory
expr_stmt|;
name|this
operator|.
name|gitManager
operator|=
name|gitManager
expr_stmt|;
name|this
operator|.
name|gitRefUpdated
operator|=
name|gitRefUpdated
expr_stmt|;
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
block|}
DECL|method|revert (ChangeControl ctl, PatchSet.Id patchSetId, String message, PersonIdent myIdent, SshInfo sshInfo)
specifier|public
name|Change
operator|.
name|Id
name|revert
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|,
name|PatchSet
operator|.
name|Id
name|patchSetId
parameter_list|,
name|String
name|message
parameter_list|,
name|PersonIdent
name|myIdent
parameter_list|,
name|SshInfo
name|sshInfo
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|OrmException
throws|,
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
throws|,
name|IOException
throws|,
name|InvalidChangeOperationException
block|{
name|Change
operator|.
name|Id
name|changeId
init|=
name|patchSetId
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|PatchSet
name|patch
init|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|patchSetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|patch
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
name|Change
name|changeToRevert
init|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|project
init|=
name|ctl
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|git
init|=
name|gitManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|revWalk
operator|=
operator|new
name|RevWalk
argument_list|(
name|git
argument_list|)
init|)
block|{
name|RevCommit
name|commitToRevert
init|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|patch
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|PersonIdent
name|authorIdent
init|=
name|user
argument_list|()
operator|.
name|newCommitterIdent
argument_list|(
name|myIdent
operator|.
name|getWhen
argument_list|()
argument_list|,
name|myIdent
operator|.
name|getTimeZone
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|parentToCommitToRevert
init|=
name|commitToRevert
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|revWalk
operator|.
name|parseHeaders
argument_list|(
name|parentToCommitToRevert
argument_list|)
expr_stmt|;
name|CommitBuilder
name|revertCommitBuilder
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|revertCommitBuilder
operator|.
name|addParentId
argument_list|(
name|commitToRevert
argument_list|)
expr_stmt|;
name|revertCommitBuilder
operator|.
name|setTreeId
argument_list|(
name|parentToCommitToRevert
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|revertCommitBuilder
operator|.
name|setAuthor
argument_list|(
name|authorIdent
argument_list|)
expr_stmt|;
name|revertCommitBuilder
operator|.
name|setCommitter
argument_list|(
name|authorIdent
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|message
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|revertChangeDefaultMessage
argument_list|,
name|changeToRevert
operator|.
name|getSubject
argument_list|()
argument_list|,
name|patch
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ObjectId
name|computedChangeId
init|=
name|ChangeIdUtil
operator|.
name|computeChangeId
argument_list|(
name|parentToCommitToRevert
operator|.
name|getTree
argument_list|()
argument_list|,
name|commitToRevert
argument_list|,
name|authorIdent
argument_list|,
name|myIdent
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|revertCommitBuilder
operator|.
name|setMessage
argument_list|(
name|ChangeIdUtil
operator|.
name|insertId
argument_list|(
name|message
argument_list|,
name|computedChangeId
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|RevCommit
name|revertCommit
decl_stmt|;
try|try
init|(
name|ObjectInserter
name|oi
init|=
name|git
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
name|ObjectId
name|id
init|=
name|oi
operator|.
name|insert
argument_list|(
name|revertCommitBuilder
argument_list|)
decl_stmt|;
name|oi
operator|.
name|flush
argument_list|()
expr_stmt|;
name|revertCommit
operator|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|RefControl
name|refControl
init|=
name|ctl
operator|.
name|getRefControl
argument_list|()
decl_stmt|;
name|Change
name|change
init|=
operator|new
name|Change
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
literal|"I"
operator|+
name|computedChangeId
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|db
operator|.
name|get
argument_list|()
operator|.
name|nextChangeId
argument_list|()
argument_list|)
argument_list|,
name|user
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|changeToRevert
operator|.
name|getDest
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|change
operator|.
name|setTopic
argument_list|(
name|changeToRevert
operator|.
name|getTopic
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeInserter
name|ins
init|=
name|changeInserterFactory
operator|.
name|create
argument_list|(
name|refControl
operator|.
name|getProjectControl
argument_list|()
argument_list|,
name|change
argument_list|,
name|revertCommit
argument_list|)
decl_stmt|;
name|PatchSet
name|ps
init|=
name|ins
operator|.
name|getPatchSet
argument_list|()
decl_stmt|;
name|String
name|ref
init|=
name|refControl
operator|.
name|getRefName
argument_list|()
decl_stmt|;
name|String
name|cmdRef
init|=
name|MagicBranch
operator|.
name|NEW_PUBLISH_CHANGE
operator|+
name|ref
operator|.
name|substring
argument_list|(
name|ref
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|CommitReceivedEvent
name|commitReceivedEvent
init|=
operator|new
name|CommitReceivedEvent
argument_list|(
operator|new
name|ReceiveCommand
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|revertCommit
operator|.
name|getId
argument_list|()
argument_list|,
name|cmdRef
argument_list|)
argument_list|,
name|refControl
operator|.
name|getProjectControl
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|refControl
operator|.
name|getRefName
argument_list|()
argument_list|,
name|revertCommit
argument_list|,
name|user
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|commitValidatorsFactory
operator|.
name|create
argument_list|(
name|refControl
argument_list|,
name|sshInfo
argument_list|,
name|git
argument_list|)
operator|.
name|validateForGerritCommits
argument_list|(
name|commitReceivedEvent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitValidationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidChangeOperationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|RefUpdate
name|ru
init|=
name|git
operator|.
name|updateRef
argument_list|(
name|ps
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|revertCommit
argument_list|)
expr_stmt|;
name|ru
operator|.
name|disableRefLog
argument_list|()
expr_stmt|;
if|if
condition|(
name|ru
operator|.
name|update
argument_list|(
name|revWalk
argument_list|)
operator|!=
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to create ref %s in %s: %s"
argument_list|,
name|ps
operator|.
name|getRefName
argument_list|()
argument_list|,
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|ru
operator|.
name|getResult
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|ChangeMessage
name|cmsg
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|changeId
argument_list|,
name|messageUUID
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|user
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|patchSetId
argument_list|)
decl_stmt|;
name|StringBuilder
name|msgBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msgBuf
operator|.
name|append
argument_list|(
literal|"Patch Set "
argument_list|)
operator|.
name|append
argument_list|(
name|patchSetId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": Reverted"
argument_list|)
expr_stmt|;
name|msgBuf
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
name|msgBuf
operator|.
name|append
argument_list|(
literal|"This patchset was reverted in change: "
argument_list|)
operator|.
name|append
argument_list|(
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|cmsg
operator|.
name|setMessage
argument_list|(
name|msgBuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ins
operator|.
name|setMessage
argument_list|(
name|cmsg
argument_list|)
operator|.
name|insert
argument_list|()
expr_stmt|;
try|try
block|{
name|RevertedSender
name|cm
init|=
name|revertedSenderFactory
operator|.
name|create
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|cm
operator|.
name|setFrom
argument_list|(
name|user
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setChangeMessage
argument_list|(
name|cmsg
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email for revert change "
operator|+
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
return|return
name|change
operator|.
name|getId
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getMessage (Change change)
specifier|public
name|String
name|getMessage
parameter_list|(
name|Change
name|change
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|OrmException
throws|,
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
throws|,
name|IOException
block|{
name|Change
operator|.
name|Id
name|changeId
init|=
name|change
operator|.
name|getId
argument_list|()
decl_stmt|;
name|PatchSet
name|ps
init|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
try|try
init|(
name|Repository
name|git
init|=
name|gitManager
operator|.
name|openRepository
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
init|;
name|RevWalk
name|revWalk
operator|=
operator|new
name|RevWalk
argument_list|(
name|git
argument_list|)
init|)
block|{
name|RevCommit
name|commit
init|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|commit
operator|.
name|getFullMessage
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|deleteDraftChange (Change change)
specifier|public
name|void
name|deleteDraftChange
parameter_list|(
name|Change
name|change
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|OrmException
throws|,
name|IOException
block|{
name|Change
operator|.
name|Id
name|changeId
init|=
name|change
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|!=
name|Change
operator|.
name|Status
operator|.
name|DRAFT
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
name|ReviewDb
name|db
init|=
name|this
operator|.
name|db
operator|.
name|get
argument_list|()
decl_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Map
argument_list|<
name|RevId
argument_list|,
name|String
argument_list|>
name|refsToDelete
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PatchSet
argument_list|>
name|patchSets
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|byChange
argument_list|(
name|changeId
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSet
name|ps
range|:
name|patchSets
control|)
block|{
if|if
condition|(
operator|!
name|ps
operator|.
name|isDraft
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
name|refsToDelete
operator|.
name|put
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
argument_list|,
name|ps
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountPatchReviews
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|accountPatchReviews
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// No need to delete from notedb; draft patch sets will be filtered out.
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|byChange
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byChange
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSetAncestors
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|patchSetAncestors
argument_list|()
operator|.
name|byChange
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|delete
argument_list|(
name|patchSets
argument_list|)
expr_stmt|;
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|byChange
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|starredChanges
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|starredChanges
argument_list|()
operator|.
name|byChange
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete all refs at once
try|try
init|(
name|Repository
name|repo
init|=
name|gitManager
operator|.
name|openRepository
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|BatchRefUpdate
name|ru
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|newBatchUpdate
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RevId
argument_list|,
name|String
argument_list|>
name|e
range|:
name|refsToDelete
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ru
operator|.
name|addCommand
argument_list|(
operator|new
name|ReceiveCommand
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ru
operator|.
name|execute
argument_list|(
name|rw
argument_list|,
name|NullProgressMonitor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
for|for
control|(
name|ReceiveCommand
name|cmd
range|:
name|ru
operator|.
name|getCommands
argument_list|()
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|!=
name|ReceiveCommand
operator|.
name|Result
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed: "
operator|+
name|cmd
argument_list|)
throw|;
block|}
block|}
block|}
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
name|indexer
operator|.
name|delete
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|deleteOnlyDraftPatchSet (PatchSet patch, Change change)
specifier|public
name|void
name|deleteOnlyDraftPatchSet
parameter_list|(
name|PatchSet
name|patch
parameter_list|,
name|Change
name|change
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|OrmException
throws|,
name|IOException
block|{
name|PatchSet
operator|.
name|Id
name|patchSetId
init|=
name|patch
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|patch
operator|.
name|isDraft
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|patchSetId
operator|.
name|getParentKey
argument_list|()
argument_list|)
throw|;
block|}
try|try
init|(
name|Repository
name|repo
init|=
name|gitManager
operator|.
name|openRepository
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
init|)
block|{
name|RefUpdate
name|update
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|patch
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|update
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|update
operator|.
name|disableRefLog
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|update
operator|.
name|delete
argument_list|()
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|FAST_FORWARD
case|:
case|case
name|FORCED
case|:
case|case
name|NO_CHANGE
case|:
comment|// Successful deletion.
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete ref "
operator|+
name|patch
operator|.
name|getRefName
argument_list|()
operator|+
literal|" in "
operator|+
name|repo
operator|.
name|getDirectory
argument_list|()
operator|+
literal|": "
operator|+
name|update
operator|.
name|getResult
argument_list|()
argument_list|)
throw|;
block|}
name|gitRefUpdated
operator|.
name|fire
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|update
argument_list|,
name|ReceiveCommand
operator|.
name|Type
operator|.
name|DELETE
argument_list|)
expr_stmt|;
block|}
name|deleteOnlyDraftPatchSetPreserveRef
argument_list|(
name|this
operator|.
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|patch
argument_list|)
expr_stmt|;
block|}
comment|/**    * Find changes matching the given identifier.    *    * @param id change identifier, either a numeric ID, a Change-Id, or    *     project~branch~id triplet.    * @return all matching changes, even if they are not visible to the current    *     user.    */
DECL|method|findChanges (String id)
specifier|public
name|List
argument_list|<
name|Change
argument_list|>
name|findChanges
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|OrmException
throws|,
name|ResourceNotFoundException
block|{
comment|// Try legacy id
if|if
condition|(
name|id
operator|.
name|matches
argument_list|(
literal|"^[1-9][0-9]*$"
argument_list|)
condition|)
block|{
name|Change
name|c
init|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|Change
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|c
argument_list|)
return|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|// Try isolated changeId
if|if
condition|(
operator|!
name|id
operator|.
name|contains
argument_list|(
literal|"~"
argument_list|)
condition|)
block|{
return|return
name|asChanges
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byKeyPrefix
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
comment|// Try change triplet
name|Optional
argument_list|<
name|ChangeTriplet
argument_list|>
name|triplet
init|=
name|ChangeTriplet
operator|.
name|parse
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|triplet
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|asChanges
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byBranchKey
argument_list|(
name|triplet
operator|.
name|get
argument_list|()
operator|.
name|branch
argument_list|()
argument_list|,
name|triplet
operator|.
name|get
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
name|id
argument_list|)
throw|;
block|}
DECL|method|user ()
specifier|private
name|IdentifiedUser
name|user
parameter_list|()
block|{
return|return
operator|(
name|IdentifiedUser
operator|)
name|userProvider
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|deleteOnlyDraftPatchSetPreserveRef (ReviewDb db, PatchSet patch)
specifier|private
specifier|static
name|void
name|deleteOnlyDraftPatchSetPreserveRef
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|PatchSet
name|patch
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|OrmException
block|{
name|PatchSet
operator|.
name|Id
name|patchSetId
init|=
name|patch
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|patch
operator|.
name|isDraft
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|patchSetId
operator|.
name|getParentKey
argument_list|()
argument_list|)
throw|;
block|}
name|db
operator|.
name|accountPatchReviews
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|accountPatchReviews
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|patchSetId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|patchSetId
argument_list|)
argument_list|)
expr_stmt|;
comment|// No need to delete from notedb; draft patch sets will be filtered out.
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|patchSetId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|patchSetId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSetAncestors
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|patchSetAncestors
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|patchSetId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|patch
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|nextPatchSetId (PatchSet.Id id)
specifier|public
specifier|static
name|PatchSet
operator|.
name|Id
name|nextPatchSetId
parameter_list|(
name|PatchSet
operator|.
name|Id
name|id
parameter_list|)
block|{
return|return
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|id
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|id
operator|.
name|get
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
end_class

end_unit

