begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|ChangeHookRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|ChangeHooks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetAncestor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|TrackingId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|TrackingFooter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|TrackingFooters
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MergeOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|EmailException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|RebasedPatchSetSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|ReplacePatchSetSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|ReplyToChangeSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|RevertedSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|InvalidChangeOperationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|AtomicUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmConcurrencyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|merge
operator|.
name|MergeStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|merge
operator|.
name|ThreeWayMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|ChangeIdUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|NB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_class
DECL|class|ChangeUtil
specifier|public
class|class
name|ChangeUtil
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChangeUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|uuidPrefix
specifier|private
specifier|static
name|int
name|uuidPrefix
decl_stmt|;
DECL|field|uuidSeq
specifier|private
specifier|static
name|int
name|uuidSeq
decl_stmt|;
comment|/**    * Generate a new unique identifier for change message entities.    *    * @param db the database connection, used to increment the change message    *        allocation sequence.    * @return the new unique identifier.    * @throws OrmException the database couldn't be incremented.    */
DECL|method|messageUUID (final ReviewDb db)
specifier|public
specifier|static
name|String
name|messageUUID
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|byte
index|[]
name|raw
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|fill
argument_list|(
name|raw
argument_list|,
name|db
argument_list|)
expr_stmt|;
return|return
name|Base64
operator|.
name|encodeBytes
argument_list|(
name|raw
argument_list|)
return|;
block|}
DECL|method|fill (byte[] raw, ReviewDb db)
specifier|private
specifier|static
specifier|synchronized
name|void
name|fill
parameter_list|(
name|byte
index|[]
name|raw
parameter_list|,
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|uuidSeq
operator|==
literal|0
condition|)
block|{
name|uuidPrefix
operator|=
name|db
operator|.
name|nextChangeMessageId
argument_list|()
expr_stmt|;
name|uuidSeq
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|NB
operator|.
name|encodeInt32
argument_list|(
name|raw
argument_list|,
literal|0
argument_list|,
name|uuidPrefix
argument_list|)
expr_stmt|;
name|NB
operator|.
name|encodeInt32
argument_list|(
name|raw
argument_list|,
literal|4
argument_list|,
name|uuidSeq
operator|--
argument_list|)
expr_stmt|;
block|}
DECL|method|touch (final Change change, ReviewDb db)
specifier|public
specifier|static
name|void
name|touch
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|,
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
block|{
name|updated
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmConcurrencyException
name|e
parameter_list|)
block|{
comment|// Ignore a concurrent update, we just wanted to tag it as newer.
block|}
block|}
DECL|method|updated (final Change c)
specifier|public
specifier|static
name|void
name|updated
parameter_list|(
specifier|final
name|Change
name|c
parameter_list|)
block|{
name|c
operator|.
name|resetLastUpdatedOn
argument_list|()
expr_stmt|;
name|computeSortKey
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|updateTrackingIds (ReviewDb db, Change change, TrackingFooters trackingFooters, List<FooterLine> footerLines)
specifier|public
specifier|static
name|void
name|updateTrackingIds
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
name|change
parameter_list|,
name|TrackingFooters
name|trackingFooters
parameter_list|,
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footerLines
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|trackingFooters
operator|.
name|getTrackingFooters
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|footerLines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|Set
argument_list|<
name|TrackingId
argument_list|>
name|want
init|=
operator|new
name|HashSet
argument_list|<
name|TrackingId
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|TrackingId
argument_list|>
name|have
init|=
operator|new
name|HashSet
argument_list|<
name|TrackingId
argument_list|>
argument_list|(
comment|//
name|db
operator|.
name|trackingIds
argument_list|()
operator|.
name|byChange
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|TrackingFooter
name|footer
range|:
name|trackingFooters
operator|.
name|getTrackingFooters
argument_list|()
control|)
block|{
for|for
control|(
specifier|final
name|FooterLine
name|footerLine
range|:
name|footerLines
control|)
block|{
if|if
condition|(
name|footerLine
operator|.
name|matches
argument_list|(
name|footer
operator|.
name|footerKey
argument_list|()
argument_list|)
condition|)
block|{
comment|// supporting multiple tracking-ids on a single line
specifier|final
name|Matcher
name|m
init|=
name|footer
operator|.
name|match
argument_list|()
operator|.
name|matcher
argument_list|(
name|footerLine
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|group
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|idstr
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|groupCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|idstr
operator|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|idstr
operator|=
name|m
operator|.
name|group
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|idstr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|idstr
operator|.
name|length
argument_list|()
operator|>
name|TrackingId
operator|.
name|TRACKING_ID_MAX_CHAR
condition|)
block|{
continue|continue;
block|}
name|want
operator|.
name|add
argument_list|(
operator|new
name|TrackingId
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|idstr
argument_list|,
name|footer
operator|.
name|system
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Only insert the rows we don't have, and delete rows we don't match.
comment|//
specifier|final
name|Set
argument_list|<
name|TrackingId
argument_list|>
name|toInsert
init|=
operator|new
name|HashSet
argument_list|<
name|TrackingId
argument_list|>
argument_list|(
name|want
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|TrackingId
argument_list|>
name|toDelete
init|=
operator|new
name|HashSet
argument_list|<
name|TrackingId
argument_list|>
argument_list|(
name|have
argument_list|)
decl_stmt|;
name|toInsert
operator|.
name|removeAll
argument_list|(
name|have
argument_list|)
expr_stmt|;
name|toDelete
operator|.
name|removeAll
argument_list|(
name|want
argument_list|)
expr_stmt|;
name|db
operator|.
name|trackingIds
argument_list|()
operator|.
name|insert
argument_list|(
name|toInsert
argument_list|)
expr_stmt|;
name|db
operator|.
name|trackingIds
argument_list|()
operator|.
name|delete
argument_list|(
name|toDelete
argument_list|)
expr_stmt|;
block|}
DECL|method|testMerge (MergeOp.Factory opFactory, Change change)
specifier|public
specifier|static
name|void
name|testMerge
parameter_list|(
name|MergeOp
operator|.
name|Factory
name|opFactory
parameter_list|,
name|Change
name|change
parameter_list|)
block|{
name|opFactory
operator|.
name|create
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
argument_list|)
operator|.
name|verifyMergeability
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
DECL|method|insertAncestors (ReviewDb db, PatchSet.Id id, RevCommit src)
specifier|public
specifier|static
name|void
name|insertAncestors
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|PatchSet
operator|.
name|Id
name|id
parameter_list|,
name|RevCommit
name|src
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|int
name|cnt
init|=
name|src
operator|.
name|getParentCount
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PatchSetAncestor
argument_list|>
name|toInsert
init|=
operator|new
name|ArrayList
argument_list|<
name|PatchSetAncestor
argument_list|>
argument_list|(
name|cnt
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|cnt
condition|;
name|p
operator|++
control|)
block|{
name|PatchSetAncestor
name|a
init|=
operator|new
name|PatchSetAncestor
argument_list|(
operator|new
name|PatchSetAncestor
operator|.
name|Id
argument_list|(
name|id
argument_list|,
name|p
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|setAncestorRevision
argument_list|(
operator|new
name|RevId
argument_list|(
name|src
operator|.
name|getParent
argument_list|(
name|p
argument_list|)
operator|.
name|getId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|toInsert
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|patchSetAncestors
argument_list|()
operator|.
name|insert
argument_list|(
name|toInsert
argument_list|)
expr_stmt|;
block|}
comment|/**    * Rebases a commit    *    * @param git Repository to find commits in    * @param inserter inserter to handle new trees and blobs.    * @param original The commit to rebase    * @param base Base to rebase against    * @return CommitBuilder the newly rebased commit    * @throws IOException Merged failed    */
DECL|method|rebaseCommit (Repository git, final ObjectInserter inserter, RevCommit original, RevCommit base, PersonIdent committerIdent)
specifier|public
specifier|static
name|CommitBuilder
name|rebaseCommit
parameter_list|(
name|Repository
name|git
parameter_list|,
specifier|final
name|ObjectInserter
name|inserter
parameter_list|,
name|RevCommit
name|original
parameter_list|,
name|RevCommit
name|base
parameter_list|,
name|PersonIdent
name|committerIdent
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|original
operator|.
name|getParentCount
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Commits with no parents cannot be rebased (is this the initial commit?)."
argument_list|)
throw|;
block|}
if|if
condition|(
name|original
operator|.
name|getParentCount
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Patch sets with multiple parents cannot be rebased (merge commits)."
operator|+
literal|" Parents: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|original
operator|.
name|getParents
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|RevCommit
name|parentCommit
init|=
name|original
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|.
name|equals
argument_list|(
name|parentCommit
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Change is already up to date."
argument_list|)
throw|;
block|}
specifier|final
name|ThreeWayMerger
name|merger
init|=
name|MergeStrategy
operator|.
name|RESOLVE
operator|.
name|newMerger
argument_list|(
name|git
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|merger
operator|.
name|setObjectInserter
argument_list|(
operator|new
name|ObjectInserter
operator|.
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ObjectInserter
name|delegate
parameter_list|()
block|{
return|return
name|inserter
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{       }
annotation|@
name|Override
specifier|public
name|void
name|release
parameter_list|()
block|{       }
block|}
argument_list|)
expr_stmt|;
name|merger
operator|.
name|setBase
argument_list|(
name|parentCommit
argument_list|)
expr_stmt|;
name|merger
operator|.
name|merge
argument_list|(
name|original
argument_list|,
name|base
argument_list|)
expr_stmt|;
if|if
condition|(
name|merger
operator|.
name|getResultTreeId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The rebase failed since conflicts occured during the merge."
argument_list|)
throw|;
block|}
specifier|final
name|CommitBuilder
name|rebasedCommitBuilder
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|rebasedCommitBuilder
operator|.
name|setTreeId
argument_list|(
name|merger
operator|.
name|getResultTreeId
argument_list|()
argument_list|)
expr_stmt|;
name|rebasedCommitBuilder
operator|.
name|setParentId
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|rebasedCommitBuilder
operator|.
name|setAuthor
argument_list|(
name|original
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
expr_stmt|;
name|rebasedCommitBuilder
operator|.
name|setMessage
argument_list|(
name|original
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
name|rebasedCommitBuilder
operator|.
name|setCommitter
argument_list|(
name|committerIdent
argument_list|)
expr_stmt|;
return|return
name|rebasedCommitBuilder
return|;
block|}
DECL|method|rebaseChange (final PatchSet.Id patchSetId, final IdentifiedUser user, final ReviewDb db, RebasedPatchSetSender.Factory rebasedPatchSetSenderFactory, final ChangeHookRunner hooks, GitRepositoryManager gitManager, final PatchSetInfoFactory patchSetInfoFactory, final GitReferenceUpdated replication, PersonIdent myIdent, final ChangeControl.Factory changeControlFactory, final ApprovalsUtil approvalsUtil)
specifier|public
specifier|static
name|void
name|rebaseChange
parameter_list|(
specifier|final
name|PatchSet
operator|.
name|Id
name|patchSetId
parameter_list|,
specifier|final
name|IdentifiedUser
name|user
parameter_list|,
specifier|final
name|ReviewDb
name|db
parameter_list|,
name|RebasedPatchSetSender
operator|.
name|Factory
name|rebasedPatchSetSenderFactory
parameter_list|,
specifier|final
name|ChangeHookRunner
name|hooks
parameter_list|,
name|GitRepositoryManager
name|gitManager
parameter_list|,
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
parameter_list|,
specifier|final
name|GitReferenceUpdated
name|replication
parameter_list|,
name|PersonIdent
name|myIdent
parameter_list|,
specifier|final
name|ChangeControl
operator|.
name|Factory
name|changeControlFactory
parameter_list|,
specifier|final
name|ApprovalsUtil
name|approvalsUtil
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|EmailException
throws|,
name|OrmException
throws|,
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
throws|,
name|IOException
throws|,
name|InvalidChangeOperationException
block|{
specifier|final
name|Change
operator|.
name|Id
name|changeId
init|=
name|patchSetId
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
specifier|final
name|ChangeControl
name|changeControl
init|=
name|changeControlFactory
operator|.
name|validateFor
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|changeControl
operator|.
name|canRebase
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidChangeOperationException
argument_list|(
literal|"Cannot rebase: New patch sets are not allowed to be added to change: "
operator|+
name|changeId
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|Change
name|change
init|=
name|changeControl
operator|.
name|getChange
argument_list|()
decl_stmt|;
specifier|final
name|Repository
name|git
init|=
name|gitManager
operator|.
name|openRepository
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|RevWalk
name|revWalk
init|=
operator|new
name|RevWalk
argument_list|(
name|git
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|PatchSet
name|originalPatchSet
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|patchSetId
argument_list|)
decl_stmt|;
name|RevCommit
name|branchTipCommit
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|PatchSetAncestor
argument_list|>
name|patchSetAncestors
init|=
name|db
operator|.
name|patchSetAncestors
argument_list|()
operator|.
name|ancestorsOf
argument_list|(
name|patchSetId
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
name|patchSetAncestors
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The patch set you are trying to rebase is dependent on several other patch sets: "
operator|+
name|patchSetAncestors
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|patchSetAncestors
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|List
argument_list|<
name|PatchSet
argument_list|>
name|depPatchSetList
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|byRevision
argument_list|(
name|patchSetAncestors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAncestorRevision
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|depPatchSetList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PatchSet
name|depPatchSet
init|=
name|depPatchSetList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|depChangeId
init|=
name|depPatchSet
operator|.
name|getId
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|Change
name|depChange
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|depChangeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|depChange
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|ABANDONED
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot rebase against an abandoned change: "
operator|+
name|depChange
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|depChange
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|PatchSet
name|latestDepPatchSet
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|depChange
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|depPatchSet
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|depChange
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
name|branchTipCommit
operator|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|latestDepPatchSet
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Change is already based on the latest patch set of the dependent change."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|branchTipCommit
operator|==
literal|null
condition|)
block|{
comment|// We are dependent on a merged PatchSet or have no PatchSet
comment|// dependencies at all.
name|Ref
name|destRef
init|=
name|git
operator|.
name|getRef
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|destRef
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The destination branch does not exist: "
operator|+
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
name|branchTipCommit
operator|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|destRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RevCommit
name|rebasedCommit
decl_stmt|;
specifier|final
name|ObjectInserter
name|oi
init|=
name|git
operator|.
name|newObjectInserter
argument_list|()
decl_stmt|;
try|try
block|{
name|ObjectId
name|oldId
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|originalPatchSet
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectId
name|newId
init|=
name|oi
operator|.
name|insert
argument_list|(
name|rebaseCommit
argument_list|(
name|git
argument_list|,
name|oi
argument_list|,
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|oldId
argument_list|)
argument_list|,
name|branchTipCommit
argument_list|,
name|myIdent
argument_list|)
argument_list|)
decl_stmt|;
name|oi
operator|.
name|flush
argument_list|()
expr_stmt|;
name|rebasedCommit
operator|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|newId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|oi
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|change
operator|.
name|nextPatchSetId
argument_list|()
expr_stmt|;
specifier|final
name|PatchSet
name|newPatchSet
init|=
operator|new
name|PatchSet
argument_list|(
name|change
operator|.
name|currPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|newPatchSet
operator|.
name|setCreatedOn
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newPatchSet
operator|.
name|setUploader
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|newPatchSet
operator|.
name|setRevision
argument_list|(
operator|new
name|RevId
argument_list|(
name|rebasedCommit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newPatchSet
operator|.
name|setDraft
argument_list|(
name|originalPatchSet
operator|.
name|isDraft
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|PatchSetInfo
name|info
init|=
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|rebasedCommit
argument_list|,
name|newPatchSet
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|RefUpdate
name|ru
init|=
name|git
operator|.
name|updateRef
argument_list|(
name|newPatchSet
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|rebasedCommit
argument_list|)
expr_stmt|;
name|ru
operator|.
name|disableRefLog
argument_list|()
expr_stmt|;
if|if
condition|(
name|ru
operator|.
name|update
argument_list|(
name|revWalk
argument_list|)
operator|!=
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to create ref %s in %s: %s"
argument_list|,
name|newPatchSet
operator|.
name|getRefName
argument_list|()
argument_list|,
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|ru
operator|.
name|getResult
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|replication
operator|.
name|fire
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|ru
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|oldReviewers
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|oldCC
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Change
name|updatedChange
decl_stmt|;
name|updatedChange
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|changeId
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|change
operator|.
name|updateNumberOfPatchSets
argument_list|(
name|newPatchSet
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|updatedChange
operator|!=
literal|null
condition|)
block|{
name|change
operator|=
name|updatedChange
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidChangeOperationException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Change %s is closed"
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|insertAncestors
argument_list|(
name|db
argument_list|,
name|newPatchSet
operator|.
name|getId
argument_list|()
argument_list|,
name|rebasedCommit
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|newPatchSet
argument_list|)
argument_list|)
expr_stmt|;
name|updatedChange
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|changeId
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|change
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|equals
argument_list|(
name|patchSetId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|!=
name|Change
operator|.
name|Status
operator|.
name|DRAFT
condition|)
block|{
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
name|change
operator|.
name|setLastSha1MergeTested
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|change
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|updatedChange
operator|!=
literal|null
condition|)
block|{
name|change
operator|=
name|updatedChange
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidChangeOperationException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Change %s was modified"
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|approvalsUtil
operator|.
name|copyVetosToLatestPatchSet
argument_list|(
name|change
argument_list|)
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|oldReviewers
operator|.
name|add
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oldCC
operator|.
name|add
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|ChangeMessage
name|cmsg
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|changeId
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|,
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|patchSetId
argument_list|)
decl_stmt|;
name|cmsg
operator|.
name|setMessage
argument_list|(
literal|"Patch Set "
operator|+
name|patchSetId
operator|.
name|get
argument_list|()
operator|+
literal|": Rebased"
argument_list|)
expr_stmt|;
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|cmsg
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
specifier|final
name|ReplacePatchSetSender
name|cm
init|=
name|rebasedPatchSetSenderFactory
operator|.
name|create
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|cm
operator|.
name|setFrom
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setPatchSet
argument_list|(
name|newPatchSet
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addReviewers
argument_list|(
name|oldReviewers
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addExtraCC
argument_list|(
name|oldCC
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
name|hooks
operator|.
name|doPatchsetCreatedHook
argument_list|(
name|change
argument_list|,
name|newPatchSet
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|revWalk
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|git
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|revert (final PatchSet.Id patchSetId, final IdentifiedUser user, final String message, final ReviewDb db, final RevertedSender.Factory revertedSenderFactory, final ChangeHooks hooks, GitRepositoryManager gitManager, final PatchSetInfoFactory patchSetInfoFactory, final GitReferenceUpdated replication, PersonIdent myIdent)
specifier|public
specifier|static
name|Change
operator|.
name|Id
name|revert
parameter_list|(
specifier|final
name|PatchSet
operator|.
name|Id
name|patchSetId
parameter_list|,
specifier|final
name|IdentifiedUser
name|user
parameter_list|,
specifier|final
name|String
name|message
parameter_list|,
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|RevertedSender
operator|.
name|Factory
name|revertedSenderFactory
parameter_list|,
specifier|final
name|ChangeHooks
name|hooks
parameter_list|,
name|GitRepositoryManager
name|gitManager
parameter_list|,
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
parameter_list|,
specifier|final
name|GitReferenceUpdated
name|replication
parameter_list|,
name|PersonIdent
name|myIdent
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|EmailException
throws|,
name|OrmException
throws|,
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
throws|,
name|IOException
block|{
specifier|final
name|Change
operator|.
name|Id
name|changeId
init|=
name|patchSetId
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
specifier|final
name|PatchSet
name|patch
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|patchSetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|patch
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
specifier|final
name|Repository
name|git
decl_stmt|;
try|try
block|{
name|git
operator|=
name|gitManager
operator|.
name|openRepository
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|RevWalk
name|revWalk
init|=
operator|new
name|RevWalk
argument_list|(
name|git
argument_list|)
decl_stmt|;
try|try
block|{
name|RevCommit
name|commitToRevert
init|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|patch
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|PersonIdent
name|authorIdent
init|=
name|user
operator|.
name|newCommitterIdent
argument_list|(
name|myIdent
operator|.
name|getWhen
argument_list|()
argument_list|,
name|myIdent
operator|.
name|getTimeZone
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|parentToCommitToRevert
init|=
name|commitToRevert
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|revWalk
operator|.
name|parseHeaders
argument_list|(
name|parentToCommitToRevert
argument_list|)
expr_stmt|;
name|CommitBuilder
name|revertCommitBuilder
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|revertCommitBuilder
operator|.
name|addParentId
argument_list|(
name|commitToRevert
argument_list|)
expr_stmt|;
name|revertCommitBuilder
operator|.
name|setTreeId
argument_list|(
name|parentToCommitToRevert
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|revertCommitBuilder
operator|.
name|setAuthor
argument_list|(
name|authorIdent
argument_list|)
expr_stmt|;
name|revertCommitBuilder
operator|.
name|setCommitter
argument_list|(
name|myIdent
argument_list|)
expr_stmt|;
specifier|final
name|ObjectId
name|computedChangeId
init|=
name|ChangeIdUtil
operator|.
name|computeChangeId
argument_list|(
name|parentToCommitToRevert
operator|.
name|getTree
argument_list|()
argument_list|,
name|commitToRevert
argument_list|,
name|authorIdent
argument_list|,
name|myIdent
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|revertCommitBuilder
operator|.
name|setMessage
argument_list|(
name|ChangeIdUtil
operator|.
name|insertId
argument_list|(
name|message
argument_list|,
name|computedChangeId
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|RevCommit
name|revertCommit
decl_stmt|;
specifier|final
name|ObjectInserter
name|oi
init|=
name|git
operator|.
name|newObjectInserter
argument_list|()
decl_stmt|;
try|try
block|{
name|ObjectId
name|id
init|=
name|oi
operator|.
name|insert
argument_list|(
name|revertCommitBuilder
argument_list|)
decl_stmt|;
name|oi
operator|.
name|flush
argument_list|()
expr_stmt|;
name|revertCommit
operator|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|oi
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Change
name|change
init|=
operator|new
name|Change
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
literal|"I"
operator|+
name|computedChangeId
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|db
operator|.
name|nextChangeId
argument_list|()
argument_list|)
argument_list|,
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
operator|.
name|getDest
argument_list|()
argument_list|)
decl_stmt|;
name|change
operator|.
name|nextPatchSetId
argument_list|()
expr_stmt|;
specifier|final
name|PatchSet
name|ps
init|=
operator|new
name|PatchSet
argument_list|(
name|change
operator|.
name|currPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setCreatedOn
argument_list|(
name|change
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setUploader
argument_list|(
name|change
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setRevision
argument_list|(
operator|new
name|RevId
argument_list|(
name|revertCommit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|revertCommit
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|change
argument_list|)
expr_stmt|;
specifier|final
name|RefUpdate
name|ru
init|=
name|git
operator|.
name|updateRef
argument_list|(
name|ps
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|revertCommit
argument_list|)
expr_stmt|;
name|ru
operator|.
name|disableRefLog
argument_list|()
expr_stmt|;
if|if
condition|(
name|ru
operator|.
name|update
argument_list|(
name|revWalk
argument_list|)
operator|!=
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to create ref %s in %s: %s"
argument_list|,
name|ps
operator|.
name|getRefName
argument_list|()
argument_list|,
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|ru
operator|.
name|getResult
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|replication
operator|.
name|fire
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|ru
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|insertAncestors
argument_list|(
name|db
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|revertCommit
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
specifier|final
name|ChangeMessage
name|cmsg
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|changeId
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|,
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|patchSetId
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|msgBuf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Patch Set "
operator|+
name|patchSetId
operator|.
name|get
argument_list|()
operator|+
literal|": Reverted"
argument_list|)
decl_stmt|;
name|msgBuf
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
name|msgBuf
operator|.
name|append
argument_list|(
literal|"This patchset was reverted in change: "
operator|+
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|cmsg
operator|.
name|setMessage
argument_list|(
name|msgBuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|cmsg
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RevertedSender
name|cm
init|=
name|revertedSenderFactory
operator|.
name|create
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|cm
operator|.
name|setFrom
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setChangeMessage
argument_list|(
name|cmsg
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
name|hooks
operator|.
name|doPatchsetCreatedHook
argument_list|(
name|change
argument_list|,
name|ps
argument_list|,
name|db
argument_list|)
expr_stmt|;
return|return
name|change
operator|.
name|getId
argument_list|()
return|;
block|}
finally|finally
block|{
name|revWalk
operator|.
name|release
argument_list|()
expr_stmt|;
name|git
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|deleteDraftChange (final PatchSet.Id patchSetId, GitRepositoryManager gitManager, final GitReferenceUpdated replication, final ReviewDb db)
specifier|public
specifier|static
name|void
name|deleteDraftChange
parameter_list|(
specifier|final
name|PatchSet
operator|.
name|Id
name|patchSetId
parameter_list|,
name|GitRepositoryManager
name|gitManager
parameter_list|,
specifier|final
name|GitReferenceUpdated
name|replication
parameter_list|,
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|OrmException
throws|,
name|IOException
block|{
specifier|final
name|Change
operator|.
name|Id
name|changeId
init|=
name|patchSetId
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
specifier|final
name|Change
name|change
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
operator|||
name|change
operator|.
name|getStatus
argument_list|()
operator|!=
name|Change
operator|.
name|Status
operator|.
name|DRAFT
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
for|for
control|(
name|PatchSet
name|ps
range|:
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|byChange
argument_list|(
name|changeId
argument_list|)
control|)
block|{
comment|// These should all be draft patch sets.
name|deleteOnlyDraftPatchSet
argument_list|(
name|ps
argument_list|,
name|change
argument_list|,
name|gitManager
argument_list|,
name|replication
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|byChange
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|starredChanges
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|starredChanges
argument_list|()
operator|.
name|byChange
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|trackingIds
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|trackingIds
argument_list|()
operator|.
name|byChange
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteOnlyDraftPatchSet (final PatchSet patch, final Change change, GitRepositoryManager gitManager, final GitReferenceUpdated replication, final ReviewDb db)
specifier|public
specifier|static
name|void
name|deleteOnlyDraftPatchSet
parameter_list|(
specifier|final
name|PatchSet
name|patch
parameter_list|,
specifier|final
name|Change
name|change
parameter_list|,
name|GitRepositoryManager
name|gitManager
parameter_list|,
specifier|final
name|GitReferenceUpdated
name|replication
parameter_list|,
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|OrmException
throws|,
name|IOException
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|patchSetId
init|=
name|patch
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|patch
operator|==
literal|null
operator|||
operator|!
name|patch
operator|.
name|isDraft
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|patchSetId
operator|.
name|getParentKey
argument_list|()
argument_list|)
throw|;
block|}
name|Repository
name|repo
init|=
name|gitManager
operator|.
name|openRepository
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|RefUpdate
name|update
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|patch
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|update
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|update
operator|.
name|disableRefLog
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|update
operator|.
name|delete
argument_list|()
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|FAST_FORWARD
case|:
case|case
name|FORCED
case|:
case|case
name|NO_CHANGE
case|:
comment|// Successful deletion.
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete ref "
operator|+
name|patch
operator|.
name|getRefName
argument_list|()
operator|+
literal|" in "
operator|+
name|repo
operator|.
name|getDirectory
argument_list|()
operator|+
literal|": "
operator|+
name|update
operator|.
name|getResult
argument_list|()
argument_list|)
throw|;
block|}
name|replication
operator|.
name|fire
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|update
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|db
operator|.
name|accountPatchReviews
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|accountPatchReviews
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|patchSetId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|patchSetId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|patchSetId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|patchSetId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSetAncestors
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|patchSetAncestors
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|patchSetId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|patch
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|updatedChange ( final ReviewDb db, final IdentifiedUser user, final Change change, final ChangeMessage cmsg, ReplyToChangeSender.Factory<T> senderFactory)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|ReplyToChangeSender
parameter_list|>
name|void
name|updatedChange
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|IdentifiedUser
name|user
parameter_list|,
specifier|final
name|Change
name|change
parameter_list|,
specifier|final
name|ChangeMessage
name|cmsg
parameter_list|,
name|ReplyToChangeSender
operator|.
name|Factory
argument_list|<
name|T
argument_list|>
name|senderFactory
parameter_list|)
throws|throws
name|OrmException
block|{
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|cmsg
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|ApprovalsUtil
argument_list|(
name|db
argument_list|,
literal|null
argument_list|)
operator|.
name|syncChangeStatus
argument_list|(
name|change
argument_list|)
expr_stmt|;
comment|// Email the reviewers
try|try
block|{
specifier|final
name|ReplyToChangeSender
name|cm
init|=
name|senderFactory
operator|.
name|create
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|cm
operator|.
name|setFrom
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setChangeMessage
argument_list|(
name|cmsg
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot email update for change "
operator|+
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sortKey (long lastUpdated, int id)
specifier|public
specifier|static
name|String
name|sortKey
parameter_list|(
name|long
name|lastUpdated
parameter_list|,
name|int
name|id
parameter_list|)
block|{
comment|// The encoding uses minutes since Wed Oct 1 00:00:00 2008 UTC.
comment|// We overrun approximately 4,085 years later, so ~6093.
comment|//
specifier|final
name|long
name|lastUpdatedOn
init|=
operator|(
name|lastUpdated
operator|/
literal|1000L
operator|)
operator|-
literal|1222819200L
decl_stmt|;
specifier|final
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|r
operator|.
name|setLength
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|formatHexInt
argument_list|(
name|r
argument_list|,
literal|0
argument_list|,
call|(
name|int
call|)
argument_list|(
name|lastUpdatedOn
operator|/
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|formatHexInt
argument_list|(
name|r
argument_list|,
literal|8
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|computeSortKey (final Change c)
specifier|public
specifier|static
name|void
name|computeSortKey
parameter_list|(
specifier|final
name|Change
name|c
parameter_list|)
block|{
name|long
name|lastUpdated
init|=
name|c
operator|.
name|getLastUpdatedOn
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|int
name|id
init|=
name|c
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|c
operator|.
name|setSortKey
argument_list|(
name|sortKey
argument_list|(
name|lastUpdated
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|hexchar
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|hexchar
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
comment|//
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|}
decl_stmt|;
DECL|method|formatHexInt (final StringBuilder dst, final int p, int w)
specifier|private
specifier|static
name|void
name|formatHexInt
parameter_list|(
specifier|final
name|StringBuilder
name|dst
parameter_list|,
specifier|final
name|int
name|p
parameter_list|,
name|int
name|w
parameter_list|)
block|{
name|int
name|o
init|=
name|p
operator|+
literal|7
decl_stmt|;
while|while
condition|(
name|o
operator|>=
name|p
operator|&&
name|w
operator|!=
literal|0
condition|)
block|{
name|dst
operator|.
name|setCharAt
argument_list|(
name|o
operator|--
argument_list|,
name|hexchar
index|[
name|w
operator|&
literal|0xf
index|]
argument_list|)
expr_stmt|;
name|w
operator|>>>=
literal|4
expr_stmt|;
block|}
while|while
condition|(
name|o
operator|>=
name|p
condition|)
block|{
name|dst
operator|.
name|setCharAt
argument_list|(
name|o
operator|--
argument_list|,
literal|'0'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

