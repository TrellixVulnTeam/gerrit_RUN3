begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.index.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
operator|.
name|CHANGE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
operator|.
name|PROJECT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|IndexConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|IndexPredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|IndexedQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|QueryOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|QueryParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeDataSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Wrapper combining an {@link IndexPredicate} together with a  * {@link ChangeDataSource} that returns matching results from the index.  *<p>  * Appropriate to return as the rootmost predicate that can be processed using  * the secondary index; such predicates must also implement  * {@link ChangeDataSource} to be chosen by the query processor.  */
end_comment

begin_class
DECL|class|IndexedChangeQuery
specifier|public
class|class
name|IndexedChangeQuery
extends|extends
name|IndexedQuery
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeData
argument_list|>
implements|implements
name|ChangeDataSource
block|{
DECL|method|oneResult ()
specifier|public
specifier|static
name|QueryOptions
name|oneResult
parameter_list|()
block|{
return|return
name|createOptions
argument_list|(
name|IndexConfig
operator|.
name|createDefault
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createOptions (IndexConfig config, int start, int limit, Set<String> fields)
specifier|public
specifier|static
name|QueryOptions
name|createOptions
parameter_list|(
name|IndexConfig
name|config
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|limit
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
comment|// Always include project since it is needed to load the change from NoteDb.
if|if
condition|(
operator|!
name|fields
operator|.
name|contains
argument_list|(
name|CHANGE
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|fields
operator|.
name|contains
argument_list|(
name|PROJECT
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|fields
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|PROJECT
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|QueryOptions
operator|.
name|create
argument_list|(
name|config
argument_list|,
name|start
argument_list|,
name|limit
argument_list|,
name|fields
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|convertOptions (QueryOptions opts)
specifier|static
name|QueryOptions
name|convertOptions
parameter_list|(
name|QueryOptions
name|opts
parameter_list|)
block|{
name|opts
operator|=
name|opts
operator|.
name|convertForBackend
argument_list|()
expr_stmt|;
return|return
name|IndexedChangeQuery
operator|.
name|createOptions
argument_list|(
name|opts
operator|.
name|config
argument_list|()
argument_list|,
name|opts
operator|.
name|start
argument_list|()
argument_list|,
name|opts
operator|.
name|limit
argument_list|()
argument_list|,
name|opts
operator|.
name|fields
argument_list|()
argument_list|)
return|;
block|}
DECL|method|IndexedChangeQuery (ChangeIndex index, Predicate<ChangeData> pred, QueryOptions opts)
specifier|public
name|IndexedChangeQuery
parameter_list|(
name|ChangeIndex
name|index
parameter_list|,
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|pred
parameter_list|,
name|QueryOptions
name|opts
parameter_list|)
throws|throws
name|QueryParseException
block|{
name|super
argument_list|(
name|index
argument_list|,
name|pred
argument_list|,
name|convertOptions
argument_list|(
name|opts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasChange ()
specifier|public
name|boolean
name|hasChange
parameter_list|()
block|{
return|return
name|index
operator|.
name|getSchema
argument_list|()
operator|.
name|hasField
argument_list|(
name|ChangeField
operator|.
name|CHANGE
argument_list|)
return|;
block|}
block|}
end_class

end_unit

