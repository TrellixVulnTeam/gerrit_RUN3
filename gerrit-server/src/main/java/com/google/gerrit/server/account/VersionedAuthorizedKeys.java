begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|InvalidSshKeyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountSshKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountSshKey
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|VersionedMetaData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|SshKeyCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * 'authorized_keys' file in the refs/users/CD/ABCD branches of the All-Users  * repository.  *  * The `authorized_keys' files stores the public SSH keys of the user. The file  * format matches the standard SSH file format, which means that each key is  * stored on a separate line (see  * https://en.wikibooks.org/wiki/OpenSSH/Client_Configuration_Files#.7E.2F.ssh.2Fauthorized_keys).  *  * The order of the keys in the file determines the sequence numbers of the  * keys. The first line corresponds to sequence number 1.  *  * Invalid keys are marked with the prefix<code># INVALID</code>.  *  * To keep the sequence numbers intact when a key is deleted, a  *<code># DELETED</code> line is inserted at the position where the key was  * deleted.  *  * Other comment lines are ignored on read, and are not written back when the  * file is modified.  */
end_comment

begin_class
DECL|class|VersionedAuthorizedKeys
specifier|public
class|class
name|VersionedAuthorizedKeys
extends|extends
name|VersionedMetaData
implements|implements
name|AutoCloseable
block|{
annotation|@
name|Singleton
DECL|class|Accessor
specifier|public
specifier|static
class|class
name|Accessor
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|authorizedKeysFactory
specifier|private
specifier|final
name|VersionedAuthorizedKeys
operator|.
name|Factory
name|authorizedKeysFactory
decl_stmt|;
DECL|field|metaDataUpdateFactory
specifier|private
specifier|final
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|User
argument_list|>
name|metaDataUpdateFactory
decl_stmt|;
DECL|field|userFactory
specifier|private
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|Accessor ( GitRepositoryManager repoManager, AllUsersName allUsersName, VersionedAuthorizedKeys.Factory authorizedKeysFactory, Provider<MetaDataUpdate.User> metaDataUpdateFactory, IdentifiedUser.GenericFactory userFactory)
name|Accessor
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|VersionedAuthorizedKeys
operator|.
name|Factory
name|authorizedKeysFactory
parameter_list|,
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|User
argument_list|>
name|metaDataUpdateFactory
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|authorizedKeysFactory
operator|=
name|authorizedKeysFactory
expr_stmt|;
name|this
operator|.
name|metaDataUpdateFactory
operator|=
name|metaDataUpdateFactory
expr_stmt|;
name|this
operator|.
name|userFactory
operator|=
name|userFactory
expr_stmt|;
block|}
DECL|method|getKeys (Account.Id accountId)
specifier|public
name|List
argument_list|<
name|AccountSshKey
argument_list|>
name|getKeys
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|read
argument_list|(
name|accountId
argument_list|)
operator|.
name|getKeys
argument_list|()
return|;
block|}
DECL|method|getKey (Account.Id accountId, int seq)
specifier|public
name|AccountSshKey
name|getKey
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|int
name|seq
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|read
argument_list|(
name|accountId
argument_list|)
operator|.
name|getKey
argument_list|(
name|seq
argument_list|)
return|;
block|}
DECL|method|addKey (Account.Id accountId, String pub)
specifier|public
name|AccountSshKey
name|addKey
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|String
name|pub
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|InvalidSshKeyException
block|{
try|try
init|(
name|VersionedAuthorizedKeys
name|authorizedKeys
init|=
name|open
argument_list|(
name|accountId
argument_list|)
init|)
block|{
name|AccountSshKey
name|key
init|=
name|authorizedKeys
operator|.
name|addKey
argument_list|(
name|pub
argument_list|)
decl_stmt|;
name|commit
argument_list|(
name|authorizedKeys
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
block|}
DECL|method|deleteKey (Account.Id accountId, int seq)
specifier|public
name|void
name|deleteKey
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|int
name|seq
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
try|try
init|(
name|VersionedAuthorizedKeys
name|authorizedKeys
init|=
name|open
argument_list|(
name|accountId
argument_list|)
init|)
block|{
if|if
condition|(
name|authorizedKeys
operator|.
name|deleteKey
argument_list|(
name|seq
argument_list|)
condition|)
block|{
name|commit
argument_list|(
name|authorizedKeys
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|markKeyInvalid (Account.Id accountId, int seq)
specifier|public
name|void
name|markKeyInvalid
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|int
name|seq
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
try|try
init|(
name|VersionedAuthorizedKeys
name|authorizedKeys
init|=
name|open
argument_list|(
name|accountId
argument_list|)
init|)
block|{
if|if
condition|(
name|authorizedKeys
operator|.
name|markKeyInvalid
argument_list|(
name|seq
argument_list|)
condition|)
block|{
name|commit
argument_list|(
name|authorizedKeys
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|read (Account.Id accountId)
specifier|private
name|VersionedAuthorizedKeys
name|read
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
try|try
init|(
name|Repository
name|git
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
name|VersionedAuthorizedKeys
name|authorizedKeys
init|=
name|authorizedKeysFactory
operator|.
name|create
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
name|authorizedKeys
operator|.
name|load
argument_list|(
name|git
argument_list|)
expr_stmt|;
return|return
name|authorizedKeys
return|;
block|}
block|}
DECL|method|open (Account.Id accountId)
specifier|private
name|VersionedAuthorizedKeys
name|open
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Repository
name|git
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
decl_stmt|;
name|VersionedAuthorizedKeys
name|authorizedKeys
init|=
name|authorizedKeysFactory
operator|.
name|create
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
name|authorizedKeys
operator|.
name|load
argument_list|(
name|git
argument_list|)
expr_stmt|;
return|return
name|authorizedKeys
return|;
block|}
DECL|method|commit (VersionedAuthorizedKeys authorizedKeys)
specifier|private
name|void
name|commit
parameter_list|(
name|VersionedAuthorizedKeys
name|authorizedKeys
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|MetaDataUpdate
name|md
init|=
name|metaDataUpdateFactory
operator|.
name|get
argument_list|()
operator|.
name|create
argument_list|(
name|allUsersName
argument_list|,
name|userFactory
operator|.
name|create
argument_list|(
name|authorizedKeys
operator|.
name|accountId
argument_list|)
argument_list|)
init|)
block|{
name|authorizedKeys
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|SimpleSshKeyCreator
specifier|public
specifier|static
class|class
name|SimpleSshKeyCreator
implements|implements
name|SshKeyCreator
block|{
annotation|@
name|Override
DECL|method|create (Id id, String encoded)
specifier|public
name|AccountSshKey
name|create
parameter_list|(
name|Id
name|id
parameter_list|,
name|String
name|encoded
parameter_list|)
block|{
return|return
operator|new
name|AccountSshKey
argument_list|(
name|id
argument_list|,
name|encoded
argument_list|)
return|;
block|}
block|}
DECL|interface|Factory
specifier|public
specifier|static
interface|interface
name|Factory
block|{
DECL|method|create (Account.Id accountId)
name|VersionedAuthorizedKeys
name|create
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
function_decl|;
block|}
DECL|field|sshKeyCreator
specifier|private
specifier|final
name|SshKeyCreator
name|sshKeyCreator
decl_stmt|;
DECL|field|accountId
specifier|private
specifier|final
name|Account
operator|.
name|Id
name|accountId
decl_stmt|;
DECL|field|ref
specifier|private
specifier|final
name|String
name|ref
decl_stmt|;
DECL|field|git
specifier|private
name|Repository
name|git
decl_stmt|;
DECL|field|keys
specifier|private
name|List
argument_list|<
name|Optional
argument_list|<
name|AccountSshKey
argument_list|>
argument_list|>
name|keys
decl_stmt|;
annotation|@
name|Inject
DECL|method|VersionedAuthorizedKeys ( SshKeyCreator sshKeyCreator, @Assisted Account.Id accountId)
specifier|public
name|VersionedAuthorizedKeys
parameter_list|(
name|SshKeyCreator
name|sshKeyCreator
parameter_list|,
annotation|@
name|Assisted
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
name|this
operator|.
name|sshKeyCreator
operator|=
name|sshKeyCreator
expr_stmt|;
name|this
operator|.
name|accountId
operator|=
name|accountId
expr_stmt|;
name|this
operator|.
name|ref
operator|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRefName ()
specifier|protected
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|ref
return|;
block|}
annotation|@
name|Override
DECL|method|load (Repository git)
specifier|public
name|void
name|load
parameter_list|(
name|Repository
name|git
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|checkState
argument_list|(
name|this
operator|.
name|git
operator|==
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|git
operator|=
name|git
expr_stmt|;
name|super
operator|.
name|load
argument_list|(
name|git
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
throws|throws
name|IOException
block|{
name|keys
operator|=
name|AuthorizedKeys
operator|.
name|parse
argument_list|(
name|accountId
argument_list|,
name|readUTF8
argument_list|(
name|AuthorizedKeys
operator|.
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onSave (CommitBuilder commit)
specifier|protected
name|boolean
name|onSave
parameter_list|(
name|CommitBuilder
name|commit
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|commit
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|commit
operator|.
name|setMessage
argument_list|(
literal|"Updated SSH keys\n"
argument_list|)
expr_stmt|;
block|}
name|saveUTF8
argument_list|(
name|AuthorizedKeys
operator|.
name|FILE_NAME
argument_list|,
name|AuthorizedKeys
operator|.
name|serialize
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/** Returns all SSH keys. */
DECL|method|getKeys ()
specifier|private
name|List
argument_list|<
name|AccountSshKey
argument_list|>
name|getKeys
parameter_list|()
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Optional
operator|.
name|presentInstances
argument_list|(
name|keys
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns the SSH key with the given sequence number.    *    * @param seq sequence number    * @return the SSH key,<code>null</code> if there is no SSH key with this    *         sequence number, or if the SSH key with this sequence number has    *         been deleted    */
DECL|method|getKey (int seq)
specifier|private
name|AccountSshKey
name|getKey
parameter_list|(
name|int
name|seq
parameter_list|)
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
name|Optional
argument_list|<
name|AccountSshKey
argument_list|>
name|key
init|=
name|keys
operator|.
name|get
argument_list|(
name|seq
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|key
operator|.
name|orNull
argument_list|()
return|;
block|}
comment|/**    * Adds a new public SSH key.    *    * @param pub the public SSH key to be added    * @return the new SSH key    * @throws InvalidSshKeyException    */
DECL|method|addKey (String pub)
specifier|private
name|AccountSshKey
name|addKey
parameter_list|(
name|String
name|pub
parameter_list|)
throws|throws
name|InvalidSshKeyException
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
name|int
name|seq
init|=
name|keys
operator|.
name|size
argument_list|()
operator|+
literal|1
decl_stmt|;
name|AccountSshKey
operator|.
name|Id
name|keyId
init|=
operator|new
name|AccountSshKey
operator|.
name|Id
argument_list|(
name|accountId
argument_list|,
name|seq
argument_list|)
decl_stmt|;
name|AccountSshKey
name|key
init|=
name|sshKeyCreator
operator|.
name|create
argument_list|(
name|keyId
argument_list|,
name|pub
argument_list|)
decl_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
comment|/**    * Deletes the SSH key with the given sequence number.    *    * @param seq the sequence number    * @return<code>true</code> if a key with this sequence number was found and    *         deleted,<code>false</code> if no key with the given sequence    *         number exists    */
DECL|method|deleteKey (int seq)
specifier|private
name|boolean
name|deleteKey
parameter_list|(
name|int
name|seq
parameter_list|)
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
if|if
condition|(
name|seq
operator|<=
name|keys
operator|.
name|size
argument_list|()
operator|&&
name|keys
operator|.
name|get
argument_list|(
name|seq
operator|-
literal|1
argument_list|)
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|keys
operator|.
name|set
argument_list|(
name|seq
operator|-
literal|1
argument_list|,
name|Optional
operator|.
expr|<
name|AccountSshKey
operator|>
name|absent
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Marks the SSH key with the given sequence number as invalid.    *    * @param seq the sequence number    * @return<code>true</code> if a key with this sequence number was found and    *         marked as invalid,<code>false</code> if no key with the given    *         sequence number exists or if the key was already marked as invalid    */
DECL|method|markKeyInvalid (int seq)
specifier|private
name|boolean
name|markKeyInvalid
parameter_list|(
name|int
name|seq
parameter_list|)
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
name|AccountSshKey
name|key
init|=
name|getKey
argument_list|(
name|seq
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
name|key
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|key
operator|.
name|setInvalid
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Sets new SSH keys.    *    * The existing SSH keys are overwritten.    *    * @param newKeys the new public SSH keys    */
DECL|method|setKeys (Collection<AccountSshKey> newKeys)
specifier|public
name|void
name|setKeys
parameter_list|(
name|Collection
argument_list|<
name|AccountSshKey
argument_list|>
name|newKeys
parameter_list|)
block|{
name|Ordering
argument_list|<
name|AccountSshKey
argument_list|>
name|o
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|onResultOf
argument_list|(
operator|new
name|Function
argument_list|<
name|AccountSshKey
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|AccountSshKey
name|sshKey
parameter_list|)
block|{
return|return
name|sshKey
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|keys
operator|=
name|Collections
operator|.
name|nCopies
argument_list|(
name|o
operator|.
name|max
argument_list|(
name|newKeys
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|AccountSshKey
operator|>
name|absent
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AccountSshKey
name|key
range|:
name|newKeys
control|)
block|{
name|keys
operator|.
name|set
argument_list|(
name|key
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
operator|-
literal|1
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|git
operator|!=
literal|null
condition|)
block|{
name|git
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkLoaded ()
specifier|private
name|void
name|checkLoaded
parameter_list|()
block|{
name|checkNotNull
argument_list|(
name|keys
argument_list|,
literal|"SSH keys not loaded yet"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

