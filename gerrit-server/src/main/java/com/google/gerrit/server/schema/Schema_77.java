begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
operator|.
name|LabelId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|jdbc
operator|.
name|JdbcSchema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|schema
operator|.
name|sql
operator|.
name|DialectH2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|schema
operator|.
name|sql
operator|.
name|DialectMySQL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|schema
operator|.
name|sql
operator|.
name|DialectPostgreSQL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|schema
operator|.
name|sql
operator|.
name|SqlDialect
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_class
DECL|class|Schema_77
specifier|public
class|class
name|Schema_77
extends|extends
name|SchemaVersion
block|{
DECL|field|mgr
specifier|private
specifier|final
name|GitRepositoryManager
name|mgr
decl_stmt|;
DECL|field|allProjects
specifier|private
specifier|final
name|AllProjectsName
name|allProjects
decl_stmt|;
DECL|field|serverUser
specifier|private
specifier|final
name|PersonIdent
name|serverUser
decl_stmt|;
annotation|@
name|Inject
DECL|method|Schema_77 (Provider<Schema_76> prior, AllProjectsName allProjects, GitRepositoryManager mgr, @GerritPersonIdent PersonIdent serverUser)
name|Schema_77
parameter_list|(
name|Provider
argument_list|<
name|Schema_76
argument_list|>
name|prior
parameter_list|,
name|AllProjectsName
name|allProjects
parameter_list|,
name|GitRepositoryManager
name|mgr
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverUser
parameter_list|)
block|{
name|super
argument_list|(
name|prior
argument_list|)
expr_stmt|;
name|this
operator|.
name|allProjects
operator|=
name|allProjects
expr_stmt|;
name|this
operator|.
name|mgr
operator|=
name|mgr
expr_stmt|;
name|this
operator|.
name|serverUser
operator|=
name|serverUser
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|migrateData (ReviewDb db, UpdateUI ui)
specifier|protected
name|void
name|migrateData
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|UpdateUI
name|ui
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
block|{
name|LegacyLabelTypes
name|labelTypes
init|=
name|getLegacyTypes
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|SqlDialect
name|dialect
init|=
operator|(
operator|(
name|JdbcSchema
operator|)
name|db
operator|)
operator|.
name|getDialect
argument_list|()
decl_stmt|;
if|if
condition|(
name|dialect
operator|instanceof
name|DialectH2
condition|)
block|{
name|alterTable
argument_list|(
name|db
argument_list|,
literal|"ALTER TABLE %s ALTER COLUMN %s varchar(255)"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dialect
operator|instanceof
name|DialectPostgreSQL
condition|)
block|{
name|alterTable
argument_list|(
name|db
argument_list|,
literal|"ALTER TABLE %s ALTER %s TYPE varchar(255)"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dialect
operator|instanceof
name|DialectMySQL
condition|)
block|{
name|alterTable
argument_list|(
name|db
argument_list|,
literal|"ALTER TABLE %s MODIFY %s varchar(255) BINARY"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|alterTable
argument_list|(
name|db
argument_list|,
literal|"ALTER TABLE %s MODIFY %s varchar(255)"
argument_list|)
expr_stmt|;
block|}
name|migratePatchSetApprovals
argument_list|(
name|db
argument_list|,
name|labelTypes
argument_list|)
expr_stmt|;
name|migrateLabelsToAllProjects
argument_list|(
name|db
argument_list|,
name|labelTypes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|ui
operator|.
name|message
argument_list|(
literal|"Migrated label types from database to All-Projects project.config"
argument_list|)
expr_stmt|;
block|}
DECL|method|alterTable (ReviewDb db, String sqlFormat)
specifier|private
name|void
name|alterTable
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|String
name|sqlFormat
parameter_list|)
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
operator|(
operator|(
name|JdbcSchema
operator|)
name|db
operator|)
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|sqlFormat
argument_list|,
literal|"patch_set_approvals"
argument_list|,
literal|"category_id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|migrateLabelsToAllProjects (ReviewDb db, LegacyLabelTypes labelTypes)
specifier|private
name|void
name|migrateLabelsToAllProjects
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|LegacyLabelTypes
name|labelTypes
parameter_list|)
throws|throws
name|SQLException
throws|,
name|RepositoryNotFoundException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Repository
name|git
init|=
name|mgr
operator|.
name|openRepository
argument_list|(
name|allProjects
argument_list|)
decl_stmt|;
try|try
block|{
name|MetaDataUpdate
name|md
init|=
operator|new
name|MetaDataUpdate
argument_list|(
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|,
name|allProjects
argument_list|,
name|git
argument_list|)
decl_stmt|;
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|serverUser
argument_list|)
expr_stmt|;
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
name|serverUser
argument_list|)
expr_stmt|;
name|ProjectConfig
name|config
init|=
name|ProjectConfig
operator|.
name|read
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LabelType
argument_list|>
name|configTypes
init|=
name|config
operator|.
name|getLabelSections
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LabelType
argument_list|>
name|newTypes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|LegacyLabelType
name|type
range|:
name|labelTypes
operator|.
name|getLegacyLabelTypes
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|configTypes
operator|.
name|containsKey
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|newTypes
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
name|newTypes
operator|.
name|addAll
argument_list|(
name|configTypes
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|configTypes
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|LabelType
name|type
range|:
name|newTypes
control|)
block|{
name|configTypes
operator|.
name|put
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
name|md
operator|.
name|setMessage
argument_list|(
literal|"Upgrade to Gerrit Code Review schema 77\n"
argument_list|)
expr_stmt|;
name|config
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|git
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|migratePatchSetApprovals (ReviewDb db, LegacyLabelTypes labelTypes)
specifier|private
name|void
name|migratePatchSetApprovals
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|LegacyLabelTypes
name|labelTypes
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|stmt
init|=
operator|(
operator|(
name|JdbcSchema
operator|)
name|db
operator|)
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
literal|"UPDATE patch_set_approvals SET category_id = ?, granted=granted"
operator|+
literal|" WHERE category_id = ?"
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|LegacyLabelType
name|type
range|:
name|labelTypes
operator|.
name|getLegacyLabelTypes
argument_list|()
control|)
block|{
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|type
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
name|stmt
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|LegacyLabelType
specifier|static
class|class
name|LegacyLabelType
extends|extends
name|LabelType
block|{
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|method|LegacyLabelType (String name, List<LabelValue> values)
specifier|private
name|LegacyLabelType
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|LabelValue
argument_list|>
name|values
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
DECL|method|getId ()
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|setId (String id)
specifier|private
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|id
operator|.
name|length
argument_list|()
operator|<=
literal|4
argument_list|,
literal|"Invalid legacy label ID: \"%s\""
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
block|}
DECL|class|LegacyLabelTypes
specifier|static
class|class
name|LegacyLabelTypes
extends|extends
name|LabelTypes
block|{
DECL|field|legacyTypes
specifier|private
specifier|final
name|List
argument_list|<
name|LegacyLabelType
argument_list|>
name|legacyTypes
decl_stmt|;
DECL|field|byId
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LegacyLabelType
argument_list|>
name|byId
decl_stmt|;
DECL|method|LegacyLabelTypes (List<LegacyLabelType> types)
specifier|private
name|LegacyLabelTypes
parameter_list|(
name|List
argument_list|<
name|LegacyLabelType
argument_list|>
name|types
parameter_list|)
block|{
name|super
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|legacyTypes
operator|=
name|types
expr_stmt|;
name|byId
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|LegacyLabelType
name|type
range|:
name|types
control|)
block|{
name|byId
operator|.
name|put
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getLegacyLabelTypes ()
name|List
argument_list|<
name|LegacyLabelType
argument_list|>
name|getLegacyLabelTypes
parameter_list|()
block|{
return|return
name|legacyTypes
return|;
block|}
annotation|@
name|Override
DECL|method|byLabel (LabelId labelId)
specifier|public
name|LegacyLabelType
name|byLabel
parameter_list|(
name|LabelId
name|labelId
parameter_list|)
block|{
name|LegacyLabelType
name|t
init|=
name|byId
operator|.
name|get
argument_list|(
name|labelId
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|t
operator|!=
literal|null
condition|?
name|t
else|:
operator|(
name|LegacyLabelType
operator|)
name|super
operator|.
name|byLabel
argument_list|(
name|labelId
argument_list|)
return|;
block|}
DECL|method|byId (LabelId id)
name|LegacyLabelType
name|byId
parameter_list|(
name|LabelId
name|id
parameter_list|)
block|{
return|return
name|byId
operator|.
name|get
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|getLegacyTypes (ReviewDb db)
specifier|static
name|LegacyLabelTypes
name|getLegacyTypes
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|SQLException
block|{
name|List
argument_list|<
name|LegacyLabelType
argument_list|>
name|types
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Statement
name|catStmt
init|=
operator|(
operator|(
name|JdbcSchema
operator|)
name|db
operator|)
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|ResultSet
name|catRs
init|=
name|catStmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT category_id, name, function_name, copy_min_score"
operator|+
literal|" FROM approval_categories"
operator|+
literal|" ORDER BY position, name"
argument_list|)
decl_stmt|;
name|PreparedStatement
name|valStmt
init|=
operator|(
operator|(
name|JdbcSchema
operator|)
name|db
operator|)
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT value, name"
operator|+
literal|" FROM approval_category_values"
operator|+
literal|" WHERE category_id = ?"
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|catRs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|catRs
operator|.
name|getString
argument_list|(
literal|"category_id"
argument_list|)
decl_stmt|;
name|valStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LabelValue
argument_list|>
name|values
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|ResultSet
name|valRs
init|=
name|valStmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
while|while
condition|(
name|valRs
operator|.
name|next
argument_list|()
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
operator|new
name|LabelValue
argument_list|(
name|valRs
operator|.
name|getShort
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|valRs
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LegacyLabelType
name|type
init|=
operator|new
name|LegacyLabelType
argument_list|(
name|getLabelName
argument_list|(
name|catRs
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
argument_list|)
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|type
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|type
operator|.
name|setFunctionName
argument_list|(
name|catRs
operator|.
name|getString
argument_list|(
literal|"function_name"
argument_list|)
argument_list|)
expr_stmt|;
name|type
operator|.
name|setCopyMinScore
argument_list|(
literal|"Y"
operator|.
name|equals
argument_list|(
name|catRs
operator|.
name|getString
argument_list|(
literal|"copy_min_score"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|valStmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|catStmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|LegacyLabelTypes
argument_list|(
name|types
argument_list|)
return|;
block|}
DECL|method|getLabelName (String name)
specifier|private
specifier|static
name|String
name|getLabelName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
literal|'0'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'9'
operator|)
comment|//
operator|||
operator|(
literal|'a'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'z'
operator|)
comment|//
operator|||
operator|(
literal|'A'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'Z'
operator|)
comment|//
operator|||
operator|(
name|c
operator|==
literal|'-'
operator|)
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|' '
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

