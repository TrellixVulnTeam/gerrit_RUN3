begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
operator|.
name|ALL_COMMITS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
operator|.
name|ALL_FILES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
operator|.
name|ALL_REVISIONS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
operator|.
name|CURRENT_COMMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
operator|.
name|CURRENT_FILES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
operator|.
name|CURRENT_REVISION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
operator|.
name|DETAILED_ACCOUNTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
operator|.
name|DETAILED_LABELS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
operator|.
name|LABELS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Url
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ApprovalCategoryValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetInfo
operator|.
name|ParentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|UserIdentity
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AnonymousUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|SshInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|workflow
operator|.
name|CategoryFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|workflow
operator|.
name|FunctionState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|HostKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_class
DECL|class|ChangeJson
specifier|public
class|class
name|ChangeJson
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChangeJson
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Singleton
DECL|class|Urls
specifier|static
class|class
name|Urls
block|{
DECL|field|git
specifier|final
name|String
name|git
decl_stmt|;
DECL|field|http
specifier|final
name|String
name|http
decl_stmt|;
annotation|@
name|Inject
DECL|method|Urls (@erritServerConfig Config cfg)
name|Urls
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|)
block|{
name|this
operator|.
name|git
operator|=
name|ensureSlash
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
literal|"gerrit"
argument_list|,
literal|null
argument_list|,
literal|"canonicalGitUrl"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|http
operator|=
name|ensureSlash
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
literal|"gerrit"
argument_list|,
literal|null
argument_list|,
literal|"gitHttpUrl"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureSlash (String in)
specifier|private
specifier|static
name|String
name|ensureSlash
parameter_list|(
name|String
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|!=
literal|null
operator|&&
operator|!
name|in
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
name|in
operator|+
literal|"/"
return|;
block|}
return|return
name|in
return|;
block|}
block|}
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|approvalTypes
specifier|private
specifier|final
name|ApprovalTypes
name|approvalTypes
decl_stmt|;
DECL|field|functionState
specifier|private
specifier|final
name|FunctionState
operator|.
name|Factory
name|functionState
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|CurrentUser
name|user
decl_stmt|;
DECL|field|anonymous
specifier|private
specifier|final
name|AnonymousUser
name|anonymous
decl_stmt|;
DECL|field|userFactory
specifier|private
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
DECL|field|changeControlGenericFactory
specifier|private
specifier|final
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlGenericFactory
decl_stmt|;
DECL|field|patchSetInfoFactory
specifier|private
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
decl_stmt|;
DECL|field|patchListCache
specifier|private
specifier|final
name|PatchListCache
name|patchListCache
decl_stmt|;
DECL|field|accountLoaderFactory
specifier|private
specifier|final
name|AccountInfo
operator|.
name|Loader
operator|.
name|Factory
name|accountLoaderFactory
decl_stmt|;
DECL|field|urlProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|String
argument_list|>
name|urlProvider
decl_stmt|;
DECL|field|urls
specifier|private
specifier|final
name|Urls
name|urls
decl_stmt|;
DECL|field|changeControlUserFactory
specifier|private
name|ChangeControl
operator|.
name|Factory
name|changeControlUserFactory
decl_stmt|;
DECL|field|sshInfo
specifier|private
name|SshInfo
name|sshInfo
decl_stmt|;
DECL|field|controls
specifier|private
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeControl
argument_list|>
name|controls
decl_stmt|;
DECL|field|options
specifier|private
name|EnumSet
argument_list|<
name|ListChangesOption
argument_list|>
name|options
decl_stmt|;
DECL|field|accountLoader
specifier|private
name|AccountInfo
operator|.
name|Loader
name|accountLoader
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChangeJson ( Provider<ReviewDb> db, ApprovalTypes at, FunctionState.Factory fs, CurrentUser u, AnonymousUser au, IdentifiedUser.GenericFactory uf, ChangeControl.GenericFactory ccf, PatchSetInfoFactory psi, PatchListCache plc, AccountInfo.Loader.Factory ailf, @CanonicalWebUrl Provider<String> curl, Urls urls)
name|ChangeJson
parameter_list|(
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|ApprovalTypes
name|at
parameter_list|,
name|FunctionState
operator|.
name|Factory
name|fs
parameter_list|,
name|CurrentUser
name|u
parameter_list|,
name|AnonymousUser
name|au
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|uf
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|ccf
parameter_list|,
name|PatchSetInfoFactory
name|psi
parameter_list|,
name|PatchListCache
name|plc
parameter_list|,
name|AccountInfo
operator|.
name|Loader
operator|.
name|Factory
name|ailf
parameter_list|,
annotation|@
name|CanonicalWebUrl
name|Provider
argument_list|<
name|String
argument_list|>
name|curl
parameter_list|,
name|Urls
name|urls
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|approvalTypes
operator|=
name|at
expr_stmt|;
name|this
operator|.
name|functionState
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|u
expr_stmt|;
name|this
operator|.
name|anonymous
operator|=
name|au
expr_stmt|;
name|this
operator|.
name|userFactory
operator|=
name|uf
expr_stmt|;
name|this
operator|.
name|changeControlGenericFactory
operator|=
name|ccf
expr_stmt|;
name|this
operator|.
name|patchSetInfoFactory
operator|=
name|psi
expr_stmt|;
name|this
operator|.
name|patchListCache
operator|=
name|plc
expr_stmt|;
name|this
operator|.
name|accountLoaderFactory
operator|=
name|ailf
expr_stmt|;
name|this
operator|.
name|urlProvider
operator|=
name|curl
expr_stmt|;
name|this
operator|.
name|urls
operator|=
name|urls
expr_stmt|;
name|controls
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|options
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|ListChangesOption
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|addOption (ListChangesOption o)
specifier|public
name|ChangeJson
name|addOption
parameter_list|(
name|ListChangesOption
name|o
parameter_list|)
block|{
name|options
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addOptions (Collection<ListChangesOption> o)
specifier|public
name|ChangeJson
name|addOptions
parameter_list|(
name|Collection
argument_list|<
name|ListChangesOption
argument_list|>
name|o
parameter_list|)
block|{
name|options
operator|.
name|addAll
argument_list|(
name|o
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setSshInfo (SshInfo info)
specifier|public
name|ChangeJson
name|setSshInfo
parameter_list|(
name|SshInfo
name|info
parameter_list|)
block|{
name|sshInfo
operator|=
name|info
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setChangeControlFactory (ChangeControl.Factory cf)
specifier|public
name|ChangeJson
name|setChangeControlFactory
parameter_list|(
name|ChangeControl
operator|.
name|Factory
name|cf
parameter_list|)
block|{
name|changeControlUserFactory
operator|=
name|cf
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|format (ChangeResource rsrc)
specifier|public
name|ChangeInfo
name|format
parameter_list|(
name|ChangeResource
name|rsrc
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|format
argument_list|(
operator|new
name|ChangeData
argument_list|(
name|rsrc
operator|.
name|getControl
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|format (Change change)
specifier|public
name|ChangeInfo
name|format
parameter_list|(
name|Change
name|change
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|format
argument_list|(
operator|new
name|ChangeData
argument_list|(
name|change
argument_list|)
argument_list|)
return|;
block|}
DECL|method|format (Change.Id id)
specifier|public
name|ChangeInfo
name|format
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|format
argument_list|(
operator|new
name|ChangeData
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
DECL|method|format (ChangeData cd)
specifier|public
name|ChangeInfo
name|format
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|ChangeData
argument_list|>
name|tmp
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|cd
argument_list|)
decl_stmt|;
return|return
name|formatList2
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|tmp
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|format (RevisionResource rsrc)
specifier|public
name|ChangeInfo
name|format
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeData
name|cd
init|=
operator|new
name|ChangeData
argument_list|(
name|rsrc
operator|.
name|getControl
argument_list|()
argument_list|)
decl_stmt|;
name|cd
operator|.
name|limitToPatchSets
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|rsrc
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|format
argument_list|(
name|cd
argument_list|)
return|;
block|}
DECL|method|formatList2 (List<List<ChangeData>> in)
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|>
name|formatList2
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|in
parameter_list|)
throws|throws
name|OrmException
block|{
name|accountLoader
operator|=
name|accountLoaderFactory
operator|.
name|create
argument_list|(
name|options
operator|.
name|contains
argument_list|(
name|DETAILED_ACCOUNTS
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|>
name|res
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|in
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changes
range|:
name|in
control|)
block|{
name|ChangeData
operator|.
name|ensureChangeLoaded
argument_list|(
name|db
argument_list|,
name|changes
argument_list|)
expr_stmt|;
name|ChangeData
operator|.
name|ensureCurrentPatchSetLoaded
argument_list|(
name|db
argument_list|,
name|changes
argument_list|)
expr_stmt|;
name|ChangeData
operator|.
name|ensureCurrentApprovalsLoaded
argument_list|(
name|db
argument_list|,
name|changes
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
name|toChangeInfo
argument_list|(
name|changes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|accountLoader
operator|.
name|fill
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
DECL|method|toChangeInfo (List<ChangeData> changes)
specifier|private
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|toChangeInfo
parameter_list|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|info
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|changes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
name|info
operator|.
name|add
argument_list|(
name|toChangeInfo
argument_list|(
name|cd
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
DECL|method|toChangeInfo (ChangeData cd)
specifier|private
name|ChangeInfo
name|toChangeInfo
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeInfo
name|out
init|=
operator|new
name|ChangeInfo
argument_list|()
decl_stmt|;
name|Change
name|in
init|=
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|out
operator|.
name|project
operator|=
name|in
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|out
operator|.
name|branch
operator|=
name|in
operator|.
name|getDest
argument_list|()
operator|.
name|getShortName
argument_list|()
expr_stmt|;
name|out
operator|.
name|topic
operator|=
name|in
operator|.
name|getTopic
argument_list|()
expr_stmt|;
name|out
operator|.
name|changeId
operator|=
name|in
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|out
operator|.
name|mergeable
operator|=
name|in
operator|.
name|getStatus
argument_list|()
operator|!=
name|Change
operator|.
name|Status
operator|.
name|MERGED
condition|?
name|in
operator|.
name|isMergeable
argument_list|()
else|:
literal|null
expr_stmt|;
name|out
operator|.
name|subject
operator|=
name|in
operator|.
name|getSubject
argument_list|()
expr_stmt|;
name|out
operator|.
name|status
operator|=
name|in
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|out
operator|.
name|owner
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|in
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|created
operator|=
name|in
operator|.
name|getCreatedOn
argument_list|()
expr_stmt|;
name|out
operator|.
name|updated
operator|=
name|in
operator|.
name|getLastUpdatedOn
argument_list|()
expr_stmt|;
name|out
operator|.
name|_number
operator|=
name|in
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|out
operator|.
name|_sortkey
operator|=
name|in
operator|.
name|getSortKey
argument_list|()
expr_stmt|;
name|out
operator|.
name|starred
operator|=
name|user
operator|.
name|getStarredChanges
argument_list|()
operator|.
name|contains
argument_list|(
name|in
operator|.
name|getId
argument_list|()
argument_list|)
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|out
operator|.
name|reviewed
operator|=
name|in
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
operator|&&
name|isChangeReviewed
argument_list|(
name|cd
argument_list|)
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|out
operator|.
name|labels
operator|=
name|labelsFor
argument_list|(
name|cd
argument_list|,
name|options
operator|.
name|contains
argument_list|(
name|LABELS
argument_list|)
argument_list|,
name|options
operator|.
name|contains
argument_list|(
name|DETAILED_LABELS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|DETAILED_LABELS
argument_list|)
condition|)
block|{
name|out
operator|.
name|permitted_labels
operator|=
name|permittedLabels
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|out
operator|.
name|removable_reviewers
operator|=
name|removableReviewers
argument_list|(
name|cd
argument_list|,
name|out
operator|.
name|labels
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|finish
argument_list|()
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|ALL_REVISIONS
argument_list|)
operator|||
name|options
operator|.
name|contains
argument_list|(
name|CURRENT_REVISION
argument_list|)
operator|||
name|cd
operator|.
name|getLimitedPatchSets
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|revisions
operator|=
name|revisions
argument_list|(
name|cd
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|commit
range|:
name|out
operator|.
name|revisions
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|out
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|commit
argument_list|)
operator|.
name|isCurrent
condition|)
block|{
name|out
operator|.
name|current_revision
operator|=
name|commit
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|out
return|;
block|}
DECL|method|control (ChangeData cd)
specifier|private
name|ChangeControl
name|control
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeControl
name|ctrl
init|=
name|cd
operator|.
name|changeControl
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctrl
operator|!=
literal|null
operator|&&
name|ctrl
operator|.
name|getCurrentUser
argument_list|()
operator|==
name|user
condition|)
block|{
return|return
name|ctrl
return|;
block|}
name|ctrl
operator|=
name|controls
operator|.
name|get
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctrl
operator|!=
literal|null
condition|)
block|{
return|return
name|ctrl
return|;
block|}
try|try
block|{
if|if
condition|(
name|changeControlUserFactory
operator|!=
literal|null
condition|)
block|{
name|ctrl
operator|=
name|changeControlUserFactory
operator|.
name|controlFor
argument_list|(
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ctrl
operator|=
name|changeControlGenericFactory
operator|.
name|controlFor
argument_list|(
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchChangeException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|controls
operator|.
name|put
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|ctrl
argument_list|)
expr_stmt|;
return|return
name|ctrl
return|;
block|}
DECL|method|submitRecords (ChangeData cd)
specifier|private
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|submitRecords
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|cd
operator|.
name|getSubmitRecords
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|cd
operator|.
name|getSubmitRecords
argument_list|()
return|;
block|}
name|ChangeControl
name|ctl
init|=
name|control
argument_list|(
name|cd
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctl
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|PatchSet
name|ps
init|=
name|cd
operator|.
name|currentPatchSet
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|cd
operator|.
name|setSubmitRecords
argument_list|(
name|ctl
operator|.
name|canSubmit
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|ps
argument_list|,
name|cd
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cd
operator|.
name|getSubmitRecords
argument_list|()
return|;
block|}
DECL|method|labelsFor (ChangeData cd, boolean standard, boolean detailed)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labelsFor
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|boolean
name|standard
parameter_list|,
name|boolean
name|detailed
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
operator|!
name|standard
operator|&&
operator|!
name|detailed
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ChangeControl
name|ctl
init|=
name|control
argument_list|(
name|cd
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctl
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|PatchSet
name|ps
init|=
name|cd
operator|.
name|currentPatchSet
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
if|if
condition|(
name|cd
operator|.
name|getChange
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
return|return
name|labelsForOpenChange
argument_list|(
name|cd
argument_list|,
name|standard
argument_list|,
name|detailed
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|labelsForClosedChange
argument_list|(
name|cd
argument_list|,
name|standard
argument_list|,
name|detailed
argument_list|)
return|;
block|}
block|}
DECL|method|labelsForOpenChange (ChangeData cd, boolean standard, boolean detailed)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labelsForOpenChange
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|boolean
name|standard
parameter_list|,
name|boolean
name|detailed
parameter_list|)
throws|throws
name|OrmException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labels
init|=
name|initLabels
argument_list|(
name|cd
argument_list|,
name|standard
argument_list|)
decl_stmt|;
if|if
condition|(
name|detailed
condition|)
block|{
name|setAllApprovals
argument_list|(
name|cd
argument_list|,
name|labels
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|e
range|:
name|labels
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ApprovalType
name|type
init|=
name|approvalTypes
operator|.
name|byLabel
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
continue|continue;
comment|// TODO: Support arbitrary labels.
block|}
if|if
condition|(
name|standard
condition|)
block|{
name|setRecommendedAndDisliked
argument_list|(
name|cd
argument_list|,
name|type
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|detailed
condition|)
block|{
name|setLabelValues
argument_list|(
name|type
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|labels
return|;
block|}
DECL|method|initLabels (ChangeData cd, boolean standard)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|initLabels
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|boolean
name|standard
parameter_list|)
throws|throws
name|OrmException
block|{
comment|// Don't use Maps.newTreeMap(Comparator) due to OpenJDK bug 100167.
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labels
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
argument_list|(
name|LabelOrdering
operator|.
name|create
argument_list|(
name|approvalTypes
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SubmitRecord
name|rec
range|:
name|submitRecords
argument_list|(
name|cd
argument_list|)
control|)
block|{
if|if
condition|(
name|rec
operator|.
name|labels
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|SubmitRecord
operator|.
name|Label
name|r
range|:
name|rec
operator|.
name|labels
control|)
block|{
name|LabelInfo
name|p
init|=
name|labels
operator|.
name|get
argument_list|(
name|r
operator|.
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
operator|.
name|_status
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|status
argument_list|)
operator|<
literal|0
condition|)
block|{
name|LabelInfo
name|n
init|=
operator|new
name|LabelInfo
argument_list|()
decl_stmt|;
name|n
operator|.
name|_status
operator|=
name|r
operator|.
name|status
expr_stmt|;
if|if
condition|(
name|standard
condition|)
block|{
switch|switch
condition|(
name|r
operator|.
name|status
condition|)
block|{
case|case
name|OK
case|:
name|n
operator|.
name|approved
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|r
operator|.
name|appliedBy
argument_list|)
expr_stmt|;
break|break;
case|case
name|REJECT
case|:
name|n
operator|.
name|rejected
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|r
operator|.
name|appliedBy
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
name|n
operator|.
name|optional
operator|=
name|n
operator|.
name|_status
operator|==
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
operator|.
name|MAY
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|labels
operator|.
name|put
argument_list|(
name|r
operator|.
name|label
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|labels
return|;
block|}
DECL|method|setRecommendedAndDisliked (ChangeData cd, ApprovalType type, LabelInfo label)
specifier|private
name|void
name|setRecommendedAndDisliked
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|ApprovalType
name|type
parameter_list|,
name|LabelInfo
name|label
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|label
operator|.
name|approved
operator|!=
literal|null
operator|||
name|label
operator|.
name|rejected
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|type
operator|.
name|getMin
argument_list|()
operator|==
literal|null
operator|||
name|type
operator|.
name|getMax
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Unknown or misconfigured type can't have intermediate scores.
return|return;
block|}
name|short
name|min
init|=
name|type
operator|.
name|getMin
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|short
name|max
init|=
name|type
operator|.
name|getMax
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<=
name|min
operator|&&
name|max
operator|<=
literal|1
condition|)
block|{
comment|// Types with a range of -1..+1 can't have intermediate scores.
return|return;
block|}
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|cd
operator|.
name|currentApprovals
argument_list|(
name|db
argument_list|)
control|)
block|{
name|short
name|val
init|=
name|psa
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|0
operator|&&
name|min
operator|<
name|val
operator|&&
name|val
operator|<
name|max
operator|&&
name|psa
operator|.
name|getCategoryId
argument_list|()
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getCategory
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|0
operator|<
name|val
condition|)
block|{
name|label
operator|.
name|recommended
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|.
name|value
operator|=
name|val
operator|!=
literal|1
condition|?
name|val
else|:
literal|null
expr_stmt|;
block|}
else|else
block|{
name|label
operator|.
name|disliked
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|.
name|value
operator|=
name|val
operator|!=
operator|-
literal|1
condition|?
name|val
else|:
literal|null
expr_stmt|;
block|}
block|}
block|}
return|return;
block|}
DECL|method|setAllApprovals (ChangeData cd, Map<String, LabelInfo> labels)
specifier|private
name|void
name|setAllApprovals
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labels
parameter_list|)
throws|throws
name|OrmException
block|{
name|cd
operator|.
name|allApprovals
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|ChangeControl
name|ctl
init|=
name|cd
operator|.
name|changeControl
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvals
init|=
name|cd
operator|.
name|currentApprovals
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|FunctionState
name|fs
init|=
name|functionState
operator|.
name|create
argument_list|(
name|ctl
argument_list|,
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|approvals
argument_list|)
decl_stmt|;
for|for
control|(
name|ApprovalType
name|at
range|:
name|approvalTypes
operator|.
name|getApprovalTypes
argument_list|()
control|)
block|{
name|CategoryFunction
operator|.
name|forCategory
argument_list|(
name|at
operator|.
name|getCategory
argument_list|()
argument_list|)
operator|.
name|run
argument_list|(
name|at
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
name|Multimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|existing
init|=
name|HashMultimap
operator|.
name|create
argument_list|(
name|approvals
operator|.
name|size
argument_list|()
argument_list|,
name|labels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|approvals
control|)
block|{
name|ApprovalType
name|at
init|=
name|approvalTypes
operator|.
name|byId
argument_list|(
name|psa
operator|.
name|getCategoryId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|at
operator|.
name|getCategory
argument_list|()
operator|.
name|getLabelName
argument_list|()
decl_stmt|;
name|LabelInfo
name|p
init|=
name|labels
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
continue|continue;
comment|// TODO: support arbitrary labels.
block|}
if|if
condition|(
operator|!
name|getRange
argument_list|(
name|ctl
argument_list|,
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|name
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|p
operator|.
name|addApproval
argument_list|(
name|approvalInfo
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|psa
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|existing
operator|.
name|put
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|at
operator|.
name|getCategory
argument_list|()
operator|.
name|getLabelName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add dummy approvals for all permitted labels for each user even if they
comment|// do not exist in the DB.
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|allUsers
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|cd
operator|.
name|allApprovals
argument_list|(
name|db
argument_list|)
control|)
block|{
name|allUsers
operator|.
name|add
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Account
operator|.
name|Id
name|user
range|:
name|allUsers
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|le
range|:
name|labels
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|existing
operator|.
name|containsEntry
argument_list|(
name|user
argument_list|,
name|le
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|LabelInfo
name|p
init|=
name|le
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|getRange
argument_list|(
name|ctl
argument_list|,
name|user
argument_list|,
name|le
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|p
operator|.
name|addApproval
argument_list|(
name|approvalInfo
argument_list|(
name|user
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|labelsForClosedChange (ChangeData cd, boolean standard, boolean detailed)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labelsForClosedChange
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|boolean
name|standard
parameter_list|,
name|boolean
name|detailed
parameter_list|)
throws|throws
name|OrmException
block|{
comment|// We can only approximately reconstruct what the submit rule evaluator
comment|// would have done. These should really come from a stored submit record.
comment|//
comment|// Don't use Maps.newTreeMap(Comparator) due to OpenJDK bug 100167.
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labels
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
argument_list|(
name|LabelOrdering
operator|.
name|create
argument_list|(
name|approvalTypes
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|cd
operator|.
name|currentApprovals
argument_list|(
name|db
argument_list|)
control|)
block|{
name|ApprovalType
name|type
init|=
name|approvalTypes
operator|.
name|byId
argument_list|(
name|psa
operator|.
name|getCategoryId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|label
init|=
name|type
operator|.
name|getCategory
argument_list|()
operator|.
name|getLabelName
argument_list|()
decl_stmt|;
name|LabelInfo
name|li
init|=
name|labels
operator|.
name|get
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|li
operator|==
literal|null
condition|)
block|{
name|li
operator|=
operator|new
name|LabelInfo
argument_list|()
expr_stmt|;
name|labels
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|li
argument_list|)
expr_stmt|;
if|if
condition|(
name|detailed
condition|)
block|{
name|setLabelValues
argument_list|(
name|type
argument_list|,
name|li
argument_list|)
expr_stmt|;
block|}
block|}
name|short
name|val
init|=
name|psa
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|detailed
condition|)
block|{
name|li
operator|.
name|addApproval
argument_list|(
name|approvalInfo
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|standard
operator|||
name|li
operator|.
name|approved
operator|!=
literal|null
operator|||
name|li
operator|.
name|rejected
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|val
operator|==
name|type
operator|.
name|getMax
argument_list|()
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|li
operator|.
name|approved
operator|=
name|accountInfo
argument_list|(
name|psa
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|==
name|type
operator|.
name|getMin
argument_list|()
operator|.
name|getValue
argument_list|()
comment|// A merged change can't have been rejected.
operator|&&
name|cd
operator|.
name|getChange
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|MERGED
condition|)
block|{
name|li
operator|.
name|rejected
operator|=
name|accountInfo
argument_list|(
name|psa
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|>
literal|0
condition|)
block|{
name|li
operator|.
name|recommended
operator|=
name|accountInfo
argument_list|(
name|psa
argument_list|)
expr_stmt|;
name|li
operator|.
name|value
operator|=
name|val
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|<
literal|0
condition|)
block|{
name|li
operator|.
name|disliked
operator|=
name|accountInfo
argument_list|(
name|psa
argument_list|)
expr_stmt|;
name|li
operator|.
name|value
operator|=
name|val
expr_stmt|;
block|}
block|}
return|return
name|labels
return|;
block|}
DECL|method|getRange (ChangeControl control, Account.Id user, String label)
specifier|private
name|PermissionRange
name|getRange
parameter_list|(
name|ChangeControl
name|control
parameter_list|,
name|Account
operator|.
name|Id
name|user
parameter_list|,
name|String
name|label
parameter_list|)
block|{
return|return
name|control
operator|.
name|forUser
argument_list|(
name|userFactory
operator|.
name|create
argument_list|(
name|user
argument_list|)
argument_list|)
operator|.
name|getRange
argument_list|(
name|Permission
operator|.
name|forLabel
argument_list|(
name|label
argument_list|)
argument_list|)
return|;
block|}
DECL|method|accountInfo (PatchSetApproval psa)
specifier|private
name|AccountInfo
name|accountInfo
parameter_list|(
name|PatchSetApproval
name|psa
parameter_list|)
block|{
return|return
name|accountLoader
operator|.
name|get
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|approvalInfo (Account.Id id, short value)
specifier|private
name|ApprovalInfo
name|approvalInfo
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|,
name|short
name|value
parameter_list|)
block|{
name|ApprovalInfo
name|ai
init|=
operator|new
name|ApprovalInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ai
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|accountLoader
operator|.
name|put
argument_list|(
name|ai
argument_list|)
expr_stmt|;
return|return
name|ai
return|;
block|}
DECL|method|isOnlyZero (Collection<String> values)
specifier|private
specifier|static
name|boolean
name|isOnlyZero
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
return|return
name|values
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|values
operator|.
name|contains
argument_list|(
literal|" 0"
argument_list|)
operator|)
return|;
block|}
DECL|method|setLabelValues (ApprovalType type, LabelInfo label)
specifier|private
name|void
name|setLabelValues
parameter_list|(
name|ApprovalType
name|type
parameter_list|,
name|LabelInfo
name|label
parameter_list|)
block|{
name|label
operator|.
name|values
operator|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|ApprovalCategoryValue
name|acv
range|:
name|type
operator|.
name|getValues
argument_list|()
control|)
block|{
name|label
operator|.
name|values
operator|.
name|put
argument_list|(
name|acv
operator|.
name|formatValue
argument_list|()
argument_list|,
name|acv
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isOnlyZero
argument_list|(
name|label
operator|.
name|values
operator|.
name|keySet
argument_list|()
argument_list|)
condition|)
block|{
name|label
operator|.
name|values
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|permittedLabels (ChangeData cd)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|permittedLabels
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeControl
name|ctl
init|=
name|control
argument_list|(
name|cd
argument_list|)
decl_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|permitted
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|SubmitRecord
name|rec
range|:
name|submitRecords
argument_list|(
name|cd
argument_list|)
control|)
block|{
if|if
condition|(
name|rec
operator|.
name|labels
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|SubmitRecord
operator|.
name|Label
name|r
range|:
name|rec
operator|.
name|labels
control|)
block|{
name|ApprovalType
name|type
init|=
name|approvalTypes
operator|.
name|byLabel
argument_list|(
name|r
operator|.
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
continue|continue;
comment|// TODO: Support arbitrary labels.
block|}
name|PermissionRange
name|range
init|=
name|ctl
operator|.
name|getRange
argument_list|(
name|Permission
operator|.
name|forLabel
argument_list|(
name|r
operator|.
name|label
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ApprovalCategoryValue
name|acv
range|:
name|type
operator|.
name|getValues
argument_list|()
control|)
block|{
if|if
condition|(
name|range
operator|.
name|contains
argument_list|(
name|acv
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|permitted
operator|.
name|put
argument_list|(
name|r
operator|.
name|label
argument_list|,
name|acv
operator|.
name|formatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|toClear
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|permitted
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|permitted
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|isOnlyZero
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|toClear
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|label
range|:
name|toClear
control|)
block|{
name|permitted
operator|.
name|removeAll
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
return|return
name|permitted
operator|.
name|asMap
argument_list|()
return|;
block|}
DECL|method|removableReviewers (ChangeData cd, Collection<LabelInfo> labels)
specifier|private
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|removableReviewers
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|Collection
argument_list|<
name|LabelInfo
argument_list|>
name|labels
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeControl
name|ctl
init|=
name|control
argument_list|(
name|cd
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctl
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|fixed
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|labels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|removable
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|labels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|LabelInfo
name|label
range|:
name|labels
control|)
block|{
if|if
condition|(
name|label
operator|.
name|all
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|ApprovalInfo
name|ai
range|:
name|label
operator|.
name|all
control|)
block|{
if|if
condition|(
name|ctl
operator|.
name|canRemoveReviewer
argument_list|(
name|ai
operator|.
name|_id
argument_list|,
name|ai
operator|.
name|value
argument_list|)
condition|)
block|{
name|removable
operator|.
name|add
argument_list|(
name|ai
operator|.
name|_id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fixed
operator|.
name|add
argument_list|(
name|ai
operator|.
name|_id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|removable
operator|.
name|removeAll
argument_list|(
name|fixed
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|removable
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|removable
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|accountLoader
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|isChangeReviewed (ChangeData cd)
specifier|private
name|boolean
name|isChangeReviewed
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|user
operator|instanceof
name|IdentifiedUser
condition|)
block|{
name|PatchSet
name|currentPatchSet
init|=
name|cd
operator|.
name|currentPatchSet
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentPatchSet
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|messages
init|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|changeMessages
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|currentPatchSet
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
name|messages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Sort messages to let the most recent ones at the beginning.
name|Collections
operator|.
name|sort
argument_list|(
name|messages
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ChangeMessage
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ChangeMessage
name|a
parameter_list|,
name|ChangeMessage
name|b
parameter_list|)
block|{
return|return
name|b
operator|.
name|getWrittenOn
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Account
operator|.
name|Id
name|currentUserId
init|=
operator|(
operator|(
name|IdentifiedUser
operator|)
name|user
operator|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|changeOwnerId
init|=
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
operator|.
name|getOwner
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeMessage
name|cm
range|:
name|messages
control|)
block|{
if|if
condition|(
name|currentUserId
operator|.
name|equals
argument_list|(
name|cm
operator|.
name|getAuthor
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|changeOwnerId
operator|.
name|equals
argument_list|(
name|cm
operator|.
name|getAuthor
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|revisions (ChangeData cd)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RevisionInfo
argument_list|>
name|revisions
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeControl
name|ctl
init|=
name|control
argument_list|(
name|cd
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctl
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|Collection
argument_list|<
name|PatchSet
argument_list|>
name|src
decl_stmt|;
if|if
condition|(
name|cd
operator|.
name|getLimitedPatchSets
argument_list|()
operator|!=
literal|null
operator|||
name|options
operator|.
name|contains
argument_list|(
name|ALL_REVISIONS
argument_list|)
condition|)
block|{
name|src
operator|=
name|cd
operator|.
name|patches
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|src
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|cd
operator|.
name|currentPatchSet
argument_list|(
name|db
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RevisionInfo
argument_list|>
name|res
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSet
name|in
range|:
name|src
control|)
block|{
if|if
condition|(
name|ctl
operator|.
name|isPatchVisible
argument_list|(
name|in
argument_list|,
name|db
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|res
operator|.
name|put
argument_list|(
name|in
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|toRevisionInfo
argument_list|(
name|cd
argument_list|,
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
DECL|method|toRevisionInfo (ChangeData cd, PatchSet in)
specifier|private
name|RevisionInfo
name|toRevisionInfo
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|PatchSet
name|in
parameter_list|)
throws|throws
name|OrmException
block|{
name|RevisionInfo
name|out
init|=
operator|new
name|RevisionInfo
argument_list|()
decl_stmt|;
name|out
operator|.
name|isCurrent
operator|=
name|in
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|_number
operator|=
name|in
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|out
operator|.
name|draft
operator|=
name|in
operator|.
name|isDraft
argument_list|()
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|out
operator|.
name|fetch
operator|=
name|makeFetchMap
argument_list|(
name|cd
argument_list|,
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|ALL_COMMITS
argument_list|)
operator|||
operator|(
name|out
operator|.
name|isCurrent
operator|&&
name|options
operator|.
name|contains
argument_list|(
name|CURRENT_COMMIT
argument_list|)
operator|)
condition|)
block|{
try|try
block|{
name|PatchSetInfo
name|info
init|=
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|in
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|commit
operator|=
operator|new
name|CommitInfo
argument_list|()
expr_stmt|;
name|out
operator|.
name|commit
operator|.
name|parents
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|info
operator|.
name|getParents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|commit
operator|.
name|author
operator|=
name|toGitPerson
argument_list|(
name|info
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|commit
operator|.
name|committer
operator|=
name|toGitPerson
argument_list|(
name|info
operator|.
name|getCommitter
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|commit
operator|.
name|subject
operator|=
name|info
operator|.
name|getSubject
argument_list|()
expr_stmt|;
name|out
operator|.
name|commit
operator|.
name|message
operator|=
name|info
operator|.
name|getMessage
argument_list|()
expr_stmt|;
for|for
control|(
name|ParentInfo
name|parent
range|:
name|info
operator|.
name|getParents
argument_list|()
control|)
block|{
name|CommitInfo
name|i
init|=
operator|new
name|CommitInfo
argument_list|()
decl_stmt|;
name|i
operator|.
name|commit
operator|=
name|parent
operator|.
name|id
operator|.
name|get
argument_list|()
expr_stmt|;
name|i
operator|.
name|subject
operator|=
name|parent
operator|.
name|shortMessage
expr_stmt|;
name|out
operator|.
name|commit
operator|.
name|parents
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PatchSetInfoNotAvailableException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot load PatchSetInfo "
operator|+
name|in
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|ALL_FILES
argument_list|)
operator|||
operator|(
name|out
operator|.
name|isCurrent
operator|&&
name|options
operator|.
name|contains
argument_list|(
name|CURRENT_FILES
argument_list|)
operator|)
condition|)
block|{
name|PatchList
name|list
decl_stmt|;
try|try
block|{
name|list
operator|=
name|patchListCache
operator|.
name|get
argument_list|(
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatchListNotAvailableException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot load PatchList "
operator|+
name|in
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|list
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|files
operator|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
expr_stmt|;
for|for
control|(
name|PatchListEntry
name|e
range|:
name|list
operator|.
name|getPatches
argument_list|()
control|)
block|{
if|if
condition|(
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getNewName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|FileInfo
name|d
init|=
operator|new
name|FileInfo
argument_list|()
decl_stmt|;
name|d
operator|.
name|status
operator|=
name|e
operator|.
name|getChangeType
argument_list|()
operator|!=
name|Patch
operator|.
name|ChangeType
operator|.
name|MODIFIED
condition|?
name|e
operator|.
name|getChangeType
argument_list|()
operator|.
name|getCode
argument_list|()
else|:
literal|null
expr_stmt|;
name|d
operator|.
name|oldPath
operator|=
name|e
operator|.
name|getOldName
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getPatchType
argument_list|()
operator|==
name|Patch
operator|.
name|PatchType
operator|.
name|BINARY
condition|)
block|{
name|d
operator|.
name|binary
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|d
operator|.
name|linesInserted
operator|=
name|e
operator|.
name|getInsertions
argument_list|()
operator|>
literal|0
condition|?
name|e
operator|.
name|getInsertions
argument_list|()
else|:
literal|null
expr_stmt|;
name|d
operator|.
name|linesDeleted
operator|=
name|e
operator|.
name|getDeletions
argument_list|()
operator|>
literal|0
condition|?
name|e
operator|.
name|getDeletions
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
name|FileInfo
name|o
init|=
name|out
operator|.
name|files
operator|.
name|put
argument_list|(
name|e
operator|.
name|getNewName
argument_list|()
argument_list|,
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
comment|// This should only happen on a delete-add break created by JGit
comment|// when the file was rewritten and too little content survived. Write
comment|// a single record with data from both sides.
name|d
operator|.
name|status
operator|=
name|Patch
operator|.
name|ChangeType
operator|.
name|REWRITE
operator|.
name|getCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|o
operator|.
name|binary
operator|!=
literal|null
operator|&&
name|o
operator|.
name|binary
condition|)
block|{
name|d
operator|.
name|binary
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|.
name|linesInserted
operator|!=
literal|null
condition|)
block|{
name|d
operator|.
name|linesInserted
operator|=
name|o
operator|.
name|linesInserted
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|.
name|linesDeleted
operator|!=
literal|null
condition|)
block|{
name|d
operator|.
name|linesDeleted
operator|=
name|o
operator|.
name|linesDeleted
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|out
return|;
block|}
DECL|method|makeFetchMap (ChangeData cd, PatchSet in)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FetchInfo
argument_list|>
name|makeFetchMap
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|PatchSet
name|in
parameter_list|)
throws|throws
name|OrmException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|FetchInfo
argument_list|>
name|r
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
name|String
name|refName
init|=
name|in
operator|.
name|getRefName
argument_list|()
decl_stmt|;
name|ChangeControl
name|ctl
init|=
name|control
argument_list|(
name|cd
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctl
operator|!=
literal|null
operator|&&
name|ctl
operator|.
name|forUser
argument_list|(
name|anonymous
argument_list|)
operator|.
name|isPatchVisible
argument_list|(
name|in
argument_list|,
name|db
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|urls
operator|.
name|git
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|put
argument_list|(
literal|"git"
argument_list|,
operator|new
name|FetchInfo
argument_list|(
name|urls
operator|.
name|git
operator|+
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|refName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|urls
operator|.
name|http
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|put
argument_list|(
literal|"http"
argument_list|,
operator|new
name|FetchInfo
argument_list|(
name|urls
operator|.
name|http
operator|+
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|refName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|http
init|=
name|urlProvider
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|http
argument_list|)
condition|)
block|{
name|r
operator|.
name|put
argument_list|(
literal|"http"
argument_list|,
operator|new
name|FetchInfo
argument_list|(
name|http
operator|+
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|refName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sshInfo
operator|!=
literal|null
operator|&&
operator|!
name|sshInfo
operator|.
name|getHostKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HostKey
name|host
init|=
name|sshInfo
operator|.
name|getHostKeys
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|r
operator|.
name|put
argument_list|(
literal|"ssh"
argument_list|,
operator|new
name|FetchInfo
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"ssh://%s/%s"
argument_list|,
name|host
operator|.
name|getHost
argument_list|()
argument_list|,
name|cd
operator|.
name|change
argument_list|(
name|db
argument_list|)
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|refName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
DECL|method|toGitPerson (UserIdentity committer)
specifier|private
specifier|static
name|GitPerson
name|toGitPerson
parameter_list|(
name|UserIdentity
name|committer
parameter_list|)
block|{
name|GitPerson
name|p
init|=
operator|new
name|GitPerson
argument_list|()
decl_stmt|;
name|p
operator|.
name|name
operator|=
name|committer
operator|.
name|getName
argument_list|()
expr_stmt|;
name|p
operator|.
name|email
operator|=
name|committer
operator|.
name|getEmail
argument_list|()
expr_stmt|;
name|p
operator|.
name|date
operator|=
name|committer
operator|.
name|getDate
argument_list|()
expr_stmt|;
name|p
operator|.
name|tz
operator|=
name|committer
operator|.
name|getTimeZone
argument_list|()
expr_stmt|;
return|return
name|p
return|;
block|}
DECL|class|ChangeInfo
specifier|public
specifier|static
class|class
name|ChangeInfo
block|{
DECL|field|kind
specifier|final
name|String
name|kind
init|=
literal|"gerritcodereview#change"
decl_stmt|;
DECL|field|id
name|String
name|id
decl_stmt|;
DECL|field|project
name|String
name|project
decl_stmt|;
DECL|field|branch
name|String
name|branch
decl_stmt|;
DECL|field|topic
name|String
name|topic
decl_stmt|;
DECL|field|changeId
specifier|public
name|String
name|changeId
decl_stmt|;
DECL|field|subject
specifier|public
name|String
name|subject
decl_stmt|;
DECL|field|status
name|Change
operator|.
name|Status
name|status
decl_stmt|;
DECL|field|created
name|Timestamp
name|created
decl_stmt|;
DECL|field|updated
name|Timestamp
name|updated
decl_stmt|;
DECL|field|starred
name|Boolean
name|starred
decl_stmt|;
DECL|field|reviewed
name|Boolean
name|reviewed
decl_stmt|;
DECL|field|mergeable
name|Boolean
name|mergeable
decl_stmt|;
DECL|field|_sortkey
name|String
name|_sortkey
decl_stmt|;
DECL|field|_number
name|int
name|_number
decl_stmt|;
DECL|field|owner
name|AccountInfo
name|owner
decl_stmt|;
DECL|field|labels
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labels
decl_stmt|;
DECL|field|permitted_labels
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|permitted_labels
decl_stmt|;
DECL|field|removable_reviewers
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|removable_reviewers
decl_stmt|;
DECL|field|current_revision
name|String
name|current_revision
decl_stmt|;
DECL|field|revisions
name|Map
argument_list|<
name|String
argument_list|,
name|RevisionInfo
argument_list|>
name|revisions
decl_stmt|;
DECL|field|_moreChanges
specifier|public
name|Boolean
name|_moreChanges
decl_stmt|;
DECL|method|finish ()
name|void
name|finish
parameter_list|()
block|{
name|id
operator|=
name|Joiner
operator|.
name|on
argument_list|(
literal|'~'
argument_list|)
operator|.
name|join
argument_list|(
name|Url
operator|.
name|encode
argument_list|(
name|project
argument_list|)
argument_list|,
name|Url
operator|.
name|encode
argument_list|(
name|branch
argument_list|)
argument_list|,
name|Url
operator|.
name|encode
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RevisionInfo
specifier|static
class|class
name|RevisionInfo
block|{
DECL|field|isCurrent
specifier|private
specifier|transient
name|boolean
name|isCurrent
decl_stmt|;
DECL|field|draft
name|Boolean
name|draft
decl_stmt|;
DECL|field|_number
name|int
name|_number
decl_stmt|;
DECL|field|fetch
name|Map
argument_list|<
name|String
argument_list|,
name|FetchInfo
argument_list|>
name|fetch
decl_stmt|;
DECL|field|commit
name|CommitInfo
name|commit
decl_stmt|;
DECL|field|files
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|files
decl_stmt|;
block|}
DECL|class|FetchInfo
specifier|static
class|class
name|FetchInfo
block|{
DECL|field|url
name|String
name|url
decl_stmt|;
DECL|field|ref
name|String
name|ref
decl_stmt|;
DECL|method|FetchInfo (String url, String ref)
name|FetchInfo
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|ref
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|ref
operator|=
name|ref
expr_stmt|;
block|}
block|}
DECL|class|GitPerson
specifier|static
class|class
name|GitPerson
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|email
name|String
name|email
decl_stmt|;
DECL|field|date
name|Timestamp
name|date
decl_stmt|;
DECL|field|tz
name|int
name|tz
decl_stmt|;
block|}
DECL|class|CommitInfo
specifier|static
class|class
name|CommitInfo
block|{
DECL|field|commit
name|String
name|commit
decl_stmt|;
DECL|field|parents
name|List
argument_list|<
name|CommitInfo
argument_list|>
name|parents
decl_stmt|;
DECL|field|author
name|GitPerson
name|author
decl_stmt|;
DECL|field|committer
name|GitPerson
name|committer
decl_stmt|;
DECL|field|subject
name|String
name|subject
decl_stmt|;
DECL|field|message
name|String
name|message
decl_stmt|;
block|}
DECL|class|FileInfo
specifier|static
class|class
name|FileInfo
block|{
DECL|field|status
name|Character
name|status
decl_stmt|;
DECL|field|binary
name|Boolean
name|binary
decl_stmt|;
DECL|field|oldPath
name|String
name|oldPath
decl_stmt|;
DECL|field|linesInserted
name|Integer
name|linesInserted
decl_stmt|;
DECL|field|linesDeleted
name|Integer
name|linesDeleted
decl_stmt|;
block|}
DECL|class|LabelInfo
specifier|static
class|class
name|LabelInfo
block|{
DECL|field|_status
specifier|transient
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
name|_status
decl_stmt|;
DECL|field|approved
name|AccountInfo
name|approved
decl_stmt|;
DECL|field|rejected
name|AccountInfo
name|rejected
decl_stmt|;
DECL|field|recommended
name|AccountInfo
name|recommended
decl_stmt|;
DECL|field|disliked
name|AccountInfo
name|disliked
decl_stmt|;
DECL|field|all
name|List
argument_list|<
name|ApprovalInfo
argument_list|>
name|all
decl_stmt|;
DECL|field|values
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
decl_stmt|;
DECL|field|value
name|Short
name|value
decl_stmt|;
DECL|field|optional
name|Boolean
name|optional
decl_stmt|;
DECL|method|addApproval (ApprovalInfo ai)
name|void
name|addApproval
parameter_list|(
name|ApprovalInfo
name|ai
parameter_list|)
block|{
if|if
condition|(
name|all
operator|==
literal|null
condition|)
block|{
name|all
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
name|all
operator|.
name|add
argument_list|(
name|ai
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ApprovalInfo
specifier|static
class|class
name|ApprovalInfo
extends|extends
name|AccountInfo
block|{
DECL|field|value
name|short
name|value
decl_stmt|;
DECL|method|ApprovalInfo (Account.Id id)
name|ApprovalInfo
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

