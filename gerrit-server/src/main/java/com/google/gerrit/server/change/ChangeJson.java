begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ListChangesOption
operator|.
name|ALL_COMMITS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ListChangesOption
operator|.
name|ALL_FILES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ListChangesOption
operator|.
name|ALL_REVISIONS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ListChangesOption
operator|.
name|CURRENT_ACTIONS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ListChangesOption
operator|.
name|CURRENT_COMMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ListChangesOption
operator|.
name|CURRENT_FILES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ListChangesOption
operator|.
name|CURRENT_REVISION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ListChangesOption
operator|.
name|DETAILED_ACCOUNTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ListChangesOption
operator|.
name|DETAILED_LABELS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ListChangesOption
operator|.
name|DOWNLOAD_COMMANDS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ListChangesOption
operator|.
name|DRAFT_COMMENTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ListChangesOption
operator|.
name|LABELS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ListChangesOption
operator|.
name|MESSAGES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ListChangesOption
operator|.
name|REVIEWED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ListChangesOption
operator|.
name|WEB_LINKS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBasedTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedHashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ActionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|FetchInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GitPerson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|RevisionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|WebLinkInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|config
operator|.
name|DownloadCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|config
operator|.
name|DownloadScheme
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Url
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|UiAction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetInfo
operator|.
name|ParentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|UserIdentity
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AnonymousUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|WebLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|webui
operator|.
name|UiActions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|LabelNormalizer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
operator|.
name|ChangedLines
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_class
DECL|class|ChangeJson
specifier|public
class|class
name|ChangeJson
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChangeJson
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NO_MESSAGES
specifier|private
specifier|static
specifier|final
name|ResultSet
argument_list|<
name|ChangeMessage
argument_list|>
name|NO_MESSAGES
init|=
operator|new
name|ResultSet
argument_list|<
name|ChangeMessage
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChangeMessage
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|toList
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|toList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{         }
block|}
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|labelNormalizer
specifier|private
specifier|final
name|LabelNormalizer
name|labelNormalizer
decl_stmt|;
DECL|field|userProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|userProvider
decl_stmt|;
DECL|field|anonymous
specifier|private
specifier|final
name|AnonymousUser
name|anonymous
decl_stmt|;
DECL|field|userFactory
specifier|private
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
DECL|field|changeDataFactory
specifier|private
specifier|final
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
decl_stmt|;
DECL|field|patchSetInfoFactory
specifier|private
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
decl_stmt|;
DECL|field|fileInfoJson
specifier|private
specifier|final
name|FileInfoJson
name|fileInfoJson
decl_stmt|;
DECL|field|accountLoaderFactory
specifier|private
specifier|final
name|AccountInfo
operator|.
name|Loader
operator|.
name|Factory
name|accountLoaderFactory
decl_stmt|;
DECL|field|downloadSchemes
specifier|private
specifier|final
name|DynamicMap
argument_list|<
name|DownloadScheme
argument_list|>
name|downloadSchemes
decl_stmt|;
DECL|field|downloadCommands
specifier|private
specifier|final
name|DynamicMap
argument_list|<
name|DownloadCommand
argument_list|>
name|downloadCommands
decl_stmt|;
DECL|field|changeViews
specifier|private
specifier|final
name|DynamicMap
argument_list|<
name|RestView
argument_list|<
name|ChangeResource
argument_list|>
argument_list|>
name|changeViews
decl_stmt|;
DECL|field|revisions
specifier|private
specifier|final
name|Revisions
name|revisions
decl_stmt|;
DECL|field|webLinks
specifier|private
specifier|final
name|Provider
argument_list|<
name|WebLinks
argument_list|>
name|webLinks
decl_stmt|;
DECL|field|options
specifier|private
specifier|final
name|EnumSet
argument_list|<
name|ListChangesOption
argument_list|>
name|options
decl_stmt|;
DECL|field|accountLoader
specifier|private
name|AccountInfo
operator|.
name|Loader
name|accountLoader
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChangeJson ( Provider<ReviewDb> db, LabelNormalizer ln, Provider<CurrentUser> user, AnonymousUser au, IdentifiedUser.GenericFactory uf, ProjectControl.GenericFactory pcf, ChangeData.Factory cdf, PatchSetInfoFactory psi, FileInfoJson fileInfoJson, AccountInfo.Loader.Factory ailf, DynamicMap<DownloadScheme> downloadSchemes, DynamicMap<DownloadCommand> downloadCommands, DynamicMap<RestView<ChangeResource>> changeViews, Revisions revisions, Provider<WebLinks> webLinks)
name|ChangeJson
parameter_list|(
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|LabelNormalizer
name|ln
parameter_list|,
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|user
parameter_list|,
name|AnonymousUser
name|au
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|uf
parameter_list|,
name|ProjectControl
operator|.
name|GenericFactory
name|pcf
parameter_list|,
name|ChangeData
operator|.
name|Factory
name|cdf
parameter_list|,
name|PatchSetInfoFactory
name|psi
parameter_list|,
name|FileInfoJson
name|fileInfoJson
parameter_list|,
name|AccountInfo
operator|.
name|Loader
operator|.
name|Factory
name|ailf
parameter_list|,
name|DynamicMap
argument_list|<
name|DownloadScheme
argument_list|>
name|downloadSchemes
parameter_list|,
name|DynamicMap
argument_list|<
name|DownloadCommand
argument_list|>
name|downloadCommands
parameter_list|,
name|DynamicMap
argument_list|<
name|RestView
argument_list|<
name|ChangeResource
argument_list|>
argument_list|>
name|changeViews
parameter_list|,
name|Revisions
name|revisions
parameter_list|,
name|Provider
argument_list|<
name|WebLinks
argument_list|>
name|webLinks
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|labelNormalizer
operator|=
name|ln
expr_stmt|;
name|this
operator|.
name|userProvider
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|anonymous
operator|=
name|au
expr_stmt|;
name|this
operator|.
name|userFactory
operator|=
name|uf
expr_stmt|;
name|this
operator|.
name|changeDataFactory
operator|=
name|cdf
expr_stmt|;
name|this
operator|.
name|patchSetInfoFactory
operator|=
name|psi
expr_stmt|;
name|this
operator|.
name|fileInfoJson
operator|=
name|fileInfoJson
expr_stmt|;
name|this
operator|.
name|accountLoaderFactory
operator|=
name|ailf
expr_stmt|;
name|this
operator|.
name|downloadSchemes
operator|=
name|downloadSchemes
expr_stmt|;
name|this
operator|.
name|downloadCommands
operator|=
name|downloadCommands
expr_stmt|;
name|this
operator|.
name|changeViews
operator|=
name|changeViews
expr_stmt|;
name|this
operator|.
name|revisions
operator|=
name|revisions
expr_stmt|;
name|this
operator|.
name|webLinks
operator|=
name|webLinks
expr_stmt|;
name|options
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|ListChangesOption
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|addOption (ListChangesOption o)
specifier|public
name|ChangeJson
name|addOption
parameter_list|(
name|ListChangesOption
name|o
parameter_list|)
block|{
name|options
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addOptions (Collection<ListChangesOption> o)
specifier|public
name|ChangeJson
name|addOptions
parameter_list|(
name|Collection
argument_list|<
name|ListChangesOption
argument_list|>
name|o
parameter_list|)
block|{
name|options
operator|.
name|addAll
argument_list|(
name|o
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|format (ChangeResource rsrc)
specifier|public
name|ChangeInfo
name|format
parameter_list|(
name|ChangeResource
name|rsrc
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|format
argument_list|(
name|changeDataFactory
operator|.
name|create
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getControl
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|format (Change change)
specifier|public
name|ChangeInfo
name|format
parameter_list|(
name|Change
name|change
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|format
argument_list|(
name|changeDataFactory
operator|.
name|create
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|change
argument_list|)
argument_list|)
return|;
block|}
DECL|method|format (Change.Id id)
specifier|public
name|ChangeInfo
name|format
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|format
argument_list|(
name|changeDataFactory
operator|.
name|create
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|id
argument_list|)
argument_list|)
return|;
block|}
DECL|method|format (ChangeData cd)
specifier|public
name|ChangeInfo
name|format
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|format
argument_list|(
name|cd
argument_list|,
name|Optional
operator|.
expr|<
name|PatchSet
operator|.
name|Id
operator|>
name|absent
argument_list|()
argument_list|)
return|;
block|}
DECL|method|format (ChangeData cd, Optional<PatchSet.Id> limitToPsId)
specifier|private
name|ChangeInfo
name|format
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|Optional
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|limitToPsId
parameter_list|)
throws|throws
name|OrmException
block|{
name|accountLoader
operator|=
name|accountLoaderFactory
operator|.
name|create
argument_list|(
name|has
argument_list|(
name|DETAILED_ACCOUNTS
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|reviewed
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|has
argument_list|(
name|REVIEWED
argument_list|)
condition|)
block|{
name|reviewed
operator|=
name|loadReviewed
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|cd
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ChangeInfo
name|res
init|=
name|toChangeInfo
argument_list|(
name|cd
argument_list|,
name|reviewed
argument_list|,
name|limitToPsId
argument_list|)
decl_stmt|;
name|accountLoader
operator|.
name|fill
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
DECL|method|format (RevisionResource rsrc)
specifier|public
name|ChangeInfo
name|format
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeData
name|cd
init|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getControl
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|format
argument_list|(
name|cd
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|rsrc
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|formatList2 (List<List<ChangeData>> in)
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|>
name|formatList2
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|in
parameter_list|)
throws|throws
name|OrmException
block|{
name|accountLoader
operator|=
name|accountLoaderFactory
operator|.
name|create
argument_list|(
name|has
argument_list|(
name|DETAILED_ACCOUNTS
argument_list|)
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|all
init|=
name|Iterables
operator|.
name|concat
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|ChangeData
operator|.
name|ensureChangeLoaded
argument_list|(
name|all
argument_list|)
expr_stmt|;
if|if
condition|(
name|has
argument_list|(
name|ALL_REVISIONS
argument_list|)
condition|)
block|{
name|ChangeData
operator|.
name|ensureAllPatchSetsLoaded
argument_list|(
name|all
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ChangeData
operator|.
name|ensureCurrentPatchSetLoaded
argument_list|(
name|all
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|reviewed
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|has
argument_list|(
name|REVIEWED
argument_list|)
condition|)
block|{
name|reviewed
operator|=
name|loadReviewed
argument_list|(
name|all
argument_list|)
expr_stmt|;
block|}
name|ChangeData
operator|.
name|ensureCurrentApprovalsLoaded
argument_list|(
name|all
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|>
name|res
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|in
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeInfo
argument_list|>
name|out
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changes
range|:
name|in
control|)
block|{
name|res
operator|.
name|add
argument_list|(
name|toChangeInfo
argument_list|(
name|out
argument_list|,
name|changes
argument_list|,
name|reviewed
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|accountLoader
operator|.
name|fill
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
DECL|method|has (ListChangesOption option)
specifier|private
name|boolean
name|has
parameter_list|(
name|ListChangesOption
name|option
parameter_list|)
block|{
return|return
name|options
operator|.
name|contains
argument_list|(
name|option
argument_list|)
return|;
block|}
DECL|method|toChangeInfo (Map<Change.Id, ChangeInfo> out, List<ChangeData> changes, Set<Change.Id> reviewed)
specifier|private
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|toChangeInfo
parameter_list|(
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeInfo
argument_list|>
name|out
parameter_list|,
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|,
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|reviewed
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|info
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|changes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
name|ChangeInfo
name|i
init|=
name|out
operator|.
name|get
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|i
operator|=
name|toChangeInfo
argument_list|(
name|cd
argument_list|,
name|reviewed
argument_list|,
name|Optional
operator|.
expr|<
name|PatchSet
operator|.
name|Id
operator|>
name|absent
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Omitting corrupt change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
operator|+
literal|" from results"
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|out
operator|.
name|put
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
DECL|method|toChangeInfo (ChangeData cd, Set<Change.Id> reviewed, Optional<PatchSet.Id> limitToPsId)
specifier|private
name|ChangeInfo
name|toChangeInfo
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|reviewed
parameter_list|,
name|Optional
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|limitToPsId
parameter_list|)
throws|throws
name|OrmException
block|{
name|ChangeControl
name|ctl
init|=
name|cd
operator|.
name|changeControl
argument_list|()
operator|.
name|forUser
argument_list|(
name|userProvider
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeInfo
name|out
init|=
operator|new
name|ChangeInfo
argument_list|()
decl_stmt|;
name|Change
name|in
init|=
name|cd
operator|.
name|change
argument_list|()
decl_stmt|;
name|out
operator|.
name|project
operator|=
name|in
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|out
operator|.
name|branch
operator|=
name|in
operator|.
name|getDest
argument_list|()
operator|.
name|getShortName
argument_list|()
expr_stmt|;
name|out
operator|.
name|topic
operator|=
name|in
operator|.
name|getTopic
argument_list|()
expr_stmt|;
name|out
operator|.
name|changeId
operator|=
name|in
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|out
operator|.
name|mergeable
operator|=
name|in
operator|.
name|getStatus
argument_list|()
operator|!=
name|Change
operator|.
name|Status
operator|.
name|MERGED
condition|?
name|in
operator|.
name|isMergeable
argument_list|()
else|:
literal|null
expr_stmt|;
name|ChangedLines
name|changedLines
init|=
name|cd
operator|.
name|changedLines
argument_list|()
decl_stmt|;
if|if
condition|(
name|changedLines
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|insertions
operator|=
name|changedLines
operator|.
name|insertions
expr_stmt|;
name|out
operator|.
name|deletions
operator|=
name|changedLines
operator|.
name|deletions
expr_stmt|;
block|}
name|out
operator|.
name|subject
operator|=
name|in
operator|.
name|getSubject
argument_list|()
expr_stmt|;
name|out
operator|.
name|status
operator|=
name|in
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|out
operator|.
name|owner
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|in
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|created
operator|=
name|in
operator|.
name|getCreatedOn
argument_list|()
expr_stmt|;
name|out
operator|.
name|updated
operator|=
name|in
operator|.
name|getLastUpdatedOn
argument_list|()
expr_stmt|;
name|out
operator|.
name|_number
operator|=
name|in
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|out
operator|.
name|_sortkey
operator|=
name|in
operator|.
name|getSortKey
argument_list|()
expr_stmt|;
name|out
operator|.
name|starred
operator|=
name|userProvider
operator|.
name|get
argument_list|()
operator|.
name|getStarredChanges
argument_list|()
operator|.
name|contains
argument_list|(
name|in
operator|.
name|getId
argument_list|()
argument_list|)
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|out
operator|.
name|reviewed
operator|=
name|in
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
operator|&&
name|has
argument_list|(
name|REVIEWED
argument_list|)
operator|&&
name|reviewed
operator|.
name|contains
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|out
operator|.
name|labels
operator|=
name|labelsFor
argument_list|(
name|ctl
argument_list|,
name|cd
argument_list|,
name|has
argument_list|(
name|LABELS
argument_list|)
argument_list|,
name|has
argument_list|(
name|DETAILED_LABELS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|labels
operator|!=
literal|null
operator|&&
name|has
argument_list|(
name|DETAILED_LABELS
argument_list|)
condition|)
block|{
comment|// If limited to specific patch sets but not the current patch set, don't
comment|// list permitted labels, since users can't vote on those patch sets.
if|if
condition|(
operator|!
name|limitToPsId
operator|.
name|isPresent
argument_list|()
operator|||
name|limitToPsId
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|in
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
name|out
operator|.
name|permittedLabels
operator|=
name|permittedLabels
argument_list|(
name|ctl
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|removableReviewers
operator|=
name|removableReviewers
argument_list|(
name|ctl
argument_list|,
name|cd
argument_list|,
name|out
operator|.
name|labels
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|src
init|=
name|loadPatchSets
argument_list|(
name|cd
argument_list|,
name|limitToPsId
argument_list|)
decl_stmt|;
if|if
condition|(
name|has
argument_list|(
name|MESSAGES
argument_list|)
condition|)
block|{
name|out
operator|.
name|messages
operator|=
name|messages
argument_list|(
name|ctl
argument_list|,
name|cd
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|finish
argument_list|()
expr_stmt|;
if|if
condition|(
name|has
argument_list|(
name|ALL_REVISIONS
argument_list|)
operator|||
name|has
argument_list|(
name|CURRENT_REVISION
argument_list|)
operator|||
name|limitToPsId
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|out
operator|.
name|revisions
operator|=
name|revisions
argument_list|(
name|ctl
argument_list|,
name|cd
argument_list|,
name|limitToPsId
argument_list|,
name|out
operator|.
name|project
argument_list|,
name|src
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|revisions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RevisionInfo
argument_list|>
name|entry
range|:
name|out
operator|.
name|revisions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isCurrent
condition|)
block|{
name|out
operator|.
name|currentRevision
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|has
argument_list|(
name|CURRENT_ACTIONS
argument_list|)
operator|&&
name|userProvider
operator|.
name|get
argument_list|()
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
name|out
operator|.
name|actions
operator|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
expr_stmt|;
for|for
control|(
name|UiAction
operator|.
name|Description
name|d
range|:
name|UiActions
operator|.
name|from
argument_list|(
name|changeViews
argument_list|,
operator|new
name|ChangeResource
argument_list|(
name|ctl
argument_list|)
argument_list|,
name|userProvider
argument_list|)
control|)
block|{
name|out
operator|.
name|actions
operator|.
name|put
argument_list|(
name|d
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|ActionInfo
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|out
return|;
block|}
DECL|method|submitRecords (ChangeControl ctl, ChangeData cd)
specifier|private
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|submitRecords
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|cd
operator|.
name|getSubmitRecords
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|cd
operator|.
name|getSubmitRecords
argument_list|()
return|;
block|}
if|if
condition|(
name|ctl
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|PatchSet
name|ps
init|=
name|cd
operator|.
name|currentPatchSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|cd
operator|.
name|setSubmitRecords
argument_list|(
name|ctl
operator|.
name|canSubmit
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|ps
argument_list|,
name|cd
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cd
operator|.
name|getSubmitRecords
argument_list|()
return|;
block|}
DECL|method|labelsFor (ChangeControl ctl, ChangeData cd, boolean standard, boolean detailed)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labelsFor
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|,
name|ChangeData
name|cd
parameter_list|,
name|boolean
name|standard
parameter_list|,
name|boolean
name|detailed
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
operator|!
name|standard
operator|&&
operator|!
name|detailed
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|ctl
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LabelTypes
name|labelTypes
init|=
name|ctl
operator|.
name|getLabelTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
return|return
name|labelsForOpenChange
argument_list|(
name|ctl
argument_list|,
name|cd
argument_list|,
name|labelTypes
argument_list|,
name|standard
argument_list|,
name|detailed
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|labelsForClosedChange
argument_list|(
name|cd
argument_list|,
name|labelTypes
argument_list|,
name|standard
argument_list|,
name|detailed
argument_list|)
return|;
block|}
block|}
DECL|method|labelsForOpenChange (ChangeControl ctl, ChangeData cd, LabelTypes labelTypes, boolean standard, boolean detailed)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labelsForOpenChange
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|,
name|ChangeData
name|cd
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|boolean
name|standard
parameter_list|,
name|boolean
name|detailed
parameter_list|)
throws|throws
name|OrmException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labels
init|=
name|initLabels
argument_list|(
name|ctl
argument_list|,
name|cd
argument_list|,
name|labelTypes
argument_list|,
name|standard
argument_list|)
decl_stmt|;
if|if
condition|(
name|detailed
condition|)
block|{
name|setAllApprovals
argument_list|(
name|ctl
argument_list|,
name|cd
argument_list|,
name|labels
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|e
range|:
name|labels
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LabelType
name|type
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|standard
condition|)
block|{
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|cd
operator|.
name|currentApprovals
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|matches
argument_list|(
name|psa
argument_list|)
condition|)
block|{
name|short
name|val
init|=
name|psa
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|psa
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|setLabelScores
argument_list|(
name|type
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|val
argument_list|,
name|accountId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|detailed
condition|)
block|{
name|setLabelValues
argument_list|(
name|type
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|labels
return|;
block|}
DECL|method|initLabels (ChangeControl ctl, ChangeData cd, LabelTypes labelTypes, boolean standard)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|initLabels
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|,
name|ChangeData
name|cd
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|boolean
name|standard
parameter_list|)
throws|throws
name|OrmException
block|{
comment|// Don't use Maps.newTreeMap(Comparator) due to OpenJDK bug 100167.
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labels
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|labelTypes
operator|.
name|nameComparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SubmitRecord
name|rec
range|:
name|submitRecords
argument_list|(
name|ctl
argument_list|,
name|cd
argument_list|)
control|)
block|{
if|if
condition|(
name|rec
operator|.
name|labels
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|SubmitRecord
operator|.
name|Label
name|r
range|:
name|rec
operator|.
name|labels
control|)
block|{
name|LabelInfo
name|p
init|=
name|labels
operator|.
name|get
argument_list|(
name|r
operator|.
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
operator|.
name|_status
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|status
argument_list|)
operator|<
literal|0
condition|)
block|{
name|LabelInfo
name|n
init|=
operator|new
name|LabelInfo
argument_list|()
decl_stmt|;
name|n
operator|.
name|_status
operator|=
name|r
operator|.
name|status
expr_stmt|;
if|if
condition|(
name|standard
condition|)
block|{
switch|switch
condition|(
name|r
operator|.
name|status
condition|)
block|{
case|case
name|OK
case|:
name|n
operator|.
name|approved
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|r
operator|.
name|appliedBy
argument_list|)
expr_stmt|;
break|break;
case|case
name|REJECT
case|:
name|n
operator|.
name|rejected
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|r
operator|.
name|appliedBy
argument_list|)
expr_stmt|;
name|n
operator|.
name|blocking
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
name|n
operator|.
name|optional
operator|=
name|n
operator|.
name|_status
operator|==
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
operator|.
name|MAY
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|labels
operator|.
name|put
argument_list|(
name|r
operator|.
name|label
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|labels
return|;
block|}
DECL|method|setLabelScores (LabelType type, LabelInfo label, short score, Account.Id accountId)
specifier|private
name|void
name|setLabelScores
parameter_list|(
name|LabelType
name|type
parameter_list|,
name|LabelInfo
name|label
parameter_list|,
name|short
name|score
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|label
operator|.
name|approved
operator|!=
literal|null
operator|||
name|label
operator|.
name|rejected
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|type
operator|.
name|getMin
argument_list|()
operator|==
literal|null
operator|||
name|type
operator|.
name|getMax
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Can't set score for unknown or misconfigured type.
return|return;
block|}
if|if
condition|(
name|score
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|score
operator|==
name|type
operator|.
name|getMin
argument_list|()
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|label
operator|.
name|rejected
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|score
operator|==
name|type
operator|.
name|getMax
argument_list|()
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|label
operator|.
name|approved
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|score
operator|<
literal|0
condition|)
block|{
name|label
operator|.
name|disliked
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|label
operator|.
name|value
operator|=
name|score
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|score
operator|>
literal|0
operator|&&
name|label
operator|.
name|disliked
operator|==
literal|null
condition|)
block|{
name|label
operator|.
name|recommended
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|label
operator|.
name|value
operator|=
name|score
expr_stmt|;
block|}
block|}
block|}
DECL|method|setAllApprovals (ChangeControl baseCtrl, ChangeData cd, Map<String, LabelInfo> labels)
specifier|private
name|void
name|setAllApprovals
parameter_list|(
name|ChangeControl
name|baseCtrl
parameter_list|,
name|ChangeData
name|cd
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labels
parameter_list|)
throws|throws
name|OrmException
block|{
comment|// Include a user in the output for this label if either:
comment|//  - They are an explicit reviewer.
comment|//  - They ever voted on this change.
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|allUsers
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|allUsers
operator|.
name|addAll
argument_list|(
name|cd
operator|.
name|reviewers
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|cd
operator|.
name|approvals
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|allUsers
operator|.
name|add
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Table
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|String
argument_list|,
name|PatchSetApproval
argument_list|>
name|current
init|=
name|HashBasedTable
operator|.
name|create
argument_list|(
name|allUsers
operator|.
name|size
argument_list|()
argument_list|,
name|baseCtrl
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|cd
operator|.
name|currentApprovals
argument_list|()
control|)
block|{
name|current
operator|.
name|put
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|,
name|psa
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Account
operator|.
name|Id
name|accountId
range|:
name|allUsers
control|)
block|{
name|IdentifiedUser
name|user
init|=
name|userFactory
operator|.
name|create
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
name|ChangeControl
name|ctl
init|=
name|baseCtrl
operator|.
name|forUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|e
range|:
name|labels
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LabelType
name|lt
init|=
name|ctl
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|byLabel
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lt
operator|==
literal|null
condition|)
block|{
comment|// Ignore submit record for undefined label; likely the submit rule
comment|// author didn't intend for the label to show up in the table.
continue|continue;
block|}
name|Integer
name|value
decl_stmt|;
name|Timestamp
name|date
init|=
literal|null
decl_stmt|;
name|PatchSetApproval
name|psa
init|=
name|current
operator|.
name|get
argument_list|(
name|accountId
argument_list|,
name|lt
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|psa
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|psa
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|date
operator|=
name|psa
operator|.
name|getGranted
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Either the user cannot vote on this label, or they were added as a
comment|// reviewer but have not responded yet. Explicitly check whether the
comment|// user can vote on this label.
name|value
operator|=
name|labelNormalizer
operator|.
name|canVote
argument_list|(
name|ctl
argument_list|,
name|lt
argument_list|,
name|accountId
argument_list|)
condition|?
literal|0
else|:
literal|null
expr_stmt|;
block|}
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|addApproval
argument_list|(
name|approvalInfo
argument_list|(
name|accountId
argument_list|,
name|value
argument_list|,
name|date
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|labelsForClosedChange (ChangeData cd, LabelTypes labelTypes, boolean standard, boolean detailed)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labelsForClosedChange
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|boolean
name|standard
parameter_list|,
name|boolean
name|detailed
parameter_list|)
throws|throws
name|OrmException
block|{
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|allUsers
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|cd
operator|.
name|approvals
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|allUsers
operator|.
name|add
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// We can only approximately reconstruct what the submit rule evaluator
comment|// would have done. These should really come from a stored submit record.
name|Set
argument_list|<
name|String
argument_list|>
name|labelNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|current
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|cd
operator|.
name|currentApprovals
argument_list|()
control|)
block|{
name|LabelType
name|type
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|a
operator|.
name|getLabelId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|labelNames
operator|.
name|add
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Not worth the effort to distinguish between votable/non-votable for 0
comment|// values on closed changes, since they can't vote anyway.
name|current
operator|.
name|put
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Don't use Maps.newTreeMap(Comparator) due to OpenJDK bug 100167.
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labels
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|labelTypes
operator|.
name|nameComparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|labelNames
control|)
block|{
name|LabelType
name|type
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|LabelInfo
name|li
init|=
operator|new
name|LabelInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|detailed
condition|)
block|{
name|setLabelValues
argument_list|(
name|type
argument_list|,
name|li
argument_list|)
expr_stmt|;
block|}
name|labels
operator|.
name|put
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|li
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Account
operator|.
name|Id
name|accountId
range|:
name|allUsers
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ApprovalInfo
argument_list|>
name|byLabel
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|labels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|detailed
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|entry
range|:
name|labels
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ApprovalInfo
name|ai
init|=
name|approvalInfo
argument_list|(
name|accountId
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|byLabel
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|ai
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|addApproval
argument_list|(
name|ai
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|current
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
control|)
block|{
name|LabelType
name|type
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|psa
operator|.
name|getLabelId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|short
name|val
init|=
name|psa
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ApprovalInfo
name|info
init|=
name|byLabel
operator|.
name|get
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|value
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|info
operator|.
name|date
operator|=
name|psa
operator|.
name|getGranted
argument_list|()
expr_stmt|;
block|}
name|LabelInfo
name|li
init|=
name|labels
operator|.
name|get
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|standard
condition|)
block|{
continue|continue;
block|}
name|setLabelScores
argument_list|(
name|type
argument_list|,
name|li
argument_list|,
name|val
argument_list|,
name|accountId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|labels
return|;
block|}
DECL|method|approvalInfo (Account.Id id, Integer value, Timestamp date)
specifier|private
name|ApprovalInfo
name|approvalInfo
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|,
name|Integer
name|value
parameter_list|,
name|Timestamp
name|date
parameter_list|)
block|{
name|ApprovalInfo
name|ai
init|=
operator|new
name|ApprovalInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ai
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|ai
operator|.
name|date
operator|=
name|date
expr_stmt|;
name|accountLoader
operator|.
name|put
argument_list|(
name|ai
argument_list|)
expr_stmt|;
return|return
name|ai
return|;
block|}
DECL|method|isOnlyZero (Collection<String> values)
specifier|private
specifier|static
name|boolean
name|isOnlyZero
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
return|return
name|values
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|values
operator|.
name|contains
argument_list|(
literal|" 0"
argument_list|)
operator|)
return|;
block|}
DECL|method|setLabelValues (LabelType type, LabelInfo label)
specifier|private
name|void
name|setLabelValues
parameter_list|(
name|LabelType
name|type
parameter_list|,
name|LabelInfo
name|label
parameter_list|)
block|{
name|label
operator|.
name|defaultValue
operator|=
name|type
operator|.
name|getDefaultValue
argument_list|()
expr_stmt|;
name|label
operator|.
name|values
operator|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|LabelValue
name|v
range|:
name|type
operator|.
name|getValues
argument_list|()
control|)
block|{
name|label
operator|.
name|values
operator|.
name|put
argument_list|(
name|v
operator|.
name|formatValue
argument_list|()
argument_list|,
name|v
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isOnlyZero
argument_list|(
name|label
operator|.
name|values
operator|.
name|keySet
argument_list|()
argument_list|)
condition|)
block|{
name|label
operator|.
name|values
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|permittedLabels (ChangeControl ctl, ChangeData cd)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|permittedLabels
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|ctl
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LabelTypes
name|labelTypes
init|=
name|ctl
operator|.
name|getLabelTypes
argument_list|()
decl_stmt|;
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|permitted
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|SubmitRecord
name|rec
range|:
name|submitRecords
argument_list|(
name|ctl
argument_list|,
name|cd
argument_list|)
control|)
block|{
if|if
condition|(
name|rec
operator|.
name|labels
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|SubmitRecord
operator|.
name|Label
name|r
range|:
name|rec
operator|.
name|labels
control|)
block|{
name|LabelType
name|type
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|r
operator|.
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|PermissionRange
name|range
init|=
name|ctl
operator|.
name|getRange
argument_list|(
name|Permission
operator|.
name|forLabel
argument_list|(
name|r
operator|.
name|label
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|LabelValue
name|v
range|:
name|type
operator|.
name|getValues
argument_list|()
control|)
block|{
if|if
condition|(
name|range
operator|.
name|contains
argument_list|(
name|v
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|permitted
operator|.
name|put
argument_list|(
name|r
operator|.
name|label
argument_list|,
name|v
operator|.
name|formatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|toClear
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|permitted
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|permitted
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|isOnlyZero
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|toClear
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|label
range|:
name|toClear
control|)
block|{
name|permitted
operator|.
name|removeAll
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
return|return
name|permitted
operator|.
name|asMap
argument_list|()
return|;
block|}
DECL|method|messages (ChangeControl ctl, ChangeData cd, Map<PatchSet.Id, PatchSet> map)
specifier|private
name|Collection
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|messages
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|,
name|ChangeData
name|cd
parameter_list|,
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|map
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|messages
init|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|changeMessages
argument_list|()
operator|.
name|byChange
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
name|messages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|// chronological order
name|Collections
operator|.
name|sort
argument_list|(
name|messages
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ChangeMessage
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ChangeMessage
name|a
parameter_list|,
name|ChangeMessage
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|getWrittenOn
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|messages
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeMessage
name|message
range|:
name|messages
control|)
block|{
name|PatchSet
operator|.
name|Id
name|patchNum
init|=
name|message
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|PatchSet
name|ps
init|=
name|patchNum
operator|!=
literal|null
condition|?
name|map
operator|.
name|get
argument_list|(
name|patchNum
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|patchNum
operator|==
literal|null
operator|||
name|ctl
operator|.
name|isPatchVisible
argument_list|(
name|ps
argument_list|,
name|db
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|ChangeMessageInfo
name|cmi
init|=
operator|new
name|ChangeMessageInfo
argument_list|()
decl_stmt|;
name|cmi
operator|.
name|id
operator|=
name|message
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|cmi
operator|.
name|author
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|message
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
name|cmi
operator|.
name|date
operator|=
name|message
operator|.
name|getWrittenOn
argument_list|()
expr_stmt|;
name|cmi
operator|.
name|message
operator|=
name|message
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|cmi
operator|.
name|_revisionNumber
operator|=
name|patchNum
operator|!=
literal|null
condition|?
name|patchNum
operator|.
name|get
argument_list|()
else|:
literal|null
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|cmi
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|removableReviewers (ChangeControl ctl, ChangeData cd, Collection<LabelInfo> labels)
specifier|private
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|removableReviewers
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|,
name|ChangeData
name|cd
parameter_list|,
name|Collection
argument_list|<
name|LabelInfo
argument_list|>
name|labels
parameter_list|)
throws|throws
name|OrmException
block|{
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|fixed
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|labels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|removable
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|labels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|LabelInfo
name|label
range|:
name|labels
control|)
block|{
if|if
condition|(
name|label
operator|.
name|all
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|ApprovalInfo
name|ai
range|:
name|label
operator|.
name|all
control|)
block|{
if|if
condition|(
name|ctl
operator|.
name|canRemoveReviewer
argument_list|(
name|ai
operator|.
name|_id
argument_list|,
name|Objects
operator|.
name|firstNonNull
argument_list|(
name|ai
operator|.
name|value
argument_list|,
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|removable
operator|.
name|add
argument_list|(
name|ai
operator|.
name|_id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fixed
operator|.
name|add
argument_list|(
name|ai
operator|.
name|_id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|removable
operator|.
name|removeAll
argument_list|(
name|fixed
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|removable
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|removable
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|accountLoader
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|loadReviewed (Iterable<ChangeData> all)
specifier|private
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|loadReviewed
parameter_list|(
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|all
parameter_list|)
throws|throws
name|OrmException
block|{
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|reviewed
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|userProvider
operator|.
name|get
argument_list|()
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
name|Account
operator|.
name|Id
name|self
init|=
operator|(
operator|(
name|IdentifiedUser
operator|)
name|userProvider
operator|.
name|get
argument_list|()
operator|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|batch
range|:
name|Iterables
operator|.
name|partition
argument_list|(
name|all
argument_list|,
literal|50
argument_list|)
control|)
block|{
name|List
argument_list|<
name|ResultSet
argument_list|<
name|ChangeMessage
argument_list|>
argument_list|>
name|m
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|batch
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|batch
control|)
block|{
name|PatchSet
operator|.
name|Id
name|ps
init|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
operator|&&
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|m
operator|.
name|add
argument_list|(
name|db
operator|.
name|get
argument_list|()
operator|.
name|changeMessages
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|add
argument_list|(
name|NO_MESSAGES
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isChangeReviewed
argument_list|(
name|self
argument_list|,
name|batch
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|)
condition|)
block|{
name|reviewed
operator|.
name|add
argument_list|(
name|batch
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|reviewed
return|;
block|}
DECL|method|isChangeReviewed (Account.Id self, ChangeData cd, List<ChangeMessage> msgs)
specifier|private
name|boolean
name|isChangeReviewed
parameter_list|(
name|Account
operator|.
name|Id
name|self
parameter_list|,
name|ChangeData
name|cd
parameter_list|,
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|msgs
parameter_list|)
throws|throws
name|OrmException
block|{
comment|// Sort messages to keep the most recent ones at the beginning.
name|Collections
operator|.
name|sort
argument_list|(
name|msgs
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ChangeMessage
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ChangeMessage
name|a
parameter_list|,
name|ChangeMessage
name|b
parameter_list|)
block|{
return|return
name|b
operator|.
name|getWrittenOn
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Account
operator|.
name|Id
name|changeOwnerId
init|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getOwner
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeMessage
name|cm
range|:
name|msgs
control|)
block|{
if|if
condition|(
name|self
operator|.
name|equals
argument_list|(
name|cm
operator|.
name|getAuthor
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|changeOwnerId
operator|.
name|equals
argument_list|(
name|cm
operator|.
name|getAuthor
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|revisions (ChangeControl ctl, ChangeData cd, Optional<PatchSet.Id> limitToPsId, String project, Map<PatchSet.Id, PatchSet> map)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RevisionInfo
argument_list|>
name|revisions
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|,
name|ChangeData
name|cd
parameter_list|,
name|Optional
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|limitToPsId
parameter_list|,
name|String
name|project
parameter_list|,
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|map
parameter_list|)
throws|throws
name|OrmException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RevisionInfo
argument_list|>
name|res
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSet
name|in
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|has
argument_list|(
name|ALL_REVISIONS
argument_list|)
operator|||
name|in
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|)
operator|&&
name|ctl
operator|.
name|isPatchVisible
argument_list|(
name|in
argument_list|,
name|db
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|res
operator|.
name|put
argument_list|(
name|in
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|toRevisionInfo
argument_list|(
name|ctl
argument_list|,
name|cd
argument_list|,
name|in
argument_list|,
name|project
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
DECL|method|loadPatchSets (ChangeData cd, Optional<PatchSet.Id> limitToPsId)
specifier|private
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|loadPatchSets
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|Optional
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|limitToPsId
parameter_list|)
throws|throws
name|OrmException
block|{
name|Collection
argument_list|<
name|PatchSet
argument_list|>
name|src
decl_stmt|;
if|if
condition|(
name|has
argument_list|(
name|ALL_REVISIONS
argument_list|)
operator|||
name|has
argument_list|(
name|MESSAGES
argument_list|)
condition|)
block|{
name|src
operator|=
name|cd
operator|.
name|patches
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|PatchSet
name|ps
decl_stmt|;
if|if
condition|(
name|limitToPsId
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|ps
operator|=
name|cd
operator|.
name|patch
argument_list|(
name|limitToPsId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"missing patch set "
operator|+
name|limitToPsId
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|ps
operator|=
name|cd
operator|.
name|currentPatchSet
argument_list|()
expr_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"missing current patch set for change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|src
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|src
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSet
name|patchSet
range|:
name|src
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|patchSet
operator|.
name|getId
argument_list|()
argument_list|,
name|patchSet
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|toRevisionInfo (ChangeControl ctl, ChangeData cd, PatchSet in, String project)
specifier|private
name|RevisionInfo
name|toRevisionInfo
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|,
name|ChangeData
name|cd
parameter_list|,
name|PatchSet
name|in
parameter_list|,
name|String
name|project
parameter_list|)
throws|throws
name|OrmException
block|{
name|RevisionInfo
name|out
init|=
operator|new
name|RevisionInfo
argument_list|()
decl_stmt|;
name|out
operator|.
name|isCurrent
operator|=
name|in
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|_number
operator|=
name|in
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|out
operator|.
name|draft
operator|=
name|in
operator|.
name|isDraft
argument_list|()
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|out
operator|.
name|fetch
operator|=
name|makeFetchMap
argument_list|(
name|ctl
argument_list|,
name|cd
argument_list|,
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|has
argument_list|(
name|ALL_COMMITS
argument_list|)
operator|||
operator|(
name|out
operator|.
name|isCurrent
operator|&&
name|has
argument_list|(
name|CURRENT_COMMIT
argument_list|)
operator|)
condition|)
block|{
try|try
block|{
name|out
operator|.
name|commit
operator|=
name|toCommit
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatchSetInfoNotAvailableException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot load PatchSetInfo "
operator|+
name|in
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|has
argument_list|(
name|ALL_FILES
argument_list|)
operator|||
operator|(
name|out
operator|.
name|isCurrent
operator|&&
name|has
argument_list|(
name|CURRENT_FILES
argument_list|)
operator|)
condition|)
block|{
try|try
block|{
name|out
operator|.
name|files
operator|=
name|fileInfoJson
operator|.
name|toFileInfoMap
argument_list|(
name|cd
operator|.
name|change
argument_list|()
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|out
operator|.
name|files
operator|.
name|remove
argument_list|(
name|Patch
operator|.
name|COMMIT_MSG
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatchListNotAvailableException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot load PatchList "
operator|+
name|in
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|out
operator|.
name|isCurrent
operator|||
operator|(
name|out
operator|.
name|draft
operator|!=
literal|null
operator|&&
name|out
operator|.
name|draft
operator|)
operator|)
operator|&&
name|has
argument_list|(
name|CURRENT_ACTIONS
argument_list|)
operator|&&
name|userProvider
operator|.
name|get
argument_list|()
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
name|out
operator|.
name|actions
operator|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
expr_stmt|;
for|for
control|(
name|UiAction
operator|.
name|Description
name|d
range|:
name|UiActions
operator|.
name|from
argument_list|(
name|revisions
argument_list|,
operator|new
name|RevisionResource
argument_list|(
operator|new
name|ChangeResource
argument_list|(
name|ctl
argument_list|)
argument_list|,
name|in
argument_list|)
argument_list|,
name|userProvider
argument_list|)
control|)
block|{
name|out
operator|.
name|actions
operator|.
name|put
argument_list|(
name|d
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|ActionInfo
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|has
argument_list|(
name|DRAFT_COMMENTS
argument_list|)
operator|&&
name|userProvider
operator|.
name|get
argument_list|()
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
name|IdentifiedUser
name|user
init|=
operator|(
name|IdentifiedUser
operator|)
name|userProvider
operator|.
name|get
argument_list|()
decl_stmt|;
name|out
operator|.
name|hasDraftComments
operator|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|patchComments
argument_list|()
operator|.
name|draftByPatchSetAuthor
argument_list|(
name|in
operator|.
name|getId
argument_list|()
argument_list|,
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|?
literal|true
else|:
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|has
argument_list|(
name|WEB_LINKS
argument_list|)
condition|)
block|{
name|out
operator|.
name|webLinks
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|WebLinks
operator|.
name|Link
name|link
range|:
name|webLinks
operator|.
name|get
argument_list|()
operator|.
name|getPatchSetLinks
argument_list|(
name|project
argument_list|,
name|in
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
control|)
block|{
name|out
operator|.
name|webLinks
operator|.
name|add
argument_list|(
operator|new
name|WebLinkInfo
argument_list|(
name|link
operator|.
name|name
argument_list|,
name|link
operator|.
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|out
return|;
block|}
DECL|method|toCommit (PatchSet in)
name|CommitInfo
name|toCommit
parameter_list|(
name|PatchSet
name|in
parameter_list|)
throws|throws
name|PatchSetInfoNotAvailableException
block|{
name|PatchSetInfo
name|info
init|=
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|in
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|CommitInfo
name|commit
init|=
operator|new
name|CommitInfo
argument_list|()
decl_stmt|;
name|commit
operator|.
name|parents
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|info
operator|.
name|getParents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commit
operator|.
name|author
operator|=
name|toGitPerson
argument_list|(
name|info
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
name|commit
operator|.
name|committer
operator|=
name|toGitPerson
argument_list|(
name|info
operator|.
name|getCommitter
argument_list|()
argument_list|)
expr_stmt|;
name|commit
operator|.
name|subject
operator|=
name|info
operator|.
name|getSubject
argument_list|()
expr_stmt|;
name|commit
operator|.
name|message
operator|=
name|info
operator|.
name|getMessage
argument_list|()
expr_stmt|;
for|for
control|(
name|ParentInfo
name|parent
range|:
name|info
operator|.
name|getParents
argument_list|()
control|)
block|{
name|CommitInfo
name|i
init|=
operator|new
name|CommitInfo
argument_list|()
decl_stmt|;
name|i
operator|.
name|commit
operator|=
name|parent
operator|.
name|id
operator|.
name|get
argument_list|()
expr_stmt|;
name|i
operator|.
name|subject
operator|=
name|parent
operator|.
name|shortMessage
expr_stmt|;
name|commit
operator|.
name|parents
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|commit
return|;
block|}
DECL|method|makeFetchMap (ChangeControl ctl, ChangeData cd, PatchSet in)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FetchInfo
argument_list|>
name|makeFetchMap
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|,
name|ChangeData
name|cd
parameter_list|,
name|PatchSet
name|in
parameter_list|)
throws|throws
name|OrmException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|FetchInfo
argument_list|>
name|r
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|DynamicMap
operator|.
name|Entry
argument_list|<
name|DownloadScheme
argument_list|>
name|e
range|:
name|downloadSchemes
control|)
block|{
name|String
name|schemeName
init|=
name|e
operator|.
name|getExportName
argument_list|()
decl_stmt|;
name|DownloadScheme
name|scheme
init|=
name|e
operator|.
name|getProvider
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|scheme
operator|.
name|isEnabled
argument_list|()
operator|||
operator|(
name|scheme
operator|.
name|isAuthRequired
argument_list|()
operator|&&
operator|!
name|userProvider
operator|.
name|get
argument_list|()
operator|.
name|isIdentifiedUser
argument_list|()
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|scheme
operator|.
name|isAuthSupported
argument_list|()
operator|&&
operator|!
name|ctl
operator|.
name|forUser
argument_list|(
name|anonymous
argument_list|)
operator|.
name|isPatchVisible
argument_list|(
name|in
argument_list|,
name|db
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|projectName
init|=
name|ctl
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|url
init|=
name|scheme
operator|.
name|getUrl
argument_list|(
name|projectName
argument_list|)
decl_stmt|;
name|String
name|refName
init|=
name|in
operator|.
name|getRefName
argument_list|()
decl_stmt|;
name|FetchInfo
name|fetchInfo
init|=
operator|new
name|FetchInfo
argument_list|(
name|url
argument_list|,
name|refName
argument_list|)
decl_stmt|;
name|r
operator|.
name|put
argument_list|(
name|schemeName
argument_list|,
name|fetchInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|has
argument_list|(
name|DOWNLOAD_COMMANDS
argument_list|)
condition|)
block|{
for|for
control|(
name|DynamicMap
operator|.
name|Entry
argument_list|<
name|DownloadCommand
argument_list|>
name|e2
range|:
name|downloadCommands
control|)
block|{
name|String
name|commandName
init|=
name|e2
operator|.
name|getExportName
argument_list|()
decl_stmt|;
name|DownloadCommand
name|command
init|=
name|e2
operator|.
name|getProvider
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|c
init|=
name|command
operator|.
name|getCommand
argument_list|(
name|scheme
argument_list|,
name|projectName
argument_list|,
name|refName
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|addCommand
argument_list|(
name|fetchInfo
argument_list|,
name|commandName
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|r
return|;
block|}
DECL|method|addCommand (FetchInfo fetchInfo, String commandName, String c)
specifier|private
name|void
name|addCommand
parameter_list|(
name|FetchInfo
name|fetchInfo
parameter_list|,
name|String
name|commandName
parameter_list|,
name|String
name|c
parameter_list|)
block|{
if|if
condition|(
name|fetchInfo
operator|.
name|commands
operator|==
literal|null
condition|)
block|{
name|fetchInfo
operator|.
name|commands
operator|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
expr_stmt|;
block|}
name|fetchInfo
operator|.
name|commands
operator|.
name|put
argument_list|(
name|commandName
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|toGitPerson (UserIdentity committer)
specifier|private
specifier|static
name|GitPerson
name|toGitPerson
parameter_list|(
name|UserIdentity
name|committer
parameter_list|)
block|{
name|GitPerson
name|p
init|=
operator|new
name|GitPerson
argument_list|()
decl_stmt|;
name|p
operator|.
name|name
operator|=
name|committer
operator|.
name|getName
argument_list|()
expr_stmt|;
name|p
operator|.
name|email
operator|=
name|committer
operator|.
name|getEmail
argument_list|()
expr_stmt|;
name|p
operator|.
name|date
operator|=
name|committer
operator|.
name|getDate
argument_list|()
expr_stmt|;
name|p
operator|.
name|tz
operator|=
name|committer
operator|.
name|getTimeZone
argument_list|()
expr_stmt|;
return|return
name|p
return|;
block|}
DECL|class|ChangeInfo
specifier|public
specifier|static
class|class
name|ChangeInfo
block|{
DECL|field|id
specifier|public
name|String
name|id
decl_stmt|;
DECL|field|project
specifier|public
name|String
name|project
decl_stmt|;
DECL|field|branch
specifier|public
name|String
name|branch
decl_stmt|;
DECL|field|topic
specifier|public
name|String
name|topic
decl_stmt|;
DECL|field|changeId
specifier|public
name|String
name|changeId
decl_stmt|;
DECL|field|subject
specifier|public
name|String
name|subject
decl_stmt|;
DECL|field|status
specifier|public
name|Change
operator|.
name|Status
name|status
decl_stmt|;
DECL|field|created
specifier|public
name|Timestamp
name|created
decl_stmt|;
DECL|field|updated
specifier|public
name|Timestamp
name|updated
decl_stmt|;
DECL|field|starred
specifier|public
name|Boolean
name|starred
decl_stmt|;
DECL|field|reviewed
specifier|public
name|Boolean
name|reviewed
decl_stmt|;
DECL|field|mergeable
specifier|public
name|Boolean
name|mergeable
decl_stmt|;
DECL|field|insertions
specifier|public
name|Integer
name|insertions
decl_stmt|;
DECL|field|deletions
specifier|public
name|Integer
name|deletions
decl_stmt|;
DECL|field|_sortkey
specifier|public
name|String
name|_sortkey
decl_stmt|;
DECL|field|_number
specifier|public
name|int
name|_number
decl_stmt|;
DECL|field|owner
specifier|public
name|AccountInfo
name|owner
decl_stmt|;
DECL|field|actions
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ActionInfo
argument_list|>
name|actions
decl_stmt|;
DECL|field|labels
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labels
decl_stmt|;
DECL|field|permittedLabels
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|permittedLabels
decl_stmt|;
DECL|field|removableReviewers
specifier|public
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|removableReviewers
decl_stmt|;
DECL|field|messages
specifier|public
name|Collection
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|messages
decl_stmt|;
DECL|field|currentRevision
specifier|public
name|String
name|currentRevision
decl_stmt|;
DECL|field|revisions
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|RevisionInfo
argument_list|>
name|revisions
decl_stmt|;
DECL|field|_moreChanges
specifier|public
name|Boolean
name|_moreChanges
decl_stmt|;
DECL|method|finish ()
name|void
name|finish
parameter_list|()
block|{
name|id
operator|=
name|Joiner
operator|.
name|on
argument_list|(
literal|'~'
argument_list|)
operator|.
name|join
argument_list|(
name|Url
operator|.
name|encode
argument_list|(
name|project
argument_list|)
argument_list|,
name|Url
operator|.
name|encode
argument_list|(
name|branch
argument_list|)
argument_list|,
name|Url
operator|.
name|encode
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LabelInfo
specifier|public
specifier|static
class|class
name|LabelInfo
block|{
DECL|field|_status
specifier|transient
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
name|_status
decl_stmt|;
DECL|field|approved
specifier|public
name|AccountInfo
name|approved
decl_stmt|;
DECL|field|rejected
specifier|public
name|AccountInfo
name|rejected
decl_stmt|;
DECL|field|recommended
specifier|public
name|AccountInfo
name|recommended
decl_stmt|;
DECL|field|disliked
specifier|public
name|AccountInfo
name|disliked
decl_stmt|;
DECL|field|all
specifier|public
name|List
argument_list|<
name|ApprovalInfo
argument_list|>
name|all
decl_stmt|;
DECL|field|values
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
decl_stmt|;
DECL|field|value
specifier|public
name|Short
name|value
decl_stmt|;
DECL|field|defaultValue
specifier|public
name|Short
name|defaultValue
decl_stmt|;
DECL|field|optional
specifier|public
name|Boolean
name|optional
decl_stmt|;
DECL|field|blocking
specifier|public
name|Boolean
name|blocking
decl_stmt|;
DECL|method|addApproval (ApprovalInfo ai)
name|void
name|addApproval
parameter_list|(
name|ApprovalInfo
name|ai
parameter_list|)
block|{
if|if
condition|(
name|all
operator|==
literal|null
condition|)
block|{
name|all
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
name|all
operator|.
name|add
argument_list|(
name|ai
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ApprovalInfo
specifier|public
specifier|static
class|class
name|ApprovalInfo
extends|extends
name|AccountInfo
block|{
DECL|field|value
specifier|public
name|Integer
name|value
decl_stmt|;
DECL|field|date
specifier|public
name|Timestamp
name|date
decl_stmt|;
DECL|method|ApprovalInfo (Account.Id id)
name|ApprovalInfo
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ChangeMessageInfo
specifier|public
specifier|static
class|class
name|ChangeMessageInfo
block|{
DECL|field|id
specifier|public
name|String
name|id
decl_stmt|;
DECL|field|author
specifier|public
name|AccountInfo
name|author
decl_stmt|;
DECL|field|date
specifier|public
name|Timestamp
name|date
decl_stmt|;
DECL|field|message
specifier|public
name|String
name|message
decl_stmt|;
DECL|field|_revisionNumber
specifier|public
name|Integer
name|_revisionNumber
decl_stmt|;
block|}
block|}
end_class

end_unit

