begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.update
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
package|;
end_package

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|RetryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|RetryerBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|StopStrategies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|WaitStrategies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|LockFailureException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|RetryHelper
specifier|public
class|class
name|RetryHelper
block|{
DECL|interface|Action
specifier|public
interface|interface
name|Action
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|call (BatchUpdate.Factory updateFactory)
name|T
name|call
parameter_list|(
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
DECL|field|migration
specifier|private
specifier|final
name|NotesMigration
name|migration
decl_stmt|;
DECL|field|updateFactory
specifier|private
specifier|final
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|RetryHelper ( NotesMigration migration, ReviewDbBatchUpdate.AssistedFactory reviewDbBatchUpdateFactory, FusedNoteDbBatchUpdate.AssistedFactory fusedNoteDbBatchUpdateFactory, UnfusedNoteDbBatchUpdate.AssistedFactory unfusedNoteDbBatchUpdateFactory)
name|RetryHelper
parameter_list|(
name|NotesMigration
name|migration
parameter_list|,
name|ReviewDbBatchUpdate
operator|.
name|AssistedFactory
name|reviewDbBatchUpdateFactory
parameter_list|,
name|FusedNoteDbBatchUpdate
operator|.
name|AssistedFactory
name|fusedNoteDbBatchUpdateFactory
parameter_list|,
name|UnfusedNoteDbBatchUpdate
operator|.
name|AssistedFactory
name|unfusedNoteDbBatchUpdateFactory
parameter_list|)
block|{
name|this
operator|.
name|migration
operator|=
name|migration
expr_stmt|;
name|this
operator|.
name|updateFactory
operator|=
operator|new
name|BatchUpdate
operator|.
name|Factory
argument_list|(
name|migration
argument_list|,
name|reviewDbBatchUpdateFactory
argument_list|,
name|fusedNoteDbBatchUpdateFactory
argument_list|,
name|unfusedNoteDbBatchUpdateFactory
argument_list|)
expr_stmt|;
block|}
DECL|method|execute (Action<T> action)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|execute
parameter_list|(
name|Action
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
throws|throws
name|RestApiException
throws|,
name|UpdateException
block|{
try|try
block|{
name|RetryerBuilder
argument_list|<
name|T
argument_list|>
name|builder
init|=
name|RetryerBuilder
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|migration
operator|.
name|disableChangeReviewDb
argument_list|()
operator|&&
name|migration
operator|.
name|fuseUpdates
argument_list|()
condition|)
block|{
comment|// TODO(dborowitz): Make configurable.
name|builder
operator|.
name|withStopStrategy
argument_list|(
name|StopStrategies
operator|.
name|stopAfterDelay
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
operator|.
name|withWaitStrategy
argument_list|(
name|WaitStrategies
operator|.
name|join
argument_list|(
name|WaitStrategies
operator|.
name|exponentialWait
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|WaitStrategies
operator|.
name|randomWait
argument_list|(
literal|50
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
argument_list|)
operator|.
name|retryIfException
argument_list|(
name|RetryHelper
operator|::
name|isLockFailure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Either we aren't full-NoteDb, or the underlying ref storage doesn't support atomic
comment|// transactions. Either way, retrying a partially-failed operation is not idempotent, so
comment|// don't do it automatically. Let the end user decide whether they want to retry.
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
operator|.
name|call
argument_list|(
parameter_list|()
lambda|->
name|action
operator|.
name|call
argument_list|(
name|updateFactory
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
decl||
name|RetryException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|UpdateException
operator|.
name|class
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|RestApiException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|UpdateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|isLockFailure (Throwable t)
specifier|private
specifier|static
name|boolean
name|isLockFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|UpdateException
condition|)
block|{
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
return|return
name|t
operator|instanceof
name|LockFailureException
return|;
block|}
block|}
end_class

end_unit

