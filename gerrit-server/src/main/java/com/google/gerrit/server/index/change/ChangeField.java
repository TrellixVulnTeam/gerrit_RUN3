begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.index.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ReviewerSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StarredChangesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|FieldDef
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|SchemaUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ReviewerStateInternal
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
operator|.
name|ChangedLines
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeQueryBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeStatusPredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|protobuf
operator|.
name|CodecFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|protobuf
operator|.
name|ProtobufCodec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterLine
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Fields indexed on change documents.  *<p>  * Each field corresponds to both a field name supported by  * {@link ChangeQueryBuilder} for querying that field, and a method on  * {@link ChangeData} used for populating the corresponding document fields in  * the secondary index.  *<p>  * Field names are all lowercase alphanumeric plus underscore; index  * implementations may create unambiguous derived field names containing other  * characters.  */
end_comment

begin_class
DECL|class|ChangeField
specifier|public
class|class
name|ChangeField
block|{
DECL|field|NO_ASSIGNEE
specifier|public
specifier|static
specifier|final
name|int
name|NO_ASSIGNEE
init|=
operator|-
literal|1
decl_stmt|;
comment|/** Legacy change ID. */
DECL|field|LEGACY_ID
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
name|LEGACY_ID
init|=
operator|new
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
argument_list|(
literal|"legacy_id"
argument_list|,
name|FieldType
operator|.
name|INTEGER
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
block|{
return|return
name|input
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/** Newer style Change-Id key. */
DECL|field|ID
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
name|ID
init|=
operator|new
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_CHANGE_ID
argument_list|,
name|FieldType
operator|.
name|PREFIX
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|c
init|=
name|input
operator|.
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/** Change status string, in the same format as {@code status:}. */
DECL|field|STATUS
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
name|STATUS
init|=
operator|new
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_STATUS
argument_list|,
name|FieldType
operator|.
name|EXACT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|c
init|=
name|input
operator|.
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|ChangeStatusPredicate
operator|.
name|canonicalize
argument_list|(
name|c
operator|.
name|getStatus
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** Project containing the change. */
DECL|field|PROJECT
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
name|PROJECT
init|=
operator|new
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_PROJECT
argument_list|,
name|FieldType
operator|.
name|EXACT
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|c
init|=
name|input
operator|.
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|c
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/** Project containing the change, as a prefix field. */
DECL|field|PROJECTS
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
name|PROJECTS
init|=
operator|new
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_PROJECTS
argument_list|,
name|FieldType
operator|.
name|PREFIX
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|c
init|=
name|input
operator|.
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|c
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/** Reference (aka branch) the change will submit onto. */
DECL|field|REF
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
name|REF
init|=
operator|new
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_REF
argument_list|,
name|FieldType
operator|.
name|EXACT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|c
init|=
name|input
operator|.
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|c
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/** Topic, a short annotation on the branch. */
DECL|field|EXACT_TOPIC
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
name|EXACT_TOPIC
init|=
operator|new
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
literal|"topic4"
argument_list|,
name|FieldType
operator|.
name|EXACT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|getTopic
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** Topic, a short annotation on the branch. */
DECL|field|FUZZY_TOPIC
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
name|FUZZY_TOPIC
init|=
operator|new
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
literal|"topic5"
argument_list|,
name|FieldType
operator|.
name|FULL_TEXT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|getTopic
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** Submission id assigned by MergeOp. */
DECL|field|SUBMISSIONID
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
name|SUBMISSIONID
init|=
operator|new
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_SUBMISSIONID
argument_list|,
name|FieldType
operator|.
name|EXACT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|c
init|=
name|input
operator|.
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|c
operator|.
name|getSubmissionId
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/** Last update time since January 1, 1970. */
DECL|field|UPDATED
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Timestamp
argument_list|>
name|UPDATED
init|=
operator|new
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|Timestamp
argument_list|>
argument_list|(
literal|"updated2"
argument_list|,
name|FieldType
operator|.
name|TIMESTAMP
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Timestamp
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|c
init|=
name|input
operator|.
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|c
operator|.
name|getLastUpdatedOn
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/** List of full file paths modified in the current patch set. */
DECL|field|PATH
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|PATH
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
comment|// Named for backwards compatibility.
name|ChangeQueryBuilder
operator|.
name|FIELD_FILE
argument_list|,
name|FieldType
operator|.
name|EXACT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|firstNonNull
argument_list|(
name|input
operator|.
name|currentFilePaths
argument_list|()
argument_list|,
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|method|getFileParts (ChangeData cd)
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getFileParts
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|cd
operator|.
name|currentFilePaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|paths
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
name|Splitter
name|s
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|'/'
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
for|for
control|(
name|String
name|part
range|:
name|s
operator|.
name|split
argument_list|(
name|path
argument_list|)
control|)
block|{
name|r
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
comment|/** Hashtags tied to a change */
DECL|field|HASHTAG
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|HASHTAG
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_HASHTAG
argument_list|,
name|FieldType
operator|.
name|EXACT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|input
operator|.
name|hashtags
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|String
operator|::
name|toLowerCase
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** Hashtags with original case. */
DECL|field|HASHTAG_CASE_AWARE
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|HASHTAG_CASE_AWARE
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|(
literal|"_hashtag"
argument_list|,
name|FieldType
operator|.
name|STORED_ONLY
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|byte
index|[]
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|input
operator|.
name|hashtags
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|t
lambda|->
name|t
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** Components of each file path modified in the current patch set. */
DECL|field|FILE_PART
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|FILE_PART
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_FILEPART
argument_list|,
name|FieldType
operator|.
name|EXACT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|getFileParts
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** Owner/creator of the change. */
DECL|field|OWNER
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
name|OWNER
init|=
operator|new
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_OWNER
argument_list|,
name|FieldType
operator|.
name|INTEGER
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|c
init|=
name|input
operator|.
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|c
operator|.
name|getOwner
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/** Reviewer(s) associated with the change. */
annotation|@
name|Deprecated
DECL|field|LEGACY_REVIEWER
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|LEGACY_REVIEWER
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_REVIEWER
argument_list|,
name|FieldType
operator|.
name|INTEGER
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|c
init|=
name|input
operator|.
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|r
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|allowsDrafts
operator|&&
name|c
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|DRAFT
condition|)
block|{
return|return
name|r
return|;
block|}
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|input
operator|.
name|approvals
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|r
operator|.
name|add
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
block|}
decl_stmt|;
comment|/** The user assigned to the change. */
DECL|field|ASSIGNEE
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
name|ASSIGNEE
init|=
operator|new
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_ASSIGNEE
argument_list|,
name|FieldType
operator|.
name|INTEGER
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
name|Optional
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|id
init|=
name|input
operator|.
name|assignee
argument_list|()
decl_stmt|;
return|return
name|id
operator|.
name|isPresent
argument_list|()
condition|?
name|id
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|()
else|:
name|NO_ASSIGNEE
return|;
block|}
block|}
decl_stmt|;
comment|/** Reviewer(s) associated with the change. */
DECL|field|REVIEWER
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|REVIEWER
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
literal|"reviewer2"
argument_list|,
name|FieldType
operator|.
name|EXACT
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|getReviewerFieldValues
argument_list|(
name|input
operator|.
name|reviewers
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|getReviewerFieldValues (ReviewerSet reviewers)
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getReviewerFieldValues
parameter_list|(
name|ReviewerSet
name|reviewers
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|reviewers
operator|.
name|asTable
argument_list|()
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|Table
operator|.
name|Cell
argument_list|<
name|ReviewerStateInternal
argument_list|,
name|Account
operator|.
name|Id
argument_list|,
name|Timestamp
argument_list|>
name|c
range|:
name|reviewers
operator|.
name|asTable
argument_list|()
operator|.
name|cellSet
argument_list|()
control|)
block|{
name|String
name|v
init|=
name|getReviewerFieldValue
argument_list|(
name|c
operator|.
name|getRowKey
argument_list|()
argument_list|,
name|c
operator|.
name|getColumnKey
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
name|v
operator|+
literal|','
operator|+
name|c
operator|.
name|getValue
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
DECL|method|getReviewerFieldValue (ReviewerStateInternal state, Account.Id id)
specifier|public
specifier|static
name|String
name|getReviewerFieldValue
parameter_list|(
name|ReviewerStateInternal
name|state
parameter_list|,
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
return|return
name|state
operator|.
name|toString
argument_list|()
operator|+
literal|','
operator|+
name|id
return|;
block|}
DECL|method|parseReviewerFieldValues (Iterable<String> values)
specifier|public
specifier|static
name|ReviewerSet
name|parseReviewerFieldValues
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|ReviewerStateInternal
argument_list|,
name|Account
operator|.
name|Id
argument_list|,
name|Timestamp
argument_list|>
name|b
init|=
name|ImmutableTable
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|values
control|)
block|{
name|int
name|f
init|=
name|v
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|<
literal|0
condition|)
block|{
continue|continue;
block|}
name|int
name|l
init|=
name|v
operator|.
name|lastIndexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
name|f
condition|)
block|{
continue|continue;
block|}
name|b
operator|.
name|put
argument_list|(
name|ReviewerStateInternal
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|f
argument_list|)
argument_list|)
argument_list|,
name|Account
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|v
operator|.
name|substring
argument_list|(
name|f
operator|+
literal|1
argument_list|,
name|l
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|substring
argument_list|(
name|l
operator|+
literal|1
argument_list|,
name|v
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ReviewerSet
operator|.
name|fromTable
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/** Commit ID of any patch set on the change, using prefix match. */
DECL|field|COMMIT
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|COMMIT
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_COMMIT
argument_list|,
name|FieldType
operator|.
name|PREFIX
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|getRevisions
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** Commit ID of any patch set on the change, using exact match. */
DECL|field|EXACT_COMMIT
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|EXACT_COMMIT
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_EXACTCOMMIT
argument_list|,
name|FieldType
operator|.
name|EXACT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|getRevisions
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|method|getRevisions (ChangeData cd)
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getRevisions
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|revisions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSet
name|ps
range|:
name|cd
operator|.
name|patchSets
argument_list|()
control|)
block|{
if|if
condition|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|revisions
operator|.
name|add
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|revisions
return|;
block|}
comment|/** Tracking id extracted from a footer. */
DECL|field|TR
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|TR
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_TR
argument_list|,
name|FieldType
operator|.
name|EXACT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
block|{
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footers
init|=
name|input
operator|.
name|commitFooters
argument_list|()
decl_stmt|;
if|if
condition|(
name|footers
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|args
operator|.
name|trackingFooters
operator|.
name|extract
argument_list|(
name|footers
argument_list|)
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|/** List of labels on the current patch set. */
annotation|@
name|Deprecated
DECL|field|LABEL
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|LABEL
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_LABEL
argument_list|,
name|FieldType
operator|.
name|EXACT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|getLabels
argument_list|(
name|input
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** List of labels on the current patch set including change owner votes. */
DECL|field|LABEL2
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|LABEL2
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
literal|"label2"
argument_list|,
name|FieldType
operator|.
name|EXACT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|getLabels
argument_list|(
name|input
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|method|getLabels (ChangeData input, boolean owners)
specifier|private
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|getLabels
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|boolean
name|owners
parameter_list|)
throws|throws
name|OrmException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|allApprovals
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|distinctApprovals
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|input
operator|.
name|currentApprovals
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
operator|&&
operator|!
name|a
operator|.
name|isLegacySubmit
argument_list|()
condition|)
block|{
name|allApprovals
operator|.
name|add
argument_list|(
name|formatLabel
argument_list|(
name|a
operator|.
name|getLabel
argument_list|()
argument_list|,
name|a
operator|.
name|getValue
argument_list|()
argument_list|,
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|owners
operator|&&
name|input
operator|.
name|change
argument_list|()
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
condition|)
block|{
name|allApprovals
operator|.
name|add
argument_list|(
name|formatLabel
argument_list|(
name|a
operator|.
name|getLabel
argument_list|()
argument_list|,
name|a
operator|.
name|getValue
argument_list|()
argument_list|,
name|ChangeQueryBuilder
operator|.
name|OWNER_ACCOUNT_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|distinctApprovals
operator|.
name|add
argument_list|(
name|formatLabel
argument_list|(
name|a
operator|.
name|getLabel
argument_list|()
argument_list|,
name|a
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|allApprovals
operator|.
name|addAll
argument_list|(
name|distinctApprovals
argument_list|)
expr_stmt|;
return|return
name|allApprovals
return|;
block|}
DECL|method|getAuthorParts (ChangeData cd)
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getAuthorParts
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
block|{
return|return
name|SchemaUtil
operator|.
name|getPersonParts
argument_list|(
name|cd
operator|.
name|getAuthor
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getCommitterParts (ChangeData cd)
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getCommitterParts
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
block|{
return|return
name|SchemaUtil
operator|.
name|getPersonParts
argument_list|(
name|cd
operator|.
name|getCommitter
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * The exact email address, or any part of the author name or email address,    * in the current patch set.    */
DECL|field|AUTHOR
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|AUTHOR
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_AUTHOR
argument_list|,
name|FieldType
operator|.
name|FULL_TEXT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|getAuthorParts
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * The exact email address, or any part of the committer name or email address,    * in the current patch set.    */
DECL|field|COMMITTER
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|COMMITTER
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_COMMITTER
argument_list|,
name|FieldType
operator|.
name|FULL_TEXT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|getCommitterParts
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|class|ChangeProtoField
specifier|public
specifier|static
class|class
name|ChangeProtoField
extends|extends
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|byte
index|[]
argument_list|>
block|{
DECL|field|CODEC
specifier|public
specifier|static
specifier|final
name|ProtobufCodec
argument_list|<
name|Change
argument_list|>
name|CODEC
init|=
name|CodecFactory
operator|.
name|encoder
argument_list|(
name|Change
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ChangeProtoField ()
specifier|private
name|ChangeProtoField
parameter_list|()
block|{
name|super
argument_list|(
literal|"_change"
argument_list|,
name|FieldType
operator|.
name|STORED_ONLY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get (ChangeData input, FieldDef.FillArgs args)
specifier|public
name|byte
index|[]
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FieldDef
operator|.
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|c
init|=
name|input
operator|.
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|CODEC
operator|.
name|encodeToByteArray
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
comment|/** Serialized change object, used for pre-populating results. */
DECL|field|CHANGE
specifier|public
specifier|static
specifier|final
name|ChangeProtoField
name|CHANGE
init|=
operator|new
name|ChangeProtoField
argument_list|()
decl_stmt|;
DECL|class|PatchSetApprovalProtoField
specifier|public
specifier|static
class|class
name|PatchSetApprovalProtoField
extends|extends
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|byte
index|[]
argument_list|>
block|{
DECL|field|CODEC
specifier|public
specifier|static
specifier|final
name|ProtobufCodec
argument_list|<
name|PatchSetApproval
argument_list|>
name|CODEC
init|=
name|CodecFactory
operator|.
name|encoder
argument_list|(
name|PatchSetApproval
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|PatchSetApprovalProtoField ()
specifier|private
name|PatchSetApprovalProtoField
parameter_list|()
block|{
name|super
argument_list|(
literal|"_approval"
argument_list|,
name|FieldType
operator|.
name|STORED_ONLY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get (ChangeData input, FillArgs args)
specifier|public
name|Iterable
argument_list|<
name|byte
index|[]
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|toProtos
argument_list|(
name|CODEC
argument_list|,
name|input
operator|.
name|currentApprovals
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Serialized approvals for the current patch set, used for pre-populating    * results.    */
DECL|field|APPROVAL
specifier|public
specifier|static
specifier|final
name|PatchSetApprovalProtoField
name|APPROVAL
init|=
operator|new
name|PatchSetApprovalProtoField
argument_list|()
decl_stmt|;
DECL|method|formatLabel (String label, int value)
specifier|public
specifier|static
name|String
name|formatLabel
parameter_list|(
name|String
name|label
parameter_list|,
name|int
name|value
parameter_list|)
block|{
return|return
name|formatLabel
argument_list|(
name|label
argument_list|,
name|value
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|formatLabel (String label, int value, Account.Id accountId)
specifier|public
specifier|static
name|String
name|formatLabel
parameter_list|(
name|String
name|label
parameter_list|,
name|int
name|value
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
return|return
name|label
operator|.
name|toLowerCase
argument_list|()
operator|+
operator|(
name|value
operator|>=
literal|0
condition|?
literal|"+"
else|:
literal|""
operator|)
operator|+
name|value
operator|+
operator|(
name|accountId
operator|!=
literal|null
condition|?
literal|","
operator|+
name|formatAccount
argument_list|(
name|accountId
argument_list|)
else|:
literal|""
operator|)
return|;
block|}
DECL|method|formatAccount (Account.Id accountId)
specifier|private
specifier|static
name|String
name|formatAccount
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
if|if
condition|(
name|ChangeQueryBuilder
operator|.
name|OWNER_ACCOUNT_ID
operator|.
name|equals
argument_list|(
name|accountId
argument_list|)
condition|)
block|{
return|return
name|ChangeQueryBuilder
operator|.
name|ARG_ID_OWNER
return|;
block|}
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
comment|/** Commit message of the current patch set. */
DECL|field|COMMIT_MESSAGE
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
name|COMMIT_MESSAGE
init|=
operator|new
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_MESSAGE
argument_list|,
name|FieldType
operator|.
name|FULL_TEXT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
block|{
return|return
name|input
operator|.
name|commitMessage
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|/** Summary or inline comment. */
DECL|field|COMMENT
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|COMMENT
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_COMMENT
argument_list|,
name|FieldType
operator|.
name|FULL_TEXT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Comment
name|c
range|:
name|input
operator|.
name|publishedComments
argument_list|()
control|)
block|{
name|r
operator|.
name|add
argument_list|(
name|c
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChangeMessage
name|m
range|:
name|input
operator|.
name|messages
argument_list|()
control|)
block|{
name|r
operator|.
name|add
argument_list|(
name|m
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
block|}
decl_stmt|;
comment|/** Whether the change is mergeable. */
DECL|field|MERGEABLE
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
name|MERGEABLE
init|=
operator|new
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_MERGEABLE
argument_list|,
name|FieldType
operator|.
name|EXACT
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
name|Boolean
name|m
init|=
name|input
operator|.
name|isMergeable
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|m
condition|?
literal|"1"
else|:
literal|"0"
return|;
block|}
block|}
decl_stmt|;
comment|/** The number of inserted lines in this change. */
DECL|field|ADDED
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
name|ADDED
init|=
operator|new
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_ADDED
argument_list|,
name|FieldType
operator|.
name|INTEGER_RANGE
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|input
operator|.
name|changedLines
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|?
name|input
operator|.
name|changedLines
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|insertions
else|:
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|/** The number of deleted lines in this change. */
DECL|field|DELETED
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
name|DELETED
init|=
operator|new
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_DELETED
argument_list|,
name|FieldType
operator|.
name|INTEGER_RANGE
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|input
operator|.
name|changedLines
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|?
name|input
operator|.
name|changedLines
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|deletions
else|:
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|/** The total number of modified lines in this change. */
DECL|field|DELTA
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
name|DELTA
init|=
operator|new
name|FieldDef
operator|.
name|Single
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_DELTA
argument_list|,
name|FieldType
operator|.
name|INTEGER_RANGE
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
name|Optional
argument_list|<
name|ChangedLines
argument_list|>
name|changedLines
init|=
name|input
operator|.
name|changedLines
argument_list|()
decl_stmt|;
return|return
name|changedLines
operator|.
name|isPresent
argument_list|()
condition|?
name|changedLines
operator|.
name|get
argument_list|()
operator|.
name|insertions
operator|+
name|changedLines
operator|.
name|get
argument_list|()
operator|.
name|deletions
else|:
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|/** Users who have commented on this change. */
DECL|field|COMMENTBY
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|COMMENTBY
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_COMMENTBY
argument_list|,
name|FieldType
operator|.
name|INTEGER
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|r
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeMessage
name|m
range|:
name|input
operator|.
name|messages
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getAuthor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|m
operator|.
name|getAuthor
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Comment
name|c
range|:
name|input
operator|.
name|publishedComments
argument_list|()
control|)
block|{
name|r
operator|.
name|add
argument_list|(
name|c
operator|.
name|author
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
block|}
decl_stmt|;
comment|/** Users who have starred this change. */
annotation|@
name|Deprecated
DECL|field|STARREDBY
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|STARREDBY
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_STARREDBY
argument_list|,
name|FieldType
operator|.
name|INTEGER
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|input
operator|.
name|starredBy
argument_list|()
argument_list|,
name|Account
operator|.
name|Id
operator|::
name|get
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Star labels on this change in the format:&lt;account-id&gt;:&lt;label&gt;    */
DECL|field|STAR
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|STAR
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_STAR
argument_list|,
name|FieldType
operator|.
name|EXACT
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|input
operator|.
name|stars
argument_list|()
operator|.
name|entries
argument_list|()
argument_list|,
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|e
parameter_list|)
lambda|->
block|{
return|return
name|StarredChangesUtil
operator|.
name|StarField
operator|.
name|create
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** Users that have starred the change with any label. */
DECL|field|STARBY
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|STARBY
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_STARBY
argument_list|,
name|FieldType
operator|.
name|INTEGER
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|input
operator|.
name|stars
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|Account
operator|.
name|Id
operator|::
name|get
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** Opaque group identifiers for this change's patch sets. */
DECL|field|GROUP
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|GROUP
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|String
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_GROUP
argument_list|,
name|FieldType
operator|.
name|EXACT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSet
name|ps
range|:
name|input
operator|.
name|patchSets
argument_list|()
control|)
block|{
name|r
operator|.
name|addAll
argument_list|(
name|ps
operator|.
name|getGroups
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
block|}
decl_stmt|;
DECL|class|PatchSetProtoField
specifier|public
specifier|static
class|class
name|PatchSetProtoField
extends|extends
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|byte
index|[]
argument_list|>
block|{
DECL|field|CODEC
specifier|public
specifier|static
specifier|final
name|ProtobufCodec
argument_list|<
name|PatchSet
argument_list|>
name|CODEC
init|=
name|CodecFactory
operator|.
name|encoder
argument_list|(
name|PatchSet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|PatchSetProtoField ()
specifier|private
name|PatchSetProtoField
parameter_list|()
block|{
name|super
argument_list|(
literal|"_patch_set"
argument_list|,
name|FieldType
operator|.
name|STORED_ONLY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get (ChangeData input, FieldDef.FillArgs args)
specifier|public
name|Iterable
argument_list|<
name|byte
index|[]
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FieldDef
operator|.
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|toProtos
argument_list|(
name|CODEC
argument_list|,
name|input
operator|.
name|patchSets
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Serialized patch set object, used for pre-populating results. */
DECL|field|PATCH_SET
specifier|public
specifier|static
specifier|final
name|PatchSetProtoField
name|PATCH_SET
init|=
operator|new
name|PatchSetProtoField
argument_list|()
decl_stmt|;
comment|/** Users who have edits on this change. */
DECL|field|EDITBY
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|EDITBY
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_EDITBY
argument_list|,
name|FieldType
operator|.
name|INTEGER
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|input
operator|.
name|editsByUser
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Account
operator|.
name|Id
operator|::
name|get
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** Users who have draft comments on this change. */
DECL|field|DRAFTBY
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|DRAFTBY
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_DRAFTBY
argument_list|,
name|FieldType
operator|.
name|INTEGER
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|input
operator|.
name|draftsByUser
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Account
operator|.
name|Id
operator|::
name|get
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Users the change was reviewed by since the last author update.    *<p>    * A change is considered reviewed by a user if the latest update by that user    * is newer than the latest update by the change author. Both top-level change    * messages and new patch sets are considered to be updates.    *<p>    * If the latest update is by the change owner, then the special value {@link    * #NOT_REVIEWED} is emitted.    */
DECL|field|REVIEWEDBY
specifier|public
specifier|static
specifier|final
name|FieldDef
argument_list|<
name|ChangeData
argument_list|,
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|REVIEWEDBY
init|=
operator|new
name|FieldDef
operator|.
name|Repeatable
argument_list|<
name|ChangeData
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_REVIEWEDBY
argument_list|,
name|FieldType
operator|.
name|INTEGER
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|(
name|ChangeData
name|input
parameter_list|,
name|FillArgs
name|args
parameter_list|)
throws|throws
name|OrmException
block|{
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewedBy
init|=
name|input
operator|.
name|reviewedBy
argument_list|()
decl_stmt|;
if|if
condition|(
name|reviewedBy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NOT_REVIEWED
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|reviewedBy
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|reviewedBy
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
decl_stmt|;
DECL|field|NOT_REVIEWED
specifier|public
specifier|static
specifier|final
name|Integer
name|NOT_REVIEWED
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|getTopic (ChangeData input)
specifier|private
specifier|static
name|String
name|getTopic
parameter_list|(
name|ChangeData
name|input
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|c
init|=
name|input
operator|.
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|firstNonNull
argument_list|(
name|c
operator|.
name|getTopic
argument_list|()
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|toProtos (ProtobufCodec<T> codec, Collection<T> objs)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|toProtos
parameter_list|(
name|ProtobufCodec
argument_list|<
name|T
argument_list|>
name|codec
parameter_list|,
name|Collection
argument_list|<
name|T
argument_list|>
name|objs
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|objs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|256
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|T
name|obj
range|:
name|objs
control|)
block|{
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|CodedOutputStream
name|cos
init|=
name|CodedOutputStream
operator|.
name|newInstance
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|codec
operator|.
name|encode
argument_list|(
name|obj
argument_list|,
name|cos
argument_list|)
expr_stmt|;
name|cos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

