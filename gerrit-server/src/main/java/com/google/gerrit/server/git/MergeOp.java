begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|HOURS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MINUTES
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefDatabase
operator|.
name|ALL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CheckedFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|ChangeHooks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Capable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitTypeRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|strategy
operator|.
name|SubmitStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|strategy
operator|.
name|SubmitStrategyFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|MergeValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|MergeValidators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|ChangeIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MergeFailSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MergedSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestScopePropagator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|AtomicUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AnyObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Merges changes in submission order into a single branch.  *<p>  * Branches are reduced to the minimum number of heads needed to merge  * everything. This allows commits to be entered into the queue in any order  * (such as ancestors before descendants) and only the most recent commit on any  * line of development will be merged. All unmerged commits along a line of  * development must be in the submission queue in order to merge the tip of that  * line.  *<p>  * Conflicts are handled by discarding the entire line of development and  * marking it as conflicting, even if an earlier commit along that same line can  * be merged cleanly.  */
end_comment

begin_class
DECL|class|MergeOp
specifier|public
class|class
name|MergeOp
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (Branch.NameKey branch)
name|MergeOp
name|create
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
function_decl|;
block|}
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MergeOp
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Amount of time to wait between submit and checking for missing deps. */
DECL|field|DEPENDENCY_DELAY
specifier|private
specifier|static
specifier|final
name|long
name|DEPENDENCY_DELAY
init|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|15
argument_list|,
name|MINUTES
argument_list|)
decl_stmt|;
DECL|field|LOCK_FAILURE_RETRY_DELAY
specifier|private
specifier|static
specifier|final
name|long
name|LOCK_FAILURE_RETRY_DELAY
init|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|15
argument_list|,
name|SECONDS
argument_list|)
decl_stmt|;
DECL|field|MAX_SUBMIT_WINDOW
specifier|private
specifier|static
specifier|final
name|long
name|MAX_SUBMIT_WINDOW
init|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|HOURS
argument_list|)
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|schemaFactory
specifier|private
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
decl_stmt|;
DECL|field|notesFactory
specifier|private
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|gitRefUpdated
specifier|private
specifier|final
name|GitReferenceUpdated
name|gitRefUpdated
decl_stmt|;
DECL|field|mergedSenderFactory
specifier|private
specifier|final
name|MergedSender
operator|.
name|Factory
name|mergedSenderFactory
decl_stmt|;
DECL|field|mergeFailSenderFactory
specifier|private
specifier|final
name|MergeFailSender
operator|.
name|Factory
name|mergeFailSenderFactory
decl_stmt|;
DECL|field|patchSetInfoFactory
specifier|private
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
decl_stmt|;
DECL|field|identifiedUserFactory
specifier|private
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
decl_stmt|;
DECL|field|changeControlFactory
specifier|private
specifier|final
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
DECL|field|mergeQueue
specifier|private
specifier|final
name|MergeQueue
name|mergeQueue
decl_stmt|;
DECL|field|mergeValidatorsFactory
specifier|private
specifier|final
name|MergeValidators
operator|.
name|Factory
name|mergeValidatorsFactory
decl_stmt|;
DECL|field|approvalsUtil
specifier|private
specifier|final
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
DECL|field|destBranch
specifier|private
specifier|final
name|Branch
operator|.
name|NameKey
name|destBranch
decl_stmt|;
DECL|field|destProject
specifier|private
name|ProjectState
name|destProject
decl_stmt|;
DECL|field|toMerge
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|SubmitType
argument_list|,
name|CodeReviewCommit
argument_list|>
name|toMerge
decl_stmt|;
DECL|field|potentiallyStillSubmittable
specifier|private
specifier|final
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|potentiallyStillSubmittable
decl_stmt|;
DECL|field|commits
specifier|private
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|CodeReviewCommit
argument_list|>
name|commits
decl_stmt|;
DECL|field|toUpdate
specifier|private
specifier|final
name|List
argument_list|<
name|Change
argument_list|>
name|toUpdate
decl_stmt|;
DECL|field|db
specifier|private
name|ReviewDb
name|db
decl_stmt|;
DECL|field|repo
specifier|private
name|Repository
name|repo
decl_stmt|;
DECL|field|rw
specifier|private
name|RevWalk
name|rw
decl_stmt|;
DECL|field|canMergeFlag
specifier|private
name|RevFlag
name|canMergeFlag
decl_stmt|;
DECL|field|branchTip
specifier|private
name|CodeReviewCommit
name|branchTip
decl_stmt|;
DECL|field|mergeTip
specifier|private
name|CodeReviewCommit
name|mergeTip
decl_stmt|;
DECL|field|inserter
specifier|private
name|ObjectInserter
name|inserter
decl_stmt|;
DECL|field|refLogIdent
specifier|private
name|PersonIdent
name|refLogIdent
decl_stmt|;
DECL|field|hooks
specifier|private
specifier|final
name|ChangeHooks
name|hooks
decl_stmt|;
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|tagCache
specifier|private
specifier|final
name|TagCache
name|tagCache
decl_stmt|;
DECL|field|submitStrategyFactory
specifier|private
specifier|final
name|SubmitStrategyFactory
name|submitStrategyFactory
decl_stmt|;
DECL|field|subOpFactory
specifier|private
specifier|final
name|SubmoduleOp
operator|.
name|Factory
name|subOpFactory
decl_stmt|;
DECL|field|workQueue
specifier|private
specifier|final
name|WorkQueue
name|workQueue
decl_stmt|;
DECL|field|requestScopePropagator
specifier|private
specifier|final
name|RequestScopePropagator
name|requestScopePropagator
decl_stmt|;
DECL|field|indexer
specifier|private
specifier|final
name|ChangeIndexer
name|indexer
decl_stmt|;
annotation|@
name|Inject
DECL|method|MergeOp (final GitRepositoryManager grm, final SchemaFactory<ReviewDb> sf, final ChangeNotes.Factory nf, final ProjectCache pc, final GitReferenceUpdated gru, final MergedSender.Factory msf, final MergeFailSender.Factory mfsf, final PatchSetInfoFactory psif, final IdentifiedUser.GenericFactory iuf, final ChangeControl.GenericFactory changeControlFactory, final MergeQueue mergeQueue, @Assisted final Branch.NameKey branch, final ChangeHooks hooks, final AccountCache accountCache, final TagCache tagCache, final SubmitStrategyFactory submitStrategyFactory, final SubmoduleOp.Factory subOpFactory, final WorkQueue workQueue, final RequestScopePropagator requestScopePropagator, final ChangeIndexer indexer, final MergeValidators.Factory mergeValidatorsFactory, final ApprovalsUtil approvalsUtil)
name|MergeOp
parameter_list|(
specifier|final
name|GitRepositoryManager
name|grm
parameter_list|,
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|sf
parameter_list|,
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|nf
parameter_list|,
specifier|final
name|ProjectCache
name|pc
parameter_list|,
specifier|final
name|GitReferenceUpdated
name|gru
parameter_list|,
specifier|final
name|MergedSender
operator|.
name|Factory
name|msf
parameter_list|,
specifier|final
name|MergeFailSender
operator|.
name|Factory
name|mfsf
parameter_list|,
specifier|final
name|PatchSetInfoFactory
name|psif
parameter_list|,
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|iuf
parameter_list|,
specifier|final
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
parameter_list|,
specifier|final
name|MergeQueue
name|mergeQueue
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|,
specifier|final
name|ChangeHooks
name|hooks
parameter_list|,
specifier|final
name|AccountCache
name|accountCache
parameter_list|,
specifier|final
name|TagCache
name|tagCache
parameter_list|,
specifier|final
name|SubmitStrategyFactory
name|submitStrategyFactory
parameter_list|,
specifier|final
name|SubmoduleOp
operator|.
name|Factory
name|subOpFactory
parameter_list|,
specifier|final
name|WorkQueue
name|workQueue
parameter_list|,
specifier|final
name|RequestScopePropagator
name|requestScopePropagator
parameter_list|,
specifier|final
name|ChangeIndexer
name|indexer
parameter_list|,
specifier|final
name|MergeValidators
operator|.
name|Factory
name|mergeValidatorsFactory
parameter_list|,
specifier|final
name|ApprovalsUtil
name|approvalsUtil
parameter_list|)
block|{
name|repoManager
operator|=
name|grm
expr_stmt|;
name|schemaFactory
operator|=
name|sf
expr_stmt|;
name|notesFactory
operator|=
name|nf
expr_stmt|;
name|projectCache
operator|=
name|pc
expr_stmt|;
name|gitRefUpdated
operator|=
name|gru
expr_stmt|;
name|mergedSenderFactory
operator|=
name|msf
expr_stmt|;
name|mergeFailSenderFactory
operator|=
name|mfsf
expr_stmt|;
name|patchSetInfoFactory
operator|=
name|psif
expr_stmt|;
name|identifiedUserFactory
operator|=
name|iuf
expr_stmt|;
name|this
operator|.
name|changeControlFactory
operator|=
name|changeControlFactory
expr_stmt|;
name|this
operator|.
name|mergeQueue
operator|=
name|mergeQueue
expr_stmt|;
name|this
operator|.
name|hooks
operator|=
name|hooks
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|tagCache
operator|=
name|tagCache
expr_stmt|;
name|this
operator|.
name|submitStrategyFactory
operator|=
name|submitStrategyFactory
expr_stmt|;
name|this
operator|.
name|subOpFactory
operator|=
name|subOpFactory
expr_stmt|;
name|this
operator|.
name|workQueue
operator|=
name|workQueue
expr_stmt|;
name|this
operator|.
name|requestScopePropagator
operator|=
name|requestScopePropagator
expr_stmt|;
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
name|this
operator|.
name|mergeValidatorsFactory
operator|=
name|mergeValidatorsFactory
expr_stmt|;
name|this
operator|.
name|approvalsUtil
operator|=
name|approvalsUtil
expr_stmt|;
name|destBranch
operator|=
name|branch
expr_stmt|;
name|toMerge
operator|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
name|potentiallyStillSubmittable
operator|=
operator|new
name|ArrayList
argument_list|<
name|CodeReviewCommit
argument_list|>
argument_list|()
expr_stmt|;
name|commits
operator|=
operator|new
name|HashMap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|CodeReviewCommit
argument_list|>
argument_list|()
expr_stmt|;
name|toUpdate
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
DECL|method|setDestProject ()
specifier|private
name|void
name|setDestProject
parameter_list|()
throws|throws
name|MergeException
block|{
name|destProject
operator|=
name|projectCache
operator|.
name|get
argument_list|(
name|destBranch
operator|.
name|getParentKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|destProject
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"No such project: "
operator|+
name|destBranch
operator|.
name|getParentKey
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|openSchema ()
specifier|private
name|void
name|openSchema
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|merge ()
specifier|public
name|void
name|merge
parameter_list|()
throws|throws
name|MergeException
block|{
name|setDestProject
argument_list|()
expr_stmt|;
try|try
block|{
name|openSchema
argument_list|()
expr_stmt|;
name|openRepository
argument_list|()
expr_stmt|;
name|RefUpdate
name|branchUpdate
init|=
name|openBranch
argument_list|()
decl_stmt|;
name|boolean
name|reopen
init|=
literal|false
decl_stmt|;
specifier|final
name|ListMultimap
argument_list|<
name|SubmitType
argument_list|,
name|Change
argument_list|>
name|toSubmit
init|=
name|validateChangeList
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|submitted
argument_list|(
name|destBranch
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ListMultimap
argument_list|<
name|SubmitType
argument_list|,
name|CodeReviewCommit
argument_list|>
name|toMergeNextTurn
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|potentiallyStillSubmittableOnNextRun
init|=
operator|new
name|ArrayList
argument_list|<
name|CodeReviewCommit
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|toMerge
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|toMergeNextTurn
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|SubmitType
argument_list|>
name|submitTypes
init|=
operator|new
name|HashSet
argument_list|<
name|SubmitType
argument_list|>
argument_list|(
name|toMerge
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|SubmitType
name|submitType
range|:
name|submitTypes
control|)
block|{
if|if
condition|(
name|reopen
condition|)
block|{
name|branchUpdate
operator|=
name|openBranch
argument_list|()
expr_stmt|;
block|}
specifier|final
name|SubmitStrategy
name|strategy
init|=
name|createStrategy
argument_list|(
name|submitType
argument_list|)
decl_stmt|;
name|preMerge
argument_list|(
name|strategy
argument_list|,
name|toMerge
operator|.
name|get
argument_list|(
name|submitType
argument_list|)
argument_list|)
expr_stmt|;
name|RefUpdate
name|update
init|=
name|updateBranch
argument_list|(
name|strategy
argument_list|,
name|branchUpdate
argument_list|)
decl_stmt|;
name|reopen
operator|=
literal|true
expr_stmt|;
name|updateChangeStatus
argument_list|(
name|toSubmit
operator|.
name|get
argument_list|(
name|submitType
argument_list|)
argument_list|)
expr_stmt|;
name|updateSubscriptions
argument_list|(
name|toSubmit
operator|.
name|get
argument_list|(
name|submitType
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|update
operator|!=
literal|null
condition|)
block|{
name|fireRefUpdated
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|CodeReviewCommit
argument_list|>
name|it
init|=
name|potentiallyStillSubmittable
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|CodeReviewCommit
name|commit
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|containsMissingCommits
argument_list|(
name|toMerge
argument_list|,
name|commit
argument_list|)
operator|||
name|containsMissingCommits
argument_list|(
name|toMergeNextTurn
argument_list|,
name|commit
argument_list|)
condition|)
block|{
comment|// change has missing dependencies, but all commits which are
comment|// missing are still attempted to be merged with another submit
comment|// strategy, retry to merge this commit in the next turn
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|commit
operator|.
name|setStatusCode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|commit
operator|.
name|missing
operator|=
literal|null
expr_stmt|;
name|toMergeNextTurn
operator|.
name|put
argument_list|(
name|submitType
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
name|potentiallyStillSubmittableOnNextRun
operator|.
name|addAll
argument_list|(
name|potentiallyStillSubmittable
argument_list|)
expr_stmt|;
name|potentiallyStillSubmittable
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|toMerge
operator|.
name|clear
argument_list|()
expr_stmt|;
name|toMerge
operator|.
name|putAll
argument_list|(
name|toMergeNextTurn
argument_list|)
expr_stmt|;
block|}
name|updateChangeStatus
argument_list|(
name|toUpdate
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|CodeReviewCommit
name|commit
range|:
name|potentiallyStillSubmittableOnNextRun
control|)
block|{
specifier|final
name|Capable
name|capable
init|=
name|isSubmitStillPossible
argument_list|(
name|commit
argument_list|)
decl_stmt|;
if|if
condition|(
name|capable
operator|!=
name|Capable
operator|.
name|OK
condition|)
block|{
name|sendMergeFail
argument_list|(
name|commit
operator|.
name|notes
argument_list|()
argument_list|,
name|message
argument_list|(
name|commit
operator|.
name|change
argument_list|()
argument_list|,
name|capable
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|noProject
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Project %s no longer exists, abandoning open changes"
argument_list|,
name|destBranch
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|abandonAllOpenChanges
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot query the database"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|inserter
operator|!=
literal|null
condition|)
block|{
name|inserter
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rw
operator|!=
literal|null
condition|)
block|{
name|rw
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|containsMissingCommits ( final ListMultimap<SubmitType, CodeReviewCommit> map, final CodeReviewCommit commit)
specifier|private
name|boolean
name|containsMissingCommits
parameter_list|(
specifier|final
name|ListMultimap
argument_list|<
name|SubmitType
argument_list|,
name|CodeReviewCommit
argument_list|>
name|map
parameter_list|,
specifier|final
name|CodeReviewCommit
name|commit
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSubmitForMissingCommitsStillPossible
argument_list|(
name|commit
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
specifier|final
name|CodeReviewCommit
name|missingCommit
range|:
name|commit
operator|.
name|missing
control|)
block|{
if|if
condition|(
operator|!
name|map
operator|.
name|containsValue
argument_list|(
name|missingCommit
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|isSubmitForMissingCommitsStillPossible (final CodeReviewCommit commit)
specifier|private
name|boolean
name|isSubmitForMissingCommitsStillPossible
parameter_list|(
specifier|final
name|CodeReviewCommit
name|commit
parameter_list|)
block|{
if|if
condition|(
name|commit
operator|.
name|missing
operator|==
literal|null
operator|||
name|commit
operator|.
name|missing
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|CodeReviewCommit
name|missingCommit
range|:
name|commit
operator|.
name|missing
control|)
block|{
try|try
block|{
name|loadChangeInfo
argument_list|(
name|missingCommit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchChangeException
decl||
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot check if missing commits can be submitted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|missingCommit
operator|.
name|getPatchsetId
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// The commit doesn't have a patch set, so it cannot be
comment|// submitted to the branch.
comment|//
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|missingCommit
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|equals
argument_list|(
name|missingCommit
operator|.
name|getPatchsetId
argument_list|()
argument_list|)
condition|)
block|{
comment|// If the missing commit is not the current patch set,
comment|// the change must be rebased to use the proper parent.
comment|//
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|preMerge (final SubmitStrategy strategy, final List<CodeReviewCommit> toMerge)
specifier|private
name|void
name|preMerge
parameter_list|(
specifier|final
name|SubmitStrategy
name|strategy
parameter_list|,
specifier|final
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|toMerge
parameter_list|)
throws|throws
name|MergeException
block|{
name|mergeTip
operator|=
name|strategy
operator|.
name|run
argument_list|(
name|branchTip
argument_list|,
name|toMerge
argument_list|)
expr_stmt|;
name|refLogIdent
operator|=
name|strategy
operator|.
name|getRefLogIdent
argument_list|()
expr_stmt|;
name|commits
operator|.
name|putAll
argument_list|(
name|strategy
operator|.
name|getNewCommits
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createStrategy (final SubmitType submitType)
specifier|private
name|SubmitStrategy
name|createStrategy
parameter_list|(
specifier|final
name|SubmitType
name|submitType
parameter_list|)
throws|throws
name|MergeException
throws|,
name|NoSuchProjectException
block|{
return|return
name|submitStrategyFactory
operator|.
name|create
argument_list|(
name|submitType
argument_list|,
name|db
argument_list|,
name|repo
argument_list|,
name|rw
argument_list|,
name|inserter
argument_list|,
name|canMergeFlag
argument_list|,
name|getAlreadyAccepted
argument_list|(
name|branchTip
argument_list|)
argument_list|,
name|destBranch
argument_list|)
return|;
block|}
DECL|method|openRepository ()
specifier|private
name|void
name|openRepository
parameter_list|()
throws|throws
name|MergeException
throws|,
name|NoSuchProjectException
block|{
specifier|final
name|Project
operator|.
name|NameKey
name|name
init|=
name|destBranch
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
try|try
block|{
name|repo
operator|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|notFound
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchProjectException
argument_list|(
name|name
argument_list|,
name|notFound
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
specifier|final
name|String
name|m
init|=
literal|"Error opening repository \""
operator|+
name|name
operator|.
name|get
argument_list|()
operator|+
literal|'"'
decl_stmt|;
throw|throw
operator|new
name|MergeException
argument_list|(
name|m
argument_list|,
name|err
argument_list|)
throw|;
block|}
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RevCommit
name|createCommit
parameter_list|(
specifier|final
name|AnyObjectId
name|id
parameter_list|)
block|{
return|return
operator|new
name|CodeReviewCommit
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|COMMIT_TIME_DESC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|canMergeFlag
operator|=
name|rw
operator|.
name|newFlag
argument_list|(
literal|"CAN_MERGE"
argument_list|)
expr_stmt|;
name|inserter
operator|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
expr_stmt|;
block|}
DECL|method|openBranch ()
specifier|private
name|RefUpdate
name|openBranch
parameter_list|()
throws|throws
name|MergeException
throws|,
name|OrmException
block|{
try|try
block|{
specifier|final
name|RefUpdate
name|branchUpdate
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|destBranch
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|branchUpdate
operator|.
name|getOldObjectId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|branchTip
operator|=
operator|(
name|CodeReviewCommit
operator|)
name|rw
operator|.
name|parseCommit
argument_list|(
name|branchUpdate
operator|.
name|getOldObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|repo
operator|.
name|getFullBranch
argument_list|()
operator|.
name|equals
argument_list|(
name|destBranch
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|branchTip
operator|=
literal|null
expr_stmt|;
name|branchUpdate
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
specifier|final
name|Change
name|c
range|:
name|db
operator|.
name|changes
argument_list|()
operator|.
name|submitted
argument_list|(
name|destBranch
argument_list|)
operator|.
name|toList
argument_list|()
control|)
block|{
name|setNew
argument_list|(
name|c
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
literal|"Your change could not be merged, "
operator|+
literal|"because the destination branch does not exist anymore."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|branchUpdate
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot open branch"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getAlreadyAccepted (final CodeReviewCommit branchTip)
specifier|private
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|getAlreadyAccepted
parameter_list|(
specifier|final
name|CodeReviewCommit
name|branchTip
parameter_list|)
throws|throws
name|MergeException
block|{
specifier|final
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|alreadyAccepted
init|=
operator|new
name|HashSet
argument_list|<
name|RevCommit
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|branchTip
operator|!=
literal|null
condition|)
block|{
name|alreadyAccepted
operator|.
name|add
argument_list|(
name|branchTip
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
specifier|final
name|Ref
name|r
range|:
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|ALL
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
condition|)
block|{
try|try
block|{
name|alreadyAccepted
operator|.
name|add
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|iote
parameter_list|)
block|{
comment|// Not a commit? Skip over it.
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Failed to determine already accepted commits."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|alreadyAccepted
return|;
block|}
DECL|method|validateChangeList ( final List<Change> submitted)
specifier|private
name|ListMultimap
argument_list|<
name|SubmitType
argument_list|,
name|Change
argument_list|>
name|validateChangeList
parameter_list|(
specifier|final
name|List
argument_list|<
name|Change
argument_list|>
name|submitted
parameter_list|)
throws|throws
name|MergeException
block|{
specifier|final
name|ListMultimap
argument_list|<
name|SubmitType
argument_list|,
name|Change
argument_list|>
name|toSubmit
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|allRefs
decl_stmt|;
try|try
block|{
name|allRefs
operator|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|tips
init|=
operator|new
name|HashSet
argument_list|<
name|ObjectId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Ref
name|r
range|:
name|allRefs
operator|.
name|values
argument_list|()
control|)
block|{
name|tips
operator|.
name|add
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|commitOrder
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Change
name|chg
range|:
name|submitted
control|)
block|{
specifier|final
name|Change
operator|.
name|Id
name|changeId
init|=
name|chg
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|chg
operator|.
name|currentPatchSetId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|CodeReviewCommit
operator|.
name|error
argument_list|(
name|CommitMergeStatus
operator|.
name|NO_PATCH_SET
argument_list|)
argument_list|)
expr_stmt|;
name|toUpdate
operator|.
name|add
argument_list|(
name|chg
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|PatchSet
name|ps
decl_stmt|;
try|try
block|{
name|ps
operator|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|chg
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot query the database"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|ps
operator|==
literal|null
operator|||
name|ps
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
operator|||
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|CodeReviewCommit
operator|.
name|error
argument_list|(
name|CommitMergeStatus
operator|.
name|NO_PATCH_SET
argument_list|)
argument_list|)
expr_stmt|;
name|toUpdate
operator|.
name|add
argument_list|(
name|chg
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|idstr
init|=
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|ObjectId
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|idstr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|CodeReviewCommit
operator|.
name|error
argument_list|(
name|CommitMergeStatus
operator|.
name|NO_PATCH_SET
argument_list|)
argument_list|)
expr_stmt|;
name|toUpdate
operator|.
name|add
argument_list|(
name|chg
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|tips
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
comment|// TODO Technically the proper way to do this test is to use a
comment|// RevWalk on "$id --not --all" and test for an empty set. But
comment|// that is way slower than looking for a ref directly pointing
comment|// at the desired tip. We should always have a ref available.
comment|//
comment|// TODO this is actually an error, the branch is gone but we
comment|// want to merge the issue. We can't safely do that if the
comment|// tip is not reachable.
comment|//
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|CodeReviewCommit
operator|.
name|error
argument_list|(
name|CommitMergeStatus
operator|.
name|REVISION_GONE
argument_list|)
argument_list|)
expr_stmt|;
name|toUpdate
operator|.
name|add
argument_list|(
name|chg
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|CodeReviewCommit
name|commit
decl_stmt|;
try|try
block|{
name|commit
operator|=
operator|(
name|CodeReviewCommit
operator|)
name|rw
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid commit "
operator|+
name|id
operator|.
name|name
argument_list|()
operator|+
literal|" on "
operator|+
name|chg
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|CodeReviewCommit
operator|.
name|error
argument_list|(
name|CommitMergeStatus
operator|.
name|REVISION_GONE
argument_list|)
argument_list|)
expr_stmt|;
name|toUpdate
operator|.
name|add
argument_list|(
name|chg
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|MergeValidators
name|mergeValidators
init|=
name|mergeValidatorsFactory
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|mergeValidators
operator|.
name|validatePreMerge
argument_list|(
name|repo
argument_list|,
name|commit
argument_list|,
name|destProject
argument_list|,
name|destBranch
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MergeValidationException
name|mve
parameter_list|)
block|{
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|CodeReviewCommit
operator|.
name|error
argument_list|(
name|mve
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|toUpdate
operator|.
name|add
argument_list|(
name|chg
argument_list|)
expr_stmt|;
continue|continue;
block|}
try|try
block|{
name|commit
operator|.
name|setControl
argument_list|(
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|chg
argument_list|,
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|chg
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchChangeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Failed to validate changes"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|commit
operator|.
name|setPatchsetId
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|commit
operator|.
name|originalOrder
operator|=
name|commitOrder
operator|++
expr_stmt|;
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|commit
argument_list|)
expr_stmt|;
if|if
condition|(
name|branchTip
operator|!=
literal|null
condition|)
block|{
comment|// If this commit is already merged its a bug in the queuing code
comment|// that we got back here. Just mark it complete and move on. It's
comment|// merged and that is all that mattered to the requestor.
comment|//
try|try
block|{
if|if
condition|(
name|rw
operator|.
name|isMergedInto
argument_list|(
name|commit
argument_list|,
name|branchTip
argument_list|)
condition|)
block|{
name|commit
operator|.
name|setStatusCode
argument_list|(
name|CommitMergeStatus
operator|.
name|ALREADY_MERGED
argument_list|)
expr_stmt|;
try|try
block|{
name|setMerged
argument_list|(
name|chg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot mark change "
operator|+
name|chg
operator|.
name|getId
argument_list|()
operator|+
literal|" merged"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot perform merge base test"
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
name|SubmitType
name|submitType
init|=
name|getSubmitType
argument_list|(
name|commit
operator|.
name|getControl
argument_list|()
argument_list|,
name|ps
argument_list|)
decl_stmt|;
if|if
condition|(
name|submitType
operator|==
literal|null
condition|)
block|{
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|CodeReviewCommit
operator|.
name|error
argument_list|(
name|CommitMergeStatus
operator|.
name|NO_SUBMIT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|toUpdate
operator|.
name|add
argument_list|(
name|chg
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|commit
operator|.
name|add
argument_list|(
name|canMergeFlag
argument_list|)
expr_stmt|;
name|toMerge
operator|.
name|put
argument_list|(
name|submitType
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|toSubmit
operator|.
name|put
argument_list|(
name|submitType
argument_list|,
name|chg
argument_list|)
expr_stmt|;
block|}
return|return
name|toSubmit
return|;
block|}
DECL|method|getSubmitType (ChangeControl ctl, PatchSet ps)
specifier|private
name|SubmitType
name|getSubmitType
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|,
name|PatchSet
name|ps
parameter_list|)
block|{
name|SubmitTypeRecord
name|r
init|=
name|ctl
operator|.
name|getSubmitTypeRecord
argument_list|(
name|db
argument_list|,
name|ps
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|status
operator|!=
name|SubmitTypeRecord
operator|.
name|Status
operator|.
name|OK
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to get submit type for "
operator|+
name|ctl
operator|.
name|getChange
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|r
operator|.
name|type
return|;
block|}
DECL|method|updateBranch (final SubmitStrategy strategy, final RefUpdate branchUpdate)
specifier|private
name|RefUpdate
name|updateBranch
parameter_list|(
specifier|final
name|SubmitStrategy
name|strategy
parameter_list|,
specifier|final
name|RefUpdate
name|branchUpdate
parameter_list|)
throws|throws
name|MergeException
block|{
if|if
condition|(
name|branchTip
operator|==
name|mergeTip
operator|||
name|mergeTip
operator|==
literal|null
condition|)
block|{
comment|// nothing to do
return|return
literal|null
return|;
block|}
if|if
condition|(
name|RefNames
operator|.
name|REFS_CONFIG
operator|.
name|equals
argument_list|(
name|branchUpdate
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|ProjectConfig
name|cfg
init|=
operator|new
name|ProjectConfig
argument_list|(
name|destProject
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|load
argument_list|(
name|repo
argument_list|,
name|mergeTip
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Submit would store invalid"
operator|+
literal|" project configuration "
operator|+
name|mergeTip
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|destProject
operator|.
name|getProject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|branchUpdate
operator|.
name|setRefLogIdent
argument_list|(
name|refLogIdent
argument_list|)
expr_stmt|;
name|branchUpdate
operator|.
name|setForceUpdate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|branchUpdate
operator|.
name|setNewObjectId
argument_list|(
name|mergeTip
argument_list|)
expr_stmt|;
name|branchUpdate
operator|.
name|setRefLogMessage
argument_list|(
literal|"merged"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
name|branchUpdate
operator|.
name|update
argument_list|(
name|rw
argument_list|)
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|FAST_FORWARD
case|:
if|if
condition|(
name|branchUpdate
operator|.
name|getResult
argument_list|()
operator|==
name|RefUpdate
operator|.
name|Result
operator|.
name|FAST_FORWARD
condition|)
block|{
name|tagCache
operator|.
name|updateFastForward
argument_list|(
name|destBranch
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|branchUpdate
operator|.
name|getName
argument_list|()
argument_list|,
name|branchUpdate
operator|.
name|getOldObjectId
argument_list|()
argument_list|,
name|mergeTip
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|RefNames
operator|.
name|REFS_CONFIG
operator|.
name|equals
argument_list|(
name|branchUpdate
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|projectCache
operator|.
name|evict
argument_list|(
name|destProject
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
name|destProject
operator|=
name|projectCache
operator|.
name|get
argument_list|(
name|destProject
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
name|repoManager
operator|.
name|setProjectDescription
argument_list|(
name|destProject
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|destProject
operator|.
name|getProject
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|branchUpdate
return|;
case|case
name|LOCK_FAILURE
case|:
name|String
name|msg
decl_stmt|;
if|if
condition|(
name|strategy
operator|.
name|retryOnLockFailure
argument_list|()
condition|)
block|{
name|mergeQueue
operator|.
name|recheckAfter
argument_list|(
name|destBranch
argument_list|,
name|LOCK_FAILURE_RETRY_DELAY
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|msg
operator|=
literal|"will retry"
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|=
literal|"will not retry"
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|branchUpdate
operator|.
name|getResult
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|", "
operator|+
name|msg
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
name|branchUpdate
operator|.
name|getResult
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot update "
operator|+
name|branchUpdate
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|fireRefUpdated (RefUpdate branchUpdate)
specifier|private
name|void
name|fireRefUpdated
parameter_list|(
name|RefUpdate
name|branchUpdate
parameter_list|)
block|{
name|gitRefUpdated
operator|.
name|fire
argument_list|(
name|destBranch
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|branchUpdate
argument_list|)
expr_stmt|;
name|Account
name|account
init|=
literal|null
decl_stmt|;
name|PatchSetApproval
name|submitter
init|=
name|approvalsUtil
operator|.
name|getSubmitter
argument_list|(
name|db
argument_list|,
name|mergeTip
operator|.
name|notes
argument_list|()
argument_list|,
name|mergeTip
operator|.
name|getPatchsetId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|submitter
operator|!=
literal|null
condition|)
block|{
name|account
operator|=
name|accountCache
operator|.
name|get
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
expr_stmt|;
block|}
name|hooks
operator|.
name|doRefUpdatedHook
argument_list|(
name|destBranch
argument_list|,
name|branchUpdate
argument_list|,
name|account
argument_list|)
expr_stmt|;
block|}
DECL|method|updateChangeStatus (final List<Change> submitted)
specifier|private
name|void
name|updateChangeStatus
parameter_list|(
specifier|final
name|List
argument_list|<
name|Change
argument_list|>
name|submitted
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Change
name|c
range|:
name|submitted
control|)
block|{
specifier|final
name|CodeReviewCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CommitMergeStatus
name|s
init|=
name|commit
operator|!=
literal|null
condition|?
name|commit
operator|.
name|getStatusCode
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
comment|// Shouldn't ever happen, but leave the change alone. We'll pick
comment|// it up on the next pass.
comment|//
continue|continue;
block|}
specifier|final
name|String
name|txt
init|=
name|s
operator|.
name|getMessage
argument_list|()
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|s
condition|)
block|{
case|case
name|CLEAN_MERGE
case|:
name|setMerged
argument_list|(
name|c
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
name|txt
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|CLEAN_REBASE
case|:
case|case
name|CLEAN_PICK
case|:
name|setMerged
argument_list|(
name|c
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
name|txt
operator|+
literal|" as "
operator|+
name|commit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|ALREADY_MERGED
case|:
name|setMerged
argument_list|(
name|c
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
case|case
name|PATH_CONFLICT
case|:
case|case
name|MANUAL_RECURSIVE_MERGE
case|:
case|case
name|CANNOT_CHERRY_PICK_ROOT
case|:
case|case
name|NOT_FAST_FORWARD
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION_PLUGIN_VALUE_NOT_PERMITTED
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION_PLUGIN_VALUE_NOT_EDITABLE
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION_PARENT_PROJECT_NOT_FOUND
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION_ROOT_PROJECT_CANNOT_HAVE_PARENT
case|:
case|case
name|SETTING_PARENT_PROJECT_ONLY_ALLOWED_BY_ADMIN
case|:
name|setNew
argument_list|(
name|commit
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
name|txt
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|MISSING_DEPENDENCY
case|:
name|potentiallyStillSubmittable
operator|.
name|add
argument_list|(
name|commit
argument_list|)
expr_stmt|;
break|break;
default|default:
name|setNew
argument_list|(
name|commit
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
literal|"Unspecified merge failure: "
operator|+
name|s
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error updating change status for "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error updating change status for "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateSubscriptions (final List<Change> submitted)
specifier|private
name|void
name|updateSubscriptions
parameter_list|(
specifier|final
name|List
argument_list|<
name|Change
argument_list|>
name|submitted
parameter_list|)
block|{
if|if
condition|(
name|mergeTip
operator|!=
literal|null
operator|&&
operator|(
name|branchTip
operator|==
literal|null
operator|||
name|branchTip
operator|!=
name|mergeTip
operator|)
condition|)
block|{
name|SubmoduleOp
name|subOp
init|=
name|subOpFactory
operator|.
name|create
argument_list|(
name|destBranch
argument_list|,
name|mergeTip
argument_list|,
name|rw
argument_list|,
name|repo
argument_list|,
name|destProject
operator|.
name|getProject
argument_list|()
argument_list|,
name|submitted
argument_list|,
name|commits
argument_list|)
decl_stmt|;
try|try
block|{
name|subOp
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SubmoduleException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"The gitLinks were not updated according to the subscriptions "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isSubmitStillPossible (final CodeReviewCommit commit)
specifier|private
name|Capable
name|isSubmitStillPossible
parameter_list|(
specifier|final
name|CodeReviewCommit
name|commit
parameter_list|)
block|{
specifier|final
name|Capable
name|capable
decl_stmt|;
specifier|final
name|Change
name|c
init|=
name|commit
operator|.
name|change
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|submitStillPossible
init|=
name|isSubmitForMissingCommitsStillPossible
argument_list|(
name|commit
argument_list|)
decl_stmt|;
specifier|final
name|long
name|now
init|=
name|TimeUtil
operator|.
name|nowMs
argument_list|()
decl_stmt|;
specifier|final
name|long
name|waitUntil
init|=
name|c
operator|.
name|getLastUpdatedOn
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
name|DEPENDENCY_DELAY
decl_stmt|;
if|if
condition|(
name|submitStillPossible
operator|&&
name|now
operator|<
name|waitUntil
condition|)
block|{
comment|// If we waited a short while we might still be able to get
comment|// this change submitted. Reschedule an attempt in a bit.
comment|//
name|mergeQueue
operator|.
name|recheckAfter
argument_list|(
name|destBranch
argument_list|,
name|waitUntil
operator|-
name|now
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|capable
operator|=
name|Capable
operator|.
name|OK
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|submitStillPossible
condition|)
block|{
comment|// It would be possible to submit the change if the missing
comment|// dependencies are also submitted. Perhaps the user just
comment|// forgot to submit those.
comment|//
name|StringBuilder
name|m
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"Change could not be merged because of a missing dependency."
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"The following changes must also be submitted:\n"
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|CodeReviewCommit
name|missingCommit
range|:
name|commit
operator|.
name|missing
control|)
block|{
name|m
operator|.
name|append
argument_list|(
literal|"* "
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|missingCommit
operator|.
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|capable
operator|=
operator|new
name|Capable
argument_list|(
name|m
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// It is impossible to submit this change as-is. The author
comment|// needs to rebase it in order to work around the missing
comment|// dependencies.
comment|//
name|StringBuilder
name|m
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"Change cannot be merged due to unsatisfiable dependencies.\n"
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"The following dependency errors were found:\n"
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|CodeReviewCommit
name|missingCommit
range|:
name|commit
operator|.
name|missing
control|)
block|{
if|if
condition|(
name|missingCommit
operator|.
name|getPatchsetId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|append
argument_list|(
literal|"* Depends on patch set "
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|missingCommit
operator|.
name|getPatchsetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|" of "
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|missingCommit
operator|.
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|abbreviate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|missingCommit
operator|.
name|getPatchsetId
argument_list|()
operator|.
name|get
argument_list|()
operator|!=
name|missingCommit
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
name|m
operator|.
name|append
argument_list|(
literal|", however the current patch set is "
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|missingCommit
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|append
argument_list|(
literal|".\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|append
argument_list|(
literal|"* Depends on commit "
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|missingCommit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|" which has no change associated with it.\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"Please rebase the change and upload a replacement commit."
argument_list|)
expr_stmt|;
name|capable
operator|=
operator|new
name|Capable
argument_list|(
name|m
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|capable
return|;
block|}
DECL|method|loadChangeInfo (final CodeReviewCommit commit)
specifier|private
name|void
name|loadChangeInfo
parameter_list|(
specifier|final
name|CodeReviewCommit
name|commit
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|OrmException
block|{
if|if
condition|(
name|commit
operator|.
name|getControl
argument_list|()
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|PatchSet
argument_list|>
name|matches
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|byRevision
argument_list|(
operator|new
name|RevId
argument_list|(
name|commit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
name|matches
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|PatchSet
name|ps
init|=
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|commit
operator|.
name|setPatchsetId
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setControl
argument_list|(
name|changeControl
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|message (final Change c, final String body)
specifier|private
name|ChangeMessage
name|message
parameter_list|(
specifier|final
name|Change
name|c
parameter_list|,
specifier|final
name|String
name|body
parameter_list|)
block|{
specifier|final
name|String
name|uuid
decl_stmt|;
try|try
block|{
name|uuid
operator|=
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|ChangeMessage
name|m
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|uuid
argument_list|)
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|m
operator|.
name|setMessage
argument_list|(
name|body
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
DECL|method|setMerged (Change c, ChangeMessage msg)
specifier|private
name|void
name|setMerged
parameter_list|(
name|Change
name|c
parameter_list|,
name|ChangeMessage
name|msg
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
try|try
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// We must pull the patchset out of commits, because the patchset ID is
comment|// modified when using the cherry-pick merge strategy.
name|CodeReviewCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|merged
init|=
name|commit
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|c
operator|=
name|setMergedPatchSet
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|merged
argument_list|)
expr_stmt|;
name|PatchSetApproval
name|submitter
init|=
name|approvalsUtil
operator|.
name|getSubmitter
argument_list|(
name|db
argument_list|,
name|commit
operator|.
name|notes
argument_list|()
argument_list|,
name|merged
argument_list|)
decl_stmt|;
name|addMergedMessage
argument_list|(
name|submitter
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
name|sendMergedEmail
argument_list|(
name|c
argument_list|,
name|submitter
argument_list|)
expr_stmt|;
if|if
condition|(
name|submitter
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|hooks
operator|.
name|doChangeMergedHook
argument_list|(
name|c
argument_list|,
name|accountCache
operator|.
name|get
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
argument_list|,
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|merged
argument_list|)
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot run hook for submitted patch set "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|setMergedPatchSet (Change.Id changeId, final PatchSet.Id merged)
specifier|private
name|Change
name|setMergedPatchSet
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
specifier|final
name|PatchSet
operator|.
name|Id
name|merged
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|changeId
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
name|c
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
comment|// It could be possible that the change being merged
comment|// has never had its mergeability tested. So we insure
comment|// merged changes has mergeable field true.
name|c
operator|.
name|setMergeable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|merged
operator|.
name|equals
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Uncool; the patch set changed after we merged it.
comment|// Go back to the patch set that was actually merged.
comment|//
try|try
block|{
name|c
operator|.
name|setCurrentPatchSet
argument_list|(
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|merged
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatchSetInfoNotAvailableException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot read merged patch set "
operator|+
name|merged
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|addMergedMessage (PatchSetApproval submitter, ChangeMessage msg)
specifier|private
name|void
name|addMergedMessage
parameter_list|(
name|PatchSetApproval
name|submitter
parameter_list|,
name|ChangeMessage
name|msg
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|submitter
operator|!=
literal|null
operator|&&
name|msg
operator|.
name|getAuthor
argument_list|()
operator|==
literal|null
condition|)
block|{
name|msg
operator|.
name|setAuthor
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendMergedEmail (final Change c, final PatchSetApproval from)
specifier|private
name|void
name|sendMergedEmail
parameter_list|(
specifier|final
name|Change
name|c
parameter_list|,
specifier|final
name|PatchSetApproval
name|from
parameter_list|)
block|{
name|workQueue
operator|.
name|getDefaultQueue
argument_list|()
operator|.
name|submit
argument_list|(
name|requestScopePropagator
operator|.
name|wrap
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|PatchSet
name|patchSet
decl_stmt|;
try|try
block|{
name|ReviewDb
name|reviewDb
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
name|patchSet
operator|=
name|reviewDb
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reviewDb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email for submitted patch set "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|MergedSender
name|cm
init|=
name|mergedSenderFactory
operator|.
name|create
argument_list|(
name|changeControl
argument_list|(
name|c
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
block|{
name|cm
operator|.
name|setFrom
argument_list|(
name|from
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cm
operator|.
name|setPatchSet
argument_list|(
name|patchSet
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email for submitted patch set "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"send-email merged"
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|changeControl (Change c)
specifier|private
name|ChangeControl
name|changeControl
parameter_list|(
name|Change
name|c
parameter_list|)
throws|throws
name|NoSuchChangeException
block|{
return|return
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|c
argument_list|,
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|c
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setNew (CodeReviewCommit c, ChangeMessage msg)
specifier|private
name|void
name|setNew
parameter_list|(
name|CodeReviewCommit
name|c
parameter_list|,
name|ChangeMessage
name|msg
parameter_list|)
block|{
name|sendMergeFail
argument_list|(
name|c
operator|.
name|notes
argument_list|()
argument_list|,
name|msg
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|setNew (Change c, ChangeMessage msg)
specifier|private
name|void
name|setNew
parameter_list|(
name|Change
name|c
parameter_list|,
name|ChangeMessage
name|msg
parameter_list|)
throws|throws
name|OrmException
block|{
name|sendMergeFail
argument_list|(
name|notesFactory
operator|.
name|create
argument_list|(
name|c
argument_list|)
argument_list|,
name|msg
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|enum|RetryStatus
specifier|private
enum|enum
name|RetryStatus
block|{
DECL|enumConstant|UNSUBMIT
DECL|enumConstant|RETRY_NO_MESSAGE
DECL|enumConstant|RETRY_ADD_MESSAGE
name|UNSUBMIT
block|,
name|RETRY_NO_MESSAGE
block|,
name|RETRY_ADD_MESSAGE
block|}
DECL|method|getRetryStatus ( @ullable PatchSetApproval submitter, ChangeMessage msg)
specifier|private
name|RetryStatus
name|getRetryStatus
parameter_list|(
annotation|@
name|Nullable
name|PatchSetApproval
name|submitter
parameter_list|,
name|ChangeMessage
name|msg
parameter_list|)
block|{
if|if
condition|(
name|submitter
operator|!=
literal|null
operator|&&
name|TimeUtil
operator|.
name|nowMs
argument_list|()
operator|-
name|submitter
operator|.
name|getGranted
argument_list|()
operator|.
name|getTime
argument_list|()
operator|>
name|MAX_SUBMIT_WINDOW
condition|)
block|{
return|return
name|RetryStatus
operator|.
name|UNSUBMIT
return|;
block|}
try|try
block|{
name|ChangeMessage
name|last
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|byChange
argument_list|(
name|msg
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|last
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|msg
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|last
operator|.
name|getMessage
argument_list|()
argument_list|,
name|msg
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|lastMs
init|=
name|last
operator|.
name|getWrittenOn
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|msgMs
init|=
name|msg
operator|.
name|getWrittenOn
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
return|return
name|msgMs
operator|-
name|lastMs
operator|>
name|MAX_SUBMIT_WINDOW
condition|?
name|RetryStatus
operator|.
name|UNSUBMIT
else|:
name|RetryStatus
operator|.
name|RETRY_NO_MESSAGE
return|;
block|}
block|}
return|return
name|RetryStatus
operator|.
name|RETRY_ADD_MESSAGE
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot check previous merge failure, unsubmitting"
argument_list|,
name|err
argument_list|)
expr_stmt|;
return|return
name|RetryStatus
operator|.
name|UNSUBMIT
return|;
block|}
block|}
DECL|method|sendMergeFail (ChangeNotes notes, final ChangeMessage msg, boolean makeNew)
specifier|private
name|void
name|sendMergeFail
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
specifier|final
name|ChangeMessage
name|msg
parameter_list|,
name|boolean
name|makeNew
parameter_list|)
block|{
name|PatchSetApproval
name|submitter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|submitter
operator|=
name|approvalsUtil
operator|.
name|getSubmitter
argument_list|(
name|db
argument_list|,
name|notes
argument_list|,
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot get submitter"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|makeNew
condition|)
block|{
name|RetryStatus
name|retryStatus
init|=
name|getRetryStatus
argument_list|(
name|submitter
argument_list|,
name|msg
argument_list|)
decl_stmt|;
if|if
condition|(
name|retryStatus
operator|==
name|RetryStatus
operator|.
name|RETRY_NO_MESSAGE
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|retryStatus
operator|==
name|RetryStatus
operator|.
name|UNSUBMIT
condition|)
block|{
name|makeNew
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|final
name|boolean
name|setStatusNew
init|=
name|makeNew
decl_stmt|;
specifier|final
name|Change
name|c
init|=
name|notes
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|Change
name|change
init|=
literal|null
decl_stmt|;
try|try
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
if|if
condition|(
name|setStatusNew
condition|)
block|{
name|c
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot record merge failure message"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
name|CheckedFuture
argument_list|<
name|?
argument_list|,
name|IOException
argument_list|>
name|indexFuture
decl_stmt|;
if|if
condition|(
name|change
operator|!=
literal|null
condition|)
block|{
name|indexFuture
operator|=
name|indexer
operator|.
name|indexAsync
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexFuture
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|PatchSetApproval
name|from
init|=
name|submitter
decl_stmt|;
name|workQueue
operator|.
name|getDefaultQueue
argument_list|()
operator|.
name|submit
argument_list|(
name|requestScopePropagator
operator|.
name|wrap
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|PatchSet
name|patchSet
decl_stmt|;
try|try
block|{
name|ReviewDb
name|reviewDb
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
name|patchSet
operator|=
name|reviewDb
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reviewDb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email notifications about merge failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
specifier|final
name|MergeFailSender
name|cm
init|=
name|mergeFailSenderFactory
operator|.
name|create
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
block|{
name|cm
operator|.
name|setFrom
argument_list|(
name|from
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cm
operator|.
name|setPatchSet
argument_list|(
name|patchSet
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setChangeMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email notifications about merge failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"send-email merge-failed"
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|submitter
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|hooks
operator|.
name|doMergeFailedHook
argument_list|(
name|c
argument_list|,
name|accountCache
operator|.
name|get
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
argument_list|,
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|,
name|msg
operator|.
name|getMessage
argument_list|()
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot run hook for merge failed "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indexFuture
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|indexFuture
operator|.
name|checkedGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to index new change message"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|abandonAllOpenChanges ()
specifier|private
name|void
name|abandonAllOpenChanges
parameter_list|()
block|{
name|Exception
name|err
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openSchema
argument_list|()
expr_stmt|;
for|for
control|(
name|Change
name|c
range|:
name|db
operator|.
name|changes
argument_list|()
operator|.
name|byProjectOpenAll
argument_list|(
name|destBranch
operator|.
name|getParentKey
argument_list|()
argument_list|)
control|)
block|{
name|abandonOneChange
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
name|db
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|err
operator|=
name|e
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|err
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot abandon changes for deleted project %s"
argument_list|,
name|destBranch
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|abandonOneChange (Change change)
specifier|private
name|void
name|abandonOneChange
parameter_list|(
name|Change
name|change
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|!=
literal|null
condition|)
block|{
name|ChangeMessage
name|msg
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|change
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|,
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setMessage
argument_list|(
literal|"Project was deleted."
argument_list|)
expr_stmt|;
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

