begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MINUTES
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|ChangeHooks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Capable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetAncestor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MergeFailSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MergedSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestScopePropagator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|workflow
operator|.
name|CategoryFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|workflow
operator|.
name|FunctionState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|AtomicUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmConcurrencyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AnyObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|merge
operator|.
name|MergeStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|merge
operator|.
name|Merger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|merge
operator|.
name|ThreeWayMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Merges changes in submission order into a single branch.  *<p>  * Branches are reduced to the minimum number of heads needed to merge  * everything. This allows commits to be entered into the queue in any order  * (such as ancestors before descendants) and only the most recent commit on any  * line of development will be merged. All unmerged commits along a line of  * development must be in the submission queue in order to merge the tip of that  * line.  *<p>  * Conflicts are handled by discarding the entire line of development and  * marking it as conflicting, even if an earlier commit along that same line can  * be merged cleanly.  */
end_comment

begin_class
DECL|class|MergeOp
specifier|public
class|class
name|MergeOp
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (Branch.NameKey branch)
name|MergeOp
name|create
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
function_decl|;
block|}
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MergeOp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|R_HEADS_MASTER
specifier|private
specifier|static
specifier|final
name|String
name|R_HEADS_MASTER
init|=
name|Constants
operator|.
name|R_HEADS
operator|+
name|Constants
operator|.
name|MASTER
decl_stmt|;
DECL|field|CRVW
specifier|private
specifier|static
specifier|final
name|ApprovalCategory
operator|.
name|Id
name|CRVW
init|=
operator|new
name|ApprovalCategory
operator|.
name|Id
argument_list|(
literal|"CRVW"
argument_list|)
decl_stmt|;
DECL|field|VRIF
specifier|private
specifier|static
specifier|final
name|ApprovalCategory
operator|.
name|Id
name|VRIF
init|=
operator|new
name|ApprovalCategory
operator|.
name|Id
argument_list|(
literal|"VRIF"
argument_list|)
decl_stmt|;
DECL|field|REVIEWED_ON
specifier|private
specifier|static
specifier|final
name|FooterKey
name|REVIEWED_ON
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Reviewed-on"
argument_list|)
decl_stmt|;
DECL|field|CHANGE_ID
specifier|private
specifier|static
specifier|final
name|FooterKey
name|CHANGE_ID
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Change-Id"
argument_list|)
decl_stmt|;
comment|/** Amount of time to wait between submit and checking for missing deps. */
DECL|field|DEPENDENCY_DELAY
specifier|private
specifier|static
specifier|final
name|long
name|DEPENDENCY_DELAY
init|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|15
argument_list|,
name|MINUTES
argument_list|)
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|schemaFactory
specifier|private
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|functionState
specifier|private
specifier|final
name|FunctionState
operator|.
name|Factory
name|functionState
decl_stmt|;
DECL|field|replication
specifier|private
specifier|final
name|GitReferenceUpdated
name|replication
decl_stmt|;
DECL|field|mergedSenderFactory
specifier|private
specifier|final
name|MergedSender
operator|.
name|Factory
name|mergedSenderFactory
decl_stmt|;
DECL|field|mergeFailSenderFactory
specifier|private
specifier|final
name|MergeFailSender
operator|.
name|Factory
name|mergeFailSenderFactory
decl_stmt|;
DECL|field|urlProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|String
argument_list|>
name|urlProvider
decl_stmt|;
DECL|field|approvalTypes
specifier|private
specifier|final
name|ApprovalTypes
name|approvalTypes
decl_stmt|;
DECL|field|patchSetInfoFactory
specifier|private
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
decl_stmt|;
DECL|field|identifiedUserFactory
specifier|private
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
decl_stmt|;
DECL|field|changeControlFactory
specifier|private
specifier|final
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
DECL|field|mergeQueue
specifier|private
specifier|final
name|MergeQueue
name|mergeQueue
decl_stmt|;
DECL|field|myIdent
specifier|private
specifier|final
name|PersonIdent
name|myIdent
decl_stmt|;
DECL|field|destBranch
specifier|private
specifier|final
name|Branch
operator|.
name|NameKey
name|destBranch
decl_stmt|;
DECL|field|destProject
specifier|private
name|Project
name|destProject
decl_stmt|;
DECL|field|toMerge
specifier|private
specifier|final
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|toMerge
decl_stmt|;
DECL|field|submitted
specifier|private
name|List
argument_list|<
name|Change
argument_list|>
name|submitted
decl_stmt|;
DECL|field|commits
specifier|private
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|CodeReviewCommit
argument_list|>
name|commits
decl_stmt|;
DECL|field|db
specifier|private
name|ReviewDb
name|db
decl_stmt|;
DECL|field|repo
specifier|private
name|Repository
name|repo
decl_stmt|;
DECL|field|rw
specifier|private
name|RevWalk
name|rw
decl_stmt|;
DECL|field|CAN_MERGE
specifier|private
name|RevFlag
name|CAN_MERGE
decl_stmt|;
DECL|field|branchTip
specifier|private
name|CodeReviewCommit
name|branchTip
decl_stmt|;
DECL|field|mergeTip
specifier|private
name|CodeReviewCommit
name|mergeTip
decl_stmt|;
DECL|field|alreadyAccepted
specifier|private
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|alreadyAccepted
decl_stmt|;
DECL|field|branchUpdate
specifier|private
name|RefUpdate
name|branchUpdate
decl_stmt|;
DECL|field|inserter
specifier|private
name|ObjectInserter
name|inserter
decl_stmt|;
DECL|field|hooks
specifier|private
specifier|final
name|ChangeHooks
name|hooks
decl_stmt|;
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|tagCache
specifier|private
specifier|final
name|TagCache
name|tagCache
decl_stmt|;
DECL|field|codeReviewNotesFactory
specifier|private
specifier|final
name|CreateCodeReviewNotes
operator|.
name|Factory
name|codeReviewNotesFactory
decl_stmt|;
DECL|field|subOpFactory
specifier|private
specifier|final
name|SubmoduleOp
operator|.
name|Factory
name|subOpFactory
decl_stmt|;
DECL|field|workQueue
specifier|private
specifier|final
name|WorkQueue
name|workQueue
decl_stmt|;
DECL|field|requestScopePropagator
specifier|private
specifier|final
name|RequestScopePropagator
name|requestScopePropagator
decl_stmt|;
annotation|@
name|Inject
DECL|method|MergeOp (final GitRepositoryManager grm, final SchemaFactory<ReviewDb> sf, final ProjectCache pc, final FunctionState.Factory fs, final GitReferenceUpdated rq, final MergedSender.Factory msf, final MergeFailSender.Factory mfsf, @CanonicalWebUrl @Nullable final Provider<String> cwu, final ApprovalTypes approvalTypes, final PatchSetInfoFactory psif, final IdentifiedUser.GenericFactory iuf, final ChangeControl.GenericFactory changeControlFactory, @GerritPersonIdent final PersonIdent myIdent, final MergeQueue mergeQueue, @Assisted final Branch.NameKey branch, final ChangeHooks hooks, final AccountCache accountCache, final TagCache tagCache, final CreateCodeReviewNotes.Factory crnf, final SubmoduleOp.Factory subOpFactory, final WorkQueue workQueue, final RequestScopePropagator requestScopePropagator)
name|MergeOp
parameter_list|(
specifier|final
name|GitRepositoryManager
name|grm
parameter_list|,
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|sf
parameter_list|,
specifier|final
name|ProjectCache
name|pc
parameter_list|,
specifier|final
name|FunctionState
operator|.
name|Factory
name|fs
parameter_list|,
specifier|final
name|GitReferenceUpdated
name|rq
parameter_list|,
specifier|final
name|MergedSender
operator|.
name|Factory
name|msf
parameter_list|,
specifier|final
name|MergeFailSender
operator|.
name|Factory
name|mfsf
parameter_list|,
annotation|@
name|CanonicalWebUrl
annotation|@
name|Nullable
specifier|final
name|Provider
argument_list|<
name|String
argument_list|>
name|cwu
parameter_list|,
specifier|final
name|ApprovalTypes
name|approvalTypes
parameter_list|,
specifier|final
name|PatchSetInfoFactory
name|psif
parameter_list|,
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|iuf
parameter_list|,
specifier|final
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
parameter_list|,
annotation|@
name|GerritPersonIdent
specifier|final
name|PersonIdent
name|myIdent
parameter_list|,
specifier|final
name|MergeQueue
name|mergeQueue
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|,
specifier|final
name|ChangeHooks
name|hooks
parameter_list|,
specifier|final
name|AccountCache
name|accountCache
parameter_list|,
specifier|final
name|TagCache
name|tagCache
parameter_list|,
specifier|final
name|CreateCodeReviewNotes
operator|.
name|Factory
name|crnf
parameter_list|,
specifier|final
name|SubmoduleOp
operator|.
name|Factory
name|subOpFactory
parameter_list|,
specifier|final
name|WorkQueue
name|workQueue
parameter_list|,
specifier|final
name|RequestScopePropagator
name|requestScopePropagator
parameter_list|)
block|{
name|repoManager
operator|=
name|grm
expr_stmt|;
name|schemaFactory
operator|=
name|sf
expr_stmt|;
name|functionState
operator|=
name|fs
expr_stmt|;
name|projectCache
operator|=
name|pc
expr_stmt|;
name|replication
operator|=
name|rq
expr_stmt|;
name|mergedSenderFactory
operator|=
name|msf
expr_stmt|;
name|mergeFailSenderFactory
operator|=
name|mfsf
expr_stmt|;
name|urlProvider
operator|=
name|cwu
expr_stmt|;
name|this
operator|.
name|approvalTypes
operator|=
name|approvalTypes
expr_stmt|;
name|patchSetInfoFactory
operator|=
name|psif
expr_stmt|;
name|identifiedUserFactory
operator|=
name|iuf
expr_stmt|;
name|this
operator|.
name|changeControlFactory
operator|=
name|changeControlFactory
expr_stmt|;
name|this
operator|.
name|mergeQueue
operator|=
name|mergeQueue
expr_stmt|;
name|this
operator|.
name|hooks
operator|=
name|hooks
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|tagCache
operator|=
name|tagCache
expr_stmt|;
name|codeReviewNotesFactory
operator|=
name|crnf
expr_stmt|;
name|this
operator|.
name|subOpFactory
operator|=
name|subOpFactory
expr_stmt|;
name|this
operator|.
name|workQueue
operator|=
name|workQueue
expr_stmt|;
name|this
operator|.
name|requestScopePropagator
operator|=
name|requestScopePropagator
expr_stmt|;
name|this
operator|.
name|myIdent
operator|=
name|myIdent
expr_stmt|;
name|destBranch
operator|=
name|branch
expr_stmt|;
name|toMerge
operator|=
operator|new
name|ArrayList
argument_list|<
name|CodeReviewCommit
argument_list|>
argument_list|()
expr_stmt|;
name|commits
operator|=
operator|new
name|HashMap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|CodeReviewCommit
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyMergeability (Change change)
specifier|public
name|void
name|verifyMergeability
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
try|try
block|{
name|setDestProject
argument_list|()
expr_stmt|;
name|openRepository
argument_list|()
expr_stmt|;
specifier|final
name|Ref
name|destBranchRef
init|=
name|repo
operator|.
name|getRef
argument_list|(
name|destBranch
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|submitted
operator|=
operator|new
name|ArrayList
argument_list|<
name|Change
argument_list|>
argument_list|()
expr_stmt|;
name|submitted
operator|.
name|add
argument_list|(
name|change
argument_list|)
expr_stmt|;
comment|// Test mergeability of the change if the last merged sha1
comment|// in the branch is different from the last sha1
comment|// the change was tested against.
if|if
condition|(
operator|(
name|destBranchRef
operator|==
literal|null
operator|&&
name|change
operator|.
name|getLastSha1MergeTested
argument_list|()
operator|==
literal|null
operator|)
operator|||
name|change
operator|.
name|getLastSha1MergeTested
argument_list|()
operator|==
literal|null
operator|||
operator|(
name|destBranchRef
operator|!=
literal|null
operator|&&
operator|!
name|destBranchRef
operator|.
name|getObjectId
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getLastSha1MergeTested
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|openSchema
argument_list|()
expr_stmt|;
name|preMerge
argument_list|()
expr_stmt|;
comment|// update sha1 tested merge.
if|if
condition|(
name|destBranchRef
operator|!=
literal|null
condition|)
block|{
name|change
operator|.
name|setLastSha1MergeTested
argument_list|(
operator|new
name|RevId
argument_list|(
name|destBranchRef
operator|.
name|getObjectId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|change
operator|.
name|setLastSha1MergeTested
argument_list|(
operator|new
name|RevId
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|change
operator|.
name|setMergeable
argument_list|(
name|isMergeable
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MergeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Test merge attempt for change: "
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|" failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Test merge attempt for change: "
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|" failed: Not able to query the database"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Test merge attempt for change: "
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|" failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setDestProject ()
specifier|private
name|void
name|setDestProject
parameter_list|()
throws|throws
name|MergeException
block|{
specifier|final
name|ProjectState
name|pe
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|destBranch
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pe
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"No such project: "
operator|+
name|destBranch
operator|.
name|getParentKey
argument_list|()
argument_list|)
throw|;
block|}
name|destProject
operator|=
name|pe
operator|.
name|getProject
argument_list|()
expr_stmt|;
block|}
DECL|method|openSchema ()
specifier|private
name|void
name|openSchema
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|merge ()
specifier|public
name|void
name|merge
parameter_list|()
throws|throws
name|MergeException
block|{
name|setDestProject
argument_list|()
expr_stmt|;
try|try
block|{
name|openSchema
argument_list|()
expr_stmt|;
name|openRepository
argument_list|()
expr_stmt|;
name|submitted
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|submitted
argument_list|(
name|destBranch
argument_list|)
operator|.
name|toList
argument_list|()
expr_stmt|;
name|preMerge
argument_list|()
expr_stmt|;
name|updateBranch
argument_list|()
expr_stmt|;
name|updateChangeStatus
argument_list|()
expr_stmt|;
name|updateSubscriptions
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot query the database"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|inserter
operator|!=
literal|null
condition|)
block|{
name|inserter
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rw
operator|!=
literal|null
condition|)
block|{
name|rw
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|preMerge ()
specifier|private
name|void
name|preMerge
parameter_list|()
throws|throws
name|MergeException
throws|,
name|OrmException
block|{
name|openBranch
argument_list|()
expr_stmt|;
name|validateChangeList
argument_list|()
expr_stmt|;
name|mergeTip
operator|=
name|branchTip
expr_stmt|;
switch|switch
condition|(
name|destProject
operator|.
name|getSubmitType
argument_list|()
condition|)
block|{
case|case
name|CHERRY_PICK
case|:
name|cherryPickChanges
argument_list|()
expr_stmt|;
break|break;
case|case
name|FAST_FORWARD_ONLY
case|:
case|case
name|MERGE_ALWAYS
case|:
case|case
name|MERGE_IF_NECESSARY
case|:
default|default:
name|reduceToMinimalMerge
argument_list|()
expr_stmt|;
name|mergeTopics
argument_list|()
expr_stmt|;
name|markCleanMerges
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
DECL|method|openRepository ()
specifier|private
name|void
name|openRepository
parameter_list|()
throws|throws
name|MergeException
block|{
specifier|final
name|Project
operator|.
name|NameKey
name|name
init|=
name|destBranch
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
try|try
block|{
name|repo
operator|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|notGit
parameter_list|)
block|{
specifier|final
name|String
name|m
init|=
literal|"Repository \""
operator|+
name|name
operator|.
name|get
argument_list|()
operator|+
literal|"\" unknown."
decl_stmt|;
throw|throw
operator|new
name|MergeException
argument_list|(
name|m
argument_list|,
name|notGit
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
specifier|final
name|String
name|m
init|=
literal|"Error opening repository \""
operator|+
name|name
operator|.
name|get
argument_list|()
operator|+
literal|'"'
decl_stmt|;
throw|throw
operator|new
name|MergeException
argument_list|(
name|m
argument_list|,
name|err
argument_list|)
throw|;
block|}
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RevCommit
name|createCommit
parameter_list|(
specifier|final
name|AnyObjectId
name|id
parameter_list|)
block|{
return|return
operator|new
name|CodeReviewCommit
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|COMMIT_TIME_DESC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CAN_MERGE
operator|=
name|rw
operator|.
name|newFlag
argument_list|(
literal|"CAN_MERGE"
argument_list|)
expr_stmt|;
name|inserter
operator|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
expr_stmt|;
block|}
DECL|method|openBranch ()
specifier|private
name|void
name|openBranch
parameter_list|()
throws|throws
name|MergeException
block|{
name|alreadyAccepted
operator|=
operator|new
name|HashSet
argument_list|<
name|RevCommit
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|branchUpdate
operator|=
name|repo
operator|.
name|updateRef
argument_list|(
name|destBranch
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|branchUpdate
operator|.
name|getOldObjectId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|branchTip
operator|=
operator|(
name|CodeReviewCommit
operator|)
name|rw
operator|.
name|parseCommit
argument_list|(
name|branchUpdate
operator|.
name|getOldObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|alreadyAccepted
operator|.
name|add
argument_list|(
name|branchTip
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|branchTip
operator|=
literal|null
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|Ref
name|destRef
init|=
name|repo
operator|.
name|getRef
argument_list|(
name|destBranch
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|destRef
operator|!=
literal|null
condition|)
block|{
name|branchUpdate
operator|.
name|setExpectedOldObjectId
argument_list|(
name|destRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|repo
operator|.
name|getFullBranch
argument_list|()
operator|.
name|equals
argument_list|(
name|destBranch
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|branchUpdate
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Destination branch \""
operator|+
name|branchUpdate
operator|.
name|getRef
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"\" does not exist"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Failed to check existence of destination branch"
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
specifier|final
name|Ref
name|r
range|:
name|repo
operator|.
name|getAllRefs
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
operator|||
name|r
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_TAGS
argument_list|)
condition|)
block|{
try|try
block|{
name|alreadyAccepted
operator|.
name|add
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|iote
parameter_list|)
block|{
comment|// Not a commit? Skip over it.
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot open branch"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|validateChangeList ()
specifier|private
name|void
name|validateChangeList
parameter_list|()
throws|throws
name|MergeException
block|{
specifier|final
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|tips
init|=
operator|new
name|HashSet
argument_list|<
name|ObjectId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Ref
name|r
range|:
name|repo
operator|.
name|getAllRefs
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|tips
operator|.
name|add
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|commitOrder
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Change
name|chg
range|:
name|submitted
control|)
block|{
specifier|final
name|Change
operator|.
name|Id
name|changeId
init|=
name|chg
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|chg
operator|.
name|currentPatchSetId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|CodeReviewCommit
operator|.
name|error
argument_list|(
name|CommitMergeStatus
operator|.
name|NO_PATCH_SET
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|PatchSet
name|ps
decl_stmt|;
try|try
block|{
name|ps
operator|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|chg
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot query the database"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|ps
operator|==
literal|null
operator|||
name|ps
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
operator|||
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|CodeReviewCommit
operator|.
name|error
argument_list|(
name|CommitMergeStatus
operator|.
name|NO_PATCH_SET
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|idstr
init|=
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|ObjectId
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|idstr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|CodeReviewCommit
operator|.
name|error
argument_list|(
name|CommitMergeStatus
operator|.
name|NO_PATCH_SET
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|tips
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
comment|// TODO Technically the proper way to do this test is to use a
comment|// RevWalk on "$id --not --all" and test for an empty set. But
comment|// that is way slower than looking for a ref directly pointing
comment|// at the desired tip. We should always have a ref available.
comment|//
comment|// TODO this is actually an error, the branch is gone but we
comment|// want to merge the issue. We can't safely do that if the
comment|// tip is not reachable.
comment|//
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|CodeReviewCommit
operator|.
name|error
argument_list|(
name|CommitMergeStatus
operator|.
name|REVISION_GONE
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|CodeReviewCommit
name|commit
decl_stmt|;
try|try
block|{
name|commit
operator|=
operator|(
name|CodeReviewCommit
operator|)
name|rw
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid commit "
operator|+
name|id
operator|.
name|name
argument_list|()
operator|+
literal|" on "
operator|+
name|chg
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|CodeReviewCommit
operator|.
name|error
argument_list|(
name|CommitMergeStatus
operator|.
name|REVISION_GONE
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|commit
operator|.
name|change
operator|=
name|chg
expr_stmt|;
name|commit
operator|.
name|patchsetId
operator|=
name|ps
operator|.
name|getId
argument_list|()
expr_stmt|;
name|commit
operator|.
name|originalOrder
operator|=
name|commitOrder
operator|++
expr_stmt|;
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|commit
argument_list|)
expr_stmt|;
if|if
condition|(
name|branchTip
operator|!=
literal|null
condition|)
block|{
comment|// If this commit is already merged its a bug in the queuing code
comment|// that we got back here. Just mark it complete and move on. Its
comment|// merged and that is all that mattered to the requestor.
comment|//
try|try
block|{
if|if
condition|(
name|rw
operator|.
name|isMergedInto
argument_list|(
name|commit
argument_list|,
name|branchTip
argument_list|)
condition|)
block|{
name|commit
operator|.
name|statusCode
operator|=
name|CommitMergeStatus
operator|.
name|ALREADY_MERGED
expr_stmt|;
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot perform merge base test"
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
name|commit
operator|.
name|add
argument_list|(
name|CAN_MERGE
argument_list|)
expr_stmt|;
name|toMerge
operator|.
name|add
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reduceToMinimalMerge ()
specifier|private
name|void
name|reduceToMinimalMerge
parameter_list|()
throws|throws
name|MergeException
block|{
specifier|final
name|Collection
argument_list|<
name|CodeReviewCommit
argument_list|>
name|heads
decl_stmt|;
try|try
block|{
name|heads
operator|=
operator|new
name|MergeSorter
argument_list|(
name|rw
argument_list|,
name|alreadyAccepted
argument_list|,
name|CAN_MERGE
argument_list|)
operator|.
name|sort
argument_list|(
name|toMerge
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Branch head sorting failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|toMerge
operator|.
name|clear
argument_list|()
expr_stmt|;
name|toMerge
operator|.
name|addAll
argument_list|(
name|heads
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|toMerge
argument_list|,
operator|new
name|Comparator
argument_list|<
name|CodeReviewCommit
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|CodeReviewCommit
name|a
parameter_list|,
specifier|final
name|CodeReviewCommit
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|originalOrder
operator|-
name|b
operator|.
name|originalOrder
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|mergeTopics ()
specifier|private
name|void
name|mergeTopics
parameter_list|()
throws|throws
name|MergeException
block|{
comment|// Take the first fast-forward available, if any is available in the set.
comment|//
if|if
condition|(
name|destProject
operator|.
name|getSubmitType
argument_list|()
operator|!=
name|Project
operator|.
name|SubmitType
operator|.
name|MERGE_ALWAYS
condition|)
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|CodeReviewCommit
argument_list|>
name|i
init|=
name|toMerge
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
try|try
block|{
specifier|final
name|CodeReviewCommit
name|n
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|mergeTip
operator|==
literal|null
operator|||
name|rw
operator|.
name|isMergedInto
argument_list|(
name|mergeTip
argument_list|,
name|n
argument_list|)
condition|)
block|{
name|mergeTip
operator|=
name|n
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot fast-forward test during merge"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|destProject
operator|.
name|getSubmitType
argument_list|()
operator|==
name|Project
operator|.
name|SubmitType
operator|.
name|FAST_FORWARD_ONLY
condition|)
block|{
comment|// If this project only permits fast-forwards, abort everything else.
comment|//
while|while
condition|(
operator|!
name|toMerge
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|CodeReviewCommit
name|n
init|=
name|toMerge
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|n
operator|.
name|statusCode
operator|=
name|CommitMergeStatus
operator|.
name|NOT_FAST_FORWARD
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// For every other commit do a pair-wise merge.
comment|//
while|while
condition|(
operator|!
name|toMerge
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mergeOneCommit
argument_list|(
name|toMerge
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|mergeOneCommit (final CodeReviewCommit n)
specifier|private
name|void
name|mergeOneCommit
parameter_list|(
specifier|final
name|CodeReviewCommit
name|n
parameter_list|)
throws|throws
name|MergeException
block|{
specifier|final
name|ThreeWayMerger
name|m
init|=
name|newThreeWayMerger
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|m
operator|.
name|merge
argument_list|(
operator|new
name|AnyObjectId
index|[]
block|{
name|mergeTip
operator|,
name|n
block|}
block|)
block|)
block|{
name|writeMergeCommit
argument_list|(
name|m
operator|.
name|getResultTreeId
argument_list|()
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failed
argument_list|(
name|n
argument_list|,
name|CommitMergeStatus
operator|.
name|PATH_CONFLICT
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_catch
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Multiple merge bases for"
argument_list|)
condition|)
block|{
try|try
block|{
name|failed
argument_list|(
name|n
argument_list|,
name|CommitMergeStatus
operator|.
name|CRISS_CROSS_MERGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e2
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot merge "
operator|+
name|n
operator|.
name|name
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot merge "
operator|+
name|n
operator|.
name|name
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_catch

begin_function
unit|}    private
DECL|method|newThreeWayMerger ()
name|ThreeWayMerger
name|newThreeWayMerger
parameter_list|()
block|{
name|ThreeWayMerger
name|m
decl_stmt|;
if|if
condition|(
name|destProject
operator|.
name|isUseContentMerge
argument_list|()
condition|)
block|{
comment|// Settings for this project allow us to try and
comment|// automatically resolve conflicts within files if needed.
comment|// Use ResolveMerge and instruct to operate in core.
name|m
operator|=
name|MergeStrategy
operator|.
name|RESOLVE
operator|.
name|newMerger
argument_list|(
name|repo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No auto conflict resolving allowed. If any of the
comment|// affected files was modified, merge will fail.
name|m
operator|=
name|MergeStrategy
operator|.
name|SIMPLE_TWO_WAY_IN_CORE
operator|.
name|newMerger
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|setObjectInserter
argument_list|(
operator|new
name|ObjectInserter
operator|.
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ObjectInserter
name|delegate
parameter_list|()
block|{
return|return
name|inserter
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{       }
annotation|@
name|Override
specifier|public
name|void
name|release
parameter_list|()
block|{       }
block|}
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
end_function

begin_function
DECL|method|failed (final CodeReviewCommit n, final CommitMergeStatus failure)
specifier|private
name|CodeReviewCommit
name|failed
parameter_list|(
specifier|final
name|CodeReviewCommit
name|n
parameter_list|,
specifier|final
name|CommitMergeStatus
name|failure
parameter_list|)
throws|throws
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
throws|,
name|IOException
block|{
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markUninteresting
argument_list|(
name|mergeTip
argument_list|)
expr_stmt|;
name|CodeReviewCommit
name|failed
decl_stmt|;
while|while
condition|(
operator|(
name|failed
operator|=
operator|(
name|CodeReviewCommit
operator|)
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|failed
operator|.
name|statusCode
operator|=
name|failure
expr_stmt|;
block|}
return|return
name|failed
return|;
block|}
end_function

begin_function
DECL|method|writeMergeCommit (ObjectId treeId, CodeReviewCommit n)
specifier|private
name|void
name|writeMergeCommit
parameter_list|(
name|ObjectId
name|treeId
parameter_list|,
name|CodeReviewCommit
name|n
parameter_list|)
throws|throws
name|IOException
throws|,
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
block|{
specifier|final
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|merged
init|=
operator|new
name|ArrayList
argument_list|<
name|CodeReviewCommit
argument_list|>
argument_list|()
decl_stmt|;
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markUninteresting
argument_list|(
name|mergeTip
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|RevCommit
name|c
range|:
name|rw
control|)
block|{
specifier|final
name|CodeReviewCommit
name|crc
init|=
operator|(
name|CodeReviewCommit
operator|)
name|c
decl_stmt|;
if|if
condition|(
name|crc
operator|.
name|patchsetId
operator|!=
literal|null
condition|)
block|{
name|merged
operator|.
name|add
argument_list|(
name|crc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|StringBuilder
name|msgbuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|merged
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|CodeReviewCommit
name|c
init|=
name|merged
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|"Merge \""
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|c
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msgbuf
operator|.
name|append
argument_list|(
literal|"Merge changes "
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|CodeReviewCommit
argument_list|>
name|i
init|=
name|merged
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|abbreviate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|R_HEADS_MASTER
operator|.
name|equals
argument_list|(
name|destBranch
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
literal|" into "
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|destBranch
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|merged
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
literal|"\n\n* changes:\n"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|CodeReviewCommit
name|c
range|:
name|merged
control|)
block|{
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|c
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|PersonIdent
name|authorIdent
init|=
name|computeAuthor
argument_list|(
name|merged
argument_list|)
decl_stmt|;
specifier|final
name|CommitBuilder
name|mergeCommit
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|mergeCommit
operator|.
name|setTreeId
argument_list|(
name|treeId
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setParentIds
argument_list|(
name|mergeTip
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setAuthor
argument_list|(
name|authorIdent
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setCommitter
argument_list|(
name|myIdent
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setMessage
argument_list|(
name|msgbuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mergeTip
operator|=
operator|(
name|CodeReviewCommit
operator|)
name|rw
operator|.
name|parseCommit
argument_list|(
name|commit
argument_list|(
name|mergeCommit
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|computeAuthor ( final List<CodeReviewCommit> codeReviewCommits)
specifier|private
name|PersonIdent
name|computeAuthor
parameter_list|(
specifier|final
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|codeReviewCommits
parameter_list|)
block|{
name|PatchSetApproval
name|submitter
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|CodeReviewCommit
name|c
range|:
name|codeReviewCommits
control|)
block|{
name|PatchSetApproval
name|s
init|=
name|getSubmitter
argument_list|(
name|db
argument_list|,
name|c
operator|.
name|patchsetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|submitter
operator|==
literal|null
operator|||
operator|(
name|s
operator|!=
literal|null
operator|&&
name|s
operator|.
name|getGranted
argument_list|()
operator|.
name|compareTo
argument_list|(
name|submitter
operator|.
name|getGranted
argument_list|()
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
name|submitter
operator|=
name|s
expr_stmt|;
block|}
block|}
comment|// Try to use the submitter's identity for the merge commit author.
comment|// If all of the commits being merged are created by the submitter,
comment|// prefer the identity line they used in the commits rather than the
comment|// preferred identity stored in the user account. This way the Git
comment|// commit records are more consistent internally.
comment|//
name|PersonIdent
name|authorIdent
decl_stmt|;
if|if
condition|(
name|submitter
operator|!=
literal|null
condition|)
block|{
name|IdentifiedUser
name|who
init|=
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|emails
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RevCommit
name|c
range|:
name|codeReviewCommits
control|)
block|{
try|try
block|{
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot parse commit "
operator|+
name|c
operator|.
name|name
argument_list|()
operator|+
literal|" in "
operator|+
name|destBranch
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|emails
operator|.
name|add
argument_list|(
name|c
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Timestamp
name|dt
init|=
name|submitter
operator|.
name|getGranted
argument_list|()
decl_stmt|;
specifier|final
name|TimeZone
name|tz
init|=
name|myIdent
operator|.
name|getTimeZone
argument_list|()
decl_stmt|;
if|if
condition|(
name|emails
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|who
operator|.
name|getEmailAddresses
argument_list|()
operator|.
name|contains
argument_list|(
name|emails
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
name|authorIdent
operator|=
operator|new
name|PersonIdent
argument_list|(
name|codeReviewCommits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAuthorIdent
argument_list|()
argument_list|,
name|dt
argument_list|,
name|tz
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authorIdent
operator|=
name|who
operator|.
name|newCommitterIdent
argument_list|(
name|dt
argument_list|,
name|tz
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|authorIdent
operator|=
name|myIdent
expr_stmt|;
block|}
return|return
name|authorIdent
return|;
block|}
end_function

begin_function
DECL|method|markCleanMerges ()
specifier|private
name|void
name|markCleanMerges
parameter_list|()
throws|throws
name|MergeException
block|{
if|if
condition|(
name|mergeTip
operator|==
literal|null
condition|)
block|{
comment|// If mergeTip is null here, branchTip was null, indicating a new branch
comment|// at the start of the merge process. We also elected to merge nothing,
comment|// probably due to missing dependencies. Nothing was cleanly merged.
comment|//
return|return;
block|}
try|try
block|{
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|mergeTip
argument_list|)
expr_stmt|;
for|for
control|(
name|RevCommit
name|c
range|:
name|alreadyAccepted
control|)
block|{
name|rw
operator|.
name|markUninteresting
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|CodeReviewCommit
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
operator|(
name|CodeReviewCommit
operator|)
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|patchsetId
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|statusCode
operator|=
name|CommitMergeStatus
operator|.
name|CLEAN_MERGE
expr_stmt|;
if|if
condition|(
name|branchUpdate
operator|.
name|getRefLogIdent
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setRefLogIdent
argument_list|(
name|getSubmitter
argument_list|(
name|db
argument_list|,
name|c
operator|.
name|patchsetId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot mark clean merges"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|setRefLogIdent (final PatchSetApproval submitAudit)
specifier|private
name|void
name|setRefLogIdent
parameter_list|(
specifier|final
name|PatchSetApproval
name|submitAudit
parameter_list|)
block|{
if|if
condition|(
name|submitAudit
operator|!=
literal|null
condition|)
block|{
name|branchUpdate
operator|.
name|setRefLogIdent
argument_list|(
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|submitAudit
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|newRefLogIdent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|cherryPickChanges ()
specifier|private
name|void
name|cherryPickChanges
parameter_list|()
throws|throws
name|MergeException
throws|,
name|OrmException
block|{
while|while
condition|(
operator|!
name|toMerge
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|CodeReviewCommit
name|n
init|=
name|toMerge
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ThreeWayMerger
name|m
init|=
name|newThreeWayMerger
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|mergeTip
operator|==
literal|null
condition|)
block|{
comment|// The branch is unborn. Take a fast-forward resolution to
comment|// create the branch.
comment|//
name|mergeTip
operator|=
name|n
expr_stmt|;
name|n
operator|.
name|statusCode
operator|=
name|CommitMergeStatus
operator|.
name|CLEAN_MERGE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
operator|.
name|getParentCount
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Refuse to merge a root commit into an existing branch,
comment|// we cannot obtain a delta for the cherry-pick to apply.
comment|//
name|n
operator|.
name|statusCode
operator|=
name|CommitMergeStatus
operator|.
name|CANNOT_CHERRY_PICK_ROOT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
operator|.
name|getParentCount
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// If there is only one parent, a cherry-pick can be done by
comment|// taking the delta relative to that one parent and redoing
comment|// that on the current merge tip.
comment|//
name|m
operator|.
name|setBase
argument_list|(
name|n
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|merge
argument_list|(
name|mergeTip
argument_list|,
name|n
argument_list|)
condition|)
block|{
name|writeCherryPickCommit
argument_list|(
name|m
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|n
operator|.
name|statusCode
operator|=
name|CommitMergeStatus
operator|.
name|PATH_CONFLICT
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// There are multiple parents, so this is a merge commit. We
comment|// don't want to cherry-pick the merge as clients can't easily
comment|// rebase their history with that merge present and replaced
comment|// by an equivalent merge with a different first parent. So
comment|// instead behave as though MERGE_IF_NECESSARY was configured.
comment|//
if|if
condition|(
name|hasDependenciesMet
argument_list|(
name|n
argument_list|)
condition|)
block|{
if|if
condition|(
name|rw
operator|.
name|isMergedInto
argument_list|(
name|mergeTip
argument_list|,
name|n
argument_list|)
condition|)
block|{
name|mergeTip
operator|=
name|n
expr_stmt|;
block|}
else|else
block|{
name|mergeOneCommit
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|markCleanMerges
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// One or more dependencies were not met. The status was
comment|// already marked on the commit so we have nothing further
comment|// to perform at this time.
comment|//
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot merge "
operator|+
name|n
operator|.
name|name
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|hasDependenciesMet (final CodeReviewCommit n)
specifier|private
name|boolean
name|hasDependenciesMet
parameter_list|(
specifier|final
name|CodeReviewCommit
name|n
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Oddly we can determine this by running the merge sorter and
comment|// look for the one commit to come out as a result. This works
comment|// as the merge sorter checks the dependency chain as part of
comment|// its logic trying to find a minimal merge path.
comment|//
return|return
operator|new
name|MergeSorter
argument_list|(
name|rw
argument_list|,
name|alreadyAccepted
argument_list|,
name|CAN_MERGE
argument_list|)
operator|.
name|sort
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|n
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|n
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|writeCherryPickCommit (final Merger m, final CodeReviewCommit n)
specifier|private
name|void
name|writeCherryPickCommit
parameter_list|(
specifier|final
name|Merger
name|m
parameter_list|,
specifier|final
name|CodeReviewCommit
name|n
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
block|{
name|rw
operator|.
name|parseBody
argument_list|(
name|n
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footers
init|=
name|n
operator|.
name|getFooterLines
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|msgbuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|n
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|msgbuf
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// WTF, an empty commit message?
name|msgbuf
operator|.
name|append
argument_list|(
literal|"<no commit message provided>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|msgbuf
operator|.
name|charAt
argument_list|(
name|msgbuf
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|'\n'
condition|)
block|{
comment|// Missing a trailing LF? Correct it (perhaps the editor was broken).
name|msgbuf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|footers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Doesn't end in a "Signed-off-by: ..." style line? Add another line
comment|// break to start a new paragraph for the reviewed-by tag lines.
comment|//
name|msgbuf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contains
argument_list|(
name|footers
argument_list|,
name|CHANGE_ID
argument_list|,
name|n
operator|.
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
name|CHANGE_ID
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|n
operator|.
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|siteUrl
init|=
name|urlProvider
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|siteUrl
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|url
init|=
name|siteUrl
operator|+
name|n
operator|.
name|patchsetId
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|contains
argument_list|(
name|footers
argument_list|,
name|REVIEWED_ON
argument_list|,
name|url
argument_list|)
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
name|REVIEWED_ON
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
name|PatchSetApproval
name|submitAudit
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvalList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|approvalList
operator|=
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|n
operator|.
name|patchsetId
argument_list|)
operator|.
name|toList
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|approvalList
argument_list|,
operator|new
name|Comparator
argument_list|<
name|PatchSetApproval
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|PatchSetApproval
name|a
parameter_list|,
specifier|final
name|PatchSetApproval
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|getGranted
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getGranted
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|PatchSetApproval
name|a
range|:
name|approvalList
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getValue
argument_list|()
operator|<=
literal|0
condition|)
block|{
comment|// Negative votes aren't counted.
continue|continue;
block|}
if|if
condition|(
name|ApprovalCategory
operator|.
name|SUBMIT
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getCategoryId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Submit is treated specially, below (becomes committer)
comment|//
if|if
condition|(
name|submitAudit
operator|==
literal|null
operator|||
name|a
operator|.
name|getGranted
argument_list|()
operator|.
name|compareTo
argument_list|(
name|submitAudit
operator|.
name|getGranted
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|submitAudit
operator|=
name|a
expr_stmt|;
block|}
continue|continue;
block|}
specifier|final
name|Account
name|acc
init|=
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|identbuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|acc
operator|.
name|getFullName
argument_list|()
operator|!=
literal|null
operator|&&
name|acc
operator|.
name|getFullName
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|identbuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|identbuf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|identbuf
operator|.
name|append
argument_list|(
name|acc
operator|.
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acc
operator|.
name|getPreferredEmail
argument_list|()
operator|!=
literal|null
operator|&&
name|acc
operator|.
name|getPreferredEmail
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|isSignedOffBy
argument_list|(
name|footers
argument_list|,
name|acc
operator|.
name|getPreferredEmail
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|identbuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|identbuf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|identbuf
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|identbuf
operator|.
name|append
argument_list|(
name|acc
operator|.
name|getPreferredEmail
argument_list|()
argument_list|)
expr_stmt|;
name|identbuf
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|identbuf
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Nothing reasonable to describe them by? Ignore them.
continue|continue;
block|}
specifier|final
name|String
name|tag
decl_stmt|;
if|if
condition|(
name|CRVW
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getCategoryId
argument_list|()
argument_list|)
condition|)
block|{
name|tag
operator|=
literal|"Reviewed-by"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|VRIF
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getCategoryId
argument_list|()
argument_list|)
condition|)
block|{
name|tag
operator|=
literal|"Tested-by"
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|ApprovalType
name|at
init|=
name|approvalTypes
operator|.
name|byId
argument_list|(
name|a
operator|.
name|getCategoryId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|==
literal|null
condition|)
block|{
comment|// A deprecated/deleted approval type, ignore it.
continue|continue;
block|}
name|tag
operator|=
name|at
operator|.
name|getCategory
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'-'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contains
argument_list|(
name|footers
argument_list|,
operator|new
name|FooterKey
argument_list|(
name|tag
argument_list|)
argument_list|,
name|identbuf
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|msgbuf
operator|.
name|append
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
name|identbuf
argument_list|)
expr_stmt|;
name|msgbuf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't read approval records for "
operator|+
name|n
operator|.
name|patchsetId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|final
name|CommitBuilder
name|mergeCommit
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|mergeCommit
operator|.
name|setTreeId
argument_list|(
name|m
operator|.
name|getResultTreeId
argument_list|()
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setParentId
argument_list|(
name|mergeTip
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setAuthor
argument_list|(
name|n
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setCommitter
argument_list|(
name|toCommitterIdent
argument_list|(
name|submitAudit
argument_list|)
argument_list|)
expr_stmt|;
name|mergeCommit
operator|.
name|setMessage
argument_list|(
name|msgbuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ObjectId
name|id
init|=
name|commit
argument_list|(
name|mergeCommit
argument_list|)
decl_stmt|;
specifier|final
name|CodeReviewCommit
name|newCommit
init|=
operator|(
name|CodeReviewCommit
operator|)
name|rw
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|submitAudit
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Change
name|oldChange
init|=
name|n
operator|.
name|change
decl_stmt|;
name|n
operator|.
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|n
operator|.
name|change
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
name|change
operator|.
name|nextPatchSetId
argument_list|()
expr_stmt|;
return|return
name|change
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|PatchSet
name|ps
init|=
operator|new
name|PatchSet
argument_list|(
name|n
operator|.
name|change
operator|.
name|currPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setCreatedOn
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setUploader
argument_list|(
name|submitAudit
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setRevision
argument_list|(
operator|new
name|RevId
argument_list|(
name|id
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|insertAncestors
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|newCommit
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|n
operator|.
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|n
operator|.
name|change
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|newCommit
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|submitted
operator|.
name|remove
argument_list|(
name|oldChange
argument_list|)
expr_stmt|;
name|this
operator|.
name|submitted
operator|.
name|add
argument_list|(
name|n
operator|.
name|change
argument_list|)
expr_stmt|;
if|if
condition|(
name|approvalList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|approvalList
control|)
block|{
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|PatchSetApproval
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|a
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|ps
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|newCommit
argument_list|)
expr_stmt|;
name|ru
operator|.
name|disableRefLog
argument_list|()
expr_stmt|;
if|if
condition|(
name|ru
operator|.
name|update
argument_list|(
name|rw
argument_list|)
operator|!=
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to create ref %s in %s: %s"
argument_list|,
name|ps
operator|.
name|getRefName
argument_list|()
argument_list|,
name|n
operator|.
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|ru
operator|.
name|getResult
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|replication
operator|.
name|fire
argument_list|(
name|n
operator|.
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|ru
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newCommit
operator|.
name|copyFrom
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|newCommit
operator|.
name|statusCode
operator|=
name|CommitMergeStatus
operator|.
name|CLEAN_PICK
expr_stmt|;
name|commits
operator|.
name|put
argument_list|(
name|newCommit
operator|.
name|patchsetId
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|newCommit
argument_list|)
expr_stmt|;
name|mergeTip
operator|=
name|newCommit
expr_stmt|;
name|setRefLogIdent
argument_list|(
name|submitAudit
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|insertAncestors (PatchSet.Id id, RevCommit src)
specifier|private
name|void
name|insertAncestors
parameter_list|(
name|PatchSet
operator|.
name|Id
name|id
parameter_list|,
name|RevCommit
name|src
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|int
name|cnt
init|=
name|src
operator|.
name|getParentCount
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PatchSetAncestor
argument_list|>
name|toInsert
init|=
operator|new
name|ArrayList
argument_list|<
name|PatchSetAncestor
argument_list|>
argument_list|(
name|cnt
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|cnt
condition|;
name|p
operator|++
control|)
block|{
name|PatchSetAncestor
name|a
decl_stmt|;
name|a
operator|=
operator|new
name|PatchSetAncestor
argument_list|(
operator|new
name|PatchSetAncestor
operator|.
name|Id
argument_list|(
name|id
argument_list|,
name|p
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setAncestorRevision
argument_list|(
operator|new
name|RevId
argument_list|(
name|src
operator|.
name|getParent
argument_list|(
name|p
argument_list|)
operator|.
name|getId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|toInsert
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|patchSetAncestors
argument_list|()
operator|.
name|insert
argument_list|(
name|toInsert
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|commit (CommitBuilder mergeCommit)
specifier|private
name|ObjectId
name|commit
parameter_list|(
name|CommitBuilder
name|mergeCommit
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedEncodingException
block|{
name|ObjectId
name|id
init|=
name|inserter
operator|.
name|insert
argument_list|(
name|mergeCommit
argument_list|)
decl_stmt|;
name|inserter
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|id
return|;
block|}
end_function

begin_function
DECL|method|contains (List<FooterLine> footers, FooterKey key, String val)
specifier|private
name|boolean
name|contains
parameter_list|(
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footers
parameter_list|,
name|FooterKey
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
for|for
control|(
specifier|final
name|FooterLine
name|line
range|:
name|footers
control|)
block|{
if|if
condition|(
name|line
operator|.
name|matches
argument_list|(
name|key
argument_list|)
operator|&&
name|val
operator|.
name|equals
argument_list|(
name|line
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
DECL|method|isSignedOffBy (List<FooterLine> footers, String email)
specifier|private
name|boolean
name|isSignedOffBy
parameter_list|(
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footers
parameter_list|,
name|String
name|email
parameter_list|)
block|{
for|for
control|(
specifier|final
name|FooterLine
name|line
range|:
name|footers
control|)
block|{
if|if
condition|(
name|line
operator|.
name|matches
argument_list|(
name|FooterKey
operator|.
name|SIGNED_OFF_BY
argument_list|)
operator|&&
name|email
operator|.
name|equals
argument_list|(
name|line
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
DECL|method|toCommitterIdent (final PatchSetApproval audit)
specifier|private
name|PersonIdent
name|toCommitterIdent
parameter_list|(
specifier|final
name|PatchSetApproval
name|audit
parameter_list|)
block|{
if|if
condition|(
name|audit
operator|!=
literal|null
condition|)
block|{
return|return
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|audit
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|newCommitterIdent
argument_list|(
name|audit
operator|.
name|getGranted
argument_list|()
argument_list|,
name|myIdent
operator|.
name|getTimeZone
argument_list|()
argument_list|)
return|;
block|}
return|return
name|myIdent
return|;
block|}
end_function

begin_function
DECL|method|updateBranch ()
specifier|private
name|void
name|updateBranch
parameter_list|()
throws|throws
name|MergeException
block|{
if|if
condition|(
name|mergeTip
operator|!=
literal|null
operator|&&
operator|(
name|branchTip
operator|==
literal|null
operator|||
name|branchTip
operator|!=
name|mergeTip
operator|)
condition|)
block|{
if|if
condition|(
name|GitRepositoryManager
operator|.
name|REF_CONFIG
operator|.
name|equals
argument_list|(
name|branchUpdate
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|ProjectConfig
name|cfg
init|=
operator|new
name|ProjectConfig
argument_list|(
name|destProject
operator|.
name|getNameKey
argument_list|()
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|load
argument_list|(
name|repo
argument_list|,
name|mergeTip
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Submit would store invalid"
operator|+
literal|" project configuration "
operator|+
name|mergeTip
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|destProject
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|branchUpdate
operator|.
name|setForceUpdate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|branchUpdate
operator|.
name|setNewObjectId
argument_list|(
name|mergeTip
argument_list|)
expr_stmt|;
name|branchUpdate
operator|.
name|setRefLogMessage
argument_list|(
literal|"merged"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
name|branchUpdate
operator|.
name|update
argument_list|(
name|rw
argument_list|)
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|FAST_FORWARD
case|:
if|if
condition|(
name|branchUpdate
operator|.
name|getResult
argument_list|()
operator|==
name|RefUpdate
operator|.
name|Result
operator|.
name|FAST_FORWARD
condition|)
block|{
name|tagCache
operator|.
name|updateFastForward
argument_list|(
name|destBranch
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|branchUpdate
operator|.
name|getName
argument_list|()
argument_list|,
name|branchUpdate
operator|.
name|getOldObjectId
argument_list|()
argument_list|,
name|mergeTip
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|GitRepositoryManager
operator|.
name|REF_CONFIG
operator|.
name|equals
argument_list|(
name|branchUpdate
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|projectCache
operator|.
name|evict
argument_list|(
name|destProject
argument_list|)
expr_stmt|;
name|ProjectState
name|ps
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|destProject
operator|.
name|getNameKey
argument_list|()
argument_list|)
decl_stmt|;
name|repoManager
operator|.
name|setProjectDescription
argument_list|(
name|destProject
operator|.
name|getNameKey
argument_list|()
argument_list|,
comment|//
name|ps
operator|.
name|getProject
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|replication
operator|.
name|fire
argument_list|(
name|destBranch
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|branchUpdate
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Account
name|account
init|=
literal|null
decl_stmt|;
specifier|final
name|PatchSetApproval
name|submitter
init|=
name|getSubmitter
argument_list|(
name|db
argument_list|,
name|mergeTip
operator|.
name|patchsetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|submitter
operator|!=
literal|null
condition|)
block|{
name|account
operator|=
name|accountCache
operator|.
name|get
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
expr_stmt|;
block|}
name|hooks
operator|.
name|doRefUpdatedHook
argument_list|(
name|destBranch
argument_list|,
name|branchUpdate
argument_list|,
name|account
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
name|branchUpdate
operator|.
name|getResult
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot update "
operator|+
name|branchUpdate
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|isMergeable (Change c)
specifier|private
name|boolean
name|isMergeable
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
specifier|final
name|CodeReviewCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CommitMergeStatus
name|s
init|=
name|commit
operator|!=
literal|null
condition|?
name|commit
operator|.
name|statusCode
else|:
literal|null
decl_stmt|;
name|boolean
name|isMergeable
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
operator|(
name|s
operator|.
name|equals
argument_list|(
name|CommitMergeStatus
operator|.
name|CLEAN_MERGE
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
name|CommitMergeStatus
operator|.
name|CLEAN_PICK
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
name|CommitMergeStatus
operator|.
name|ALREADY_MERGED
argument_list|)
operator|)
condition|)
block|{
name|isMergeable
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|isMergeable
return|;
block|}
end_function

begin_function
DECL|method|updateChangeStatus ()
specifier|private
name|void
name|updateChangeStatus
parameter_list|()
block|{
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|merged
init|=
operator|new
name|ArrayList
argument_list|<
name|CodeReviewCommit
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Change
name|c
range|:
name|submitted
control|)
block|{
specifier|final
name|CodeReviewCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CommitMergeStatus
name|s
init|=
name|commit
operator|!=
literal|null
condition|?
name|commit
operator|.
name|statusCode
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
comment|// Shouldn't ever happen, but leave the change alone. We'll pick
comment|// it up on the next pass.
comment|//
continue|continue;
block|}
specifier|final
name|String
name|txt
init|=
name|s
operator|.
name|getMessage
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|s
condition|)
block|{
case|case
name|CLEAN_MERGE
case|:
block|{
name|setMerged
argument_list|(
name|c
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
name|txt
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|add
argument_list|(
name|commit
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CLEAN_PICK
case|:
block|{
name|setMerged
argument_list|(
name|c
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
name|txt
operator|+
literal|" as "
operator|+
name|commit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|add
argument_list|(
name|commit
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ALREADY_MERGED
case|:
name|setMerged
argument_list|(
name|c
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|merged
operator|.
name|add
argument_list|(
name|commit
argument_list|)
expr_stmt|;
break|break;
case|case
name|PATH_CONFLICT
case|:
case|case
name|CRISS_CROSS_MERGE
case|:
case|case
name|CANNOT_CHERRY_PICK_ROOT
case|:
case|case
name|NOT_FAST_FORWARD
case|:
block|{
name|setNew
argument_list|(
name|c
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
name|txt
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MISSING_DEPENDENCY
case|:
block|{
specifier|final
name|Capable
name|capable
init|=
name|isSubmitStillPossible
argument_list|(
name|commit
argument_list|)
decl_stmt|;
if|if
condition|(
name|capable
operator|!=
name|Capable
operator|.
name|OK
condition|)
block|{
name|sendMergeFail
argument_list|(
name|c
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
name|capable
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
name|setNew
argument_list|(
name|c
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
literal|"Unspecified merge failure: "
operator|+
name|s
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|CreateCodeReviewNotes
name|codeReviewNotes
init|=
name|codeReviewNotesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|repo
argument_list|)
decl_stmt|;
try|try
block|{
name|codeReviewNotes
operator|.
name|create
argument_list|(
name|merged
argument_list|,
name|computeAuthor
argument_list|(
name|merged
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CodeReviewNoteCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|replication
operator|.
name|fire
argument_list|(
name|destBranch
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|GitRepositoryManager
operator|.
name|REFS_NOTES_REVIEW
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|updateSubscriptions ()
specifier|private
name|void
name|updateSubscriptions
parameter_list|()
block|{
if|if
condition|(
name|mergeTip
operator|!=
literal|null
operator|&&
operator|(
name|branchTip
operator|==
literal|null
operator|||
name|branchTip
operator|!=
name|mergeTip
operator|)
condition|)
block|{
name|SubmoduleOp
name|subOp
init|=
name|subOpFactory
operator|.
name|create
argument_list|(
name|destBranch
argument_list|,
name|mergeTip
argument_list|,
name|rw
argument_list|,
name|repo
argument_list|,
name|destProject
argument_list|,
name|submitted
argument_list|,
name|commits
argument_list|)
decl_stmt|;
try|try
block|{
name|subOp
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SubmoduleException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"The gitLinks were not updated according to the subscriptions "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|isSubmitStillPossible (final CodeReviewCommit commit)
specifier|private
name|Capable
name|isSubmitStillPossible
parameter_list|(
specifier|final
name|CodeReviewCommit
name|commit
parameter_list|)
block|{
specifier|final
name|Capable
name|capable
decl_stmt|;
specifier|final
name|Change
name|c
init|=
name|commit
operator|.
name|change
decl_stmt|;
if|if
condition|(
name|commit
operator|.
name|missing
operator|==
literal|null
condition|)
block|{
name|commit
operator|.
name|missing
operator|=
operator|new
name|ArrayList
argument_list|<
name|CodeReviewCommit
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|boolean
name|submitStillPossible
init|=
name|commit
operator|.
name|missing
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
for|for
control|(
name|CodeReviewCommit
name|missingCommit
range|:
name|commit
operator|.
name|missing
control|)
block|{
name|loadChangeInfo
argument_list|(
name|missingCommit
argument_list|)
expr_stmt|;
if|if
condition|(
name|missingCommit
operator|.
name|patchsetId
operator|==
literal|null
condition|)
block|{
comment|// The commit doesn't have a patch set, so it cannot be
comment|// submitted to the branch.
comment|//
name|submitStillPossible
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|missingCommit
operator|.
name|change
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|equals
argument_list|(
name|missingCommit
operator|.
name|patchsetId
argument_list|)
condition|)
block|{
comment|// If the missing commit is not the current patch set,
comment|// the change must be rebased to use the proper parent.
comment|//
name|submitStillPossible
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|long
name|waitUntil
init|=
name|c
operator|.
name|getLastUpdatedOn
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
name|DEPENDENCY_DELAY
decl_stmt|;
if|if
condition|(
name|submitStillPossible
operator|&&
name|now
operator|<
name|waitUntil
condition|)
block|{
comment|// If we waited a short while we might still be able to get
comment|// this change submitted. Reschedule an attempt in a bit.
comment|//
name|mergeQueue
operator|.
name|recheckAfter
argument_list|(
name|destBranch
argument_list|,
name|waitUntil
operator|-
name|now
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|capable
operator|=
name|Capable
operator|.
name|OK
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|submitStillPossible
condition|)
block|{
comment|// It would be possible to submit the change if the missing
comment|// dependencies are also submitted. Perhaps the user just
comment|// forgot to submit those.
comment|//
name|String
name|txt
init|=
literal|"Change could not be merged because of a missing dependency."
decl_stmt|;
if|if
condition|(
operator|!
name|isAlreadySent
argument_list|(
name|c
argument_list|,
name|txt
argument_list|)
condition|)
block|{
name|StringBuilder
name|m
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|m
operator|.
name|append
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"The following changes must also be submitted:\n"
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|CodeReviewCommit
name|missingCommit
range|:
name|commit
operator|.
name|missing
control|)
block|{
name|m
operator|.
name|append
argument_list|(
literal|"* "
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|missingCommit
operator|.
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|txt
operator|=
name|m
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|capable
operator|=
operator|new
name|Capable
argument_list|(
name|txt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// It is impossible to submit this change as-is. The author
comment|// needs to rebase it in order to work around the missing
comment|// dependencies.
comment|//
name|StringBuilder
name|m
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"Change cannot be merged due"
operator|+
literal|" to unsatisfiable dependencies.\n"
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"The following dependency errors were found:\n"
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|CodeReviewCommit
name|missingCommit
range|:
name|commit
operator|.
name|missing
control|)
block|{
if|if
condition|(
name|missingCommit
operator|.
name|patchsetId
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|append
argument_list|(
literal|"* Depends on patch set "
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|missingCommit
operator|.
name|patchsetId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|" of "
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|missingCommit
operator|.
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|abbreviate
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|", however the current patch set is "
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|missingCommit
operator|.
name|change
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|".\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|append
argument_list|(
literal|"* Depends on commit "
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|missingCommit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|" which has no change associated with it.\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"Please rebase the change and upload a replacement commit."
argument_list|)
expr_stmt|;
name|capable
operator|=
operator|new
name|Capable
argument_list|(
name|m
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|capable
return|;
block|}
end_function

begin_function
DECL|method|loadChangeInfo (final CodeReviewCommit commit)
specifier|private
name|void
name|loadChangeInfo
parameter_list|(
specifier|final
name|CodeReviewCommit
name|commit
parameter_list|)
block|{
if|if
condition|(
name|commit
operator|.
name|patchsetId
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|PatchSet
argument_list|>
name|matches
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|byRevision
argument_list|(
operator|new
name|RevId
argument_list|(
name|commit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
name|matches
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|PatchSet
name|ps
init|=
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|commit
operator|.
name|patchsetId
operator|=
name|ps
operator|.
name|getId
argument_list|()
expr_stmt|;
name|commit
operator|.
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{       }
block|}
block|}
end_function

begin_function
DECL|method|isAlreadySent (final Change c, final String prefix)
specifier|private
name|boolean
name|isAlreadySent
parameter_list|(
specifier|final
name|Change
name|c
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|)
block|{
try|try
block|{
specifier|final
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|msgList
init|=
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|byChange
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
name|msgList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|ChangeMessage
name|last
init|=
name|msgList
operator|.
name|get
argument_list|(
name|msgList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|.
name|getAuthor
argument_list|()
operator|==
literal|null
operator|&&
name|last
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
comment|// The last message was written by us, and it said this
comment|// same message already. Its unlikely anything has changed
comment|// that would cause us to need to repeat ourselves.
comment|//
return|return
literal|true
return|;
block|}
block|}
comment|// The last message was not sent by us, or doesn't match the text
comment|// we are about to send.
comment|//
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
end_function

begin_function
DECL|method|message (final Change c, final String body)
specifier|private
name|ChangeMessage
name|message
parameter_list|(
specifier|final
name|Change
name|c
parameter_list|,
specifier|final
name|String
name|body
parameter_list|)
block|{
specifier|final
name|String
name|uuid
decl_stmt|;
try|try
block|{
name|uuid
operator|=
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|ChangeMessage
name|m
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|uuid
argument_list|)
argument_list|,
literal|null
argument_list|,
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|m
operator|.
name|setMessage
argument_list|(
name|body
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
end_function

begin_function
DECL|method|getSubmitter (ReviewDb reviewDb, PatchSet.Id c)
specifier|private
specifier|static
name|PatchSetApproval
name|getSubmitter
parameter_list|(
name|ReviewDb
name|reviewDb
parameter_list|,
name|PatchSet
operator|.
name|Id
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PatchSetApproval
name|submitter
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvals
init|=
name|reviewDb
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|c
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|approvals
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getValue
argument_list|()
operator|>
literal|0
operator|&&
name|ApprovalCategory
operator|.
name|SUBMIT
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getCategoryId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|submitter
operator|==
literal|null
operator|||
name|a
operator|.
name|getGranted
argument_list|()
operator|.
name|compareTo
argument_list|(
name|submitter
operator|.
name|getGranted
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|submitter
operator|=
name|a
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{     }
return|return
name|submitter
return|;
block|}
end_function

begin_function
DECL|method|setMerged (final Change c, final ChangeMessage msg)
specifier|private
name|void
name|setMerged
parameter_list|(
specifier|final
name|Change
name|c
parameter_list|,
specifier|final
name|ChangeMessage
name|msg
parameter_list|)
block|{
specifier|final
name|Change
operator|.
name|Id
name|changeId
init|=
name|c
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// We must pull the patchset out of commits, because the patchset ID is
comment|// modified when using the cherry-pick merge strategy.
specifier|final
name|CodeReviewCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|PatchSet
operator|.
name|Id
name|merged
init|=
name|commit
operator|.
name|change
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
try|try
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|changeId
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
name|c
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
comment|// It could be possible that the change being merged
comment|// has never had its mergeability tested. So we insure
comment|// merged changes has mergeable field true.
name|c
operator|.
name|setMergeable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|merged
operator|.
name|equals
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Uncool; the patch set changed after we merged it.
comment|// Go back to the patch set that was actually merged.
comment|//
try|try
block|{
name|c
operator|.
name|setCurrentPatchSet
argument_list|(
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|merged
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatchSetInfoNotAvailableException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot read merged patch set "
operator|+
name|merged
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmConcurrencyException
name|err
parameter_list|)
block|{     }
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot update change status"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
comment|// Flatten out all existing approvals based upon the current
comment|// permissions. Once the change is closed the approvals are
comment|// not updated at presentation view time, so we need to make.
comment|// sure they are accurate now. This way if permissions get
comment|// modified in the future, historical records stay accurate.
comment|//
name|PatchSetApproval
name|submitter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|c
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvals
init|=
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byChange
argument_list|(
name|changeId
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
specifier|final
name|FunctionState
name|fs
init|=
name|functionState
operator|.
name|create
argument_list|(
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|c
argument_list|,
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|c
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|merged
argument_list|,
name|approvals
argument_list|)
decl_stmt|;
for|for
control|(
name|ApprovalType
name|at
range|:
name|approvalTypes
operator|.
name|getApprovalTypes
argument_list|()
control|)
block|{
name|CategoryFunction
operator|.
name|forCategory
argument_list|(
name|at
operator|.
name|getCategory
argument_list|()
argument_list|)
operator|.
name|run
argument_list|(
name|at
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|approvals
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getValue
argument_list|()
operator|>
literal|0
operator|&&
name|ApprovalCategory
operator|.
name|SUBMIT
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getCategoryId
argument_list|()
argument_list|)
operator|&&
name|a
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|equals
argument_list|(
name|merged
argument_list|)
condition|)
block|{
if|if
condition|(
name|submitter
operator|==
literal|null
operator|||
name|a
operator|.
name|getGranted
argument_list|()
operator|.
name|compareTo
argument_list|(
name|submitter
operator|.
name|getGranted
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|submitter
operator|=
name|a
expr_stmt|;
block|}
block|}
name|a
operator|.
name|cache
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|update
argument_list|(
name|approvals
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchChangeException
name|err
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot normalize approvals for change "
operator|+
name|changeId
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot normalize approvals for change "
operator|+
name|changeId
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|submitter
operator|!=
literal|null
operator|&&
name|msg
operator|.
name|getAuthor
argument_list|()
operator|==
literal|null
condition|)
block|{
name|msg
operator|.
name|setAuthor
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot store message on change"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|PatchSetApproval
name|from
init|=
name|submitter
decl_stmt|;
name|workQueue
operator|.
name|getDefaultQueue
argument_list|()
operator|.
name|submit
argument_list|(
name|requestScopePropagator
operator|.
name|wrap
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|PatchSet
name|patchSet
decl_stmt|;
try|try
block|{
name|ReviewDb
name|reviewDb
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
name|patchSet
operator|=
name|reviewDb
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reviewDb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email for submitted patch set "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
specifier|final
name|MergedSender
name|cm
init|=
name|mergedSenderFactory
operator|.
name|create
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
block|{
name|cm
operator|.
name|setFrom
argument_list|(
name|from
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cm
operator|.
name|setPatchSet
argument_list|(
name|patchSet
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email for submitted patch set "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"send-email merged"
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|hooks
operator|.
name|doChangeMergedHook
argument_list|(
name|c
argument_list|,
comment|//
name|accountCache
operator|.
name|get
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
argument_list|,
comment|//
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot run hook for submitted patch set "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|setNew (Change c, ChangeMessage msg)
specifier|private
name|void
name|setNew
parameter_list|(
name|Change
name|c
parameter_list|,
name|ChangeMessage
name|msg
parameter_list|)
block|{
name|sendMergeFail
argument_list|(
name|c
argument_list|,
name|msg
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|sendMergeFail (final Change c, final ChangeMessage msg, final boolean makeNew)
specifier|private
name|void
name|sendMergeFail
parameter_list|(
specifier|final
name|Change
name|c
parameter_list|,
specifier|final
name|ChangeMessage
name|msg
parameter_list|,
specifier|final
name|boolean
name|makeNew
parameter_list|)
block|{
try|try
block|{
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot record merge failure message"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|makeNew
condition|)
block|{
try|try
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|c
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmConcurrencyException
name|err
parameter_list|)
block|{       }
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot update change status"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|ChangeUtil
operator|.
name|touch
argument_list|(
name|c
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot update change timestamp"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
name|workQueue
operator|.
name|getDefaultQueue
argument_list|()
operator|.
name|submit
argument_list|(
name|requestScopePropagator
operator|.
name|wrap
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|PatchSet
name|patchSet
decl_stmt|;
name|PatchSetApproval
name|submitter
decl_stmt|;
try|try
block|{
name|ReviewDb
name|reviewDb
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
name|patchSet
operator|=
name|reviewDb
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|submitter
operator|=
name|getSubmitter
argument_list|(
name|reviewDb
argument_list|,
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reviewDb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email notifications about merge failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
specifier|final
name|MergeFailSender
name|cm
init|=
name|mergeFailSenderFactory
operator|.
name|create
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|submitter
operator|!=
literal|null
condition|)
block|{
name|cm
operator|.
name|setFrom
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cm
operator|.
name|setPatchSet
argument_list|(
name|patchSet
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setChangeMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot send email notifications about merge failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"send-email merge-failed"
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

