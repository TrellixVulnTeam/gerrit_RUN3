begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|HOURS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefDatabase
operator|.
name|ALL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|ChangeHooks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitTypeRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|RemotePeer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritRequestModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|RequestScopedReviewDbProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|strategy
operator|.
name|SubmitStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|strategy
operator|.
name|SubmitStrategyFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|MergeValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|MergeValidators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|ChangeIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MergeFailSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MergedSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|SubmitRuleEvaluator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|SshInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestScopePropagator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|AtomicUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|OutOfScopeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provides
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|RequestScoped
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|HostKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|ISODateTimeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_comment
comment|/**  * Merges changes in submission order into a single branch.  *<p>  * Branches are reduced to the minimum number of heads needed to merge  * everything. This allows commits to be entered into the queue in any order  * (such as ancestors before descendants) and only the most recent commit on any  * line of development will be merged. All unmerged commits along a line of  * development must be in the submission queue in order to merge the tip of that  * line.  *<p>  * Conflicts are handled by discarding the entire line of development and  * marking it as conflicting, even if an earlier commit along that same line can  * be merged cleanly.  */
end_comment

begin_class
DECL|class|MergeOp
specifier|public
class|class
name|MergeOp
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (Branch.NameKey branch)
name|MergeOp
name|create
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
function_decl|;
block|}
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MergeOp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAX_SUBMIT_WINDOW
specifier|private
specifier|static
specifier|final
name|long
name|MAX_SUBMIT_WINDOW
init|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|HOURS
argument_list|)
decl_stmt|;
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|approvalsUtil
specifier|private
specifier|final
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
DECL|field|changeControlFactory
specifier|private
specifier|final
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
DECL|field|changeDataFactory
specifier|private
specifier|final
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
decl_stmt|;
DECL|field|hooks
specifier|private
specifier|final
name|ChangeHooks
name|hooks
decl_stmt|;
DECL|field|indexer
specifier|private
specifier|final
name|ChangeIndexer
name|indexer
decl_stmt|;
DECL|field|cmUtil
specifier|private
specifier|final
name|ChangeMessagesUtil
name|cmUtil
decl_stmt|;
DECL|field|notesFactory
specifier|private
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
decl_stmt|;
DECL|field|updateFactory
specifier|private
specifier|final
name|ChangeUpdate
operator|.
name|Factory
name|updateFactory
decl_stmt|;
DECL|field|gitRefUpdated
specifier|private
specifier|final
name|GitReferenceUpdated
name|gitRefUpdated
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|identifiedUserFactory
specifier|private
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
decl_stmt|;
DECL|field|mergedSenderFactory
specifier|private
specifier|final
name|MergedSender
operator|.
name|Factory
name|mergedSenderFactory
decl_stmt|;
DECL|field|mergeFailSenderFactory
specifier|private
specifier|final
name|MergeFailSender
operator|.
name|Factory
name|mergeFailSenderFactory
decl_stmt|;
DECL|field|mergeValidatorsFactory
specifier|private
specifier|final
name|MergeValidators
operator|.
name|Factory
name|mergeValidatorsFactory
decl_stmt|;
DECL|field|patchSetInfoFactory
specifier|private
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|schemaFactory
specifier|private
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
decl_stmt|;
DECL|field|submitStrategyFactory
specifier|private
specifier|final
name|SubmitStrategyFactory
name|submitStrategyFactory
decl_stmt|;
DECL|field|subOpFactory
specifier|private
specifier|final
name|SubmoduleOp
operator|.
name|Factory
name|subOpFactory
decl_stmt|;
DECL|field|tagCache
specifier|private
specifier|final
name|TagCache
name|tagCache
decl_stmt|;
DECL|field|workQueue
specifier|private
specifier|final
name|WorkQueue
name|workQueue
decl_stmt|;
DECL|field|logPrefix
specifier|private
specifier|final
name|String
name|logPrefix
decl_stmt|;
DECL|field|destBranch
specifier|private
specifier|final
name|Branch
operator|.
name|NameKey
name|destBranch
decl_stmt|;
DECL|field|toMerge
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|SubmitType
argument_list|,
name|CodeReviewCommit
argument_list|>
name|toMerge
decl_stmt|;
DECL|field|potentiallyStillSubmittable
specifier|private
specifier|final
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|potentiallyStillSubmittable
decl_stmt|;
DECL|field|commits
specifier|private
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|CodeReviewCommit
argument_list|>
name|commits
decl_stmt|;
DECL|field|toUpdate
specifier|private
specifier|final
name|List
argument_list|<
name|Change
argument_list|>
name|toUpdate
decl_stmt|;
DECL|field|threadScoper
specifier|private
specifier|final
name|PerThreadRequestScope
operator|.
name|Scoper
name|threadScoper
decl_stmt|;
DECL|field|destProject
specifier|private
name|ProjectState
name|destProject
decl_stmt|;
DECL|field|db
specifier|private
name|ReviewDb
name|db
decl_stmt|;
DECL|field|repo
specifier|private
name|Repository
name|repo
decl_stmt|;
DECL|field|rw
specifier|private
name|RevWalk
name|rw
decl_stmt|;
DECL|field|canMergeFlag
specifier|private
name|RevFlag
name|canMergeFlag
decl_stmt|;
DECL|field|branchTip
specifier|private
name|CodeReviewCommit
name|branchTip
decl_stmt|;
DECL|field|mergeTip
specifier|private
name|MergeTip
name|mergeTip
decl_stmt|;
DECL|field|inserter
specifier|private
name|ObjectInserter
name|inserter
decl_stmt|;
DECL|field|refLogIdent
specifier|private
name|PersonIdent
name|refLogIdent
decl_stmt|;
annotation|@
name|Inject
DECL|method|MergeOp (AccountCache accountCache, ApprovalsUtil approvalsUtil, ChangeControl.GenericFactory changeControlFactory, ChangeData.Factory changeDataFactory, ChangeHooks hooks, ChangeIndexer indexer, Injector injector, ChangeMessagesUtil cmUtil, ChangeNotes.Factory notesFactory, ChangeUpdate.Factory updateFactory, GitReferenceUpdated gitRefUpdated, GitRepositoryManager repoManager, IdentifiedUser.GenericFactory identifiedUserFactory, MergedSender.Factory mergedSenderFactory, MergeFailSender.Factory mergeFailSenderFactory, MergeValidators.Factory mergeValidatorsFactory, PatchSetInfoFactory patchSetInfoFactory, ProjectCache projectCache, Provider<InternalChangeQuery> queryProvider, SchemaFactory<ReviewDb> schemaFactory, SubmitStrategyFactory submitStrategyFactory, SubmoduleOp.Factory subOpFactory, TagCache tagCache, WorkQueue workQueue, @Assisted Branch.NameKey branch)
name|MergeOp
parameter_list|(
name|AccountCache
name|accountCache
parameter_list|,
name|ApprovalsUtil
name|approvalsUtil
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
parameter_list|,
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
parameter_list|,
name|ChangeHooks
name|hooks
parameter_list|,
name|ChangeIndexer
name|indexer
parameter_list|,
name|Injector
name|injector
parameter_list|,
name|ChangeMessagesUtil
name|cmUtil
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
parameter_list|,
name|ChangeUpdate
operator|.
name|Factory
name|updateFactory
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
parameter_list|,
name|MergedSender
operator|.
name|Factory
name|mergedSenderFactory
parameter_list|,
name|MergeFailSender
operator|.
name|Factory
name|mergeFailSenderFactory
parameter_list|,
name|MergeValidators
operator|.
name|Factory
name|mergeValidatorsFactory
parameter_list|,
name|PatchSetInfoFactory
name|patchSetInfoFactory
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
parameter_list|,
name|SubmitStrategyFactory
name|submitStrategyFactory
parameter_list|,
name|SubmoduleOp
operator|.
name|Factory
name|subOpFactory
parameter_list|,
name|TagCache
name|tagCache
parameter_list|,
name|WorkQueue
name|workQueue
parameter_list|,
annotation|@
name|Assisted
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
block|{
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|approvalsUtil
operator|=
name|approvalsUtil
expr_stmt|;
name|this
operator|.
name|changeControlFactory
operator|=
name|changeControlFactory
expr_stmt|;
name|this
operator|.
name|changeDataFactory
operator|=
name|changeDataFactory
expr_stmt|;
name|this
operator|.
name|hooks
operator|=
name|hooks
expr_stmt|;
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
name|this
operator|.
name|cmUtil
operator|=
name|cmUtil
expr_stmt|;
name|this
operator|.
name|notesFactory
operator|=
name|notesFactory
expr_stmt|;
name|this
operator|.
name|updateFactory
operator|=
name|updateFactory
expr_stmt|;
name|this
operator|.
name|gitRefUpdated
operator|=
name|gitRefUpdated
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|identifiedUserFactory
operator|=
name|identifiedUserFactory
expr_stmt|;
name|this
operator|.
name|mergedSenderFactory
operator|=
name|mergedSenderFactory
expr_stmt|;
name|this
operator|.
name|mergeFailSenderFactory
operator|=
name|mergeFailSenderFactory
expr_stmt|;
name|this
operator|.
name|mergeValidatorsFactory
operator|=
name|mergeValidatorsFactory
expr_stmt|;
name|this
operator|.
name|patchSetInfoFactory
operator|=
name|patchSetInfoFactory
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|schemaFactory
operator|=
name|schemaFactory
expr_stmt|;
name|this
operator|.
name|submitStrategyFactory
operator|=
name|submitStrategyFactory
expr_stmt|;
name|this
operator|.
name|subOpFactory
operator|=
name|subOpFactory
expr_stmt|;
name|this
operator|.
name|tagCache
operator|=
name|tagCache
expr_stmt|;
name|this
operator|.
name|workQueue
operator|=
name|workQueue
expr_stmt|;
name|logPrefix
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"[%s@%s]: "
argument_list|,
name|branch
operator|.
name|toString
argument_list|()
argument_list|,
name|ISODateTimeFormat
operator|.
name|hourMinuteSecond
argument_list|()
operator|.
name|print
argument_list|(
name|TimeUtil
operator|.
name|nowMs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|destBranch
operator|=
name|branch
expr_stmt|;
name|toMerge
operator|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
name|potentiallyStillSubmittable
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|commits
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|toUpdate
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|Injector
name|child
init|=
name|injector
operator|.
name|createChildInjector
argument_list|(
operator|new
name|AbstractModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bindScope
argument_list|(
name|RequestScoped
operator|.
name|class
argument_list|,
name|PerThreadRequestScope
operator|.
name|REQUEST
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RequestScopePropagator
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|PerThreadRequestScope
operator|.
name|Propagator
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|PerThreadRequestScope
operator|.
name|Propagator
operator|.
name|class
argument_list|)
expr_stmt|;
name|install
argument_list|(
operator|new
name|GerritRequestModule
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|SocketAddress
operator|.
name|class
argument_list|)
operator|.
name|annotatedWith
argument_list|(
name|RemotePeer
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
operator|new
name|Provider
argument_list|<
name|SocketAddress
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SocketAddress
name|get
parameter_list|()
block|{
throw|throw
operator|new
name|OutOfScopeException
argument_list|(
literal|"No remote peer on merge thread"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|SshInfo
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|SshInfo
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HostKey
argument_list|>
name|getHostKeys
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Provides
specifier|public
name|PerThreadRequestScope
operator|.
name|Scoper
name|provideScoper
parameter_list|(
specifier|final
name|PerThreadRequestScope
operator|.
name|Propagator
name|propagator
parameter_list|,
specifier|final
name|Provider
argument_list|<
name|RequestScopedReviewDbProvider
argument_list|>
name|dbProvider
parameter_list|)
block|{
specifier|final
name|RequestContext
name|requestContext
init|=
operator|new
name|RequestContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CurrentUser
name|getCurrentUser
parameter_list|()
block|{
throw|throw
operator|new
name|OutOfScopeException
argument_list|(
literal|"No user on merge thread"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|getReviewDbProvider
parameter_list|()
block|{
return|return
name|dbProvider
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|PerThreadRequestScope
operator|.
name|Scoper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Callable
argument_list|<
name|T
argument_list|>
name|scope
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
block|{
return|return
name|propagator
operator|.
name|scope
argument_list|(
name|requestContext
argument_list|,
name|callable
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|threadScoper
operator|=
name|child
operator|.
name|getInstance
argument_list|(
name|PerThreadRequestScope
operator|.
name|Scoper
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|setDestProject ()
specifier|private
name|void
name|setDestProject
parameter_list|()
throws|throws
name|MergeException
block|{
name|destProject
operator|=
name|projectCache
operator|.
name|get
argument_list|(
name|destBranch
operator|.
name|getParentKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|destProject
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"No such project: "
operator|+
name|destBranch
operator|.
name|getParentKey
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|openSchema ()
specifier|private
name|void
name|openSchema
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|merge ()
specifier|public
name|void
name|merge
parameter_list|()
throws|throws
name|MergeException
throws|,
name|NoSuchChangeException
block|{
name|logDebug
argument_list|(
literal|"Beginning merge attempt on {}"
argument_list|,
name|destBranch
argument_list|)
expr_stmt|;
name|setDestProject
argument_list|()
expr_stmt|;
try|try
block|{
name|openSchema
argument_list|()
expr_stmt|;
name|openRepository
argument_list|()
expr_stmt|;
name|RefUpdate
name|branchUpdate
init|=
name|openBranch
argument_list|()
decl_stmt|;
name|boolean
name|reopen
init|=
literal|false
decl_stmt|;
name|ListMultimap
argument_list|<
name|SubmitType
argument_list|,
name|Change
argument_list|>
name|toSubmit
init|=
name|validateChangeList
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|submitted
argument_list|(
name|destBranch
argument_list|)
argument_list|)
decl_stmt|;
name|ListMultimap
argument_list|<
name|SubmitType
argument_list|,
name|CodeReviewCommit
argument_list|>
name|toMergeNextTurn
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|toMerge
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logDebug
argument_list|(
literal|"Beginning merge iteration with {} left to merge"
argument_list|,
name|toMerge
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|toMergeNextTurn
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|SubmitType
argument_list|>
name|submitTypes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|toMerge
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SubmitType
name|submitType
range|:
name|submitTypes
control|)
block|{
if|if
condition|(
name|reopen
condition|)
block|{
name|logDebug
argument_list|(
literal|"Reopening branch"
argument_list|)
expr_stmt|;
name|branchUpdate
operator|=
name|openBranch
argument_list|()
expr_stmt|;
block|}
name|SubmitStrategy
name|strategy
init|=
name|createStrategy
argument_list|(
name|submitType
argument_list|)
decl_stmt|;
name|MergeTip
name|mergeTip
init|=
name|preMerge
argument_list|(
name|strategy
argument_list|,
name|toMerge
operator|.
name|get
argument_list|(
name|submitType
argument_list|)
argument_list|)
decl_stmt|;
name|RefUpdate
name|update
init|=
name|updateBranch
argument_list|(
name|branchUpdate
argument_list|)
decl_stmt|;
name|reopen
operator|=
literal|true
expr_stmt|;
name|updateChangeStatus
argument_list|(
name|toSubmit
operator|.
name|get
argument_list|(
name|submitType
argument_list|)
argument_list|,
name|mergeTip
argument_list|)
expr_stmt|;
name|updateSubscriptions
argument_list|(
name|toSubmit
operator|.
name|get
argument_list|(
name|submitType
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|update
operator|!=
literal|null
condition|)
block|{
name|fireRefUpdated
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
block|}
name|toMerge
operator|.
name|clear
argument_list|()
expr_stmt|;
name|toMerge
operator|.
name|putAll
argument_list|(
name|toMergeNextTurn
argument_list|)
expr_stmt|;
name|logDebug
argument_list|(
literal|"Adding {} changes to merge on next run"
argument_list|,
name|toMerge
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateChangeStatus
argument_list|(
name|toUpdate
argument_list|,
name|mergeTip
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|noProject
parameter_list|)
block|{
name|logWarn
argument_list|(
literal|"Project "
operator|+
name|destBranch
operator|.
name|getParentKey
argument_list|()
operator|+
literal|" no longer exists,"
operator|+
literal|" abandoning open changes"
argument_list|)
expr_stmt|;
name|abandonAllOpenChanges
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot query the database"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|inserter
operator|!=
literal|null
condition|)
block|{
name|inserter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rw
operator|!=
literal|null
condition|)
block|{
name|rw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|preMerge (SubmitStrategy strategy, List<CodeReviewCommit> toMerge)
specifier|private
name|MergeTip
name|preMerge
parameter_list|(
name|SubmitStrategy
name|strategy
parameter_list|,
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|toMerge
parameter_list|)
throws|throws
name|MergeException
block|{
name|logDebug
argument_list|(
literal|"Running submit strategy {} for {} commits"
argument_list|,
name|strategy
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|toMerge
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|mergeTip
operator|=
name|strategy
operator|.
name|run
argument_list|(
name|branchTip
argument_list|,
name|toMerge
argument_list|)
expr_stmt|;
name|refLogIdent
operator|=
name|strategy
operator|.
name|getRefLogIdent
argument_list|()
expr_stmt|;
name|logDebug
argument_list|(
literal|"Produced {} new commits"
argument_list|,
name|strategy
operator|.
name|getNewCommits
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commits
operator|.
name|putAll
argument_list|(
name|strategy
operator|.
name|getNewCommits
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mergeTip
return|;
block|}
DECL|method|createStrategy (SubmitType submitType)
specifier|private
name|SubmitStrategy
name|createStrategy
parameter_list|(
name|SubmitType
name|submitType
parameter_list|)
throws|throws
name|MergeException
throws|,
name|NoSuchProjectException
block|{
return|return
name|submitStrategyFactory
operator|.
name|create
argument_list|(
name|submitType
argument_list|,
name|db
argument_list|,
name|repo
argument_list|,
name|rw
argument_list|,
name|inserter
argument_list|,
name|canMergeFlag
argument_list|,
name|getAlreadyAccepted
argument_list|(
name|branchTip
argument_list|)
argument_list|,
name|destBranch
argument_list|)
return|;
block|}
DECL|method|openRepository ()
specifier|private
name|void
name|openRepository
parameter_list|()
throws|throws
name|MergeException
throws|,
name|NoSuchProjectException
block|{
name|Project
operator|.
name|NameKey
name|name
init|=
name|destBranch
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
try|try
block|{
name|repo
operator|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|notFound
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchProjectException
argument_list|(
name|name
argument_list|,
name|notFound
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|String
name|m
init|=
literal|"Error opening repository \""
operator|+
name|name
operator|.
name|get
argument_list|()
operator|+
literal|'"'
decl_stmt|;
throw|throw
operator|new
name|MergeException
argument_list|(
name|m
argument_list|,
name|err
argument_list|)
throw|;
block|}
name|rw
operator|=
name|CodeReviewCommit
operator|.
name|newRevWalk
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|COMMIT_TIME_DESC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|canMergeFlag
operator|=
name|rw
operator|.
name|newFlag
argument_list|(
literal|"CAN_MERGE"
argument_list|)
expr_stmt|;
name|inserter
operator|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
expr_stmt|;
block|}
DECL|method|openBranch ()
specifier|private
name|RefUpdate
name|openBranch
parameter_list|()
throws|throws
name|MergeException
throws|,
name|OrmException
throws|,
name|NoSuchChangeException
block|{
try|try
block|{
name|RefUpdate
name|branchUpdate
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|destBranch
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|branchUpdate
operator|.
name|getOldObjectId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|branchTip
operator|=
operator|(
name|CodeReviewCommit
operator|)
name|rw
operator|.
name|parseCommit
argument_list|(
name|branchUpdate
operator|.
name|getOldObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|repo
operator|.
name|getFullBranch
argument_list|()
operator|.
name|equals
argument_list|(
name|destBranch
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|branchTip
operator|=
literal|null
expr_stmt|;
name|branchUpdate
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|submitted
argument_list|(
name|destBranch
argument_list|)
control|)
block|{
try|try
block|{
name|Change
name|c
init|=
name|cd
operator|.
name|change
argument_list|()
decl_stmt|;
name|setNew
argument_list|(
name|c
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
literal|"Change could not be merged, "
operator|+
literal|"because the destination branch does not exist anymore."
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error setting change new"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|logDebug
argument_list|(
literal|"Opened branch {}: {}"
argument_list|,
name|destBranch
operator|.
name|get
argument_list|()
argument_list|,
name|branchTip
argument_list|)
expr_stmt|;
return|return
name|branchUpdate
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot open branch"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getAlreadyAccepted (CodeReviewCommit branchTip)
specifier|private
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|getAlreadyAccepted
parameter_list|(
name|CodeReviewCommit
name|branchTip
parameter_list|)
throws|throws
name|MergeException
block|{
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|alreadyAccepted
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|branchTip
operator|!=
literal|null
condition|)
block|{
name|alreadyAccepted
operator|.
name|add
argument_list|(
name|branchTip
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|Ref
name|r
range|:
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|alreadyAccepted
operator|.
name|add
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|iote
parameter_list|)
block|{
comment|// Not a commit? Skip over it.
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Failed to determine already accepted commits."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|logDebug
argument_list|(
literal|"Found {} existing heads"
argument_list|,
name|alreadyAccepted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|alreadyAccepted
return|;
block|}
DECL|method|validateChangeList ( List<ChangeData> submitted)
specifier|private
name|ListMultimap
argument_list|<
name|SubmitType
argument_list|,
name|Change
argument_list|>
name|validateChangeList
parameter_list|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|submitted
parameter_list|)
throws|throws
name|MergeException
block|{
name|logDebug
argument_list|(
literal|"Validating {} changes"
argument_list|,
name|submitted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ListMultimap
argument_list|<
name|SubmitType
argument_list|,
name|Change
argument_list|>
name|toSubmit
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|allRefs
decl_stmt|;
try|try
block|{
name|allRefs
operator|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|tips
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Ref
name|r
range|:
name|allRefs
operator|.
name|values
argument_list|()
control|)
block|{
name|tips
operator|.
name|add
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChangeData
name|cd
range|:
name|submitted
control|)
block|{
name|ChangeControl
name|ctl
decl_stmt|;
name|Change
name|chg
decl_stmt|;
try|try
block|{
name|ctl
operator|=
name|cd
operator|.
name|changeControl
argument_list|()
expr_stmt|;
comment|// Reload change in case index was stale.
name|chg
operator|=
name|cd
operator|.
name|reloadChange
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Failed to validate changes"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Change
operator|.
name|Id
name|changeId
init|=
name|cd
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|chg
operator|.
name|getStatus
argument_list|()
operator|!=
name|Change
operator|.
name|Status
operator|.
name|SUBMITTED
condition|)
block|{
name|logDebug
argument_list|(
literal|"Change {} is not submitted: {}"
argument_list|,
name|changeId
argument_list|,
name|chg
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|chg
operator|.
name|currentPatchSetId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|logError
argument_list|(
literal|"Missing current patch set on change "
operator|+
name|changeId
argument_list|)
expr_stmt|;
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|CodeReviewCommit
operator|.
name|noPatchSet
argument_list|(
name|ctl
argument_list|)
argument_list|)
expr_stmt|;
name|toUpdate
operator|.
name|add
argument_list|(
name|chg
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|PatchSet
name|ps
decl_stmt|;
try|try
block|{
name|ps
operator|=
name|cd
operator|.
name|currentPatchSet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot query the database"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|ps
operator|==
literal|null
operator|||
name|ps
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
operator|||
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|logError
argument_list|(
literal|"Missing patch set or revision on change "
operator|+
name|changeId
argument_list|)
expr_stmt|;
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|CodeReviewCommit
operator|.
name|noPatchSet
argument_list|(
name|ctl
argument_list|)
argument_list|)
expr_stmt|;
name|toUpdate
operator|.
name|add
argument_list|(
name|chg
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|idstr
init|=
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|ObjectId
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|idstr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Invalid revision on patch set "
operator|+
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|CodeReviewCommit
operator|.
name|noPatchSet
argument_list|(
name|ctl
argument_list|)
argument_list|)
expr_stmt|;
name|toUpdate
operator|.
name|add
argument_list|(
name|chg
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|tips
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
comment|// TODO Technically the proper way to do this test is to use a
comment|// RevWalk on "$id --not --all" and test for an empty set. But
comment|// that is way slower than looking for a ref directly pointing
comment|// at the desired tip. We should always have a ref available.
comment|//
comment|// TODO this is actually an error, the branch is gone but we
comment|// want to merge the issue. We can't safely do that if the
comment|// tip is not reachable.
comment|//
name|logError
argument_list|(
literal|"Revision "
operator|+
name|idstr
operator|+
literal|" of patch set "
operator|+
name|ps
operator|.
name|getId
argument_list|()
operator|+
literal|" is not contained in any ref"
argument_list|)
expr_stmt|;
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|CodeReviewCommit
operator|.
name|revisionGone
argument_list|(
name|ctl
argument_list|)
argument_list|)
expr_stmt|;
name|toUpdate
operator|.
name|add
argument_list|(
name|chg
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|CodeReviewCommit
name|commit
decl_stmt|;
try|try
block|{
name|commit
operator|=
operator|(
name|CodeReviewCommit
operator|)
name|rw
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Invalid commit "
operator|+
name|idstr
operator|+
literal|" on patch set "
operator|+
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|CodeReviewCommit
operator|.
name|revisionGone
argument_list|(
name|ctl
argument_list|)
argument_list|)
expr_stmt|;
name|toUpdate
operator|.
name|add
argument_list|(
name|chg
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// TODO(dborowitz): Consider putting ChangeData in CodeReviewCommit.
name|commit
operator|.
name|setControl
argument_list|(
name|ctl
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setPatchsetId
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|MergeValidators
name|mergeValidators
init|=
name|mergeValidatorsFactory
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|mergeValidators
operator|.
name|validatePreMerge
argument_list|(
name|repo
argument_list|,
name|commit
argument_list|,
name|destProject
argument_list|,
name|destBranch
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MergeValidationException
name|mve
parameter_list|)
block|{
name|logDebug
argument_list|(
literal|"Revision {} of patch set {} failed validation: {}"
argument_list|,
name|idstr
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|mve
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setStatusCode
argument_list|(
name|mve
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|toUpdate
operator|.
name|add
argument_list|(
name|chg
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|branchTip
operator|!=
literal|null
condition|)
block|{
comment|// If this commit is already merged its a bug in the queuing code
comment|// that we got back here. Just mark it complete and move on. It's
comment|// merged and that is all that mattered to the requestor.
comment|//
try|try
block|{
if|if
condition|(
name|rw
operator|.
name|isMergedInto
argument_list|(
name|commit
argument_list|,
name|branchTip
argument_list|)
condition|)
block|{
name|logDebug
argument_list|(
literal|"Revision {} of patch set {} is already merged"
argument_list|,
name|idstr
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setStatusCode
argument_list|(
name|CommitMergeStatus
operator|.
name|ALREADY_MERGED
argument_list|)
expr_stmt|;
try|try
block|{
name|setMerged
argument_list|(
name|chg
argument_list|,
literal|null
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Cannot mark change "
operator|+
name|chg
operator|.
name|getId
argument_list|()
operator|+
literal|" merged"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot perform merge base test"
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
name|SubmitType
name|submitType
decl_stmt|;
name|submitType
operator|=
name|getSubmitType
argument_list|(
name|commit
operator|.
name|getControl
argument_list|()
argument_list|,
name|ps
argument_list|)
expr_stmt|;
if|if
condition|(
name|submitType
operator|==
literal|null
condition|)
block|{
name|logError
argument_list|(
literal|"No submit type for revision "
operator|+
name|idstr
operator|+
literal|" of patch set "
operator|+
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setStatusCode
argument_list|(
name|CommitMergeStatus
operator|.
name|NO_SUBMIT_TYPE
argument_list|)
expr_stmt|;
name|toUpdate
operator|.
name|add
argument_list|(
name|chg
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|commit
operator|.
name|add
argument_list|(
name|canMergeFlag
argument_list|)
expr_stmt|;
name|toMerge
operator|.
name|put
argument_list|(
name|submitType
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|toSubmit
operator|.
name|put
argument_list|(
name|submitType
argument_list|,
name|chg
argument_list|)
expr_stmt|;
block|}
name|logDebug
argument_list|(
literal|"Submitting on this run: {}"
argument_list|,
name|toSubmit
argument_list|)
expr_stmt|;
return|return
name|toSubmit
return|;
block|}
DECL|method|getSubmitType (ChangeControl ctl, PatchSet ps)
specifier|private
name|SubmitType
name|getSubmitType
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|,
name|PatchSet
name|ps
parameter_list|)
block|{
try|try
block|{
name|ChangeData
name|cd
init|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|ctl
argument_list|)
decl_stmt|;
name|SubmitTypeRecord
name|r
init|=
operator|new
name|SubmitRuleEvaluator
argument_list|(
name|cd
argument_list|)
operator|.
name|setPatchSet
argument_list|(
name|ps
argument_list|)
operator|.
name|getSubmitType
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|status
operator|!=
name|SubmitTypeRecord
operator|.
name|Status
operator|.
name|OK
condition|)
block|{
name|logError
argument_list|(
literal|"Failed to get submit type for "
operator|+
name|ctl
operator|.
name|getChange
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|r
operator|.
name|type
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Failed to get submit type for "
operator|+
name|ctl
operator|.
name|getChange
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|updateBranch (RefUpdate branchUpdate)
specifier|private
name|RefUpdate
name|updateBranch
parameter_list|(
name|RefUpdate
name|branchUpdate
parameter_list|)
throws|throws
name|MergeException
block|{
name|CodeReviewCommit
name|currentTip
init|=
name|mergeTip
operator|!=
literal|null
condition|?
name|mergeTip
operator|.
name|getCurrentTip
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|branchTip
argument_list|,
name|currentTip
argument_list|)
condition|)
block|{
name|logDebug
argument_list|(
literal|"Branch already at merge tip {}, no update to perform"
argument_list|,
name|currentTip
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|currentTip
operator|==
literal|null
condition|)
block|{
name|logDebug
argument_list|(
literal|"No merge tip, no update to perform"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|RefNames
operator|.
name|REFS_CONFIG
operator|.
name|equals
argument_list|(
name|branchUpdate
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|logDebug
argument_list|(
literal|"Loading new configuration from {}"
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
expr_stmt|;
try|try
block|{
name|ProjectConfig
name|cfg
init|=
operator|new
name|ProjectConfig
argument_list|(
name|destProject
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|load
argument_list|(
name|repo
argument_list|,
name|currentTip
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Submit would store invalid"
operator|+
literal|" project configuration "
operator|+
name|currentTip
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|destProject
operator|.
name|getProject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|branchUpdate
operator|.
name|setRefLogIdent
argument_list|(
name|refLogIdent
argument_list|)
expr_stmt|;
name|branchUpdate
operator|.
name|setForceUpdate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|branchUpdate
operator|.
name|setNewObjectId
argument_list|(
name|currentTip
argument_list|)
expr_stmt|;
name|branchUpdate
operator|.
name|setRefLogMessage
argument_list|(
literal|"merged"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|RefUpdate
operator|.
name|Result
name|result
init|=
name|branchUpdate
operator|.
name|update
argument_list|(
name|rw
argument_list|)
decl_stmt|;
name|logDebug
argument_list|(
literal|"Update of {}: {}..{} returned status {}"
argument_list|,
name|branchUpdate
operator|.
name|getName
argument_list|()
argument_list|,
name|branchUpdate
operator|.
name|getOldObjectId
argument_list|()
argument_list|,
name|branchUpdate
operator|.
name|getNewObjectId
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|FAST_FORWARD
case|:
if|if
condition|(
name|branchUpdate
operator|.
name|getResult
argument_list|()
operator|==
name|RefUpdate
operator|.
name|Result
operator|.
name|FAST_FORWARD
condition|)
block|{
name|tagCache
operator|.
name|updateFastForward
argument_list|(
name|destBranch
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|branchUpdate
operator|.
name|getName
argument_list|()
argument_list|,
name|branchUpdate
operator|.
name|getOldObjectId
argument_list|()
argument_list|,
name|currentTip
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|RefNames
operator|.
name|REFS_CONFIG
operator|.
name|equals
argument_list|(
name|branchUpdate
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Project
name|p
init|=
name|destProject
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|projectCache
operator|.
name|evict
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|destProject
operator|=
name|projectCache
operator|.
name|get
argument_list|(
name|p
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
name|repoManager
operator|.
name|setProjectDescription
argument_list|(
name|p
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|p
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|branchUpdate
return|;
case|case
name|LOCK_FAILURE
case|:
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Failed to lock "
operator|+
name|branchUpdate
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
name|branchUpdate
operator|.
name|getResult
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|'\n'
operator|+
name|branchUpdate
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot update "
operator|+
name|branchUpdate
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|fireRefUpdated (RefUpdate branchUpdate)
specifier|private
name|void
name|fireRefUpdated
parameter_list|(
name|RefUpdate
name|branchUpdate
parameter_list|)
block|{
name|logDebug
argument_list|(
literal|"Firing ref updated hooks for {}"
argument_list|,
name|branchUpdate
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|gitRefUpdated
operator|.
name|fire
argument_list|(
name|destBranch
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|branchUpdate
argument_list|)
expr_stmt|;
name|hooks
operator|.
name|doRefUpdatedHook
argument_list|(
name|destBranch
argument_list|,
name|branchUpdate
argument_list|,
name|getAccount
argument_list|(
name|mergeTip
operator|.
name|getCurrentTip
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getAccount (CodeReviewCommit codeReviewCommit)
specifier|private
name|Account
name|getAccount
parameter_list|(
name|CodeReviewCommit
name|codeReviewCommit
parameter_list|)
block|{
name|Account
name|account
init|=
literal|null
decl_stmt|;
name|PatchSetApproval
name|submitter
init|=
name|approvalsUtil
operator|.
name|getSubmitter
argument_list|(
name|db
argument_list|,
name|codeReviewCommit
operator|.
name|notes
argument_list|()
argument_list|,
name|codeReviewCommit
operator|.
name|getPatchsetId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|submitter
operator|!=
literal|null
condition|)
block|{
name|account
operator|=
name|accountCache
operator|.
name|get
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
expr_stmt|;
block|}
return|return
name|account
return|;
block|}
DECL|method|getByAccountName (CodeReviewCommit codeReviewCommit)
specifier|private
name|String
name|getByAccountName
parameter_list|(
name|CodeReviewCommit
name|codeReviewCommit
parameter_list|)
block|{
name|Account
name|account
init|=
name|getAccount
argument_list|(
name|codeReviewCommit
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|!=
literal|null
operator|&&
name|account
operator|.
name|getFullName
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|" by "
operator|+
name|account
operator|.
name|getFullName
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
DECL|method|updateChangeStatus (List<Change> submitted, MergeTip mergeTip)
specifier|private
name|void
name|updateChangeStatus
parameter_list|(
name|List
argument_list|<
name|Change
argument_list|>
name|submitted
parameter_list|,
name|MergeTip
name|mergeTip
parameter_list|)
throws|throws
name|NoSuchChangeException
block|{
name|logDebug
argument_list|(
literal|"Updating change status for {} changes"
argument_list|,
name|submitted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Change
name|c
range|:
name|submitted
control|)
block|{
name|CodeReviewCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|CommitMergeStatus
name|s
init|=
name|commit
operator|!=
literal|null
condition|?
name|commit
operator|.
name|getStatusCode
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
comment|// Shouldn't ever happen, but leave the change alone. We'll pick
comment|// it up on the next pass.
comment|//
name|logDebug
argument_list|(
literal|"Submitted change {} did not appear in set of new commits"
operator|+
literal|" produced by merge strategy"
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|txt
init|=
name|s
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|logDebug
argument_list|(
literal|"Status of change {} ({}) on {}: {}"
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|,
name|c
operator|.
name|getDest
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|// If mergeTip is null merge failed and mergeResultRev will not be read.
name|ObjectId
name|mergeResultRev
init|=
name|mergeTip
operator|!=
literal|null
condition|?
name|mergeTip
operator|.
name|getMergeResults
argument_list|()
operator|.
name|get
argument_list|(
name|commit
argument_list|)
else|:
literal|null
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|s
condition|)
block|{
case|case
name|CLEAN_MERGE
case|:
name|setMerged
argument_list|(
name|c
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
name|txt
operator|+
name|getByAccountName
argument_list|(
name|commit
argument_list|)
argument_list|)
argument_list|,
name|mergeResultRev
argument_list|)
expr_stmt|;
break|break;
case|case
name|CLEAN_REBASE
case|:
case|case
name|CLEAN_PICK
case|:
name|setMerged
argument_list|(
name|c
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
name|txt
operator|+
literal|" as "
operator|+
name|commit
operator|.
name|name
argument_list|()
operator|+
name|getByAccountName
argument_list|(
name|commit
argument_list|)
argument_list|)
argument_list|,
name|mergeResultRev
argument_list|)
expr_stmt|;
break|break;
case|case
name|ALREADY_MERGED
case|:
name|setMerged
argument_list|(
name|c
argument_list|,
literal|null
argument_list|,
name|mergeResultRev
argument_list|)
expr_stmt|;
break|break;
case|case
name|PATH_CONFLICT
case|:
case|case
name|MANUAL_RECURSIVE_MERGE
case|:
case|case
name|CANNOT_CHERRY_PICK_ROOT
case|:
case|case
name|NOT_FAST_FORWARD
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION_PLUGIN_VALUE_NOT_PERMITTED
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION_PLUGIN_VALUE_NOT_EDITABLE
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION_PARENT_PROJECT_NOT_FOUND
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION_ROOT_PROJECT_CANNOT_HAVE_PARENT
case|:
case|case
name|SETTING_PARENT_PROJECT_ONLY_ALLOWED_BY_ADMIN
case|:
name|setNew
argument_list|(
name|commit
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
name|txt
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|MISSING_DEPENDENCY
case|:
name|logDebug
argument_list|(
literal|"Change {} is missing dependency"
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|potentiallyStillSubmittable
operator|.
name|add
argument_list|(
name|commit
argument_list|)
expr_stmt|;
break|break;
case|case
name|REVISION_GONE
case|:
name|logDebug
argument_list|(
literal|"Commit not found for change {}"
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeMessage
name|msg
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setMessage
argument_list|(
literal|"Failed to read commit for this patch set"
argument_list|)
expr_stmt|;
name|sendMergeFail
argument_list|(
name|commit
operator|.
name|notes
argument_list|()
argument_list|,
name|msg
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
default|default:
name|setNew
argument_list|(
name|commit
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
literal|"Unspecified merge failure: "
operator|+
name|s
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
decl||
name|IOException
name|err
parameter_list|)
block|{
name|logWarn
argument_list|(
literal|"Error updating change status for "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateSubscriptions (List<Change> submitted)
specifier|private
name|void
name|updateSubscriptions
parameter_list|(
name|List
argument_list|<
name|Change
argument_list|>
name|submitted
parameter_list|)
block|{
if|if
condition|(
name|mergeTip
operator|!=
literal|null
operator|&&
operator|(
name|branchTip
operator|==
literal|null
operator|||
name|branchTip
operator|!=
name|mergeTip
operator|.
name|getCurrentTip
argument_list|()
operator|)
condition|)
block|{
name|logDebug
argument_list|(
literal|"Updating submodule subscriptions for {} changes"
argument_list|,
name|submitted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SubmoduleOp
name|subOp
init|=
name|subOpFactory
operator|.
name|create
argument_list|(
name|destBranch
argument_list|,
name|mergeTip
operator|.
name|getCurrentTip
argument_list|()
argument_list|,
name|rw
argument_list|,
name|repo
argument_list|,
name|destProject
operator|.
name|getProject
argument_list|()
argument_list|,
name|submitted
argument_list|,
name|commits
argument_list|,
name|getAccount
argument_list|(
name|mergeTip
operator|.
name|getCurrentTip
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|subOp
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SubmoduleException
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"The gitLinks were not updated according to the subscriptions"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|message (Change c, String body)
specifier|private
name|ChangeMessage
name|message
parameter_list|(
name|Change
name|c
parameter_list|,
name|String
name|body
parameter_list|)
block|{
name|String
name|uuid
decl_stmt|;
try|try
block|{
name|uuid
operator|=
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|ChangeMessage
name|m
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|uuid
argument_list|)
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|m
operator|.
name|setMessage
argument_list|(
name|body
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
DECL|method|setMerged (Change c, ChangeMessage msg, ObjectId mergeResultRev)
specifier|private
name|void
name|setMerged
parameter_list|(
name|Change
name|c
parameter_list|,
name|ChangeMessage
name|msg
parameter_list|,
name|ObjectId
name|mergeResultRev
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
name|logDebug
argument_list|(
literal|"Setting change {} merged"
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeUpdate
name|update
init|=
literal|null
decl_stmt|;
specifier|final
name|PatchSetApproval
name|submitter
decl_stmt|;
name|PatchSet
name|merged
decl_stmt|;
try|try
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// We must pull the patchset out of commits, because the patchset ID is
comment|// modified when using the cherry-pick merge strategy.
name|CodeReviewCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|mergedId
init|=
name|commit
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|merged
operator|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|mergedId
argument_list|)
expr_stmt|;
name|c
operator|=
name|setMergedPatchSet
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|mergedId
argument_list|)
expr_stmt|;
name|submitter
operator|=
name|approvalsUtil
operator|.
name|getSubmitter
argument_list|(
name|db
argument_list|,
name|commit
operator|.
name|notes
argument_list|()
argument_list|,
name|mergedId
argument_list|)
expr_stmt|;
name|ChangeControl
name|control
init|=
name|commit
operator|.
name|getControl
argument_list|()
decl_stmt|;
name|update
operator|=
name|updateFactory
operator|.
name|create
argument_list|(
name|control
argument_list|,
name|c
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO(yyonas): we need to be able to change the author of the message
comment|// is not the person for whom the change was made. addMergedMessage
comment|// did this in the past.
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|cmUtil
operator|.
name|addChangeMessage
argument_list|(
name|db
argument_list|,
name|update
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|Change
name|change
init|=
name|c
decl_stmt|;
try|try
block|{
name|threadScoper
operator|.
name|scope
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|sendMergedEmail
argument_list|(
name|change
argument_list|,
name|submitter
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"internal server error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|submitter
operator|!=
literal|null
operator|&&
name|mergeResultRev
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|hooks
operator|.
name|doChangeMergedHook
argument_list|(
name|c
argument_list|,
name|accountCache
operator|.
name|get
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
argument_list|,
name|merged
argument_list|,
name|db
argument_list|,
name|mergeResultRev
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|ex
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Cannot run hook for submitted patch set "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setMergedPatchSet (Change.Id changeId, final PatchSet.Id merged)
specifier|private
name|Change
name|setMergedPatchSet
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
specifier|final
name|PatchSet
operator|.
name|Id
name|merged
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|changeId
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
name|c
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|merged
operator|.
name|equals
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Uncool; the patch set changed after we merged it.
comment|// Go back to the patch set that was actually merged.
comment|//
try|try
block|{
name|c
operator|.
name|setCurrentPatchSet
argument_list|(
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|merged
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatchSetInfoNotAvailableException
name|e1
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Cannot read merged patch set "
operator|+
name|merged
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|sendMergedEmail (final Change c, final PatchSetApproval from)
specifier|private
name|void
name|sendMergedEmail
parameter_list|(
specifier|final
name|Change
name|c
parameter_list|,
specifier|final
name|PatchSetApproval
name|from
parameter_list|)
block|{
name|workQueue
operator|.
name|getDefaultQueue
argument_list|()
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|PatchSet
name|patchSet
decl_stmt|;
try|try
block|{
name|ReviewDb
name|reviewDb
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
name|patchSet
operator|=
name|reviewDb
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reviewDb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Cannot send email for submitted patch set "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|MergedSender
name|cm
init|=
name|mergedSenderFactory
operator|.
name|create
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
block|{
name|cm
operator|.
name|setFrom
argument_list|(
name|from
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cm
operator|.
name|setPatchSet
argument_list|(
name|patchSet
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Cannot send email for submitted patch set "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"send-email merged"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|changeControl (Change c)
specifier|private
name|ChangeControl
name|changeControl
parameter_list|(
name|Change
name|c
parameter_list|)
throws|throws
name|NoSuchChangeException
block|{
return|return
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|c
argument_list|,
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|c
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setNew (CodeReviewCommit c, ChangeMessage msg)
specifier|private
name|void
name|setNew
parameter_list|(
name|CodeReviewCommit
name|c
parameter_list|,
name|ChangeMessage
name|msg
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|IOException
block|{
name|sendMergeFail
argument_list|(
name|c
operator|.
name|notes
argument_list|()
argument_list|,
name|msg
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|setNew (Change c, ChangeMessage msg)
specifier|private
name|void
name|setNew
parameter_list|(
name|Change
name|c
parameter_list|,
name|ChangeMessage
name|msg
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|IOException
block|{
name|sendMergeFail
argument_list|(
name|notesFactory
operator|.
name|create
argument_list|(
name|c
argument_list|)
argument_list|,
name|msg
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|enum|RetryStatus
specifier|private
enum|enum
name|RetryStatus
block|{
DECL|enumConstant|UNSUBMIT
DECL|enumConstant|RETRY_NO_MESSAGE
DECL|enumConstant|RETRY_ADD_MESSAGE
name|UNSUBMIT
block|,
name|RETRY_NO_MESSAGE
block|,
name|RETRY_ADD_MESSAGE
block|}
DECL|method|getRetryStatus ( @ullable PatchSetApproval submitter, ChangeMessage msg, ChangeNotes notes)
specifier|private
name|RetryStatus
name|getRetryStatus
parameter_list|(
annotation|@
name|Nullable
name|PatchSetApproval
name|submitter
parameter_list|,
name|ChangeMessage
name|msg
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|)
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|notes
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|submitter
operator|!=
literal|null
condition|)
block|{
name|long
name|sinceMs
init|=
name|TimeUtil
operator|.
name|nowMs
argument_list|()
operator|-
name|submitter
operator|.
name|getGranted
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|sinceMs
operator|>
name|MAX_SUBMIT_WINDOW
condition|)
block|{
name|logDebug
argument_list|(
literal|"Change {} submitted {}ms ago, unsubmitting"
argument_list|,
name|id
argument_list|,
name|sinceMs
argument_list|)
expr_stmt|;
return|return
name|RetryStatus
operator|.
name|UNSUBMIT
return|;
block|}
else|else
block|{
name|logDebug
argument_list|(
literal|"Change {} submitted {}ms ago, within window"
argument_list|,
name|id
argument_list|,
name|sinceMs
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logDebug
argument_list|(
literal|"No submitter for change {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ChangeMessage
name|last
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|cmUtil
operator|.
name|byChange
argument_list|(
name|db
argument_list|,
name|notes
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|last
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|msg
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|last
operator|.
name|getMessage
argument_list|()
argument_list|,
name|msg
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|lastMs
init|=
name|last
operator|.
name|getWrittenOn
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|msgMs
init|=
name|msg
operator|.
name|getWrittenOn
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|sinceMs
init|=
name|msgMs
operator|-
name|lastMs
decl_stmt|;
if|if
condition|(
name|sinceMs
operator|>
name|MAX_SUBMIT_WINDOW
condition|)
block|{
name|logDebug
argument_list|(
literal|"Last message for change {} was {}ms ago, unsubmitting"
argument_list|,
name|id
argument_list|,
name|sinceMs
argument_list|)
expr_stmt|;
return|return
name|RetryStatus
operator|.
name|UNSUBMIT
return|;
block|}
else|else
block|{
name|logDebug
argument_list|(
literal|"Last message for change {} was {}ms ago, within window"
argument_list|,
name|id
argument_list|,
name|sinceMs
argument_list|)
expr_stmt|;
return|return
name|RetryStatus
operator|.
name|RETRY_NO_MESSAGE
return|;
block|}
block|}
else|else
block|{
name|logDebug
argument_list|(
literal|"Last message for change {} differed, adding message"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|RetryStatus
operator|.
name|RETRY_ADD_MESSAGE
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|logWarn
argument_list|(
literal|"Cannot check previous merge failure, unsubmitting"
argument_list|,
name|err
argument_list|)
expr_stmt|;
return|return
name|RetryStatus
operator|.
name|UNSUBMIT
return|;
block|}
block|}
DECL|method|sendMergeFail (ChangeNotes notes, final ChangeMessage msg, boolean makeNew)
specifier|private
name|void
name|sendMergeFail
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
specifier|final
name|ChangeMessage
name|msg
parameter_list|,
name|boolean
name|makeNew
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|IOException
block|{
name|logDebug
argument_list|(
literal|"Possibly sending merge failure notification for {}"
argument_list|,
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|PatchSetApproval
name|submitter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|submitter
operator|=
name|approvalsUtil
operator|.
name|getSubmitter
argument_list|(
name|db
argument_list|,
name|notes
argument_list|,
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Cannot get submitter for change "
operator|+
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|makeNew
condition|)
block|{
name|RetryStatus
name|retryStatus
init|=
name|getRetryStatus
argument_list|(
name|submitter
argument_list|,
name|msg
argument_list|,
name|notes
argument_list|)
decl_stmt|;
if|if
condition|(
name|retryStatus
operator|==
name|RetryStatus
operator|.
name|RETRY_NO_MESSAGE
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|retryStatus
operator|==
name|RetryStatus
operator|.
name|UNSUBMIT
condition|)
block|{
name|makeNew
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|final
name|boolean
name|setStatusNew
init|=
name|makeNew
decl_stmt|;
specifier|final
name|Change
name|c
init|=
name|notes
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|Change
name|change
init|=
literal|null
decl_stmt|;
name|ChangeUpdate
name|update
init|=
literal|null
decl_stmt|;
try|try
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
if|if
condition|(
name|setStatusNew
condition|)
block|{
name|c
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ChangeControl
name|control
init|=
name|changeControl
argument_list|(
name|change
argument_list|)
decl_stmt|;
comment|//TODO(yyonas): atomic change is not propagated.
name|update
operator|=
name|updateFactory
operator|.
name|create
argument_list|(
name|control
argument_list|,
name|c
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|cmUtil
operator|.
name|addChangeMessage
argument_list|(
name|db
argument_list|,
name|update
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|logWarn
argument_list|(
literal|"Cannot record merge failure message"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|update
operator|!=
literal|null
condition|)
block|{
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|change
argument_list|)
expr_stmt|;
specifier|final
name|PatchSetApproval
name|from
init|=
name|submitter
decl_stmt|;
try|try
block|{
name|threadScoper
operator|.
name|scope
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|workQueue
operator|.
name|getDefaultQueue
argument_list|()
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|PatchSet
name|patchSet
decl_stmt|;
try|try
block|{
name|ReviewDb
name|reviewDb
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
name|patchSet
operator|=
name|reviewDb
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reviewDb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Cannot send email notifications about merge failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|MergeFailSender
name|cm
init|=
name|mergeFailSenderFactory
operator|.
name|create
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
block|{
name|cm
operator|.
name|setFrom
argument_list|(
name|from
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cm
operator|.
name|setPatchSet
argument_list|(
name|patchSet
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setChangeMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Cannot send email notifications about merge failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"send-email merge-failed"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"internal server error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|submitter
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|hooks
operator|.
name|doMergeFailedHook
argument_list|(
name|c
argument_list|,
name|accountCache
operator|.
name|get
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
argument_list|,
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|,
name|msg
operator|.
name|getMessage
argument_list|()
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|ex
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Cannot run hook for merge failed "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|abandonAllOpenChanges ()
specifier|private
name|void
name|abandonAllOpenChanges
parameter_list|()
throws|throws
name|NoSuchChangeException
block|{
name|Exception
name|err
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openSchema
argument_list|()
expr_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byProjectOpen
argument_list|(
name|destBranch
operator|.
name|getParentKey
argument_list|()
argument_list|)
control|)
block|{
name|abandonOneChange
argument_list|(
name|cd
operator|.
name|change
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
name|db
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|err
operator|=
name|e
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|err
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|logWarn
argument_list|(
literal|"Cannot abandon changes for deleted project "
operator|+
name|destBranch
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|abandonOneChange (Change change)
specifier|private
name|void
name|abandonOneChange
parameter_list|(
name|Change
name|change
parameter_list|)
throws|throws
name|OrmException
throws|,
name|NoSuchChangeException
throws|,
name|IOException
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO(dborowitz): support InternalUser in ChangeUpdate
name|ChangeControl
name|control
init|=
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|change
argument_list|,
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|change
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|control
argument_list|)
decl_stmt|;
try|try
block|{
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|!=
literal|null
condition|)
block|{
name|ChangeMessage
name|msg
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|change
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|,
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setMessage
argument_list|(
literal|"Project was deleted."
argument_list|)
expr_stmt|;
comment|//TODO(yyonas): atomic change is not propagated.
name|cmUtil
operator|.
name|addChangeMessage
argument_list|(
name|db
argument_list|,
name|update
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|logDebug (String msg, Object... args)
specifier|private
name|void
name|logDebug
parameter_list|(
name|String
name|msg
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|logPrefix
operator|+
name|msg
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logWarn (String msg, Throwable t)
specifier|private
name|void
name|logWarn
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|logPrefix
operator|+
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logWarn (String msg)
specifier|private
name|void
name|logWarn
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|logPrefix
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logError (String msg, Throwable t)
specifier|private
name|void
name|logError
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isErrorEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
name|logPrefix
operator|+
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logError (String msg)
specifier|private
name|void
name|logError
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isErrorEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
name|logPrefix
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

