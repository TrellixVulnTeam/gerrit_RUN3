begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ReviewerStateInternal
operator|.
name|REVIEWER
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBasedTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hasher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|ChangeHooks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitTypeRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|LabelId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|CodeReviewCommit
operator|.
name|CodeReviewRevWalk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|VersionedMetaData
operator|.
name|BatchMetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|strategy
operator|.
name|SubmitStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|strategy
operator|.
name|SubmitStrategyFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|MergeValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|MergeValidators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|ChangeIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|SubmitRuleEvaluator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|AtomicUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Merges changes in submission order into a single branch.  *<p>  * Branches are reduced to the minimum number of heads needed to merge  * everything. This allows commits to be entered into the queue in any order  * (such as ancestors before descendants) and only the most recent commit on any  * line of development will be merged. All unmerged commits along a line of  * development must be in the submission queue in order to merge the tip of that  * line.  *<p>  * Conflicts are handled by discarding the entire line of development and  * marking it as conflicting, even if an earlier commit along that same line can  * be merged cleanly.  */
end_comment

begin_class
DECL|class|MergeOp
specifier|public
class|class
name|MergeOp
implements|implements
name|AutoCloseable
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MergeOp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|OpenRepo
specifier|private
specifier|static
class|class
name|OpenRepo
block|{
DECL|field|repo
specifier|final
name|Repository
name|repo
decl_stmt|;
DECL|field|rw
specifier|final
name|CodeReviewRevWalk
name|rw
decl_stmt|;
DECL|field|canMergeFlag
specifier|final
name|RevFlag
name|canMergeFlag
decl_stmt|;
DECL|field|ins
specifier|final
name|ObjectInserter
name|ins
decl_stmt|;
DECL|field|project
name|ProjectState
name|project
decl_stmt|;
DECL|field|branches
specifier|private
specifier|final
name|Map
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|OpenBranch
argument_list|>
name|branches
decl_stmt|;
DECL|method|OpenRepo (Repository repo, ProjectState project)
name|OpenRepo
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|ProjectState
name|project
parameter_list|)
block|{
name|this
operator|.
name|repo
operator|=
name|repo
expr_stmt|;
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
name|rw
operator|=
name|CodeReviewCommit
operator|.
name|newRevWalk
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|COMMIT_TIME_DESC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rw
operator|.
name|setRetainBody
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|canMergeFlag
operator|=
name|rw
operator|.
name|newFlag
argument_list|(
literal|"CAN_MERGE"
argument_list|)
expr_stmt|;
name|ins
operator|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
expr_stmt|;
name|branches
operator|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|getBranch (Branch.NameKey branch)
name|OpenBranch
name|getBranch
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
throws|throws
name|IntegrationException
block|{
name|OpenBranch
name|ob
init|=
name|branches
operator|.
name|get
argument_list|(
name|branch
argument_list|)
decl_stmt|;
if|if
condition|(
name|ob
operator|==
literal|null
condition|)
block|{
name|ob
operator|=
operator|new
name|OpenBranch
argument_list|(
name|this
argument_list|,
name|branch
argument_list|)
expr_stmt|;
name|branches
operator|.
name|put
argument_list|(
name|branch
argument_list|,
name|ob
argument_list|)
expr_stmt|;
block|}
return|return
name|ob
return|;
block|}
DECL|method|getProjectName ()
name|Project
operator|.
name|NameKey
name|getProjectName
parameter_list|()
block|{
return|return
name|project
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
return|;
block|}
DECL|method|close ()
name|void
name|close
parameter_list|()
block|{
name|ins
operator|.
name|close
argument_list|()
expr_stmt|;
name|rw
operator|.
name|close
argument_list|()
expr_stmt|;
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|OpenBranch
specifier|private
specifier|static
class|class
name|OpenBranch
block|{
DECL|field|name
specifier|final
name|Branch
operator|.
name|NameKey
name|name
decl_stmt|;
DECL|field|update
specifier|final
name|RefUpdate
name|update
decl_stmt|;
DECL|field|oldTip
specifier|final
name|CodeReviewCommit
name|oldTip
decl_stmt|;
DECL|field|mergeTip
name|MergeTip
name|mergeTip
decl_stmt|;
DECL|method|OpenBranch (OpenRepo or, Branch.NameKey name)
name|OpenBranch
parameter_list|(
name|OpenRepo
name|or
parameter_list|,
name|Branch
operator|.
name|NameKey
name|name
parameter_list|)
throws|throws
name|IntegrationException
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
try|try
block|{
name|update
operator|=
name|or
operator|.
name|repo
operator|.
name|updateRef
argument_list|(
name|name
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|update
operator|.
name|getOldObjectId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|oldTip
operator|=
name|or
operator|.
name|rw
operator|.
name|parseCommit
argument_list|(
name|update
operator|.
name|getOldObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|or
operator|.
name|repo
operator|.
name|getFullBranch
argument_list|()
argument_list|,
name|name
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|oldTip
operator|=
literal|null
expr_stmt|;
name|update
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"The destination branch "
operator|+
name|name
operator|+
literal|" does not exist anymore."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Cannot open branch "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getCurrentTip ()
name|CodeReviewCommit
name|getCurrentTip
parameter_list|()
block|{
return|return
name|mergeTip
operator|!=
literal|null
condition|?
name|mergeTip
operator|.
name|getCurrentTip
argument_list|()
else|:
name|oldTip
return|;
block|}
block|}
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|approvalsUtil
specifier|private
specifier|final
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
DECL|field|changeControlFactory
specifier|private
specifier|final
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
DECL|field|hooks
specifier|private
specifier|final
name|ChangeHooks
name|hooks
decl_stmt|;
DECL|field|indexer
specifier|private
specifier|final
name|ChangeIndexer
name|indexer
decl_stmt|;
DECL|field|cmUtil
specifier|private
specifier|final
name|ChangeMessagesUtil
name|cmUtil
decl_stmt|;
DECL|field|updateFactory
specifier|private
specifier|final
name|ChangeUpdate
operator|.
name|Factory
name|updateFactory
decl_stmt|;
DECL|field|gitRefUpdated
specifier|private
specifier|final
name|GitReferenceUpdated
name|gitRefUpdated
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|identifiedUserFactory
specifier|private
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
decl_stmt|;
DECL|field|labelNormalizer
specifier|private
specifier|final
name|LabelNormalizer
name|labelNormalizer
decl_stmt|;
DECL|field|mergedSenderFactory
specifier|private
specifier|final
name|EmailMerge
operator|.
name|Factory
name|mergedSenderFactory
decl_stmt|;
DECL|field|mergeSuperSet
specifier|private
specifier|final
name|MergeSuperSet
name|mergeSuperSet
decl_stmt|;
DECL|field|mergeValidatorsFactory
specifier|private
specifier|final
name|MergeValidators
operator|.
name|Factory
name|mergeValidatorsFactory
decl_stmt|;
DECL|field|patchSetInfoFactory
specifier|private
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|internalChangeQuery
specifier|private
specifier|final
name|InternalChangeQuery
name|internalChangeQuery
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|PersonIdent
name|serverIdent
decl_stmt|;
DECL|field|submitStrategyFactory
specifier|private
specifier|final
name|SubmitStrategyFactory
name|submitStrategyFactory
decl_stmt|;
DECL|field|subOpProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|SubmoduleOp
argument_list|>
name|subOpProvider
decl_stmt|;
DECL|field|tagCache
specifier|private
specifier|final
name|TagCache
name|tagCache
decl_stmt|;
DECL|field|openRepos
specifier|private
specifier|final
name|Map
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|OpenRepo
argument_list|>
name|openRepos
decl_stmt|;
DECL|field|commits
specifier|private
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|CodeReviewCommit
argument_list|>
name|commits
decl_stmt|;
DECL|field|problems
specifier|private
specifier|final
name|Multimap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|problems
decl_stmt|;
DECL|field|MACHINE_ID
specifier|private
specifier|static
specifier|final
name|String
name|MACHINE_ID
decl_stmt|;
static|static
block|{
name|String
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|id
operator|=
literal|"unknown"
expr_stmt|;
block|}
name|MACHINE_ID
operator|=
name|id
expr_stmt|;
block|}
DECL|field|staticSubmissionId
specifier|private
name|String
name|staticSubmissionId
decl_stmt|;
DECL|field|submissionId
specifier|private
name|String
name|submissionId
decl_stmt|;
DECL|field|db
specifier|private
name|ReviewDb
name|db
decl_stmt|;
annotation|@
name|Inject
DECL|method|MergeOp (AccountCache accountCache, ApprovalsUtil approvalsUtil, ChangeControl.GenericFactory changeControlFactory, ChangeHooks hooks, ChangeIndexer indexer, ChangeMessagesUtil cmUtil, ChangeUpdate.Factory updateFactory, GitReferenceUpdated gitRefUpdated, GitRepositoryManager repoManager, IdentifiedUser.GenericFactory identifiedUserFactory, LabelNormalizer labelNormalizer, EmailMerge.Factory mergedSenderFactory, MergeSuperSet mergeSuperSet, MergeValidators.Factory mergeValidatorsFactory, PatchSetInfoFactory patchSetInfoFactory, ProjectCache projectCache, InternalChangeQuery internalChangeQuery, @GerritPersonIdent PersonIdent serverIdent, SubmitStrategyFactory submitStrategyFactory, Provider<SubmoduleOp> subOpProvider, TagCache tagCache)
name|MergeOp
parameter_list|(
name|AccountCache
name|accountCache
parameter_list|,
name|ApprovalsUtil
name|approvalsUtil
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
parameter_list|,
name|ChangeHooks
name|hooks
parameter_list|,
name|ChangeIndexer
name|indexer
parameter_list|,
name|ChangeMessagesUtil
name|cmUtil
parameter_list|,
name|ChangeUpdate
operator|.
name|Factory
name|updateFactory
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
parameter_list|,
name|LabelNormalizer
name|labelNormalizer
parameter_list|,
name|EmailMerge
operator|.
name|Factory
name|mergedSenderFactory
parameter_list|,
name|MergeSuperSet
name|mergeSuperSet
parameter_list|,
name|MergeValidators
operator|.
name|Factory
name|mergeValidatorsFactory
parameter_list|,
name|PatchSetInfoFactory
name|patchSetInfoFactory
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|InternalChangeQuery
name|internalChangeQuery
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverIdent
parameter_list|,
name|SubmitStrategyFactory
name|submitStrategyFactory
parameter_list|,
name|Provider
argument_list|<
name|SubmoduleOp
argument_list|>
name|subOpProvider
parameter_list|,
name|TagCache
name|tagCache
parameter_list|)
block|{
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|approvalsUtil
operator|=
name|approvalsUtil
expr_stmt|;
name|this
operator|.
name|changeControlFactory
operator|=
name|changeControlFactory
expr_stmt|;
name|this
operator|.
name|hooks
operator|=
name|hooks
expr_stmt|;
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
name|this
operator|.
name|cmUtil
operator|=
name|cmUtil
expr_stmt|;
name|this
operator|.
name|updateFactory
operator|=
name|updateFactory
expr_stmt|;
name|this
operator|.
name|gitRefUpdated
operator|=
name|gitRefUpdated
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|identifiedUserFactory
operator|=
name|identifiedUserFactory
expr_stmt|;
name|this
operator|.
name|labelNormalizer
operator|=
name|labelNormalizer
expr_stmt|;
name|this
operator|.
name|mergedSenderFactory
operator|=
name|mergedSenderFactory
expr_stmt|;
name|this
operator|.
name|mergeSuperSet
operator|=
name|mergeSuperSet
expr_stmt|;
name|this
operator|.
name|mergeValidatorsFactory
operator|=
name|mergeValidatorsFactory
expr_stmt|;
name|this
operator|.
name|patchSetInfoFactory
operator|=
name|patchSetInfoFactory
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|internalChangeQuery
operator|=
name|internalChangeQuery
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
name|this
operator|.
name|submitStrategyFactory
operator|=
name|submitStrategyFactory
expr_stmt|;
name|this
operator|.
name|subOpProvider
operator|=
name|subOpProvider
expr_stmt|;
name|this
operator|.
name|tagCache
operator|=
name|tagCache
expr_stmt|;
name|commits
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|openRepos
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|problems
operator|=
name|MultimapBuilder
operator|.
name|linkedHashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|openRepo (Project.NameKey project)
specifier|private
name|OpenRepo
name|openRepo
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
throws|throws
name|NoSuchProjectException
throws|,
name|IOException
block|{
name|OpenRepo
name|repo
init|=
name|openRepos
operator|.
name|get
argument_list|(
name|project
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
name|ProjectState
name|projectState
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|project
argument_list|)
decl_stmt|;
if|if
condition|(
name|projectState
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchProjectException
argument_list|(
name|project
argument_list|)
throw|;
block|}
try|try
block|{
name|repo
operator|=
operator|new
name|OpenRepo
argument_list|(
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
argument_list|,
name|projectState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchProjectException
argument_list|(
name|project
argument_list|)
throw|;
block|}
name|openRepos
operator|.
name|put
argument_list|(
name|project
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
return|return
name|repo
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|OpenRepo
name|repo
range|:
name|openRepos
operator|.
name|values
argument_list|()
control|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|findOkRecord ( Collection<SubmitRecord> in)
specifier|private
specifier|static
name|Optional
argument_list|<
name|SubmitRecord
argument_list|>
name|findOkRecord
parameter_list|(
name|Collection
argument_list|<
name|SubmitRecord
argument_list|>
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
return|return
name|Iterables
operator|.
name|tryFind
argument_list|(
name|in
argument_list|,
operator|new
name|Predicate
argument_list|<
name|SubmitRecord
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|SubmitRecord
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|status
operator|==
name|SubmitRecord
operator|.
name|Status
operator|.
name|OK
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|checkSubmitRule (ChangeData cd)
specifier|public
specifier|static
name|void
name|checkSubmitRule
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|ResourceConflictException
throws|,
name|OrmException
block|{
name|PatchSet
name|patchSet
init|=
name|cd
operator|.
name|currentPatchSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|patchSet
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"missing current patch set for change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|results
init|=
name|cd
operator|.
name|getSubmitRecords
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
name|results
operator|=
operator|new
name|SubmitRuleEvaluator
argument_list|(
name|cd
argument_list|)
operator|.
name|evaluate
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setSubmitRecords
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|findOkRecord
argument_list|(
name|results
argument_list|)
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// Rules supplied a valid solution.
return|return;
block|}
elseif|else
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SubmitRuleEvaluator.evaluate for change %s "
operator|+
literal|"returned empty list for %s in %s"
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|patchSet
operator|.
name|getId
argument_list|()
argument_list|,
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|SubmitRecord
name|record
range|:
name|results
control|)
block|{
switch|switch
condition|(
name|record
operator|.
name|status
condition|)
block|{
case|case
name|CLOSED
case|:
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"change is closed"
argument_list|)
throw|;
case|case
name|RULE_ERROR
case|:
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"submit rule error: "
operator|+
name|record
operator|.
name|errorMessage
argument_list|)
throw|;
case|case
name|NOT_READY
case|:
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|describeLabels
argument_list|(
name|cd
argument_list|,
name|record
operator|.
name|labels
argument_list|)
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unsupported SubmitRecord %s for %s in %s"
argument_list|,
name|record
argument_list|,
name|patchSet
operator|.
name|getId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
DECL|method|describeLabels (ChangeData cd, List<SubmitRecord.Label> labels)
specifier|private
specifier|static
name|String
name|describeLabels
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|List
argument_list|<
name|SubmitRecord
operator|.
name|Label
argument_list|>
name|labels
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|labelResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubmitRecord
operator|.
name|Label
name|lbl
range|:
name|labels
control|)
block|{
switch|switch
condition|(
name|lbl
operator|.
name|status
condition|)
block|{
case|case
name|OK
case|:
case|case
name|MAY
case|:
break|break;
case|case
name|REJECT
case|:
name|labelResults
operator|.
name|add
argument_list|(
literal|"blocked by "
operator|+
name|lbl
operator|.
name|label
argument_list|)
expr_stmt|;
break|break;
case|case
name|NEED
case|:
name|labelResults
operator|.
name|add
argument_list|(
literal|"needs "
operator|+
name|lbl
operator|.
name|label
argument_list|)
expr_stmt|;
break|break;
case|case
name|IMPOSSIBLE
case|:
name|labelResults
operator|.
name|add
argument_list|(
literal|"needs "
operator|+
name|lbl
operator|.
name|label
operator|+
literal|" (check project access)"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unsupported SubmitRecord.Label %s for %s in %s"
argument_list|,
name|lbl
argument_list|,
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|"; "
argument_list|)
operator|.
name|join
argument_list|(
name|labelResults
argument_list|)
return|;
block|}
DECL|method|checkSubmitRulesAndState (ChangeSet cs)
specifier|private
name|void
name|checkSubmitRulesAndState
parameter_list|(
name|ChangeSet
name|cs
parameter_list|)
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|cs
operator|.
name|changes
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|!=
name|Change
operator|.
name|Status
operator|.
name|NEW
condition|)
block|{
name|problems
operator|.
name|put
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
operator|+
literal|" is "
operator|+
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkSubmitRule
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|problems
operator|.
name|put
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error checking submit rules for change"
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|problems
operator|.
name|put
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateSubmissionId (Change change)
specifier|private
name|void
name|updateSubmissionId
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
name|Hasher
name|h
init|=
name|Hashing
operator|.
name|sha1
argument_list|()
operator|.
name|newHasher
argument_list|()
decl_stmt|;
name|h
operator|.
name|putLong
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|putUnencodedChars
argument_list|(
name|MACHINE_ID
argument_list|)
expr_stmt|;
name|staticSubmissionId
operator|=
name|h
operator|.
name|hash
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|submissionId
operator|=
name|change
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"-"
operator|+
name|TimeUtil
operator|.
name|nowMs
argument_list|()
operator|+
literal|"-"
operator|+
name|staticSubmissionId
expr_stmt|;
block|}
DECL|method|merge (ReviewDb db, Change change, IdentifiedUser caller, boolean checkSubmitRules)
specifier|public
name|void
name|merge
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
name|change
parameter_list|,
name|IdentifiedUser
name|caller
parameter_list|,
name|boolean
name|checkSubmitRules
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|OrmException
throws|,
name|ResourceConflictException
block|{
name|updateSubmissionId
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|logDebug
argument_list|(
literal|"Beginning integration of {}"
argument_list|,
name|change
argument_list|)
expr_stmt|;
try|try
block|{
name|ChangeSet
name|cs
init|=
name|mergeSuperSet
operator|.
name|completeChangeSet
argument_list|(
name|db
argument_list|,
name|change
argument_list|)
decl_stmt|;
name|reloadChanges
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|logDebug
argument_list|(
literal|"Calculated to merge {}"
argument_list|,
name|cs
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkSubmitRules
condition|)
block|{
name|logDebug
argument_list|(
literal|"Checking submit rules and state"
argument_list|)
expr_stmt|;
name|checkSubmitRulesAndState
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|failFast
argument_list|(
name|cs
argument_list|)
expr_stmt|;
comment|// Done checks that don't involve opening repo.
block|}
try|try
block|{
name|integrateIntoHistory
argument_list|(
name|cs
argument_list|,
name|caller
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IntegrationException
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Merge Conflict"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"Merge Conflict"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Anything before the merge attempt is an error
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|reloadChanges (ChangeSet cs)
specifier|private
specifier|static
name|void
name|reloadChanges
parameter_list|(
name|ChangeSet
name|cs
parameter_list|)
throws|throws
name|OrmException
block|{
comment|// Reload changes in case index was stale.
for|for
control|(
name|ChangeData
name|cd
range|:
name|cs
operator|.
name|changes
argument_list|()
control|)
block|{
name|cd
operator|.
name|reloadChange
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|failFast (ChangeSet cs)
specifier|private
name|void
name|failFast
parameter_list|(
name|ChangeSet
name|cs
parameter_list|)
throws|throws
name|ResourceConflictException
block|{
if|if
condition|(
name|problems
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|msg
init|=
literal|"Failed to submit "
operator|+
name|cs
operator|.
name|size
argument_list|()
operator|+
literal|" change"
operator|+
operator|(
name|cs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
operator|)
operator|+
literal|" due to the following problems:\n"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|problems
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Change
operator|.
name|Id
name|id
range|:
name|problems
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ps
operator|.
name|add
argument_list|(
literal|"Change "
operator|+
name|id
operator|+
literal|": "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|"; "
argument_list|)
operator|.
name|join
argument_list|(
name|problems
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|msg
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|join
argument_list|(
name|ps
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|integrateIntoHistory (ChangeSet cs, IdentifiedUser caller)
specifier|private
name|void
name|integrateIntoHistory
parameter_list|(
name|ChangeSet
name|cs
parameter_list|,
name|IdentifiedUser
name|caller
parameter_list|)
throws|throws
name|IntegrationException
throws|,
name|NoSuchChangeException
throws|,
name|ResourceConflictException
block|{
name|logDebug
argument_list|(
literal|"Beginning merge attempt on {}"
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|BranchBatch
argument_list|>
name|toSubmit
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|logDebug
argument_list|(
literal|"Perform the merges"
argument_list|)
expr_stmt|;
try|try
block|{
name|Multimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Branch
operator|.
name|NameKey
argument_list|>
name|br
init|=
name|cs
operator|.
name|branchesByProject
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|ChangeData
argument_list|>
name|cbb
init|=
name|cs
operator|.
name|changesByBranch
argument_list|()
decl_stmt|;
for|for
control|(
name|Branch
operator|.
name|NameKey
name|branch
range|:
name|cbb
operator|.
name|keySet
argument_list|()
control|)
block|{
name|OpenRepo
name|or
init|=
name|openRepo
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
name|toSubmit
operator|.
name|put
argument_list|(
name|branch
argument_list|,
name|validateChangeList
argument_list|(
name|or
argument_list|,
name|cbb
operator|.
name|get
argument_list|(
name|branch
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|failFast
argument_list|(
name|cs
argument_list|)
expr_stmt|;
comment|// Done checks that don't involve running submit strategies.
for|for
control|(
name|Branch
operator|.
name|NameKey
name|branch
range|:
name|cbb
operator|.
name|keySet
argument_list|()
control|)
block|{
name|OpenRepo
name|or
init|=
name|openRepo
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
name|OpenBranch
name|ob
init|=
name|or
operator|.
name|getBranch
argument_list|(
name|branch
argument_list|)
decl_stmt|;
name|BranchBatch
name|submitting
init|=
name|toSubmit
operator|.
name|get
argument_list|(
name|branch
argument_list|)
decl_stmt|;
name|SubmitStrategy
name|strategy
init|=
name|createStrategy
argument_list|(
name|or
argument_list|,
name|branch
argument_list|,
name|submitting
operator|.
name|submitType
argument_list|()
argument_list|,
name|ob
operator|.
name|oldTip
argument_list|,
name|caller
argument_list|)
decl_stmt|;
name|ob
operator|.
name|mergeTip
operator|=
name|preMerge
argument_list|(
name|strategy
argument_list|,
name|submitting
operator|.
name|changes
argument_list|()
argument_list|,
name|ob
operator|.
name|oldTip
argument_list|)
expr_stmt|;
block|}
name|checkMergeStrategyResults
argument_list|(
name|cs
argument_list|,
name|toSubmit
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Project
operator|.
name|NameKey
name|project
range|:
name|br
operator|.
name|keySet
argument_list|()
control|)
block|{
name|openRepo
argument_list|(
name|project
argument_list|)
operator|.
name|ins
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|done
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|cbb
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|logDebug
argument_list|(
literal|"Write out the new branch tips"
argument_list|)
expr_stmt|;
name|SubmoduleOp
name|subOp
init|=
name|subOpProvider
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|Project
operator|.
name|NameKey
name|project
range|:
name|br
operator|.
name|keySet
argument_list|()
control|)
block|{
name|OpenRepo
name|or
init|=
name|openRepo
argument_list|(
name|project
argument_list|)
decl_stmt|;
for|for
control|(
name|Branch
operator|.
name|NameKey
name|branch
range|:
name|br
operator|.
name|get
argument_list|(
name|project
argument_list|)
control|)
block|{
name|OpenBranch
name|ob
init|=
name|or
operator|.
name|getBranch
argument_list|(
name|branch
argument_list|)
decl_stmt|;
name|boolean
name|updated
init|=
name|updateBranch
argument_list|(
name|or
argument_list|,
name|branch
argument_list|,
name|caller
argument_list|)
decl_stmt|;
name|BranchBatch
name|submitting
init|=
name|toSubmit
operator|.
name|get
argument_list|(
name|branch
argument_list|)
decl_stmt|;
name|updateChangeStatus
argument_list|(
name|ob
argument_list|,
name|submitting
operator|.
name|changes
argument_list|()
argument_list|,
name|caller
argument_list|)
expr_stmt|;
name|updateSubmoduleSubscriptions
argument_list|(
name|ob
argument_list|,
name|subOp
argument_list|)
expr_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|fireRefUpdated
argument_list|(
name|ob
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|add
argument_list|(
name|branch
argument_list|)
expr_stmt|;
block|}
block|}
name|updateSuperProjects
argument_list|(
name|subOp
argument_list|,
name|br
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|done
operator|.
name|equals
argument_list|(
name|cbb
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
literal|"programmer error: did not process"
operator|+
literal|" all branches in input set.\nExpected: %s\nActual: %s"
argument_list|,
name|done
argument_list|,
name|cbb
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|noProject
parameter_list|)
block|{
name|logWarn
argument_list|(
literal|"Project "
operator|+
name|noProject
operator|.
name|project
argument_list|()
operator|+
literal|" no longer exists, "
operator|+
literal|"abandoning open changes"
argument_list|)
expr_stmt|;
name|abandonAllOpenChanges
argument_list|(
name|noProject
operator|.
name|project
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Cannot query the database"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Cannot query the database"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|preMerge (SubmitStrategy strategy, List<ChangeData> submitted, CodeReviewCommit branchTip)
specifier|private
name|MergeTip
name|preMerge
parameter_list|(
name|SubmitStrategy
name|strategy
parameter_list|,
name|List
argument_list|<
name|ChangeData
argument_list|>
name|submitted
parameter_list|,
name|CodeReviewCommit
name|branchTip
parameter_list|)
throws|throws
name|IntegrationException
throws|,
name|OrmException
block|{
name|logDebug
argument_list|(
literal|"Running submit strategy {} for {} commits {}"
argument_list|,
name|strategy
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|submitted
operator|.
name|size
argument_list|()
argument_list|,
name|submitted
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|toMerge
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|submitted
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|submitted
control|)
block|{
name|CodeReviewCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|commit
operator|!=
literal|null
argument_list|,
literal|"commit for %s not found by validateChangeList"
argument_list|,
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|toMerge
operator|.
name|add
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
name|MergeTip
name|mergeTip
init|=
name|strategy
operator|.
name|run
argument_list|(
name|branchTip
argument_list|,
name|toMerge
argument_list|)
decl_stmt|;
name|logDebug
argument_list|(
literal|"Produced {} new commits"
argument_list|,
name|strategy
operator|.
name|getNewCommits
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commits
operator|.
name|putAll
argument_list|(
name|strategy
operator|.
name|getNewCommits
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mergeTip
return|;
block|}
DECL|method|createStrategy (OpenRepo or, Branch.NameKey destBranch, SubmitType submitType, CodeReviewCommit branchTip, IdentifiedUser caller)
specifier|private
name|SubmitStrategy
name|createStrategy
parameter_list|(
name|OpenRepo
name|or
parameter_list|,
name|Branch
operator|.
name|NameKey
name|destBranch
parameter_list|,
name|SubmitType
name|submitType
parameter_list|,
name|CodeReviewCommit
name|branchTip
parameter_list|,
name|IdentifiedUser
name|caller
parameter_list|)
throws|throws
name|IntegrationException
throws|,
name|NoSuchProjectException
block|{
return|return
name|submitStrategyFactory
operator|.
name|create
argument_list|(
name|submitType
argument_list|,
name|db
argument_list|,
name|or
operator|.
name|repo
argument_list|,
name|or
operator|.
name|rw
argument_list|,
name|or
operator|.
name|ins
argument_list|,
name|or
operator|.
name|canMergeFlag
argument_list|,
name|getAlreadyAccepted
argument_list|(
name|or
argument_list|,
name|branchTip
argument_list|)
argument_list|,
name|destBranch
argument_list|,
name|caller
argument_list|)
return|;
block|}
DECL|method|getAlreadyAccepted (OpenRepo or, CodeReviewCommit branchTip)
specifier|private
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|getAlreadyAccepted
parameter_list|(
name|OpenRepo
name|or
parameter_list|,
name|CodeReviewCommit
name|branchTip
parameter_list|)
throws|throws
name|IntegrationException
block|{
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|alreadyAccepted
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|branchTip
operator|!=
literal|null
condition|)
block|{
name|alreadyAccepted
operator|.
name|add
argument_list|(
name|branchTip
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|Ref
name|r
range|:
name|or
operator|.
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|alreadyAccepted
operator|.
name|add
argument_list|(
name|or
operator|.
name|rw
operator|.
name|parseCommit
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|iote
parameter_list|)
block|{
comment|// Not a commit? Skip over it.
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Failed to determine already accepted commits."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|logDebug
argument_list|(
literal|"Found {} existing heads"
argument_list|,
name|alreadyAccepted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|alreadyAccepted
return|;
block|}
annotation|@
name|AutoValue
DECL|class|BranchBatch
specifier|static
specifier|abstract
class|class
name|BranchBatch
block|{
DECL|method|submitType ()
specifier|abstract
name|SubmitType
name|submitType
parameter_list|()
function_decl|;
DECL|method|changes ()
specifier|abstract
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|()
function_decl|;
block|}
DECL|method|logProblem (Change.Id id, Throwable t)
specifier|private
name|void
name|logProblem
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error reading change"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|id
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|problems
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|logProblem (Change.Id id, String msg)
specifier|private
name|void
name|logProblem
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|id
argument_list|)
expr_stmt|;
name|problems
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|validateChangeList (OpenRepo or, Collection<ChangeData> submitted)
specifier|private
name|BranchBatch
name|validateChangeList
parameter_list|(
name|OpenRepo
name|or
parameter_list|,
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|submitted
parameter_list|)
throws|throws
name|IntegrationException
block|{
name|logDebug
argument_list|(
literal|"Validating {} changes"
argument_list|,
name|submitted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeData
argument_list|>
name|toSubmit
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|submitted
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|PatchSet
operator|.
name|Id
argument_list|>
name|revisions
init|=
name|getRevisions
argument_list|(
name|or
argument_list|,
name|submitted
argument_list|)
decl_stmt|;
name|SubmitType
name|submitType
init|=
literal|null
decl_stmt|;
name|ChangeData
name|choseSubmitTypeFrom
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|submitted
control|)
block|{
name|Change
operator|.
name|Id
name|changeId
init|=
name|cd
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ChangeControl
name|ctl
decl_stmt|;
name|Change
name|chg
decl_stmt|;
try|try
block|{
name|ctl
operator|=
name|cd
operator|.
name|changeControl
argument_list|()
expr_stmt|;
name|chg
operator|=
name|cd
operator|.
name|change
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|logProblem
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|chg
operator|.
name|currentPatchSetId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Missing current patch set on change"
decl_stmt|;
name|logError
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|changeId
argument_list|)
expr_stmt|;
name|problems
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|msg
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|PatchSet
name|ps
decl_stmt|;
name|Branch
operator|.
name|NameKey
name|destBranch
init|=
name|chg
operator|.
name|getDest
argument_list|()
decl_stmt|;
try|try
block|{
name|ps
operator|=
name|cd
operator|.
name|currentPatchSet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|logProblem
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|ps
operator|==
literal|null
operator|||
name|ps
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
operator|||
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|logProblem
argument_list|(
name|changeId
argument_list|,
literal|"Missing patch set or revision on change"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|idstr
init|=
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|ObjectId
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|idstr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|logProblem
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|revisions
operator|.
name|containsEntry
argument_list|(
name|id
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
comment|// TODO this is actually an error, the branch is gone but we
comment|// want to merge the issue. We can't safely do that if the
comment|// tip is not reachable.
comment|//
name|logProblem
argument_list|(
name|changeId
argument_list|,
literal|"Revision "
operator|+
name|idstr
operator|+
literal|" of patch set "
operator|+
name|ps
operator|.
name|getPatchSetId
argument_list|()
operator|+
literal|" does not match "
operator|+
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
operator|+
literal|" for change"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|CodeReviewCommit
name|commit
decl_stmt|;
try|try
block|{
name|commit
operator|=
name|or
operator|.
name|rw
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logProblem
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// TODO(dborowitz): Consider putting ChangeData in CodeReviewCommit.
name|commit
operator|.
name|setControl
argument_list|(
name|ctl
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setPatchsetId
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|commits
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|MergeValidators
name|mergeValidators
init|=
name|mergeValidatorsFactory
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|mergeValidators
operator|.
name|validatePreMerge
argument_list|(
name|or
operator|.
name|repo
argument_list|,
name|commit
argument_list|,
name|or
operator|.
name|project
argument_list|,
name|destBranch
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MergeValidationException
name|mve
parameter_list|)
block|{
name|commit
operator|.
name|setStatusCode
argument_list|(
name|mve
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|problems
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|mve
operator|.
name|getStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|SubmitType
name|st
init|=
name|getSubmitType
argument_list|(
name|cd
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|==
literal|null
condition|)
block|{
name|logProblem
argument_list|(
name|changeId
argument_list|,
literal|"No submit type for change"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|submitType
operator|==
literal|null
condition|)
block|{
name|submitType
operator|=
name|st
expr_stmt|;
name|choseSubmitTypeFrom
operator|=
name|cd
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|st
operator|!=
name|submitType
condition|)
block|{
name|problems
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Change has submit type %s, but previously chose submit type %s "
operator|+
literal|"from change %s in the same batch"
argument_list|,
name|st
argument_list|,
name|submitType
argument_list|,
name|choseSubmitTypeFrom
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|commit
operator|.
name|add
argument_list|(
name|or
operator|.
name|canMergeFlag
argument_list|)
expr_stmt|;
name|toSubmit
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
name|logDebug
argument_list|(
literal|"Submitting on this run: {}"
argument_list|,
name|toSubmit
argument_list|)
expr_stmt|;
return|return
operator|new
name|AutoValue_MergeOp_BranchBatch
argument_list|(
name|submitType
argument_list|,
name|toSubmit
argument_list|)
return|;
block|}
DECL|method|getRevisions (OpenRepo or, Collection<ChangeData> cds)
specifier|private
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|PatchSet
operator|.
name|Id
argument_list|>
name|getRevisions
parameter_list|(
name|OpenRepo
name|or
parameter_list|,
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|cds
parameter_list|)
throws|throws
name|IntegrationException
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|refNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|cds
control|)
block|{
name|Change
name|c
init|=
name|cd
operator|.
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|refNames
operator|.
name|add
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|PatchSet
operator|.
name|Id
argument_list|>
name|revisions
init|=
name|HashMultimap
operator|.
name|create
argument_list|(
name|cds
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|e
range|:
name|or
operator|.
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
name|refNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|refNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|revisions
operator|.
name|put
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|PatchSet
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|revisions
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Failed to validate changes"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getSubmitType (ChangeData cd)
specifier|private
name|SubmitType
name|getSubmitType
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
block|{
try|try
block|{
name|SubmitTypeRecord
name|str
init|=
name|cd
operator|.
name|submitTypeRecord
argument_list|()
decl_stmt|;
return|return
name|str
operator|.
name|isOk
argument_list|()
condition|?
name|str
operator|.
name|type
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Failed to get submit type for "
operator|+
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|updateBranch (OpenRepo or, Branch.NameKey destBranch, IdentifiedUser caller)
specifier|private
name|boolean
name|updateBranch
parameter_list|(
name|OpenRepo
name|or
parameter_list|,
name|Branch
operator|.
name|NameKey
name|destBranch
parameter_list|,
name|IdentifiedUser
name|caller
parameter_list|)
throws|throws
name|IntegrationException
block|{
name|OpenBranch
name|ob
init|=
name|or
operator|.
name|getBranch
argument_list|(
name|destBranch
argument_list|)
decl_stmt|;
name|CodeReviewCommit
name|currentTip
init|=
name|ob
operator|.
name|getCurrentTip
argument_list|()
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|ob
operator|.
name|oldTip
argument_list|,
name|currentTip
argument_list|)
condition|)
block|{
if|if
condition|(
name|currentTip
operator|!=
literal|null
condition|)
block|{
name|logDebug
argument_list|(
literal|"Branch already at merge tip {}, no update to perform"
argument_list|,
name|currentTip
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logDebug
argument_list|(
literal|"Both branch and merge tip are nonexistent, no update"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|currentTip
operator|==
literal|null
condition|)
block|{
name|logDebug
argument_list|(
literal|"No merge tip, no update to perform"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|RefNames
operator|.
name|REFS_CONFIG
operator|.
name|equals
argument_list|(
name|ob
operator|.
name|update
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|logDebug
argument_list|(
literal|"Loading new configuration from {}"
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
expr_stmt|;
try|try
block|{
name|ProjectConfig
name|cfg
init|=
operator|new
name|ProjectConfig
argument_list|(
name|or
operator|.
name|getProjectName
argument_list|()
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|load
argument_list|(
name|or
operator|.
name|repo
argument_list|,
name|currentTip
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Submit would store invalid"
operator|+
literal|" project configuration "
operator|+
name|currentTip
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|or
operator|.
name|getProjectName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|ob
operator|.
name|update
operator|.
name|setRefLogIdent
argument_list|(
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|caller
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|newRefLogIdent
argument_list|()
argument_list|)
expr_stmt|;
name|ob
operator|.
name|update
operator|.
name|setForceUpdate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ob
operator|.
name|update
operator|.
name|setNewObjectId
argument_list|(
name|currentTip
argument_list|)
expr_stmt|;
name|ob
operator|.
name|update
operator|.
name|setRefLogMessage
argument_list|(
literal|"merged"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|RefUpdate
operator|.
name|Result
name|result
init|=
name|ob
operator|.
name|update
operator|.
name|update
argument_list|(
name|or
operator|.
name|rw
argument_list|)
decl_stmt|;
name|logDebug
argument_list|(
literal|"Update of {}: {}..{} returned status {}"
argument_list|,
name|ob
operator|.
name|update
operator|.
name|getName
argument_list|()
argument_list|,
name|ob
operator|.
name|update
operator|.
name|getOldObjectId
argument_list|()
argument_list|,
name|ob
operator|.
name|update
operator|.
name|getNewObjectId
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|FAST_FORWARD
case|:
if|if
condition|(
name|ob
operator|.
name|update
operator|.
name|getResult
argument_list|()
operator|==
name|RefUpdate
operator|.
name|Result
operator|.
name|FAST_FORWARD
condition|)
block|{
name|tagCache
operator|.
name|updateFastForward
argument_list|(
name|destBranch
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|ob
operator|.
name|update
operator|.
name|getName
argument_list|()
argument_list|,
name|ob
operator|.
name|update
operator|.
name|getOldObjectId
argument_list|()
argument_list|,
name|currentTip
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|RefNames
operator|.
name|REFS_CONFIG
operator|.
name|equals
argument_list|(
name|ob
operator|.
name|update
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Project
name|p
init|=
name|or
operator|.
name|project
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|projectCache
operator|.
name|evict
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|or
operator|.
name|project
operator|=
name|projectCache
operator|.
name|get
argument_list|(
name|p
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
name|repoManager
operator|.
name|setProjectDescription
argument_list|(
name|p
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|p
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|LOCK_FAILURE
case|:
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Failed to lock "
operator|+
name|ob
operator|.
name|update
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
name|ob
operator|.
name|update
operator|.
name|getResult
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|'\n'
operator|+
name|ob
operator|.
name|update
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Cannot update "
operator|+
name|ob
operator|.
name|update
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|fireRefUpdated (OpenBranch ob)
specifier|private
name|void
name|fireRefUpdated
parameter_list|(
name|OpenBranch
name|ob
parameter_list|)
block|{
name|logDebug
argument_list|(
literal|"Firing ref updated hooks for {}"
argument_list|,
name|ob
operator|.
name|name
argument_list|)
expr_stmt|;
name|gitRefUpdated
operator|.
name|fire
argument_list|(
name|ob
operator|.
name|name
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|ob
operator|.
name|update
argument_list|)
expr_stmt|;
name|hooks
operator|.
name|doRefUpdatedHook
argument_list|(
name|ob
operator|.
name|name
argument_list|,
name|ob
operator|.
name|update
argument_list|,
name|getAccount
argument_list|(
name|ob
operator|.
name|mergeTip
operator|.
name|getCurrentTip
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getAccount (CodeReviewCommit codeReviewCommit)
specifier|private
name|Account
name|getAccount
parameter_list|(
name|CodeReviewCommit
name|codeReviewCommit
parameter_list|)
block|{
name|Account
name|account
init|=
literal|null
decl_stmt|;
name|PatchSetApproval
name|submitter
init|=
name|approvalsUtil
operator|.
name|getSubmitter
argument_list|(
name|db
argument_list|,
name|codeReviewCommit
operator|.
name|notes
argument_list|()
argument_list|,
name|codeReviewCommit
operator|.
name|getPatchsetId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|submitter
operator|!=
literal|null
condition|)
block|{
name|account
operator|=
name|accountCache
operator|.
name|get
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
expr_stmt|;
block|}
return|return
name|account
return|;
block|}
DECL|method|getByAccountName (CodeReviewCommit codeReviewCommit)
specifier|private
name|String
name|getByAccountName
parameter_list|(
name|CodeReviewCommit
name|codeReviewCommit
parameter_list|)
block|{
name|Account
name|account
init|=
name|getAccount
argument_list|(
name|codeReviewCommit
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|!=
literal|null
operator|&&
name|account
operator|.
name|getFullName
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|" by "
operator|+
name|account
operator|.
name|getFullName
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
DECL|method|flattenBatches (Collection<BranchBatch> batches)
specifier|private
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|flattenBatches
parameter_list|(
name|Collection
argument_list|<
name|BranchBatch
argument_list|>
name|batches
parameter_list|)
block|{
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|batches
argument_list|)
operator|.
name|transformAndConcat
argument_list|(
operator|new
name|Function
argument_list|<
name|BranchBatch
argument_list|,
name|List
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ChangeData
argument_list|>
name|apply
parameter_list|(
name|BranchBatch
name|batch
parameter_list|)
block|{
return|return
name|batch
operator|.
name|changes
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|checkMergeStrategyResults (ChangeSet cs, Collection<BranchBatch> batches)
specifier|private
name|void
name|checkMergeStrategyResults
parameter_list|(
name|ChangeSet
name|cs
parameter_list|,
name|Collection
argument_list|<
name|BranchBatch
argument_list|>
name|batches
parameter_list|)
throws|throws
name|ResourceConflictException
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|flattenBatches
argument_list|(
name|batches
argument_list|)
control|)
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|cd
operator|.
name|getId
argument_list|()
decl_stmt|;
name|CodeReviewCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|CommitMergeStatus
name|s
init|=
name|commit
operator|!=
literal|null
condition|?
name|commit
operator|.
name|getStatusCode
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|problems
operator|.
name|put
argument_list|(
name|id
argument_list|,
literal|"internal error: change not processed by merge strategy"
argument_list|)
expr_stmt|;
continue|continue;
block|}
switch|switch
condition|(
name|s
condition|)
block|{
case|case
name|CLEAN_MERGE
case|:
case|case
name|CLEAN_REBASE
case|:
case|case
name|CLEAN_PICK
case|:
case|case
name|ALREADY_MERGED
case|:
break|break;
comment|// Merge strategy accepted this change.
case|case
name|PATH_CONFLICT
case|:
case|case
name|REBASE_MERGE_CONFLICT
case|:
case|case
name|MANUAL_RECURSIVE_MERGE
case|:
case|case
name|CANNOT_CHERRY_PICK_ROOT
case|:
case|case
name|NOT_FAST_FORWARD
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION_PLUGIN_VALUE_NOT_PERMITTED
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION_PLUGIN_VALUE_NOT_EDITABLE
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION_PARENT_PROJECT_NOT_FOUND
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION_ROOT_PROJECT_CANNOT_HAVE_PARENT
case|:
case|case
name|SETTING_PARENT_PROJECT_ONLY_ALLOWED_BY_ADMIN
case|:
comment|// TODO(dborowitz): Reformat these messages to be more appropriate for
comment|// short problem descriptions.
name|problems
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|CharMatcher
operator|.
name|is
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|collapseFrom
argument_list|(
name|s
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|MISSING_DEPENDENCY
case|:
name|problems
operator|.
name|put
argument_list|(
name|id
argument_list|,
literal|"depends on change that was not submitted"
argument_list|)
expr_stmt|;
break|break;
case|case
name|REVISION_GONE
case|:
comment|// TODO(dborowitz): Should no longer be generated by built-in code;
comment|// finish removing.
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
default|default:
name|problems
operator|.
name|put
argument_list|(
name|id
argument_list|,
literal|"unspecified merge failure: "
operator|+
name|s
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|failFast
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
DECL|method|updateChangeStatus (OpenBranch ob, List<ChangeData> submitted, IdentifiedUser caller)
specifier|private
name|void
name|updateChangeStatus
parameter_list|(
name|OpenBranch
name|ob
parameter_list|,
name|List
argument_list|<
name|ChangeData
argument_list|>
name|submitted
parameter_list|,
name|IdentifiedUser
name|caller
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|IntegrationException
throws|,
name|ResourceConflictException
throws|,
name|OrmException
block|{
name|logDebug
argument_list|(
literal|"Updating change status for {} changes"
argument_list|,
name|submitted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|submitted
control|)
block|{
name|Change
name|c
init|=
name|cd
operator|.
name|change
argument_list|()
decl_stmt|;
name|CodeReviewCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|CommitMergeStatus
name|s
init|=
name|commit
operator|!=
literal|null
condition|?
name|commit
operator|.
name|getStatusCode
argument_list|()
else|:
literal|null
decl_stmt|;
name|checkState
argument_list|(
name|s
operator|!=
literal|null
argument_list|,
literal|"status not set for change %s; expected to previously fail fast"
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|setApproval
argument_list|(
name|cd
argument_list|,
name|caller
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|String
name|txt
init|=
name|s
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|logDebug
argument_list|(
literal|"Status of change {} ({}) on {}: {}"
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|,
name|c
operator|.
name|getDest
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|// If mergeTip is null merge failed and mergeResultRev will not be read.
name|ObjectId
name|mergeResultRev
init|=
name|ob
operator|.
name|mergeTip
operator|!=
literal|null
condition|?
name|ob
operator|.
name|mergeTip
operator|.
name|getMergeResults
argument_list|()
operator|.
name|get
argument_list|(
name|commit
argument_list|)
else|:
literal|null
decl_stmt|;
comment|// The change notes must be forcefully reloaded so that the SUBMIT
comment|// approval that we added earlier is visible
name|commit
operator|.
name|notes
argument_list|()
operator|.
name|reload
argument_list|()
expr_stmt|;
try|try
block|{
name|ChangeMessage
name|msg
decl_stmt|;
switch|switch
condition|(
name|s
condition|)
block|{
case|case
name|CLEAN_MERGE
case|:
name|setMerged
argument_list|(
name|c
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
name|txt
operator|+
name|getByAccountName
argument_list|(
name|commit
argument_list|)
argument_list|)
argument_list|,
name|mergeResultRev
argument_list|)
expr_stmt|;
break|break;
case|case
name|CLEAN_REBASE
case|:
case|case
name|CLEAN_PICK
case|:
name|setMerged
argument_list|(
name|c
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
name|txt
operator|+
literal|" as "
operator|+
name|commit
operator|.
name|name
argument_list|()
operator|+
name|getByAccountName
argument_list|(
name|commit
argument_list|)
argument_list|)
argument_list|,
name|mergeResultRev
argument_list|)
expr_stmt|;
break|break;
case|case
name|ALREADY_MERGED
case|:
name|setMerged
argument_list|(
name|c
argument_list|,
literal|null
argument_list|,
name|mergeResultRev
argument_list|)
expr_stmt|;
break|break;
case|case
name|PATH_CONFLICT
case|:
case|case
name|REBASE_MERGE_CONFLICT
case|:
case|case
name|MANUAL_RECURSIVE_MERGE
case|:
case|case
name|CANNOT_CHERRY_PICK_ROOT
case|:
case|case
name|NOT_FAST_FORWARD
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION_PLUGIN_VALUE_NOT_PERMITTED
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION_PLUGIN_VALUE_NOT_EDITABLE
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION_PARENT_PROJECT_NOT_FOUND
case|:
case|case
name|INVALID_PROJECT_CONFIGURATION_ROOT_PROJECT_CANNOT_HAVE_PARENT
case|:
case|case
name|SETTING_PARENT_PROJECT_ONLY_ALLOWED_BY_ADMIN
case|:
name|setNew
argument_list|(
name|commit
operator|.
name|notes
argument_list|()
argument_list|,
name|message
argument_list|(
name|c
argument_list|,
name|txt
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"Cannot merge "
operator|+
name|commit
operator|.
name|name
argument_list|()
operator|+
literal|"\n"
operator|+
name|s
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
case|case
name|MISSING_DEPENDENCY
case|:
name|logDebug
argument_list|(
literal|"Change {} is missing dependency"
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Cannot merge "
operator|+
name|commit
operator|.
name|name
argument_list|()
operator|+
literal|"\n"
operator|+
name|s
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
case|case
name|REVISION_GONE
case|:
name|logDebug
argument_list|(
literal|"Commit not found for change {}"
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setMessage
argument_list|(
literal|"Failed to read commit for this patch set"
argument_list|)
expr_stmt|;
name|setNew
argument_list|(
name|commit
operator|.
name|notes
argument_list|()
argument_list|,
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IntegrationException
argument_list|(
name|msg
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
default|default:
name|msg
operator|=
name|message
argument_list|(
name|c
argument_list|,
literal|"Unspecified merge failure: "
operator|+
name|s
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|setNew
argument_list|(
name|commit
operator|.
name|notes
argument_list|()
argument_list|,
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IntegrationException
argument_list|(
name|msg
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
decl||
name|IOException
name|err
parameter_list|)
block|{
name|logWarn
argument_list|(
literal|"Error updating change status for "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateSubmoduleSubscriptions (OpenBranch ob, SubmoduleOp subOp)
specifier|private
name|void
name|updateSubmoduleSubscriptions
parameter_list|(
name|OpenBranch
name|ob
parameter_list|,
name|SubmoduleOp
name|subOp
parameter_list|)
block|{
name|CodeReviewCommit
name|branchTip
init|=
name|ob
operator|.
name|oldTip
decl_stmt|;
name|MergeTip
name|mergeTip
init|=
name|ob
operator|.
name|mergeTip
decl_stmt|;
if|if
condition|(
name|mergeTip
operator|!=
literal|null
operator|&&
operator|(
name|branchTip
operator|==
literal|null
operator|||
name|branchTip
operator|!=
name|mergeTip
operator|.
name|getCurrentTip
argument_list|()
operator|)
condition|)
block|{
name|logDebug
argument_list|(
literal|"Updating submodule subscriptions for branch {}"
argument_list|,
name|ob
operator|.
name|name
argument_list|)
expr_stmt|;
try|try
block|{
name|subOp
operator|.
name|updateSubmoduleSubscriptions
argument_list|(
name|db
argument_list|,
name|ob
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SubmoduleException
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"The submodule subscriptions were not updated according"
operator|+
literal|"to the .gitmodules files"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateSuperProjects (SubmoduleOp subOp, Collection<Branch.NameKey> branches)
specifier|private
name|void
name|updateSuperProjects
parameter_list|(
name|SubmoduleOp
name|subOp
parameter_list|,
name|Collection
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|branches
parameter_list|)
block|{
name|logDebug
argument_list|(
literal|"Updating superprojects"
argument_list|)
expr_stmt|;
try|try
block|{
name|subOp
operator|.
name|updateSuperProjects
argument_list|(
name|db
argument_list|,
name|branches
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SubmoduleException
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"The gitlinks were not updated according to the "
operator|+
literal|"subscriptions"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|message (Change c, String body)
specifier|private
name|ChangeMessage
name|message
parameter_list|(
name|Change
name|c
parameter_list|,
name|String
name|body
parameter_list|)
block|{
name|String
name|uuid
decl_stmt|;
try|try
block|{
name|uuid
operator|=
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|ChangeMessage
name|m
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|uuid
argument_list|)
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|m
operator|.
name|setMessage
argument_list|(
name|body
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
DECL|method|setMerged (Change c, ChangeMessage msg, ObjectId mergeResultRev)
specifier|private
name|void
name|setMerged
parameter_list|(
name|Change
name|c
parameter_list|,
name|ChangeMessage
name|msg
parameter_list|,
name|ObjectId
name|mergeResultRev
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
name|logDebug
argument_list|(
literal|"Setting change {} merged"
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeUpdate
name|update
init|=
literal|null
decl_stmt|;
specifier|final
name|PatchSetApproval
name|submitter
decl_stmt|;
name|PatchSet
name|merged
decl_stmt|;
try|try
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// We must pull the patchset out of commits, because the patchset ID is
comment|// modified when using the cherry-pick merge strategy.
name|CodeReviewCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|mergedId
init|=
name|commit
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|merged
operator|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|mergedId
argument_list|)
expr_stmt|;
name|c
operator|=
name|setMergedPatchSet
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|mergedId
argument_list|)
expr_stmt|;
name|submitter
operator|=
name|approvalsUtil
operator|.
name|getSubmitter
argument_list|(
name|db
argument_list|,
name|commit
operator|.
name|notes
argument_list|()
argument_list|,
name|mergedId
argument_list|)
expr_stmt|;
name|ChangeControl
name|control
init|=
name|commit
operator|.
name|getControl
argument_list|()
decl_stmt|;
name|update
operator|=
name|updateFactory
operator|.
name|create
argument_list|(
name|control
argument_list|,
name|c
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO(yyonas): we need to be able to change the author of the message
comment|// is not the person for whom the change was made. addMergedMessage
comment|// did this in the past.
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|cmUtil
operator|.
name|addChangeMessage
argument_list|(
name|db
argument_list|,
name|update
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|c
argument_list|)
expr_stmt|;
try|try
block|{
name|mergedSenderFactory
operator|.
name|create
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|submitter
operator|!=
literal|null
condition|?
name|submitter
operator|.
name|getAccountId
argument_list|()
else|:
literal|null
argument_list|)
operator|.
name|sendAsync
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot email merged notification for "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|submitter
operator|!=
literal|null
operator|&&
name|mergeResultRev
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|hooks
operator|.
name|doChangeMergedHook
argument_list|(
name|c
argument_list|,
name|accountCache
operator|.
name|get
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
argument_list|,
name|merged
argument_list|,
name|db
argument_list|,
name|mergeResultRev
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|ex
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Cannot run hook for submitted patch set "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setMergedPatchSet (Change.Id changeId, final PatchSet.Id merged)
specifier|private
name|Change
name|setMergedPatchSet
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
specifier|final
name|PatchSet
operator|.
name|Id
name|merged
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|changeId
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
name|c
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|c
operator|.
name|setSubmissionId
argument_list|(
name|submissionId
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|merged
operator|.
name|equals
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Uncool; the patch set changed after we merged it.
comment|// Go back to the patch set that was actually merged.
comment|//
try|try
block|{
name|c
operator|.
name|setCurrentPatchSet
argument_list|(
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|merged
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatchSetInfoNotAvailableException
name|e1
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Cannot read merged patch set "
operator|+
name|merged
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|setApproval (ChangeData cd, IdentifiedUser user)
specifier|private
name|void
name|setApproval
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
name|Timestamp
name|timestamp
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|ChangeControl
name|control
init|=
name|cd
operator|.
name|changeControl
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|cd
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psIdNewRev
init|=
name|commits
operator|.
name|get
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|logDebug
argument_list|(
literal|"Add approval for "
operator|+
name|cd
operator|+
literal|" from user "
operator|+
name|user
argument_list|)
expr_stmt|;
name|ChangeUpdate
name|update
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|control
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|update
operator|.
name|putReviewer
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|REVIEWER
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|SubmitRecord
argument_list|>
name|okRecord
init|=
name|findOkRecord
argument_list|(
name|cd
operator|.
name|getSubmitRecords
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|okRecord
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|update
operator|.
name|merge
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|okRecord
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|BatchMetaDataUpdate
name|batch
init|=
name|approve
argument_list|(
name|control
argument_list|,
name|psId
argument_list|,
name|user
argument_list|,
name|update
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|batch
operator|.
name|write
argument_list|(
name|update
argument_list|,
operator|new
name|CommitBuilder
argument_list|()
argument_list|)
expr_stmt|;
comment|// If the submit strategy created a new revision (rebase, cherry-pick)
comment|// approve that as well
if|if
condition|(
operator|!
name|psIdNewRev
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
condition|)
block|{
name|update
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Create a new ChangeUpdate instance because we need to store meta data
comment|// on another patch set (psIdNewRev).
name|update
operator|=
name|updateFactory
operator|.
name|create
argument_list|(
name|control
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|batch
operator|=
name|approve
argument_list|(
name|control
argument_list|,
name|psIdNewRev
argument_list|,
name|user
argument_list|,
name|update
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
comment|// Write update commit after all normalized label commits.
name|batch
operator|.
name|write
argument_list|(
name|update
argument_list|,
operator|new
name|CommitBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|cd
operator|.
name|change
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|approve (ChangeControl control, PatchSet.Id psId, IdentifiedUser user, ChangeUpdate update, Timestamp timestamp)
specifier|private
name|BatchMetaDataUpdate
name|approve
parameter_list|(
name|ChangeControl
name|control
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|,
name|ChangeUpdate
name|update
parameter_list|,
name|Timestamp
name|timestamp
parameter_list|)
throws|throws
name|OrmException
block|{
name|Map
argument_list|<
name|PatchSetApproval
operator|.
name|Key
argument_list|,
name|PatchSetApproval
argument_list|>
name|byKey
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|approvalsUtil
operator|.
name|byPatchSet
argument_list|(
name|db
argument_list|,
name|control
argument_list|,
name|psId
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|byKey
operator|.
name|containsKey
argument_list|(
name|psa
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|byKey
operator|.
name|put
argument_list|(
name|psa
operator|.
name|getKey
argument_list|()
argument_list|,
name|psa
argument_list|)
expr_stmt|;
block|}
block|}
name|PatchSetApproval
name|submit
init|=
operator|new
name|PatchSetApproval
argument_list|(
operator|new
name|PatchSetApproval
operator|.
name|Key
argument_list|(
name|psId
argument_list|,
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|LabelId
operator|.
name|SUBMIT
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|byKey
operator|.
name|put
argument_list|(
name|submit
operator|.
name|getKey
argument_list|()
argument_list|,
name|submit
argument_list|)
expr_stmt|;
name|submit
operator|.
name|setValue
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|submit
operator|.
name|setGranted
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
comment|// Flatten out existing approvals for this patch set based upon the current
comment|// permissions. Once the change is closed the approvals are not updated at
comment|// presentation view time, except for zero votes used to indicate a reviewer
comment|// was added. So we need to make sure votes are accurate now. This way if
comment|// permissions get modified in the future, historical records stay accurate.
name|LabelNormalizer
operator|.
name|Result
name|normalized
init|=
name|labelNormalizer
operator|.
name|normalize
argument_list|(
name|control
argument_list|,
name|byKey
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
comment|// TODO(dborowitz): Don't use a label in notedb; just check when status
comment|// change happened.
name|update
operator|.
name|putApproval
argument_list|(
name|submit
operator|.
name|getLabel
argument_list|()
argument_list|,
name|submit
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|logDebug
argument_list|(
literal|"Adding submit label "
operator|+
name|submit
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|upsert
argument_list|(
name|normalized
operator|.
name|getNormalized
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|delete
argument_list|(
name|normalized
operator|.
name|deleted
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|saveToBatch
argument_list|(
name|control
argument_list|,
name|update
argument_list|,
name|normalized
argument_list|,
name|timestamp
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|saveToBatch (ChangeControl ctl, ChangeUpdate callerUpdate, LabelNormalizer.Result normalized, Timestamp timestamp)
specifier|private
name|BatchMetaDataUpdate
name|saveToBatch
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|,
name|ChangeUpdate
name|callerUpdate
parameter_list|,
name|LabelNormalizer
operator|.
name|Result
name|normalized
parameter_list|,
name|Timestamp
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|Table
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|String
argument_list|,
name|Optional
argument_list|<
name|Short
argument_list|>
argument_list|>
name|byUser
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|normalized
operator|.
name|updated
argument_list|()
control|)
block|{
name|byUser
operator|.
name|put
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|psa
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|normalized
operator|.
name|deleted
argument_list|()
control|)
block|{
name|byUser
operator|.
name|put
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Short
operator|>
name|absent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BatchMetaDataUpdate
name|batch
init|=
name|callerUpdate
operator|.
name|openUpdate
argument_list|()
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|accountId
range|:
name|byUser
operator|.
name|rowKeySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|accountId
operator|.
name|equals
argument_list|(
name|callerUpdate
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|)
condition|)
block|{
name|ChangeUpdate
name|update
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|ctl
operator|.
name|forUser
argument_list|(
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|accountId
argument_list|)
argument_list|)
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|update
operator|.
name|setSubject
argument_list|(
literal|"Finalize approvals at submit"
argument_list|)
expr_stmt|;
name|putApprovals
argument_list|(
name|update
argument_list|,
name|byUser
operator|.
name|row
argument_list|(
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
name|CommitBuilder
name|commit
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|commit
operator|.
name|setCommitter
argument_list|(
operator|new
name|PersonIdent
argument_list|(
name|serverIdent
argument_list|,
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|write
argument_list|(
name|update
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
name|putApprovals
argument_list|(
name|callerUpdate
argument_list|,
name|byUser
operator|.
name|row
argument_list|(
name|callerUpdate
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|batch
return|;
block|}
DECL|method|putApprovals (ChangeUpdate update, Map<String, Optional<Short>> approvals)
specifier|private
specifier|static
name|void
name|putApprovals
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Optional
argument_list|<
name|Short
argument_list|>
argument_list|>
name|approvals
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Optional
argument_list|<
name|Short
argument_list|>
argument_list|>
name|e
range|:
name|approvals
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|update
operator|.
name|putApproval
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|update
operator|.
name|removeApproval
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|changeControl (Change c)
specifier|private
name|ChangeControl
name|changeControl
parameter_list|(
name|Change
name|c
parameter_list|)
throws|throws
name|NoSuchChangeException
block|{
return|return
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|c
argument_list|,
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|c
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setNew (ChangeNotes notes, final ChangeMessage msg)
specifier|private
name|void
name|setNew
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
specifier|final
name|ChangeMessage
name|msg
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|IOException
block|{
name|Change
name|c
init|=
name|notes
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|Change
name|change
init|=
literal|null
decl_stmt|;
name|ChangeUpdate
name|update
init|=
literal|null
decl_stmt|;
try|try
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|c
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ChangeControl
name|control
init|=
name|changeControl
argument_list|(
name|change
argument_list|)
decl_stmt|;
comment|//TODO(yyonas): atomic change is not propagated.
name|update
operator|=
name|updateFactory
operator|.
name|create
argument_list|(
name|control
argument_list|,
name|c
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|cmUtil
operator|.
name|addChangeMessage
argument_list|(
name|db
argument_list|,
name|update
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|logWarn
argument_list|(
literal|"Cannot record merge failure message"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|update
operator|!=
literal|null
condition|)
block|{
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|PatchSetApproval
name|submitter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|submitter
operator|=
name|approvalsUtil
operator|.
name|getSubmitter
argument_list|(
name|db
argument_list|,
name|notes
argument_list|,
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Cannot get submitter for change "
operator|+
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|submitter
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|hooks
operator|.
name|doMergeFailedHook
argument_list|(
name|c
argument_list|,
name|accountCache
operator|.
name|get
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
argument_list|,
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|,
name|msg
operator|.
name|getMessage
argument_list|()
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|ex
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Cannot run hook for merge failed "
operator|+
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|abandonAllOpenChanges (Project.NameKey destProject)
specifier|private
name|void
name|abandonAllOpenChanges
parameter_list|(
name|Project
operator|.
name|NameKey
name|destProject
parameter_list|)
throws|throws
name|NoSuchChangeException
block|{
try|try
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|internalChangeQuery
operator|.
name|byProjectOpen
argument_list|(
name|destProject
argument_list|)
control|)
block|{
name|abandonOneChange
argument_list|(
name|cd
operator|.
name|change
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|OrmException
name|e
parameter_list|)
block|{
name|logWarn
argument_list|(
literal|"Cannot abandon changes for deleted project "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|abandonOneChange (Change change)
specifier|private
name|void
name|abandonOneChange
parameter_list|(
name|Change
name|change
parameter_list|)
throws|throws
name|OrmException
throws|,
name|NoSuchChangeException
throws|,
name|IOException
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO(dborowitz): support InternalUser in ChangeUpdate
name|ChangeControl
name|control
init|=
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|change
argument_list|,
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|change
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|control
argument_list|)
decl_stmt|;
try|try
block|{
name|change
operator|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|!=
literal|null
condition|)
block|{
name|ChangeMessage
name|msg
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|change
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|,
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setMessage
argument_list|(
literal|"Project was deleted."
argument_list|)
expr_stmt|;
comment|//TODO(yyonas): atomic change is not propagated.
name|cmUtil
operator|.
name|addChangeMessage
argument_list|(
name|db
argument_list|,
name|update
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
name|indexer
operator|.
name|index
argument_list|(
name|db
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|logDebug (String msg, Object... args)
specifier|private
name|void
name|logDebug
parameter_list|(
name|String
name|msg
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|submissionId
operator|+
literal|"]"
operator|+
name|msg
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logWarn (String msg, Throwable t)
specifier|private
name|void
name|logWarn
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"["
operator|+
name|submissionId
operator|+
literal|"]"
operator|+
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logWarn (String msg)
specifier|private
name|void
name|logWarn
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"["
operator|+
name|submissionId
operator|+
literal|"]"
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logError (String msg, Throwable t)
specifier|private
name|void
name|logError
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isErrorEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"["
operator|+
name|submissionId
operator|+
literal|"]"
operator|+
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"["
operator|+
name|submissionId
operator|+
literal|"]"
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|logError (String msg)
specifier|private
name|void
name|logError
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|logError
argument_list|(
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

