begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hasher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitTypeRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|SubmitInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|InternalUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|BatchUpdate
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|CodeReviewCommit
operator|.
name|CodeReviewRevWalk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|strategy
operator|.
name|SubmitStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|strategy
operator|.
name|SubmitStrategyFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|strategy
operator|.
name|SubmitStrategyListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|MergeValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|MergeValidators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|SubmitRuleEvaluator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Merges changes in submission order into a single branch.  *<p>  * Branches are reduced to the minimum number of heads needed to merge  * everything. This allows commits to be entered into the queue in any order  * (such as ancestors before descendants) and only the most recent commit on any  * line of development will be merged. All unmerged commits along a line of  * development must be in the submission queue in order to merge the tip of that  * line.  *<p>  * Conflicts are handled by discarding the entire line of development and  * marking it as conflicting, even if an earlier commit along that same line can  * be merged cleanly.  */
end_comment

begin_class
DECL|class|MergeOp
specifier|public
class|class
name|MergeOp
implements|implements
name|AutoCloseable
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MergeOp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|OpenRepo
specifier|private
class|class
name|OpenRepo
block|{
DECL|field|repo
specifier|final
name|Repository
name|repo
decl_stmt|;
DECL|field|rw
specifier|final
name|CodeReviewRevWalk
name|rw
decl_stmt|;
DECL|field|canMergeFlag
specifier|final
name|RevFlag
name|canMergeFlag
decl_stmt|;
DECL|field|ins
specifier|final
name|ObjectInserter
name|ins
decl_stmt|;
DECL|field|project
name|ProjectState
name|project
decl_stmt|;
DECL|field|update
name|BatchUpdate
name|update
decl_stmt|;
DECL|field|reader
specifier|private
specifier|final
name|ObjectReader
name|reader
decl_stmt|;
DECL|field|branches
specifier|private
specifier|final
name|Map
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|OpenBranch
argument_list|>
name|branches
decl_stmt|;
DECL|method|OpenRepo (Repository repo, ProjectState project)
name|OpenRepo
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|ProjectState
name|project
parameter_list|)
block|{
name|this
operator|.
name|repo
operator|=
name|repo
expr_stmt|;
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
name|ins
operator|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
expr_stmt|;
name|reader
operator|=
name|ins
operator|.
name|newReader
argument_list|()
expr_stmt|;
name|rw
operator|=
name|CodeReviewCommit
operator|.
name|newRevWalk
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|COMMIT_TIME_DESC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rw
operator|.
name|setRetainBody
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|canMergeFlag
operator|=
name|rw
operator|.
name|newFlag
argument_list|(
literal|"CAN_MERGE"
argument_list|)
expr_stmt|;
name|rw
operator|.
name|retainOnReset
argument_list|(
name|canMergeFlag
argument_list|)
expr_stmt|;
name|branches
operator|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|getBranch (Branch.NameKey branch)
name|OpenBranch
name|getBranch
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
throws|throws
name|IntegrationException
block|{
name|OpenBranch
name|ob
init|=
name|branches
operator|.
name|get
argument_list|(
name|branch
argument_list|)
decl_stmt|;
if|if
condition|(
name|ob
operator|==
literal|null
condition|)
block|{
name|ob
operator|=
operator|new
name|OpenBranch
argument_list|(
name|this
argument_list|,
name|branch
argument_list|)
expr_stmt|;
name|branches
operator|.
name|put
argument_list|(
name|branch
argument_list|,
name|ob
argument_list|)
expr_stmt|;
block|}
return|return
name|ob
return|;
block|}
DECL|method|getProjectName ()
name|Project
operator|.
name|NameKey
name|getProjectName
parameter_list|()
block|{
return|return
name|project
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
return|;
block|}
DECL|method|getUpdate ()
name|BatchUpdate
name|getUpdate
parameter_list|()
block|{
if|if
condition|(
name|update
operator|==
literal|null
condition|)
block|{
name|update
operator|=
name|batchUpdateFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|getProjectName
argument_list|()
argument_list|,
name|caller
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|update
operator|.
name|setRepository
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|ins
argument_list|)
expr_stmt|;
block|}
return|return
name|update
return|;
block|}
DECL|method|close ()
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|update
operator|!=
literal|null
condition|)
block|{
name|update
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|rw
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|ins
operator|.
name|close
argument_list|()
expr_stmt|;
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|OpenBranch
specifier|private
specifier|static
class|class
name|OpenBranch
block|{
DECL|field|name
specifier|final
name|Branch
operator|.
name|NameKey
name|name
decl_stmt|;
DECL|field|update
specifier|final
name|RefUpdate
name|update
decl_stmt|;
DECL|field|oldTip
specifier|final
name|CodeReviewCommit
name|oldTip
decl_stmt|;
DECL|field|mergeTip
name|MergeTip
name|mergeTip
decl_stmt|;
DECL|method|OpenBranch (OpenRepo or, Branch.NameKey name)
name|OpenBranch
parameter_list|(
name|OpenRepo
name|or
parameter_list|,
name|Branch
operator|.
name|NameKey
name|name
parameter_list|)
throws|throws
name|IntegrationException
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
try|try
block|{
name|update
operator|=
name|or
operator|.
name|repo
operator|.
name|updateRef
argument_list|(
name|name
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|update
operator|.
name|getOldObjectId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|oldTip
operator|=
name|or
operator|.
name|rw
operator|.
name|parseCommit
argument_list|(
name|update
operator|.
name|getOldObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|or
operator|.
name|repo
operator|.
name|getFullBranch
argument_list|()
argument_list|,
name|name
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|oldTip
operator|=
literal|null
expr_stmt|;
name|update
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"The destination branch "
operator|+
name|name
operator|+
literal|" does not exist anymore."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Cannot open branch "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|CommitStatus
specifier|public
specifier|static
class|class
name|CommitStatus
block|{
DECL|field|changes
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeData
argument_list|>
name|changes
decl_stmt|;
DECL|field|byBranch
specifier|private
specifier|final
name|ImmutableSetMultimap
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|byBranch
decl_stmt|;
DECL|field|commits
specifier|private
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|CodeReviewCommit
argument_list|>
name|commits
decl_stmt|;
DECL|field|problems
specifier|private
specifier|final
name|Multimap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|problems
decl_stmt|;
DECL|method|CommitStatus (ChangeSet cs)
specifier|private
name|CommitStatus
parameter_list|(
name|ChangeSet
name|cs
parameter_list|)
throws|throws
name|OrmException
block|{
name|changes
operator|=
name|cs
operator|.
name|changesById
argument_list|()
expr_stmt|;
name|ImmutableSetMultimap
operator|.
name|Builder
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|bb
init|=
name|ImmutableSetMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|cs
operator|.
name|changes
argument_list|()
control|)
block|{
name|bb
operator|.
name|put
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|byBranch
operator|=
name|bb
operator|.
name|build
argument_list|()
expr_stmt|;
name|commits
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|problems
operator|=
name|MultimapBuilder
operator|.
name|treeKeys
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|onResultOf
argument_list|(
operator|new
name|Function
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|Change
operator|.
name|Id
name|in
parameter_list|)
block|{
return|return
name|in
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
operator|.
name|arrayListValues
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|getChangeIds ()
specifier|public
name|ImmutableSet
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|getChangeIds
parameter_list|()
block|{
return|return
name|changes
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|getChangeIds (Branch.NameKey branch)
specifier|public
name|ImmutableSet
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|getChangeIds
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
block|{
return|return
name|byBranch
operator|.
name|get
argument_list|(
name|branch
argument_list|)
return|;
block|}
DECL|method|get (Change.Id changeId)
specifier|public
name|CodeReviewCommit
name|get
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
block|{
return|return
name|commits
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
return|;
block|}
DECL|method|put (CodeReviewCommit c)
specifier|public
name|void
name|put
parameter_list|(
name|CodeReviewCommit
name|c
parameter_list|)
block|{
name|commits
operator|.
name|put
argument_list|(
name|c
operator|.
name|change
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|problem (Change.Id id, String problem)
specifier|public
name|void
name|problem
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|String
name|problem
parameter_list|)
block|{
name|problems
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|problem
argument_list|)
expr_stmt|;
block|}
DECL|method|logProblem (Change.Id id, Throwable t)
specifier|public
name|void
name|logProblem
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error reading change"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|id
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|problems
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|logProblem (Change.Id id, String msg)
specifier|public
name|void
name|logProblem
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|id
argument_list|)
expr_stmt|;
name|problems
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|isOk ()
specifier|public
name|boolean
name|isOk
parameter_list|()
block|{
return|return
name|problems
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|getProblems ()
specifier|public
name|ImmutableMultimap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|getProblems
parameter_list|()
block|{
return|return
name|ImmutableMultimap
operator|.
name|copyOf
argument_list|(
name|problems
argument_list|)
return|;
block|}
DECL|method|getSubmitRecords (Change.Id id)
specifier|public
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|getSubmitRecords
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
block|{
comment|// Use the cached submit records from the original ChangeData in the input
comment|// ChangeSet, which were checked earlier in the integrate process. Even in
comment|// the case of a race where the submit records may have changed, it makes
comment|// more sense to store the original results of the submit rule evaluator
comment|// than to fail at this point.
comment|//
comment|// However, do NOT expose that ChangeData directly, as it is way out of
comment|// date by this point.
name|ChangeData
name|cd
init|=
name|checkNotNull
argument_list|(
name|changes
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|,
literal|"ChangeData for %s"
argument_list|,
name|id
argument_list|)
decl_stmt|;
return|return
name|checkNotNull
argument_list|(
name|cd
operator|.
name|getSubmitRecords
argument_list|()
argument_list|,
literal|"getSubmitRecord only valid after submit rules are evalutated"
argument_list|)
return|;
block|}
DECL|method|maybeFailVerbose ()
specifier|public
name|void
name|maybeFailVerbose
parameter_list|()
throws|throws
name|ResourceConflictException
block|{
if|if
condition|(
name|isOk
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|msg
init|=
literal|"Failed to submit "
operator|+
name|changes
operator|.
name|size
argument_list|()
operator|+
literal|" change"
operator|+
operator|(
name|changes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
operator|)
operator|+
literal|" due to the following problems:\n"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|problems
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Change
operator|.
name|Id
name|id
range|:
name|problems
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ps
operator|.
name|add
argument_list|(
literal|"Change "
operator|+
name|id
operator|+
literal|": "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|"; "
argument_list|)
operator|.
name|join
argument_list|(
name|problems
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|msg
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|join
argument_list|(
name|ps
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|maybeFail (String msgPrefix)
specifier|public
name|void
name|maybeFail
parameter_list|(
name|String
name|msgPrefix
parameter_list|)
throws|throws
name|ResourceConflictException
block|{
if|if
condition|(
name|isOk
argument_list|()
condition|)
block|{
return|return;
block|}
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|(
name|msgPrefix
argument_list|)
operator|.
name|append
argument_list|(
literal|" of change"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|ids
init|=
name|problems
operator|.
name|keySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|ids
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"s "
argument_list|)
operator|.
name|append
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|ids
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|field|cmUtil
specifier|private
specifier|final
name|ChangeMessagesUtil
name|cmUtil
decl_stmt|;
DECL|field|batchUpdateFactory
specifier|private
specifier|final
name|BatchUpdate
operator|.
name|Factory
name|batchUpdateFactory
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|internalUserFactory
specifier|private
specifier|final
name|InternalUser
operator|.
name|Factory
name|internalUserFactory
decl_stmt|;
DECL|field|mergeSuperSet
specifier|private
specifier|final
name|MergeSuperSet
name|mergeSuperSet
decl_stmt|;
DECL|field|mergeValidatorsFactory
specifier|private
specifier|final
name|MergeValidators
operator|.
name|Factory
name|mergeValidatorsFactory
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|internalChangeQuery
specifier|private
specifier|final
name|InternalChangeQuery
name|internalChangeQuery
decl_stmt|;
DECL|field|submitStrategyFactory
specifier|private
specifier|final
name|SubmitStrategyFactory
name|submitStrategyFactory
decl_stmt|;
DECL|field|subOpProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|SubmoduleOp
argument_list|>
name|subOpProvider
decl_stmt|;
DECL|field|openRepos
specifier|private
specifier|final
name|Map
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|OpenRepo
argument_list|>
name|openRepos
decl_stmt|;
DECL|field|MACHINE_ID
specifier|private
specifier|static
specifier|final
name|String
name|MACHINE_ID
decl_stmt|;
static|static
block|{
name|String
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|id
operator|=
literal|"unknown"
expr_stmt|;
block|}
name|MACHINE_ID
operator|=
name|id
expr_stmt|;
block|}
DECL|field|ts
specifier|private
name|Timestamp
name|ts
decl_stmt|;
DECL|field|submissionId
specifier|private
name|String
name|submissionId
decl_stmt|;
DECL|field|caller
specifier|private
name|IdentifiedUser
name|caller
decl_stmt|;
DECL|field|commits
specifier|private
name|CommitStatus
name|commits
decl_stmt|;
DECL|field|db
specifier|private
name|ReviewDb
name|db
decl_stmt|;
DECL|field|submitInput
specifier|private
name|SubmitInput
name|submitInput
decl_stmt|;
annotation|@
name|Inject
DECL|method|MergeOp (ChangeMessagesUtil cmUtil, BatchUpdate.Factory batchUpdateFactory, GitRepositoryManager repoManager, InternalUser.Factory internalUserFactory, MergeSuperSet mergeSuperSet, MergeValidators.Factory mergeValidatorsFactory, ProjectCache projectCache, InternalChangeQuery internalChangeQuery, SubmitStrategyFactory submitStrategyFactory, Provider<SubmoduleOp> subOpProvider)
name|MergeOp
parameter_list|(
name|ChangeMessagesUtil
name|cmUtil
parameter_list|,
name|BatchUpdate
operator|.
name|Factory
name|batchUpdateFactory
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|InternalUser
operator|.
name|Factory
name|internalUserFactory
parameter_list|,
name|MergeSuperSet
name|mergeSuperSet
parameter_list|,
name|MergeValidators
operator|.
name|Factory
name|mergeValidatorsFactory
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|InternalChangeQuery
name|internalChangeQuery
parameter_list|,
name|SubmitStrategyFactory
name|submitStrategyFactory
parameter_list|,
name|Provider
argument_list|<
name|SubmoduleOp
argument_list|>
name|subOpProvider
parameter_list|)
block|{
name|this
operator|.
name|cmUtil
operator|=
name|cmUtil
expr_stmt|;
name|this
operator|.
name|batchUpdateFactory
operator|=
name|batchUpdateFactory
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|internalUserFactory
operator|=
name|internalUserFactory
expr_stmt|;
name|this
operator|.
name|mergeSuperSet
operator|=
name|mergeSuperSet
expr_stmt|;
name|this
operator|.
name|mergeValidatorsFactory
operator|=
name|mergeValidatorsFactory
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|internalChangeQuery
operator|=
name|internalChangeQuery
expr_stmt|;
name|this
operator|.
name|submitStrategyFactory
operator|=
name|submitStrategyFactory
expr_stmt|;
name|this
operator|.
name|subOpProvider
operator|=
name|subOpProvider
expr_stmt|;
name|openRepos
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|getRepo (Project.NameKey project)
specifier|private
name|OpenRepo
name|getRepo
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
block|{
name|OpenRepo
name|or
init|=
name|openRepos
operator|.
name|get
argument_list|(
name|project
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|or
operator|!=
literal|null
argument_list|,
literal|"repo not yet opened: %s"
argument_list|,
name|project
argument_list|)
expr_stmt|;
return|return
name|or
return|;
block|}
DECL|method|openRepo (Project.NameKey project)
specifier|private
name|void
name|openRepo
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
throws|throws
name|NoSuchProjectException
throws|,
name|IOException
block|{
name|checkState
argument_list|(
operator|!
name|openRepos
operator|.
name|containsKey
argument_list|(
name|project
argument_list|)
argument_list|,
literal|"repo already opened: %s"
argument_list|,
name|project
argument_list|)
expr_stmt|;
name|ProjectState
name|projectState
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|project
argument_list|)
decl_stmt|;
if|if
condition|(
name|projectState
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchProjectException
argument_list|(
name|project
argument_list|)
throw|;
block|}
try|try
block|{
name|OpenRepo
name|or
init|=
operator|new
name|OpenRepo
argument_list|(
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
argument_list|,
name|projectState
argument_list|)
decl_stmt|;
name|openRepos
operator|.
name|put
argument_list|(
name|project
argument_list|,
name|or
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchProjectException
argument_list|(
name|project
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|OpenRepo
name|repo
range|:
name|openRepos
operator|.
name|values
argument_list|()
control|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|findOkRecord ( Collection<SubmitRecord> in)
specifier|private
specifier|static
name|Optional
argument_list|<
name|SubmitRecord
argument_list|>
name|findOkRecord
parameter_list|(
name|Collection
argument_list|<
name|SubmitRecord
argument_list|>
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
return|return
name|Iterables
operator|.
name|tryFind
argument_list|(
name|in
argument_list|,
operator|new
name|Predicate
argument_list|<
name|SubmitRecord
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|SubmitRecord
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|status
operator|==
name|SubmitRecord
operator|.
name|Status
operator|.
name|OK
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|checkSubmitRule (ChangeData cd)
specifier|public
specifier|static
name|void
name|checkSubmitRule
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|ResourceConflictException
throws|,
name|OrmException
block|{
name|PatchSet
name|patchSet
init|=
name|cd
operator|.
name|currentPatchSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|patchSet
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"missing current patch set for change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|results
init|=
name|getSubmitRecords
argument_list|(
name|cd
argument_list|)
decl_stmt|;
if|if
condition|(
name|findOkRecord
argument_list|(
name|results
argument_list|)
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// Rules supplied a valid solution.
return|return;
block|}
elseif|else
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SubmitRuleEvaluator.evaluate for change %s "
operator|+
literal|"returned empty list for %s in %s"
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|patchSet
operator|.
name|getId
argument_list|()
argument_list|,
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|SubmitRecord
name|record
range|:
name|results
control|)
block|{
switch|switch
condition|(
name|record
operator|.
name|status
condition|)
block|{
case|case
name|CLOSED
case|:
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"change is closed"
argument_list|)
throw|;
case|case
name|RULE_ERROR
case|:
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"submit rule error: "
operator|+
name|record
operator|.
name|errorMessage
argument_list|)
throw|;
case|case
name|NOT_READY
case|:
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|describeLabels
argument_list|(
name|cd
argument_list|,
name|record
operator|.
name|labels
argument_list|)
argument_list|)
throw|;
case|case
name|FORCED
case|:
case|case
name|OK
case|:
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected SubmitRecord status %s for %s in %s"
argument_list|,
name|record
operator|.
name|status
argument_list|,
name|patchSet
operator|.
name|getId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
DECL|method|getSubmitRecords (ChangeData cd)
specifier|private
specifier|static
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|getSubmitRecords
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|results
init|=
name|cd
operator|.
name|getSubmitRecords
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
name|results
operator|=
operator|new
name|SubmitRuleEvaluator
argument_list|(
name|cd
argument_list|)
operator|.
name|evaluate
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setSubmitRecords
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
DECL|method|describeLabels (ChangeData cd, List<SubmitRecord.Label> labels)
specifier|private
specifier|static
name|String
name|describeLabels
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|List
argument_list|<
name|SubmitRecord
operator|.
name|Label
argument_list|>
name|labels
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|labelResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubmitRecord
operator|.
name|Label
name|lbl
range|:
name|labels
control|)
block|{
switch|switch
condition|(
name|lbl
operator|.
name|status
condition|)
block|{
case|case
name|OK
case|:
case|case
name|MAY
case|:
break|break;
case|case
name|REJECT
case|:
name|labelResults
operator|.
name|add
argument_list|(
literal|"blocked by "
operator|+
name|lbl
operator|.
name|label
argument_list|)
expr_stmt|;
break|break;
case|case
name|NEED
case|:
name|labelResults
operator|.
name|add
argument_list|(
literal|"needs "
operator|+
name|lbl
operator|.
name|label
argument_list|)
expr_stmt|;
break|break;
case|case
name|IMPOSSIBLE
case|:
name|labelResults
operator|.
name|add
argument_list|(
literal|"needs "
operator|+
name|lbl
operator|.
name|label
operator|+
literal|" (check project access)"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unsupported SubmitRecord.Label %s for %s in %s"
argument_list|,
name|lbl
argument_list|,
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|"; "
argument_list|)
operator|.
name|join
argument_list|(
name|labelResults
argument_list|)
return|;
block|}
DECL|method|checkSubmitRulesAndState (ChangeSet cs)
specifier|private
name|void
name|checkSubmitRulesAndState
parameter_list|(
name|ChangeSet
name|cs
parameter_list|)
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|cs
operator|.
name|changes
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|!=
name|Change
operator|.
name|Status
operator|.
name|NEW
condition|)
block|{
name|commits
operator|.
name|problem
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
operator|+
literal|" is "
operator|+
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkSubmitRule
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|commits
operator|.
name|problem
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error checking submit rules for change"
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|commits
operator|.
name|problem
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|bypassSubmitRules (ChangeSet cs)
specifier|private
name|void
name|bypassSubmitRules
parameter_list|(
name|ChangeSet
name|cs
parameter_list|)
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|cs
operator|.
name|changes
argument_list|()
control|)
block|{
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|records
decl_stmt|;
try|try
block|{
name|records
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getSubmitRecords
argument_list|(
name|cd
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error checking submit rules for change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|records
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|SubmitRecord
name|forced
init|=
operator|new
name|SubmitRecord
argument_list|()
decl_stmt|;
name|forced
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Status
operator|.
name|FORCED
expr_stmt|;
name|records
operator|.
name|add
argument_list|(
name|forced
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setSubmitRecords
argument_list|(
name|records
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateSubmissionId (Change change)
specifier|private
name|void
name|updateSubmissionId
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
name|Hasher
name|h
init|=
name|Hashing
operator|.
name|sha1
argument_list|()
operator|.
name|newHasher
argument_list|()
decl_stmt|;
name|h
operator|.
name|putLong
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|putUnencodedChars
argument_list|(
name|MACHINE_ID
argument_list|)
expr_stmt|;
name|ts
operator|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
expr_stmt|;
name|submissionId
operator|=
name|change
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"-"
operator|+
name|ts
operator|.
name|getTime
argument_list|()
operator|+
literal|"-"
operator|+
name|h
operator|.
name|hash
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
DECL|method|merge (ReviewDb db, Change change, IdentifiedUser caller, boolean checkSubmitRules, SubmitInput submitInput)
specifier|public
name|void
name|merge
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
name|change
parameter_list|,
name|IdentifiedUser
name|caller
parameter_list|,
name|boolean
name|checkSubmitRules
parameter_list|,
name|SubmitInput
name|submitInput
parameter_list|)
throws|throws
name|OrmException
throws|,
name|RestApiException
block|{
name|this
operator|.
name|submitInput
operator|=
name|submitInput
expr_stmt|;
name|this
operator|.
name|caller
operator|=
name|caller
expr_stmt|;
name|updateSubmissionId
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|logDebug
argument_list|(
literal|"Beginning integration of {}"
argument_list|,
name|change
argument_list|)
expr_stmt|;
try|try
block|{
name|ChangeSet
name|cs
init|=
name|mergeSuperSet
operator|.
name|completeChangeSet
argument_list|(
name|db
argument_list|,
name|change
argument_list|,
name|caller
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|cs
operator|.
name|ids
argument_list|()
operator|.
name|contains
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
literal|"change %s missing from %s"
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|this
operator|.
name|commits
operator|=
operator|new
name|CommitStatus
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|MergeSuperSet
operator|.
name|reloadChanges
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|logDebug
argument_list|(
literal|"Calculated to merge {}"
argument_list|,
name|cs
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkSubmitRules
condition|)
block|{
name|logDebug
argument_list|(
literal|"Checking submit rules and state"
argument_list|)
expr_stmt|;
name|checkSubmitRulesAndState
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|failFast
argument_list|(
name|cs
argument_list|)
expr_stmt|;
comment|// Done checks that don't involve opening repo.
block|}
else|else
block|{
name|logDebug
argument_list|(
literal|"Bypassing submit rules"
argument_list|)
expr_stmt|;
name|bypassSubmitRules
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|integrateIntoHistory
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IntegrationException
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Error from integrateIntoHistory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Anything before the merge attempt is an error
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|failFast (ChangeSet cs)
specifier|private
name|void
name|failFast
parameter_list|(
name|ChangeSet
name|cs
parameter_list|)
throws|throws
name|ResourceConflictException
block|{
if|if
condition|(
name|commits
operator|.
name|isOk
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|msg
init|=
literal|"Failed to submit "
operator|+
name|cs
operator|.
name|size
argument_list|()
operator|+
literal|" change"
operator|+
operator|(
name|cs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
operator|)
operator|+
literal|" due to the following problems:\n"
decl_stmt|;
name|Multimap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|problems
init|=
name|commits
operator|.
name|getProblems
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|problems
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Change
operator|.
name|Id
name|id
range|:
name|problems
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ps
operator|.
name|add
argument_list|(
literal|"Change "
operator|+
name|id
operator|+
literal|": "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|"; "
argument_list|)
operator|.
name|join
argument_list|(
name|problems
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|msg
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|join
argument_list|(
name|ps
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|integrateIntoHistory (ChangeSet cs)
specifier|private
name|void
name|integrateIntoHistory
parameter_list|(
name|ChangeSet
name|cs
parameter_list|)
throws|throws
name|IntegrationException
throws|,
name|RestApiException
block|{
name|logDebug
argument_list|(
literal|"Beginning merge attempt on {}"
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|BranchBatch
argument_list|>
name|toSubmit
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|logDebug
argument_list|(
literal|"Perform the merges"
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Branch
operator|.
name|NameKey
argument_list|>
name|br
decl_stmt|;
name|Multimap
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|ChangeData
argument_list|>
name|cbb
decl_stmt|;
try|try
block|{
name|br
operator|=
name|cs
operator|.
name|branchesByProject
argument_list|()
expr_stmt|;
name|cbb
operator|=
name|cs
operator|.
name|changesByBranch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Error reading changes to submit"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projects
init|=
name|br
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|branches
init|=
name|cbb
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|openRepos
argument_list|(
name|projects
argument_list|)
expr_stmt|;
for|for
control|(
name|Branch
operator|.
name|NameKey
name|branch
range|:
name|branches
control|)
block|{
name|OpenRepo
name|or
init|=
name|getRepo
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
name|toSubmit
operator|.
name|put
argument_list|(
name|branch
argument_list|,
name|validateChangeList
argument_list|(
name|or
argument_list|,
name|cbb
operator|.
name|get
argument_list|(
name|branch
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|failFast
argument_list|(
name|cs
argument_list|)
expr_stmt|;
comment|// Done checks that don't involve running submit strategies.
name|List
argument_list|<
name|SubmitStrategy
argument_list|>
name|strategies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|branches
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Branch
operator|.
name|NameKey
name|branch
range|:
name|branches
control|)
block|{
name|OpenRepo
name|or
init|=
name|getRepo
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
name|OpenBranch
name|ob
init|=
name|or
operator|.
name|getBranch
argument_list|(
name|branch
argument_list|)
decl_stmt|;
name|BranchBatch
name|submitting
init|=
name|toSubmit
operator|.
name|get
argument_list|(
name|branch
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|submitting
operator|.
name|submitType
argument_list|()
argument_list|,
literal|"null submit type for %s; expected to previously fail fast"
argument_list|,
name|submitting
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|CodeReviewCommit
argument_list|>
name|commitsToSubmit
init|=
name|commits
argument_list|(
name|submitting
operator|.
name|changes
argument_list|()
argument_list|)
decl_stmt|;
name|ob
operator|.
name|mergeTip
operator|=
operator|new
name|MergeTip
argument_list|(
name|ob
operator|.
name|oldTip
argument_list|,
name|commitsToSubmit
argument_list|)
expr_stmt|;
name|SubmitStrategy
name|strategy
init|=
name|createStrategy
argument_list|(
name|or
argument_list|,
name|ob
operator|.
name|mergeTip
argument_list|,
name|branch
argument_list|,
name|submitting
operator|.
name|submitType
argument_list|()
argument_list|,
name|ob
operator|.
name|oldTip
argument_list|)
decl_stmt|;
name|strategies
operator|.
name|add
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|strategy
operator|.
name|addOps
argument_list|(
name|or
operator|.
name|getUpdate
argument_list|()
argument_list|,
name|commitsToSubmit
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|BatchUpdate
operator|.
name|execute
argument_list|(
name|batchUpdates
argument_list|(
name|projects
argument_list|)
argument_list|,
operator|new
name|SubmitStrategyListener
argument_list|(
name|submitInput
argument_list|,
name|strategies
argument_list|,
name|commits
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UpdateException
name|e
parameter_list|)
block|{
comment|// BatchUpdate may have inadvertently wrapped an IntegrationException
comment|// thrown by some legacy SubmitStrategyOp code that intended the error
comment|// message to be user-visible. Copy the message from the wrapped
comment|// exception.
comment|//
comment|// If you happen across one of these, the correct fix is to convert the
comment|// inner IntegrationException to a ResourceConflictException.
name|String
name|msg
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IntegrationException
condition|)
block|{
name|msg
operator|=
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|=
literal|"Error submitting change"
operator|+
operator|(
name|cs
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|?
literal|"s"
else|:
literal|""
operator|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IntegrationException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|SubmoduleOp
name|subOp
init|=
name|subOpProvider
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|Branch
operator|.
name|NameKey
name|branch
range|:
name|branches
control|)
block|{
name|OpenBranch
name|ob
init|=
name|getRepo
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|)
operator|.
name|getBranch
argument_list|(
name|branch
argument_list|)
decl_stmt|;
name|updateSubmoduleSubscriptions
argument_list|(
name|ob
argument_list|,
name|subOp
argument_list|)
expr_stmt|;
block|}
name|updateSuperProjects
argument_list|(
name|subOp
argument_list|,
name|br
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|batchUpdates (Collection<Project.NameKey> projects)
specifier|private
name|List
argument_list|<
name|BatchUpdate
argument_list|>
name|batchUpdates
parameter_list|(
name|Collection
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projects
parameter_list|)
block|{
name|List
argument_list|<
name|BatchUpdate
argument_list|>
name|updates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|projects
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Project
operator|.
name|NameKey
name|project
range|:
name|projects
control|)
block|{
name|updates
operator|.
name|add
argument_list|(
name|getRepo
argument_list|(
name|project
argument_list|)
operator|.
name|getUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|updates
return|;
block|}
DECL|method|commits (List<ChangeData> cds)
specifier|private
name|Set
argument_list|<
name|CodeReviewCommit
argument_list|>
name|commits
parameter_list|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|cds
parameter_list|)
block|{
name|LinkedHashSet
argument_list|<
name|CodeReviewCommit
argument_list|>
name|result
init|=
name|Sets
operator|.
name|newLinkedHashSetWithExpectedSize
argument_list|(
name|cds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|cds
control|)
block|{
name|CodeReviewCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|commit
operator|!=
literal|null
argument_list|,
literal|"commit for %s not found by validateChangeList"
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|createStrategy (OpenRepo or, MergeTip mergeTip, Branch.NameKey destBranch, SubmitType submitType, CodeReviewCommit branchTip)
specifier|private
name|SubmitStrategy
name|createStrategy
parameter_list|(
name|OpenRepo
name|or
parameter_list|,
name|MergeTip
name|mergeTip
parameter_list|,
name|Branch
operator|.
name|NameKey
name|destBranch
parameter_list|,
name|SubmitType
name|submitType
parameter_list|,
name|CodeReviewCommit
name|branchTip
parameter_list|)
throws|throws
name|IntegrationException
block|{
return|return
name|submitStrategyFactory
operator|.
name|create
argument_list|(
name|submitType
argument_list|,
name|db
argument_list|,
name|or
operator|.
name|repo
argument_list|,
name|or
operator|.
name|rw
argument_list|,
name|or
operator|.
name|ins
argument_list|,
name|or
operator|.
name|canMergeFlag
argument_list|,
name|getAlreadyAccepted
argument_list|(
name|or
argument_list|,
name|branchTip
argument_list|)
argument_list|,
name|destBranch
argument_list|,
name|caller
argument_list|,
name|mergeTip
argument_list|,
name|commits
argument_list|,
name|submissionId
argument_list|)
return|;
block|}
DECL|method|getAlreadyAccepted (OpenRepo or, CodeReviewCommit branchTip)
specifier|private
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|getAlreadyAccepted
parameter_list|(
name|OpenRepo
name|or
parameter_list|,
name|CodeReviewCommit
name|branchTip
parameter_list|)
throws|throws
name|IntegrationException
block|{
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|alreadyAccepted
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|branchTip
operator|!=
literal|null
condition|)
block|{
name|alreadyAccepted
operator|.
name|add
argument_list|(
name|branchTip
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|Ref
name|r
range|:
name|or
operator|.
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|alreadyAccepted
operator|.
name|add
argument_list|(
name|or
operator|.
name|rw
operator|.
name|parseCommit
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|iote
parameter_list|)
block|{
comment|// Not a commit? Skip over it.
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Failed to determine already accepted commits."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|logDebug
argument_list|(
literal|"Found {} existing heads"
argument_list|,
name|alreadyAccepted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|alreadyAccepted
return|;
block|}
annotation|@
name|AutoValue
DECL|class|BranchBatch
specifier|static
specifier|abstract
class|class
name|BranchBatch
block|{
DECL|method|submitType ()
annotation|@
name|Nullable
specifier|abstract
name|SubmitType
name|submitType
parameter_list|()
function_decl|;
DECL|method|changes ()
specifier|abstract
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|()
function_decl|;
block|}
DECL|method|validateChangeList (OpenRepo or, Collection<ChangeData> submitted)
specifier|private
name|BranchBatch
name|validateChangeList
parameter_list|(
name|OpenRepo
name|or
parameter_list|,
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|submitted
parameter_list|)
throws|throws
name|IntegrationException
block|{
name|logDebug
argument_list|(
literal|"Validating {} changes"
argument_list|,
name|submitted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeData
argument_list|>
name|toSubmit
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|submitted
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|PatchSet
operator|.
name|Id
argument_list|>
name|revisions
init|=
name|getRevisions
argument_list|(
name|or
argument_list|,
name|submitted
argument_list|)
decl_stmt|;
name|SubmitType
name|submitType
init|=
literal|null
decl_stmt|;
name|ChangeData
name|choseSubmitTypeFrom
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|submitted
control|)
block|{
name|Change
operator|.
name|Id
name|changeId
init|=
name|cd
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ChangeControl
name|ctl
decl_stmt|;
name|Change
name|chg
decl_stmt|;
try|try
block|{
name|ctl
operator|=
name|cd
operator|.
name|changeControl
argument_list|()
expr_stmt|;
name|chg
operator|=
name|cd
operator|.
name|change
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|commits
operator|.
name|logProblem
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|SubmitType
name|st
init|=
name|getSubmitType
argument_list|(
name|cd
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|==
literal|null
condition|)
block|{
name|commits
operator|.
name|logProblem
argument_list|(
name|changeId
argument_list|,
literal|"No submit type for change"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|submitType
operator|==
literal|null
condition|)
block|{
name|submitType
operator|=
name|st
expr_stmt|;
name|choseSubmitTypeFrom
operator|=
name|cd
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|st
operator|!=
name|submitType
condition|)
block|{
name|commits
operator|.
name|problem
argument_list|(
name|changeId
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Change has submit type %s, but previously chose submit type %s "
operator|+
literal|"from change %s in the same batch"
argument_list|,
name|st
argument_list|,
name|submitType
argument_list|,
name|choseSubmitTypeFrom
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|chg
operator|.
name|currentPatchSetId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Missing current patch set on change"
decl_stmt|;
name|logError
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|changeId
argument_list|)
expr_stmt|;
name|commits
operator|.
name|problem
argument_list|(
name|changeId
argument_list|,
name|msg
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|PatchSet
name|ps
decl_stmt|;
name|Branch
operator|.
name|NameKey
name|destBranch
init|=
name|chg
operator|.
name|getDest
argument_list|()
decl_stmt|;
try|try
block|{
name|ps
operator|=
name|cd
operator|.
name|currentPatchSet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|commits
operator|.
name|logProblem
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|ps
operator|==
literal|null
operator|||
name|ps
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
operator|||
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|commits
operator|.
name|logProblem
argument_list|(
name|changeId
argument_list|,
literal|"Missing patch set or revision on change"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|idstr
init|=
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|ObjectId
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|idstr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|commits
operator|.
name|logProblem
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|revisions
operator|.
name|containsEntry
argument_list|(
name|id
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
comment|// TODO this is actually an error, the branch is gone but we
comment|// want to merge the issue. We can't safely do that if the
comment|// tip is not reachable.
comment|//
name|commits
operator|.
name|logProblem
argument_list|(
name|changeId
argument_list|,
literal|"Revision "
operator|+
name|idstr
operator|+
literal|" of patch set "
operator|+
name|ps
operator|.
name|getPatchSetId
argument_list|()
operator|+
literal|" does not match "
operator|+
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
operator|+
literal|" for change"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|CodeReviewCommit
name|commit
decl_stmt|;
try|try
block|{
name|commit
operator|=
name|or
operator|.
name|rw
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|commits
operator|.
name|logProblem
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// TODO(dborowitz): Consider putting ChangeData in CodeReviewCommit.
name|commit
operator|.
name|setControl
argument_list|(
name|ctl
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setPatchsetId
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|commits
operator|.
name|put
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|MergeValidators
name|mergeValidators
init|=
name|mergeValidatorsFactory
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|mergeValidators
operator|.
name|validatePreMerge
argument_list|(
name|or
operator|.
name|repo
argument_list|,
name|commit
argument_list|,
name|or
operator|.
name|project
argument_list|,
name|destBranch
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|caller
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MergeValidationException
name|mve
parameter_list|)
block|{
name|commits
operator|.
name|problem
argument_list|(
name|changeId
argument_list|,
name|mve
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|commit
operator|.
name|add
argument_list|(
name|or
operator|.
name|canMergeFlag
argument_list|)
expr_stmt|;
name|toSubmit
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
name|logDebug
argument_list|(
literal|"Submitting on this run: {}"
argument_list|,
name|toSubmit
argument_list|)
expr_stmt|;
return|return
operator|new
name|AutoValue_MergeOp_BranchBatch
argument_list|(
name|submitType
argument_list|,
name|toSubmit
argument_list|)
return|;
block|}
DECL|method|getRevisions (OpenRepo or, Collection<ChangeData> cds)
specifier|private
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|PatchSet
operator|.
name|Id
argument_list|>
name|getRevisions
parameter_list|(
name|OpenRepo
name|or
parameter_list|,
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|cds
parameter_list|)
throws|throws
name|IntegrationException
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|refNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|cds
control|)
block|{
name|Change
name|c
init|=
name|cd
operator|.
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|refNames
operator|.
name|add
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|PatchSet
operator|.
name|Id
argument_list|>
name|revisions
init|=
name|HashMultimap
operator|.
name|create
argument_list|(
name|cds
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|e
range|:
name|or
operator|.
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
name|refNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|refNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|revisions
operator|.
name|put
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|PatchSet
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|revisions
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Failed to validate changes"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getSubmitType (ChangeData cd)
specifier|private
name|SubmitType
name|getSubmitType
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
block|{
try|try
block|{
name|SubmitTypeRecord
name|str
init|=
name|cd
operator|.
name|submitTypeRecord
argument_list|()
decl_stmt|;
return|return
name|str
operator|.
name|isOk
argument_list|()
condition|?
name|str
operator|.
name|type
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Failed to get submit type for "
operator|+
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|updateSubmoduleSubscriptions (OpenBranch ob, SubmoduleOp subOp)
specifier|private
name|void
name|updateSubmoduleSubscriptions
parameter_list|(
name|OpenBranch
name|ob
parameter_list|,
name|SubmoduleOp
name|subOp
parameter_list|)
block|{
name|CodeReviewCommit
name|branchTip
init|=
name|ob
operator|.
name|oldTip
decl_stmt|;
name|MergeTip
name|mergeTip
init|=
name|ob
operator|.
name|mergeTip
decl_stmt|;
if|if
condition|(
name|mergeTip
operator|!=
literal|null
operator|&&
operator|(
name|branchTip
operator|==
literal|null
operator|||
name|branchTip
operator|!=
name|mergeTip
operator|.
name|getCurrentTip
argument_list|()
operator|)
condition|)
block|{
name|logDebug
argument_list|(
literal|"Updating submodule subscriptions for branch {}"
argument_list|,
name|ob
operator|.
name|name
argument_list|)
expr_stmt|;
try|try
block|{
name|subOp
operator|.
name|updateSubmoduleSubscriptions
argument_list|(
name|db
argument_list|,
name|ob
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SubmoduleException
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"The submodule subscriptions were not updated according"
operator|+
literal|"to the .gitmodules files"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateSuperProjects (SubmoduleOp subOp, Collection<Branch.NameKey> branches)
specifier|private
name|void
name|updateSuperProjects
parameter_list|(
name|SubmoduleOp
name|subOp
parameter_list|,
name|Collection
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|branches
parameter_list|)
block|{
name|logDebug
argument_list|(
literal|"Updating superprojects"
argument_list|)
expr_stmt|;
try|try
block|{
name|subOp
operator|.
name|updateSuperProjects
argument_list|(
name|db
argument_list|,
name|branches
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SubmoduleException
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"The gitlinks were not updated according to the "
operator|+
literal|"subscriptions"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|openRepos (Collection<Project.NameKey> projects)
specifier|private
name|void
name|openRepos
parameter_list|(
name|Collection
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projects
parameter_list|)
throws|throws
name|IntegrationException
block|{
for|for
control|(
name|Project
operator|.
name|NameKey
name|project
range|:
name|projects
control|)
block|{
try|try
block|{
name|openRepo
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|noProject
parameter_list|)
block|{
name|logWarn
argument_list|(
literal|"Project "
operator|+
name|noProject
operator|.
name|project
argument_list|()
operator|+
literal|" no longer exists, "
operator|+
literal|"abandoning open changes"
argument_list|)
expr_stmt|;
name|abandonAllOpenChangeForDeletedProject
argument_list|(
name|noProject
operator|.
name|project
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Error opening project "
operator|+
name|project
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|abandonAllOpenChangeForDeletedProject ( Project.NameKey destProject)
specifier|private
name|void
name|abandonAllOpenChangeForDeletedProject
parameter_list|(
name|Project
operator|.
name|NameKey
name|destProject
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|internalChangeQuery
operator|.
name|byProjectOpen
argument_list|(
name|destProject
argument_list|)
control|)
block|{
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|batchUpdateFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|destProject
argument_list|,
name|internalUserFactory
operator|.
name|create
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
init|)
block|{
name|bu
operator|.
name|addOp
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|BatchUpdate
operator|.
name|Op
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|change
init|=
name|ctx
operator|.
name|getChange
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
argument_list|)
expr_stmt|;
name|ChangeMessage
name|msg
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|ChangeUtil
operator|.
name|messageUUID
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|change
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|,
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setMessage
argument_list|(
literal|"Project was deleted."
argument_list|)
expr_stmt|;
name|cmUtil
operator|.
name|addChangeMessage
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getUpdate
argument_list|(
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|saveChange
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UpdateException
decl||
name|RestApiException
name|e
parameter_list|)
block|{
name|logWarn
argument_list|(
literal|"Cannot abandon changes for deleted project "
operator|+
name|destProject
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|logWarn
argument_list|(
literal|"Cannot abandon changes for deleted project "
operator|+
name|destProject
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logDebug (String msg, Object... args)
specifier|private
name|void
name|logDebug
parameter_list|(
name|String
name|msg
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|submissionId
operator|+
literal|"]"
operator|+
name|msg
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logWarn (String msg, Throwable t)
specifier|private
name|void
name|logWarn
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"["
operator|+
name|submissionId
operator|+
literal|"]"
operator|+
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logWarn (String msg)
specifier|private
name|void
name|logWarn
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"["
operator|+
name|submissionId
operator|+
literal|"]"
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logError (String msg, Throwable t)
specifier|private
name|void
name|logError
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isErrorEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"["
operator|+
name|submissionId
operator|+
literal|"]"
operator|+
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"["
operator|+
name|submissionId
operator|+
literal|"]"
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|logError (String msg)
specifier|private
name|void
name|logError
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|logError
argument_list|(
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

