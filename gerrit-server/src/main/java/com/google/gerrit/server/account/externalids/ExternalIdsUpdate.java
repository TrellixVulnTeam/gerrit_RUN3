begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account.externalids
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIdReader
operator|.
name|MAX_NOTE_SZ
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIdReader
operator|.
name|readNoteMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIdReader
operator|.
name|readRevision
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|OBJ_BLOB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|OBJ_TREE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|RetryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|Retryer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|RetryerBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|StopStrategies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|WaitStrategies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Runnables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Counter0
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|MetricMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|LockFailureException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmDuplicateKeyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_comment
comment|/**  * Updates externalIds in ReviewDb and NoteDb.  *  *<p>In NoteDb external IDs are stored in the All-Users repository in a Git Notes branch called  * refs/meta/external-ids where the sha1 of the external ID is used as note name. Each note content  * is a git config file that contains an external ID. It has exactly one externalId subsection with  * an accountId and optionally email and password:  *  *<pre>  * [externalId "username:jdoe"]  *   accountId = 1003407  *   email = jdoe@example.com  *   password = bcrypt:4:LCbmSBDivK/hhGVQMfkDpA==:XcWn0pKYSVU/UJgOvhidkEtmqCp6oKB7  *</pre>  *  * For NoteDb each method call results in one commit on refs/meta/external-ids branch.  *  *<p>On updating external IDs this class takes care to evict affected accounts from the account  * cache and thus triggers reindex for them.  */
end_comment

begin_class
DECL|class|ExternalIdsUpdate
specifier|public
class|class
name|ExternalIdsUpdate
block|{
DECL|field|COMMIT_MSG
specifier|private
specifier|static
specifier|final
name|String
name|COMMIT_MSG
init|=
literal|"Update external IDs"
decl_stmt|;
comment|/**    * Factory to create an ExternalIdsUpdate instance for updating external IDs by the Gerrit server.    *    *<p>The Gerrit server identity will be used as author and committer for all commits that update    * the external IDs.    */
annotation|@
name|Singleton
DECL|class|Server
specifier|public
specifier|static
class|class
name|Server
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|metricMaker
specifier|private
specifier|final
name|MetricMaker
name|metricMaker
decl_stmt|;
DECL|field|externalIds
specifier|private
specifier|final
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|externalIdCache
specifier|private
specifier|final
name|ExternalIdCache
name|externalIdCache
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
decl_stmt|;
annotation|@
name|Inject
DECL|method|Server ( GitRepositoryManager repoManager, AccountCache accountCache, AllUsersName allUsersName, MetricMaker metricMaker, ExternalIds externalIds, ExternalIdCache externalIdCache, @GerritPersonIdent Provider<PersonIdent> serverIdent)
specifier|public
name|Server
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AccountCache
name|accountCache
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|MetricMaker
name|metricMaker
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|,
name|ExternalIdCache
name|externalIdCache
parameter_list|,
annotation|@
name|GerritPersonIdent
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|metricMaker
operator|=
name|metricMaker
expr_stmt|;
name|this
operator|.
name|externalIds
operator|=
name|externalIds
expr_stmt|;
name|this
operator|.
name|externalIdCache
operator|=
name|externalIdCache
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
block|}
DECL|method|create ()
specifier|public
name|ExternalIdsUpdate
name|create
parameter_list|()
block|{
name|PersonIdent
name|i
init|=
name|serverIdent
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|new
name|ExternalIdsUpdate
argument_list|(
name|repoManager
argument_list|,
name|accountCache
argument_list|,
name|allUsersName
argument_list|,
name|metricMaker
argument_list|,
name|externalIds
argument_list|,
name|externalIdCache
argument_list|,
name|i
argument_list|,
name|i
argument_list|)
return|;
block|}
block|}
comment|/**    * Factory to create an ExternalIdsUpdate instance for updating external IDs by the Gerrit server.    *    *<p>Using this class no reindex will be performed for the affected accounts and they will also    * not be evicted from the account cache.    *    *<p>The Gerrit server identity will be used as author and committer for all commits that update    * the external IDs.    */
annotation|@
name|Singleton
DECL|class|ServerNoReindex
specifier|public
specifier|static
class|class
name|ServerNoReindex
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|metricMaker
specifier|private
specifier|final
name|MetricMaker
name|metricMaker
decl_stmt|;
DECL|field|externalIds
specifier|private
specifier|final
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|externalIdCache
specifier|private
specifier|final
name|ExternalIdCache
name|externalIdCache
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
decl_stmt|;
annotation|@
name|Inject
DECL|method|ServerNoReindex ( GitRepositoryManager repoManager, AllUsersName allUsersName, MetricMaker metricMaker, ExternalIds externalIds, ExternalIdCache externalIdCache, @GerritPersonIdent Provider<PersonIdent> serverIdent)
specifier|public
name|ServerNoReindex
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|MetricMaker
name|metricMaker
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|,
name|ExternalIdCache
name|externalIdCache
parameter_list|,
annotation|@
name|GerritPersonIdent
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|metricMaker
operator|=
name|metricMaker
expr_stmt|;
name|this
operator|.
name|externalIds
operator|=
name|externalIds
expr_stmt|;
name|this
operator|.
name|externalIdCache
operator|=
name|externalIdCache
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
block|}
DECL|method|create ()
specifier|public
name|ExternalIdsUpdate
name|create
parameter_list|()
block|{
name|PersonIdent
name|i
init|=
name|serverIdent
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|new
name|ExternalIdsUpdate
argument_list|(
name|repoManager
argument_list|,
literal|null
argument_list|,
name|allUsersName
argument_list|,
name|metricMaker
argument_list|,
name|externalIds
argument_list|,
name|externalIdCache
argument_list|,
name|i
argument_list|,
name|i
argument_list|)
return|;
block|}
block|}
comment|/**    * Factory to create an ExternalIdsUpdate instance for updating external IDs by the current user.    *    *<p>The identity of the current user will be used as author for all commits that update the    * external IDs. The Gerrit server identity will be used as committer.    */
annotation|@
name|Singleton
DECL|class|User
specifier|public
specifier|static
class|class
name|User
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|metricMaker
specifier|private
specifier|final
name|MetricMaker
name|metricMaker
decl_stmt|;
DECL|field|externalIds
specifier|private
specifier|final
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|externalIdCache
specifier|private
specifier|final
name|ExternalIdCache
name|externalIdCache
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
decl_stmt|;
DECL|field|identifiedUser
specifier|private
specifier|final
name|Provider
argument_list|<
name|IdentifiedUser
argument_list|>
name|identifiedUser
decl_stmt|;
annotation|@
name|Inject
DECL|method|User ( GitRepositoryManager repoManager, AccountCache accountCache, AllUsersName allUsersName, MetricMaker metricMaker, ExternalIds externalIds, ExternalIdCache externalIdCache, @GerritPersonIdent Provider<PersonIdent> serverIdent, Provider<IdentifiedUser> identifiedUser)
specifier|public
name|User
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AccountCache
name|accountCache
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|MetricMaker
name|metricMaker
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|,
name|ExternalIdCache
name|externalIdCache
parameter_list|,
annotation|@
name|GerritPersonIdent
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
parameter_list|,
name|Provider
argument_list|<
name|IdentifiedUser
argument_list|>
name|identifiedUser
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|metricMaker
operator|=
name|metricMaker
expr_stmt|;
name|this
operator|.
name|externalIds
operator|=
name|externalIds
expr_stmt|;
name|this
operator|.
name|externalIdCache
operator|=
name|externalIdCache
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
name|this
operator|.
name|identifiedUser
operator|=
name|identifiedUser
expr_stmt|;
block|}
DECL|method|create ()
specifier|public
name|ExternalIdsUpdate
name|create
parameter_list|()
block|{
name|PersonIdent
name|i
init|=
name|serverIdent
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|new
name|ExternalIdsUpdate
argument_list|(
name|repoManager
argument_list|,
name|accountCache
argument_list|,
name|allUsersName
argument_list|,
name|metricMaker
argument_list|,
name|externalIds
argument_list|,
name|externalIdCache
argument_list|,
name|createPersonIdent
argument_list|(
name|i
argument_list|,
name|identifiedUser
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|createPersonIdent (PersonIdent ident, IdentifiedUser user)
specifier|private
name|PersonIdent
name|createPersonIdent
parameter_list|(
name|PersonIdent
name|ident
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|)
block|{
return|return
name|user
operator|.
name|newCommitterIdent
argument_list|(
name|ident
operator|.
name|getWhen
argument_list|()
argument_list|,
name|ident
operator|.
name|getTimeZone
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|retryerBuilder ()
specifier|public
specifier|static
name|RetryerBuilder
argument_list|<
name|RefsMetaExternalIdsUpdate
argument_list|>
name|retryerBuilder
parameter_list|()
block|{
return|return
name|RetryerBuilder
operator|.
expr|<
name|RefsMetaExternalIdsUpdate
operator|>
name|newBuilder
argument_list|()
operator|.
name|retryIfException
argument_list|(
name|e
lambda|->
name|e
operator|instanceof
name|LockFailureException
argument_list|)
operator|.
name|withWaitStrategy
argument_list|(
name|WaitStrategies
operator|.
name|join
argument_list|(
name|WaitStrategies
operator|.
name|exponentialWait
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|WaitStrategies
operator|.
name|randomWait
argument_list|(
literal|50
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
argument_list|)
operator|.
name|withStopStrategy
argument_list|(
name|StopStrategies
operator|.
name|stopAfterDelay
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
return|;
block|}
DECL|field|RETRYER
specifier|private
specifier|static
specifier|final
name|Retryer
argument_list|<
name|RefsMetaExternalIdsUpdate
argument_list|>
name|RETRYER
init|=
name|retryerBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|accountCache
annotation|@
name|Nullable
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|externalIds
specifier|private
specifier|final
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|externalIdCache
specifier|private
specifier|final
name|ExternalIdCache
name|externalIdCache
decl_stmt|;
DECL|field|committerIdent
specifier|private
specifier|final
name|PersonIdent
name|committerIdent
decl_stmt|;
DECL|field|authorIdent
specifier|private
specifier|final
name|PersonIdent
name|authorIdent
decl_stmt|;
DECL|field|afterReadRevision
specifier|private
specifier|final
name|Runnable
name|afterReadRevision
decl_stmt|;
DECL|field|retryer
specifier|private
specifier|final
name|Retryer
argument_list|<
name|RefsMetaExternalIdsUpdate
argument_list|>
name|retryer
decl_stmt|;
DECL|field|updateCount
specifier|private
specifier|final
name|Counter0
name|updateCount
decl_stmt|;
DECL|method|ExternalIdsUpdate ( GitRepositoryManager repoManager, @Nullable AccountCache accountCache, AllUsersName allUsersName, MetricMaker metricMaker, ExternalIds externalIds, ExternalIdCache externalIdCache, PersonIdent committerIdent, PersonIdent authorIdent)
specifier|private
name|ExternalIdsUpdate
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
annotation|@
name|Nullable
name|AccountCache
name|accountCache
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|MetricMaker
name|metricMaker
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|,
name|ExternalIdCache
name|externalIdCache
parameter_list|,
name|PersonIdent
name|committerIdent
parameter_list|,
name|PersonIdent
name|authorIdent
parameter_list|)
block|{
name|this
argument_list|(
name|repoManager
argument_list|,
name|accountCache
argument_list|,
name|allUsersName
argument_list|,
name|metricMaker
argument_list|,
name|externalIds
argument_list|,
name|externalIdCache
argument_list|,
name|committerIdent
argument_list|,
name|authorIdent
argument_list|,
name|Runnables
operator|.
name|doNothing
argument_list|()
argument_list|,
name|RETRYER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|ExternalIdsUpdate ( GitRepositoryManager repoManager, @Nullable AccountCache accountCache, AllUsersName allUsersName, MetricMaker metricMaker, ExternalIds externalIds, ExternalIdCache externalIdCache, PersonIdent committerIdent, PersonIdent authorIdent, Runnable afterReadRevision, Retryer<RefsMetaExternalIdsUpdate> retryer)
specifier|public
name|ExternalIdsUpdate
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
annotation|@
name|Nullable
name|AccountCache
name|accountCache
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|MetricMaker
name|metricMaker
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|,
name|ExternalIdCache
name|externalIdCache
parameter_list|,
name|PersonIdent
name|committerIdent
parameter_list|,
name|PersonIdent
name|authorIdent
parameter_list|,
name|Runnable
name|afterReadRevision
parameter_list|,
name|Retryer
argument_list|<
name|RefsMetaExternalIdsUpdate
argument_list|>
name|retryer
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|checkNotNull
argument_list|(
name|repoManager
argument_list|,
literal|"repoManager"
argument_list|)
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|checkNotNull
argument_list|(
name|allUsersName
argument_list|,
literal|"allUsersName"
argument_list|)
expr_stmt|;
name|this
operator|.
name|committerIdent
operator|=
name|checkNotNull
argument_list|(
name|committerIdent
argument_list|,
literal|"committerIdent"
argument_list|)
expr_stmt|;
name|this
operator|.
name|externalIds
operator|=
name|checkNotNull
argument_list|(
name|externalIds
argument_list|,
literal|"externalIds"
argument_list|)
expr_stmt|;
name|this
operator|.
name|externalIdCache
operator|=
name|checkNotNull
argument_list|(
name|externalIdCache
argument_list|,
literal|"externalIdCache"
argument_list|)
expr_stmt|;
name|this
operator|.
name|authorIdent
operator|=
name|checkNotNull
argument_list|(
name|authorIdent
argument_list|,
literal|"authorIdent"
argument_list|)
expr_stmt|;
name|this
operator|.
name|afterReadRevision
operator|=
name|checkNotNull
argument_list|(
name|afterReadRevision
argument_list|,
literal|"afterReadRevision"
argument_list|)
expr_stmt|;
name|this
operator|.
name|retryer
operator|=
name|checkNotNull
argument_list|(
name|retryer
argument_list|,
literal|"retryer"
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateCount
operator|=
name|metricMaker
operator|.
name|newCounter
argument_list|(
literal|"notedb/external_id_update_count"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Total number of external ID updates."
argument_list|)
operator|.
name|setRate
argument_list|()
operator|.
name|setUnit
argument_list|(
literal|"updates"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inserts a new external ID.    *    *<p>If the external ID already exists, the insert fails with {@link OrmDuplicateKeyException}.    */
DECL|method|insert (ExternalId extId)
specifier|public
name|void
name|insert
parameter_list|(
name|ExternalId
name|extId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|extId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inserts new external IDs.    *    *<p>If any of the external ID already exists, the insert fails with {@link    * OrmDuplicateKeyException}.    */
DECL|method|insert (Collection<ExternalId> extIds)
specifier|public
name|void
name|insert
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|RefsMetaExternalIdsUpdate
name|u
init|=
name|updateNoteMap
argument_list|(
name|o
lambda|->
block|{
for|for
control|(
name|ExternalId
name|extId
range|:
name|extIds
control|)
block|{
name|insert
argument_list|(
name|o
operator|.
name|rw
argument_list|()
argument_list|,
name|o
operator|.
name|ins
argument_list|()
argument_list|,
name|o
operator|.
name|noteMap
argument_list|()
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|externalIdCache
operator|.
name|onCreate
argument_list|(
name|u
operator|.
name|oldRev
argument_list|()
argument_list|,
name|u
operator|.
name|newRev
argument_list|()
argument_list|,
name|extIds
argument_list|)
expr_stmt|;
name|evictAccounts
argument_list|(
name|extIds
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inserts or updates an external ID.    *    *<p>If the external ID already exists, it is overwritten, otherwise it is inserted.    */
DECL|method|upsert (ExternalId extId)
specifier|public
name|void
name|upsert
parameter_list|(
name|ExternalId
name|extId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|upsert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|extId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inserts or updates external IDs.    *    *<p>If any of the external IDs already exists, it is overwritten. New external IDs are inserted.    */
DECL|method|upsert (Collection<ExternalId> extIds)
specifier|public
name|void
name|upsert
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|RefsMetaExternalIdsUpdate
name|u
init|=
name|updateNoteMap
argument_list|(
name|o
lambda|->
block|{
for|for
control|(
name|ExternalId
name|extId
range|:
name|extIds
control|)
block|{
name|upsert
argument_list|(
name|o
operator|.
name|rw
argument_list|()
argument_list|,
name|o
operator|.
name|ins
argument_list|()
argument_list|,
name|o
operator|.
name|noteMap
argument_list|()
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|externalIdCache
operator|.
name|onUpdate
argument_list|(
name|u
operator|.
name|oldRev
argument_list|()
argument_list|,
name|u
operator|.
name|newRev
argument_list|()
argument_list|,
name|extIds
argument_list|)
expr_stmt|;
name|evictAccounts
argument_list|(
name|extIds
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes an external ID.    *    * @throws IllegalStateException is thrown if there is an existing external ID that has the same    *     key, but otherwise doesn't match the specified external ID.    */
DECL|method|delete (ExternalId extId)
specifier|public
name|void
name|delete
parameter_list|(
name|ExternalId
name|extId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|extId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes external IDs.    *    * @throws IllegalStateException is thrown if there is an existing external ID that has the same    *     key as any of the external IDs that should be deleted, but otherwise doesn't match the that    *     external ID.    */
DECL|method|delete (Collection<ExternalId> extIds)
specifier|public
name|void
name|delete
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|RefsMetaExternalIdsUpdate
name|u
init|=
name|updateNoteMap
argument_list|(
name|o
lambda|->
block|{
for|for
control|(
name|ExternalId
name|extId
range|:
name|extIds
control|)
block|{
name|remove
argument_list|(
name|o
operator|.
name|rw
argument_list|()
argument_list|,
name|o
operator|.
name|noteMap
argument_list|()
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|externalIdCache
operator|.
name|onRemove
argument_list|(
name|u
operator|.
name|oldRev
argument_list|()
argument_list|,
name|u
operator|.
name|newRev
argument_list|()
argument_list|,
name|extIds
argument_list|)
expr_stmt|;
name|evictAccounts
argument_list|(
name|extIds
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete an external ID by key.    *    * @throws IllegalStateException is thrown if the external ID does not belong to the specified    *     account.    */
DECL|method|delete (Account.Id accountId, ExternalId.Key extIdKey)
specifier|public
name|void
name|delete
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|ExternalId
operator|.
name|Key
name|extIdKey
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|delete
argument_list|(
name|accountId
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|extIdKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete external IDs by external ID key.    *    * @throws IllegalStateException is thrown if any of the external IDs does not belong to the    *     specified account.    */
DECL|method|delete (Account.Id accountId, Collection<ExternalId.Key> extIdKeys)
specifier|public
name|void
name|delete
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Collection
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|extIdKeys
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|RefsMetaExternalIdsUpdate
name|u
init|=
name|updateNoteMap
argument_list|(
name|o
lambda|->
block|{
for|for
control|(
name|ExternalId
operator|.
name|Key
name|extIdKey
range|:
name|extIdKeys
control|)
block|{
name|remove
argument_list|(
name|o
operator|.
name|rw
argument_list|()
argument_list|,
name|o
operator|.
name|noteMap
argument_list|()
argument_list|,
name|extIdKey
argument_list|,
name|accountId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|externalIdCache
operator|.
name|onRemoveByKeys
argument_list|(
name|u
operator|.
name|oldRev
argument_list|()
argument_list|,
name|u
operator|.
name|newRev
argument_list|()
argument_list|,
name|accountId
argument_list|,
name|extIdKeys
argument_list|)
expr_stmt|;
name|evictAccount
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete external IDs by external ID key.    *    *<p>The external IDs are deleted regardless of which account they belong to.    */
DECL|method|deleteByKeys (Collection<ExternalId.Key> extIdKeys)
specifier|public
name|void
name|deleteByKeys
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|extIdKeys
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|deletedExtIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|RefsMetaExternalIdsUpdate
name|u
init|=
name|updateNoteMap
argument_list|(
name|o
lambda|->
block|{
for|for
control|(
name|ExternalId
operator|.
name|Key
name|extIdKey
range|:
name|extIdKeys
control|)
block|{
name|ExternalId
name|extId
init|=
name|remove
argument_list|(
name|o
operator|.
name|rw
argument_list|()
argument_list|,
name|o
operator|.
name|noteMap
argument_list|()
argument_list|,
name|extIdKey
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|extId
operator|!=
literal|null
condition|)
block|{
name|deletedExtIds
operator|.
name|add
argument_list|(
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|externalIdCache
operator|.
name|onRemoveByKeys
argument_list|(
name|u
operator|.
name|oldRev
argument_list|()
argument_list|,
name|u
operator|.
name|newRev
argument_list|()
argument_list|,
name|extIdKeys
argument_list|)
expr_stmt|;
name|evictAccounts
argument_list|(
name|deletedExtIds
argument_list|)
expr_stmt|;
block|}
comment|/** Deletes all external IDs of the specified account. */
DECL|method|deleteAll (Account.Id accountId)
specifier|public
name|void
name|deleteAll
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|delete
argument_list|(
name|externalIds
operator|.
name|byAccount
argument_list|(
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replaces external IDs for an account by external ID keys.    *    *<p>Deletion of external IDs is done before adding the new external IDs. This means if an    * external ID key is specified for deletion and an external ID with the same key is specified to    * be added, the old external ID with that key is deleted first and then the new external ID is    * added (so the external ID for that key is replaced).    *    * @throws IllegalStateException is thrown if any of the specified external IDs does not belong to    *     the specified account.    */
DECL|method|replace ( Account.Id accountId, Collection<ExternalId.Key> toDelete, Collection<ExternalId> toAdd)
specifier|public
name|void
name|replace
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Collection
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|toDelete
parameter_list|,
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|toAdd
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|checkSameAccount
argument_list|(
name|toAdd
argument_list|,
name|accountId
argument_list|)
expr_stmt|;
name|RefsMetaExternalIdsUpdate
name|u
init|=
name|updateNoteMap
argument_list|(
name|o
lambda|->
block|{
for|for
control|(
name|ExternalId
operator|.
name|Key
name|extIdKey
range|:
name|toDelete
control|)
block|{
name|remove
argument_list|(
name|o
operator|.
name|rw
argument_list|()
argument_list|,
name|o
operator|.
name|noteMap
argument_list|()
argument_list|,
name|extIdKey
argument_list|,
name|accountId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExternalId
name|extId
range|:
name|toAdd
control|)
block|{
name|insert
argument_list|(
name|o
operator|.
name|rw
argument_list|()
argument_list|,
name|o
operator|.
name|ins
argument_list|()
argument_list|,
name|o
operator|.
name|noteMap
argument_list|()
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|externalIdCache
operator|.
name|onReplaceByKeys
argument_list|(
name|u
operator|.
name|oldRev
argument_list|()
argument_list|,
name|u
operator|.
name|newRev
argument_list|()
argument_list|,
name|accountId
argument_list|,
name|toDelete
argument_list|,
name|toAdd
argument_list|)
expr_stmt|;
name|evictAccount
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replaces external IDs for an account by external ID keys.    *    *<p>Deletion of external IDs is done before adding the new external IDs. This means if an    * external ID key is specified for deletion and an external ID with the same key is specified to    * be added, the old external ID with that key is deleted first and then the new external ID is    * added (so the external ID for that key is replaced).    *    *<p>The external IDs are replaced regardless of which account they belong to.    */
DECL|method|replaceByKeys (Collection<ExternalId.Key> toDelete, Collection<ExternalId> toAdd)
specifier|public
name|void
name|replaceByKeys
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|toDelete
parameter_list|,
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|toAdd
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|deletedExtIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|RefsMetaExternalIdsUpdate
name|u
init|=
name|updateNoteMap
argument_list|(
name|o
lambda|->
block|{
for|for
control|(
name|ExternalId
operator|.
name|Key
name|extIdKey
range|:
name|toDelete
control|)
block|{
name|ExternalId
name|extId
init|=
name|remove
argument_list|(
name|o
operator|.
name|rw
argument_list|()
argument_list|,
name|o
operator|.
name|noteMap
argument_list|()
argument_list|,
name|extIdKey
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|extId
operator|!=
literal|null
condition|)
block|{
name|deletedExtIds
operator|.
name|add
argument_list|(
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ExternalId
name|extId
range|:
name|toAdd
control|)
block|{
name|insert
argument_list|(
name|o
operator|.
name|rw
argument_list|()
argument_list|,
name|o
operator|.
name|ins
argument_list|()
argument_list|,
name|o
operator|.
name|noteMap
argument_list|()
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|externalIdCache
operator|.
name|onReplaceByKeys
argument_list|(
name|u
operator|.
name|oldRev
argument_list|()
argument_list|,
name|u
operator|.
name|newRev
argument_list|()
argument_list|,
name|toDelete
argument_list|,
name|toAdd
argument_list|)
expr_stmt|;
name|evictAccounts
argument_list|(
name|Streams
operator|.
name|concat
argument_list|(
name|deletedExtIds
operator|.
name|stream
argument_list|()
argument_list|,
name|toAdd
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replaces an external ID.    *    * @throws IllegalStateException is thrown if the specified external IDs belong to different    *     accounts.    */
DECL|method|replace (ExternalId toDelete, ExternalId toAdd)
specifier|public
name|void
name|replace
parameter_list|(
name|ExternalId
name|toDelete
parameter_list|,
name|ExternalId
name|toAdd
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|replace
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|toDelete
argument_list|)
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|toAdd
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replaces external IDs.    *    *<p>Deletion of external IDs is done before adding the new external IDs. This means if an    * external ID is specified for deletion and an external ID with the same key is specified to be    * added, the old external ID with that key is deleted first and then the new external ID is added    * (so the external ID for that key is replaced).    *    * @throws IllegalStateException is thrown if the specified external IDs belong to different    *     accounts.    */
DECL|method|replace (Collection<ExternalId> toDelete, Collection<ExternalId> toAdd)
specifier|public
name|void
name|replace
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|toDelete
parameter_list|,
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|toAdd
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|Account
operator|.
name|Id
name|accountId
init|=
name|checkSameAccount
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|toDelete
argument_list|,
name|toAdd
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|accountId
operator|==
literal|null
condition|)
block|{
comment|// toDelete and toAdd are empty -> nothing to do
return|return;
block|}
name|replace
argument_list|(
name|accountId
argument_list|,
name|toDelete
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|key
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
argument_list|,
name|toAdd
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks that all specified external IDs belong to the same account.    *    * @return the ID of the account to which all specified external IDs belong.    */
DECL|method|checkSameAccount (Iterable<ExternalId> extIds)
specifier|public
specifier|static
name|Account
operator|.
name|Id
name|checkSameAccount
parameter_list|(
name|Iterable
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
block|{
return|return
name|checkSameAccount
argument_list|(
name|extIds
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Checks that all specified external IDs belong to specified account. If no account is specified    * it is checked that all specified external IDs belong to the same account.    *    * @return the ID of the account to which all specified external IDs belong.    */
DECL|method|checkSameAccount ( Iterable<ExternalId> extIds, @Nullable Account.Id accountId)
specifier|public
specifier|static
name|Account
operator|.
name|Id
name|checkSameAccount
parameter_list|(
name|Iterable
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|,
annotation|@
name|Nullable
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
for|for
control|(
name|ExternalId
name|extId
range|:
name|extIds
control|)
block|{
if|if
condition|(
name|accountId
operator|==
literal|null
condition|)
block|{
name|accountId
operator|=
name|extId
operator|.
name|accountId
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|checkState
argument_list|(
name|accountId
operator|.
name|equals
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|)
argument_list|,
literal|"external id %s belongs to account %s, expected account %s"
argument_list|,
name|extId
operator|.
name|key
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|extId
operator|.
name|accountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|accountId
return|;
block|}
comment|/**    * Inserts a new external ID and sets it in the note map.    *    *<p>If the external ID already exists, the insert fails with {@link OrmDuplicateKeyException}.    */
DECL|method|insert (RevWalk rw, ObjectInserter ins, NoteMap noteMap, ExternalId extId)
specifier|public
specifier|static
name|void
name|insert
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|ObjectInserter
name|ins
parameter_list|,
name|NoteMap
name|noteMap
parameter_list|,
name|ExternalId
name|extId
parameter_list|)
throws|throws
name|OrmDuplicateKeyException
throws|,
name|ConfigInvalidException
throws|,
name|IOException
block|{
if|if
condition|(
name|noteMap
operator|.
name|contains
argument_list|(
name|extId
operator|.
name|key
argument_list|()
operator|.
name|sha1
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OrmDuplicateKeyException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"external id %s already exists"
argument_list|,
name|extId
operator|.
name|key
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|upsert
argument_list|(
name|rw
argument_list|,
name|ins
argument_list|,
name|noteMap
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Insert or updates an new external ID and sets it in the note map.    *    *<p>If the external ID already exists it is overwritten.    */
DECL|method|upsert (RevWalk rw, ObjectInserter ins, NoteMap noteMap, ExternalId extId)
specifier|public
specifier|static
name|void
name|upsert
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|ObjectInserter
name|ins
parameter_list|,
name|NoteMap
name|noteMap
parameter_list|,
name|ExternalId
name|extId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ObjectId
name|noteId
init|=
name|extId
operator|.
name|key
argument_list|()
operator|.
name|sha1
argument_list|()
decl_stmt|;
name|Config
name|c
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
if|if
condition|(
name|noteMap
operator|.
name|contains
argument_list|(
name|extId
operator|.
name|key
argument_list|()
operator|.
name|sha1
argument_list|()
argument_list|)
condition|)
block|{
name|byte
index|[]
name|raw
init|=
name|rw
operator|.
name|getObjectReader
argument_list|()
operator|.
name|open
argument_list|(
name|noteMap
operator|.
name|get
argument_list|(
name|noteId
argument_list|)
argument_list|,
name|OBJ_BLOB
argument_list|)
operator|.
name|getCachedBytes
argument_list|(
name|MAX_NOTE_SZ
argument_list|)
decl_stmt|;
try|try
block|{
name|c
operator|.
name|fromText
argument_list|(
operator|new
name|String
argument_list|(
name|raw
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigInvalidException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid external id config for note %s: %s"
argument_list|,
name|noteId
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|extId
operator|.
name|writeToConfig
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|byte
index|[]
name|raw
init|=
name|c
operator|.
name|toText
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|ObjectId
name|dataBlob
init|=
name|ins
operator|.
name|insert
argument_list|(
name|OBJ_BLOB
argument_list|,
name|raw
argument_list|)
decl_stmt|;
name|noteMap
operator|.
name|set
argument_list|(
name|noteId
argument_list|,
name|dataBlob
argument_list|)
expr_stmt|;
block|}
comment|/**    * Removes an external ID from the note map.    *    * @throws IllegalStateException is thrown if there is an existing external ID that has the same    *     key, but otherwise doesn't match the specified external ID.    */
DECL|method|remove (RevWalk rw, NoteMap noteMap, ExternalId extId)
specifier|public
specifier|static
name|void
name|remove
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|NoteMap
name|noteMap
parameter_list|,
name|ExternalId
name|extId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ObjectId
name|noteId
init|=
name|extId
operator|.
name|key
argument_list|()
operator|.
name|sha1
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|noteMap
operator|.
name|contains
argument_list|(
name|noteId
argument_list|)
condition|)
block|{
return|return;
block|}
name|byte
index|[]
name|raw
init|=
name|rw
operator|.
name|getObjectReader
argument_list|()
operator|.
name|open
argument_list|(
name|noteMap
operator|.
name|get
argument_list|(
name|noteId
argument_list|)
argument_list|,
name|OBJ_BLOB
argument_list|)
operator|.
name|getCachedBytes
argument_list|(
name|MAX_NOTE_SZ
argument_list|)
decl_stmt|;
name|ExternalId
name|actualExtId
init|=
name|ExternalId
operator|.
name|parse
argument_list|(
name|noteId
operator|.
name|name
argument_list|()
argument_list|,
name|raw
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|extId
operator|.
name|equals
argument_list|(
name|actualExtId
argument_list|)
argument_list|,
literal|"external id %s should be removed, but it's not matching the actual external id %s"
argument_list|,
name|extId
operator|.
name|toString
argument_list|()
argument_list|,
name|actualExtId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|noteMap
operator|.
name|remove
argument_list|(
name|noteId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Removes an external ID from the note map by external ID key.    *    * @throws IllegalStateException is thrown if an expected account ID is provided and an external    *     ID with the specified key exists, but belongs to another account.    * @return the external ID that was removed, {@code null} if no external ID with the specified key    *     exists    */
DECL|method|remove ( RevWalk rw, NoteMap noteMap, ExternalId.Key extIdKey, Account.Id expectedAccountId)
specifier|private
specifier|static
name|ExternalId
name|remove
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|NoteMap
name|noteMap
parameter_list|,
name|ExternalId
operator|.
name|Key
name|extIdKey
parameter_list|,
name|Account
operator|.
name|Id
name|expectedAccountId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ObjectId
name|noteId
init|=
name|extIdKey
operator|.
name|sha1
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|noteMap
operator|.
name|contains
argument_list|(
name|noteId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|raw
init|=
name|rw
operator|.
name|getObjectReader
argument_list|()
operator|.
name|open
argument_list|(
name|noteMap
operator|.
name|get
argument_list|(
name|noteId
argument_list|)
argument_list|,
name|OBJ_BLOB
argument_list|)
operator|.
name|getCachedBytes
argument_list|(
name|MAX_NOTE_SZ
argument_list|)
decl_stmt|;
name|ExternalId
name|extId
init|=
name|ExternalId
operator|.
name|parse
argument_list|(
name|noteId
operator|.
name|name
argument_list|()
argument_list|,
name|raw
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedAccountId
operator|!=
literal|null
condition|)
block|{
name|checkState
argument_list|(
name|expectedAccountId
operator|.
name|equals
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|)
argument_list|,
literal|"external id %s should be removed for account %s,"
operator|+
literal|" but external id belongs to account %s"
argument_list|,
name|extIdKey
operator|.
name|get
argument_list|()
argument_list|,
name|expectedAccountId
operator|.
name|get
argument_list|()
argument_list|,
name|extId
operator|.
name|accountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|noteMap
operator|.
name|remove
argument_list|(
name|noteId
argument_list|)
expr_stmt|;
return|return
name|extId
return|;
block|}
DECL|method|updateNoteMap (MyConsumer<OpenRepo> update)
specifier|private
name|RefsMetaExternalIdsUpdate
name|updateNoteMap
parameter_list|(
name|MyConsumer
argument_list|<
name|OpenRepo
argument_list|>
name|update
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
try|try
block|{
return|return
name|retryer
operator|.
name|call
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|;
name|ObjectInserter
name|ins
operator|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
name|ObjectId
name|rev
init|=
name|readRevision
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|afterReadRevision
operator|.
name|run
argument_list|()
expr_stmt|;
try|try
init|(
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|NoteMap
name|noteMap
init|=
name|readNoteMap
argument_list|(
name|rw
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|update
operator|.
name|accept
argument_list|(
name|OpenRepo
operator|.
name|create
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|ins
argument_list|,
name|noteMap
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|commit
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|ins
argument_list|,
name|rev
argument_list|,
name|noteMap
argument_list|)
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
decl||
name|RetryException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|ConfigInvalidException
operator|.
name|class
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|OrmException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|commit ( Repository repo, RevWalk rw, ObjectInserter ins, ObjectId rev, NoteMap noteMap)
specifier|private
name|RefsMetaExternalIdsUpdate
name|commit
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|ObjectInserter
name|ins
parameter_list|,
name|ObjectId
name|rev
parameter_list|,
name|NoteMap
name|noteMap
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectId
name|newRev
init|=
name|commit
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|ins
argument_list|,
name|rev
argument_list|,
name|noteMap
argument_list|,
name|COMMIT_MSG
argument_list|,
name|committerIdent
argument_list|,
name|authorIdent
argument_list|)
decl_stmt|;
name|updateCount
operator|.
name|increment
argument_list|()
expr_stmt|;
return|return
name|RefsMetaExternalIdsUpdate
operator|.
name|create
argument_list|(
name|rev
argument_list|,
name|newRev
argument_list|)
return|;
block|}
comment|/** Commits updates to the external IDs. */
DECL|method|commit ( Repository repo, RevWalk rw, ObjectInserter ins, ObjectId rev, NoteMap noteMap, String commitMessage, PersonIdent committerIdent, PersonIdent authorIdent)
specifier|public
specifier|static
name|ObjectId
name|commit
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|ObjectInserter
name|ins
parameter_list|,
name|ObjectId
name|rev
parameter_list|,
name|NoteMap
name|noteMap
parameter_list|,
name|String
name|commitMessage
parameter_list|,
name|PersonIdent
name|committerIdent
parameter_list|,
name|PersonIdent
name|authorIdent
parameter_list|)
throws|throws
name|IOException
block|{
name|CommitBuilder
name|cb
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|cb
operator|.
name|setMessage
argument_list|(
name|commitMessage
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setTreeId
argument_list|(
name|noteMap
operator|.
name|writeTree
argument_list|(
name|ins
argument_list|)
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setAuthor
argument_list|(
name|authorIdent
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setCommitter
argument_list|(
name|committerIdent
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rev
operator|.
name|equals
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
condition|)
block|{
name|cb
operator|.
name|setParentId
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cb
operator|.
name|setParentIds
argument_list|()
expr_stmt|;
comment|// Ref is currently nonexistent, commit has no parents.
block|}
if|if
condition|(
name|cb
operator|.
name|getTreeId
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|rev
operator|.
name|equals
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
condition|)
block|{
name|cb
operator|.
name|setTreeId
argument_list|(
name|emptyTree
argument_list|(
name|ins
argument_list|)
argument_list|)
expr_stmt|;
comment|// No parent, assume empty tree.
block|}
else|else
block|{
name|RevCommit
name|p
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|cb
operator|.
name|setTreeId
argument_list|(
name|p
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
comment|// Copy tree from parent.
block|}
block|}
name|ObjectId
name|commitId
init|=
name|ins
operator|.
name|insert
argument_list|(
name|cb
argument_list|)
decl_stmt|;
name|ins
operator|.
name|flush
argument_list|()
expr_stmt|;
name|RefUpdate
name|u
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
decl_stmt|;
name|u
operator|.
name|setRefLogIdent
argument_list|(
name|committerIdent
argument_list|)
expr_stmt|;
name|u
operator|.
name|setRefLogMessage
argument_list|(
literal|"Update external IDs"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|u
operator|.
name|setExpectedOldObjectId
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|u
operator|.
name|setNewObjectId
argument_list|(
name|commitId
argument_list|)
expr_stmt|;
name|RefUpdate
operator|.
name|Result
name|res
init|=
name|u
operator|.
name|update
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|res
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|FAST_FORWARD
case|:
case|case
name|NO_CHANGE
case|:
case|case
name|RENAMED
case|:
case|case
name|FORCED
case|:
break|break;
case|case
name|LOCK_FAILURE
case|:
throw|throw
operator|new
name|LockFailureException
argument_list|(
literal|"Updating external IDs failed with "
operator|+
name|res
argument_list|)
throw|;
case|case
name|IO_FAILURE
case|:
case|case
name|NOT_ATTEMPTED
case|:
case|case
name|REJECTED
case|:
case|case
name|REJECTED_CURRENT_BRANCH
case|:
case|case
name|REJECTED_MISSING_OBJECT
case|:
case|case
name|REJECTED_OTHER_REASON
case|:
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Updating external IDs failed with "
operator|+
name|res
argument_list|)
throw|;
block|}
return|return
name|rw
operator|.
name|parseCommit
argument_list|(
name|commitId
argument_list|)
return|;
block|}
DECL|method|emptyTree (ObjectInserter ins)
specifier|private
specifier|static
name|ObjectId
name|emptyTree
parameter_list|(
name|ObjectInserter
name|ins
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ins
operator|.
name|insert
argument_list|(
name|OBJ_TREE
argument_list|,
operator|new
name|byte
index|[]
block|{}
argument_list|)
return|;
block|}
DECL|method|evictAccount (Account.Id accountId)
specifier|private
name|void
name|evictAccount
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|accountCache
operator|!=
literal|null
condition|)
block|{
name|accountCache
operator|.
name|evict
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|evictAccounts (Collection<ExternalId> extIds)
specifier|private
name|void
name|evictAccounts
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|accountCache
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|extIds
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ExternalId
operator|::
name|accountId
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
control|)
block|{
name|accountCache
operator|.
name|evict
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|FunctionalInterface
DECL|interface|MyConsumer
specifier|private
specifier|static
interface|interface
name|MyConsumer
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|accept (T t)
name|void
name|accept
parameter_list|(
name|T
name|t
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
function_decl|;
block|}
annotation|@
name|AutoValue
DECL|class|OpenRepo
specifier|abstract
specifier|static
class|class
name|OpenRepo
block|{
DECL|method|create (Repository repo, RevWalk rw, ObjectInserter ins, NoteMap noteMap)
specifier|static
name|OpenRepo
name|create
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|ObjectInserter
name|ins
parameter_list|,
name|NoteMap
name|noteMap
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_ExternalIdsUpdate_OpenRepo
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|ins
argument_list|,
name|noteMap
argument_list|)
return|;
block|}
DECL|method|repo ()
specifier|abstract
name|Repository
name|repo
parameter_list|()
function_decl|;
DECL|method|rw ()
specifier|abstract
name|RevWalk
name|rw
parameter_list|()
function_decl|;
DECL|method|ins ()
specifier|abstract
name|ObjectInserter
name|ins
parameter_list|()
function_decl|;
DECL|method|noteMap ()
specifier|abstract
name|NoteMap
name|noteMap
parameter_list|()
function_decl|;
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|AutoValue
DECL|class|RefsMetaExternalIdsUpdate
specifier|public
specifier|abstract
specifier|static
class|class
name|RefsMetaExternalIdsUpdate
block|{
DECL|method|create (ObjectId oldRev, ObjectId newRev)
specifier|static
name|RefsMetaExternalIdsUpdate
name|create
parameter_list|(
name|ObjectId
name|oldRev
parameter_list|,
name|ObjectId
name|newRev
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_ExternalIdsUpdate_RefsMetaExternalIdsUpdate
argument_list|(
name|oldRev
argument_list|,
name|newRev
argument_list|)
return|;
block|}
DECL|method|oldRev ()
specifier|abstract
name|ObjectId
name|oldRev
parameter_list|()
function_decl|;
DECL|method|newRev ()
specifier|abstract
name|ObjectId
name|newRev
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

