begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|ReferenceQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|RulesCache
specifier|public
class|class
name|RulesCache
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RulesCache
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|classLoaderCache
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectId
argument_list|,
name|LoaderRef
argument_list|>
name|classLoaderCache
init|=
operator|new
name|HashMap
argument_list|<
name|ObjectId
argument_list|,
name|LoaderRef
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|DEAD
specifier|private
specifier|final
name|ReferenceQueue
argument_list|<
name|ClassLoader
argument_list|>
name|DEAD
init|=
operator|new
name|ReferenceQueue
argument_list|<
name|ClassLoader
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|cacheDir
specifier|private
specifier|final
name|File
name|cacheDir
decl_stmt|;
DECL|field|rulesDir
specifier|private
specifier|final
name|File
name|rulesDir
decl_stmt|;
DECL|class|LoaderRef
specifier|private
specifier|final
class|class
name|LoaderRef
extends|extends
name|WeakReference
argument_list|<
name|ClassLoader
argument_list|>
block|{
DECL|field|key
specifier|final
name|ObjectId
name|key
decl_stmt|;
DECL|method|LoaderRef (ObjectId key, ClassLoader loader)
name|LoaderRef
parameter_list|(
name|ObjectId
name|key
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
name|super
argument_list|(
name|loader
argument_list|,
name|DEAD
argument_list|)
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
block|}
annotation|@
name|Inject
DECL|method|RulesCache (@erritServerConfig Config config, SitePaths site)
specifier|protected
name|RulesCache
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|config
parameter_list|,
name|SitePaths
name|site
parameter_list|)
block|{
name|cacheDir
operator|=
name|site
operator|.
name|resolve
argument_list|(
name|config
operator|.
name|getString
argument_list|(
literal|"cache"
argument_list|,
literal|null
argument_list|,
literal|"directory"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cacheDir
operator|!=
literal|null
condition|)
block|{
name|rulesDir
operator|=
operator|new
name|File
argument_list|(
name|cacheDir
argument_list|,
literal|"rules"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rulesDir
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/** @return URLClassLoader with precompiled rules jar from rules.pl if it exists,    *  null otherwise    */
DECL|method|getClassLoader (ObjectId rulesId)
specifier|public
specifier|synchronized
name|ClassLoader
name|getClassLoader
parameter_list|(
name|ObjectId
name|rulesId
parameter_list|)
block|{
if|if
condition|(
name|rulesId
operator|==
literal|null
operator|||
name|rulesDir
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Reference
argument_list|<
name|?
extends|extends
name|ClassLoader
argument_list|>
name|ref
init|=
name|classLoaderCache
operator|.
name|get
argument_list|(
name|rulesId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|ClassLoader
name|cl
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|cl
operator|!=
literal|null
condition|)
block|{
return|return
name|cl
return|;
block|}
name|classLoaderCache
operator|.
name|remove
argument_list|(
name|rulesId
argument_list|)
expr_stmt|;
name|ref
operator|.
name|enqueue
argument_list|()
expr_stmt|;
block|}
name|cleanCache
argument_list|()
expr_stmt|;
comment|//read jar from (site)/cache/rules
comment|//the included jar file should be in format:
comment|//rules-(rules.pl's sha1).jar
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
name|rulesDir
argument_list|,
literal|"rules-"
operator|+
name|rulesId
operator|.
name|getName
argument_list|()
operator|+
literal|".jar"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|jarFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ClassLoader
name|defaultLoader
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|URL
name|url
decl_stmt|;
try|try
block|{
name|url
operator|=
name|jarFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Path to rules jar is broken"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ClassLoader
name|urlLoader
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url
block|}
argument_list|,
name|defaultLoader
argument_list|)
decl_stmt|;
name|LoaderRef
name|lRef
init|=
operator|new
name|LoaderRef
argument_list|(
name|rulesId
argument_list|,
name|urlLoader
argument_list|)
decl_stmt|;
name|classLoaderCache
operator|.
name|put
argument_list|(
name|rulesId
argument_list|,
name|lRef
argument_list|)
expr_stmt|;
return|return
name|urlLoader
return|;
block|}
DECL|method|cleanCache ()
specifier|private
name|void
name|cleanCache
parameter_list|()
block|{
name|Reference
argument_list|<
name|?
extends|extends
name|ClassLoader
argument_list|>
name|ref
decl_stmt|;
while|while
condition|(
operator|(
name|ref
operator|=
name|DEAD
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|ObjectId
name|key
init|=
operator|(
operator|(
name|LoaderRef
operator|)
name|ref
operator|)
operator|.
name|key
decl_stmt|;
if|if
condition|(
name|classLoaderCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
name|ref
condition|)
block|{
name|classLoaderCache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

