begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_LABEL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_PATCH_SET
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|GERRIT_PLACEHOLDER_HOST
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimaps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
operator|.
name|LabelId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|VersionedMetaData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|LabelVote
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** View of a single {@link Change} based on the log of its notes branch. */
end_comment

begin_class
DECL|class|ChangeNotes
specifier|public
class|class
name|ChangeNotes
extends|extends
name|VersionedMetaData
block|{
DECL|field|PSA_BY_TIME
specifier|private
specifier|static
specifier|final
name|Ordering
argument_list|<
name|PatchSetApproval
argument_list|>
name|PSA_BY_TIME
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|onResultOf
argument_list|(
operator|new
name|Function
argument_list|<
name|PatchSetApproval
argument_list|,
name|Timestamp
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Timestamp
name|apply
parameter_list|(
name|PatchSetApproval
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getGranted
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
annotation|@
name|Singleton
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
annotation|@
name|Inject
DECL|method|Factory (GitRepositoryManager repoManager)
name|Factory
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
block|}
comment|// TODO(dborowitz): Wrap fewer exceptions if/when we kill gwtorm.
DECL|method|load (Change change)
specifier|public
name|ChangeNotes
name|load
parameter_list|(
name|Change
name|change
parameter_list|)
throws|throws
name|OrmException
block|{
name|Repository
name|repo
decl_stmt|;
try|try
block|{
name|repo
operator|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
return|return
operator|new
name|ChangeNotes
argument_list|(
name|repo
argument_list|,
name|change
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|field|change
specifier|private
specifier|final
name|Change
name|change
decl_stmt|;
DECL|field|approvals
specifier|private
name|ListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|approvals
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|ChangeNotes (Repository repo, Change change)
name|ChangeNotes
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|Change
name|change
parameter_list|)
throws|throws
name|ConfigInvalidException
throws|,
name|IOException
block|{
name|this
operator|.
name|change
operator|=
name|change
expr_stmt|;
name|load
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
DECL|method|getApprovals ()
specifier|public
name|ListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|getApprovals
parameter_list|()
block|{
return|return
name|Multimaps
operator|.
name|unmodifiableListMultimap
argument_list|(
name|approvals
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRefName ()
specifier|protected
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|ChangeNoteUtil
operator|.
name|changeRefName
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ObjectId
name|rev
init|=
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|rev
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|approvals
operator|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
name|RevWalk
name|walk
init|=
operator|new
name|RevWalk
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|walk
operator|.
name|markStart
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|rev
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RevCommit
name|commit
range|:
name|walk
control|)
block|{
name|parse
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Collection
argument_list|<
name|PatchSetApproval
argument_list|>
name|v
range|:
name|approvals
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
operator|(
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
operator|)
name|v
argument_list|,
name|PSA_BY_TIME
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parse (RevCommit commit)
specifier|private
name|void
name|parse
parameter_list|(
name|RevCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|parsePatchSetId
argument_list|(
name|commit
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|parseIdent
argument_list|(
name|commit
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|psas
init|=
name|approvals
operator|.
name|get
argument_list|(
name|psId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PatchSetApproval
argument_list|>
name|curr
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|psas
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|psas
control|)
block|{
if|if
condition|(
name|psa
operator|.
name|getAccountId
argument_list|()
operator|.
name|equals
argument_list|(
name|accountId
argument_list|)
condition|)
block|{
name|curr
operator|.
name|put
argument_list|(
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|,
name|psa
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|line
range|:
name|commit
operator|.
name|getFooterLines
argument_list|(
name|FOOTER_LABEL
argument_list|)
control|)
block|{
name|PatchSetApproval
name|psa
init|=
name|parseApproval
argument_list|(
name|psId
argument_list|,
name|accountId
argument_list|,
name|commit
argument_list|,
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|curr
operator|.
name|containsKey
argument_list|(
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
name|curr
operator|.
name|put
argument_list|(
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|,
name|psa
argument_list|)
expr_stmt|;
name|psas
operator|.
name|add
argument_list|(
name|psa
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parsePatchSetId (RevCommit commit)
specifier|private
name|PatchSet
operator|.
name|Id
name|parsePatchSetId
parameter_list|(
name|RevCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|psIdLines
init|=
name|commit
operator|.
name|getFooterLines
argument_list|(
name|FOOTER_PATCH_SET
argument_list|)
decl_stmt|;
if|if
condition|(
name|psIdLines
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
name|parseException
argument_list|(
literal|"missing or multiple %s: %s"
argument_list|,
name|FOOTER_PATCH_SET
argument_list|,
name|psIdLines
argument_list|)
throw|;
block|}
name|Integer
name|psId
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|psIdLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|psId
operator|==
literal|null
condition|)
block|{
throw|throw
name|parseException
argument_list|(
literal|"invalid %s: %s"
argument_list|,
name|FOOTER_PATCH_SET
argument_list|,
name|psIdLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
throw|;
block|}
return|return
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|psId
argument_list|)
return|;
block|}
DECL|method|parseApproval (PatchSet.Id psId, Account.Id accountId, RevCommit commit, String line)
specifier|private
name|PatchSetApproval
name|parseApproval
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|RevCommit
name|commit
parameter_list|,
name|String
name|line
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
try|try
block|{
name|LabelVote
name|l
init|=
name|LabelVote
operator|.
name|parseWithEquals
argument_list|(
name|line
argument_list|)
decl_stmt|;
return|return
operator|new
name|PatchSetApproval
argument_list|(
operator|new
name|PatchSetApproval
operator|.
name|Key
argument_list|(
name|psId
argument_list|,
name|parseIdent
argument_list|(
name|commit
argument_list|)
argument_list|,
operator|new
name|LabelId
argument_list|(
name|l
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|l
operator|.
name|getValue
argument_list|()
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|commit
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|ConfigInvalidException
name|pe
init|=
name|parseException
argument_list|(
literal|"invalid %s: %s"
argument_list|,
name|FOOTER_LABEL
argument_list|,
name|line
argument_list|)
decl_stmt|;
name|pe
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|pe
throw|;
block|}
block|}
DECL|method|parseIdent (RevCommit commit)
specifier|private
name|Account
operator|.
name|Id
name|parseIdent
parameter_list|(
name|RevCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|String
name|email
init|=
name|commit
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
decl_stmt|;
name|int
name|at
init|=
name|email
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|>=
literal|0
condition|)
block|{
name|String
name|host
init|=
name|email
operator|.
name|substring
argument_list|(
name|at
operator|+
literal|1
argument_list|,
name|email
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|id
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|email
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|at
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
name|host
operator|.
name|equals
argument_list|(
name|GERRIT_PLACEHOLDER_HOST
argument_list|)
condition|)
block|{
return|return
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
throw|throw
name|parseException
argument_list|(
literal|"invalid committer, expected<id>@%s: %s"
argument_list|,
name|GERRIT_PLACEHOLDER_HOST
argument_list|,
name|email
argument_list|)
throw|;
block|}
DECL|method|parseException (String fmt, Object... args)
specifier|private
name|ConfigInvalidException
name|parseException
parameter_list|(
name|String
name|fmt
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
operator|new
name|ConfigInvalidException
argument_list|(
literal|"Change "
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|": "
operator|+
name|String
operator|.
name|format
argument_list|(
name|fmt
argument_list|,
name|args
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|onSave (CommitBuilder commit)
specifier|protected
name|void
name|onSave
parameter_list|(
name|CommitBuilder
name|commit
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" is read-only"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

