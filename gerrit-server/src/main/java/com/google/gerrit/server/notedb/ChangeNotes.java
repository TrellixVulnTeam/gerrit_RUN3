begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimaps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AsyncFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CheckedFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|DisabledChangesReviewDbWrapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_comment
comment|/** View of a single {@link Change} based on the log of its notes branch. */
end_comment

begin_class
DECL|class|ChangeNotes
specifier|public
class|class
name|ChangeNotes
extends|extends
name|AbstractChangeNotes
argument_list|<
name|ChangeNotes
argument_list|>
block|{
DECL|field|PSA_BY_TIME
specifier|static
specifier|final
name|Ordering
argument_list|<
name|PatchSetApproval
argument_list|>
name|PSA_BY_TIME
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|onResultOf
argument_list|(
operator|new
name|Function
argument_list|<
name|PatchSetApproval
argument_list|,
name|Timestamp
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Timestamp
name|apply
parameter_list|(
name|PatchSetApproval
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getGranted
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|field|MESSAGE_BY_TIME
specifier|public
specifier|static
specifier|final
name|Ordering
argument_list|<
name|ChangeMessage
argument_list|>
name|MESSAGE_BY_TIME
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|onResultOf
argument_list|(
operator|new
name|Function
argument_list|<
name|ChangeMessage
argument_list|,
name|Timestamp
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Timestamp
name|apply
parameter_list|(
name|ChangeMessage
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getWrittenOn
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|method|parseException (Change.Id changeId, String fmt, Object... args)
specifier|public
specifier|static
name|ConfigInvalidException
name|parseException
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|String
name|fmt
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
operator|new
name|ConfigInvalidException
argument_list|(
literal|"Change "
operator|+
name|changeId
operator|+
literal|": "
operator|+
name|String
operator|.
name|format
argument_list|(
name|fmt
argument_list|,
name|args
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Singleton
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Factory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|migration
specifier|private
specifier|final
name|NotesMigration
name|migration
decl_stmt|;
DECL|field|allUsers
specifier|private
specifier|final
name|AllUsersName
name|allUsers
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|noteUtil
specifier|private
specifier|final
name|ChangeNoteUtil
name|noteUtil
decl_stmt|;
annotation|@
name|VisibleForTesting
annotation|@
name|Inject
DECL|method|Factory (GitRepositoryManager repoManager, NotesMigration migration, AllUsersName allUsers, Provider<InternalChangeQuery> queryProvider, ProjectCache projectCache, ChangeNoteUtil noteUtil)
specifier|public
name|Factory
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|NotesMigration
name|migration
parameter_list|,
name|AllUsersName
name|allUsers
parameter_list|,
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|ChangeNoteUtil
name|noteUtil
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|migration
operator|=
name|migration
expr_stmt|;
name|this
operator|.
name|allUsers
operator|=
name|allUsers
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|noteUtil
operator|=
name|noteUtil
expr_stmt|;
block|}
DECL|method|createChecked (ReviewDb db, Change c)
specifier|public
name|ChangeNotes
name|createChecked
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
name|c
parameter_list|)
throws|throws
name|OrmException
throws|,
name|NoSuchChangeException
block|{
name|ChangeNotes
name|notes
init|=
name|create
argument_list|(
name|db
argument_list|,
name|c
operator|.
name|getProject
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|notes
operator|.
name|getChange
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|notes
return|;
block|}
DECL|method|createChecked (ReviewDb db, Project.NameKey project, Change.Id changeId)
specifier|public
name|ChangeNotes
name|createChecked
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
throws|,
name|NoSuchChangeException
block|{
name|ChangeNotes
name|notes
init|=
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|notes
operator|.
name|getChange
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
return|return
name|notes
return|;
block|}
DECL|method|createChecked (Change.Id changeId)
specifier|public
name|ChangeNotes
name|createChecked
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
throws|,
name|NoSuchChangeException
block|{
name|InternalChangeQuery
name|query
init|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|noFields
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changes
init|=
name|query
operator|.
name|byLegacyChangeId
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|changes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
if|if
condition|(
name|changes
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Multiple changes found for %d"
argument_list|,
name|changeId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
return|return
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|notes
argument_list|()
return|;
block|}
DECL|method|create (ReviewDb db, Project.NameKey project, Change.Id changeId)
specifier|public
name|ChangeNotes
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|change
init|=
name|unwrap
argument_list|(
name|db
argument_list|)
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
operator|.
name|equals
argument_list|(
name|project
argument_list|)
argument_list|,
literal|"passed project %s when creating ChangeNotes for %s, but actual"
operator|+
literal|" project is %s"
argument_list|,
name|project
argument_list|,
name|changeId
argument_list|,
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: Throw NoSuchChangeException when the change is not found in the
comment|// database
return|return
operator|new
name|ChangeNotes
argument_list|(
name|repoManager
argument_list|,
name|migration
argument_list|,
name|allUsers
argument_list|,
name|noteUtil
argument_list|,
name|project
argument_list|,
name|change
argument_list|)
operator|.
name|load
argument_list|()
return|;
block|}
comment|/**      * Create change notes for a change that was loaded from index. This method      * should only be used when database access is harmful and potentially stale      * data from the index is acceptable.      *      * @param change change loaded from secondary index      * @return change notes      */
DECL|method|createFromIndexedChange (Change change)
specifier|public
name|ChangeNotes
name|createFromIndexedChange
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
return|return
operator|new
name|ChangeNotes
argument_list|(
name|repoManager
argument_list|,
name|migration
argument_list|,
name|allUsers
argument_list|,
name|noteUtil
argument_list|,
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|change
argument_list|)
return|;
block|}
DECL|method|createForNew (Change change)
specifier|public
name|ChangeNotes
name|createForNew
parameter_list|(
name|Change
name|change
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
operator|new
name|ChangeNotes
argument_list|(
name|repoManager
argument_list|,
name|migration
argument_list|,
name|allUsers
argument_list|,
name|noteUtil
argument_list|,
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|change
argument_list|)
operator|.
name|load
argument_list|()
return|;
block|}
comment|// TODO(dborowitz): Remove when deleting index schemas<27.
DECL|method|createFromIdOnlyWhenNoteDbDisabled ( ReviewDb db, Change.Id changeId)
specifier|public
name|ChangeNotes
name|createFromIdOnlyWhenNoteDbDisabled
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
block|{
name|checkState
argument_list|(
operator|!
name|migration
operator|.
name|readChanges
argument_list|()
argument_list|,
literal|"do not call"
operator|+
literal|" createFromIdOnlyWhenNoteDbDisabled when NoteDb is enabled"
argument_list|)
expr_stmt|;
name|Change
name|change
init|=
name|unwrap
argument_list|(
name|db
argument_list|)
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
return|return
operator|new
name|ChangeNotes
argument_list|(
name|repoManager
argument_list|,
name|migration
argument_list|,
name|allUsers
argument_list|,
name|noteUtil
argument_list|,
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|change
argument_list|)
operator|.
name|load
argument_list|()
return|;
block|}
comment|// TODO(ekempin): Remove when database backend is deleted
comment|/**      * Instantiate ChangeNotes for a change that has been loaded by a batch read      * from the database.      */
DECL|method|createFromChangeOnlyWhenNoteDbDisabled (Change change)
specifier|private
name|ChangeNotes
name|createFromChangeOnlyWhenNoteDbDisabled
parameter_list|(
name|Change
name|change
parameter_list|)
throws|throws
name|OrmException
block|{
name|checkState
argument_list|(
operator|!
name|migration
operator|.
name|readChanges
argument_list|()
argument_list|,
literal|"do not call"
operator|+
literal|" createFromChangeWhenNoteDbDisabled when NoteDb is enabled"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ChangeNotes
argument_list|(
name|repoManager
argument_list|,
name|migration
argument_list|,
name|allUsers
argument_list|,
name|noteUtil
argument_list|,
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|change
argument_list|)
operator|.
name|load
argument_list|()
return|;
block|}
DECL|method|createAsync ( final ListeningExecutorService executorService, final ReviewDb db, final Project.NameKey project, final Change.Id changeId)
specifier|public
name|CheckedFuture
argument_list|<
name|ChangeNotes
argument_list|,
name|OrmException
argument_list|>
name|createAsync
parameter_list|(
specifier|final
name|ListeningExecutorService
name|executorService
parameter_list|,
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
specifier|final
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
block|{
return|return
name|Futures
operator|.
name|makeChecked
argument_list|(
name|Futures
operator|.
name|transformAsync
argument_list|(
name|unwrap
argument_list|(
name|db
argument_list|)
operator|.
name|changes
argument_list|()
operator|.
name|getAsync
argument_list|(
name|changeId
argument_list|)
argument_list|,
operator|new
name|AsyncFunction
argument_list|<
name|Change
argument_list|,
name|ChangeNotes
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|ChangeNotes
argument_list|>
name|apply
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|)
block|{
return|return
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|ChangeNotes
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ChangeNotes
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|checkArgument
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
operator|.
name|equals
argument_list|(
name|project
argument_list|)
argument_list|,
literal|"passed project %s when creating ChangeNotes for %s,"
operator|+
literal|" but actual project is %s"
argument_list|,
name|project
argument_list|,
name|changeId
argument_list|,
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|ChangeNotes
argument_list|(
name|repoManager
argument_list|,
name|migration
argument_list|,
name|allUsers
argument_list|,
name|noteUtil
argument_list|,
name|project
argument_list|,
name|change
argument_list|)
operator|.
name|load
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|Exception
argument_list|,
name|OrmException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OrmException
name|apply
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|OrmException
condition|)
block|{
return|return
operator|(
name|OrmException
operator|)
name|e
return|;
block|}
return|return
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|create (ReviewDb db, Collection<Change.Id> changeIds)
specifier|public
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Collection
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|changeIds
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|notes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|migration
operator|.
name|enabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Change
operator|.
name|Id
name|changeId
range|:
name|changeIds
control|)
block|{
try|try
block|{
name|notes
operator|.
name|add
argument_list|(
name|createChecked
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchChangeException
name|e
parameter_list|)
block|{
comment|// Ignore missing changes to match Access#get(Iterable) behavior.
block|}
block|}
return|return
name|notes
return|;
block|}
for|for
control|(
name|Change
name|c
range|:
name|unwrap
argument_list|(
name|db
argument_list|)
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeIds
argument_list|)
control|)
block|{
name|notes
operator|.
name|add
argument_list|(
name|createFromChangeOnlyWhenNoteDbDisabled
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|notes
return|;
block|}
DECL|method|create (ReviewDb db, Project.NameKey project, Collection<Change.Id> changeIds, Predicate<ChangeNotes> predicate)
specifier|public
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Collection
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|changeIds
parameter_list|,
name|Predicate
argument_list|<
name|ChangeNotes
argument_list|>
name|predicate
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|notes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|migration
operator|.
name|enabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Change
operator|.
name|Id
name|cid
range|:
name|changeIds
control|)
block|{
name|ChangeNotes
name|cn
init|=
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|cid
argument_list|)
decl_stmt|;
if|if
condition|(
name|cn
operator|.
name|getChange
argument_list|()
operator|!=
literal|null
operator|&&
name|predicate
operator|.
name|apply
argument_list|(
name|cn
argument_list|)
condition|)
block|{
name|notes
operator|.
name|add
argument_list|(
name|cn
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|notes
return|;
block|}
for|for
control|(
name|Change
name|c
range|:
name|unwrap
argument_list|(
name|db
argument_list|)
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeIds
argument_list|)
control|)
block|{
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|project
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
condition|)
block|{
name|ChangeNotes
name|cn
init|=
name|createFromChangeOnlyWhenNoteDbDisabled
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|apply
argument_list|(
name|cn
argument_list|)
condition|)
block|{
name|notes
operator|.
name|add
argument_list|(
name|cn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|notes
return|;
block|}
DECL|method|create (ReviewDb db, Predicate<ChangeNotes> predicate)
specifier|public
name|ListMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|ChangeNotes
argument_list|>
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Predicate
argument_list|<
name|ChangeNotes
argument_list|>
name|predicate
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
block|{
name|ListMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|ChangeNotes
argument_list|>
name|m
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|migration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
for|for
control|(
name|Project
operator|.
name|NameKey
name|project
range|:
name|projectCache
operator|.
name|all
argument_list|()
control|)
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|changes
init|=
name|scanNoteDb
argument_list|(
name|repo
argument_list|,
name|db
argument_list|,
name|project
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeNotes
name|cn
range|:
name|changes
control|)
block|{
if|if
condition|(
name|predicate
operator|.
name|apply
argument_list|(
name|cn
argument_list|)
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
name|project
argument_list|,
name|cn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|Change
name|change
range|:
name|unwrap
argument_list|(
name|db
argument_list|)
operator|.
name|changes
argument_list|()
operator|.
name|all
argument_list|()
control|)
block|{
name|ChangeNotes
name|notes
init|=
name|createFromChangeOnlyWhenNoteDbDisabled
argument_list|(
name|change
argument_list|)
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|apply
argument_list|(
name|notes
argument_list|)
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|notes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|m
argument_list|)
return|;
block|}
DECL|method|scan (Repository repo, ReviewDb db, Project.NameKey project)
specifier|public
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|scan
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|ReviewDb
name|db
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|migration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
return|return
name|scanDb
argument_list|(
name|repo
argument_list|,
name|db
argument_list|)
return|;
block|}
return|return
name|scanNoteDb
argument_list|(
name|repo
argument_list|,
name|db
argument_list|,
name|project
argument_list|)
return|;
block|}
DECL|method|scanDb (Repository repo, ReviewDb db)
specifier|private
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|scanDb
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|ids
init|=
name|scan
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|notes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ids
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// A batch size of N may overload get(Iterable), so use something smaller,
comment|// but still>1.
for|for
control|(
name|List
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|batch
range|:
name|Iterables
operator|.
name|partition
argument_list|(
name|ids
argument_list|,
literal|30
argument_list|)
control|)
block|{
for|for
control|(
name|Change
name|change
range|:
name|unwrap
argument_list|(
name|db
argument_list|)
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|batch
argument_list|)
control|)
block|{
name|notes
operator|.
name|add
argument_list|(
name|createFromChangeOnlyWhenNoteDbDisabled
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|notes
return|;
block|}
DECL|method|scanNoteDb (Repository repo, ReviewDb db, Project.NameKey project)
specifier|private
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|scanNoteDb
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|ReviewDb
name|db
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|ids
init|=
name|scan
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|changeNotes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ids
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Change
operator|.
name|Id
name|id
range|:
name|ids
control|)
block|{
name|changeNotes
operator|.
name|add
argument_list|(
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|changeNotes
return|;
block|}
DECL|method|scan (Repository repo)
specifier|public
specifier|static
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|scan
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|refs
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|RefNames
operator|.
name|REFS_CHANGES
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|refs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Ref
name|r
range|:
name|refs
operator|.
name|values
argument_list|()
control|)
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|Change
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ids
return|;
block|}
DECL|method|unwrap (ReviewDb db)
specifier|private
specifier|static
name|ReviewDb
name|unwrap
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
block|{
if|if
condition|(
name|db
operator|instanceof
name|DisabledChangesReviewDbWrapper
condition|)
block|{
name|db
operator|=
operator|(
operator|(
name|DisabledChangesReviewDbWrapper
operator|)
name|db
operator|)
operator|.
name|unsafeGetDelegate
argument_list|()
expr_stmt|;
block|}
return|return
name|db
return|;
block|}
block|}
DECL|field|noteUtil
specifier|private
specifier|final
name|ChangeNoteUtil
name|noteUtil
decl_stmt|;
DECL|field|project
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|project
decl_stmt|;
DECL|field|change
specifier|private
specifier|final
name|Change
name|change
decl_stmt|;
DECL|field|patchSets
specifier|private
name|ImmutableSortedMap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|patchSets
decl_stmt|;
DECL|field|approvals
specifier|private
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|approvals
decl_stmt|;
DECL|field|reviewers
specifier|private
name|ImmutableSetMultimap
argument_list|<
name|ReviewerStateInternal
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
decl_stmt|;
DECL|field|allPastReviewers
specifier|private
name|ImmutableList
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|allPastReviewers
decl_stmt|;
DECL|field|submitRecords
specifier|private
name|ImmutableList
argument_list|<
name|SubmitRecord
argument_list|>
name|submitRecords
decl_stmt|;
DECL|field|allChangeMessages
specifier|private
name|ImmutableList
argument_list|<
name|ChangeMessage
argument_list|>
name|allChangeMessages
decl_stmt|;
DECL|field|changeMessagesByPatchSet
specifier|private
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|ChangeMessage
argument_list|>
name|changeMessagesByPatchSet
decl_stmt|;
DECL|field|comments
specifier|private
name|ImmutableListMultimap
argument_list|<
name|RevId
argument_list|,
name|PatchLineComment
argument_list|>
name|comments
decl_stmt|;
DECL|field|hashtags
specifier|private
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|hashtags
decl_stmt|;
comment|// Parsed note map state, used by ChangeUpdate to make in-place editing of
comment|// notes easier.
DECL|field|revisionNoteMap
name|RevisionNoteMap
name|revisionNoteMap
decl_stmt|;
DECL|field|allUsers
specifier|private
specifier|final
name|AllUsersName
name|allUsers
decl_stmt|;
DECL|field|draftCommentNotes
specifier|private
name|DraftCommentNotes
name|draftCommentNotes
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|ChangeNotes (GitRepositoryManager repoManager, NotesMigration migration, AllUsersName allUsers, ChangeNoteUtil noteUtil, Project.NameKey project, Change change)
specifier|public
name|ChangeNotes
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|NotesMigration
name|migration
parameter_list|,
name|AllUsersName
name|allUsers
parameter_list|,
name|ChangeNoteUtil
name|noteUtil
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
name|change
parameter_list|)
block|{
name|super
argument_list|(
name|repoManager
argument_list|,
name|migration
argument_list|,
name|change
operator|!=
literal|null
condition|?
name|change
operator|.
name|getId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|allUsers
operator|=
name|allUsers
expr_stmt|;
name|this
operator|.
name|noteUtil
operator|=
name|noteUtil
expr_stmt|;
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
name|this
operator|.
name|change
operator|=
name|change
operator|!=
literal|null
condition|?
operator|new
name|Change
argument_list|(
name|change
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
DECL|method|getChange ()
specifier|public
name|Change
name|getChange
parameter_list|()
block|{
return|return
name|change
return|;
block|}
DECL|method|getPatchSets ()
specifier|public
name|ImmutableMap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|getPatchSets
parameter_list|()
block|{
return|return
name|patchSets
return|;
block|}
DECL|method|getApprovals ()
specifier|public
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|getApprovals
parameter_list|()
block|{
return|return
name|approvals
return|;
block|}
DECL|method|getReviewers ()
specifier|public
name|ImmutableSetMultimap
argument_list|<
name|ReviewerStateInternal
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|getReviewers
parameter_list|()
block|{
return|return
name|reviewers
return|;
block|}
comment|/**    *    * @return a ImmutableSet of all hashtags for this change sorted in alphabetical order.    */
DECL|method|getHashtags ()
specifier|public
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|getHashtags
parameter_list|()
block|{
return|return
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|hashtags
argument_list|)
return|;
block|}
comment|/**    * @return a list of all users who have ever been a reviewer on this change.    */
DECL|method|getAllPastReviewers ()
specifier|public
name|ImmutableList
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|getAllPastReviewers
parameter_list|()
block|{
return|return
name|allPastReviewers
return|;
block|}
comment|/**    * @return submit records stored during the most recent submit; only for    *     changes that were actually submitted.    */
DECL|method|getSubmitRecords ()
specifier|public
name|ImmutableList
argument_list|<
name|SubmitRecord
argument_list|>
name|getSubmitRecords
parameter_list|()
block|{
return|return
name|submitRecords
return|;
block|}
comment|/** @return all change messages, in chronological order, oldest first. */
DECL|method|getChangeMessages ()
specifier|public
name|ImmutableList
argument_list|<
name|ChangeMessage
argument_list|>
name|getChangeMessages
parameter_list|()
block|{
return|return
name|allChangeMessages
return|;
block|}
comment|/**    * @return change messages by patch set, in chronological order, oldest    *     first.    */
specifier|public
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|ChangeMessage
argument_list|>
DECL|method|getChangeMessagesByPatchSet ()
name|getChangeMessagesByPatchSet
parameter_list|()
block|{
return|return
name|changeMessagesByPatchSet
return|;
block|}
comment|/** @return inline comments on each revision. */
DECL|method|getComments ()
specifier|public
name|ImmutableListMultimap
argument_list|<
name|RevId
argument_list|,
name|PatchLineComment
argument_list|>
name|getComments
parameter_list|()
block|{
return|return
name|comments
return|;
block|}
DECL|method|getDraftComments ( Account.Id author)
specifier|public
name|ImmutableListMultimap
argument_list|<
name|RevId
argument_list|,
name|PatchLineComment
argument_list|>
name|getDraftComments
parameter_list|(
name|Account
operator|.
name|Id
name|author
parameter_list|)
throws|throws
name|OrmException
block|{
name|loadDraftComments
argument_list|(
name|author
argument_list|)
expr_stmt|;
specifier|final
name|Multimap
argument_list|<
name|RevId
argument_list|,
name|PatchLineComment
argument_list|>
name|published
init|=
name|comments
decl_stmt|;
comment|// Filter out any draft comments that also exist in the published map, in
comment|// case the update to All-Users to delete them during the publish operation
comment|// failed.
name|Multimap
argument_list|<
name|RevId
argument_list|,
name|PatchLineComment
argument_list|>
name|filtered
init|=
name|Multimaps
operator|.
name|filterEntries
argument_list|(
name|draftCommentNotes
operator|.
name|getComments
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|RevId
argument_list|,
name|PatchLineComment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|RevId
argument_list|,
name|PatchLineComment
argument_list|>
name|in
parameter_list|)
block|{
for|for
control|(
name|PatchLineComment
name|c
range|:
name|published
operator|.
name|get
argument_list|(
name|in
operator|.
name|getKey
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|in
operator|.
name|getValue
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|filtered
argument_list|)
return|;
block|}
comment|/**    * If draft comments have already been loaded for this author, then they will    * not be reloaded. However, this method will load the comments if no draft    * comments have been loaded or if the caller would like the drafts for    * another author.    */
DECL|method|loadDraftComments (Account.Id author)
specifier|private
name|void
name|loadDraftComments
parameter_list|(
name|Account
operator|.
name|Id
name|author
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|draftCommentNotes
operator|==
literal|null
operator|||
operator|!
name|author
operator|.
name|equals
argument_list|(
name|draftCommentNotes
operator|.
name|getAuthor
argument_list|()
argument_list|)
condition|)
block|{
name|draftCommentNotes
operator|=
operator|new
name|DraftCommentNotes
argument_list|(
name|repoManager
argument_list|,
name|migration
argument_list|,
name|allUsers
argument_list|,
name|noteUtil
argument_list|,
name|getChangeId
argument_list|()
argument_list|,
name|author
argument_list|)
expr_stmt|;
name|draftCommentNotes
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDraftCommentNotes ()
name|DraftCommentNotes
name|getDraftCommentNotes
parameter_list|()
block|{
return|return
name|draftCommentNotes
return|;
block|}
DECL|method|containsComment (PatchLineComment c)
specifier|public
name|boolean
name|containsComment
parameter_list|(
name|PatchLineComment
name|c
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|containsCommentPublished
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|loadDraftComments
argument_list|(
name|c
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|draftCommentNotes
operator|.
name|containsComment
argument_list|(
name|c
argument_list|)
return|;
block|}
DECL|method|containsCommentPublished (PatchLineComment c)
specifier|public
name|boolean
name|containsCommentPublished
parameter_list|(
name|PatchLineComment
name|c
parameter_list|)
block|{
for|for
control|(
name|PatchLineComment
name|l
range|:
name|getComments
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|l
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getRefName ()
specifier|protected
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|ChangeNoteUtil
operator|.
name|changeRefName
argument_list|(
name|getChangeId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getCurrentPatchSet ()
specifier|public
name|PatchSet
name|getCurrentPatchSet
parameter_list|()
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|change
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
return|return
name|checkNotNull
argument_list|(
name|patchSets
operator|.
name|get
argument_list|(
name|psId
argument_list|)
argument_list|,
literal|"missing current patch set %s"
argument_list|,
name|psId
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|onLoad (RevWalk walk)
specifier|protected
name|void
name|onLoad
parameter_list|(
name|RevWalk
name|walk
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ObjectId
name|rev
init|=
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|rev
operator|==
literal|null
condition|)
block|{
name|loadDefaults
argument_list|()
expr_stmt|;
return|return;
block|}
try|try
init|(
name|ChangeNotesParser
name|parser
init|=
operator|new
name|ChangeNotesParser
argument_list|(
name|project
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|rev
argument_list|,
name|walk
argument_list|,
name|repoManager
argument_list|,
name|noteUtil
argument_list|)
init|)
block|{
name|parser
operator|.
name|parseAll
argument_list|()
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|status
operator|!=
literal|null
condition|)
block|{
name|change
operator|.
name|setStatus
argument_list|(
name|parser
operator|.
name|status
argument_list|)
expr_stmt|;
block|}
name|approvals
operator|=
name|parser
operator|.
name|buildApprovals
argument_list|()
expr_stmt|;
name|changeMessagesByPatchSet
operator|=
name|parser
operator|.
name|buildMessagesByPatchSet
argument_list|()
expr_stmt|;
name|allChangeMessages
operator|=
name|parser
operator|.
name|buildAllMessages
argument_list|()
expr_stmt|;
name|comments
operator|=
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|parser
operator|.
name|comments
argument_list|)
expr_stmt|;
name|revisionNoteMap
operator|=
name|parser
operator|.
name|revisionNoteMap
expr_stmt|;
name|change
operator|.
name|setKey
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|parser
operator|.
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
name|change
operator|.
name|setDest
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
name|parser
operator|.
name|branch
argument_list|)
argument_list|)
expr_stmt|;
name|change
operator|.
name|setTopic
argument_list|(
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|parser
operator|.
name|topic
argument_list|)
argument_list|)
expr_stmt|;
name|change
operator|.
name|setCreatedOn
argument_list|(
name|parser
operator|.
name|createdOn
argument_list|)
expr_stmt|;
name|change
operator|.
name|setLastUpdatedOn
argument_list|(
name|parser
operator|.
name|lastUpdatedOn
argument_list|)
expr_stmt|;
name|change
operator|.
name|setOwner
argument_list|(
name|parser
operator|.
name|ownerId
argument_list|)
expr_stmt|;
name|change
operator|.
name|setSubmissionId
argument_list|(
name|parser
operator|.
name|submissionId
argument_list|)
expr_stmt|;
name|patchSets
operator|=
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|parser
operator|.
name|patchSets
argument_list|,
name|ReviewDbUtil
operator|.
name|intKeyOrdering
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|patchSets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
name|parser
operator|.
name|currentPatchSetId
argument_list|,
name|parser
operator|.
name|subject
argument_list|,
name|parser
operator|.
name|originalSubject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO(dborowitz): This should be an error, but for now it's required
comment|// for some tests to pass.
name|change
operator|.
name|clearCurrentPatchSet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parser
operator|.
name|hashtags
operator|!=
literal|null
condition|)
block|{
name|hashtags
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|parser
operator|.
name|hashtags
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hashtags
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
name|ImmutableSetMultimap
operator|.
name|Builder
argument_list|<
name|ReviewerStateInternal
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
init|=
name|ImmutableSetMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ReviewerStateInternal
argument_list|>
name|e
range|:
name|parser
operator|.
name|reviewers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|reviewers
operator|.
name|put
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|reviewers
operator|=
name|reviewers
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|allPastReviewers
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|parser
operator|.
name|allPastReviewers
argument_list|)
expr_stmt|;
name|submitRecords
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|parser
operator|.
name|submitRecords
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|loadDefaults ()
specifier|protected
name|void
name|loadDefaults
parameter_list|()
block|{
name|approvals
operator|=
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
expr_stmt|;
name|reviewers
operator|=
name|ImmutableSetMultimap
operator|.
name|of
argument_list|()
expr_stmt|;
name|submitRecords
operator|=
name|ImmutableList
operator|.
name|of
argument_list|()
expr_stmt|;
name|allChangeMessages
operator|=
name|ImmutableList
operator|.
name|of
argument_list|()
expr_stmt|;
name|changeMessagesByPatchSet
operator|=
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
expr_stmt|;
name|comments
operator|=
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
expr_stmt|;
name|hashtags
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProjectName ()
specifier|public
name|Project
operator|.
name|NameKey
name|getProjectName
parameter_list|()
block|{
return|return
name|project
return|;
block|}
block|}
end_class

end_unit

