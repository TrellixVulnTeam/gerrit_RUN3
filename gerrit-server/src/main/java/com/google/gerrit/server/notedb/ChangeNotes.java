begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_LABEL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_PATCH_SET
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_STATUS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_SUBMITTED_WITH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|GERRIT_PLACEHOLDER_HOST
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Enums
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ComparisonChain
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Tables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
operator|.
name|LabelId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|LabelVote
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|RawParseUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** View of a single {@link Change} based on the log of its notes branch. */
end_comment

begin_class
DECL|class|ChangeNotes
specifier|public
class|class
name|ChangeNotes
extends|extends
name|AbstractChangeNotes
argument_list|<
name|ChangeNotes
argument_list|>
block|{
DECL|field|PSA_BY_TIME
specifier|private
specifier|static
specifier|final
name|Ordering
argument_list|<
name|PatchSetApproval
argument_list|>
name|PSA_BY_TIME
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|onResultOf
argument_list|(
operator|new
name|Function
argument_list|<
name|PatchSetApproval
argument_list|,
name|Timestamp
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Timestamp
name|apply
parameter_list|(
name|PatchSetApproval
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getGranted
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|field|MESSAGE_BY_TIME
specifier|public
specifier|static
specifier|final
name|Ordering
argument_list|<
name|ChangeMessage
argument_list|>
name|MESSAGE_BY_TIME
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|onResultOf
argument_list|(
operator|new
name|Function
argument_list|<
name|ChangeMessage
argument_list|,
name|Timestamp
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Timestamp
name|apply
parameter_list|(
name|ChangeMessage
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getWrittenOn
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|field|PatchLineCommentComparator
specifier|public
specifier|static
name|Comparator
argument_list|<
name|PatchLineComment
argument_list|>
name|PatchLineCommentComparator
init|=
operator|new
name|Comparator
argument_list|<
name|PatchLineComment
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|PatchLineComment
name|c1
parameter_list|,
name|PatchLineComment
name|c2
parameter_list|)
block|{
name|String
name|filename1
init|=
name|c1
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|filename2
init|=
name|c2
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|filename1
argument_list|,
name|filename2
argument_list|)
operator|.
name|compare
argument_list|(
name|c1
operator|.
name|getLine
argument_list|()
argument_list|,
name|c2
operator|.
name|getLine
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|c1
operator|.
name|getWrittenOn
argument_list|()
argument_list|,
name|c2
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|method|parseException (Change.Id changeId, String fmt, Object... args)
specifier|public
specifier|static
name|ConfigInvalidException
name|parseException
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|String
name|fmt
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
operator|new
name|ConfigInvalidException
argument_list|(
literal|"Change "
operator|+
name|changeId
operator|+
literal|": "
operator|+
name|String
operator|.
name|format
argument_list|(
name|fmt
argument_list|,
name|args
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseIdent (PersonIdent ident, Change.Id changeId)
specifier|public
specifier|static
name|Account
operator|.
name|Id
name|parseIdent
parameter_list|(
name|PersonIdent
name|ident
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|String
name|email
init|=
name|ident
operator|.
name|getEmailAddress
argument_list|()
decl_stmt|;
name|int
name|at
init|=
name|email
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|>=
literal|0
condition|)
block|{
name|String
name|host
init|=
name|email
operator|.
name|substring
argument_list|(
name|at
operator|+
literal|1
argument_list|,
name|email
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|id
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|email
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|at
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
name|host
operator|.
name|equals
argument_list|(
name|GERRIT_PLACEHOLDER_HOST
argument_list|)
condition|)
block|{
return|return
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"invalid identity, expected<id>@%s: %s"
argument_list|,
name|GERRIT_PLACEHOLDER_HOST
argument_list|,
name|email
argument_list|)
throw|;
block|}
annotation|@
name|Singleton
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
annotation|@
name|VisibleForTesting
annotation|@
name|Inject
DECL|method|Factory (GitRepositoryManager repoManager)
specifier|public
name|Factory
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
block|}
DECL|method|create (Change change)
specifier|public
name|ChangeNotes
name|create
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
return|return
operator|new
name|ChangeNotes
argument_list|(
name|repoManager
argument_list|,
name|change
argument_list|)
return|;
block|}
block|}
DECL|class|Parser
specifier|private
specifier|static
class|class
name|Parser
block|{
DECL|field|changeId
specifier|private
specifier|final
name|Change
operator|.
name|Id
name|changeId
decl_stmt|;
DECL|field|tip
specifier|private
specifier|final
name|ObjectId
name|tip
decl_stmt|;
DECL|field|walk
specifier|private
specifier|final
name|RevWalk
name|walk
decl_stmt|;
DECL|field|repo
specifier|private
specifier|final
name|Repository
name|repo
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
DECL|field|approvals
name|Table
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|String
argument_list|,
name|Optional
argument_list|<
name|PatchSetApproval
argument_list|>
argument_list|>
argument_list|>
name|approvals
decl_stmt|;
DECL|field|reviewers
specifier|private
specifier|final
name|Map
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ReviewerState
argument_list|>
name|reviewers
decl_stmt|;
DECL|field|submitRecords
specifier|private
specifier|final
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|submitRecords
decl_stmt|;
DECL|field|changeMessages
specifier|private
specifier|final
name|Multimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|ChangeMessage
argument_list|>
name|changeMessages
decl_stmt|;
DECL|field|commentsForPs
specifier|private
specifier|final
name|Multimap
argument_list|<
name|Id
argument_list|,
name|PatchLineComment
argument_list|>
name|commentsForPs
decl_stmt|;
DECL|field|commentsForBase
specifier|private
specifier|final
name|Multimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchLineComment
argument_list|>
name|commentsForBase
decl_stmt|;
DECL|field|commentNoteMap
specifier|private
name|NoteMap
name|commentNoteMap
decl_stmt|;
DECL|field|status
specifier|private
name|Change
operator|.
name|Status
name|status
decl_stmt|;
DECL|method|Parser (Change change, ObjectId tip, RevWalk walk, GitRepositoryManager repoManager)
specifier|private
name|Parser
parameter_list|(
name|Change
name|change
parameter_list|,
name|ObjectId
name|tip
parameter_list|,
name|RevWalk
name|walk
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|)
throws|throws
name|RepositoryNotFoundException
throws|,
name|IOException
block|{
name|this
operator|.
name|changeId
operator|=
name|change
operator|.
name|getId
argument_list|()
expr_stmt|;
name|this
operator|.
name|tip
operator|=
name|tip
expr_stmt|;
name|this
operator|.
name|walk
operator|=
name|walk
expr_stmt|;
name|this
operator|.
name|repo
operator|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|getProjectName
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
name|approvals
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|reviewers
operator|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
expr_stmt|;
name|submitRecords
operator|=
name|Lists
operator|.
name|newArrayListWithExpectedSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|changeMessages
operator|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
name|commentsForPs
operator|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
name|commentsForBase
operator|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
DECL|method|parseAll ()
specifier|private
name|void
name|parseAll
parameter_list|()
throws|throws
name|ConfigInvalidException
throws|,
name|IOException
throws|,
name|ParseException
block|{
name|walk
operator|.
name|markStart
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|tip
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RevCommit
name|commit
range|:
name|walk
control|)
block|{
name|parse
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
name|parseComments
argument_list|()
expr_stmt|;
name|pruneReviewers
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
DECL|method|buildApprovals ()
name|buildApprovals
parameter_list|()
block|{
name|Multimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|result
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|(
name|approvals
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|Table
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|Optional
argument_list|<
name|PatchSetApproval
argument_list|>
argument_list|>
name|curr
range|:
name|approvals
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|Optional
operator|.
name|presentInstances
argument_list|(
name|curr
operator|.
name|values
argument_list|()
argument_list|)
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|psa
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|psa
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Collection
argument_list|<
name|PatchSetApproval
argument_list|>
name|v
range|:
name|result
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
operator|(
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
operator|)
name|v
argument_list|,
name|PSA_BY_TIME
argument_list|)
expr_stmt|;
block|}
return|return
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
return|;
block|}
DECL|method|buildMessages ()
specifier|private
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|ChangeMessage
argument_list|>
name|buildMessages
parameter_list|()
block|{
for|for
control|(
name|Collection
argument_list|<
name|ChangeMessage
argument_list|>
name|v
range|:
name|changeMessages
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
operator|(
name|List
argument_list|<
name|ChangeMessage
argument_list|>
operator|)
name|v
argument_list|,
name|MESSAGE_BY_TIME
argument_list|)
expr_stmt|;
block|}
return|return
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|changeMessages
argument_list|)
return|;
block|}
DECL|method|parse (RevCommit commit)
specifier|private
name|void
name|parse
parameter_list|(
name|RevCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
throws|,
name|IOException
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
name|status
operator|=
name|parseStatus
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|parsePatchSetId
argument_list|(
name|commit
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|parseIdent
argument_list|(
name|commit
argument_list|)
decl_stmt|;
name|parseChangeMessage
argument_list|(
name|psId
argument_list|,
name|accountId
argument_list|,
name|commit
argument_list|)
expr_stmt|;
if|if
condition|(
name|submitRecords
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Only parse the most recent set of submit records; any older ones are
comment|// still there, but not currently used.
name|parseSubmitRecords
argument_list|(
name|commit
operator|.
name|getFooterLines
argument_list|(
name|FOOTER_SUBMITTED_WITH
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|line
range|:
name|commit
operator|.
name|getFooterLines
argument_list|(
name|FOOTER_LABEL
argument_list|)
control|)
block|{
name|parseApproval
argument_list|(
name|psId
argument_list|,
name|accountId
argument_list|,
name|commit
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ReviewerState
name|state
range|:
name|ReviewerState
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|line
range|:
name|commit
operator|.
name|getFooterLines
argument_list|(
name|state
operator|.
name|getFooterKey
argument_list|()
argument_list|)
control|)
block|{
name|parseReviewer
argument_list|(
name|state
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseStatus (RevCommit commit)
specifier|private
name|Change
operator|.
name|Status
name|parseStatus
parameter_list|(
name|RevCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|statusLines
init|=
name|commit
operator|.
name|getFooterLines
argument_list|(
name|FOOTER_STATUS
argument_list|)
decl_stmt|;
if|if
condition|(
name|statusLines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|statusLines
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
name|expectedOneFooter
argument_list|(
name|FOOTER_STATUS
argument_list|,
name|statusLines
argument_list|)
throw|;
block|}
name|Optional
argument_list|<
name|Change
operator|.
name|Status
argument_list|>
name|status
init|=
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|class
argument_list|,
name|statusLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|status
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
name|invalidFooter
argument_list|(
name|FOOTER_STATUS
argument_list|,
name|statusLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|status
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|parsePatchSetId (RevCommit commit)
specifier|private
name|PatchSet
operator|.
name|Id
name|parsePatchSetId
parameter_list|(
name|RevCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|psIdLines
init|=
name|commit
operator|.
name|getFooterLines
argument_list|(
name|FOOTER_PATCH_SET
argument_list|)
decl_stmt|;
if|if
condition|(
name|psIdLines
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
name|expectedOneFooter
argument_list|(
name|FOOTER_PATCH_SET
argument_list|,
name|psIdLines
argument_list|)
throw|;
block|}
name|Integer
name|psId
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|psIdLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|psId
operator|==
literal|null
condition|)
block|{
throw|throw
name|invalidFooter
argument_list|(
name|FOOTER_PATCH_SET
argument_list|,
name|psIdLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
throw|;
block|}
return|return
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|changeId
argument_list|,
name|psId
argument_list|)
return|;
block|}
DECL|method|parseChangeMessage (PatchSet.Id psId, Account.Id accountId, RevCommit commit)
specifier|private
name|void
name|parseChangeMessage
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|RevCommit
name|commit
parameter_list|)
block|{
name|byte
index|[]
name|raw
init|=
name|commit
operator|.
name|getRawBuffer
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|raw
operator|.
name|length
decl_stmt|;
name|Charset
name|enc
init|=
name|RawParseUtils
operator|.
name|parseEncoding
argument_list|(
name|raw
argument_list|)
decl_stmt|;
name|int
name|subjectStart
init|=
name|RawParseUtils
operator|.
name|commitMessage
argument_list|(
name|raw
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|subjectStart
operator|<
literal|0
operator|||
name|subjectStart
operator|>=
name|size
condition|)
block|{
return|return;
block|}
name|int
name|subjectEnd
init|=
name|RawParseUtils
operator|.
name|endOfParagraph
argument_list|(
name|raw
argument_list|,
name|subjectStart
argument_list|)
decl_stmt|;
if|if
condition|(
name|subjectEnd
operator|==
name|size
condition|)
block|{
return|return;
block|}
name|int
name|changeMessageStart
decl_stmt|;
if|if
condition|(
name|raw
index|[
name|subjectEnd
index|]
operator|==
literal|'\n'
condition|)
block|{
name|changeMessageStart
operator|=
name|subjectEnd
operator|+
literal|2
expr_stmt|;
comment|//\n\n ends paragraph
block|}
elseif|else
if|if
condition|(
name|raw
index|[
name|subjectEnd
index|]
operator|==
literal|'\r'
condition|)
block|{
name|changeMessageStart
operator|=
name|subjectEnd
operator|+
literal|4
expr_stmt|;
comment|//\r\n\r\n ends paragraph
block|}
else|else
block|{
return|return;
block|}
name|int
name|ptr
init|=
name|size
operator|-
literal|1
decl_stmt|;
name|int
name|changeMessageEnd
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|ptr
operator|>
name|changeMessageStart
condition|)
block|{
name|ptr
operator|=
name|RawParseUtils
operator|.
name|prevLF
argument_list|(
name|raw
argument_list|,
name|ptr
argument_list|,
literal|'\r'
argument_list|)
expr_stmt|;
if|if
condition|(
name|ptr
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|raw
index|[
name|ptr
index|]
operator|==
literal|'\n'
condition|)
block|{
name|changeMessageEnd
operator|=
name|ptr
operator|-
literal|1
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|raw
index|[
name|ptr
index|]
operator|==
literal|'\r'
condition|)
block|{
name|changeMessageEnd
operator|=
name|ptr
operator|-
literal|3
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|ptr
operator|<=
name|changeMessageStart
condition|)
block|{
return|return;
block|}
name|String
name|changeMsgString
init|=
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|enc
argument_list|,
name|raw
argument_list|,
name|changeMessageStart
argument_list|,
name|changeMessageEnd
operator|+
literal|1
argument_list|)
decl_stmt|;
name|ChangeMessage
name|changeMessage
init|=
operator|new
name|ChangeMessage
argument_list|(
operator|new
name|ChangeMessage
operator|.
name|Key
argument_list|(
name|psId
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|accountId
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|commit
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|,
name|psId
argument_list|)
decl_stmt|;
name|changeMessage
operator|.
name|setMessage
argument_list|(
name|changeMsgString
argument_list|)
expr_stmt|;
name|changeMessages
operator|.
name|put
argument_list|(
name|psId
argument_list|,
name|changeMessage
argument_list|)
expr_stmt|;
block|}
DECL|method|parseComments ()
specifier|private
name|void
name|parseComments
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|ParseException
block|{
name|commentNoteMap
operator|=
name|CommentsInNotesUtil
operator|.
name|parseCommentsFromNotes
argument_list|(
name|repo
argument_list|,
name|ChangeNoteUtil
operator|.
name|changeRefName
argument_list|(
name|changeId
argument_list|)
argument_list|,
name|walk
argument_list|,
name|changeId
argument_list|,
name|commentsForBase
argument_list|,
name|commentsForPs
argument_list|,
name|Status
operator|.
name|PUBLISHED
argument_list|)
expr_stmt|;
block|}
DECL|method|parseApproval (PatchSet.Id psId, Account.Id accountId, RevCommit commit, String line)
specifier|private
name|void
name|parseApproval
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|RevCommit
name|commit
parameter_list|,
name|String
name|line
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|Table
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|String
argument_list|,
name|Optional
argument_list|<
name|PatchSetApproval
argument_list|>
argument_list|>
name|curr
init|=
name|approvals
operator|.
name|get
argument_list|(
name|psId
argument_list|)
decl_stmt|;
if|if
condition|(
name|curr
operator|==
literal|null
condition|)
block|{
name|curr
operator|=
name|Tables
operator|.
name|newCustomTable
argument_list|(
name|Maps
operator|.
expr|<
name|Account
operator|.
name|Id
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Optional
argument_list|<
name|PatchSetApproval
argument_list|>
argument_list|>
operator|>
name|newHashMapWithExpectedSize
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|Supplier
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Optional
argument_list|<
name|PatchSetApproval
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Optional
argument_list|<
name|PatchSetApproval
argument_list|>
argument_list|>
name|get
parameter_list|()
block|{
return|return
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|approvals
operator|.
name|put
argument_list|(
name|psId
argument_list|,
name|curr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|String
name|label
init|=
name|line
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|curr
operator|.
name|contains
argument_list|(
name|accountId
argument_list|,
name|label
argument_list|)
condition|)
block|{
name|curr
operator|.
name|put
argument_list|(
name|accountId
argument_list|,
name|label
argument_list|,
name|Optional
operator|.
expr|<
name|PatchSetApproval
operator|>
name|absent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LabelVote
name|l
decl_stmt|;
try|try
block|{
name|l
operator|=
name|LabelVote
operator|.
name|parseWithEquals
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|ConfigInvalidException
name|pe
init|=
name|parseException
argument_list|(
literal|"invalid %s: %s"
argument_list|,
name|FOOTER_LABEL
argument_list|,
name|line
argument_list|)
decl_stmt|;
name|pe
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|pe
throw|;
block|}
if|if
condition|(
operator|!
name|curr
operator|.
name|contains
argument_list|(
name|accountId
argument_list|,
name|l
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
name|curr
operator|.
name|put
argument_list|(
name|accountId
argument_list|,
name|l
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|PatchSetApproval
argument_list|(
operator|new
name|PatchSetApproval
operator|.
name|Key
argument_list|(
name|psId
argument_list|,
name|accountId
argument_list|,
operator|new
name|LabelId
argument_list|(
name|l
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|l
operator|.
name|getValue
argument_list|()
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|commit
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseSubmitRecords (List<String> lines)
specifier|private
name|void
name|parseSubmitRecords
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|lines
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|SubmitRecord
name|rec
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|int
name|c
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|": "
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
name|rec
operator|=
operator|new
name|SubmitRecord
argument_list|()
expr_stmt|;
name|submitRecords
operator|.
name|add
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|int
name|s
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|String
name|statusStr
init|=
name|s
operator|>=
literal|0
condition|?
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
argument_list|)
else|:
name|line
decl_stmt|;
name|Optional
argument_list|<
name|SubmitRecord
operator|.
name|Status
argument_list|>
name|status
init|=
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|SubmitRecord
operator|.
name|Status
operator|.
name|class
argument_list|,
name|statusStr
argument_list|)
decl_stmt|;
name|checkFooter
argument_list|(
name|status
operator|.
name|isPresent
argument_list|()
argument_list|,
name|FOOTER_SUBMITTED_WITH
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|rec
operator|.
name|status
operator|=
name|status
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|>=
literal|0
condition|)
block|{
name|rec
operator|.
name|errorMessage
operator|=
name|line
operator|.
name|substring
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|checkFooter
argument_list|(
name|rec
operator|!=
literal|null
argument_list|,
name|FOOTER_SUBMITTED_WITH
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|SubmitRecord
operator|.
name|Label
name|label
init|=
operator|new
name|SubmitRecord
operator|.
name|Label
argument_list|()
decl_stmt|;
if|if
condition|(
name|rec
operator|.
name|labels
operator|==
literal|null
condition|)
block|{
name|rec
operator|.
name|labels
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
name|rec
operator|.
name|labels
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
argument_list|>
name|status
init|=
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
operator|.
name|class
argument_list|,
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|checkFooter
argument_list|(
name|status
operator|.
name|isPresent
argument_list|()
argument_list|,
name|FOOTER_SUBMITTED_WITH
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|label
operator|.
name|status
operator|=
name|status
operator|.
name|get
argument_list|()
expr_stmt|;
name|int
name|c2
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|": "
argument_list|,
name|c
operator|+
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|c2
operator|>=
literal|0
condition|)
block|{
name|label
operator|.
name|label
operator|=
name|line
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|2
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|PersonIdent
name|ident
init|=
name|RawParseUtils
operator|.
name|parsePersonIdent
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|c2
operator|+
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|checkFooter
argument_list|(
name|ident
operator|!=
literal|null
argument_list|,
name|FOOTER_SUBMITTED_WITH
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|label
operator|.
name|appliedBy
operator|=
name|parseIdent
argument_list|(
name|ident
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|label
operator|.
name|label
operator|=
name|line
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|parseIdent (RevCommit commit)
specifier|private
name|Account
operator|.
name|Id
name|parseIdent
parameter_list|(
name|RevCommit
name|commit
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
return|return
name|parseIdent
argument_list|(
name|commit
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
return|;
block|}
DECL|method|parseIdent (PersonIdent ident)
specifier|private
name|Account
operator|.
name|Id
name|parseIdent
parameter_list|(
name|PersonIdent
name|ident
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|String
name|email
init|=
name|ident
operator|.
name|getEmailAddress
argument_list|()
decl_stmt|;
name|int
name|at
init|=
name|email
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|>=
literal|0
condition|)
block|{
name|String
name|host
init|=
name|email
operator|.
name|substring
argument_list|(
name|at
operator|+
literal|1
argument_list|,
name|email
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|id
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|email
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|at
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
name|host
operator|.
name|equals
argument_list|(
name|GERRIT_PLACEHOLDER_HOST
argument_list|)
condition|)
block|{
return|return
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
throw|throw
name|parseException
argument_list|(
literal|"invalid identity, expected<id>@%s: %s"
argument_list|,
name|GERRIT_PLACEHOLDER_HOST
argument_list|,
name|email
argument_list|)
throw|;
block|}
DECL|method|parseReviewer (ReviewerState state, String line)
specifier|private
name|void
name|parseReviewer
parameter_list|(
name|ReviewerState
name|state
parameter_list|,
name|String
name|line
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|PersonIdent
name|ident
init|=
name|RawParseUtils
operator|.
name|parsePersonIdent
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|ident
operator|==
literal|null
condition|)
block|{
throw|throw
name|invalidFooter
argument_list|(
name|state
operator|.
name|getFooterKey
argument_list|()
argument_list|,
name|line
argument_list|)
throw|;
block|}
name|Account
operator|.
name|Id
name|accountId
init|=
name|parseIdent
argument_list|(
name|ident
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reviewers
operator|.
name|containsKey
argument_list|(
name|accountId
argument_list|)
condition|)
block|{
name|reviewers
operator|.
name|put
argument_list|(
name|accountId
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|pruneReviewers ()
specifier|private
name|void
name|pruneReviewers
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ReviewerState
argument_list|>
argument_list|>
name|rit
init|=
name|reviewers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|rit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ReviewerState
argument_list|>
name|e
init|=
name|rit
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|==
name|ReviewerState
operator|.
name|REMOVED
condition|)
block|{
name|rit
operator|.
name|remove
argument_list|()
expr_stmt|;
for|for
control|(
name|Table
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|curr
range|:
name|approvals
operator|.
name|values
argument_list|()
control|)
block|{
name|curr
operator|.
name|rowKeySet
argument_list|()
operator|.
name|remove
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|expectedOneFooter (FooterKey footer, List<String> actual)
specifier|private
name|ConfigInvalidException
name|expectedOneFooter
parameter_list|(
name|FooterKey
name|footer
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|actual
parameter_list|)
block|{
return|return
name|parseException
argument_list|(
literal|"missing or multiple %s: %s"
argument_list|,
name|footer
operator|.
name|getName
argument_list|()
argument_list|,
name|actual
argument_list|)
return|;
block|}
DECL|method|invalidFooter (FooterKey footer, String actual)
specifier|private
name|ConfigInvalidException
name|invalidFooter
parameter_list|(
name|FooterKey
name|footer
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
return|return
name|parseException
argument_list|(
literal|"invalid %s: %s"
argument_list|,
name|footer
operator|.
name|getName
argument_list|()
argument_list|,
name|actual
argument_list|)
return|;
block|}
DECL|method|checkFooter (boolean expr, FooterKey footer, String actual)
specifier|private
name|void
name|checkFooter
parameter_list|(
name|boolean
name|expr
parameter_list|,
name|FooterKey
name|footer
parameter_list|,
name|String
name|actual
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
if|if
condition|(
operator|!
name|expr
condition|)
block|{
throw|throw
name|invalidFooter
argument_list|(
name|footer
argument_list|,
name|actual
argument_list|)
throw|;
block|}
block|}
DECL|method|parseException (String fmt, Object... args)
specifier|private
name|ConfigInvalidException
name|parseException
parameter_list|(
name|String
name|fmt
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|ChangeNotes
operator|.
name|parseException
argument_list|(
name|changeId
argument_list|,
name|fmt
argument_list|,
name|args
argument_list|)
return|;
block|}
block|}
DECL|field|approvals
specifier|private
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|approvals
decl_stmt|;
DECL|field|reviewers
specifier|private
name|ImmutableSetMultimap
argument_list|<
name|ReviewerState
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
decl_stmt|;
DECL|field|submitRecords
specifier|private
name|ImmutableList
argument_list|<
name|SubmitRecord
argument_list|>
name|submitRecords
decl_stmt|;
DECL|field|changeMessages
specifier|private
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|ChangeMessage
argument_list|>
name|changeMessages
decl_stmt|;
DECL|field|commentsForBase
specifier|private
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchLineComment
argument_list|>
name|commentsForBase
decl_stmt|;
DECL|field|commentsForPS
specifier|private
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchLineComment
argument_list|>
name|commentsForPS
decl_stmt|;
DECL|field|noteMap
name|NoteMap
name|noteMap
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|ChangeNotes (GitRepositoryManager repoManager, Change change)
specifier|public
name|ChangeNotes
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|Change
name|change
parameter_list|)
block|{
name|super
argument_list|(
name|repoManager
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
DECL|method|getApprovals ()
specifier|public
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|getApprovals
parameter_list|()
block|{
return|return
name|approvals
return|;
block|}
DECL|method|getReviewers ()
specifier|public
name|ImmutableSetMultimap
argument_list|<
name|ReviewerState
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|getReviewers
parameter_list|()
block|{
return|return
name|reviewers
return|;
block|}
comment|/**    * @return submit records stored during the most recent submit; only for    *     changes that were actually submitted.    */
DECL|method|getSubmitRecords ()
specifier|public
name|ImmutableList
argument_list|<
name|SubmitRecord
argument_list|>
name|getSubmitRecords
parameter_list|()
block|{
return|return
name|submitRecords
return|;
block|}
comment|/** @return change messages by patch set, in chronological order. */
DECL|method|getChangeMessages ()
specifier|public
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|ChangeMessage
argument_list|>
name|getChangeMessages
parameter_list|()
block|{
return|return
name|changeMessages
return|;
block|}
comment|/** @return inline comments on each patchset's base (side == 0). */
specifier|public
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchLineComment
argument_list|>
DECL|method|getBaseComments ()
name|getBaseComments
parameter_list|()
block|{
return|return
name|commentsForBase
return|;
block|}
comment|/** @return inline comments on each patchset (side == 1). */
specifier|public
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchLineComment
argument_list|>
DECL|method|getPatchSetComments ()
name|getPatchSetComments
parameter_list|()
block|{
return|return
name|commentsForPS
return|;
block|}
comment|/** @return the NoteMap */
DECL|method|getNoteMap ()
name|NoteMap
name|getNoteMap
parameter_list|()
block|{
return|return
name|noteMap
return|;
block|}
annotation|@
name|Override
DECL|method|getRefName ()
specifier|protected
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|ChangeNoteUtil
operator|.
name|changeRefName
argument_list|(
name|getChangeId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ObjectId
name|rev
init|=
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|rev
operator|==
literal|null
condition|)
block|{
name|loadDefaults
argument_list|()
expr_stmt|;
return|return;
block|}
name|RevWalk
name|walk
init|=
operator|new
name|RevWalk
argument_list|(
name|reader
argument_list|)
decl_stmt|;
try|try
block|{
name|Change
name|change
init|=
name|getChange
argument_list|()
decl_stmt|;
name|Parser
name|parser
init|=
operator|new
name|Parser
argument_list|(
name|change
argument_list|,
name|rev
argument_list|,
name|walk
argument_list|,
name|repoManager
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parseAll
argument_list|()
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|status
operator|!=
literal|null
condition|)
block|{
name|change
operator|.
name|setStatus
argument_list|(
name|parser
operator|.
name|status
argument_list|)
expr_stmt|;
block|}
name|approvals
operator|=
name|parser
operator|.
name|buildApprovals
argument_list|()
expr_stmt|;
name|changeMessages
operator|=
name|parser
operator|.
name|buildMessages
argument_list|()
expr_stmt|;
name|commentsForBase
operator|=
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|parser
operator|.
name|commentsForBase
argument_list|)
expr_stmt|;
name|commentsForPS
operator|=
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|parser
operator|.
name|commentsForPs
argument_list|)
expr_stmt|;
name|noteMap
operator|=
name|parser
operator|.
name|commentNoteMap
expr_stmt|;
name|ImmutableSetMultimap
operator|.
name|Builder
argument_list|<
name|ReviewerState
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
init|=
name|ImmutableSetMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ReviewerState
argument_list|>
name|e
range|:
name|parser
operator|.
name|reviewers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|reviewers
operator|.
name|put
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|reviewers
operator|=
name|reviewers
operator|.
name|build
argument_list|()
expr_stmt|;
name|submitRecords
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|parser
operator|.
name|submitRecords
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e1
parameter_list|)
block|{
comment|// TODO(yyonas): figure out how to handle this exception
throw|throw
operator|new
name|IOException
argument_list|(
name|e1
argument_list|)
throw|;
block|}
finally|finally
block|{
name|walk
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|loadDefaults ()
specifier|private
name|void
name|loadDefaults
parameter_list|()
block|{
name|approvals
operator|=
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
expr_stmt|;
name|reviewers
operator|=
name|ImmutableSetMultimap
operator|.
name|of
argument_list|()
expr_stmt|;
name|submitRecords
operator|=
name|ImmutableList
operator|.
name|of
argument_list|()
expr_stmt|;
name|changeMessages
operator|=
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
expr_stmt|;
name|commentsForBase
operator|=
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
expr_stmt|;
name|commentsForPS
operator|=
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onSave (CommitBuilder commit)
specifier|protected
name|boolean
name|onSave
parameter_list|(
name|CommitBuilder
name|commit
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" is read-only"
argument_list|)
throw|;
block|}
DECL|method|getProjectName (Change change)
specifier|private
specifier|static
name|Project
operator|.
name|NameKey
name|getProjectName
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
return|return
name|change
operator|.
name|getProject
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getProjectName ()
specifier|protected
name|Project
operator|.
name|NameKey
name|getProjectName
parameter_list|()
block|{
return|return
name|getProjectName
argument_list|(
name|getChange
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

