begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountProjectWatch
operator|.
name|NotifyType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|NotifyConfig
specifier|public
class|class
name|NotifyConfig
implements|implements
name|Comparable
argument_list|<
name|NotifyConfig
argument_list|>
block|{
DECL|enum|Header
specifier|public
enum|enum
name|Header
block|{
DECL|enumConstant|TO
DECL|enumConstant|CC
DECL|enumConstant|BCC
name|TO
block|,
name|CC
block|,
name|BCC
block|}
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|types
specifier|private
name|EnumSet
argument_list|<
name|NotifyType
argument_list|>
name|types
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|NotifyType
operator|.
name|ALL
argument_list|)
decl_stmt|;
DECL|field|filter
specifier|private
name|String
name|filter
decl_stmt|;
DECL|field|header
specifier|private
name|Header
name|header
decl_stmt|;
DECL|field|groups
specifier|private
name|Set
argument_list|<
name|GroupReference
argument_list|>
name|groups
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|addresses
specifier|private
name|Set
argument_list|<
name|Address
argument_list|>
name|addresses
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|isNotify (NotifyType type)
specifier|public
name|boolean
name|isNotify
parameter_list|(
name|NotifyType
name|type
parameter_list|)
block|{
return|return
name|types
operator|.
name|contains
argument_list|(
name|type
argument_list|)
operator|||
name|types
operator|.
name|contains
argument_list|(
name|NotifyType
operator|.
name|ALL
argument_list|)
return|;
block|}
DECL|method|getNotify ()
specifier|public
name|EnumSet
argument_list|<
name|NotifyType
argument_list|>
name|getNotify
parameter_list|()
block|{
return|return
name|types
return|;
block|}
DECL|method|setTypes (EnumSet<NotifyType> newTypes)
specifier|public
name|void
name|setTypes
parameter_list|(
name|EnumSet
argument_list|<
name|NotifyType
argument_list|>
name|newTypes
parameter_list|)
block|{
name|types
operator|=
name|EnumSet
operator|.
name|copyOf
argument_list|(
name|newTypes
argument_list|)
expr_stmt|;
block|}
DECL|method|getFilter ()
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|filter
return|;
block|}
DECL|method|setFilter (String filter)
specifier|public
name|void
name|setFilter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|this
operator|.
name|filter
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|filter
operator|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getHeader ()
specifier|public
name|Header
name|getHeader
parameter_list|()
block|{
return|return
name|header
return|;
block|}
DECL|method|setHeader (Header hdr)
specifier|public
name|void
name|setHeader
parameter_list|(
name|Header
name|hdr
parameter_list|)
block|{
name|header
operator|=
name|hdr
expr_stmt|;
block|}
DECL|method|getGroups ()
specifier|public
name|Set
argument_list|<
name|GroupReference
argument_list|>
name|getGroups
parameter_list|()
block|{
return|return
name|groups
return|;
block|}
DECL|method|getAddresses ()
specifier|public
name|Set
argument_list|<
name|Address
argument_list|>
name|getAddresses
parameter_list|()
block|{
return|return
name|addresses
return|;
block|}
DECL|method|addEmail (GroupReference group)
specifier|public
name|void
name|addEmail
parameter_list|(
name|GroupReference
name|group
parameter_list|)
block|{
name|groups
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
DECL|method|addEmail (Address address)
specifier|public
name|void
name|addEmail
parameter_list|(
name|Address
name|address
parameter_list|)
block|{
name|addresses
operator|.
name|add
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareTo (NotifyConfig o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|NotifyConfig
name|o
parameter_list|)
block|{
return|return
name|name
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|NotifyConfig
condition|)
block|{
return|return
name|compareTo
argument_list|(
operator|(
name|NotifyConfig
operator|)
name|obj
argument_list|)
operator|==
literal|0
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"NotifyConfig["
operator|+
name|name
operator|+
literal|" = "
operator|+
name|addresses
operator|+
literal|" + "
operator|+
name|groups
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

