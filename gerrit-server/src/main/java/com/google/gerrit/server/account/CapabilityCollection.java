begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Caches active {@link GlobalCapability} set for a site. */
end_comment

begin_class
DECL|class|CapabilityCollection
specifier|public
class|class
name|CapabilityCollection
block|{
DECL|field|permissions
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
argument_list|>
name|permissions
decl_stmt|;
DECL|field|administrateServer
specifier|public
specifier|final
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|administrateServer
decl_stmt|;
DECL|field|emailReviewers
specifier|public
specifier|final
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|emailReviewers
decl_stmt|;
DECL|field|priority
specifier|public
specifier|final
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|priority
decl_stmt|;
DECL|field|queryLimit
specifier|public
specifier|final
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|queryLimit
decl_stmt|;
DECL|method|CapabilityCollection (AccessSection section)
specifier|public
name|CapabilityCollection
parameter_list|(
name|AccessSection
name|section
parameter_list|)
block|{
if|if
condition|(
name|section
operator|==
literal|null
condition|)
block|{
name|section
operator|=
operator|new
name|AccessSection
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
argument_list|>
name|tmp
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Permission
name|permission
range|:
name|section
operator|.
name|getPermissions
argument_list|()
control|)
block|{
for|for
control|(
name|PermissionRule
name|rule
range|:
name|permission
operator|.
name|getRules
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|permission
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|GlobalCapability
operator|.
name|EMAIL_REVIEWERS
argument_list|)
operator|&&
name|rule
operator|.
name|getAction
argument_list|()
operator|==
name|PermissionRule
operator|.
name|Action
operator|.
name|DENY
condition|)
block|{
continue|continue;
block|}
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|r
init|=
name|tmp
operator|.
name|get
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|r
operator|=
operator|new
name|ArrayList
argument_list|<
name|PermissionRule
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
block|}
name|configureDefaults
argument_list|(
name|tmp
argument_list|,
name|section
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
argument_list|>
name|res
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
argument_list|>
name|e
range|:
name|tmp
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|rules
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rules
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|res
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|rules
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|res
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|rules
operator|.
name|toArray
argument_list|(
operator|new
name|PermissionRule
index|[
name|rules
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|permissions
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|administrateServer
operator|=
name|getPermission
argument_list|(
name|GlobalCapability
operator|.
name|ADMINISTRATE_SERVER
argument_list|)
expr_stmt|;
name|emailReviewers
operator|=
name|getPermission
argument_list|(
name|GlobalCapability
operator|.
name|EMAIL_REVIEWERS
argument_list|)
expr_stmt|;
name|priority
operator|=
name|getPermission
argument_list|(
name|GlobalCapability
operator|.
name|PRIORITY
argument_list|)
expr_stmt|;
name|queryLimit
operator|=
name|getPermission
argument_list|(
name|GlobalCapability
operator|.
name|QUERY_LIMIT
argument_list|)
expr_stmt|;
block|}
DECL|method|getPermission (String permissionName)
specifier|public
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|getPermission
parameter_list|(
name|String
name|permissionName
parameter_list|)
block|{
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|r
init|=
name|permissions
operator|.
name|get
argument_list|(
name|permissionName
argument_list|)
decl_stmt|;
return|return
name|r
operator|!=
literal|null
condition|?
name|r
else|:
name|Collections
operator|.
expr|<
name|PermissionRule
operator|>
name|emptyList
argument_list|()
return|;
block|}
DECL|field|anonymous
specifier|private
specifier|static
specifier|final
name|GroupReference
name|anonymous
init|=
name|SystemGroupBackend
operator|.
name|getGroup
argument_list|(
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
argument_list|)
decl_stmt|;
DECL|method|configureDefaults (Map<String, List<PermissionRule>> out, AccessSection section)
specifier|private
specifier|static
name|void
name|configureDefaults
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
argument_list|>
name|out
parameter_list|,
name|AccessSection
name|section
parameter_list|)
block|{
name|configureDefault
argument_list|(
name|out
argument_list|,
name|section
argument_list|,
name|GlobalCapability
operator|.
name|QUERY_LIMIT
argument_list|,
name|anonymous
argument_list|)
expr_stmt|;
block|}
DECL|method|configureDefault (Map<String, List<PermissionRule>> out, AccessSection section, String capName, GroupReference group)
specifier|private
specifier|static
name|void
name|configureDefault
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
argument_list|>
name|out
parameter_list|,
name|AccessSection
name|section
parameter_list|,
name|String
name|capName
parameter_list|,
name|GroupReference
name|group
parameter_list|)
block|{
if|if
condition|(
name|doesNotDeclare
argument_list|(
name|section
argument_list|,
name|capName
argument_list|)
condition|)
block|{
name|PermissionRange
operator|.
name|WithDefaults
name|range
init|=
name|GlobalCapability
operator|.
name|getRange
argument_list|(
name|capName
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|!=
literal|null
condition|)
block|{
name|PermissionRule
name|rule
init|=
operator|new
name|PermissionRule
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|rule
operator|.
name|setRange
argument_list|(
name|range
operator|.
name|getDefaultMin
argument_list|()
argument_list|,
name|range
operator|.
name|getDefaultMax
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|put
argument_list|(
name|capName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doesNotDeclare (AccessSection section, String capName)
specifier|private
specifier|static
name|boolean
name|doesNotDeclare
parameter_list|(
name|AccessSection
name|section
parameter_list|,
name|String
name|capName
parameter_list|)
block|{
return|return
name|section
operator|.
name|getPermission
argument_list|(
name|capName
argument_list|)
operator|==
literal|null
return|;
block|}
block|}
end_class

end_unit

