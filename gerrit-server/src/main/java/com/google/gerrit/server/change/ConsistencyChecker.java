begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Collections2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Checks changes for various kinds of inconsistency and corruption.  *<p>  * A single instance may be reused for checking multiple changes, but not  * concurrently.  */
end_comment

begin_class
DECL|class|ConsistencyChecker
specifier|public
class|class
name|ConsistencyChecker
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConsistencyChecker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|change
specifier|private
name|Change
name|change
decl_stmt|;
DECL|field|repo
specifier|private
name|Repository
name|repo
decl_stmt|;
DECL|field|rw
specifier|private
name|RevWalk
name|rw
decl_stmt|;
DECL|field|currPs
specifier|private
name|PatchSet
name|currPs
decl_stmt|;
DECL|field|currPsCommit
specifier|private
name|RevCommit
name|currPsCommit
decl_stmt|;
DECL|field|messages
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|messages
decl_stmt|;
annotation|@
name|Inject
DECL|method|ConsistencyChecker (Provider<ReviewDb> db, GitRepositoryManager repoManager)
name|ConsistencyChecker
parameter_list|(
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|reset ()
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|change
operator|=
literal|null
expr_stmt|;
name|repo
operator|=
literal|null
expr_stmt|;
name|rw
operator|=
literal|null
expr_stmt|;
name|messages
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|check (Change c)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|check
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|change
operator|=
name|c
expr_stmt|;
try|try
block|{
name|checkImpl
argument_list|()
expr_stmt|;
return|return
name|messages
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|rw
operator|!=
literal|null
condition|)
block|{
name|rw
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkImpl ()
specifier|private
name|void
name|checkImpl
parameter_list|()
block|{
name|checkOwner
argument_list|()
expr_stmt|;
name|checkCurrentPatchSetEntity
argument_list|()
expr_stmt|;
comment|// All checks that require the repo.
if|if
condition|(
operator|!
name|openRepo
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|checkPatchSets
argument_list|()
condition|)
block|{
return|return;
block|}
name|checkMerged
argument_list|()
expr_stmt|;
block|}
DECL|method|checkOwner ()
specifier|private
name|void
name|checkOwner
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|db
operator|.
name|get
argument_list|()
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|change
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|messages
operator|.
name|add
argument_list|(
literal|"Missing change owner: "
operator|+
name|change
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Failed to look up owner"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkCurrentPatchSetEntity ()
specifier|private
name|void
name|checkCurrentPatchSetEntity
parameter_list|()
block|{
try|try
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|change
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|currPs
operator|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psId
argument_list|)
expr_stmt|;
if|if
condition|(
name|currPs
operator|==
literal|null
condition|)
block|{
name|messages
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Current patch set %d not found"
argument_list|,
name|psId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Failed to look up current patch set"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|openRepo ()
specifier|private
name|boolean
name|openRepo
parameter_list|()
block|{
name|Project
operator|.
name|NameKey
name|project
init|=
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
try|try
block|{
name|repo
operator|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
return|return
name|error
argument_list|(
literal|"Destination repository not found: "
operator|+
name|project
argument_list|,
name|e
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|error
argument_list|(
literal|"Failed to open repository: "
operator|+
name|project
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
DECL|method|checkPatchSets ()
specifier|private
name|boolean
name|checkPatchSets
parameter_list|()
block|{
name|List
argument_list|<
name|PatchSet
argument_list|>
name|all
decl_stmt|;
try|try
block|{
name|all
operator|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|patchSets
argument_list|()
operator|.
name|byChange
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
return|return
name|error
argument_list|(
literal|"Failed to look up patch sets"
argument_list|,
name|e
argument_list|)
return|;
block|}
name|Function
argument_list|<
name|PatchSet
argument_list|,
name|Integer
argument_list|>
name|toPsId
init|=
operator|new
name|Function
argument_list|<
name|PatchSet
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|PatchSet
name|in
parameter_list|)
block|{
return|return
name|in
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|PatchSet
argument_list|>
name|bySha
init|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|(
name|all
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|treeSetValues
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|onResultOf
argument_list|(
name|toPsId
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSet
name|ps
range|:
name|all
control|)
block|{
name|ObjectId
name|objId
decl_stmt|;
name|String
name|rev
init|=
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|psNum
init|=
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|objId
operator|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid revision on patch set %d: %s"
argument_list|,
name|psNum
argument_list|,
name|rev
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|bySha
operator|.
name|put
argument_list|(
name|objId
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|RevCommit
name|psCommit
init|=
name|parseCommit
argument_list|(
name|objId
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"patch set %d"
argument_list|,
name|psNum
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|psCommit
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
name|currPsCommit
operator|=
name|psCommit
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ObjectId
argument_list|,
name|Collection
argument_list|<
name|PatchSet
argument_list|>
argument_list|>
name|e
range|:
name|bySha
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|messages
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Multiple patch sets pointing to %s: %s"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|Collections2
operator|.
name|transform
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|toPsId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|currPs
operator|!=
literal|null
operator|&&
name|currPsCommit
operator|!=
literal|null
return|;
block|}
DECL|method|checkMerged ()
specifier|private
name|void
name|checkMerged
parameter_list|()
block|{
name|String
name|refName
init|=
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|Ref
name|dest
decl_stmt|;
try|try
block|{
name|dest
operator|=
name|repo
operator|.
name|getRef
argument_list|(
name|refName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|messages
operator|.
name|add
argument_list|(
literal|"Failed to look up destination ref: "
operator|+
name|refName
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
block|{
name|messages
operator|.
name|add
argument_list|(
literal|"Destination ref not found (may be new branch): "
operator|+
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|RevCommit
name|tip
init|=
name|parseCommit
argument_list|(
name|dest
operator|.
name|getObjectId
argument_list|()
argument_list|,
literal|"destination ref "
operator|+
name|refName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tip
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|merged
decl_stmt|;
try|try
block|{
name|merged
operator|=
name|rw
operator|.
name|isMergedInto
argument_list|(
name|currPsCommit
argument_list|,
name|tip
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|messages
operator|.
name|add
argument_list|(
literal|"Error checking whether patch set "
operator|+
name|currPs
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|" is merged"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|merged
operator|&&
name|change
operator|.
name|getStatus
argument_list|()
operator|!=
name|Change
operator|.
name|Status
operator|.
name|MERGED
condition|)
block|{
name|messages
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Patch set %d (%s) is merged into destination"
operator|+
literal|" ref %s (%s), but change status is %s"
argument_list|,
name|currPs
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|currPsCommit
operator|.
name|name
argument_list|()
argument_list|,
name|refName
argument_list|,
name|tip
operator|.
name|name
argument_list|()
argument_list|,
name|change
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO(dborowitz): Just fix it.
block|}
elseif|else
if|if
condition|(
operator|!
name|merged
operator|&&
name|change
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|MERGED
condition|)
block|{
name|messages
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Patch set %d (%s) is not merged into"
operator|+
literal|" destination ref %s (%s), but change status is %s"
argument_list|,
name|currPs
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|currPsCommit
operator|.
name|name
argument_list|()
argument_list|,
name|refName
argument_list|,
name|tip
operator|.
name|name
argument_list|()
argument_list|,
name|change
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseCommit (ObjectId objId, String desc)
specifier|private
name|RevCommit
name|parseCommit
parameter_list|(
name|ObjectId
name|objId
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
try|try
block|{
return|return
name|rw
operator|.
name|parseCommit
argument_list|(
name|objId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MissingObjectException
name|e
parameter_list|)
block|{
name|messages
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Object missing: %s: %s"
argument_list|,
name|desc
argument_list|,
name|objId
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|e
parameter_list|)
block|{
name|messages
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Not a commit: %s: %s"
argument_list|,
name|desc
argument_list|,
name|objId
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|messages
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to look up: %s: %s"
argument_list|,
name|desc
argument_list|,
name|objId
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|error (String msg, Throwable t)
specifier|private
name|boolean
name|error
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|messages
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// TODO(dborowitz): Expose stack trace to administrators.
name|log
operator|.
name|warn
argument_list|(
literal|"Error in consistency check of change "
operator|+
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

