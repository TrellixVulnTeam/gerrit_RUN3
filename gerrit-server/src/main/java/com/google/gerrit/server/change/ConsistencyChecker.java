begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
operator|.
name|PS_ID_ORDER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
operator|.
name|TO_PS_ID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Collections2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|FooterConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|FixInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ProblemInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ProblemInfo
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|UpdateException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|ChangeIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|AtomicUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Checks changes for various kinds of inconsistency and corruption.  *<p>  * A single instance may be reused for checking multiple changes, but not  * concurrently.  */
end_comment

begin_class
DECL|class|ConsistencyChecker
specifier|public
class|class
name|ConsistencyChecker
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConsistencyChecker
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|AutoValue
DECL|class|Result
specifier|public
specifier|abstract
specifier|static
class|class
name|Result
block|{
DECL|method|create (Change.Id id, List<ProblemInfo> problems)
specifier|private
specifier|static
name|Result
name|create
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|List
argument_list|<
name|ProblemInfo
argument_list|>
name|problems
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_ConsistencyChecker_Result
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
name|problems
argument_list|)
return|;
block|}
DECL|method|create (Change c, List<ProblemInfo> problems)
specifier|private
specifier|static
name|Result
name|create
parameter_list|(
name|Change
name|c
parameter_list|,
name|List
argument_list|<
name|ProblemInfo
argument_list|>
name|problems
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_ConsistencyChecker_Result
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|c
argument_list|,
name|problems
argument_list|)
return|;
block|}
DECL|method|id ()
specifier|public
specifier|abstract
name|Change
operator|.
name|Id
name|id
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|change ()
specifier|public
specifier|abstract
name|Change
name|change
parameter_list|()
function_decl|;
DECL|method|problems ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|ProblemInfo
argument_list|>
name|problems
parameter_list|()
function_decl|;
block|}
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|user
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
decl_stmt|;
DECL|field|projectControlFactory
specifier|private
specifier|final
name|ProjectControl
operator|.
name|GenericFactory
name|projectControlFactory
decl_stmt|;
DECL|field|patchSetInfoFactory
specifier|private
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
decl_stmt|;
DECL|field|patchSetInserterFactory
specifier|private
specifier|final
name|PatchSetInserter
operator|.
name|Factory
name|patchSetInserterFactory
decl_stmt|;
DECL|field|updateFactory
specifier|private
specifier|final
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
decl_stmt|;
DECL|field|indexer
specifier|private
specifier|final
name|ChangeIndexer
name|indexer
decl_stmt|;
DECL|field|changeControlFactory
specifier|private
specifier|final
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
DECL|field|changeUpdateFactory
specifier|private
specifier|final
name|ChangeUpdate
operator|.
name|Factory
name|changeUpdateFactory
decl_stmt|;
DECL|field|fix
specifier|private
name|FixInput
name|fix
decl_stmt|;
DECL|field|change
specifier|private
name|Change
name|change
decl_stmt|;
DECL|field|repo
specifier|private
name|Repository
name|repo
decl_stmt|;
DECL|field|rw
specifier|private
name|RevWalk
name|rw
decl_stmt|;
DECL|field|tip
specifier|private
name|RevCommit
name|tip
decl_stmt|;
DECL|field|patchSetsBySha
specifier|private
name|Multimap
argument_list|<
name|ObjectId
argument_list|,
name|PatchSet
argument_list|>
name|patchSetsBySha
decl_stmt|;
DECL|field|currPs
specifier|private
name|PatchSet
name|currPs
decl_stmt|;
DECL|field|currPsCommit
specifier|private
name|RevCommit
name|currPsCommit
decl_stmt|;
DECL|field|problems
specifier|private
name|List
argument_list|<
name|ProblemInfo
argument_list|>
name|problems
decl_stmt|;
annotation|@
name|Inject
DECL|method|ConsistencyChecker (Provider<ReviewDb> db, GitRepositoryManager repoManager, Provider<CurrentUser> user, @GerritPersonIdent Provider<PersonIdent> serverIdent, ProjectControl.GenericFactory projectControlFactory, PatchSetInfoFactory patchSetInfoFactory, PatchSetInserter.Factory patchSetInserterFactory, BatchUpdate.Factory updateFactory, ChangeIndexer indexer, ChangeControl.GenericFactory changeControlFactory, ChangeUpdate.Factory changeUpdateFactory)
name|ConsistencyChecker
parameter_list|(
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|user
parameter_list|,
annotation|@
name|GerritPersonIdent
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
parameter_list|,
name|ProjectControl
operator|.
name|GenericFactory
name|projectControlFactory
parameter_list|,
name|PatchSetInfoFactory
name|patchSetInfoFactory
parameter_list|,
name|PatchSetInserter
operator|.
name|Factory
name|patchSetInserterFactory
parameter_list|,
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
parameter_list|,
name|ChangeIndexer
name|indexer
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
parameter_list|,
name|ChangeUpdate
operator|.
name|Factory
name|changeUpdateFactory
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
name|this
operator|.
name|projectControlFactory
operator|=
name|projectControlFactory
expr_stmt|;
name|this
operator|.
name|patchSetInfoFactory
operator|=
name|patchSetInfoFactory
expr_stmt|;
name|this
operator|.
name|patchSetInserterFactory
operator|=
name|patchSetInserterFactory
expr_stmt|;
name|this
operator|.
name|updateFactory
operator|=
name|updateFactory
expr_stmt|;
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
name|this
operator|.
name|changeControlFactory
operator|=
name|changeControlFactory
expr_stmt|;
name|this
operator|.
name|changeUpdateFactory
operator|=
name|changeUpdateFactory
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|reset ()
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|change
operator|=
literal|null
expr_stmt|;
name|repo
operator|=
literal|null
expr_stmt|;
name|rw
operator|=
literal|null
expr_stmt|;
name|problems
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|check (ChangeData cd)
specifier|public
name|Result
name|check
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
block|{
return|return
name|check
argument_list|(
name|cd
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|check (ChangeData cd, @Nullable FixInput f)
specifier|public
name|Result
name|check
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
annotation|@
name|Nullable
name|FixInput
name|f
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|check
argument_list|(
name|cd
operator|.
name|change
argument_list|()
argument_list|,
name|f
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Error looking up change"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Result
operator|.
name|create
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|problems
argument_list|)
return|;
block|}
block|}
DECL|method|check (Change c)
specifier|public
name|Result
name|check
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
return|return
name|check
argument_list|(
name|c
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|check (Change c, @Nullable FixInput f)
specifier|public
name|Result
name|check
parameter_list|(
name|Change
name|c
parameter_list|,
annotation|@
name|Nullable
name|FixInput
name|f
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|fix
operator|=
name|f
expr_stmt|;
name|change
operator|=
name|c
expr_stmt|;
try|try
block|{
name|checkImpl
argument_list|()
expr_stmt|;
return|return
name|Result
operator|.
name|create
argument_list|(
name|c
argument_list|,
name|problems
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|rw
operator|!=
literal|null
condition|)
block|{
name|rw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkImpl ()
specifier|private
name|void
name|checkImpl
parameter_list|()
block|{
name|checkOwner
argument_list|()
expr_stmt|;
name|checkCurrentPatchSetEntity
argument_list|()
expr_stmt|;
comment|// All checks that require the repo.
if|if
condition|(
operator|!
name|openRepo
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|checkPatchSets
argument_list|()
condition|)
block|{
return|return;
block|}
name|checkMerged
argument_list|()
expr_stmt|;
block|}
DECL|method|checkOwner ()
specifier|private
name|void
name|checkOwner
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|db
operator|.
name|get
argument_list|()
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|change
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|problem
argument_list|(
literal|"Missing change owner: "
operator|+
name|change
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Failed to look up owner"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkCurrentPatchSetEntity ()
specifier|private
name|void
name|checkCurrentPatchSetEntity
parameter_list|()
block|{
try|try
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|change
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|currPs
operator|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psId
argument_list|)
expr_stmt|;
if|if
condition|(
name|currPs
operator|==
literal|null
condition|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Current patch set %d not found"
argument_list|,
name|psId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Failed to look up current patch set"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|openRepo ()
specifier|private
name|boolean
name|openRepo
parameter_list|()
block|{
name|Project
operator|.
name|NameKey
name|project
init|=
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
try|try
block|{
name|repo
operator|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
return|return
name|error
argument_list|(
literal|"Destination repository not found: "
operator|+
name|project
argument_list|,
name|e
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|error
argument_list|(
literal|"Failed to open repository: "
operator|+
name|project
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
DECL|method|checkPatchSets ()
specifier|private
name|boolean
name|checkPatchSets
parameter_list|()
block|{
name|List
argument_list|<
name|PatchSet
argument_list|>
name|all
decl_stmt|;
try|try
block|{
name|all
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|db
operator|.
name|get
argument_list|()
operator|.
name|patchSets
argument_list|()
operator|.
name|byChange
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
return|return
name|error
argument_list|(
literal|"Failed to look up patch sets"
argument_list|,
name|e
argument_list|)
return|;
block|}
comment|// Iterate in descending order so deletePatchSet can assume the latest patch
comment|// set exists.
name|Collections
operator|.
name|sort
argument_list|(
name|all
argument_list|,
name|PS_ID_ORDER
operator|.
name|reverse
argument_list|()
argument_list|)
expr_stmt|;
name|patchSetsBySha
operator|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|(
name|all
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|treeSetValues
argument_list|(
name|PS_ID_ORDER
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|refs
decl_stmt|;
try|try
block|{
name|refs
operator|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|all
argument_list|,
operator|new
name|Function
argument_list|<
name|PatchSet
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|PatchSet
name|ps
parameter_list|)
block|{
return|return
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|all
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"error reading refs"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|refs
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|PatchSet
name|ps
range|:
name|all
control|)
block|{
comment|// Check revision format.
name|int
name|psNum
init|=
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|refName
init|=
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
decl_stmt|;
name|ObjectId
name|objId
init|=
name|parseObjectId
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|"patch set "
operator|+
name|psNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|objId
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|patchSetsBySha
operator|.
name|put
argument_list|(
name|objId
argument_list|,
name|ps
argument_list|)
expr_stmt|;
comment|// Check ref existence.
name|ProblemInfo
name|refProblem
init|=
literal|null
decl_stmt|;
name|Ref
name|ref
init|=
name|refs
operator|.
name|get
argument_list|(
name|refName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|refProblem
operator|=
name|problem
argument_list|(
literal|"Ref missing: "
operator|+
name|refName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|objId
operator|.
name|equals
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|actual
init|=
name|ref
operator|.
name|getObjectId
argument_list|()
operator|!=
literal|null
condition|?
name|ref
operator|.
name|getObjectId
argument_list|()
operator|.
name|name
argument_list|()
else|:
literal|"null"
decl_stmt|;
name|refProblem
operator|=
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected %s to point to %s, found %s"
argument_list|,
name|ref
operator|.
name|getName
argument_list|()
argument_list|,
name|objId
operator|.
name|name
argument_list|()
argument_list|,
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check object existence.
name|RevCommit
name|psCommit
init|=
name|parseCommit
argument_list|(
name|objId
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"patch set %d"
argument_list|,
name|psNum
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|psCommit
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|fix
operator|!=
literal|null
operator|&&
name|fix
operator|.
name|deletePatchSetIfCommitMissing
condition|)
block|{
name|deletePatchSet
argument_list|(
name|lastProblem
argument_list|()
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
elseif|else
if|if
condition|(
name|refProblem
operator|!=
literal|null
operator|&&
name|fix
operator|!=
literal|null
condition|)
block|{
name|fixPatchSetRef
argument_list|(
name|refProblem
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
name|currPsCommit
operator|=
name|psCommit
expr_stmt|;
block|}
block|}
comment|// Check for duplicates.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ObjectId
argument_list|,
name|Collection
argument_list|<
name|PatchSet
argument_list|>
argument_list|>
name|e
range|:
name|patchSetsBySha
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Multiple patch sets pointing to %s: %s"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|Collections2
operator|.
name|transform
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|TO_PS_ID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|currPs
operator|!=
literal|null
operator|&&
name|currPsCommit
operator|!=
literal|null
return|;
block|}
DECL|method|checkMerged ()
specifier|private
name|void
name|checkMerged
parameter_list|()
block|{
name|String
name|refName
init|=
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|Ref
name|dest
decl_stmt|;
try|try
block|{
name|dest
operator|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
name|refName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|problem
argument_list|(
literal|"Failed to look up destination ref: "
operator|+
name|refName
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
block|{
name|problem
argument_list|(
literal|"Destination ref not found (may be new branch): "
operator|+
name|refName
argument_list|)
expr_stmt|;
return|return;
block|}
name|tip
operator|=
name|parseCommit
argument_list|(
name|dest
operator|.
name|getObjectId
argument_list|()
argument_list|,
literal|"destination ref "
operator|+
name|refName
argument_list|)
expr_stmt|;
if|if
condition|(
name|tip
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|fix
operator|!=
literal|null
operator|&&
name|fix
operator|.
name|expectMergedAs
operator|!=
literal|null
condition|)
block|{
name|checkExpectMergedAs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|merged
decl_stmt|;
try|try
block|{
name|merged
operator|=
name|rw
operator|.
name|isMergedInto
argument_list|(
name|currPsCommit
argument_list|,
name|tip
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|problem
argument_list|(
literal|"Error checking whether patch set "
operator|+
name|currPs
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|" is merged"
argument_list|)
expr_stmt|;
return|return;
block|}
name|checkMergedBitMatchesStatus
argument_list|(
name|currPs
operator|.
name|getId
argument_list|()
argument_list|,
name|currPsCommit
argument_list|,
name|merged
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkMergedBitMatchesStatus (PatchSet.Id psId, RevCommit commit, boolean merged)
specifier|private
name|void
name|checkMergedBitMatchesStatus
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|RevCommit
name|commit
parameter_list|,
name|boolean
name|merged
parameter_list|)
block|{
name|String
name|refName
init|=
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|merged
operator|&&
name|change
operator|.
name|getStatus
argument_list|()
operator|!=
name|Change
operator|.
name|Status
operator|.
name|MERGED
condition|)
block|{
name|ProblemInfo
name|p
init|=
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Patch set %d (%s) is merged into destination ref %s (%s), but change"
operator|+
literal|" status is %s"
argument_list|,
name|psId
operator|.
name|get
argument_list|()
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|,
name|refName
argument_list|,
name|tip
operator|.
name|name
argument_list|()
argument_list|,
name|change
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fix
operator|!=
literal|null
condition|)
block|{
name|fixMerged
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|merged
operator|&&
name|change
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|MERGED
condition|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Patch set %d (%s) is not merged into"
operator|+
literal|" destination ref %s (%s), but change status is %s"
argument_list|,
name|currPs
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|,
name|refName
argument_list|,
name|tip
operator|.
name|name
argument_list|()
argument_list|,
name|change
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkExpectMergedAs ()
specifier|private
name|void
name|checkExpectMergedAs
parameter_list|()
block|{
name|ObjectId
name|objId
init|=
name|parseObjectId
argument_list|(
name|fix
operator|.
name|expectMergedAs
argument_list|,
literal|"expected merged commit"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit
init|=
name|parseCommit
argument_list|(
name|objId
argument_list|,
literal|"expected merged commit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|commit
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|commit
argument_list|,
name|currPsCommit
argument_list|)
condition|)
block|{
comment|// Caller gave us latest patch set SHA-1; verified in checkPatchSets.
return|return;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|rw
operator|.
name|isMergedInto
argument_list|(
name|commit
argument_list|,
name|tip
argument_list|)
condition|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected merged commit %s is not merged into"
operator|+
literal|" destination ref %s (%s)"
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|,
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|tip
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|RevId
name|revId
init|=
operator|new
name|RevId
argument_list|(
name|commit
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PatchSet
argument_list|>
name|patchSets
init|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|db
operator|.
name|get
argument_list|()
operator|.
name|patchSets
argument_list|()
operator|.
name|byRevision
argument_list|(
name|revId
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|Predicate
argument_list|<
name|PatchSet
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|PatchSet
name|ps
parameter_list|)
block|{
try|try
block|{
name|Change
name|c
init|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getDest
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
comment|// Should cause an error below, that's good.
block|}
block|}
block|}
argument_list|)
operator|.
name|toSortedList
argument_list|(
name|ChangeUtil
operator|.
name|PS_ID_ORDER
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|patchSets
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
comment|// No patch set for this commit; insert one.
name|rw
operator|.
name|parseBody
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|commit
operator|.
name|getFooterLines
argument_list|(
name|FooterConstants
operator|.
name|CHANGE_ID
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Missing Change-Id footer is ok, but mismatched is not.
if|if
condition|(
name|changeId
operator|!=
literal|null
operator|&&
operator|!
name|changeId
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected merged commit %s has Change-Id: %s,"
operator|+
literal|" but expected %s"
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|,
name|changeId
argument_list|,
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|insertPatchSet
argument_list|(
name|commit
argument_list|)
decl_stmt|;
if|if
condition|(
name|psId
operator|!=
literal|null
condition|)
block|{
name|checkMergedBitMatchesStatus
argument_list|(
name|psId
argument_list|,
name|commit
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// Existing patch set of this commit; check that it is the current
comment|// patch set.
comment|// TODO(dborowitz): This could be fixed if it's an older patch set of
comment|// the current change.
name|PatchSet
operator|.
name|Id
name|id
init|=
name|patchSets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|id
operator|.
name|equals
argument_list|(
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected merged commit %s corresponds to"
operator|+
literal|" patch set %s, which is not the current patch set %s"
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|,
name|id
argument_list|,
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Multiple patch sets for expected merged commit %s: %s"
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|,
name|patchSets
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Error looking up expected merged commit "
operator|+
name|fix
operator|.
name|expectMergedAs
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|insertPatchSet (RevCommit commit)
specifier|private
name|PatchSet
operator|.
name|Id
name|insertPatchSet
parameter_list|(
name|RevCommit
name|commit
parameter_list|)
block|{
name|ProblemInfo
name|p
init|=
name|problem
argument_list|(
literal|"No patch set found for merged commit "
operator|+
name|commit
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|get
argument_list|()
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIX_FAILED
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
literal|"Must be called by an identified user to insert new patch set"
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|RefControl
name|ctl
init|=
name|projectControlFactory
operator|.
name|controlFor
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|user
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|controlForRef
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|ChangeUtil
operator|.
name|nextPatchSetId
argument_list|(
name|repo
argument_list|,
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSetInserter
name|inserter
init|=
name|patchSetInserterFactory
operator|.
name|create
argument_list|(
name|ctl
argument_list|,
name|psId
argument_list|,
name|commit
argument_list|)
decl_stmt|;
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|ctl
operator|.
name|getUser
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
init|;
name|ObjectInserter
name|oi
operator|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
name|bu
operator|.
name|setRepository
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|oi
argument_list|)
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|inserter
operator|.
name|setValidatePolicy
argument_list|(
name|CommitValidators
operator|.
name|Policy
operator|.
name|NONE
argument_list|)
operator|.
name|setRunHooks
argument_list|(
literal|false
argument_list|)
operator|.
name|setSendMail
argument_list|(
literal|false
argument_list|)
operator|.
name|setAllowClosed
argument_list|(
literal|true
argument_list|)
operator|.
name|setUploader
argument_list|(
name|user
operator|.
name|get
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|setMessage
argument_list|(
literal|"Patch set for merged commit inserted by consistency checker"
argument_list|)
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|change
operator|=
name|inserter
operator|.
name|getChange
argument_list|()
expr_stmt|;
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIXED
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
literal|"Inserted as patch set "
operator|+
name|psId
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
name|psId
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|NoSuchProjectException
decl||
name|UpdateException
decl||
name|RestApiException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIX_FAILED
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
literal|"Error inserting new patch set"
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|fixMerged (ProblemInfo p)
specifier|private
name|void
name|fixMerged
parameter_list|(
name|ProblemInfo
name|p
parameter_list|)
block|{
try|try
block|{
name|change
operator|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
name|c
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ChangeUpdate
name|changeUpdate
init|=
name|changeUpdateFactory
operator|.
name|create
argument_list|(
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|change
argument_list|,
name|user
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|changeUpdate
operator|.
name|fixStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|changeUpdate
operator|.
name|commit
argument_list|()
expr_stmt|;
name|indexer
operator|.
name|index
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIXED
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
literal|"Marked change as merged"
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
decl||
name|IOException
decl||
name|NoSuchChangeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error marking "
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|"as merged"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIX_FAILED
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
literal|"Error updating status to merged"
expr_stmt|;
block|}
block|}
DECL|method|fixPatchSetRef (ProblemInfo p, PatchSet ps)
specifier|private
name|void
name|fixPatchSetRef
parameter_list|(
name|ProblemInfo
name|p
parameter_list|,
name|PatchSet
name|ps
parameter_list|)
block|{
try|try
block|{
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setRefLogIdent
argument_list|(
name|newRefLogIdent
argument_list|()
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setRefLogMessage
argument_list|(
literal|"Repair patch set ref"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RefUpdate
operator|.
name|Result
name|result
init|=
name|ru
operator|.
name|update
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|FORCED
case|:
case|case
name|FAST_FORWARD
case|:
case|case
name|NO_CHANGE
case|:
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIXED
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
literal|"Repaired patch set ref"
expr_stmt|;
return|return;
default|default:
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIX_FAILED
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
literal|"Failed to update patch set ref: "
operator|+
name|result
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error fixing patch set ref"
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|msg
operator|+
literal|' '
operator|+
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIX_FAILED
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
name|msg
expr_stmt|;
block|}
block|}
DECL|method|deletePatchSet (ProblemInfo p, PatchSet.Id psId)
specifier|private
name|void
name|deletePatchSet
parameter_list|(
name|ProblemInfo
name|p
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|)
block|{
name|ReviewDb
name|db
init|=
name|this
operator|.
name|db
operator|.
name|get
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|cid
init|=
name|psId
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
try|try
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|cid
argument_list|)
expr_stmt|;
try|try
block|{
name|Change
name|c
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|cid
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Change missing: "
operator|+
name|cid
argument_list|)
throw|;
block|}
if|if
condition|(
name|psId
operator|.
name|equals
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|PatchSet
argument_list|>
name|all
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|byChange
argument_list|(
name|cid
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|all
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
condition|)
block|{
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIX_FAILED
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
literal|"Cannot delete patch set; no patch sets would remain"
expr_stmt|;
return|return;
block|}
comment|// If there were multiple missing patch sets, assumes deletePatchSet
comment|// has been called in decreasing order, so the max remaining PatchSet
comment|// is the effective current patch set.
name|Collections
operator|.
name|sort
argument_list|(
name|all
argument_list|,
name|PS_ID_ORDER
operator|.
name|reverse
argument_list|()
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|latest
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PatchSet
name|ps
range|:
name|all
control|)
block|{
name|latest
operator|=
name|ps
operator|.
name|getId
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|c
operator|.
name|setCurrentPatchSet
argument_list|(
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|db
argument_list|,
name|latest
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|changes
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Delete dangling primary key references. Don't delete ChangeMessages,
comment|// which don't use patch sets as a primary key, and may provide useful
comment|// historical information.
name|db
operator|.
name|accountPatchReviews
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|accountPatchReviews
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|deleteKeys
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIXED
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
literal|"Deleted patch set"
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PatchSetInfoNotAvailableException
decl||
name|OrmException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error deleting patch set"
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|msg
operator|+
literal|' '
operator|+
name|psId
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIX_FAILED
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
name|msg
expr_stmt|;
block|}
block|}
DECL|method|newRefLogIdent ()
specifier|private
name|PersonIdent
name|newRefLogIdent
parameter_list|()
block|{
name|CurrentUser
name|u
init|=
name|user
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|u
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
return|return
name|u
operator|.
name|asIdentifiedUser
argument_list|()
operator|.
name|newRefLogIdent
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|serverIdent
operator|.
name|get
argument_list|()
return|;
block|}
block|}
DECL|method|parseObjectId (String objIdStr, String desc)
specifier|private
name|ObjectId
name|parseObjectId
parameter_list|(
name|String
name|objIdStr
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
try|try
block|{
return|return
name|ObjectId
operator|.
name|fromString
argument_list|(
name|objIdStr
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid revision on %s: %s"
argument_list|,
name|desc
argument_list|,
name|objIdStr
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|parseCommit (ObjectId objId, String desc)
specifier|private
name|RevCommit
name|parseCommit
parameter_list|(
name|ObjectId
name|objId
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
try|try
block|{
return|return
name|rw
operator|.
name|parseCommit
argument_list|(
name|objId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MissingObjectException
name|e
parameter_list|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Object missing: %s: %s"
argument_list|,
name|desc
argument_list|,
name|objId
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|e
parameter_list|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Not a commit: %s: %s"
argument_list|,
name|desc
argument_list|,
name|objId
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to look up: %s: %s"
argument_list|,
name|desc
argument_list|,
name|objId
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|problem (String msg)
specifier|private
name|ProblemInfo
name|problem
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|ProblemInfo
name|p
init|=
operator|new
name|ProblemInfo
argument_list|()
decl_stmt|;
name|p
operator|.
name|message
operator|=
name|msg
expr_stmt|;
name|problems
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
DECL|method|lastProblem ()
specifier|private
name|ProblemInfo
name|lastProblem
parameter_list|()
block|{
return|return
name|problems
operator|.
name|get
argument_list|(
name|problems
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|error (String msg, Throwable t)
specifier|private
name|boolean
name|error
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|problem
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// TODO(dborowitz): Expose stack trace to administrators.
name|warn
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|warn (Throwable t)
specifier|private
name|void
name|warn
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error in consistency check of change "
operator|+
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

