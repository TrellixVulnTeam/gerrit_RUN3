begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|REFS_CHANGES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbUtil
operator|.
name|intKeyOrdering
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
operator|.
name|PS_ID_ORDER
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Collections2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|FooterConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|FixInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ProblemInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ProblemInfo
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchSetUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|Accounts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|PatchSetState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdateOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RepoContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|UpdateException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Checks changes for various kinds of inconsistency and corruption.  *  *<p>A single instance may be reused for checking multiple changes, but not concurrently.  */
end_comment

begin_class
DECL|class|ConsistencyChecker
specifier|public
class|class
name|ConsistencyChecker
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConsistencyChecker
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|AutoValue
DECL|class|Result
specifier|public
specifier|abstract
specifier|static
class|class
name|Result
block|{
DECL|method|create (ChangeControl ctl, List<ProblemInfo> problems)
specifier|private
specifier|static
name|Result
name|create
parameter_list|(
name|ChangeControl
name|ctl
parameter_list|,
name|List
argument_list|<
name|ProblemInfo
argument_list|>
name|problems
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_ConsistencyChecker_Result
argument_list|(
name|ctl
operator|.
name|getId
argument_list|()
argument_list|,
name|ctl
operator|.
name|getChange
argument_list|()
argument_list|,
name|problems
argument_list|)
return|;
block|}
DECL|method|id ()
specifier|public
specifier|abstract
name|Change
operator|.
name|Id
name|id
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|change ()
specifier|public
specifier|abstract
name|Change
name|change
parameter_list|()
function_decl|;
DECL|method|problems ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|ProblemInfo
argument_list|>
name|problems
parameter_list|()
function_decl|;
block|}
DECL|field|changeControlFactory
specifier|private
specifier|final
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
DECL|field|notesFactory
specifier|private
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
decl_stmt|;
DECL|field|accounts
specifier|private
specifier|final
name|Accounts
name|accounts
decl_stmt|;
DECL|field|accountPatchReviewStore
specifier|private
specifier|final
name|DynamicItem
argument_list|<
name|AccountPatchReviewStore
argument_list|>
name|accountPatchReviewStore
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|patchSetInfoFactory
specifier|private
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
decl_stmt|;
DECL|field|patchSetInserterFactory
specifier|private
specifier|final
name|PatchSetInserter
operator|.
name|Factory
name|patchSetInserterFactory
decl_stmt|;
DECL|field|psUtil
specifier|private
specifier|final
name|PatchSetUtil
name|psUtil
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|user
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|retryHelper
specifier|private
specifier|final
name|RetryHelper
name|retryHelper
decl_stmt|;
DECL|field|updateFactory
specifier|private
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
decl_stmt|;
DECL|field|fix
specifier|private
name|FixInput
name|fix
decl_stmt|;
DECL|field|ctl
specifier|private
name|ChangeControl
name|ctl
decl_stmt|;
DECL|field|repo
specifier|private
name|Repository
name|repo
decl_stmt|;
DECL|field|rw
specifier|private
name|RevWalk
name|rw
decl_stmt|;
DECL|field|oi
specifier|private
name|ObjectInserter
name|oi
decl_stmt|;
DECL|field|tip
specifier|private
name|RevCommit
name|tip
decl_stmt|;
DECL|field|patchSetsBySha
specifier|private
name|SetMultimap
argument_list|<
name|ObjectId
argument_list|,
name|PatchSet
argument_list|>
name|patchSetsBySha
decl_stmt|;
DECL|field|currPs
specifier|private
name|PatchSet
name|currPs
decl_stmt|;
DECL|field|currPsCommit
specifier|private
name|RevCommit
name|currPsCommit
decl_stmt|;
DECL|field|problems
specifier|private
name|List
argument_list|<
name|ProblemInfo
argument_list|>
name|problems
decl_stmt|;
annotation|@
name|Inject
DECL|method|ConsistencyChecker ( @erritPersonIdent Provider<PersonIdent> serverIdent, ChangeControl.GenericFactory changeControlFactory, ChangeNotes.Factory notesFactory, Accounts accounts, DynamicItem<AccountPatchReviewStore> accountPatchReviewStore, GitRepositoryManager repoManager, PatchSetInfoFactory patchSetInfoFactory, PatchSetInserter.Factory patchSetInserterFactory, PatchSetUtil psUtil, Provider<CurrentUser> user, Provider<ReviewDb> db, RetryHelper retryHelper)
name|ConsistencyChecker
parameter_list|(
annotation|@
name|GerritPersonIdent
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
parameter_list|,
name|Accounts
name|accounts
parameter_list|,
name|DynamicItem
argument_list|<
name|AccountPatchReviewStore
argument_list|>
name|accountPatchReviewStore
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|PatchSetInfoFactory
name|patchSetInfoFactory
parameter_list|,
name|PatchSetInserter
operator|.
name|Factory
name|patchSetInserterFactory
parameter_list|,
name|PatchSetUtil
name|psUtil
parameter_list|,
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|user
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|RetryHelper
name|retryHelper
parameter_list|)
block|{
name|this
operator|.
name|accounts
operator|=
name|accounts
expr_stmt|;
name|this
operator|.
name|accountPatchReviewStore
operator|=
name|accountPatchReviewStore
expr_stmt|;
name|this
operator|.
name|changeControlFactory
operator|=
name|changeControlFactory
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|notesFactory
operator|=
name|notesFactory
expr_stmt|;
name|this
operator|.
name|patchSetInfoFactory
operator|=
name|patchSetInfoFactory
expr_stmt|;
name|this
operator|.
name|patchSetInserterFactory
operator|=
name|patchSetInserterFactory
expr_stmt|;
name|this
operator|.
name|psUtil
operator|=
name|psUtil
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|retryHelper
operator|=
name|retryHelper
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|reset ()
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|updateFactory
operator|=
literal|null
expr_stmt|;
name|ctl
operator|=
literal|null
expr_stmt|;
name|repo
operator|=
literal|null
expr_stmt|;
name|rw
operator|=
literal|null
expr_stmt|;
name|problems
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|change ()
specifier|private
name|Change
name|change
parameter_list|()
block|{
return|return
name|ctl
operator|.
name|getChange
argument_list|()
return|;
block|}
DECL|method|check (ChangeControl cc, @Nullable FixInput f)
specifier|public
name|Result
name|check
parameter_list|(
name|ChangeControl
name|cc
parameter_list|,
annotation|@
name|Nullable
name|FixInput
name|f
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|cc
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|retryHelper
operator|.
name|execute
argument_list|(
name|buf
lambda|->
block|{
try|try
block|{
name|reset
argument_list|()
expr_stmt|;
name|this
operator|.
name|updateFactory
operator|=
name|buf
expr_stmt|;
name|ctl
operator|=
name|cc
expr_stmt|;
name|fix
operator|=
name|f
expr_stmt|;
name|checkImpl
argument_list|()
expr_stmt|;
return|return
name|result
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|rw
operator|!=
literal|null
condition|)
block|{
name|rw
operator|.
name|getObjectReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|rw
operator|.
name|close
argument_list|()
expr_stmt|;
name|oi
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RestApiException
name|e
parameter_list|)
block|{
return|return
name|logAndReturnOneProblem
argument_list|(
name|e
argument_list|,
name|cc
argument_list|,
literal|"Error checking change: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UpdateException
name|e
parameter_list|)
block|{
return|return
name|logAndReturnOneProblem
argument_list|(
name|e
argument_list|,
name|cc
argument_list|,
literal|"Error checking change"
argument_list|)
return|;
block|}
block|}
DECL|method|logAndReturnOneProblem (Exception e, ChangeControl cc, String problem)
specifier|private
name|Result
name|logAndReturnOneProblem
parameter_list|(
name|Exception
name|e
parameter_list|,
name|ChangeControl
name|cc
parameter_list|,
name|String
name|problem
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error checking change "
operator|+
name|cc
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Result
operator|.
name|create
argument_list|(
name|cc
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|problem
argument_list|(
name|problem
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|checkImpl ()
specifier|private
name|void
name|checkImpl
parameter_list|()
block|{
name|checkOwner
argument_list|()
expr_stmt|;
name|checkCurrentPatchSetEntity
argument_list|()
expr_stmt|;
comment|// All checks that require the repo.
if|if
condition|(
operator|!
name|openRepo
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|checkPatchSets
argument_list|()
condition|)
block|{
return|return;
block|}
name|checkMerged
argument_list|()
expr_stmt|;
block|}
DECL|method|checkOwner ()
specifier|private
name|void
name|checkOwner
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|accounts
operator|.
name|get
argument_list|(
name|change
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|problem
argument_list|(
literal|"Missing change owner: "
operator|+
name|change
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Failed to look up owner"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkCurrentPatchSetEntity ()
specifier|private
name|void
name|checkCurrentPatchSetEntity
parameter_list|()
block|{
try|try
block|{
name|currPs
operator|=
name|psUtil
operator|.
name|current
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|ctl
operator|.
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|currPs
operator|==
literal|null
condition|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Current patch set %d not found"
argument_list|,
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Failed to look up current patch set"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|openRepo ()
specifier|private
name|boolean
name|openRepo
parameter_list|()
block|{
name|Project
operator|.
name|NameKey
name|project
init|=
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
try|try
block|{
name|repo
operator|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|oi
operator|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
expr_stmt|;
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|oi
operator|.
name|newReader
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
return|return
name|error
argument_list|(
literal|"Destination repository not found: "
operator|+
name|project
argument_list|,
name|e
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|error
argument_list|(
literal|"Failed to open repository: "
operator|+
name|project
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
DECL|method|checkPatchSets ()
specifier|private
name|boolean
name|checkPatchSets
parameter_list|()
block|{
name|List
argument_list|<
name|PatchSet
argument_list|>
name|all
decl_stmt|;
try|try
block|{
comment|// Iterate in descending order.
name|all
operator|=
name|PS_ID_ORDER
operator|.
name|sortedCopy
argument_list|(
name|psUtil
operator|.
name|byChange
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|ctl
operator|.
name|getNotes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
return|return
name|error
argument_list|(
literal|"Failed to look up patch sets"
argument_list|,
name|e
argument_list|)
return|;
block|}
name|patchSetsBySha
operator|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|(
name|all
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|treeSetValues
argument_list|(
name|PS_ID_ORDER
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|refs
decl_stmt|;
try|try
block|{
name|refs
operator|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
name|all
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ps
lambda|->
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"error reading refs"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|refs
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|DeletePatchSetFromDbOp
argument_list|>
name|deletePatchSetOps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSet
name|ps
range|:
name|all
control|)
block|{
comment|// Check revision format.
name|int
name|psNum
init|=
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|refName
init|=
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
decl_stmt|;
name|ObjectId
name|objId
init|=
name|parseObjectId
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|"patch set "
operator|+
name|psNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|objId
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|patchSetsBySha
operator|.
name|put
argument_list|(
name|objId
argument_list|,
name|ps
argument_list|)
expr_stmt|;
comment|// Check ref existence.
name|ProblemInfo
name|refProblem
init|=
literal|null
decl_stmt|;
name|Ref
name|ref
init|=
name|refs
operator|.
name|get
argument_list|(
name|refName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|refProblem
operator|=
name|problem
argument_list|(
literal|"Ref missing: "
operator|+
name|refName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|objId
operator|.
name|equals
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|actual
init|=
name|ref
operator|.
name|getObjectId
argument_list|()
operator|!=
literal|null
condition|?
name|ref
operator|.
name|getObjectId
argument_list|()
operator|.
name|name
argument_list|()
else|:
literal|"null"
decl_stmt|;
name|refProblem
operator|=
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected %s to point to %s, found %s"
argument_list|,
name|ref
operator|.
name|getName
argument_list|()
argument_list|,
name|objId
operator|.
name|name
argument_list|()
argument_list|,
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check object existence.
name|RevCommit
name|psCommit
init|=
name|parseCommit
argument_list|(
name|objId
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"patch set %d"
argument_list|,
name|psNum
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|psCommit
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|fix
operator|!=
literal|null
operator|&&
name|fix
operator|.
name|deletePatchSetIfCommitMissing
condition|)
block|{
name|deletePatchSetOps
operator|.
name|add
argument_list|(
operator|new
name|DeletePatchSetFromDbOp
argument_list|(
name|lastProblem
argument_list|()
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
elseif|else
if|if
condition|(
name|refProblem
operator|!=
literal|null
operator|&&
name|fix
operator|!=
literal|null
condition|)
block|{
name|fixPatchSetRef
argument_list|(
name|refProblem
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
name|currPsCommit
operator|=
name|psCommit
expr_stmt|;
block|}
block|}
comment|// Delete any bad patch sets found above, in a single update.
name|deletePatchSets
argument_list|(
name|deletePatchSetOps
argument_list|)
expr_stmt|;
comment|// Check for duplicates.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ObjectId
argument_list|,
name|Collection
argument_list|<
name|PatchSet
argument_list|>
argument_list|>
name|e
range|:
name|patchSetsBySha
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Multiple patch sets pointing to %s: %s"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|Collections2
operator|.
name|transform
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|PatchSet
operator|::
name|getPatchSetId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|currPs
operator|!=
literal|null
operator|&&
name|currPsCommit
operator|!=
literal|null
return|;
block|}
DECL|method|checkMerged ()
specifier|private
name|void
name|checkMerged
parameter_list|()
block|{
name|String
name|refName
init|=
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|Ref
name|dest
decl_stmt|;
try|try
block|{
name|dest
operator|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
name|refName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|problem
argument_list|(
literal|"Failed to look up destination ref: "
operator|+
name|refName
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
block|{
name|problem
argument_list|(
literal|"Destination ref not found (may be new branch): "
operator|+
name|refName
argument_list|)
expr_stmt|;
return|return;
block|}
name|tip
operator|=
name|parseCommit
argument_list|(
name|dest
operator|.
name|getObjectId
argument_list|()
argument_list|,
literal|"destination ref "
operator|+
name|refName
argument_list|)
expr_stmt|;
if|if
condition|(
name|tip
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|fix
operator|!=
literal|null
operator|&&
name|fix
operator|.
name|expectMergedAs
operator|!=
literal|null
condition|)
block|{
name|checkExpectMergedAs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|merged
decl_stmt|;
try|try
block|{
name|merged
operator|=
name|rw
operator|.
name|isMergedInto
argument_list|(
name|currPsCommit
argument_list|,
name|tip
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|problem
argument_list|(
literal|"Error checking whether patch set "
operator|+
name|currPs
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|" is merged"
argument_list|)
expr_stmt|;
return|return;
block|}
name|checkMergedBitMatchesStatus
argument_list|(
name|currPs
operator|.
name|getId
argument_list|()
argument_list|,
name|currPsCommit
argument_list|,
name|merged
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|wrongChangeStatus (PatchSet.Id psId, RevCommit commit)
specifier|private
name|ProblemInfo
name|wrongChangeStatus
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|RevCommit
name|commit
parameter_list|)
block|{
name|String
name|refName
init|=
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Patch set %d (%s) is merged into destination ref %s (%s), but change"
operator|+
literal|" status is %s"
argument_list|,
name|psId
operator|.
name|get
argument_list|()
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|,
name|refName
argument_list|,
name|tip
operator|.
name|name
argument_list|()
argument_list|,
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|checkMergedBitMatchesStatus (PatchSet.Id psId, RevCommit commit, boolean merged)
specifier|private
name|void
name|checkMergedBitMatchesStatus
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|RevCommit
name|commit
parameter_list|,
name|boolean
name|merged
parameter_list|)
block|{
name|String
name|refName
init|=
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|merged
operator|&&
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|!=
name|Change
operator|.
name|Status
operator|.
name|MERGED
condition|)
block|{
name|ProblemInfo
name|p
init|=
name|wrongChangeStatus
argument_list|(
name|psId
argument_list|,
name|commit
argument_list|)
decl_stmt|;
if|if
condition|(
name|fix
operator|!=
literal|null
condition|)
block|{
name|fixMerged
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|merged
operator|&&
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|MERGED
condition|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Patch set %d (%s) is not merged into"
operator|+
literal|" destination ref %s (%s), but change status is %s"
argument_list|,
name|currPs
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|,
name|refName
argument_list|,
name|tip
operator|.
name|name
argument_list|()
argument_list|,
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkExpectMergedAs ()
specifier|private
name|void
name|checkExpectMergedAs
parameter_list|()
block|{
name|ObjectId
name|objId
init|=
name|parseObjectId
argument_list|(
name|fix
operator|.
name|expectMergedAs
argument_list|,
literal|"expected merged commit"
argument_list|)
decl_stmt|;
name|RevCommit
name|commit
init|=
name|parseCommit
argument_list|(
name|objId
argument_list|,
literal|"expected merged commit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|commit
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|rw
operator|.
name|isMergedInto
argument_list|(
name|commit
argument_list|,
name|tip
argument_list|)
condition|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected merged commit %s is not merged into destination ref %s (%s)"
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|,
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|tip
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|thisCommitPsIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Ref
name|ref
range|:
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|REFS_CHANGES
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ref
operator|.
name|getObjectId
argument_list|()
operator|.
name|equals
argument_list|(
name|commit
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|PatchSet
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|psId
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|Change
name|c
init|=
name|notesFactory
operator|.
name|createChecked
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|change
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|psId
operator|.
name|getParentKey
argument_list|()
argument_list|)
operator|.
name|getChange
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|getDest
argument_list|()
operator|.
name|equals
argument_list|(
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// Include this patch set; should cause an error below, which is good.
block|}
name|thisCommitPsIds
operator|.
name|add
argument_list|(
name|psId
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|thisCommitPsIds
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
comment|// No patch set for this commit; insert one.
name|rw
operator|.
name|parseBody
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|commit
operator|.
name|getFooterLines
argument_list|(
name|FooterConstants
operator|.
name|CHANGE_ID
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Missing Change-Id footer is ok, but mismatched is not.
if|if
condition|(
name|changeId
operator|!=
literal|null
operator|&&
operator|!
name|changeId
operator|.
name|equals
argument_list|(
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected merged commit %s has Change-Id: %s, but expected %s"
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|,
name|changeId
argument_list|,
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|insertMergedPatchSet
argument_list|(
name|commit
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// Existing patch set ref pointing to this commit.
name|PatchSet
operator|.
name|Id
name|id
init|=
name|thisCommitPsIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
comment|// If it's the current patch set, we can just fix the status.
name|fixMerged
argument_list|(
name|wrongChangeStatus
argument_list|(
name|id
argument_list|,
name|commit
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|.
name|get
argument_list|()
operator|>
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// If it's newer than the current patch set, reuse this patch set
comment|// ID when inserting a new merged patch set.
name|insertMergedPatchSet
argument_list|(
name|commit
argument_list|,
name|id
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If it's older than the current patch set, just delete the old
comment|// ref, and use a new ID when inserting a new merged patch set.
name|insertMergedPatchSet
argument_list|(
name|commit
argument_list|,
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Multiple patch sets for expected merged commit %s: %s"
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|,
name|intKeyOrdering
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|thisCommitPsIds
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Error looking up expected merged commit "
operator|+
name|fix
operator|.
name|expectMergedAs
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|insertMergedPatchSet ( final RevCommit commit, @Nullable PatchSet.Id psIdToDelete, boolean reuseOldPsId)
specifier|private
name|void
name|insertMergedPatchSet
parameter_list|(
specifier|final
name|RevCommit
name|commit
parameter_list|,
annotation|@
name|Nullable
name|PatchSet
operator|.
name|Id
name|psIdToDelete
parameter_list|,
name|boolean
name|reuseOldPsId
parameter_list|)
block|{
name|ProblemInfo
name|notFound
init|=
name|problem
argument_list|(
literal|"No patch set found for merged commit "
operator|+
name|commit
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|get
argument_list|()
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
name|notFound
operator|.
name|status
operator|=
name|Status
operator|.
name|FIX_FAILED
expr_stmt|;
name|notFound
operator|.
name|outcome
operator|=
literal|"Must be called by an identified user to insert new patch set"
expr_stmt|;
return|return;
block|}
name|ProblemInfo
name|insertPatchSetProblem
decl_stmt|;
name|ProblemInfo
name|deleteOldPatchSetProblem
decl_stmt|;
if|if
condition|(
name|psIdToDelete
operator|==
literal|null
condition|)
block|{
name|insertPatchSetProblem
operator|=
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected merged commit %s has no associated patch set"
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|deleteOldPatchSetProblem
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Expected merge commit %s corresponds to patch set %s,"
operator|+
literal|" not the current patch set %s"
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|,
name|psIdToDelete
operator|.
name|get
argument_list|()
argument_list|,
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
comment|// Maybe an identical problem, but different fix.
name|deleteOldPatchSetProblem
operator|=
name|reuseOldPsId
condition|?
literal|null
else|:
name|problem
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|insertPatchSetProblem
operator|=
name|problem
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ProblemInfo
argument_list|>
name|currProblems
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|currProblems
operator|.
name|add
argument_list|(
name|notFound
argument_list|)
expr_stmt|;
if|if
condition|(
name|deleteOldPatchSetProblem
operator|!=
literal|null
condition|)
block|{
name|currProblems
operator|.
name|add
argument_list|(
name|insertPatchSetProblem
argument_list|)
expr_stmt|;
block|}
name|currProblems
operator|.
name|add
argument_list|(
name|insertPatchSetProblem
argument_list|)
expr_stmt|;
try|try
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
operator|(
name|psIdToDelete
operator|!=
literal|null
operator|&&
name|reuseOldPsId
operator|)
condition|?
name|psIdToDelete
else|:
name|ChangeUtil
operator|.
name|nextPatchSetId
argument_list|(
name|repo
argument_list|,
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSetInserter
name|inserter
init|=
name|patchSetInserterFactory
operator|.
name|create
argument_list|(
name|ctl
argument_list|,
name|psId
argument_list|,
name|commit
argument_list|)
decl_stmt|;
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|newBatchUpdate
argument_list|()
init|)
block|{
name|bu
operator|.
name|setRepository
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|oi
argument_list|)
expr_stmt|;
if|if
condition|(
name|psIdToDelete
operator|!=
literal|null
condition|)
block|{
comment|// Delete the given patch set ref. If reuseOldPsId is true,
comment|// PatchSetInserter will reinsert the same ref, making it a no-op.
name|bu
operator|.
name|addOp
argument_list|(
name|ctl
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|BatchUpdateOp
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|updateRepo
parameter_list|(
name|RepoContext
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|ctx
operator|.
name|addRefUpdate
argument_list|(
name|commit
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|psIdToDelete
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reuseOldPsId
condition|)
block|{
name|bu
operator|.
name|addOp
argument_list|(
name|ctl
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|DeletePatchSetFromDbOp
argument_list|(
name|checkNotNull
argument_list|(
name|deleteOldPatchSetProblem
argument_list|)
argument_list|,
name|psIdToDelete
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|bu
operator|.
name|addOp
argument_list|(
name|ctl
operator|.
name|getId
argument_list|()
argument_list|,
name|inserter
operator|.
name|setValidate
argument_list|(
literal|false
argument_list|)
operator|.
name|setFireRevisionCreated
argument_list|(
literal|false
argument_list|)
operator|.
name|setNotify
argument_list|(
name|NotifyHandling
operator|.
name|NONE
argument_list|)
operator|.
name|setAllowClosed
argument_list|(
literal|true
argument_list|)
operator|.
name|setMessage
argument_list|(
literal|"Patch set for merged commit inserted by consistency checker"
argument_list|)
argument_list|)
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|ctl
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|FixMergedOp
argument_list|(
name|notFound
argument_list|)
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|ctl
operator|=
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|inserter
operator|.
name|getChange
argument_list|()
argument_list|,
name|ctl
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|insertPatchSetProblem
operator|.
name|status
operator|=
name|Status
operator|.
name|FIXED
expr_stmt|;
name|insertPatchSetProblem
operator|.
name|outcome
operator|=
literal|"Inserted as patch set "
operator|+
name|psId
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
decl||
name|IOException
decl||
name|UpdateException
decl||
name|RestApiException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
for|for
control|(
name|ProblemInfo
name|pi
range|:
name|currProblems
control|)
block|{
name|pi
operator|.
name|status
operator|=
name|Status
operator|.
name|FIX_FAILED
expr_stmt|;
name|pi
operator|.
name|outcome
operator|=
literal|"Error inserting merged patch set"
expr_stmt|;
block|}
return|return;
block|}
block|}
DECL|class|FixMergedOp
specifier|private
specifier|static
class|class
name|FixMergedOp
implements|implements
name|BatchUpdateOp
block|{
DECL|field|p
specifier|private
specifier|final
name|ProblemInfo
name|p
decl_stmt|;
DECL|method|FixMergedOp (ProblemInfo p)
specifier|private
name|FixMergedOp
parameter_list|(
name|ProblemInfo
name|p
parameter_list|)
block|{
name|this
operator|.
name|p
operator|=
name|p
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateChange (ChangeContext ctx)
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|OrmException
block|{
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getUpdate
argument_list|(
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|fixStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIXED
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
literal|"Marked change as merged"
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|method|fixMerged (ProblemInfo p)
specifier|private
name|void
name|fixMerged
parameter_list|(
name|ProblemInfo
name|p
parameter_list|)
block|{
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|newBatchUpdate
argument_list|()
init|)
block|{
name|bu
operator|.
name|setRepository
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|oi
argument_list|)
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|ctl
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|FixMergedOp
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UpdateException
decl||
name|RestApiException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error marking "
operator|+
name|ctl
operator|.
name|getId
argument_list|()
operator|+
literal|"as merged"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIX_FAILED
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
literal|"Error updating status to merged"
expr_stmt|;
block|}
block|}
DECL|method|newBatchUpdate ()
specifier|private
name|BatchUpdate
name|newBatchUpdate
parameter_list|()
block|{
return|return
name|updateFactory
operator|.
name|create
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|change
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|ctl
operator|.
name|getUser
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
return|;
block|}
DECL|method|fixPatchSetRef (ProblemInfo p, PatchSet ps)
specifier|private
name|void
name|fixPatchSetRef
parameter_list|(
name|ProblemInfo
name|p
parameter_list|,
name|PatchSet
name|ps
parameter_list|)
block|{
try|try
block|{
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setRefLogIdent
argument_list|(
name|newRefLogIdent
argument_list|()
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setRefLogMessage
argument_list|(
literal|"Repair patch set ref"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RefUpdate
operator|.
name|Result
name|result
init|=
name|ru
operator|.
name|update
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|FORCED
case|:
case|case
name|FAST_FORWARD
case|:
case|case
name|NO_CHANGE
case|:
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIXED
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
literal|"Repaired patch set ref"
expr_stmt|;
return|return;
case|case
name|IO_FAILURE
case|:
case|case
name|LOCK_FAILURE
case|:
case|case
name|NOT_ATTEMPTED
case|:
case|case
name|REJECTED
case|:
case|case
name|REJECTED_CURRENT_BRANCH
case|:
case|case
name|RENAMED
case|:
case|case
name|REJECTED_MISSING_OBJECT
case|:
case|case
name|REJECTED_OTHER_REASON
case|:
default|default:
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIX_FAILED
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
literal|"Failed to update patch set ref: "
operator|+
name|result
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error fixing patch set ref"
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|msg
operator|+
literal|' '
operator|+
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIX_FAILED
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
name|msg
expr_stmt|;
block|}
block|}
DECL|method|deletePatchSets (List<DeletePatchSetFromDbOp> ops)
specifier|private
name|void
name|deletePatchSets
parameter_list|(
name|List
argument_list|<
name|DeletePatchSetFromDbOp
argument_list|>
name|ops
parameter_list|)
block|{
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|newBatchUpdate
argument_list|()
init|)
block|{
name|bu
operator|.
name|setRepository
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|oi
argument_list|)
expr_stmt|;
for|for
control|(
name|DeletePatchSetFromDbOp
name|op
range|:
name|ops
control|)
block|{
name|checkArgument
argument_list|(
name|op
operator|.
name|psId
operator|.
name|getParentKey
argument_list|()
operator|.
name|equals
argument_list|(
name|ctl
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|ctl
operator|.
name|getId
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
name|bu
operator|.
name|addOp
argument_list|(
name|ctl
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|UpdateCurrentPatchSetOp
argument_list|(
name|ops
argument_list|)
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoPatchSetsWouldRemainException
name|e
parameter_list|)
block|{
for|for
control|(
name|DeletePatchSetFromDbOp
name|op
range|:
name|ops
control|)
block|{
name|op
operator|.
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIX_FAILED
expr_stmt|;
name|op
operator|.
name|p
operator|.
name|outcome
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UpdateException
decl||
name|RestApiException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error deleting patch set"
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|msg
operator|+
literal|" of change "
operator|+
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|psId
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
for|for
control|(
name|DeletePatchSetFromDbOp
name|op
range|:
name|ops
control|)
block|{
comment|// Overwrite existing statuses that were set before the transaction was
comment|// rolled back.
name|op
operator|.
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIX_FAILED
expr_stmt|;
name|op
operator|.
name|p
operator|.
name|outcome
operator|=
name|msg
expr_stmt|;
block|}
block|}
block|}
DECL|class|DeletePatchSetFromDbOp
specifier|private
class|class
name|DeletePatchSetFromDbOp
implements|implements
name|BatchUpdateOp
block|{
DECL|field|p
specifier|private
specifier|final
name|ProblemInfo
name|p
decl_stmt|;
DECL|field|psId
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
decl_stmt|;
DECL|method|DeletePatchSetFromDbOp (ProblemInfo p, PatchSet.Id psId)
specifier|private
name|DeletePatchSetFromDbOp
parameter_list|(
name|ProblemInfo
name|p
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|)
block|{
name|this
operator|.
name|p
operator|=
name|p
expr_stmt|;
name|this
operator|.
name|psId
operator|=
name|psId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateChange (ChangeContext ctx)
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|OrmException
throws|,
name|PatchSetInfoNotAvailableException
block|{
comment|// Delete dangling key references.
name|ReviewDb
name|db
init|=
name|DeleteChangeOp
operator|.
name|unwrap
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|)
decl_stmt|;
name|accountPatchReviewStore
operator|.
name|get
argument_list|()
operator|.
name|clearReviewed
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|byChange
argument_list|(
name|psId
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|delete
argument_list|(
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|deleteKeys
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
comment|// NoteDb requires no additional fiddling; setting the state to deleted is
comment|// sufficient to filter everything else out.
name|ctx
operator|.
name|getUpdate
argument_list|(
name|psId
argument_list|)
operator|.
name|setPatchSetState
argument_list|(
name|PatchSetState
operator|.
name|DELETED
argument_list|)
expr_stmt|;
name|p
operator|.
name|status
operator|=
name|Status
operator|.
name|FIXED
expr_stmt|;
name|p
operator|.
name|outcome
operator|=
literal|"Deleted patch set"
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|class|NoPatchSetsWouldRemainException
specifier|private
specifier|static
class|class
name|NoPatchSetsWouldRemainException
extends|extends
name|RestApiException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|NoPatchSetsWouldRemainException ()
specifier|private
name|NoPatchSetsWouldRemainException
parameter_list|()
block|{
name|super
argument_list|(
literal|"Cannot delete patch set; no patch sets would remain"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|UpdateCurrentPatchSetOp
specifier|private
class|class
name|UpdateCurrentPatchSetOp
implements|implements
name|BatchUpdateOp
block|{
DECL|field|toDelete
specifier|private
specifier|final
name|Set
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|toDelete
decl_stmt|;
DECL|method|UpdateCurrentPatchSetOp (List<DeletePatchSetFromDbOp> deleteOps)
specifier|private
name|UpdateCurrentPatchSetOp
parameter_list|(
name|List
argument_list|<
name|DeletePatchSetFromDbOp
argument_list|>
name|deleteOps
parameter_list|)
block|{
name|toDelete
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|DeletePatchSetFromDbOp
name|op
range|:
name|deleteOps
control|)
block|{
name|toDelete
operator|.
name|add
argument_list|(
name|op
operator|.
name|psId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateChange (ChangeContext ctx)
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|OrmException
throws|,
name|PatchSetInfoNotAvailableException
throws|,
name|NoPatchSetsWouldRemainException
block|{
if|if
condition|(
operator|!
name|toDelete
operator|.
name|contains
argument_list|(
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Set
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|all
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Doesn't make any assumptions about the order in which deletes happen
comment|// and whether they are seen by this op; we are already given the full set
comment|// of patch sets that will eventually be deleted in this update.
for|for
control|(
name|PatchSet
name|ps
range|:
name|psUtil
operator|.
name|byChange
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|toDelete
operator|.
name|contains
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|all
operator|.
name|add
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|all
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoPatchSetsWouldRemainException
argument_list|()
throw|;
block|}
name|PatchSet
operator|.
name|Id
name|latest
init|=
name|ReviewDbUtil
operator|.
name|intKeyOrdering
argument_list|()
operator|.
name|max
argument_list|(
name|all
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|setCurrentPatchSet
argument_list|(
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|,
name|latest
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|method|newRefLogIdent ()
specifier|private
name|PersonIdent
name|newRefLogIdent
parameter_list|()
block|{
name|CurrentUser
name|u
init|=
name|user
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|u
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
return|return
name|u
operator|.
name|asIdentifiedUser
argument_list|()
operator|.
name|newRefLogIdent
argument_list|()
return|;
block|}
return|return
name|serverIdent
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|parseObjectId (String objIdStr, String desc)
specifier|private
name|ObjectId
name|parseObjectId
parameter_list|(
name|String
name|objIdStr
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
try|try
block|{
return|return
name|ObjectId
operator|.
name|fromString
argument_list|(
name|objIdStr
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid revision on %s: %s"
argument_list|,
name|desc
argument_list|,
name|objIdStr
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|parseCommit (ObjectId objId, String desc)
specifier|private
name|RevCommit
name|parseCommit
parameter_list|(
name|ObjectId
name|objId
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
try|try
block|{
return|return
name|rw
operator|.
name|parseCommit
argument_list|(
name|objId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MissingObjectException
name|e
parameter_list|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Object missing: %s: %s"
argument_list|,
name|desc
argument_list|,
name|objId
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|e
parameter_list|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Not a commit: %s: %s"
argument_list|,
name|desc
argument_list|,
name|objId
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|problem
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to look up: %s: %s"
argument_list|,
name|desc
argument_list|,
name|objId
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|problem (String msg)
specifier|private
name|ProblemInfo
name|problem
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|ProblemInfo
name|p
init|=
operator|new
name|ProblemInfo
argument_list|()
decl_stmt|;
name|p
operator|.
name|message
operator|=
name|checkNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|problems
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
DECL|method|lastProblem ()
specifier|private
name|ProblemInfo
name|lastProblem
parameter_list|()
block|{
return|return
name|problems
operator|.
name|get
argument_list|(
name|problems
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|error (String msg, Throwable t)
specifier|private
name|boolean
name|error
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|problem
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// TODO(dborowitz): Expose stack trace to administrators.
name|warn
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|warn (Throwable t)
specifier|private
name|void
name|warn
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error in consistency check of change "
operator|+
name|ctl
operator|.
name|getId
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
DECL|method|result ()
specifier|private
name|Result
name|result
parameter_list|()
block|{
return|return
name|Result
operator|.
name|create
argument_list|(
name|ctl
argument_list|,
name|problems
argument_list|)
return|;
block|}
block|}
end_class

end_unit

