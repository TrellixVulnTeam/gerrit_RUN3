begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
operator|.
name|REFS_DASHBOARDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestReadView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|DashboardsCollection
operator|.
name|DashboardInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|GetDashboard
class|class
name|GetDashboard
implements|implements
name|RestReadView
argument_list|<
name|DashboardResource
argument_list|>
block|{
DECL|field|dashboards
specifier|private
specifier|final
name|DashboardsCollection
name|dashboards
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--inherited"
argument_list|,
name|usage
operator|=
literal|"include inherited dashboards"
argument_list|)
DECL|field|inherited
specifier|private
name|boolean
name|inherited
decl_stmt|;
annotation|@
name|Inject
DECL|method|GetDashboard (DashboardsCollection dashboards)
name|GetDashboard
parameter_list|(
name|DashboardsCollection
name|dashboards
parameter_list|)
block|{
name|this
operator|.
name|dashboards
operator|=
name|dashboards
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (DashboardResource resource)
specifier|public
name|DashboardInfo
name|apply
parameter_list|(
name|DashboardResource
name|resource
parameter_list|)
throws|throws
name|ResourceNotFoundException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
if|if
condition|(
name|inherited
operator|&&
operator|!
name|resource
operator|.
name|isProjectDefault
argument_list|()
condition|)
block|{
comment|// inherited flag can only be used with default.
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"inherited"
argument_list|)
throw|;
block|}
if|if
condition|(
name|resource
operator|.
name|isProjectDefault
argument_list|()
condition|)
block|{
comment|// The default is not resolved to a definition yet.
name|resource
operator|=
name|defaultOf
argument_list|(
name|resource
operator|.
name|getControl
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|DashboardsCollection
operator|.
name|parse
argument_list|(
name|resource
operator|.
name|getControl
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|resource
operator|.
name|getRefName
argument_list|()
operator|.
name|substring
argument_list|(
name|REFS_DASHBOARDS
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|resource
operator|.
name|getPathName
argument_list|()
argument_list|,
name|resource
operator|.
name|getConfig
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|defaultOf (ProjectControl ctl)
specifier|private
name|DashboardResource
name|defaultOf
parameter_list|(
name|ProjectControl
name|ctl
parameter_list|)
throws|throws
name|ResourceNotFoundException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|String
name|id
init|=
name|ctl
operator|.
name|getProject
argument_list|()
operator|.
name|getLocalDefaultDashboard
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|id
operator|=
name|ctl
operator|.
name|getProject
argument_list|()
operator|.
name|getDefaultDashboard
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"default"
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|dashboards
operator|.
name|parse
argument_list|(
operator|new
name|ProjectResource
argument_list|(
name|ctl
argument_list|)
argument_list|,
name|id
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|inherited
condition|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|()
throw|;
block|}
name|Set
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|seen
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|seen
operator|.
name|add
argument_list|(
name|ctl
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
name|ProjectState
name|ps
init|=
name|ctl
operator|.
name|getProjectState
argument_list|()
operator|.
name|getParentState
argument_list|()
decl_stmt|;
while|while
condition|(
name|ps
operator|!=
literal|null
operator|&&
name|seen
operator|.
name|add
argument_list|(
name|ps
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|)
condition|)
block|{
name|id
operator|=
name|ps
operator|.
name|getProject
argument_list|()
operator|.
name|getDefaultDashboard
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"default"
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|ctl
operator|=
name|ps
operator|.
name|controlFor
argument_list|(
name|ctl
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|dashboards
operator|.
name|parse
argument_list|(
operator|new
name|ProjectResource
argument_list|(
name|ctl
argument_list|)
argument_list|,
name|id
argument_list|)
return|;
block|}
name|ps
operator|=
name|ps
operator|.
name|getParentState
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

