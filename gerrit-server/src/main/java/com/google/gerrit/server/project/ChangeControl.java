begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|rules
operator|.
name|PrologEnvironment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|rules
operator|.
name|StoredValues
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|compiler
operator|.
name|CompileException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|IntegerTerm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|ListTerm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|Prolog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|PrologException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|StructureTerm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|VariableTerm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/** Access control management for a user accessing a single change. */
end_comment

begin_class
DECL|class|ChangeControl
specifier|public
class|class
name|ChangeControl
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChangeControl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|GenericFactory
specifier|public
specifier|static
class|class
name|GenericFactory
block|{
DECL|field|projectControl
specifier|private
specifier|final
name|ProjectControl
operator|.
name|GenericFactory
name|projectControl
decl_stmt|;
annotation|@
name|Inject
DECL|method|GenericFactory (ProjectControl.GenericFactory p)
name|GenericFactory
parameter_list|(
name|ProjectControl
operator|.
name|GenericFactory
name|p
parameter_list|)
block|{
name|projectControl
operator|=
name|p
expr_stmt|;
block|}
DECL|method|controlFor (Change change, CurrentUser user)
specifier|public
name|ChangeControl
name|controlFor
parameter_list|(
name|Change
name|change
parameter_list|,
name|CurrentUser
name|user
parameter_list|)
throws|throws
name|NoSuchChangeException
block|{
specifier|final
name|Project
operator|.
name|NameKey
name|projectKey
init|=
name|change
operator|.
name|getProject
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|projectControl
operator|.
name|controlFor
argument_list|(
name|projectKey
argument_list|,
name|user
argument_list|)
operator|.
name|controlFor
argument_list|(
name|change
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|field|projectControl
specifier|private
specifier|final
name|ProjectControl
operator|.
name|Factory
name|projectControl
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
annotation|@
name|Inject
DECL|method|Factory (final ProjectControl.Factory p, final Provider<ReviewDb> d)
name|Factory
parameter_list|(
specifier|final
name|ProjectControl
operator|.
name|Factory
name|p
parameter_list|,
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|d
parameter_list|)
block|{
name|projectControl
operator|=
name|p
expr_stmt|;
name|db
operator|=
name|d
expr_stmt|;
block|}
DECL|method|controlFor (final Change.Id id)
specifier|public
name|ChangeControl
name|controlFor
parameter_list|(
specifier|final
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|NoSuchChangeException
block|{
specifier|final
name|Change
name|change
decl_stmt|;
try|try
block|{
name|change
operator|=
name|db
operator|.
name|get
argument_list|()
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|id
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|controlFor
argument_list|(
name|change
argument_list|)
return|;
block|}
DECL|method|controlFor (final Change change)
specifier|public
name|ChangeControl
name|controlFor
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|)
throws|throws
name|NoSuchChangeException
block|{
try|try
block|{
specifier|final
name|Project
operator|.
name|NameKey
name|projectKey
init|=
name|change
operator|.
name|getProject
argument_list|()
decl_stmt|;
return|return
name|projectControl
operator|.
name|validateFor
argument_list|(
name|projectKey
argument_list|)
operator|.
name|controlFor
argument_list|(
name|change
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|validateFor (final Change.Id id)
specifier|public
name|ChangeControl
name|validateFor
parameter_list|(
specifier|final
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|OrmException
block|{
return|return
name|validate
argument_list|(
name|controlFor
argument_list|(
name|id
argument_list|)
argument_list|,
name|db
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|validateFor (final Change change)
specifier|public
name|ChangeControl
name|validateFor
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|OrmException
block|{
return|return
name|validate
argument_list|(
name|controlFor
argument_list|(
name|change
argument_list|)
argument_list|,
name|db
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|validate (final ChangeControl c, final ReviewDb db)
specifier|private
specifier|static
name|ChangeControl
name|validate
parameter_list|(
specifier|final
name|ChangeControl
name|c
parameter_list|,
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|OrmException
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|isVisible
argument_list|(
name|db
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|c
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|c
return|;
block|}
block|}
DECL|field|refControl
specifier|private
specifier|final
name|RefControl
name|refControl
decl_stmt|;
DECL|field|change
specifier|private
specifier|final
name|Change
name|change
decl_stmt|;
DECL|method|ChangeControl (final RefControl r, final Change c)
name|ChangeControl
parameter_list|(
specifier|final
name|RefControl
name|r
parameter_list|,
specifier|final
name|Change
name|c
parameter_list|)
block|{
name|this
operator|.
name|refControl
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|change
operator|=
name|c
expr_stmt|;
block|}
DECL|method|forUser (final CurrentUser who)
specifier|public
name|ChangeControl
name|forUser
parameter_list|(
specifier|final
name|CurrentUser
name|who
parameter_list|)
block|{
return|return
operator|new
name|ChangeControl
argument_list|(
name|getRefControl
argument_list|()
operator|.
name|forUser
argument_list|(
name|who
argument_list|)
argument_list|,
name|getChange
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getRefControl ()
specifier|public
name|RefControl
name|getRefControl
parameter_list|()
block|{
return|return
name|refControl
return|;
block|}
DECL|method|getCurrentUser ()
specifier|public
name|CurrentUser
name|getCurrentUser
parameter_list|()
block|{
return|return
name|getRefControl
argument_list|()
operator|.
name|getCurrentUser
argument_list|()
return|;
block|}
DECL|method|getProjectControl ()
specifier|public
name|ProjectControl
name|getProjectControl
parameter_list|()
block|{
return|return
name|getRefControl
argument_list|()
operator|.
name|getProjectControl
argument_list|()
return|;
block|}
DECL|method|getProject ()
specifier|public
name|Project
name|getProject
parameter_list|()
block|{
return|return
name|getProjectControl
argument_list|()
operator|.
name|getProject
argument_list|()
return|;
block|}
DECL|method|getChange ()
specifier|public
name|Change
name|getChange
parameter_list|()
block|{
return|return
name|change
return|;
block|}
comment|/** Can this user see this change? */
DECL|method|isVisible (ReviewDb db)
specifier|public
name|boolean
name|isVisible
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|DRAFT
operator|&&
operator|!
name|isDraftVisible
argument_list|(
name|db
argument_list|,
literal|null
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|isRefVisible
argument_list|()
return|;
block|}
comment|/** Can the user see this change? Does not account for draft status */
DECL|method|isRefVisible ()
specifier|public
name|boolean
name|isRefVisible
parameter_list|()
block|{
return|return
name|getRefControl
argument_list|()
operator|.
name|isVisible
argument_list|()
return|;
block|}
comment|/** Can this user see the given patchset? */
DECL|method|isPatchVisible (PatchSet ps, ReviewDb db)
specifier|public
name|boolean
name|isPatchVisible
parameter_list|(
name|PatchSet
name|ps
parameter_list|,
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|ps
operator|.
name|isDraft
argument_list|()
operator|&&
operator|!
name|isDraftVisible
argument_list|(
name|db
argument_list|,
literal|null
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|isVisible
argument_list|(
name|db
argument_list|)
return|;
block|}
comment|/** Can this user abandon this change? */
DECL|method|canAbandon ()
specifier|public
name|boolean
name|canAbandon
parameter_list|()
block|{
return|return
name|isOwner
argument_list|()
comment|// owner (aka creator) of the change can abandon
operator|||
name|getRefControl
argument_list|()
operator|.
name|isOwner
argument_list|()
comment|// branch owner can abandon
operator|||
name|getProjectControl
argument_list|()
operator|.
name|isOwner
argument_list|()
comment|// project owner can abandon
operator|||
name|getCurrentUser
argument_list|()
operator|.
name|getCapabilities
argument_list|()
operator|.
name|canAdministrateServer
argument_list|()
comment|// site administers are god
operator|||
name|getRefControl
argument_list|()
operator|.
name|canAbandon
argument_list|()
comment|// user can abandon a specific ref
return|;
block|}
comment|/** Can this user publish this draft change or any draft patch set of this change? */
DECL|method|canPublish (final ReviewDb db)
specifier|public
name|boolean
name|canPublish
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|isOwner
argument_list|()
operator|&&
name|isVisible
argument_list|(
name|db
argument_list|)
return|;
block|}
comment|/** Can this user delete this draft change or any draft patch set of this change? */
DECL|method|canDeleteDraft (final ReviewDb db)
specifier|public
name|boolean
name|canDeleteDraft
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|isOwner
argument_list|()
operator|&&
name|isVisible
argument_list|(
name|db
argument_list|)
return|;
block|}
comment|/** Can this user rebase this change? */
DECL|method|canRebase ()
specifier|public
name|boolean
name|canRebase
parameter_list|()
block|{
return|return
name|isOwner
argument_list|()
operator|||
name|getRefControl
argument_list|()
operator|.
name|canSubmit
argument_list|()
operator|||
name|getRefControl
argument_list|()
operator|.
name|canRebase
argument_list|()
return|;
block|}
comment|/** Can this user restore this change? */
DECL|method|canRestore ()
specifier|public
name|boolean
name|canRestore
parameter_list|()
block|{
return|return
name|canAbandon
argument_list|()
return|;
comment|// Anyone who can abandon the change can restore it back
block|}
comment|/** All value ranges of any allowed label permission. */
DECL|method|getLabelRanges ()
specifier|public
name|List
argument_list|<
name|PermissionRange
argument_list|>
name|getLabelRanges
parameter_list|()
block|{
return|return
name|getRefControl
argument_list|()
operator|.
name|getLabelRanges
argument_list|()
return|;
block|}
comment|/** The range of permitted values associated with a label permission. */
DECL|method|getRange (String permission)
specifier|public
name|PermissionRange
name|getRange
parameter_list|(
name|String
name|permission
parameter_list|)
block|{
return|return
name|getRefControl
argument_list|()
operator|.
name|getRange
argument_list|(
name|permission
argument_list|)
return|;
block|}
comment|/** Can this user add a patch set to this change? */
DECL|method|canAddPatchSet ()
specifier|public
name|boolean
name|canAddPatchSet
parameter_list|()
block|{
return|return
name|getRefControl
argument_list|()
operator|.
name|canUpload
argument_list|()
return|;
block|}
comment|/** Is this user the owner of the change? */
DECL|method|isOwner ()
specifier|public
name|boolean
name|isOwner
parameter_list|()
block|{
if|if
condition|(
name|getCurrentUser
argument_list|()
operator|instanceof
name|IdentifiedUser
condition|)
block|{
specifier|final
name|IdentifiedUser
name|i
init|=
operator|(
name|IdentifiedUser
operator|)
name|getCurrentUser
argument_list|()
decl_stmt|;
return|return
name|i
operator|.
name|getAccountId
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getOwner
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** Is this user a reviewer for the change? */
DECL|method|isReviewer (ReviewDb db)
specifier|public
name|boolean
name|isReviewer
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|isReviewer
argument_list|(
name|db
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** Is this user a reviewer for the change? */
DECL|method|isReviewer (ReviewDb db, @Nullable ChangeData cd)
specifier|public
name|boolean
name|isReviewer
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
annotation|@
name|Nullable
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|getCurrentUser
argument_list|()
operator|instanceof
name|IdentifiedUser
condition|)
block|{
specifier|final
name|IdentifiedUser
name|user
init|=
operator|(
name|IdentifiedUser
operator|)
name|getCurrentUser
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|PatchSetApproval
argument_list|>
name|results
decl_stmt|;
if|if
condition|(
name|cd
operator|!=
literal|null
condition|)
block|{
name|results
operator|=
name|cd
operator|.
name|currentApprovals
argument_list|(
name|Providers
operator|.
name|of
argument_list|(
name|db
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|=
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byChange
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchSetApproval
name|approval
range|:
name|results
control|)
block|{
if|if
condition|(
name|user
operator|.
name|getAccountId
argument_list|()
operator|.
name|equals
argument_list|(
name|approval
operator|.
name|getAccountId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** @return true if the user is allowed to remove this reviewer. */
DECL|method|canRemoveReviewer (PatchSetApproval approval)
specifier|public
name|boolean
name|canRemoveReviewer
parameter_list|(
name|PatchSetApproval
name|approval
parameter_list|)
block|{
if|if
condition|(
name|getChange
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
comment|// A user can always remove themselves.
comment|//
if|if
condition|(
name|getCurrentUser
argument_list|()
operator|instanceof
name|IdentifiedUser
condition|)
block|{
specifier|final
name|IdentifiedUser
name|i
init|=
operator|(
name|IdentifiedUser
operator|)
name|getCurrentUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|getAccountId
argument_list|()
operator|.
name|equals
argument_list|(
name|approval
operator|.
name|getAccountId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
comment|// can remove self
block|}
block|}
comment|// The change owner may remove any zero or positive score.
comment|//
if|if
condition|(
name|isOwner
argument_list|()
operator|&&
literal|0
operator|<=
name|approval
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// The branch owner, project owner, site admin can remove anyone.
comment|//
if|if
condition|(
name|getRefControl
argument_list|()
operator|.
name|isOwner
argument_list|()
comment|// branch owner
operator|||
name|getProjectControl
argument_list|()
operator|.
name|isOwner
argument_list|()
comment|// project owner
operator|||
name|getCurrentUser
argument_list|()
operator|.
name|getCapabilities
argument_list|()
operator|.
name|canAdministrateServer
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getSubmitRecords (ReviewDb db, PatchSet patchSet)
specifier|public
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|getSubmitRecords
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|PatchSet
name|patchSet
parameter_list|)
block|{
return|return
name|canSubmit
argument_list|(
name|db
argument_list|,
name|patchSet
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|canSubmit (ReviewDb db, PatchSet patchSet)
specifier|public
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|canSubmit
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|PatchSet
name|patchSet
parameter_list|)
block|{
return|return
name|canSubmit
argument_list|(
name|db
argument_list|,
name|patchSet
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|canSubmit (ReviewDb db, PatchSet patchSet, @Nullable ChangeData cd, boolean fastEvalLabels, boolean allowClosed)
specifier|public
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|canSubmit
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|PatchSet
name|patchSet
parameter_list|,
annotation|@
name|Nullable
name|ChangeData
name|cd
parameter_list|,
name|boolean
name|fastEvalLabels
parameter_list|,
name|boolean
name|allowClosed
parameter_list|)
block|{
if|if
condition|(
operator|!
name|allowClosed
operator|&&
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|SubmitRecord
name|rec
init|=
operator|new
name|SubmitRecord
argument_list|()
decl_stmt|;
name|rec
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Status
operator|.
name|CLOSED
expr_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|rec
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|patchSet
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|ruleError
argument_list|(
literal|"Patch set "
operator|+
name|patchSet
operator|.
name|getPatchSetId
argument_list|()
operator|+
literal|" is not current"
argument_list|)
return|;
block|}
try|try
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|DRAFT
condition|)
block|{
if|if
condition|(
operator|!
name|isDraftVisible
argument_list|(
name|db
argument_list|,
name|cd
argument_list|)
condition|)
block|{
return|return
name|ruleError
argument_list|(
literal|"Patch set "
operator|+
name|patchSet
operator|.
name|getPatchSetId
argument_list|()
operator|+
literal|" not found"
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ruleError
argument_list|(
literal|"Cannot submit draft changes"
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|patchSet
operator|.
name|isDraft
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|isDraftVisible
argument_list|(
name|db
argument_list|,
name|cd
argument_list|)
condition|)
block|{
return|return
name|ruleError
argument_list|(
literal|"Patch set "
operator|+
name|patchSet
operator|.
name|getPatchSetId
argument_list|()
operator|+
literal|" not found"
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ruleError
argument_list|(
literal|"Cannot submit draft patch sets"
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
return|return
name|logRuleError
argument_list|(
literal|"Cannot read patch set "
operator|+
name|patchSet
operator|.
name|getId
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Term
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Term
argument_list|>
argument_list|()
decl_stmt|;
name|Term
name|submitRule
decl_stmt|;
name|ProjectState
name|projectState
init|=
name|getProjectControl
argument_list|()
operator|.
name|getProjectState
argument_list|()
decl_stmt|;
name|PrologEnvironment
name|env
decl_stmt|;
try|try
block|{
name|env
operator|=
name|projectState
operator|.
name|newPrologEnvironment
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompileException
name|err
parameter_list|)
block|{
return|return
name|logRuleError
argument_list|(
literal|"Cannot consult rules.pl for "
operator|+
name|getProject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
try|try
block|{
name|env
operator|.
name|set
argument_list|(
name|StoredValues
operator|.
name|REVIEW_DB
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|env
operator|.
name|set
argument_list|(
name|StoredValues
operator|.
name|CHANGE
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|env
operator|.
name|set
argument_list|(
name|StoredValues
operator|.
name|CHANGE_DATA
argument_list|,
name|cd
argument_list|)
expr_stmt|;
name|env
operator|.
name|set
argument_list|(
name|StoredValues
operator|.
name|PATCH_SET
argument_list|,
name|patchSet
argument_list|)
expr_stmt|;
name|env
operator|.
name|set
argument_list|(
name|StoredValues
operator|.
name|CHANGE_CONTROL
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|submitRule
operator|=
name|env
operator|.
name|once
argument_list|(
literal|"gerrit"
argument_list|,
literal|"locate_submit_rule"
argument_list|,
operator|new
name|VariableTerm
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|submitRule
operator|==
literal|null
condition|)
block|{
return|return
name|logRuleError
argument_list|(
literal|"No user:submit_rule found for "
operator|+
name|getProject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|fastEvalLabels
condition|)
block|{
name|env
operator|.
name|once
argument_list|(
literal|"gerrit"
argument_list|,
literal|"assume_range_from_label"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|Term
index|[]
name|template
range|:
name|env
operator|.
name|all
argument_list|(
literal|"gerrit"
argument_list|,
literal|"can_submit"
argument_list|,
name|submitRule
argument_list|,
operator|new
name|VariableTerm
argument_list|()
argument_list|)
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|template
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PrologException
name|err
parameter_list|)
block|{
return|return
name|logRuleError
argument_list|(
literal|"Exception calling "
operator|+
name|submitRule
operator|+
literal|" on change "
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|" of "
operator|+
name|getProject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|err
parameter_list|)
block|{
return|return
name|logRuleError
argument_list|(
literal|"Exception calling "
operator|+
name|submitRule
operator|+
literal|" on change "
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|" of "
operator|+
name|getProject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
name|ProjectState
name|parentState
init|=
name|projectState
operator|.
name|getParentState
argument_list|()
decl_stmt|;
name|PrologEnvironment
name|childEnv
init|=
name|env
decl_stmt|;
name|Set
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projectsSeen
init|=
operator|new
name|HashSet
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
argument_list|()
decl_stmt|;
name|projectsSeen
operator|.
name|add
argument_list|(
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|parentState
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|projectsSeen
operator|.
name|add
argument_list|(
name|parentState
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|)
condition|)
block|{
comment|//parent has been seen before, stop walk up inheritance tree
break|break;
block|}
name|PrologEnvironment
name|parentEnv
decl_stmt|;
try|try
block|{
name|parentEnv
operator|=
name|parentState
operator|.
name|newPrologEnvironment
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompileException
name|err
parameter_list|)
block|{
return|return
name|logRuleError
argument_list|(
literal|"Cannot consult rules.pl for "
operator|+
name|parentState
operator|.
name|getProject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
name|parentEnv
operator|.
name|copyStoredValues
argument_list|(
name|childEnv
argument_list|)
expr_stmt|;
name|Term
name|filterRule
init|=
name|parentEnv
operator|.
name|once
argument_list|(
literal|"gerrit"
argument_list|,
literal|"locate_submit_filter"
argument_list|,
operator|new
name|VariableTerm
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterRule
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|fastEvalLabels
condition|)
block|{
name|env
operator|.
name|once
argument_list|(
literal|"gerrit"
argument_list|,
literal|"assume_range_from_label"
argument_list|)
expr_stmt|;
block|}
name|Term
name|resultsTerm
init|=
name|toListTerm
argument_list|(
name|results
argument_list|)
decl_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Term
index|[]
name|template
init|=
name|parentEnv
operator|.
name|once
argument_list|(
literal|"gerrit"
argument_list|,
literal|"filter_submit_results"
argument_list|,
name|filterRule
argument_list|,
name|resultsTerm
argument_list|,
operator|new
name|VariableTerm
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|Term
argument_list|>
name|termList
init|=
operator|(
operator|(
name|ListTerm
operator|)
name|template
index|[
literal|2
index|]
operator|)
operator|.
name|toJava
argument_list|()
decl_stmt|;
name|results
operator|.
name|addAll
argument_list|(
name|termList
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrologException
name|err
parameter_list|)
block|{
return|return
name|logRuleError
argument_list|(
literal|"Exception calling "
operator|+
name|filterRule
operator|+
literal|" on change "
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|" of "
operator|+
name|parentState
operator|.
name|getProject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|err
parameter_list|)
block|{
return|return
name|logRuleError
argument_list|(
literal|"Exception calling "
operator|+
name|filterRule
operator|+
literal|" on change "
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|" of "
operator|+
name|parentState
operator|.
name|getProject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
name|parentState
operator|=
name|parentState
operator|.
name|getParentState
argument_list|()
expr_stmt|;
name|childEnv
operator|=
name|parentEnv
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|env
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// This should never occur. A well written submit rule will always produce
comment|// at least one result informing the caller of the labels that are
comment|// required for this change to be submittable. Each label will indicate
comment|// whether or not that is actually possible given the permissions.
name|log
operator|.
name|error
argument_list|(
literal|"Submit rule "
operator|+
name|submitRule
operator|+
literal|" for change "
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|" of "
operator|+
name|getProject
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" has no solution."
argument_list|)
expr_stmt|;
return|return
name|ruleError
argument_list|(
literal|"Project submit rule has no solution"
argument_list|)
return|;
block|}
comment|// Convert the results from Prolog Cafe's format to Gerrit's common format.
comment|// can_submit/1 terminates when an ok(P) record is found. Therefore walk
comment|// the results backwards, using only that ok(P) record if it exists. This
comment|// skips partial results that occur early in the output. Later after the loop
comment|// the out collection is reversed to restore it to the original ordering.
comment|//
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<
name|SubmitRecord
argument_list|>
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|resultIdx
init|=
name|results
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
literal|0
operator|<=
name|resultIdx
condition|;
name|resultIdx
operator|--
control|)
block|{
name|Term
name|submitRecord
init|=
name|results
operator|.
name|get
argument_list|(
name|resultIdx
argument_list|)
decl_stmt|;
name|SubmitRecord
name|rec
init|=
operator|new
name|SubmitRecord
argument_list|()
decl_stmt|;
name|out
operator|.
name|add
argument_list|(
name|rec
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|submitRecord
operator|.
name|isStructure
argument_list|()
operator|||
literal|1
operator|!=
name|submitRecord
operator|.
name|arity
argument_list|()
condition|)
block|{
return|return
name|logInvalidResult
argument_list|(
name|submitRule
argument_list|,
name|submitRecord
argument_list|)
return|;
block|}
if|if
condition|(
literal|"ok"
operator|.
name|equals
argument_list|(
name|submitRecord
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|rec
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Status
operator|.
name|OK
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"not_ready"
operator|.
name|equals
argument_list|(
name|submitRecord
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|rec
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Status
operator|.
name|NOT_READY
expr_stmt|;
block|}
else|else
block|{
return|return
name|logInvalidResult
argument_list|(
name|submitRule
argument_list|,
name|submitRecord
argument_list|)
return|;
block|}
comment|// Unpack the one argument. This should also be a structure with one
comment|// argument per label that needs to be reported on to the caller.
comment|//
name|submitRecord
operator|=
name|submitRecord
operator|.
name|arg
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|submitRecord
operator|.
name|isStructure
argument_list|()
condition|)
block|{
return|return
name|logInvalidResult
argument_list|(
name|submitRule
argument_list|,
name|submitRecord
argument_list|)
return|;
block|}
name|rec
operator|.
name|labels
operator|=
operator|new
name|ArrayList
argument_list|<
name|SubmitRecord
operator|.
name|Label
argument_list|>
argument_list|(
name|submitRecord
operator|.
name|arity
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Term
name|state
range|:
operator|(
operator|(
name|StructureTerm
operator|)
name|submitRecord
operator|)
operator|.
name|args
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|state
operator|.
name|isStructure
argument_list|()
operator|||
literal|2
operator|!=
name|state
operator|.
name|arity
argument_list|()
operator|||
operator|!
literal|"label"
operator|.
name|equals
argument_list|(
name|state
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|logInvalidResult
argument_list|(
name|submitRule
argument_list|,
name|submitRecord
argument_list|)
return|;
block|}
name|SubmitRecord
operator|.
name|Label
name|lbl
init|=
operator|new
name|SubmitRecord
operator|.
name|Label
argument_list|()
decl_stmt|;
name|rec
operator|.
name|labels
operator|.
name|add
argument_list|(
name|lbl
argument_list|)
expr_stmt|;
name|lbl
operator|.
name|label
operator|=
name|state
operator|.
name|arg
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
expr_stmt|;
name|Term
name|status
init|=
name|state
operator|.
name|arg
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"ok"
operator|.
name|equals
argument_list|(
name|status
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|lbl
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
operator|.
name|OK
expr_stmt|;
name|appliedBy
argument_list|(
name|lbl
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"reject"
operator|.
name|equals
argument_list|(
name|status
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|lbl
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
operator|.
name|REJECT
expr_stmt|;
name|appliedBy
argument_list|(
name|lbl
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"need"
operator|.
name|equals
argument_list|(
name|status
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|lbl
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
operator|.
name|NEED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"may"
operator|.
name|equals
argument_list|(
name|status
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|lbl
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
operator|.
name|MAY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"impossible"
operator|.
name|equals
argument_list|(
name|status
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|lbl
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
operator|.
name|IMPOSSIBLE
expr_stmt|;
block|}
else|else
block|{
return|return
name|logInvalidResult
argument_list|(
name|submitRule
argument_list|,
name|submitRecord
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|rec
operator|.
name|status
operator|==
name|SubmitRecord
operator|.
name|Status
operator|.
name|OK
condition|)
block|{
break|break;
block|}
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|out
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
DECL|method|logInvalidResult (Term rule, Term record)
specifier|private
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|logInvalidResult
parameter_list|(
name|Term
name|rule
parameter_list|,
name|Term
name|record
parameter_list|)
block|{
return|return
name|logRuleError
argument_list|(
literal|"Submit rule "
operator|+
name|rule
operator|+
literal|" for change "
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|" of "
operator|+
name|getProject
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" output invalid result: "
operator|+
name|record
argument_list|)
return|;
block|}
DECL|method|logRuleError (String err, Exception e)
specifier|private
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|logRuleError
parameter_list|(
name|String
name|err
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|ruleError
argument_list|(
literal|"Error evaluating project rules, check server log"
argument_list|)
return|;
block|}
DECL|method|logRuleError (String err)
specifier|private
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|logRuleError
parameter_list|(
name|String
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return
name|ruleError
argument_list|(
literal|"Error evaluating project rules, check server log"
argument_list|)
return|;
block|}
DECL|method|ruleError (String err)
specifier|private
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|ruleError
parameter_list|(
name|String
name|err
parameter_list|)
block|{
name|SubmitRecord
name|rec
init|=
operator|new
name|SubmitRecord
argument_list|()
decl_stmt|;
name|rec
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Status
operator|.
name|RULE_ERROR
expr_stmt|;
name|rec
operator|.
name|errorMessage
operator|=
name|err
expr_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|rec
argument_list|)
return|;
block|}
DECL|method|appliedBy (SubmitRecord.Label label, Term status)
specifier|private
name|void
name|appliedBy
parameter_list|(
name|SubmitRecord
operator|.
name|Label
name|label
parameter_list|,
name|Term
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|.
name|isStructure
argument_list|()
operator|&&
name|status
operator|.
name|arity
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Term
name|who
init|=
name|status
operator|.
name|arg
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|isUser
argument_list|(
name|who
argument_list|)
condition|)
block|{
name|label
operator|.
name|appliedBy
operator|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
operator|(
operator|(
name|IntegerTerm
operator|)
name|who
operator|.
name|arg
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isDraftVisible (ReviewDb db, ChangeData cd)
specifier|private
name|boolean
name|isDraftVisible
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|isOwner
argument_list|()
operator|||
name|isReviewer
argument_list|(
name|db
argument_list|,
name|cd
argument_list|)
return|;
block|}
DECL|method|isUser (Term who)
specifier|private
specifier|static
name|boolean
name|isUser
parameter_list|(
name|Term
name|who
parameter_list|)
block|{
return|return
name|who
operator|.
name|isStructure
argument_list|()
operator|&&
name|who
operator|.
name|arity
argument_list|()
operator|==
literal|1
operator|&&
name|who
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
literal|"user"
argument_list|)
operator|&&
name|who
operator|.
name|arg
argument_list|(
literal|0
argument_list|)
operator|.
name|isInteger
argument_list|()
return|;
block|}
DECL|method|toListTerm (List<Term> terms)
specifier|private
specifier|static
name|Term
name|toListTerm
parameter_list|(
name|List
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{
name|Term
name|list
init|=
name|Prolog
operator|.
name|Nil
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|terms
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|list
operator|=
operator|new
name|ListTerm
argument_list|(
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
end_class

end_unit

