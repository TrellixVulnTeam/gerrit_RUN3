begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
operator|.
name|roundToSecond
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbUtil
operator|.
name|intKeyOrdering
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeBundle
operator|.
name|Source
operator|.
name|NOTE_DB
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeBundle
operator|.
name|Source
operator|.
name|REVIEW_DB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Collections2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ComparisonChain
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CommentsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ReviewerSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|rebuild
operator|.
name|ChangeRebuilderImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|Column
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * A bundle of all entities rooted at a single {@link Change} entity.  *<p>  * See the {@link Change} Javadoc for a depiction of this tree. Bundles may be  * compared using {@link #differencesFrom(ChangeBundle)}, which normalizes out  * the minor implementation differences between ReviewDb and NoteDb.  */
end_comment

begin_class
DECL|class|ChangeBundle
specifier|public
class|class
name|ChangeBundle
block|{
DECL|enum|Source
specifier|public
enum|enum
name|Source
block|{
DECL|enumConstant|REVIEW_DB
DECL|enumConstant|NOTE_DB
name|REVIEW_DB
block|,
name|NOTE_DB
block|;   }
DECL|method|fromNotes (CommentsUtil commentsUtil, ChangeNotes notes)
specifier|public
specifier|static
name|ChangeBundle
name|fromNotes
parameter_list|(
name|CommentsUtil
name|commentsUtil
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
operator|new
name|ChangeBundle
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
argument_list|,
name|notes
operator|.
name|getChangeMessages
argument_list|()
argument_list|,
name|notes
operator|.
name|getPatchSets
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|notes
operator|.
name|getApprovals
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|Iterables
operator|.
name|concat
argument_list|(
name|CommentsUtil
operator|.
name|toPatchLineComments
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|PatchLineComment
operator|.
name|Status
operator|.
name|DRAFT
argument_list|,
name|commentsUtil
operator|.
name|draftByChange
argument_list|(
literal|null
argument_list|,
name|notes
argument_list|)
argument_list|)
argument_list|,
name|CommentsUtil
operator|.
name|toPatchLineComments
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|PatchLineComment
operator|.
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|commentsUtil
operator|.
name|publishedByChange
argument_list|(
literal|null
argument_list|,
name|notes
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|notes
operator|.
name|getReviewers
argument_list|()
argument_list|,
name|Source
operator|.
name|NOTE_DB
argument_list|)
return|;
block|}
DECL|method|changeMessageMap ( Iterable<ChangeMessage> in)
specifier|private
specifier|static
name|Map
argument_list|<
name|ChangeMessage
operator|.
name|Key
argument_list|,
name|ChangeMessage
argument_list|>
name|changeMessageMap
parameter_list|(
name|Iterable
argument_list|<
name|ChangeMessage
argument_list|>
name|in
parameter_list|)
block|{
name|Map
argument_list|<
name|ChangeMessage
operator|.
name|Key
argument_list|,
name|ChangeMessage
argument_list|>
name|out
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ChangeMessage
operator|.
name|Key
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ChangeMessage
operator|.
name|Key
name|a
parameter_list|,
name|ChangeMessage
operator|.
name|Key
name|b
parameter_list|)
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|b
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|get
argument_list|()
argument_list|,
name|b
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeMessage
name|cm
range|:
name|in
control|)
block|{
name|out
operator|.
name|put
argument_list|(
name|cm
operator|.
name|getKey
argument_list|()
argument_list|,
name|cm
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
comment|// Unlike the *Map comparators, which are intended to make key lists diffable,
comment|// this comparator sorts first on timestamp, then on every other field.
DECL|field|CHANGE_MESSAGE_ORDER
specifier|private
specifier|static
specifier|final
name|Ordering
argument_list|<
name|ChangeMessage
argument_list|>
name|CHANGE_MESSAGE_ORDER
init|=
operator|new
name|Ordering
argument_list|<
name|ChangeMessage
argument_list|>
argument_list|()
block|{
specifier|final
name|Ordering
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|nullsFirst
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|nullsFirst
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ChangeMessage
name|a
parameter_list|,
name|ChangeMessage
name|b
parameter_list|)
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getWrittenOn
argument_list|()
argument_list|,
name|b
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|b
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|psId
argument_list|(
name|a
argument_list|)
argument_list|,
name|psId
argument_list|(
name|b
argument_list|)
argument_list|,
name|nullsFirst
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|b
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|intKeyOrdering
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getMessage
argument_list|()
argument_list|,
name|b
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nullsFirst
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
specifier|private
name|Integer
name|psId
parameter_list|(
name|ChangeMessage
name|m
parameter_list|)
block|{
return|return
name|m
operator|.
name|getPatchSetId
argument_list|()
operator|!=
literal|null
condition|?
name|m
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
else|:
literal|null
return|;
block|}
block|}
decl_stmt|;
DECL|method|changeMessageList ( Iterable<ChangeMessage> in)
specifier|private
specifier|static
name|ImmutableList
argument_list|<
name|ChangeMessage
argument_list|>
name|changeMessageList
parameter_list|(
name|Iterable
argument_list|<
name|ChangeMessage
argument_list|>
name|in
parameter_list|)
block|{
return|return
name|CHANGE_MESSAGE_ORDER
operator|.
name|immutableSortedCopy
argument_list|(
name|in
argument_list|)
return|;
block|}
DECL|method|patchSetMap (Iterable<PatchSet> in)
specifier|private
specifier|static
name|TreeMap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|patchSetMap
parameter_list|(
name|Iterable
argument_list|<
name|PatchSet
argument_list|>
name|in
parameter_list|)
block|{
name|TreeMap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|out
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|PatchSet
operator|.
name|Id
name|a
parameter_list|,
name|PatchSet
operator|.
name|Id
name|b
parameter_list|)
block|{
return|return
name|patchSetIdChain
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSet
name|ps
range|:
name|in
control|)
block|{
name|out
operator|.
name|put
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|PatchSetApproval
operator|.
name|Key
argument_list|,
name|PatchSetApproval
argument_list|>
DECL|method|patchSetApprovalMap (Iterable<PatchSetApproval> in)
name|patchSetApprovalMap
parameter_list|(
name|Iterable
argument_list|<
name|PatchSetApproval
argument_list|>
name|in
parameter_list|)
block|{
name|Map
argument_list|<
name|PatchSetApproval
operator|.
name|Key
argument_list|,
name|PatchSetApproval
argument_list|>
name|out
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|PatchSetApproval
operator|.
name|Key
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|PatchSetApproval
operator|.
name|Key
name|a
parameter_list|,
name|PatchSetApproval
operator|.
name|Key
name|b
parameter_list|)
block|{
return|return
name|patchSetIdChain
argument_list|(
name|a
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|b
operator|.
name|getParentKey
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|b
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getLabelId
argument_list|()
argument_list|,
name|b
operator|.
name|getLabelId
argument_list|()
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|in
control|)
block|{
name|out
operator|.
name|put
argument_list|(
name|psa
operator|.
name|getKey
argument_list|()
argument_list|,
name|psa
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|PatchLineComment
operator|.
name|Key
argument_list|,
name|PatchLineComment
argument_list|>
DECL|method|patchLineCommentMap (Iterable<PatchLineComment> in)
name|patchLineCommentMap
parameter_list|(
name|Iterable
argument_list|<
name|PatchLineComment
argument_list|>
name|in
parameter_list|)
block|{
name|Map
argument_list|<
name|PatchLineComment
operator|.
name|Key
argument_list|,
name|PatchLineComment
argument_list|>
name|out
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|PatchLineComment
operator|.
name|Key
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|PatchLineComment
operator|.
name|Key
name|a
parameter_list|,
name|PatchLineComment
operator|.
name|Key
name|b
parameter_list|)
block|{
name|Patch
operator|.
name|Key
name|pka
init|=
name|a
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|Patch
operator|.
name|Key
name|pkb
init|=
name|b
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
return|return
name|patchSetIdChain
argument_list|(
name|pka
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|pkb
operator|.
name|getParentKey
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|pka
operator|.
name|get
argument_list|()
argument_list|,
name|pkb
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|get
argument_list|()
argument_list|,
name|b
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchLineComment
name|plc
range|:
name|in
control|)
block|{
name|out
operator|.
name|put
argument_list|(
name|plc
operator|.
name|getKey
argument_list|()
argument_list|,
name|plc
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|method|patchSetIdChain (PatchSet.Id a, PatchSet.Id b)
specifier|private
specifier|static
name|ComparisonChain
name|patchSetIdChain
parameter_list|(
name|PatchSet
operator|.
name|Id
name|a
parameter_list|,
name|PatchSet
operator|.
name|Id
name|b
parameter_list|)
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|b
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|get
argument_list|()
argument_list|,
name|b
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|checkColumns (Class<?> clazz, Integer... expected)
specifier|private
specifier|static
name|void
name|checkColumns
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Integer
modifier|...
name|expected
parameter_list|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|ids
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|Column
name|col
init|=
name|f
operator|.
name|getAnnotation
argument_list|(
name|Column
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|!=
literal|null
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|col
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|expectedIds
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expected
argument_list|)
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|ids
operator|.
name|equals
argument_list|(
name|expectedIds
argument_list|)
argument_list|,
literal|"Unexpected column set for %s: %s != %s"
argument_list|,
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|ids
argument_list|,
name|expectedIds
argument_list|)
expr_stmt|;
block|}
static|static
block|{
comment|// Initialization-time checks that the column set hasn't changed since the
comment|// last time this file was updated.
name|checkColumns
argument_list|(
name|Change
operator|.
name|Id
operator|.
name|class
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|Change
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|10
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|,
literal|17
argument_list|,
literal|18
argument_list|,
literal|19
argument_list|,
literal|101
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|ChangeMessage
operator|.
name|Key
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|ChangeMessage
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|PatchSet
operator|.
name|Id
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|PatchSet
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|PatchSetApproval
operator|.
name|Key
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|PatchSetApproval
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|PatchLineComment
operator|.
name|Key
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|PatchLineComment
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|field|change
specifier|private
specifier|final
name|Change
name|change
decl_stmt|;
DECL|field|changeMessages
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|ChangeMessage
argument_list|>
name|changeMessages
decl_stmt|;
DECL|field|patchSets
specifier|private
specifier|final
name|ImmutableSortedMap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|patchSets
decl_stmt|;
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|PatchSetApproval
operator|.
name|Key
argument_list|,
name|PatchSetApproval
argument_list|>
DECL|field|patchSetApprovals
name|patchSetApprovals
decl_stmt|;
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|PatchLineComment
operator|.
name|Key
argument_list|,
name|PatchLineComment
argument_list|>
DECL|field|patchLineComments
name|patchLineComments
decl_stmt|;
DECL|field|reviewers
specifier|private
specifier|final
name|ReviewerSet
name|reviewers
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|Source
name|source
decl_stmt|;
DECL|method|ChangeBundle ( Change change, Iterable<ChangeMessage> changeMessages, Iterable<PatchSet> patchSets, Iterable<PatchSetApproval> patchSetApprovals, Iterable<PatchLineComment> patchLineComments, ReviewerSet reviewers, Source source)
specifier|public
name|ChangeBundle
parameter_list|(
name|Change
name|change
parameter_list|,
name|Iterable
argument_list|<
name|ChangeMessage
argument_list|>
name|changeMessages
parameter_list|,
name|Iterable
argument_list|<
name|PatchSet
argument_list|>
name|patchSets
parameter_list|,
name|Iterable
argument_list|<
name|PatchSetApproval
argument_list|>
name|patchSetApprovals
parameter_list|,
name|Iterable
argument_list|<
name|PatchLineComment
argument_list|>
name|patchLineComments
parameter_list|,
name|ReviewerSet
name|reviewers
parameter_list|,
name|Source
name|source
parameter_list|)
block|{
name|this
operator|.
name|change
operator|=
name|checkNotNull
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|this
operator|.
name|changeMessages
operator|=
name|changeMessageList
argument_list|(
name|changeMessages
argument_list|)
expr_stmt|;
name|this
operator|.
name|patchSets
operator|=
name|ImmutableSortedMap
operator|.
name|copyOfSorted
argument_list|(
name|patchSetMap
argument_list|(
name|patchSets
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|patchSetApprovals
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|patchSetApprovalMap
argument_list|(
name|patchSetApprovals
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|patchLineComments
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|patchLineCommentMap
argument_list|(
name|patchLineComments
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|reviewers
operator|=
name|checkNotNull
argument_list|(
name|reviewers
argument_list|)
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|checkNotNull
argument_list|(
name|source
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeMessage
name|m
range|:
name|this
operator|.
name|changeMessages
control|)
block|{
name|checkArgument
argument_list|(
name|m
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchSet
operator|.
name|Id
name|id
range|:
name|this
operator|.
name|patchSets
operator|.
name|keySet
argument_list|()
control|)
block|{
name|checkArgument
argument_list|(
name|id
operator|.
name|getParentKey
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchSetApproval
operator|.
name|Key
name|k
range|:
name|this
operator|.
name|patchSetApprovals
operator|.
name|keySet
argument_list|()
control|)
block|{
name|checkArgument
argument_list|(
name|k
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchLineComment
operator|.
name|Key
name|k
range|:
name|this
operator|.
name|patchLineComments
operator|.
name|keySet
argument_list|()
control|)
block|{
name|checkArgument
argument_list|(
name|k
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getChange ()
specifier|public
name|Change
name|getChange
parameter_list|()
block|{
return|return
name|change
return|;
block|}
DECL|method|getChangeMessages ()
specifier|public
name|ImmutableCollection
argument_list|<
name|ChangeMessage
argument_list|>
name|getChangeMessages
parameter_list|()
block|{
return|return
name|changeMessages
return|;
block|}
DECL|method|getPatchSets ()
specifier|public
name|ImmutableCollection
argument_list|<
name|PatchSet
argument_list|>
name|getPatchSets
parameter_list|()
block|{
return|return
name|patchSets
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|getPatchSetApprovals ()
specifier|public
name|ImmutableCollection
argument_list|<
name|PatchSetApproval
argument_list|>
name|getPatchSetApprovals
parameter_list|()
block|{
return|return
name|patchSetApprovals
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|getPatchLineComments ()
specifier|public
name|ImmutableCollection
argument_list|<
name|PatchLineComment
argument_list|>
name|getPatchLineComments
parameter_list|()
block|{
return|return
name|patchLineComments
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|getReviewers ()
specifier|public
name|ReviewerSet
name|getReviewers
parameter_list|()
block|{
return|return
name|reviewers
return|;
block|}
DECL|method|getSource ()
specifier|public
name|Source
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
DECL|method|differencesFrom (ChangeBundle o)
specifier|public
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|differencesFrom
parameter_list|(
name|ChangeBundle
name|o
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|diffs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|diffChanges
argument_list|(
name|diffs
argument_list|,
name|this
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|diffChangeMessages
argument_list|(
name|diffs
argument_list|,
name|this
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|diffPatchSets
argument_list|(
name|diffs
argument_list|,
name|this
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|diffPatchSetApprovals
argument_list|(
name|diffs
argument_list|,
name|this
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|diffReviewers
argument_list|(
name|diffs
argument_list|,
name|this
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|diffPatchLineComments
argument_list|(
name|diffs
argument_list|,
name|this
argument_list|,
name|o
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|diffs
argument_list|)
return|;
block|}
DECL|method|getFirstPatchSetTime ()
specifier|private
name|Timestamp
name|getFirstPatchSetTime
parameter_list|()
block|{
if|if
condition|(
name|patchSets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|change
operator|.
name|getCreatedOn
argument_list|()
return|;
block|}
return|return
name|patchSets
operator|.
name|firstEntry
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|getCreatedOn
argument_list|()
return|;
block|}
DECL|method|getLatestTimestamp ()
specifier|private
name|Timestamp
name|getLatestTimestamp
parameter_list|()
block|{
name|Ordering
argument_list|<
name|Timestamp
argument_list|>
name|o
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|nullsFirst
argument_list|()
decl_stmt|;
name|Timestamp
name|ts
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ChangeMessage
name|cm
range|:
name|getChangeMessages
argument_list|()
control|)
block|{
name|ts
operator|=
name|o
operator|.
name|max
argument_list|(
name|ts
argument_list|,
name|cm
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchSet
name|ps
range|:
name|getPatchSets
argument_list|()
control|)
block|{
name|ts
operator|=
name|o
operator|.
name|max
argument_list|(
name|ts
argument_list|,
name|ps
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|getPatchSetApprovals
argument_list|()
control|)
block|{
name|ts
operator|=
name|o
operator|.
name|max
argument_list|(
name|ts
argument_list|,
name|psa
operator|.
name|getGranted
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchLineComment
name|plc
range|:
name|getPatchLineComments
argument_list|()
control|)
block|{
comment|// Ignore draft comments, as they do not show up in the change meta graph.
if|if
condition|(
name|plc
operator|.
name|getStatus
argument_list|()
operator|!=
name|PatchLineComment
operator|.
name|Status
operator|.
name|DRAFT
condition|)
block|{
name|ts
operator|=
name|o
operator|.
name|max
argument_list|(
name|ts
argument_list|,
name|plc
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|firstNonNull
argument_list|(
name|ts
argument_list|,
name|change
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|PatchSetApproval
operator|.
name|Key
argument_list|,
name|PatchSetApproval
argument_list|>
DECL|method|filterPatchSetApprovals ()
name|filterPatchSetApprovals
parameter_list|()
block|{
return|return
name|limitToValidPatchSets
argument_list|(
name|patchSetApprovals
argument_list|,
name|PatchSetApproval
operator|.
name|Key
operator|::
name|getParentKey
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|PatchLineComment
operator|.
name|Key
argument_list|,
name|PatchLineComment
argument_list|>
DECL|method|filterPatchLineComments ()
name|filterPatchLineComments
parameter_list|()
block|{
return|return
name|limitToValidPatchSets
argument_list|(
name|patchLineComments
argument_list|,
name|k
lambda|->
name|k
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
return|;
block|}
DECL|method|limitToValidPatchSets (Map<K, V> in, Function<K, PatchSet.Id> func)
specifier|private
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|limitToValidPatchSets
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|in
parameter_list|,
name|Function
argument_list|<
name|K
argument_list|,
name|PatchSet
operator|.
name|Id
argument_list|>
name|func
parameter_list|)
block|{
return|return
name|Maps
operator|.
name|filterKeys
argument_list|(
name|in
argument_list|,
name|Predicates
operator|.
name|compose
argument_list|(
name|validPatchSetPredicate
argument_list|()
argument_list|,
name|func
argument_list|)
argument_list|)
return|;
block|}
DECL|method|validPatchSetPredicate ()
specifier|private
name|Predicate
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|validPatchSetPredicate
parameter_list|()
block|{
name|Predicate
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|upToCurrent
init|=
name|upToCurrentPredicate
argument_list|()
decl_stmt|;
return|return
name|p
lambda|->
name|upToCurrent
operator|.
name|apply
argument_list|(
name|p
argument_list|)
operator|&&
name|patchSets
operator|.
name|containsKey
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|filterChangeMessages ()
specifier|private
name|Collection
argument_list|<
name|ChangeMessage
argument_list|>
name|filterChangeMessages
parameter_list|()
block|{
specifier|final
name|Predicate
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|validPatchSet
init|=
name|validPatchSetPredicate
argument_list|()
decl_stmt|;
return|return
name|Collections2
operator|.
name|filter
argument_list|(
name|changeMessages
argument_list|,
name|m
lambda|->
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|m
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
if|if
condition|(
name|psId
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|validPatchSet
operator|.
name|apply
argument_list|(
name|psId
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
DECL|method|upToCurrentPredicate ()
specifier|private
name|Predicate
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|upToCurrentPredicate
parameter_list|()
block|{
name|PatchSet
operator|.
name|Id
name|current
init|=
name|change
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
return|return
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
return|;
block|}
name|int
name|max
init|=
name|current
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|p
lambda|->
name|p
operator|.
name|get
argument_list|()
operator|<=
name|max
return|;
block|}
DECL|method|filterPatchSets ()
specifier|private
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|filterPatchSets
parameter_list|()
block|{
return|return
name|Maps
operator|.
name|filterKeys
argument_list|(
name|patchSets
argument_list|,
name|upToCurrentPredicate
argument_list|()
argument_list|)
return|;
block|}
DECL|method|diffChanges (List<String> diffs, ChangeBundle bundleA, ChangeBundle bundleB)
specifier|private
specifier|static
name|void
name|diffChanges
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|)
block|{
name|Change
name|a
init|=
name|bundleA
operator|.
name|change
decl_stmt|;
name|Change
name|b
init|=
name|bundleB
operator|.
name|change
decl_stmt|;
name|String
name|desc
init|=
name|a
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getId
argument_list|()
argument_list|)
condition|?
name|describe
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|)
else|:
literal|"Changes"
decl_stmt|;
name|boolean
name|excludeCreatedOn
init|=
literal|false
decl_stmt|;
name|boolean
name|excludeCurrentPatchSetId
init|=
literal|false
decl_stmt|;
name|boolean
name|excludeTopic
init|=
literal|false
decl_stmt|;
name|Timestamp
name|aUpdated
init|=
name|a
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
name|Timestamp
name|bUpdated
init|=
name|b
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
name|boolean
name|excludeSubject
init|=
literal|false
decl_stmt|;
name|boolean
name|excludeOrigSubj
init|=
literal|false
decl_stmt|;
comment|// Subject is not technically a nullable field, but we observed some null
comment|// subjects in the wild on googlesource.com, so treat null as empty.
name|String
name|aSubj
init|=
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|a
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|bSubj
init|=
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|b
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
comment|// Allow created timestamp in NoteDb to be either the created timestamp of
comment|// the change, or the timestamp of the first remaining patch set.
comment|//
comment|// Ignore subject if the NoteDb subject starts with the ReviewDb subject.
comment|// The NoteDb subject is read directly from the commit, whereas the ReviewDb
comment|// subject historically may have been truncated to fit in a SQL varchar
comment|// column.
comment|//
comment|// Ignore original subject on the ReviewDb side when comparing to NoteDb.
comment|// This field may have any number of values:
comment|//  - It may be null, if the change has had no new patch sets pushed since
comment|//    migrating to schema 103.
comment|//  - It may match the first patch set subject, if the change was created
comment|//    after migrating to schema 103.
comment|//  - It may match the subject of the first patch set that was pushed after
comment|//    the migration to schema 103, even though that is neither the subject
comment|//    of the first patch set nor the subject of the last patch set. (See
comment|//    Change#setCurrentPatchSet as of 43b10f86 for this behavior.) This
comment|//    subject of an intermediate patch set is not available to the
comment|//    ChangeBundle; we would have to get the subject from the repo, which is
comment|//    inconvenient at this point.
comment|//
comment|// Ignore original subject on the ReviewDb side if it equals the subject of
comment|// the current patch set.
comment|//
comment|// For all of the above subject comparisons, first trim any leading spaces
comment|// from the NoteDb strings. (We actually do represent the leading spaces
comment|// faithfully during conversion, but JGit's FooterLine parser trims them
comment|// when reading.)
comment|//
comment|// Ignore empty topic on the ReviewDb side if it is null on the NoteDb side.
comment|//
comment|// Ignore currentPatchSetId on NoteDb side if ReviewDb does not point to a
comment|// valid patch set.
comment|//
comment|// Use max timestamp of all ReviewDb entities when comparing with NoteDb.
if|if
condition|(
name|bundleA
operator|.
name|source
operator|==
name|REVIEW_DB
operator|&&
name|bundleB
operator|.
name|source
operator|==
name|NOTE_DB
condition|)
block|{
name|excludeCreatedOn
operator|=
operator|!
name|timestampsDiffer
argument_list|(
name|bundleA
argument_list|,
name|bundleA
operator|.
name|getFirstPatchSetTime
argument_list|()
argument_list|,
name|bundleB
argument_list|,
name|b
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|aSubj
operator|=
name|cleanReviewDbSubject
argument_list|(
name|aSubj
argument_list|)
expr_stmt|;
name|excludeCurrentPatchSetId
operator|=
operator|!
name|bundleA
operator|.
name|validPatchSetPredicate
argument_list|()
operator|.
name|apply
argument_list|(
name|a
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|excludeSubject
operator|=
name|bSubj
operator|.
name|startsWith
argument_list|(
name|aSubj
argument_list|)
operator|||
name|excludeCurrentPatchSetId
expr_stmt|;
name|excludeOrigSubj
operator|=
literal|true
expr_stmt|;
name|String
name|aTopic
init|=
name|trimLeadingOrNull
argument_list|(
name|a
operator|.
name|getTopic
argument_list|()
argument_list|)
decl_stmt|;
name|excludeTopic
operator|=
name|Objects
operator|.
name|equals
argument_list|(
name|aTopic
argument_list|,
name|b
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|aTopic
argument_list|)
operator|&&
name|b
operator|.
name|getTopic
argument_list|()
operator|==
literal|null
expr_stmt|;
name|aUpdated
operator|=
name|bundleA
operator|.
name|getLatestTimestamp
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bundleA
operator|.
name|source
operator|==
name|NOTE_DB
operator|&&
name|bundleB
operator|.
name|source
operator|==
name|REVIEW_DB
condition|)
block|{
name|excludeCreatedOn
operator|=
operator|!
name|timestampsDiffer
argument_list|(
name|bundleA
argument_list|,
name|a
operator|.
name|getCreatedOn
argument_list|()
argument_list|,
name|bundleB
argument_list|,
name|bundleB
operator|.
name|getFirstPatchSetTime
argument_list|()
argument_list|)
expr_stmt|;
name|bSubj
operator|=
name|cleanReviewDbSubject
argument_list|(
name|bSubj
argument_list|)
expr_stmt|;
name|excludeCurrentPatchSetId
operator|=
operator|!
name|bundleB
operator|.
name|validPatchSetPredicate
argument_list|()
operator|.
name|apply
argument_list|(
name|b
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|excludeSubject
operator|=
name|aSubj
operator|.
name|startsWith
argument_list|(
name|bSubj
argument_list|)
operator|||
name|excludeCurrentPatchSetId
expr_stmt|;
name|excludeOrigSubj
operator|=
literal|true
expr_stmt|;
name|String
name|bTopic
init|=
name|trimLeadingOrNull
argument_list|(
name|b
operator|.
name|getTopic
argument_list|()
argument_list|)
decl_stmt|;
name|excludeTopic
operator|=
name|Objects
operator|.
name|equals
argument_list|(
name|bTopic
argument_list|,
name|a
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|||
name|a
operator|.
name|getTopic
argument_list|()
operator|==
literal|null
operator|&&
literal|""
operator|.
name|equals
argument_list|(
name|bTopic
argument_list|)
expr_stmt|;
name|bUpdated
operator|=
name|bundleB
operator|.
name|getLatestTimestamp
argument_list|()
expr_stmt|;
block|}
name|String
name|subjectField
init|=
literal|"subject"
decl_stmt|;
name|String
name|updatedField
init|=
literal|"lastUpdatedOn"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|exclude
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|subjectField
argument_list|,
name|updatedField
argument_list|,
literal|"noteDbState"
argument_list|,
literal|"rowVersion"
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeCreatedOn
condition|)
block|{
name|exclude
operator|.
name|add
argument_list|(
literal|"createdOn"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludeCurrentPatchSetId
condition|)
block|{
name|exclude
operator|.
name|add
argument_list|(
literal|"currentPatchSetId"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludeOrigSubj
condition|)
block|{
name|exclude
operator|.
name|add
argument_list|(
literal|"originalSubject"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludeTopic
condition|)
block|{
name|exclude
operator|.
name|add
argument_list|(
literal|"topic"
argument_list|)
expr_stmt|;
block|}
name|diffColumnsExcluding
argument_list|(
name|diffs
argument_list|,
name|Change
operator|.
name|class
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|,
name|exclude
argument_list|)
expr_stmt|;
comment|// Allow last updated timestamps to either be exactly equal (within slop),
comment|// or the NoteDb timestamp to be equal to the latest entity timestamp in the
comment|// whole ReviewDb bundle (within slop).
if|if
condition|(
name|timestampsDiffer
argument_list|(
name|bundleA
argument_list|,
name|a
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|,
name|bundleB
argument_list|,
name|b
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
condition|)
block|{
name|diffTimestamps
argument_list|(
name|diffs
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|aUpdated
argument_list|,
name|bundleB
argument_list|,
name|bUpdated
argument_list|,
literal|"effective last updated time"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|excludeSubject
condition|)
block|{
name|diffValues
argument_list|(
name|diffs
argument_list|,
name|desc
argument_list|,
name|aSubj
argument_list|,
name|bSubj
argument_list|,
name|subjectField
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|trimLeadingOrNull (String s)
specifier|private
specifier|static
name|String
name|trimLeadingOrNull
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|!=
literal|null
condition|?
name|CharMatcher
operator|.
name|whitespace
argument_list|()
operator|.
name|trimLeadingFrom
argument_list|(
name|s
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|cleanReviewDbSubject (String s)
specifier|private
specifier|static
name|String
name|cleanReviewDbSubject
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|s
operator|=
name|CharMatcher
operator|.
name|is
argument_list|(
literal|' '
argument_list|)
operator|.
name|trimLeadingFrom
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// An old JGit bug failed to extract subjects from commits with "\r\n"
comment|// terminators: https://bugs.eclipse.org/bugs/show_bug.cgi?id=400707
comment|// Changes created with this bug may have "\r\n" converted to "\r " and the
comment|// entire commit in the subject. The version of JGit used to read NoteDb
comment|// changes parses these subjects correctly, so we need to clean up old
comment|// ReviewDb subjects before comparing.
name|int
name|rn
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"\r \r "
argument_list|)
decl_stmt|;
if|if
condition|(
name|rn
operator|>=
literal|0
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|rn
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
comment|/**    * Set of fields that must always exactly match between ReviewDb and NoteDb.    *<p>    * Used to limit the worst-case quadratic search when pairing off matching    * messages below.    */
annotation|@
name|AutoValue
DECL|class|ChangeMessageCandidate
specifier|abstract
specifier|static
class|class
name|ChangeMessageCandidate
block|{
DECL|method|create (ChangeMessage cm)
specifier|static
name|ChangeMessageCandidate
name|create
parameter_list|(
name|ChangeMessage
name|cm
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_ChangeBundle_ChangeMessageCandidate
argument_list|(
name|cm
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|cm
operator|.
name|getMessage
argument_list|()
argument_list|,
name|cm
operator|.
name|getTag
argument_list|()
argument_list|)
return|;
block|}
DECL|method|author ()
annotation|@
name|Nullable
specifier|abstract
name|Account
operator|.
name|Id
name|author
parameter_list|()
function_decl|;
DECL|method|message ()
annotation|@
name|Nullable
specifier|abstract
name|String
name|message
parameter_list|()
function_decl|;
DECL|method|tag ()
annotation|@
name|Nullable
specifier|abstract
name|String
name|tag
parameter_list|()
function_decl|;
comment|// Exclude:
comment|//  - patch set, which may be null on ReviewDb side but not NoteDb
comment|//  - UUID, which is always different between ReviewDb and NoteDb
comment|//  - writtenOn, which is fuzzy
block|}
DECL|method|diffChangeMessages (List<String> diffs, ChangeBundle bundleA, ChangeBundle bundleB)
specifier|private
specifier|static
name|void
name|diffChangeMessages
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|)
block|{
if|if
condition|(
name|bundleA
operator|.
name|source
operator|==
name|REVIEW_DB
operator|&&
name|bundleB
operator|.
name|source
operator|==
name|REVIEW_DB
condition|)
block|{
comment|// Both came from ReviewDb: check all fields exactly.
name|Map
argument_list|<
name|ChangeMessage
operator|.
name|Key
argument_list|,
name|ChangeMessage
argument_list|>
name|as
init|=
name|changeMessageMap
argument_list|(
name|bundleA
operator|.
name|filterChangeMessages
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ChangeMessage
operator|.
name|Key
argument_list|,
name|ChangeMessage
argument_list|>
name|bs
init|=
name|changeMessageMap
argument_list|(
name|bundleB
operator|.
name|filterChangeMessages
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeMessage
operator|.
name|Key
name|k
range|:
name|diffKeySets
argument_list|(
name|diffs
argument_list|,
name|as
argument_list|,
name|bs
argument_list|)
control|)
block|{
name|ChangeMessage
name|a
init|=
name|as
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|ChangeMessage
name|b
init|=
name|bs
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|String
name|desc
init|=
name|describe
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|diffColumns
argument_list|(
name|diffs
argument_list|,
name|ChangeMessage
operator|.
name|class
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|Change
operator|.
name|Id
name|id
init|=
name|bundleA
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|id
operator|.
name|equals
argument_list|(
name|bundleB
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to pair up matching ChangeMessages from each side, and succeed only
comment|// if both collections are empty at the end. Quadratic in the worst case,
comment|// but easy to reason about.
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|as
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|bundleA
operator|.
name|filterChangeMessages
argument_list|()
argument_list|)
decl_stmt|;
name|Multimap
argument_list|<
name|ChangeMessageCandidate
argument_list|,
name|ChangeMessage
argument_list|>
name|bs
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeMessage
name|b
range|:
name|bundleB
operator|.
name|filterChangeMessages
argument_list|()
control|)
block|{
name|bs
operator|.
name|put
argument_list|(
name|ChangeMessageCandidate
operator|.
name|create
argument_list|(
name|b
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|ChangeMessage
argument_list|>
name|ait
init|=
name|as
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|A
label|:
while|while
condition|(
name|ait
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ChangeMessage
name|a
init|=
name|ait
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ChangeMessage
argument_list|>
name|bit
init|=
name|bs
operator|.
name|get
argument_list|(
name|ChangeMessageCandidate
operator|.
name|create
argument_list|(
name|a
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ChangeMessage
name|b
init|=
name|bit
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|changeMessagesMatch
argument_list|(
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|)
condition|)
block|{
name|ait
operator|.
name|remove
argument_list|()
expr_stmt|;
name|bit
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue
name|A
continue|;
block|}
block|}
block|}
if|if
condition|(
name|as
operator|.
name|isEmpty
argument_list|()
operator|&&
name|bs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ChangeMessages differ for Change.Id "
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|as
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Only in A:"
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeMessage
name|cm
range|:
name|as
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n  "
argument_list|)
operator|.
name|append
argument_list|(
name|cm
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|bs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|bs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Only in B:"
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeMessage
name|cm
range|:
name|CHANGE_MESSAGE_ORDER
operator|.
name|sortedCopy
argument_list|(
name|bs
operator|.
name|values
argument_list|()
argument_list|)
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n  "
argument_list|)
operator|.
name|append
argument_list|(
name|cm
argument_list|)
expr_stmt|;
block|}
block|}
name|diffs
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|changeMessagesMatch ( ChangeBundle bundleA, ChangeMessage a, ChangeBundle bundleB, ChangeMessage b)
specifier|private
specifier|static
name|boolean
name|changeMessagesMatch
parameter_list|(
name|ChangeBundle
name|bundleA
parameter_list|,
name|ChangeMessage
name|a
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|,
name|ChangeMessage
name|b
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tempDiffs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|temp
init|=
literal|"temp"
decl_stmt|;
comment|// ReviewDb allows timestamps before patch set was created, but NoteDb
comment|// truncates this to the patch set creation timestamp.
name|Timestamp
name|ta
init|=
name|a
operator|.
name|getWrittenOn
argument_list|()
decl_stmt|;
name|Timestamp
name|tb
init|=
name|b
operator|.
name|getWrittenOn
argument_list|()
decl_stmt|;
name|PatchSet
name|psa
init|=
name|bundleA
operator|.
name|patchSets
operator|.
name|get
argument_list|(
name|a
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSet
name|psb
init|=
name|bundleB
operator|.
name|patchSets
operator|.
name|get
argument_list|(
name|b
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|excludePatchSet
init|=
literal|false
decl_stmt|;
name|boolean
name|excludeWrittenOn
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|bundleA
operator|.
name|source
operator|==
name|REVIEW_DB
operator|&&
name|bundleB
operator|.
name|source
operator|==
name|NOTE_DB
condition|)
block|{
name|excludePatchSet
operator|=
name|a
operator|.
name|getPatchSetId
argument_list|()
operator|==
literal|null
expr_stmt|;
name|excludeWrittenOn
operator|=
name|psa
operator|!=
literal|null
operator|&&
name|psb
operator|!=
literal|null
operator|&&
name|ta
operator|.
name|before
argument_list|(
name|psa
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|&&
name|tb
operator|.
name|equals
argument_list|(
name|psb
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bundleA
operator|.
name|source
operator|==
name|NOTE_DB
operator|&&
name|bundleB
operator|.
name|source
operator|==
name|REVIEW_DB
condition|)
block|{
name|excludePatchSet
operator|=
name|b
operator|.
name|getPatchSetId
argument_list|()
operator|==
literal|null
expr_stmt|;
name|excludeWrittenOn
operator|=
name|psa
operator|!=
literal|null
operator|&&
name|psb
operator|!=
literal|null
operator|&&
name|tb
operator|.
name|before
argument_list|(
name|psb
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|&&
name|ta
operator|.
name|equals
argument_list|(
name|psa
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|exclude
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"key"
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludePatchSet
condition|)
block|{
name|exclude
operator|.
name|add
argument_list|(
literal|"patchset"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludeWrittenOn
condition|)
block|{
name|exclude
operator|.
name|add
argument_list|(
literal|"writtenOn"
argument_list|)
expr_stmt|;
block|}
name|diffColumnsExcluding
argument_list|(
name|tempDiffs
argument_list|,
name|ChangeMessage
operator|.
name|class
argument_list|,
name|temp
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|,
name|exclude
argument_list|)
expr_stmt|;
return|return
name|tempDiffs
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|diffPatchSets (List<String> diffs, ChangeBundle bundleA, ChangeBundle bundleB)
specifier|private
specifier|static
name|void
name|diffPatchSets
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|)
block|{
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|as
init|=
name|bundleA
operator|.
name|filterPatchSets
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|bs
init|=
name|bundleB
operator|.
name|filterPatchSets
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSet
operator|.
name|Id
name|id
range|:
name|diffKeySets
argument_list|(
name|diffs
argument_list|,
name|as
argument_list|,
name|bs
argument_list|)
control|)
block|{
name|PatchSet
name|a
init|=
name|as
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|PatchSet
name|b
init|=
name|bs
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|desc
init|=
name|describe
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|pushCertField
init|=
literal|"pushCertificate"
decl_stmt|;
name|diffColumnsExcluding
argument_list|(
name|diffs
argument_list|,
name|PatchSet
operator|.
name|class
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|,
name|pushCertField
argument_list|)
expr_stmt|;
name|diffValues
argument_list|(
name|diffs
argument_list|,
name|desc
argument_list|,
name|trimPushCert
argument_list|(
name|a
argument_list|)
argument_list|,
name|trimPushCert
argument_list|(
name|b
argument_list|)
argument_list|,
name|pushCertField
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|trimPushCert (PatchSet ps)
specifier|private
specifier|static
name|String
name|trimPushCert
parameter_list|(
name|PatchSet
name|ps
parameter_list|)
block|{
if|if
condition|(
name|ps
operator|.
name|getPushCertificate
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|CharMatcher
operator|.
name|is
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|trimTrailingFrom
argument_list|(
name|ps
operator|.
name|getPushCertificate
argument_list|()
argument_list|)
return|;
block|}
DECL|method|diffPatchSetApprovals (List<String> diffs, ChangeBundle bundleA, ChangeBundle bundleB)
specifier|private
specifier|static
name|void
name|diffPatchSetApprovals
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|)
block|{
name|Map
argument_list|<
name|PatchSetApproval
operator|.
name|Key
argument_list|,
name|PatchSetApproval
argument_list|>
name|as
init|=
name|bundleA
operator|.
name|filterPatchSetApprovals
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|PatchSetApproval
operator|.
name|Key
argument_list|,
name|PatchSetApproval
argument_list|>
name|bs
init|=
name|bundleB
operator|.
name|filterPatchSetApprovals
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
operator|.
name|Key
name|k
range|:
name|diffKeySets
argument_list|(
name|diffs
argument_list|,
name|as
argument_list|,
name|bs
argument_list|)
control|)
block|{
name|PatchSetApproval
name|a
init|=
name|as
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|b
init|=
name|bs
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|String
name|desc
init|=
name|describe
argument_list|(
name|k
argument_list|)
decl_stmt|;
comment|// ReviewDb allows timestamps before patch set was created, but NoteDb
comment|// truncates this to the patch set creation timestamp.
name|Timestamp
name|ta
init|=
name|a
operator|.
name|getGranted
argument_list|()
decl_stmt|;
name|Timestamp
name|tb
init|=
name|b
operator|.
name|getGranted
argument_list|()
decl_stmt|;
name|PatchSet
name|psa
init|=
name|checkNotNull
argument_list|(
name|bundleA
operator|.
name|patchSets
operator|.
name|get
argument_list|(
name|a
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|PatchSet
name|psb
init|=
name|checkNotNull
argument_list|(
name|bundleB
operator|.
name|patchSets
operator|.
name|get
argument_list|(
name|b
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|excludeGranted
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|exclude
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleA
operator|.
name|source
operator|==
name|REVIEW_DB
operator|&&
name|bundleB
operator|.
name|source
operator|==
name|NOTE_DB
condition|)
block|{
name|excludeGranted
operator|=
name|ta
operator|.
name|before
argument_list|(
name|psa
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|&&
name|tb
operator|.
name|equals
argument_list|(
name|psb
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bundleA
operator|.
name|source
operator|==
name|NOTE_DB
operator|&&
name|bundleB
operator|.
name|source
operator|==
name|REVIEW_DB
condition|)
block|{
name|excludeGranted
operator|=
name|tb
operator|.
name|before
argument_list|(
name|psb
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|&&
name|ta
operator|.
name|equals
argument_list|(
name|psa
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludeGranted
condition|)
block|{
name|exclude
operator|.
name|add
argument_list|(
literal|"granted"
argument_list|)
expr_stmt|;
block|}
name|diffColumnsExcluding
argument_list|(
name|diffs
argument_list|,
name|PatchSetApproval
operator|.
name|class
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|,
name|exclude
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|diffReviewers (List<String> diffs, ChangeBundle bundleA, ChangeBundle bundleB)
specifier|private
specifier|static
name|void
name|diffReviewers
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|)
block|{
name|diffSets
argument_list|(
name|diffs
argument_list|,
name|bundleA
operator|.
name|reviewers
operator|.
name|all
argument_list|()
argument_list|,
name|bundleB
operator|.
name|reviewers
operator|.
name|all
argument_list|()
argument_list|,
literal|"reviewer"
argument_list|)
expr_stmt|;
block|}
DECL|method|diffPatchLineComments (List<String> diffs, ChangeBundle bundleA, ChangeBundle bundleB)
specifier|private
specifier|static
name|void
name|diffPatchLineComments
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|)
block|{
name|Map
argument_list|<
name|PatchLineComment
operator|.
name|Key
argument_list|,
name|PatchLineComment
argument_list|>
name|as
init|=
name|bundleA
operator|.
name|filterPatchLineComments
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|PatchLineComment
operator|.
name|Key
argument_list|,
name|PatchLineComment
argument_list|>
name|bs
init|=
name|bundleB
operator|.
name|filterPatchLineComments
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchLineComment
operator|.
name|Key
name|k
range|:
name|diffKeySets
argument_list|(
name|diffs
argument_list|,
name|as
argument_list|,
name|bs
argument_list|)
control|)
block|{
name|PatchLineComment
name|a
init|=
name|as
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|PatchLineComment
name|b
init|=
name|bs
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|String
name|desc
init|=
name|describe
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|diffColumns
argument_list|(
name|diffs
argument_list|,
name|PatchLineComment
operator|.
name|class
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|diffKeySets (List<String> diffs, Map<T, ?> a, Map<T, ?> b)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Set
argument_list|<
name|T
argument_list|>
name|diffKeySets
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|Map
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
name|a
parameter_list|,
name|Map
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|isEmpty
argument_list|()
operator|&&
name|b
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|a
operator|.
name|keySet
argument_list|()
return|;
block|}
name|String
name|clazz
init|=
name|keyClass
argument_list|(
operator|(
operator|!
name|a
operator|.
name|isEmpty
argument_list|()
condition|?
name|a
operator|.
name|keySet
argument_list|()
else|:
name|b
operator|.
name|keySet
argument_list|()
operator|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|diffSets
argument_list|(
name|diffs
argument_list|,
name|a
operator|.
name|keySet
argument_list|()
argument_list|,
name|b
operator|.
name|keySet
argument_list|()
argument_list|,
name|clazz
argument_list|)
return|;
block|}
DECL|method|diffSets (List<String> diffs, Set<T> as, Set<T> bs, String desc)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Set
argument_list|<
name|T
argument_list|>
name|diffSets
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|Set
argument_list|<
name|T
argument_list|>
name|as
parameter_list|,
name|Set
argument_list|<
name|T
argument_list|>
name|bs
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
if|if
condition|(
name|as
operator|.
name|isEmpty
argument_list|()
operator|&&
name|bs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|as
return|;
block|}
name|Set
argument_list|<
name|T
argument_list|>
name|aNotB
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|as
argument_list|,
name|bs
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|T
argument_list|>
name|bNotA
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|bs
argument_list|,
name|as
argument_list|)
decl_stmt|;
if|if
condition|(
name|aNotB
operator|.
name|isEmpty
argument_list|()
operator|&&
name|bNotA
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|as
return|;
block|}
name|diffs
operator|.
name|add
argument_list|(
name|desc
operator|+
literal|" sets differ: "
operator|+
name|aNotB
operator|+
literal|" only in A; "
operator|+
name|bNotA
operator|+
literal|" only in B"
argument_list|)
expr_stmt|;
return|return
name|Sets
operator|.
name|intersection
argument_list|(
name|as
argument_list|,
name|bs
argument_list|)
return|;
block|}
DECL|method|diffColumns (List<String> diffs, Class<T> clazz, String desc, ChangeBundle bundleA, T a, ChangeBundle bundleB, T b)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|diffColumns
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|String
name|desc
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|T
name|a
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|,
name|T
name|b
parameter_list|)
block|{
name|diffColumnsExcluding
argument_list|(
name|diffs
argument_list|,
name|clazz
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|diffColumnsExcluding (List<String> diffs, Class<T> clazz, String desc, ChangeBundle bundleA, T a, ChangeBundle bundleB, T b, String... exclude)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|diffColumnsExcluding
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|String
name|desc
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|T
name|a
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|,
name|T
name|b
parameter_list|,
name|String
modifier|...
name|exclude
parameter_list|)
block|{
name|diffColumnsExcluding
argument_list|(
name|diffs
argument_list|,
name|clazz
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|exclude
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|diffColumnsExcluding (List<String> diffs, Class<T> clazz, String desc, ChangeBundle bundleA, T a, ChangeBundle bundleB, T b, Iterable<String> exclude)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|diffColumnsExcluding
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|String
name|desc
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|T
name|a
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|,
name|T
name|b
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|exclude
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|toExclude
init|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|exclude
argument_list|)
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|Column
name|col
init|=
name|f
operator|.
name|getAnnotation
argument_list|(
name|Column
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|toExclude
operator|.
name|remove
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|Timestamp
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|f
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|diffTimestamps
argument_list|(
name|diffs
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diffValues
argument_list|(
name|diffs
argument_list|,
name|desc
argument_list|,
name|f
operator|.
name|get
argument_list|(
name|a
argument_list|)
argument_list|,
name|f
operator|.
name|get
argument_list|(
name|b
argument_list|)
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|checkArgument
argument_list|(
name|toExclude
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"requested columns to exclude not present in %s: %s"
argument_list|,
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|toExclude
argument_list|)
expr_stmt|;
block|}
DECL|method|diffTimestamps (List<String> diffs, String desc, ChangeBundle bundleA, Object a, ChangeBundle bundleB, Object b, String field)
specifier|private
specifier|static
name|void
name|diffTimestamps
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|String
name|desc
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|Object
name|a
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|,
name|Object
name|b
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|a
operator|.
name|getClass
argument_list|()
operator|==
name|b
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|a
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Timestamp
name|ta
decl_stmt|;
name|Timestamp
name|tb
decl_stmt|;
try|try
block|{
name|Field
name|f
init|=
name|clazz
operator|.
name|getDeclaredField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|f
operator|.
name|getAnnotation
argument_list|(
name|Column
operator|.
name|class
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ta
operator|=
operator|(
name|Timestamp
operator|)
name|f
operator|.
name|get
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|tb
operator|=
operator|(
name|Timestamp
operator|)
name|f
operator|.
name|get
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|NoSuchFieldException
decl||
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|diffTimestamps
argument_list|(
name|diffs
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|ta
argument_list|,
name|bundleB
argument_list|,
name|tb
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|diffTimestamps (List<String> diffs, String desc, ChangeBundle bundleA, Timestamp ta, ChangeBundle bundleB, Timestamp tb, String fieldDesc)
specifier|private
specifier|static
name|void
name|diffTimestamps
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|String
name|desc
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|Timestamp
name|ta
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|,
name|Timestamp
name|tb
parameter_list|,
name|String
name|fieldDesc
parameter_list|)
block|{
if|if
condition|(
name|bundleA
operator|.
name|source
operator|==
name|bundleB
operator|.
name|source
operator|||
name|ta
operator|==
literal|null
operator|||
name|tb
operator|==
literal|null
condition|)
block|{
name|diffValues
argument_list|(
name|diffs
argument_list|,
name|desc
argument_list|,
name|ta
argument_list|,
name|tb
argument_list|,
name|fieldDesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bundleA
operator|.
name|source
operator|==
name|NOTE_DB
condition|)
block|{
name|diffTimestamps
argument_list|(
name|diffs
argument_list|,
name|desc
argument_list|,
name|bundleA
operator|.
name|getChange
argument_list|()
argument_list|,
name|ta
argument_list|,
name|bundleB
operator|.
name|getChange
argument_list|()
argument_list|,
name|tb
argument_list|,
name|fieldDesc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diffTimestamps
argument_list|(
name|diffs
argument_list|,
name|desc
argument_list|,
name|bundleB
operator|.
name|getChange
argument_list|()
argument_list|,
name|tb
argument_list|,
name|bundleA
operator|.
name|getChange
argument_list|()
argument_list|,
name|ta
argument_list|,
name|fieldDesc
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|timestampsDiffer (ChangeBundle bundleA, Timestamp ta, ChangeBundle bundleB, Timestamp tb)
specifier|private
specifier|static
name|boolean
name|timestampsDiffer
parameter_list|(
name|ChangeBundle
name|bundleA
parameter_list|,
name|Timestamp
name|ta
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|,
name|Timestamp
name|tb
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tempDiffs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|diffTimestamps
argument_list|(
name|tempDiffs
argument_list|,
literal|"temp"
argument_list|,
name|bundleA
argument_list|,
name|ta
argument_list|,
name|bundleB
argument_list|,
name|tb
argument_list|,
literal|"temp"
argument_list|)
expr_stmt|;
return|return
operator|!
name|tempDiffs
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|diffTimestamps (List<String> diffs, String desc, Change changeFromNoteDb, Timestamp tsFromNoteDb, Change changeFromReviewDb, Timestamp tsFromReviewDb, String field)
specifier|private
specifier|static
name|void
name|diffTimestamps
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|String
name|desc
parameter_list|,
name|Change
name|changeFromNoteDb
parameter_list|,
name|Timestamp
name|tsFromNoteDb
parameter_list|,
name|Change
name|changeFromReviewDb
parameter_list|,
name|Timestamp
name|tsFromReviewDb
parameter_list|,
name|String
name|field
parameter_list|)
block|{
comment|// Because ChangeRebuilder may batch events together that are several
comment|// seconds apart, the timestamp in NoteDb may actually be several seconds
comment|// *earlier* than the timestamp in ReviewDb that it was converted from.
name|checkArgument
argument_list|(
name|tsFromNoteDb
operator|.
name|equals
argument_list|(
name|roundToSecond
argument_list|(
name|tsFromNoteDb
argument_list|)
argument_list|)
argument_list|,
literal|"%s from NoteDb has non-rounded %s timestamp: %s"
argument_list|,
name|desc
argument_list|,
name|field
argument_list|,
name|tsFromNoteDb
argument_list|)
expr_stmt|;
if|if
condition|(
name|tsFromReviewDb
operator|.
name|before
argument_list|(
name|changeFromReviewDb
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|&&
name|tsFromNoteDb
operator|.
name|equals
argument_list|(
name|changeFromNoteDb
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
condition|)
block|{
comment|// Timestamp predates change creation. These are truncated to change
comment|// creation time during NoteDb conversion, so allow this if the timestamp
comment|// in NoteDb matches the createdOn time in NoteDb.
return|return;
block|}
name|long
name|delta
init|=
name|tsFromReviewDb
operator|.
name|getTime
argument_list|()
operator|-
name|tsFromNoteDb
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|max
init|=
name|ChangeRebuilderImpl
operator|.
name|MAX_WINDOW_MS
decl_stmt|;
if|if
condition|(
name|delta
argument_list|<
literal|0
operator|||
name|delta
argument_list|>
name|max
condition|)
block|{
name|diffs
operator|.
name|add
argument_list|(
name|field
operator|+
literal|" differs for "
operator|+
name|desc
operator|+
literal|" in NoteDb vs. ReviewDb:"
operator|+
literal|" {"
operator|+
name|tsFromNoteDb
operator|+
literal|"} != {"
operator|+
name|tsFromReviewDb
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|diffValues (List<String> diffs, String desc, Object va, Object vb, String name)
specifier|private
specifier|static
name|void
name|diffValues
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|String
name|desc
parameter_list|,
name|Object
name|va
parameter_list|,
name|Object
name|vb
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|va
argument_list|,
name|vb
argument_list|)
condition|)
block|{
name|diffs
operator|.
name|add
argument_list|(
name|name
operator|+
literal|" differs for "
operator|+
name|desc
operator|+
literal|": {"
operator|+
name|va
operator|+
literal|"} != {"
operator|+
name|vb
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|describe (Object key)
specifier|private
specifier|static
name|String
name|describe
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|keyClass
argument_list|(
name|key
argument_list|)
operator|+
literal|" "
operator|+
name|key
return|;
block|}
DECL|method|keyClass (Object obj)
specifier|private
specifier|static
name|String
name|keyClass
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|obj
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|clazz
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|name
operator|.
name|endsWith
argument_list|(
literal|"Key"
argument_list|)
operator|||
name|name
operator|.
name|endsWith
argument_list|(
literal|"Id"
argument_list|)
argument_list|,
literal|"not an Id/Key class: %s"
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"Key"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"Id"
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|getEnclosingClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"."
operator|+
name|name
return|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"AutoValue_"
argument_list|)
condition|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'_'
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"{id="
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|", ChangeMessage["
operator|+
name|changeMessages
operator|.
name|size
argument_list|()
operator|+
literal|"]"
operator|+
literal|", PatchSet["
operator|+
name|patchSets
operator|.
name|size
argument_list|()
operator|+
literal|"]"
operator|+
literal|", PatchSetApproval["
operator|+
name|patchSetApprovals
operator|.
name|size
argument_list|()
operator|+
literal|"]"
operator|+
literal|", PatchLineComment["
operator|+
name|patchLineComments
operator|.
name|size
argument_list|()
operator|+
literal|"]"
operator|+
literal|"}"
return|;
block|}
block|}
end_class

end_unit

