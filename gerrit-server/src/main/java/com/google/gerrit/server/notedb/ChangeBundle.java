begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
operator|.
name|roundToSecond
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbUtil
operator|.
name|intKeyOrdering
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeBundle
operator|.
name|Source
operator|.
name|NOTE_DB
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeBundle
operator|.
name|Source
operator|.
name|REVIEW_DB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ComparisonChain
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchLineCommentsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|Column
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * A bundle of all entities rooted at a single {@link Change} entity.  *<p>  * See the {@link Change} Javadoc for a depiction of this tree. Bundles may be  * compared using {@link #differencesFrom(ChangeBundle)}, which normalizes out  * the minor implementation differences between ReviewDb and NoteDb.  */
end_comment

begin_class
DECL|class|ChangeBundle
specifier|public
class|class
name|ChangeBundle
block|{
DECL|enum|Source
specifier|public
enum|enum
name|Source
block|{
DECL|enumConstant|REVIEW_DB
DECL|enumConstant|NOTE_DB
name|REVIEW_DB
block|,
name|NOTE_DB
block|;   }
DECL|method|fromReviewDb (ReviewDb db, Change.Id id)
specifier|public
specifier|static
name|ChangeBundle
name|fromReviewDb
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|OrmException
block|{
name|db
operator|.
name|changes
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|id
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|new
name|ChangeBundle
argument_list|(
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|,
name|db
operator|.
name|changeMessages
argument_list|()
operator|.
name|byChange
argument_list|(
name|id
argument_list|)
argument_list|,
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|byChange
argument_list|(
name|id
argument_list|)
argument_list|,
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byChange
argument_list|(
name|id
argument_list|)
argument_list|,
name|db
operator|.
name|patchComments
argument_list|()
operator|.
name|byChange
argument_list|(
name|id
argument_list|)
argument_list|,
name|Source
operator|.
name|REVIEW_DB
argument_list|)
return|;
block|}
finally|finally
block|{
name|db
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|fromNotes (PatchLineCommentsUtil plcUtil, ChangeNotes notes)
specifier|public
specifier|static
name|ChangeBundle
name|fromNotes
parameter_list|(
name|PatchLineCommentsUtil
name|plcUtil
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
operator|new
name|ChangeBundle
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
argument_list|,
name|notes
operator|.
name|getChangeMessages
argument_list|()
argument_list|,
name|notes
operator|.
name|getPatchSets
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|notes
operator|.
name|getApprovals
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|Iterables
operator|.
name|concat
argument_list|(
name|plcUtil
operator|.
name|draftByChange
argument_list|(
literal|null
argument_list|,
name|notes
argument_list|)
argument_list|,
name|plcUtil
operator|.
name|publishedByChange
argument_list|(
literal|null
argument_list|,
name|notes
argument_list|)
argument_list|)
argument_list|,
name|Source
operator|.
name|NOTE_DB
argument_list|)
return|;
block|}
DECL|method|changeMessageMap ( Iterable<ChangeMessage> in)
specifier|private
specifier|static
name|Map
argument_list|<
name|ChangeMessage
operator|.
name|Key
argument_list|,
name|ChangeMessage
argument_list|>
name|changeMessageMap
parameter_list|(
name|Iterable
argument_list|<
name|ChangeMessage
argument_list|>
name|in
parameter_list|)
block|{
name|Map
argument_list|<
name|ChangeMessage
operator|.
name|Key
argument_list|,
name|ChangeMessage
argument_list|>
name|out
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ChangeMessage
operator|.
name|Key
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ChangeMessage
operator|.
name|Key
name|a
parameter_list|,
name|ChangeMessage
operator|.
name|Key
name|b
parameter_list|)
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|b
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|get
argument_list|()
argument_list|,
name|b
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeMessage
name|cm
range|:
name|in
control|)
block|{
name|out
operator|.
name|put
argument_list|(
name|cm
operator|.
name|getKey
argument_list|()
argument_list|,
name|cm
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|method|changeMessageList ( Iterable<ChangeMessage> in)
specifier|private
specifier|static
name|ImmutableList
argument_list|<
name|ChangeMessage
argument_list|>
name|changeMessageList
parameter_list|(
name|Iterable
argument_list|<
name|ChangeMessage
argument_list|>
name|in
parameter_list|)
block|{
comment|// Unlike the *Map comparators, which are intended to make key lists
comment|// diffable, this comparator sorts first on timestamp, then on every other
comment|// field.
specifier|final
name|Ordering
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|nullsFirst
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|nullsFirst
argument_list|()
decl_stmt|;
return|return
operator|new
name|Ordering
argument_list|<
name|ChangeMessage
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ChangeMessage
name|a
parameter_list|,
name|ChangeMessage
name|b
parameter_list|)
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|roundToSecond
argument_list|(
name|a
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
argument_list|,
name|roundToSecond
argument_list|(
name|b
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|b
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|psId
argument_list|(
name|a
argument_list|)
argument_list|,
name|psId
argument_list|(
name|b
argument_list|)
argument_list|,
name|nullsFirst
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|b
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|intKeyOrdering
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getMessage
argument_list|()
argument_list|,
name|b
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nullsFirst
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
specifier|private
name|Integer
name|psId
parameter_list|(
name|ChangeMessage
name|m
parameter_list|)
block|{
return|return
name|m
operator|.
name|getPatchSetId
argument_list|()
operator|!=
literal|null
condition|?
name|m
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
else|:
literal|null
return|;
block|}
block|}
operator|.
name|immutableSortedCopy
argument_list|(
name|in
argument_list|)
return|;
block|}
DECL|method|patchSetMap (Iterable<PatchSet> in)
specifier|private
specifier|static
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|patchSetMap
parameter_list|(
name|Iterable
argument_list|<
name|PatchSet
argument_list|>
name|in
parameter_list|)
block|{
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|out
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|PatchSet
operator|.
name|Id
name|a
parameter_list|,
name|PatchSet
operator|.
name|Id
name|b
parameter_list|)
block|{
return|return
name|patchSetIdChain
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSet
name|ps
range|:
name|in
control|)
block|{
name|out
operator|.
name|put
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|PatchSetApproval
operator|.
name|Key
argument_list|,
name|PatchSetApproval
argument_list|>
DECL|method|patchSetApprovalMap (Iterable<PatchSetApproval> in)
name|patchSetApprovalMap
parameter_list|(
name|Iterable
argument_list|<
name|PatchSetApproval
argument_list|>
name|in
parameter_list|)
block|{
name|Map
argument_list|<
name|PatchSetApproval
operator|.
name|Key
argument_list|,
name|PatchSetApproval
argument_list|>
name|out
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|PatchSetApproval
operator|.
name|Key
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|PatchSetApproval
operator|.
name|Key
name|a
parameter_list|,
name|PatchSetApproval
operator|.
name|Key
name|b
parameter_list|)
block|{
return|return
name|patchSetIdChain
argument_list|(
name|a
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|b
operator|.
name|getParentKey
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|b
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getLabelId
argument_list|()
argument_list|,
name|b
operator|.
name|getLabelId
argument_list|()
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|in
control|)
block|{
name|out
operator|.
name|put
argument_list|(
name|psa
operator|.
name|getKey
argument_list|()
argument_list|,
name|psa
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|PatchLineComment
operator|.
name|Key
argument_list|,
name|PatchLineComment
argument_list|>
DECL|method|patchLineCommentMap (Iterable<PatchLineComment> in)
name|patchLineCommentMap
parameter_list|(
name|Iterable
argument_list|<
name|PatchLineComment
argument_list|>
name|in
parameter_list|)
block|{
name|Map
argument_list|<
name|PatchLineComment
operator|.
name|Key
argument_list|,
name|PatchLineComment
argument_list|>
name|out
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|PatchLineComment
operator|.
name|Key
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|PatchLineComment
operator|.
name|Key
name|a
parameter_list|,
name|PatchLineComment
operator|.
name|Key
name|b
parameter_list|)
block|{
name|Patch
operator|.
name|Key
name|pka
init|=
name|a
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|Patch
operator|.
name|Key
name|pkb
init|=
name|b
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
return|return
name|patchSetIdChain
argument_list|(
name|pka
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|pkb
operator|.
name|getParentKey
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|pka
operator|.
name|get
argument_list|()
argument_list|,
name|pkb
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|get
argument_list|()
argument_list|,
name|b
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchLineComment
name|plc
range|:
name|in
control|)
block|{
name|out
operator|.
name|put
argument_list|(
name|plc
operator|.
name|getKey
argument_list|()
argument_list|,
name|plc
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|method|patchSetIdChain (PatchSet.Id a, PatchSet.Id b)
specifier|private
specifier|static
name|ComparisonChain
name|patchSetIdChain
parameter_list|(
name|PatchSet
operator|.
name|Id
name|a
parameter_list|,
name|PatchSet
operator|.
name|Id
name|b
parameter_list|)
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|b
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|a
operator|.
name|get
argument_list|()
argument_list|,
name|b
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|checkColumns (Class<?> clazz, Integer... expected)
specifier|private
specifier|static
name|void
name|checkColumns
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Integer
modifier|...
name|expected
parameter_list|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|ids
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|Column
name|col
init|=
name|f
operator|.
name|getAnnotation
argument_list|(
name|Column
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|!=
literal|null
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|col
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|expectedIds
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expected
argument_list|)
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|ids
operator|.
name|equals
argument_list|(
name|expectedIds
argument_list|)
argument_list|,
literal|"Unexpected column set for %s: %s != %s"
argument_list|,
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|ids
argument_list|,
name|expectedIds
argument_list|)
expr_stmt|;
block|}
static|static
block|{
comment|// Initialization-time checks that the column set hasn't changed since the
comment|// last time this file was updated.
name|checkColumns
argument_list|(
name|Change
operator|.
name|Id
operator|.
name|class
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|Change
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|10
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|,
literal|17
argument_list|,
literal|18
argument_list|,
comment|// TODO(dborowitz): It's potentially possible to compare noteDbState in
comment|// the Change with the state implied by a ChangeNotes.
literal|101
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|ChangeMessage
operator|.
name|Key
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|ChangeMessage
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|PatchSet
operator|.
name|Id
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|PatchSet
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|PatchSetApproval
operator|.
name|Key
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|PatchSetApproval
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|PatchLineComment
operator|.
name|Key
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|PatchLineComment
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|field|change
specifier|private
specifier|final
name|Change
name|change
decl_stmt|;
DECL|field|changeMessages
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|ChangeMessage
argument_list|>
name|changeMessages
decl_stmt|;
DECL|field|patchSets
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|patchSets
decl_stmt|;
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|PatchSetApproval
operator|.
name|Key
argument_list|,
name|PatchSetApproval
argument_list|>
DECL|field|patchSetApprovals
name|patchSetApprovals
decl_stmt|;
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|PatchLineComment
operator|.
name|Key
argument_list|,
name|PatchLineComment
argument_list|>
DECL|field|patchLineComments
name|patchLineComments
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|Source
name|source
decl_stmt|;
DECL|method|ChangeBundle ( Change change, Iterable<ChangeMessage> changeMessages, Iterable<PatchSet> patchSets, Iterable<PatchSetApproval> patchSetApprovals, Iterable<PatchLineComment> patchLineComments, Source source)
specifier|public
name|ChangeBundle
parameter_list|(
name|Change
name|change
parameter_list|,
name|Iterable
argument_list|<
name|ChangeMessage
argument_list|>
name|changeMessages
parameter_list|,
name|Iterable
argument_list|<
name|PatchSet
argument_list|>
name|patchSets
parameter_list|,
name|Iterable
argument_list|<
name|PatchSetApproval
argument_list|>
name|patchSetApprovals
parameter_list|,
name|Iterable
argument_list|<
name|PatchLineComment
argument_list|>
name|patchLineComments
parameter_list|,
name|Source
name|source
parameter_list|)
block|{
name|this
operator|.
name|change
operator|=
name|checkNotNull
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|this
operator|.
name|changeMessages
operator|=
name|changeMessageList
argument_list|(
name|changeMessages
argument_list|)
expr_stmt|;
name|this
operator|.
name|patchSets
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|patchSetMap
argument_list|(
name|patchSets
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|patchSetApprovals
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|patchSetApprovalMap
argument_list|(
name|patchSetApprovals
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|patchLineComments
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|patchLineCommentMap
argument_list|(
name|patchLineComments
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|checkNotNull
argument_list|(
name|source
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeMessage
name|m
range|:
name|this
operator|.
name|changeMessages
control|)
block|{
name|checkArgument
argument_list|(
name|m
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchSet
operator|.
name|Id
name|id
range|:
name|this
operator|.
name|patchSets
operator|.
name|keySet
argument_list|()
control|)
block|{
name|checkArgument
argument_list|(
name|id
operator|.
name|getParentKey
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchSetApproval
operator|.
name|Key
name|k
range|:
name|this
operator|.
name|patchSetApprovals
operator|.
name|keySet
argument_list|()
control|)
block|{
name|checkArgument
argument_list|(
name|k
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchLineComment
operator|.
name|Key
name|k
range|:
name|this
operator|.
name|patchLineComments
operator|.
name|keySet
argument_list|()
control|)
block|{
name|checkArgument
argument_list|(
name|k
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getChange ()
specifier|public
name|Change
name|getChange
parameter_list|()
block|{
return|return
name|change
return|;
block|}
DECL|method|getChangeMessages ()
specifier|public
name|ImmutableCollection
argument_list|<
name|ChangeMessage
argument_list|>
name|getChangeMessages
parameter_list|()
block|{
return|return
name|changeMessages
return|;
block|}
DECL|method|getPatchSets ()
specifier|public
name|ImmutableCollection
argument_list|<
name|PatchSet
argument_list|>
name|getPatchSets
parameter_list|()
block|{
return|return
name|patchSets
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|getPatchSetApprovals ()
specifier|public
name|ImmutableCollection
argument_list|<
name|PatchSetApproval
argument_list|>
name|getPatchSetApprovals
parameter_list|()
block|{
return|return
name|patchSetApprovals
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|getPatchLineComments ()
specifier|public
name|ImmutableCollection
argument_list|<
name|PatchLineComment
argument_list|>
name|getPatchLineComments
parameter_list|()
block|{
return|return
name|patchLineComments
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|getSource ()
specifier|public
name|Source
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
DECL|method|differencesFrom (ChangeBundle o)
specifier|public
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|differencesFrom
parameter_list|(
name|ChangeBundle
name|o
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|diffs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|diffChanges
argument_list|(
name|diffs
argument_list|,
name|this
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|diffChangeMessages
argument_list|(
name|diffs
argument_list|,
name|this
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|diffPatchSets
argument_list|(
name|diffs
argument_list|,
name|this
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|diffPatchSetApprovals
argument_list|(
name|diffs
argument_list|,
name|this
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|diffPatchLineComments
argument_list|(
name|diffs
argument_list|,
name|this
argument_list|,
name|o
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|diffs
argument_list|)
return|;
block|}
DECL|method|diffChanges (List<String> diffs, ChangeBundle bundleA, ChangeBundle bundleB)
specifier|private
specifier|static
name|void
name|diffChanges
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|)
block|{
name|Change
name|a
init|=
name|bundleA
operator|.
name|change
decl_stmt|;
name|Change
name|b
init|=
name|bundleB
operator|.
name|change
decl_stmt|;
name|String
name|desc
init|=
name|a
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getId
argument_list|()
argument_list|)
condition|?
name|describe
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|)
else|:
literal|"Changes"
decl_stmt|;
name|diffColumnsExcluding
argument_list|(
name|diffs
argument_list|,
name|Change
operator|.
name|class
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|,
literal|"rowVersion"
argument_list|,
literal|"noteDbState"
argument_list|)
expr_stmt|;
block|}
DECL|method|diffChangeMessages (List<String> diffs, ChangeBundle bundleA, ChangeBundle bundleB)
specifier|private
specifier|static
name|void
name|diffChangeMessages
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|)
block|{
if|if
condition|(
name|bundleA
operator|.
name|source
operator|==
name|REVIEW_DB
operator|&&
name|bundleB
operator|.
name|source
operator|==
name|REVIEW_DB
condition|)
block|{
comment|// Both came from ReviewDb: check all fields exactly.
name|Map
argument_list|<
name|ChangeMessage
operator|.
name|Key
argument_list|,
name|ChangeMessage
argument_list|>
name|as
init|=
name|changeMessageMap
argument_list|(
name|bundleA
operator|.
name|changeMessages
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ChangeMessage
operator|.
name|Key
argument_list|,
name|ChangeMessage
argument_list|>
name|bs
init|=
name|changeMessageMap
argument_list|(
name|bundleB
operator|.
name|changeMessages
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeMessage
operator|.
name|Key
name|k
range|:
name|diffKeySets
argument_list|(
name|diffs
argument_list|,
name|as
argument_list|,
name|bs
argument_list|)
control|)
block|{
name|ChangeMessage
name|a
init|=
name|as
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|ChangeMessage
name|b
init|=
name|bs
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|String
name|desc
init|=
name|describe
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|diffColumns
argument_list|(
name|diffs
argument_list|,
name|ChangeMessage
operator|.
name|class
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// At least one is from NoteDb, so comparisons are inexact as noted below.
name|Change
operator|.
name|Id
name|id
init|=
name|bundleA
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|id
operator|.
name|equals
argument_list|(
name|bundleB
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|as
init|=
name|bundleA
operator|.
name|changeMessages
decl_stmt|;
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|bs
init|=
name|bundleB
operator|.
name|changeMessages
decl_stmt|;
if|if
condition|(
name|as
operator|.
name|size
argument_list|()
operator|!=
name|bs
operator|.
name|size
argument_list|()
condition|)
block|{
name|Joiner
name|j
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|diffs
operator|.
name|add
argument_list|(
literal|"Differing numbers of ChangeMessages for Change.Id "
operator|+
name|id
operator|+
literal|":\n"
operator|+
name|j
operator|.
name|join
argument_list|(
name|as
argument_list|)
operator|+
literal|"\n--- vs. ---\n"
operator|+
name|j
operator|.
name|join
argument_list|(
name|bs
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|as
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ChangeMessage
name|a
init|=
name|as
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ChangeMessage
name|b
init|=
name|bs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|desc
init|=
literal|"ChangeMessage on "
operator|+
name|id
operator|+
literal|" at index "
operator|+
name|i
decl_stmt|;
comment|// Ignore null PatchSet.Id on a ReviewDb change; all entities in NoteDb
comment|// have a PatchSet.Id.
name|boolean
name|checkPsId
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|bundleA
operator|.
name|source
operator|==
name|REVIEW_DB
condition|)
block|{
name|checkPsId
operator|=
name|a
operator|.
name|getPatchSetId
argument_list|()
operator|!=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bundleB
operator|.
name|source
operator|==
name|REVIEW_DB
condition|)
block|{
name|checkPsId
operator|=
name|b
operator|.
name|getPatchSetId
argument_list|()
operator|!=
literal|null
expr_stmt|;
block|}
comment|// Ignore UUIDs for both sides.
name|List
argument_list|<
name|String
argument_list|>
name|exclude
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"key"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkPsId
condition|)
block|{
name|exclude
operator|.
name|add
argument_list|(
literal|"patchset"
argument_list|)
expr_stmt|;
block|}
comment|// Normal column-wise diff also allows timestamp slop.
name|diffColumnsExcluding
argument_list|(
name|diffs
argument_list|,
name|ChangeMessage
operator|.
name|class
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|,
name|exclude
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|diffPatchSets (List<String> diffs, ChangeBundle bundleA, ChangeBundle bundleB)
specifier|private
specifier|static
name|void
name|diffPatchSets
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|)
block|{
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|as
init|=
name|bundleA
operator|.
name|patchSets
decl_stmt|;
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|bs
init|=
name|bundleB
operator|.
name|patchSets
decl_stmt|;
for|for
control|(
name|PatchSet
operator|.
name|Id
name|id
range|:
name|diffKeySets
argument_list|(
name|diffs
argument_list|,
name|as
argument_list|,
name|bs
argument_list|)
control|)
block|{
name|PatchSet
name|a
init|=
name|as
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|PatchSet
name|b
init|=
name|bs
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|desc
init|=
name|describe
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|pushCertField
init|=
literal|"pushCertificate"
decl_stmt|;
name|diffColumnsExcluding
argument_list|(
name|diffs
argument_list|,
name|PatchSet
operator|.
name|class
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|,
name|pushCertField
argument_list|)
expr_stmt|;
name|diffValues
argument_list|(
name|diffs
argument_list|,
name|desc
argument_list|,
name|trimPushCert
argument_list|(
name|a
argument_list|)
argument_list|,
name|trimPushCert
argument_list|(
name|b
argument_list|)
argument_list|,
name|pushCertField
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|trimPushCert (PatchSet ps)
specifier|private
specifier|static
name|String
name|trimPushCert
parameter_list|(
name|PatchSet
name|ps
parameter_list|)
block|{
if|if
condition|(
name|ps
operator|.
name|getPushCertificate
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|CharMatcher
operator|.
name|is
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|trimTrailingFrom
argument_list|(
name|ps
operator|.
name|getPushCertificate
argument_list|()
argument_list|)
return|;
block|}
DECL|method|diffPatchSetApprovals (List<String> diffs, ChangeBundle bundleA, ChangeBundle bundleB)
specifier|private
specifier|static
name|void
name|diffPatchSetApprovals
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|)
block|{
name|Map
argument_list|<
name|PatchSetApproval
operator|.
name|Key
argument_list|,
name|PatchSetApproval
argument_list|>
name|as
init|=
name|bundleA
operator|.
name|patchSetApprovals
decl_stmt|;
name|Map
argument_list|<
name|PatchSetApproval
operator|.
name|Key
argument_list|,
name|PatchSetApproval
argument_list|>
name|bs
init|=
name|bundleB
operator|.
name|patchSetApprovals
decl_stmt|;
for|for
control|(
name|PatchSetApproval
operator|.
name|Key
name|k
range|:
name|diffKeySets
argument_list|(
name|diffs
argument_list|,
name|as
argument_list|,
name|bs
argument_list|)
control|)
block|{
name|PatchSetApproval
name|a
init|=
name|as
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|b
init|=
name|bs
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|String
name|desc
init|=
name|describe
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|diffColumns
argument_list|(
name|diffs
argument_list|,
name|PatchSetApproval
operator|.
name|class
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|diffPatchLineComments (List<String> diffs, ChangeBundle bundleA, ChangeBundle bundleB)
specifier|private
specifier|static
name|void
name|diffPatchLineComments
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|)
block|{
name|Map
argument_list|<
name|PatchLineComment
operator|.
name|Key
argument_list|,
name|PatchLineComment
argument_list|>
name|as
init|=
name|bundleA
operator|.
name|patchLineComments
decl_stmt|;
name|Map
argument_list|<
name|PatchLineComment
operator|.
name|Key
argument_list|,
name|PatchLineComment
argument_list|>
name|bs
init|=
name|bundleB
operator|.
name|patchLineComments
decl_stmt|;
for|for
control|(
name|PatchLineComment
operator|.
name|Key
name|k
range|:
name|diffKeySets
argument_list|(
name|diffs
argument_list|,
name|as
argument_list|,
name|bs
argument_list|)
control|)
block|{
name|PatchLineComment
name|a
init|=
name|as
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|PatchLineComment
name|b
init|=
name|bs
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|String
name|desc
init|=
name|describe
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|diffColumns
argument_list|(
name|diffs
argument_list|,
name|PatchLineComment
operator|.
name|class
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|diffKeySets (List<String> diffs, Map<T, ?> a, Map<T, ?> b)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Set
argument_list|<
name|T
argument_list|>
name|diffKeySets
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|Map
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
name|a
parameter_list|,
name|Map
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
name|b
parameter_list|)
block|{
name|Set
argument_list|<
name|T
argument_list|>
name|as
init|=
name|a
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|T
argument_list|>
name|bs
init|=
name|b
operator|.
name|keySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|as
operator|.
name|isEmpty
argument_list|()
operator|&&
name|bs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|as
return|;
block|}
name|String
name|clazz
init|=
name|keyClass
argument_list|(
operator|(
operator|!
name|as
operator|.
name|isEmpty
argument_list|()
condition|?
name|as
else|:
name|bs
operator|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|T
argument_list|>
name|aNotB
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|as
argument_list|,
name|bs
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|T
argument_list|>
name|bNotA
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|bs
argument_list|,
name|as
argument_list|)
decl_stmt|;
if|if
condition|(
name|aNotB
operator|.
name|isEmpty
argument_list|()
operator|&&
name|bNotA
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|as
return|;
block|}
name|diffs
operator|.
name|add
argument_list|(
name|clazz
operator|+
literal|" sets differ: "
operator|+
name|aNotB
operator|+
literal|" only in A; "
operator|+
name|bNotA
operator|+
literal|" only in B"
argument_list|)
expr_stmt|;
return|return
name|Sets
operator|.
name|intersection
argument_list|(
name|as
argument_list|,
name|bs
argument_list|)
return|;
block|}
DECL|method|diffColumns (List<String> diffs, Class<T> clazz, String desc, ChangeBundle bundleA, T a, ChangeBundle bundleB, T b)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|diffColumns
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|String
name|desc
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|T
name|a
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|,
name|T
name|b
parameter_list|)
block|{
name|diffColumnsExcluding
argument_list|(
name|diffs
argument_list|,
name|clazz
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|diffColumnsExcluding (List<String> diffs, Class<T> clazz, String desc, ChangeBundle bundleA, T a, ChangeBundle bundleB, T b, String... exclude)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|diffColumnsExcluding
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|String
name|desc
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|T
name|a
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|,
name|T
name|b
parameter_list|,
name|String
modifier|...
name|exclude
parameter_list|)
block|{
name|diffColumnsExcluding
argument_list|(
name|diffs
argument_list|,
name|clazz
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|exclude
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|diffColumnsExcluding (List<String> diffs, Class<T> clazz, String desc, ChangeBundle bundleA, T a, ChangeBundle bundleB, T b, Iterable<String> exclude)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|diffColumnsExcluding
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|String
name|desc
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|T
name|a
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|,
name|T
name|b
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|exclude
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|toExclude
init|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|exclude
argument_list|)
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|Column
name|col
init|=
name|f
operator|.
name|getAnnotation
argument_list|(
name|Column
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|toExclude
operator|.
name|remove
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|Timestamp
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|f
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|diffTimestamps
argument_list|(
name|diffs
argument_list|,
name|desc
argument_list|,
name|bundleA
argument_list|,
name|a
argument_list|,
name|bundleB
argument_list|,
name|b
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diffValues
argument_list|(
name|diffs
argument_list|,
name|desc
argument_list|,
name|f
operator|.
name|get
argument_list|(
name|a
argument_list|)
argument_list|,
name|f
operator|.
name|get
argument_list|(
name|b
argument_list|)
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|checkArgument
argument_list|(
name|toExclude
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"requested columns to exclude not present in %s: %s"
argument_list|,
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|toExclude
argument_list|)
expr_stmt|;
block|}
DECL|method|diffTimestamps (List<String> diffs, String desc, ChangeBundle bundleA, Object a, ChangeBundle bundleB, Object b, String field)
specifier|private
specifier|static
name|void
name|diffTimestamps
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|String
name|desc
parameter_list|,
name|ChangeBundle
name|bundleA
parameter_list|,
name|Object
name|a
parameter_list|,
name|ChangeBundle
name|bundleB
parameter_list|,
name|Object
name|b
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|a
operator|.
name|getClass
argument_list|()
operator|==
name|b
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|a
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Timestamp
name|ta
decl_stmt|;
name|Timestamp
name|tb
decl_stmt|;
try|try
block|{
name|Field
name|f
init|=
name|clazz
operator|.
name|getDeclaredField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|f
operator|.
name|getAnnotation
argument_list|(
name|Column
operator|.
name|class
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ta
operator|=
operator|(
name|Timestamp
operator|)
name|f
operator|.
name|get
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|tb
operator|=
operator|(
name|Timestamp
operator|)
name|f
operator|.
name|get
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|NoSuchFieldException
decl||
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|bundleA
operator|.
name|source
operator|==
name|bundleB
operator|.
name|source
operator|||
name|ta
operator|==
literal|null
operator|||
name|tb
operator|==
literal|null
condition|)
block|{
name|diffValues
argument_list|(
name|diffs
argument_list|,
name|desc
argument_list|,
name|ta
argument_list|,
name|tb
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bundleA
operator|.
name|source
operator|==
name|NOTE_DB
condition|)
block|{
name|diffTimestamps
argument_list|(
name|diffs
argument_list|,
name|desc
argument_list|,
name|ta
argument_list|,
name|tb
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diffTimestamps
argument_list|(
name|diffs
argument_list|,
name|desc
argument_list|,
name|tb
argument_list|,
name|ta
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|diffTimestamps (List<String> diffs, String desc, Timestamp tsFromNoteDb, Timestamp tsFromReviewDb, String field)
specifier|private
specifier|static
name|void
name|diffTimestamps
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|String
name|desc
parameter_list|,
name|Timestamp
name|tsFromNoteDb
parameter_list|,
name|Timestamp
name|tsFromReviewDb
parameter_list|,
name|String
name|field
parameter_list|)
block|{
comment|// Because ChangeRebuilder may batch events together that are several
comment|// seconds apart, the timestamp in NoteDb may actually be several seconds
comment|// *earlier* than the timestamp in ReviewDb that it was converted from.
name|checkArgument
argument_list|(
name|tsFromNoteDb
operator|.
name|equals
argument_list|(
name|roundToSecond
argument_list|(
name|tsFromNoteDb
argument_list|)
argument_list|)
argument_list|,
literal|"%s from NoteDb has non-rounded %s timestamp: %s"
argument_list|,
name|desc
argument_list|,
name|field
argument_list|,
name|tsFromNoteDb
argument_list|)
expr_stmt|;
name|long
name|delta
init|=
name|tsFromReviewDb
operator|.
name|getTime
argument_list|()
operator|-
name|tsFromNoteDb
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|max
init|=
name|ChangeRebuilderImpl
operator|.
name|MAX_WINDOW_MS
decl_stmt|;
if|if
condition|(
name|delta
argument_list|<
literal|0
operator|||
name|delta
argument_list|>
name|max
condition|)
block|{
name|diffs
operator|.
name|add
argument_list|(
name|field
operator|+
literal|" differs for "
operator|+
name|desc
operator|+
literal|" in NoteDb vs. ReviewDb:"
operator|+
literal|" {"
operator|+
name|tsFromNoteDb
operator|+
literal|"} != {"
operator|+
name|tsFromReviewDb
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|diffValues (List<String> diffs, String desc, Object va, Object vb, String name)
specifier|private
specifier|static
name|void
name|diffValues
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|diffs
parameter_list|,
name|String
name|desc
parameter_list|,
name|Object
name|va
parameter_list|,
name|Object
name|vb
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|va
argument_list|,
name|vb
argument_list|)
condition|)
block|{
name|diffs
operator|.
name|add
argument_list|(
name|name
operator|+
literal|" differs for "
operator|+
name|desc
operator|+
literal|": {"
operator|+
name|va
operator|+
literal|"} != {"
operator|+
name|vb
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|describe (Object key)
specifier|private
specifier|static
name|String
name|describe
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|keyClass
argument_list|(
name|key
argument_list|)
operator|+
literal|" "
operator|+
name|key
return|;
block|}
DECL|method|keyClass (Object obj)
specifier|private
specifier|static
name|String
name|keyClass
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|obj
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|clazz
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|name
operator|.
name|equals
argument_list|(
literal|"Key"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"Id"
argument_list|)
argument_list|,
literal|"not an Id/Key class: %s"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|clazz
operator|.
name|getEnclosingClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"."
operator|+
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"{id="
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|", ChangeMessage["
operator|+
name|changeMessages
operator|.
name|size
argument_list|()
operator|+
literal|"]"
operator|+
literal|", PatchSet["
operator|+
name|patchSets
operator|.
name|size
argument_list|()
operator|+
literal|"]"
operator|+
literal|", PatchSetApproval["
operator|+
name|patchSetApprovals
operator|.
name|size
argument_list|()
operator|+
literal|"]"
operator|+
literal|", PatchLineComment["
operator|+
name|patchLineComments
operator|.
name|size
argument_list|()
operator|+
literal|"]"
operator|+
literal|"}"
return|;
block|}
block|}
end_class

end_unit

