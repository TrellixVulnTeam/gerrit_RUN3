begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.changedetail
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|changedetail
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ApprovalCategory
operator|.
name|SUBMIT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ReviewResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ProjectUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MergeOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MergeQueue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|InvalidChangeOperationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|AtomicUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_class
DECL|class|Submit
specifier|public
class|class
name|Submit
implements|implements
name|Callable
argument_list|<
name|ReviewResult
argument_list|>
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (PatchSet.Id patchSetId)
name|Submit
name|create
parameter_list|(
name|PatchSet
operator|.
name|Id
name|patchSetId
parameter_list|)
function_decl|;
block|}
DECL|field|changeControlFactory
specifier|private
specifier|final
name|ChangeControl
operator|.
name|Factory
name|changeControlFactory
decl_stmt|;
DECL|field|opFactory
specifier|private
specifier|final
name|MergeOp
operator|.
name|Factory
name|opFactory
decl_stmt|;
DECL|field|merger
specifier|private
specifier|final
name|MergeQueue
name|merger
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|ReviewDb
name|db
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|currentUser
specifier|private
specifier|final
name|IdentifiedUser
name|currentUser
decl_stmt|;
DECL|field|patchSetId
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|patchSetId
decl_stmt|;
annotation|@
name|Inject
DECL|method|Submit (final ChangeControl.Factory changeControlFactory, final MergeOp.Factory opFactory, final MergeQueue merger, final ReviewDb db, final GitRepositoryManager repoManager, final IdentifiedUser currentUser, @Assisted final PatchSet.Id patchSetId)
name|Submit
parameter_list|(
specifier|final
name|ChangeControl
operator|.
name|Factory
name|changeControlFactory
parameter_list|,
specifier|final
name|MergeOp
operator|.
name|Factory
name|opFactory
parameter_list|,
specifier|final
name|MergeQueue
name|merger
parameter_list|,
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|GitRepositoryManager
name|repoManager
parameter_list|,
specifier|final
name|IdentifiedUser
name|currentUser
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|PatchSet
operator|.
name|Id
name|patchSetId
parameter_list|)
block|{
name|this
operator|.
name|changeControlFactory
operator|=
name|changeControlFactory
expr_stmt|;
name|this
operator|.
name|opFactory
operator|=
name|opFactory
expr_stmt|;
name|this
operator|.
name|merger
operator|=
name|merger
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|currentUser
operator|=
name|currentUser
expr_stmt|;
name|this
operator|.
name|patchSetId
operator|=
name|patchSetId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|ReviewResult
name|call
parameter_list|()
throws|throws
name|IllegalStateException
throws|,
name|InvalidChangeOperationException
throws|,
name|NoSuchChangeException
throws|,
name|OrmException
throws|,
name|IOException
block|{
specifier|final
name|ReviewResult
name|result
init|=
operator|new
name|ReviewResult
argument_list|()
decl_stmt|;
specifier|final
name|PatchSet
name|patch
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|patchSetId
argument_list|)
decl_stmt|;
specifier|final
name|Change
operator|.
name|Id
name|changeId
init|=
name|patchSetId
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
specifier|final
name|ChangeControl
name|control
init|=
name|changeControlFactory
operator|.
name|validateFor
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|result
operator|.
name|setChangeId
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|patch
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|submitResult
init|=
name|control
operator|.
name|canSubmit
argument_list|(
name|db
argument_list|,
name|patch
argument_list|)
decl_stmt|;
if|if
condition|(
name|submitResult
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ChangeControl.canSubmit returned empty list"
argument_list|)
throw|;
block|}
for|for
control|(
name|SubmitRecord
name|submitRecord
range|:
name|submitResult
control|)
block|{
switch|switch
condition|(
name|submitRecord
operator|.
name|status
condition|)
block|{
case|case
name|OK
case|:
if|if
condition|(
operator|!
name|control
operator|.
name|getRefControl
argument_list|()
operator|.
name|canSubmit
argument_list|()
condition|)
block|{
name|result
operator|.
name|addError
argument_list|(
operator|new
name|ReviewResult
operator|.
name|Error
argument_list|(
name|ReviewResult
operator|.
name|Error
operator|.
name|Type
operator|.
name|SUBMIT_NOT_PERMITTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NOT_READY
case|:
name|StringBuilder
name|errMsg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|SubmitRecord
operator|.
name|Label
name|lbl
range|:
name|submitRecord
operator|.
name|labels
control|)
block|{
switch|switch
condition|(
name|lbl
operator|.
name|status
condition|)
block|{
case|case
name|OK
case|:
break|break;
case|case
name|REJECT
case|:
if|if
condition|(
name|errMsg
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|errMsg
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
name|errMsg
operator|.
name|append
argument_list|(
literal|"change "
operator|+
name|changeId
operator|+
literal|": blocked by "
operator|+
name|lbl
operator|.
name|label
argument_list|)
expr_stmt|;
break|break;
case|case
name|NEED
case|:
if|if
condition|(
name|errMsg
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|errMsg
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
name|errMsg
operator|.
name|append
argument_list|(
literal|"change "
operator|+
name|changeId
operator|+
literal|": needs "
operator|+
name|lbl
operator|.
name|label
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAY
case|:
comment|// The MAY label didn't cause the NOT_READY status
break|break;
case|case
name|IMPOSSIBLE
case|:
if|if
condition|(
name|errMsg
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|errMsg
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
name|errMsg
operator|.
name|append
argument_list|(
literal|"change "
operator|+
name|changeId
operator|+
literal|": needs "
operator|+
name|lbl
operator|.
name|label
operator|+
literal|" (check project access)"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported SubmitRecord.Label.status ("
operator|+
name|lbl
operator|.
name|status
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
name|result
operator|.
name|addError
argument_list|(
operator|new
name|ReviewResult
operator|.
name|Error
argument_list|(
name|ReviewResult
operator|.
name|Error
operator|.
name|Type
operator|.
name|SUBMIT_NOT_READY
argument_list|,
name|errMsg
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|CLOSED
case|:
name|result
operator|.
name|addError
argument_list|(
operator|new
name|ReviewResult
operator|.
name|Error
argument_list|(
name|ReviewResult
operator|.
name|Error
operator|.
name|Type
operator|.
name|CHANGE_IS_CLOSED
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|RULE_ERROR
case|:
name|result
operator|.
name|addError
argument_list|(
operator|new
name|ReviewResult
operator|.
name|Error
argument_list|(
name|ReviewResult
operator|.
name|Error
operator|.
name|Type
operator|.
name|RULE_ERROR
argument_list|,
name|submitResult
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported SubmitRecord.status + ("
operator|+
name|submitRecord
operator|.
name|status
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|ProjectUtil
operator|.
name|branchExists
argument_list|(
name|repoManager
argument_list|,
name|control
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|addError
argument_list|(
operator|new
name|ReviewResult
operator|.
name|Error
argument_list|(
name|ReviewResult
operator|.
name|Error
operator|.
name|Type
operator|.
name|DEST_BRANCH_NOT_FOUND
argument_list|,
literal|"Destination branch \""
operator|+
name|control
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"\" not found."
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Submit the change if we can
if|if
condition|(
name|result
operator|.
name|getErrors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|allApprovals
init|=
operator|new
name|ArrayList
argument_list|<
name|PatchSetApproval
argument_list|>
argument_list|(
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|byPatchSet
argument_list|(
name|patchSetId
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|PatchSetApproval
operator|.
name|Key
name|akey
init|=
operator|new
name|PatchSetApproval
operator|.
name|Key
argument_list|(
name|patchSetId
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|SUBMIT
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|approval
init|=
operator|new
name|PatchSetApproval
argument_list|(
name|akey
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|PatchSetApproval
name|candidateApproval
range|:
name|allApprovals
control|)
block|{
if|if
condition|(
name|akey
operator|.
name|equals
argument_list|(
name|candidateApproval
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|candidateApproval
operator|.
name|setValue
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|candidateApproval
operator|.
name|setGranted
argument_list|()
expr_stmt|;
name|approval
operator|=
name|candidateApproval
expr_stmt|;
break|break;
block|}
block|}
name|db
operator|.
name|patchSetApprovals
argument_list|()
operator|.
name|upsert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|approval
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Change
name|updatedChange
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|changeId
argument_list|,
operator|new
name|AtomicUpdate
argument_list|<
name|Change
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Change
name|update
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|NEW
condition|)
block|{
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|SUBMITTED
argument_list|)
expr_stmt|;
name|ChangeUtil
operator|.
name|updated
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
return|return
name|change
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|updatedChange
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|SUBMITTED
condition|)
block|{
name|merger
operator|.
name|merge
argument_list|(
name|opFactory
argument_list|,
name|updatedChange
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

