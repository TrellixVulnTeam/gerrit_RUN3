begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchLineCommentsUtil
operator|.
name|PLC_ORDER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
operator|.
name|parseException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|CommentRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AnonymousCowardName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|GitDateFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|GitDateFormatter
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|GitDateParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|MutableInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|QuotedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|RawParseUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ChangeNoteUtil
specifier|public
class|class
name|ChangeNoteUtil
block|{
DECL|field|FOOTER_ASSIGNEE
specifier|public
specifier|static
specifier|final
name|FooterKey
name|FOOTER_ASSIGNEE
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Assignee"
argument_list|)
decl_stmt|;
DECL|field|FOOTER_BRANCH
specifier|public
specifier|static
specifier|final
name|FooterKey
name|FOOTER_BRANCH
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Branch"
argument_list|)
decl_stmt|;
DECL|field|FOOTER_CHANGE_ID
specifier|public
specifier|static
specifier|final
name|FooterKey
name|FOOTER_CHANGE_ID
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Change-id"
argument_list|)
decl_stmt|;
DECL|field|FOOTER_COMMIT
specifier|public
specifier|static
specifier|final
name|FooterKey
name|FOOTER_COMMIT
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Commit"
argument_list|)
decl_stmt|;
DECL|field|FOOTER_GROUPS
specifier|public
specifier|static
specifier|final
name|FooterKey
name|FOOTER_GROUPS
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Groups"
argument_list|)
decl_stmt|;
DECL|field|FOOTER_HASHTAGS
specifier|public
specifier|static
specifier|final
name|FooterKey
name|FOOTER_HASHTAGS
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Hashtags"
argument_list|)
decl_stmt|;
DECL|field|FOOTER_LABEL
specifier|public
specifier|static
specifier|final
name|FooterKey
name|FOOTER_LABEL
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Label"
argument_list|)
decl_stmt|;
DECL|field|FOOTER_PATCH_SET
specifier|public
specifier|static
specifier|final
name|FooterKey
name|FOOTER_PATCH_SET
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Patch-set"
argument_list|)
decl_stmt|;
DECL|field|FOOTER_STATUS
specifier|public
specifier|static
specifier|final
name|FooterKey
name|FOOTER_STATUS
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Status"
argument_list|)
decl_stmt|;
DECL|field|FOOTER_SUBJECT
specifier|public
specifier|static
specifier|final
name|FooterKey
name|FOOTER_SUBJECT
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Subject"
argument_list|)
decl_stmt|;
DECL|field|FOOTER_SUBMISSION_ID
specifier|public
specifier|static
specifier|final
name|FooterKey
name|FOOTER_SUBMISSION_ID
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Submission-id"
argument_list|)
decl_stmt|;
DECL|field|FOOTER_SUBMITTED_WITH
specifier|public
specifier|static
specifier|final
name|FooterKey
name|FOOTER_SUBMITTED_WITH
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Submitted-with"
argument_list|)
decl_stmt|;
DECL|field|FOOTER_TOPIC
specifier|public
specifier|static
specifier|final
name|FooterKey
name|FOOTER_TOPIC
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Topic"
argument_list|)
decl_stmt|;
DECL|field|FOOTER_TAG
specifier|public
specifier|static
specifier|final
name|FooterKey
name|FOOTER_TAG
init|=
operator|new
name|FooterKey
argument_list|(
literal|"Tag"
argument_list|)
decl_stmt|;
DECL|field|AUTHOR
specifier|private
specifier|static
specifier|final
name|String
name|AUTHOR
init|=
literal|"Author"
decl_stmt|;
DECL|field|BASE_PATCH_SET
specifier|private
specifier|static
specifier|final
name|String
name|BASE_PATCH_SET
init|=
literal|"Base-for-patch-set"
decl_stmt|;
DECL|field|COMMENT_RANGE
specifier|private
specifier|static
specifier|final
name|String
name|COMMENT_RANGE
init|=
literal|"Comment-range"
decl_stmt|;
DECL|field|FILE
specifier|private
specifier|static
specifier|final
name|String
name|FILE
init|=
literal|"File"
decl_stmt|;
DECL|field|LENGTH
specifier|private
specifier|static
specifier|final
name|String
name|LENGTH
init|=
literal|"Bytes"
decl_stmt|;
DECL|field|PARENT
specifier|private
specifier|static
specifier|final
name|String
name|PARENT
init|=
literal|"Parent"
decl_stmt|;
DECL|field|PARENT_NUMBER
specifier|private
specifier|static
specifier|final
name|String
name|PARENT_NUMBER
init|=
literal|"Parent-number"
decl_stmt|;
DECL|field|PATCH_SET
specifier|private
specifier|static
specifier|final
name|String
name|PATCH_SET
init|=
literal|"Patch-set"
decl_stmt|;
DECL|field|REVISION
specifier|private
specifier|static
specifier|final
name|String
name|REVISION
init|=
literal|"Revision"
decl_stmt|;
DECL|field|UUID
specifier|private
specifier|static
specifier|final
name|String
name|UUID
init|=
literal|"UUID"
decl_stmt|;
DECL|field|TAG
specifier|private
specifier|static
specifier|final
name|String
name|TAG
init|=
name|FOOTER_TAG
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|method|formatTime (PersonIdent ident, Timestamp t)
specifier|public
specifier|static
name|String
name|formatTime
parameter_list|(
name|PersonIdent
name|ident
parameter_list|,
name|Timestamp
name|t
parameter_list|)
block|{
name|GitDateFormatter
name|dateFormatter
init|=
operator|new
name|GitDateFormatter
argument_list|(
name|Format
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
comment|// TODO(dborowitz): Use a ThreadLocal or use Joda.
name|PersonIdent
name|newIdent
init|=
operator|new
name|PersonIdent
argument_list|(
name|ident
argument_list|,
name|t
argument_list|)
decl_stmt|;
return|return
name|dateFormatter
operator|.
name|formatDate
argument_list|(
name|newIdent
argument_list|)
return|;
block|}
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|PersonIdent
name|serverIdent
decl_stmt|;
DECL|field|anonymousCowardName
specifier|private
specifier|final
name|String
name|anonymousCowardName
decl_stmt|;
DECL|field|serverId
specifier|private
specifier|final
name|String
name|serverId
decl_stmt|;
DECL|field|gson
specifier|private
specifier|final
name|Gson
name|gson
init|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|setPrettyPrinting
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|field|writeJson
specifier|private
specifier|final
name|boolean
name|writeJson
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChangeNoteUtil (AccountCache accountCache, @GerritPersonIdent PersonIdent serverIdent, @AnonymousCowardName String anonymousCowardName, @GerritServerId String serverId, @GerritServerConfig Config config)
specifier|public
name|ChangeNoteUtil
parameter_list|(
name|AccountCache
name|accountCache
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverIdent
parameter_list|,
annotation|@
name|AnonymousCowardName
name|String
name|anonymousCowardName
parameter_list|,
annotation|@
name|GerritServerId
name|String
name|serverId
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|config
parameter_list|)
block|{
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
name|this
operator|.
name|anonymousCowardName
operator|=
name|anonymousCowardName
expr_stmt|;
name|this
operator|.
name|serverId
operator|=
name|serverId
expr_stmt|;
name|this
operator|.
name|writeJson
operator|=
name|config
operator|.
name|getBoolean
argument_list|(
literal|"notedb"
argument_list|,
literal|"writeJson"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|newIdent (Account author, Date when, PersonIdent serverIdent, String anonymousCowardName)
specifier|public
name|PersonIdent
name|newIdent
parameter_list|(
name|Account
name|author
parameter_list|,
name|Date
name|when
parameter_list|,
name|PersonIdent
name|serverIdent
parameter_list|,
name|String
name|anonymousCowardName
parameter_list|)
block|{
return|return
operator|new
name|PersonIdent
argument_list|(
name|author
operator|.
name|getName
argument_list|(
name|anonymousCowardName
argument_list|)
argument_list|,
name|author
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"@"
operator|+
name|serverId
argument_list|,
name|when
argument_list|,
name|serverIdent
operator|.
name|getTimeZone
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getWriteJson ()
specifier|public
name|boolean
name|getWriteJson
parameter_list|()
block|{
return|return
name|writeJson
return|;
block|}
DECL|method|getGson ()
specifier|public
name|Gson
name|getGson
parameter_list|()
block|{
return|return
name|gson
return|;
block|}
DECL|method|getServerId ()
specifier|public
name|String
name|getServerId
parameter_list|()
block|{
return|return
name|serverId
return|;
block|}
DECL|method|parseIdent (PersonIdent ident, Change.Id changeId)
specifier|public
name|Account
operator|.
name|Id
name|parseIdent
parameter_list|(
name|PersonIdent
name|ident
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|String
name|email
init|=
name|ident
operator|.
name|getEmailAddress
argument_list|()
decl_stmt|;
name|int
name|at
init|=
name|email
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|>=
literal|0
condition|)
block|{
name|String
name|host
init|=
name|email
operator|.
name|substring
argument_list|(
name|at
operator|+
literal|1
argument_list|,
name|email
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|.
name|equals
argument_list|(
name|serverId
argument_list|)
condition|)
block|{
name|Integer
name|id
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|email
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|at
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
block|}
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"invalid identity, expected<id>@%s: %s"
argument_list|,
name|serverId
argument_list|,
name|email
argument_list|)
throw|;
block|}
DECL|method|match (byte[] note, MutableInteger p, byte[] expected)
specifier|private
specifier|static
name|boolean
name|match
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|p
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|)
block|{
name|int
name|m
init|=
name|RawParseUtils
operator|.
name|match
argument_list|(
name|note
argument_list|,
name|p
operator|.
name|value
argument_list|,
name|expected
argument_list|)
decl_stmt|;
return|return
name|m
operator|==
name|p
operator|.
name|value
operator|+
name|expected
operator|.
name|length
return|;
block|}
DECL|method|parseNote (byte[] note, MutableInteger p, Change.Id changeId, Status status)
specifier|public
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|parseNote
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|p
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|Status
name|status
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
if|if
condition|(
name|p
operator|.
name|value
operator|>=
name|note
operator|.
name|length
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|PatchLineComment
operator|.
name|Key
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|sizeOfNote
init|=
name|note
operator|.
name|length
decl_stmt|;
name|byte
index|[]
name|psb
init|=
name|PATCH_SET
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bpsb
init|=
name|BASE_PATCH_SET
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bpn
init|=
name|PARENT_NUMBER
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|RevId
name|revId
init|=
operator|new
name|RevId
argument_list|(
name|parseStringField
argument_list|(
name|note
argument_list|,
name|p
argument_list|,
name|changeId
argument_list|,
name|REVISION
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
literal|null
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
literal|null
decl_stmt|;
name|boolean
name|isForBase
init|=
literal|false
decl_stmt|;
name|Integer
name|parentNumber
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|p
operator|.
name|value
operator|<
name|sizeOfNote
condition|)
block|{
name|boolean
name|matchPs
init|=
name|match
argument_list|(
name|note
argument_list|,
name|p
argument_list|,
name|psb
argument_list|)
decl_stmt|;
name|boolean
name|matchBase
init|=
name|match
argument_list|(
name|note
argument_list|,
name|p
argument_list|,
name|bpsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchPs
condition|)
block|{
name|fileName
operator|=
literal|null
expr_stmt|;
name|psId
operator|=
name|parsePsId
argument_list|(
name|note
argument_list|,
name|p
argument_list|,
name|changeId
argument_list|,
name|PATCH_SET
argument_list|)
expr_stmt|;
name|isForBase
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchBase
condition|)
block|{
name|fileName
operator|=
literal|null
expr_stmt|;
name|psId
operator|=
name|parsePsId
argument_list|(
name|note
argument_list|,
name|p
argument_list|,
name|changeId
argument_list|,
name|BASE_PATCH_SET
argument_list|)
expr_stmt|;
name|isForBase
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|match
argument_list|(
name|note
argument_list|,
name|p
argument_list|,
name|bpn
argument_list|)
condition|)
block|{
name|parentNumber
operator|=
name|parseParentNumber
argument_list|(
name|note
argument_list|,
name|p
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|psId
operator|==
literal|null
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"missing %s or %s header"
argument_list|,
name|PATCH_SET
argument_list|,
name|BASE_PATCH_SET
argument_list|)
throw|;
block|}
name|PatchLineComment
name|c
init|=
name|parseComment
argument_list|(
name|note
argument_list|,
name|p
argument_list|,
name|fileName
argument_list|,
name|psId
argument_list|,
name|revId
argument_list|,
name|isForBase
argument_list|,
name|parentNumber
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|fileName
operator|=
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|getFileName
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|seen
operator|.
name|add
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"multiple comments for %s in note"
argument_list|,
name|c
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
name|result
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|parseComment (byte[] note, MutableInteger curr, String currentFileName, PatchSet.Id psId, RevId revId, boolean isForBase, Integer parentNumber, Status status)
specifier|private
name|PatchLineComment
name|parseComment
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|String
name|currentFileName
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|RevId
name|revId
parameter_list|,
name|boolean
name|isForBase
parameter_list|,
name|Integer
name|parentNumber
parameter_list|,
name|Status
name|status
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|Change
operator|.
name|Id
name|changeId
init|=
name|psId
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
comment|// Check if there is a new file.
name|boolean
name|newFile
init|=
operator|(
name|RawParseUtils
operator|.
name|match
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|FILE
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
operator|)
operator|!=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|newFile
condition|)
block|{
comment|// If so, parse the new file name.
name|currentFileName
operator|=
name|parseFilename
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFileName
operator|==
literal|null
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|FILE
argument_list|)
throw|;
block|}
name|CommentRange
name|range
init|=
name|parseCommentRange
argument_list|(
name|note
argument_list|,
name|curr
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|==
literal|null
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|COMMENT_RANGE
argument_list|)
throw|;
block|}
name|Timestamp
name|commentTime
init|=
name|parseTimestamp
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|aId
init|=
name|parseAuthor
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
name|boolean
name|hasParent
init|=
operator|(
name|RawParseUtils
operator|.
name|match
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|PARENT
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
operator|)
operator|!=
operator|-
literal|1
decl_stmt|;
name|String
name|parentUUID
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasParent
condition|)
block|{
name|parentUUID
operator|=
name|parseStringField
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|PARENT
argument_list|)
expr_stmt|;
block|}
name|String
name|uuid
init|=
name|parseStringField
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|UUID
argument_list|)
decl_stmt|;
name|boolean
name|hasTag
init|=
operator|(
name|RawParseUtils
operator|.
name|match
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|TAG
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
operator|)
operator|!=
operator|-
literal|1
decl_stmt|;
name|String
name|tag
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasTag
condition|)
block|{
name|tag
operator|=
name|parseStringField
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|TAG
argument_list|)
expr_stmt|;
block|}
name|int
name|commentLength
init|=
name|parseCommentLength
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
name|String
name|message
init|=
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|UTF_8
argument_list|,
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|curr
operator|.
name|value
operator|+
name|commentLength
argument_list|)
decl_stmt|;
name|checkResult
argument_list|(
name|message
argument_list|,
literal|"message contents"
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|PatchLineComment
name|plc
init|=
operator|new
name|PatchLineComment
argument_list|(
operator|new
name|PatchLineComment
operator|.
name|Key
argument_list|(
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|psId
argument_list|,
name|currentFileName
argument_list|)
argument_list|,
name|uuid
argument_list|)
argument_list|,
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|,
name|aId
argument_list|,
name|parentUUID
argument_list|,
name|commentTime
argument_list|)
decl_stmt|;
name|plc
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|plc
operator|.
name|setTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
if|if
condition|(
name|isForBase
condition|)
block|{
name|plc
operator|.
name|setSide
argument_list|(
call|(
name|short
call|)
argument_list|(
name|parentNumber
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
name|parentNumber
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|plc
operator|.
name|setSide
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|range
operator|.
name|getStartCharacter
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|plc
operator|.
name|setRange
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
name|plc
operator|.
name|setRevId
argument_list|(
name|revId
argument_list|)
expr_stmt|;
name|plc
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|curr
operator|.
name|value
operator|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
operator|+
name|commentLength
argument_list|)
expr_stmt|;
name|curr
operator|.
name|value
operator|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
expr_stmt|;
return|return
name|plc
return|;
block|}
DECL|method|parseStringField (byte[] note, MutableInteger curr, Change.Id changeId, String fieldName)
specifier|private
specifier|static
name|String
name|parseStringField
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|int
name|endOfLine
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
decl_stmt|;
name|checkHeaderLineFormat
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|fieldName
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|int
name|startOfField
init|=
name|RawParseUtils
operator|.
name|endOfFooterLineKey
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
operator|+
literal|2
decl_stmt|;
name|curr
operator|.
name|value
operator|=
name|endOfLine
expr_stmt|;
return|return
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|UTF_8
argument_list|,
name|note
argument_list|,
name|startOfField
argument_list|,
name|endOfLine
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * @return a comment range. If the comment range line in the note only has    *    one number, we return a CommentRange with that one number as the end    *    line and the other fields as -1. If the comment range line in the note    *    contains a whole comment range, then we return a CommentRange with all    *    fields set. If the line is not correctly formatted, return null.    */
DECL|method|parseCommentRange (byte[] note, MutableInteger ptr)
specifier|private
specifier|static
name|CommentRange
name|parseCommentRange
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|ptr
parameter_list|)
block|{
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|last
init|=
name|ptr
operator|.
name|value
decl_stmt|;
name|int
name|startLine
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|ptr
operator|.
name|value
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|.
name|value
operator|==
name|last
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|note
index|[
name|ptr
operator|.
name|value
index|]
operator|==
literal|'\n'
condition|)
block|{
name|range
operator|.
name|setEndLine
argument_list|(
name|startLine
argument_list|)
expr_stmt|;
name|ptr
operator|.
name|value
operator|+=
literal|1
expr_stmt|;
return|return
name|range
return|;
block|}
elseif|else
if|if
condition|(
name|note
index|[
name|ptr
operator|.
name|value
index|]
operator|==
literal|':'
condition|)
block|{
name|range
operator|.
name|setStartLine
argument_list|(
name|startLine
argument_list|)
expr_stmt|;
name|ptr
operator|.
name|value
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
name|last
operator|=
name|ptr
operator|.
name|value
expr_stmt|;
name|int
name|startChar
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|ptr
operator|.
name|value
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|.
name|value
operator|==
name|last
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|note
index|[
name|ptr
operator|.
name|value
index|]
operator|==
literal|'-'
condition|)
block|{
name|range
operator|.
name|setStartCharacter
argument_list|(
name|startChar
argument_list|)
expr_stmt|;
name|ptr
operator|.
name|value
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
name|last
operator|=
name|ptr
operator|.
name|value
expr_stmt|;
name|int
name|endLine
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|ptr
operator|.
name|value
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|.
name|value
operator|==
name|last
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|note
index|[
name|ptr
operator|.
name|value
index|]
operator|==
literal|':'
condition|)
block|{
name|range
operator|.
name|setEndLine
argument_list|(
name|endLine
argument_list|)
expr_stmt|;
name|ptr
operator|.
name|value
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
name|last
operator|=
name|ptr
operator|.
name|value
expr_stmt|;
name|int
name|endChar
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|ptr
operator|.
name|value
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|.
name|value
operator|==
name|last
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|note
index|[
name|ptr
operator|.
name|value
index|]
operator|==
literal|'\n'
condition|)
block|{
name|range
operator|.
name|setEndCharacter
argument_list|(
name|endChar
argument_list|)
expr_stmt|;
name|ptr
operator|.
name|value
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
return|return
name|range
return|;
block|}
DECL|method|parsePsId (byte[] note, MutableInteger curr, Change.Id changeId, String fieldName)
specifier|private
specifier|static
name|PatchSet
operator|.
name|Id
name|parsePsId
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|checkHeaderLineFormat
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|fieldName
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|int
name|startOfPsId
init|=
name|RawParseUtils
operator|.
name|endOfFooterLineKey
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
operator|+
literal|1
decl_stmt|;
name|MutableInteger
name|i
init|=
operator|new
name|MutableInteger
argument_list|()
decl_stmt|;
name|int
name|patchSetId
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|startOfPsId
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|int
name|endOfLine
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|value
operator|!=
name|endOfLine
operator|-
literal|1
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|fieldName
argument_list|)
throw|;
block|}
name|checkResult
argument_list|(
name|patchSetId
argument_list|,
literal|"patchset id"
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|curr
operator|.
name|value
operator|=
name|endOfLine
expr_stmt|;
return|return
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|changeId
argument_list|,
name|patchSetId
argument_list|)
return|;
block|}
DECL|method|parseParentNumber (byte[] note, MutableInteger curr, Change.Id changeId)
specifier|private
specifier|static
name|Integer
name|parseParentNumber
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|checkHeaderLineFormat
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|PARENT_NUMBER
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|RawParseUtils
operator|.
name|endOfFooterLineKey
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
operator|+
literal|1
decl_stmt|;
name|MutableInteger
name|i
init|=
operator|new
name|MutableInteger
argument_list|()
decl_stmt|;
name|int
name|parentNumber
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|start
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|int
name|endOfLine
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|value
operator|!=
name|endOfLine
operator|-
literal|1
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|PARENT_NUMBER
argument_list|)
throw|;
block|}
name|checkResult
argument_list|(
name|parentNumber
argument_list|,
literal|"parent number"
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|curr
operator|.
name|value
operator|=
name|endOfLine
expr_stmt|;
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|parentNumber
argument_list|)
return|;
block|}
DECL|method|parseFilename (byte[] note, MutableInteger curr, Change.Id changeId)
specifier|private
specifier|static
name|String
name|parseFilename
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|checkHeaderLineFormat
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|FILE
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|int
name|startOfFileName
init|=
name|RawParseUtils
operator|.
name|endOfFooterLineKey
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
operator|+
literal|2
decl_stmt|;
name|int
name|endOfLine
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
decl_stmt|;
name|curr
operator|.
name|value
operator|=
name|endOfLine
expr_stmt|;
name|curr
operator|.
name|value
operator|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
expr_stmt|;
return|return
name|QuotedString
operator|.
name|GIT_PATH
operator|.
name|dequote
argument_list|(
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|UTF_8
argument_list|,
name|note
argument_list|,
name|startOfFileName
argument_list|,
name|endOfLine
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseTimestamp (byte[] note, MutableInteger curr, Change.Id changeId)
specifier|private
specifier|static
name|Timestamp
name|parseTimestamp
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|int
name|endOfLine
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
decl_stmt|;
name|Timestamp
name|commentTime
decl_stmt|;
name|String
name|dateString
init|=
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|UTF_8
argument_list|,
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|endOfLine
operator|-
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|commentTime
operator|=
operator|new
name|Timestamp
argument_list|(
name|GitDateParser
operator|.
name|parse
argument_list|(
name|dateString
argument_list|,
literal|null
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigInvalidException
argument_list|(
literal|"could not parse comment timestamp"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|curr
operator|.
name|value
operator|=
name|endOfLine
expr_stmt|;
return|return
name|checkResult
argument_list|(
name|commentTime
argument_list|,
literal|"comment timestamp"
argument_list|,
name|changeId
argument_list|)
return|;
block|}
DECL|method|parseAuthor (byte[] note, MutableInteger curr, Change.Id changeId)
specifier|private
name|Account
operator|.
name|Id
name|parseAuthor
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|checkHeaderLineFormat
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|AUTHOR
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|int
name|startOfAccountId
init|=
name|RawParseUtils
operator|.
name|endOfFooterLineKey
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
operator|+
literal|2
decl_stmt|;
name|PersonIdent
name|ident
init|=
name|RawParseUtils
operator|.
name|parsePersonIdent
argument_list|(
name|note
argument_list|,
name|startOfAccountId
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|aId
init|=
name|parseIdent
argument_list|(
name|ident
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
name|curr
operator|.
name|value
operator|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
expr_stmt|;
return|return
name|checkResult
argument_list|(
name|aId
argument_list|,
literal|"comment author"
argument_list|,
name|changeId
argument_list|)
return|;
block|}
DECL|method|parseCommentLength (byte[] note, MutableInteger curr, Change.Id changeId)
specifier|private
specifier|static
name|int
name|parseCommentLength
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|checkHeaderLineFormat
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|LENGTH
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|int
name|startOfLength
init|=
name|RawParseUtils
operator|.
name|endOfFooterLineKey
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
operator|+
literal|1
decl_stmt|;
name|MutableInteger
name|i
init|=
operator|new
name|MutableInteger
argument_list|()
decl_stmt|;
name|i
operator|.
name|value
operator|=
name|startOfLength
expr_stmt|;
name|int
name|commentLength
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|startOfLength
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|value
operator|==
name|startOfLength
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|LENGTH
argument_list|)
throw|;
block|}
name|int
name|endOfLine
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|value
operator|!=
name|endOfLine
operator|-
literal|1
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|LENGTH
argument_list|)
throw|;
block|}
name|curr
operator|.
name|value
operator|=
name|endOfLine
expr_stmt|;
return|return
name|checkResult
argument_list|(
name|commentLength
argument_list|,
literal|"comment length"
argument_list|,
name|changeId
argument_list|)
return|;
block|}
DECL|method|checkResult (T o, String fieldName, Change.Id changeId)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|checkResult
parameter_list|(
name|T
name|o
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|fieldName
argument_list|)
throw|;
block|}
return|return
name|o
return|;
block|}
DECL|method|checkResult (int i, String fieldName, Change.Id changeId)
specifier|private
specifier|static
name|int
name|checkResult
parameter_list|(
name|int
name|i
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
if|if
condition|(
name|i
operator|<=
literal|0
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|fieldName
argument_list|)
throw|;
block|}
return|return
name|i
return|;
block|}
DECL|method|appendHeaderField (PrintWriter writer, String field, String value)
specifier|private
name|void
name|appendHeaderField
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|writer
operator|.
name|print
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
DECL|method|checkHeaderLineFormat (byte[] note, MutableInteger curr, String fieldName, Change.Id changeId)
specifier|private
specifier|static
name|void
name|checkHeaderLineFormat
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|boolean
name|correct
init|=
name|RawParseUtils
operator|.
name|match
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|fieldName
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
decl_stmt|;
name|int
name|p
init|=
name|curr
operator|.
name|value
operator|+
name|fieldName
operator|.
name|length
argument_list|()
decl_stmt|;
name|correct
operator|&=
operator|(
name|p
operator|<
name|note
operator|.
name|length
operator|&&
name|note
index|[
name|p
index|]
operator|==
literal|':'
operator|)
expr_stmt|;
name|p
operator|++
expr_stmt|;
name|correct
operator|&=
operator|(
name|p
operator|<
name|note
operator|.
name|length
operator|&&
name|note
index|[
name|p
index|]
operator|==
literal|' '
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|correct
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|fieldName
argument_list|)
throw|;
block|}
block|}
comment|/**    * Build a note that contains the metadata for and the contents of all of the    * comments in the given comments.    *    * @param comments Comments to be written to the output stream, keyed by patch    *     set ID; multiple patch sets are allowed since base revisions may be    *     shared across patch sets. All of the comments must share the same    *     RevId, and all the comments for a given patch set must have the same    *     side.    * @param out output stream to write to.    */
DECL|method|buildNote (Multimap<PatchSet.Id, PatchLineComment> comments, OutputStream out)
name|void
name|buildNote
parameter_list|(
name|Multimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchLineComment
argument_list|>
name|comments
parameter_list|,
name|OutputStream
name|out
parameter_list|)
block|{
if|if
condition|(
name|comments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|psIds
init|=
name|ReviewDbUtil
operator|.
name|intKeyOrdering
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|comments
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|OutputStreamWriter
name|streamWriter
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
try|try
init|(
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|streamWriter
argument_list|)
init|)
block|{
name|RevId
name|revId
init|=
name|comments
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getRevId
argument_list|()
decl_stmt|;
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|REVISION
argument_list|,
name|revId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PatchSet
operator|.
name|Id
name|psId
range|:
name|psIds
control|)
block|{
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|psComments
init|=
name|PLC_ORDER
operator|.
name|sortedCopy
argument_list|(
name|comments
operator|.
name|get
argument_list|(
name|psId
argument_list|)
argument_list|)
decl_stmt|;
name|PatchLineComment
name|first
init|=
name|psComments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|short
name|side
init|=
name|first
operator|.
name|getSide
argument_list|()
decl_stmt|;
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|side
operator|<=
literal|0
condition|?
name|BASE_PATCH_SET
else|:
name|PATCH_SET
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|psId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|side
operator|<
literal|0
condition|)
block|{
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|PARENT_NUMBER
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
operator|-
name|side
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|currentFilename
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PatchLineComment
name|c
range|:
name|psComments
control|)
block|{
name|checkArgument
argument_list|(
name|revId
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getRevId
argument_list|()
argument_list|)
argument_list|,
literal|"All comments being added must have all the same RevId. The "
operator|+
literal|"comment below does not have the same RevId as the others "
operator|+
literal|"(%s).\n%s"
argument_list|,
name|revId
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|side
operator|==
name|c
operator|.
name|getSide
argument_list|()
argument_list|,
literal|"All comments being added must all have the same side. The "
operator|+
literal|"comment below does not have the same side as the others "
operator|+
literal|"(%s).\n%s"
argument_list|,
name|side
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|String
name|commentFilename
init|=
name|QuotedString
operator|.
name|GIT_PATH
operator|.
name|quote
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|getFileName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|commentFilename
operator|.
name|equals
argument_list|(
name|currentFilename
argument_list|)
condition|)
block|{
name|currentFilename
operator|=
name|commentFilename
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"File: "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|commentFilename
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
name|appendOneComment
argument_list|(
name|writer
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|appendOneComment (PrintWriter writer, PatchLineComment c)
specifier|private
name|void
name|appendOneComment
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|PatchLineComment
name|c
parameter_list|)
block|{
comment|// The CommentRange field for a comment is allowed to be null. If it is
comment|// null, then in the first line, we simply use the line number field for a
comment|// comment instead. If it isn't null, we write the comment range itself.
name|CommentRange
name|range
init|=
name|c
operator|.
name|getRange
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|print
argument_list|(
name|range
operator|.
name|getStartLine
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|range
operator|.
name|getStartCharacter
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|range
operator|.
name|getEndLine
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|range
operator|.
name|getEndCharacter
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|print
argument_list|(
name|c
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|formatTime
argument_list|(
name|serverIdent
argument_list|,
name|c
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|PersonIdent
name|ident
init|=
name|newIdent
argument_list|(
name|accountCache
operator|.
name|get
argument_list|(
name|c
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|.
name|getAccount
argument_list|()
argument_list|,
name|c
operator|.
name|getWrittenOn
argument_list|()
argument_list|,
name|serverIdent
argument_list|,
name|anonymousCowardName
argument_list|)
decl_stmt|;
name|StringBuilder
name|name
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|PersonIdent
operator|.
name|appendSanitized
argument_list|(
name|name
argument_list|,
name|ident
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|PersonIdent
operator|.
name|appendSanitized
argument_list|(
name|name
argument_list|,
name|ident
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|AUTHOR
argument_list|,
name|name
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|parent
init|=
name|c
operator|.
name|getParentUuid
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|PARENT
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|UUID
argument_list|,
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getTag
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|TAG
argument_list|,
name|c
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|messageBytes
init|=
name|c
operator|.
name|getMessage
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|LENGTH
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|messageBytes
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|c
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

