begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|com.google.gerrit.server.config
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|SystemConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|ProvisionException
import|;
end_import

begin_class
DECL|class|WildProjectNameProvider
class|class
name|WildProjectNameProvider
implements|implements
name|Provider
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
block|{
comment|/** Project.Id meaning "any and all projects on this server". */
DECL|field|WILD_PROJECT_ID
specifier|static
specifier|final
name|Project
operator|.
name|Id
name|WILD_PROJECT_ID
init|=
operator|new
name|Project
operator|.
name|Id
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|schema
specifier|private
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schema
decl_stmt|;
annotation|@
name|Inject
DECL|method|WildProjectNameProvider (final SchemaFactory<ReviewDb> schema, final SystemConfig config)
name|WildProjectNameProvider
parameter_list|(
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schema
parameter_list|,
comment|/*    * Unused, but we need to force it to load before we do, otherwise we risk    * reading an empty database without the wild project being in the database.    * Asking for it should ensures Guice loads it first.    */
specifier|final
name|SystemConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
DECL|method|get ()
specifier|public
name|Project
operator|.
name|NameKey
name|get
parameter_list|()
block|{
try|try
block|{
specifier|final
name|ReviewDb
name|db
init|=
name|schema
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Project
name|p
init|=
name|db
operator|.
name|projects
argument_list|()
operator|.
name|get
argument_list|(
name|WILD_PROJECT_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"No project "
operator|+
name|WILD_PROJECT_ID
argument_list|)
throw|;
block|}
return|return
name|p
operator|.
name|getNameKey
argument_list|()
return|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"Cannot load "
operator|+
name|WILD_PROJECT_ID
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

