begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|OperatorPredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|LabelPredicate
class|class
name|LabelPredicate
extends|extends
name|OperatorPredicate
argument_list|<
name|ChangeData
argument_list|>
block|{
DECL|enum|Test
specifier|private
specifier|static
enum|enum
name|Test
block|{
DECL|enumConstant|EQ
name|EQ
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|PatchSetApproval
name|p
parameter_list|,
name|short
name|value
parameter_list|)
block|{
return|return
name|p
operator|.
name|getValue
argument_list|()
operator|==
name|value
return|;
block|}
block|}
block|,
DECL|enumConstant|GT_EQ
name|GT_EQ
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|PatchSetApproval
name|p
parameter_list|,
name|short
name|value
parameter_list|)
block|{
return|return
name|p
operator|.
name|getValue
argument_list|()
operator|>=
name|value
return|;
block|}
block|}
block|,
DECL|enumConstant|LT_EQ
name|LT_EQ
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|PatchSetApproval
name|p
parameter_list|,
name|short
name|value
parameter_list|)
block|{
return|return
name|p
operator|.
name|getValue
argument_list|()
operator|<=
name|value
return|;
block|}
block|}
block|;
DECL|method|match (PatchSetApproval p, short value)
specifier|abstract
name|boolean
name|match
parameter_list|(
name|PatchSetApproval
name|p
parameter_list|,
name|short
name|value
parameter_list|)
function_decl|;
block|}
DECL|method|category (ApprovalTypes types, String toFind)
specifier|private
specifier|static
name|ApprovalCategory
operator|.
name|Id
name|category
parameter_list|(
name|ApprovalTypes
name|types
parameter_list|,
name|String
name|toFind
parameter_list|)
block|{
if|if
condition|(
name|types
operator|.
name|getApprovalType
argument_list|(
operator|new
name|ApprovalCategory
operator|.
name|Id
argument_list|(
name|toFind
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ApprovalCategory
operator|.
name|Id
argument_list|(
name|toFind
argument_list|)
return|;
block|}
for|for
control|(
name|ApprovalType
name|at
range|:
name|types
operator|.
name|getApprovalTypes
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|at
operator|.
name|getCategory
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|toFind
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|at
operator|.
name|getCategory
argument_list|()
operator|.
name|getId
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|toFind
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|at
operator|.
name|getCategory
argument_list|()
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
for|for
control|(
name|ApprovalType
name|at
range|:
name|types
operator|.
name|getApprovalTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|toFind
operator|.
name|equalsIgnoreCase
argument_list|(
name|at
operator|.
name|getCategory
argument_list|()
operator|.
name|getAbbreviatedName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|at
operator|.
name|getCategory
argument_list|()
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
return|return
operator|new
name|ApprovalCategory
operator|.
name|Id
argument_list|(
name|toFind
argument_list|)
return|;
block|}
DECL|method|op (String op)
specifier|private
specifier|static
name|Test
name|op
parameter_list|(
name|String
name|op
parameter_list|)
block|{
if|if
condition|(
literal|"="
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
return|return
name|Test
operator|.
name|EQ
return|;
block|}
elseif|else
if|if
condition|(
literal|">="
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
return|return
name|Test
operator|.
name|GT_EQ
return|;
block|}
elseif|else
if|if
condition|(
literal|"<="
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
return|return
name|Test
operator|.
name|LT_EQ
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported operation "
operator|+
name|op
argument_list|)
throw|;
block|}
block|}
DECL|method|value (String value)
specifier|private
specifier|static
name|short
name|value
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|Short
operator|.
name|parseShort
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|field|dbProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
decl_stmt|;
DECL|field|test
specifier|private
specifier|final
name|Test
name|test
decl_stmt|;
DECL|field|category
specifier|private
specifier|final
name|ApprovalCategory
operator|.
name|Id
name|category
decl_stmt|;
DECL|field|val
specifier|private
specifier|final
name|short
name|val
decl_stmt|;
DECL|method|LabelPredicate (Provider<ReviewDb> dbProvider, ApprovalTypes types, String value)
name|LabelPredicate
parameter_list|(
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
parameter_list|,
name|ApprovalTypes
name|types
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_LABEL
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbProvider
operator|=
name|dbProvider
expr_stmt|;
name|Matcher
name|m1
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(=|>=|<=)([+-]?\\d+)$"
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|Matcher
name|m2
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([+-]\\d+)$"
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m1
operator|.
name|find
argument_list|()
condition|)
block|{
name|category
operator|=
name|category
argument_list|(
name|types
argument_list|,
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|m1
operator|.
name|start
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|=
name|op
argument_list|(
name|m1
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|val
operator|=
name|value
argument_list|(
name|m1
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m2
operator|.
name|find
argument_list|()
condition|)
block|{
name|category
operator|=
name|category
argument_list|(
name|types
argument_list|,
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|m2
operator|.
name|start
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|=
name|Test
operator|.
name|EQ
expr_stmt|;
name|val
operator|=
name|value
argument_list|(
name|m2
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|category
operator|=
name|category
argument_list|(
name|types
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|test
operator|=
name|Test
operator|.
name|EQ
expr_stmt|;
name|val
operator|=
literal|1
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|match (final ChangeData object)
specifier|public
name|boolean
name|match
parameter_list|(
specifier|final
name|ChangeData
name|object
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|c
init|=
name|object
operator|.
name|change
argument_list|(
name|dbProvider
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PatchSet
operator|.
name|Id
name|current
init|=
name|c
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|p
range|:
name|object
operator|.
name|approvals
argument_list|(
name|dbProvider
argument_list|)
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|equals
argument_list|(
name|current
argument_list|)
operator|&&
name|p
operator|.
name|getCategoryId
argument_list|()
operator|.
name|equals
argument_list|(
name|category
argument_list|)
comment|//
operator|&&
name|test
operator|.
name|match
argument_list|(
name|p
argument_list|,
name|val
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getCost ()
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
block|}
end_class

end_unit

