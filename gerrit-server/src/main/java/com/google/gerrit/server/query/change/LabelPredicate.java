begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|OrPredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|LabelVote
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|LabelPredicate
specifier|public
class|class
name|LabelPredicate
extends|extends
name|OrPredicate
argument_list|<
name|ChangeData
argument_list|>
block|{
DECL|field|MAX_LABEL_VALUE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_LABEL_VALUE
init|=
literal|4
decl_stmt|;
DECL|enum|Test
specifier|private
specifier|static
enum|enum
name|Test
block|{
DECL|enumConstant|EQ
DECL|enumConstant|GT_EQ
DECL|enumConstant|LT_EQ
name|EQ
block|,
name|GT_EQ
block|,
name|LT_EQ
block|;
DECL|method|isEq ()
name|boolean
name|isEq
parameter_list|()
block|{
return|return
name|EQ
operator|.
name|equals
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|isGtEq ()
name|boolean
name|isGtEq
parameter_list|()
block|{
return|return
name|GT_EQ
operator|.
name|equals
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|op (String op)
specifier|static
name|Test
name|op
parameter_list|(
name|String
name|op
parameter_list|)
block|{
if|if
condition|(
literal|"="
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
return|return
name|EQ
return|;
block|}
elseif|else
if|if
condition|(
literal|">="
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
return|return
name|GT_EQ
return|;
block|}
elseif|else
if|if
condition|(
literal|"<="
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
return|return
name|LT_EQ
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported operation "
operator|+
name|op
argument_list|)
throw|;
block|}
block|}
block|}
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
DECL|method|LabelPredicate (ProjectCache projectCache, ChangeControl.GenericFactory ccFactory, IdentifiedUser.GenericFactory userFactory, Provider<ReviewDb> dbProvider, String value, Set<Account.Id> accounts, AccountGroup.UUID group)
name|LabelPredicate
parameter_list|(
name|ProjectCache
name|projectCache
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|ccFactory
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
parameter_list|,
name|String
name|value
parameter_list|,
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accounts
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|group
parameter_list|)
block|{
name|super
argument_list|(
name|predicates
argument_list|(
name|projectCache
argument_list|,
name|ccFactory
argument_list|,
name|userFactory
argument_list|,
name|dbProvider
argument_list|,
name|value
argument_list|,
name|accounts
argument_list|,
name|group
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|predicates ( ProjectCache projectCache, ChangeControl.GenericFactory ccFactory, IdentifiedUser.GenericFactory userFactory, Provider<ReviewDb> dbProvider, String value, Set<Account.Id> accounts, AccountGroup.UUID group)
specifier|private
specifier|static
name|List
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|predicates
parameter_list|(
name|ProjectCache
name|projectCache
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|ccFactory
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
parameter_list|,
name|String
name|value
parameter_list|,
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accounts
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|group
parameter_list|)
block|{
name|String
name|label
init|=
literal|null
decl_stmt|;
name|Test
name|test
init|=
literal|null
decl_stmt|;
name|int
name|expVal
init|=
literal|0
decl_stmt|;
try|try
block|{
name|LabelVote
name|v
init|=
name|LabelVote
operator|.
name|parse
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|test
operator|=
name|Test
operator|.
name|EQ
expr_stmt|;
name|label
operator|=
name|v
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|expVal
operator|=
name|v
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// Try next format.
block|}
try|try
block|{
name|LabelVote
name|v
init|=
name|LabelVote
operator|.
name|parseWithEquals
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|test
operator|=
name|Test
operator|.
name|EQ
expr_stmt|;
name|label
operator|=
name|v
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|expVal
operator|=
name|v
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// Try next format.
block|}
if|if
condition|(
name|label
operator|==
literal|null
condition|)
block|{
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(>=|<=)([+-]?\\d+)$"
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|label
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|m
operator|.
name|start
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|=
name|Test
operator|.
name|op
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expVal
operator|=
name|value
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|label
operator|=
name|value
expr_stmt|;
name|test
operator|=
name|Test
operator|.
name|EQ
expr_stmt|;
name|expVal
operator|=
literal|1
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|r
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|2
operator|*
name|MAX_LABEL_VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|isEq
argument_list|()
condition|)
block|{
if|if
condition|(
name|expVal
operator|!=
literal|0
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|equalsLabelPredicate
argument_list|(
name|projectCache
argument_list|,
name|ccFactory
argument_list|,
name|userFactory
argument_list|,
name|dbProvider
argument_list|,
name|label
argument_list|,
name|expVal
argument_list|,
name|accounts
argument_list|,
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|add
argument_list|(
name|noLabelQuery
argument_list|(
name|projectCache
argument_list|,
name|ccFactory
argument_list|,
name|userFactory
argument_list|,
name|dbProvider
argument_list|,
name|label
argument_list|,
name|accounts
argument_list|,
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|test
operator|.
name|isGtEq
argument_list|()
condition|?
name|expVal
else|:
name|neg
argument_list|(
name|expVal
argument_list|)
init|;
name|i
operator|<=
name|MAX_LABEL_VALUE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|equalsLabelPredicate
argument_list|(
name|projectCache
argument_list|,
name|ccFactory
argument_list|,
name|userFactory
argument_list|,
name|dbProvider
argument_list|,
name|label
argument_list|,
name|test
operator|.
name|isGtEq
argument_list|()
condition|?
name|i
else|:
name|neg
argument_list|(
name|i
argument_list|)
argument_list|,
name|accounts
argument_list|,
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|add
argument_list|(
name|noLabelQuery
argument_list|(
name|projectCache
argument_list|,
name|ccFactory
argument_list|,
name|userFactory
argument_list|,
name|dbProvider
argument_list|,
name|label
argument_list|,
name|accounts
argument_list|,
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|r
return|;
block|}
DECL|method|value (String value)
specifier|private
specifier|static
name|int
name|value
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|neg (int value)
specifier|private
specifier|static
name|int
name|neg
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
operator|-
literal|1
operator|*
name|value
return|;
block|}
DECL|method|noLabelQuery (ProjectCache projectCache, ChangeControl.GenericFactory ccFactory, IdentifiedUser.GenericFactory userFactory, Provider<ReviewDb> dbProvider, String label, Set<Account.Id> accounts, AccountGroup.UUID group)
specifier|private
specifier|static
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|noLabelQuery
parameter_list|(
name|ProjectCache
name|projectCache
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|ccFactory
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
parameter_list|,
name|String
name|label
parameter_list|,
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accounts
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|group
parameter_list|)
block|{
name|List
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|r
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|2
operator|*
name|MAX_LABEL_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|MAX_LABEL_VALUE
condition|;
name|i
operator|++
control|)
block|{
name|r
operator|.
name|add
argument_list|(
name|not
argument_list|(
name|equalsLabelPredicate
argument_list|(
name|projectCache
argument_list|,
name|ccFactory
argument_list|,
name|userFactory
argument_list|,
name|dbProvider
argument_list|,
name|label
argument_list|,
name|i
argument_list|,
name|accounts
argument_list|,
name|group
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
name|not
argument_list|(
name|equalsLabelPredicate
argument_list|(
name|projectCache
argument_list|,
name|ccFactory
argument_list|,
name|userFactory
argument_list|,
name|dbProvider
argument_list|,
name|label
argument_list|,
name|neg
argument_list|(
name|i
argument_list|)
argument_list|,
name|accounts
argument_list|,
name|group
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|and
argument_list|(
name|r
argument_list|)
return|;
block|}
DECL|method|equalsLabelPredicate ( ProjectCache projectCache, ChangeControl.GenericFactory ccFactory, IdentifiedUser.GenericFactory userFactory, Provider<ReviewDb> dbProvider, String label, int expVal, Set<Account.Id> accounts, AccountGroup.UUID group)
specifier|private
specifier|static
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|equalsLabelPredicate
parameter_list|(
name|ProjectCache
name|projectCache
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|ccFactory
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|dbProvider
parameter_list|,
name|String
name|label
parameter_list|,
name|int
name|expVal
parameter_list|,
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accounts
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|group
parameter_list|)
block|{
if|if
condition|(
name|accounts
operator|==
literal|null
operator|||
name|accounts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|EqualsLabelPredicate
argument_list|(
name|projectCache
argument_list|,
name|ccFactory
argument_list|,
name|userFactory
argument_list|,
name|dbProvider
argument_list|,
name|label
argument_list|,
name|expVal
argument_list|,
literal|null
argument_list|,
name|group
argument_list|)
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|r
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|a
range|:
name|accounts
control|)
block|{
name|r
operator|.
name|add
argument_list|(
operator|new
name|EqualsLabelPredicate
argument_list|(
name|projectCache
argument_list|,
name|ccFactory
argument_list|,
name|userFactory
argument_list|,
name|dbProvider
argument_list|,
name|label
argument_list|,
name|expVal
argument_list|,
name|a
argument_list|,
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|or
argument_list|(
name|r
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|ChangeQueryBuilder
operator|.
name|FIELD_LABEL
operator|+
literal|":"
operator|+
name|value
return|;
block|}
block|}
end_class

end_unit

