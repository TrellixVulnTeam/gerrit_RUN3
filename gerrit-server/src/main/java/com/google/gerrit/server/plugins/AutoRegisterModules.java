begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.plugins
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|PluginGuiceEnvironment
operator|.
name|is
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|annotations
operator|.
name|Export
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|annotations
operator|.
name|ExtensionPoint
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|annotations
operator|.
name|Listen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Scopes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|internal
operator|.
name|UniqueAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|IO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|AnnotationVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|FieldVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|MethodVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_class
DECL|class|AutoRegisterModules
class|class
name|AutoRegisterModules
block|{
DECL|field|SKIP_ALL
specifier|private
specifier|static
specifier|final
name|int
name|SKIP_ALL
init|=
name|ClassReader
operator|.
name|SKIP_CODE
operator||
name|ClassReader
operator|.
name|SKIP_DEBUG
operator||
name|ClassReader
operator|.
name|SKIP_FRAMES
decl_stmt|;
DECL|field|pluginName
specifier|private
specifier|final
name|String
name|pluginName
decl_stmt|;
DECL|field|env
specifier|private
specifier|final
name|PluginGuiceEnvironment
name|env
decl_stmt|;
DECL|field|jarFile
specifier|private
specifier|final
name|JarFile
name|jarFile
decl_stmt|;
DECL|field|classLoader
specifier|private
specifier|final
name|ClassLoader
name|classLoader
decl_stmt|;
DECL|field|sshGen
specifier|private
specifier|final
name|ModuleGenerator
name|sshGen
decl_stmt|;
DECL|field|httpGen
specifier|private
specifier|final
name|ModuleGenerator
name|httpGen
decl_stmt|;
DECL|field|sysSingletons
specifier|private
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|sysSingletons
decl_stmt|;
DECL|field|sysListen
specifier|private
name|Multimap
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|sysListen
decl_stmt|;
DECL|field|sysModule
name|Module
name|sysModule
decl_stmt|;
DECL|field|sshModule
name|Module
name|sshModule
decl_stmt|;
DECL|field|httpModule
name|Module
name|httpModule
decl_stmt|;
DECL|method|AutoRegisterModules (String pluginName, PluginGuiceEnvironment env, JarFile jarFile, ClassLoader classLoader)
name|AutoRegisterModules
parameter_list|(
name|String
name|pluginName
parameter_list|,
name|PluginGuiceEnvironment
name|env
parameter_list|,
name|JarFile
name|jarFile
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
block|{
name|this
operator|.
name|pluginName
operator|=
name|pluginName
expr_stmt|;
name|this
operator|.
name|env
operator|=
name|env
expr_stmt|;
name|this
operator|.
name|jarFile
operator|=
name|jarFile
expr_stmt|;
name|this
operator|.
name|classLoader
operator|=
name|classLoader
expr_stmt|;
name|this
operator|.
name|sshGen
operator|=
name|env
operator|.
name|hasSshModule
argument_list|()
condition|?
name|env
operator|.
name|newSshModuleGenerator
argument_list|()
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|httpGen
operator|=
name|env
operator|.
name|hasHttpModule
argument_list|()
condition|?
name|env
operator|.
name|newHttpModuleGenerator
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
DECL|method|discover ()
name|AutoRegisterModules
name|discover
parameter_list|()
throws|throws
name|InvalidPluginException
block|{
name|sysSingletons
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|()
expr_stmt|;
name|sysListen
operator|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
if|if
condition|(
name|sshGen
operator|!=
literal|null
condition|)
block|{
name|sshGen
operator|.
name|setPluginName
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpGen
operator|!=
literal|null
condition|)
block|{
name|httpGen
operator|.
name|setPluginName
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
block|}
name|scan
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|sysSingletons
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|sysListen
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sysModule
operator|=
name|makeSystemModule
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sshGen
operator|!=
literal|null
condition|)
block|{
name|sshModule
operator|=
name|sshGen
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|httpGen
operator|!=
literal|null
condition|)
block|{
name|httpModule
operator|=
name|httpGen
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|makeSystemModule ()
specifier|private
name|Module
name|makeSystemModule
parameter_list|()
block|{
return|return
operator|new
name|AbstractModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|sysSingletons
control|)
block|{
name|bind
argument_list|(
name|clazz
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|e
range|:
name|sysListen
operator|.
name|entries
argument_list|()
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|TypeLiteral
argument_list|<
name|Object
argument_list|>
name|type
init|=
operator|(
name|TypeLiteral
argument_list|<
name|Object
argument_list|>
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|Object
argument_list|>
name|impl
init|=
operator|(
name|Class
argument_list|<
name|Object
argument_list|>
operator|)
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Annotation
name|n
init|=
name|impl
operator|.
name|getAnnotation
argument_list|(
name|Export
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
name|n
operator|=
name|impl
operator|.
name|getAnnotation
argument_list|(
name|javax
operator|.
name|inject
operator|.
name|Named
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
name|n
operator|=
name|impl
operator|.
name|getAnnotation
argument_list|(
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
name|n
operator|=
name|UniqueAnnotations
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|bind
argument_list|(
name|type
argument_list|)
operator|.
name|annotatedWith
argument_list|(
name|n
argument_list|)
operator|.
name|to
argument_list|(
name|impl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|scan ()
specifier|private
name|void
name|scan
parameter_list|()
throws|throws
name|InvalidPluginException
block|{
name|Enumeration
argument_list|<
name|JarEntry
argument_list|>
name|e
init|=
name|jarFile
operator|.
name|entries
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|JarEntry
name|entry
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|skip
argument_list|(
name|entry
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ClassData
name|def
init|=
operator|new
name|ClassData
argument_list|()
decl_stmt|;
try|try
block|{
operator|new
name|ClassReader
argument_list|(
name|read
argument_list|(
name|entry
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
name|def
argument_list|,
name|SKIP_ALL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidPluginException
argument_list|(
literal|"Cannot auto-register"
argument_list|,
name|err
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|err
parameter_list|)
block|{
name|PluginLoader
operator|.
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Plugin %s has invaild class file %s inside of %s"
argument_list|,
name|pluginName
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|jarFile
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|err
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|def
operator|.
name|exportedAsName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|def
operator|.
name|isConcrete
argument_list|()
condition|)
block|{
name|export
argument_list|(
name|def
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PluginLoader
operator|.
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Plugin %s tries to @Export(\"%s\") abstract class %s"
argument_list|,
name|pluginName
argument_list|,
name|def
operator|.
name|exportedAsName
argument_list|,
name|def
operator|.
name|className
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|def
operator|.
name|listen
condition|)
block|{
if|if
condition|(
name|def
operator|.
name|isConcrete
argument_list|()
condition|)
block|{
name|listen
argument_list|(
name|def
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PluginLoader
operator|.
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Plugin %s tries to @Listen abstract class %s"
argument_list|,
name|pluginName
argument_list|,
name|def
operator|.
name|className
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|export (ClassData def)
specifier|private
name|void
name|export
parameter_list|(
name|ClassData
name|def
parameter_list|)
throws|throws
name|InvalidPluginException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
try|try
block|{
name|clazz
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|def
operator|.
name|className
argument_list|,
literal|false
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidPluginException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot load %s with @Export(\"%s\")"
argument_list|,
name|def
operator|.
name|className
argument_list|,
name|def
operator|.
name|exportedAsName
argument_list|)
argument_list|,
name|err
argument_list|)
throw|;
block|}
name|Export
name|export
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|Export
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|export
operator|==
literal|null
condition|)
block|{
name|PluginLoader
operator|.
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"In plugin %s asm incorrectly parsed %s with @Export(\"%s\")"
argument_list|,
name|pluginName
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|def
operator|.
name|exportedAsName
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|is
argument_list|(
literal|"org.apache.sshd.server.Command"
argument_list|,
name|clazz
argument_list|)
condition|)
block|{
if|if
condition|(
name|sshGen
operator|!=
literal|null
condition|)
block|{
name|PluginLoader
operator|.
name|log
operator|.
name|info
argument_list|(
literal|"Exporting "
operator|+
name|clazz
operator|+
literal|" as SSH Command"
argument_list|)
expr_stmt|;
name|sshGen
operator|.
name|export
argument_list|(
name|export
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|is
argument_list|(
literal|"javax.servlet.http.HttpServlet"
argument_list|,
name|clazz
argument_list|)
condition|)
block|{
if|if
condition|(
name|httpGen
operator|!=
literal|null
condition|)
block|{
name|PluginLoader
operator|.
name|log
operator|.
name|info
argument_list|(
literal|"Exporting "
operator|+
name|clazz
operator|+
literal|" as HTTP Servlet"
argument_list|)
expr_stmt|;
name|httpGen
operator|.
name|export
argument_list|(
name|export
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|listen
argument_list|(
name|clazz
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|cnt
init|=
name|sysListen
operator|.
name|size
argument_list|()
decl_stmt|;
name|listen
argument_list|(
name|clazz
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
if|if
condition|(
name|cnt
operator|==
name|sysListen
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// If no bindings were recorded, the extension isn't recognized.
throw|throw
operator|new
name|InvalidPluginException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Class %s with @Export(\"%s\") not supported"
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|export
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|listen (ClassData def)
specifier|private
name|void
name|listen
parameter_list|(
name|ClassData
name|def
parameter_list|)
throws|throws
name|InvalidPluginException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
try|try
block|{
name|clazz
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|def
operator|.
name|className
argument_list|,
literal|false
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidPluginException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot load %s with @Listen"
argument_list|,
name|def
operator|.
name|className
argument_list|)
argument_list|,
name|err
argument_list|)
throw|;
block|}
name|Listen
name|listen
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|Listen
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|listen
operator|!=
literal|null
condition|)
block|{
name|listen
argument_list|(
name|clazz
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PluginLoader
operator|.
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"In plugin %s asm incorrectly parsed %s with @Listen"
argument_list|,
name|pluginName
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|listen (java.lang.reflect.Type type, Class<?> clazz)
specifier|private
name|void
name|listen
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
name|type
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|InvalidPluginException
block|{
while|while
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|rawType
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|rawType
operator|=
call|(
name|Class
argument_list|<
name|?
argument_list|>
call|)
argument_list|(
operator|(
name|ParameterizedType
operator|)
name|type
argument_list|)
operator|.
name|getRawType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
name|rawType
operator|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|type
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
if|if
condition|(
name|rawType
operator|.
name|getAnnotation
argument_list|(
name|ExtensionPoint
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|tl
init|=
name|TypeLiteral
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|env
operator|.
name|hasDynamicSet
argument_list|(
name|tl
argument_list|)
condition|)
block|{
name|sysSingletons
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|PluginLoader
operator|.
name|log
operator|.
name|info
argument_list|(
literal|"Registering "
operator|+
name|clazz
operator|+
literal|" to listener "
operator|+
name|tl
argument_list|)
expr_stmt|;
name|sysListen
operator|.
name|put
argument_list|(
name|tl
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|env
operator|.
name|hasDynamicMap
argument_list|(
name|tl
argument_list|)
condition|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|Export
operator|.
name|class
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidPluginException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Class %s requires @Export(\"name\") annotation for %s"
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|rawType
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|sysSingletons
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|PluginLoader
operator|.
name|log
operator|.
name|info
argument_list|(
literal|"Registering "
operator|+
name|clazz
operator|+
literal|" to listener "
operator|+
name|tl
argument_list|)
expr_stmt|;
name|sysListen
operator|.
name|put
argument_list|(
name|tl
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidPluginException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot register %s, server does not accept %s"
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|rawType
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return;
block|}
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
index|[]
name|interfaces
init|=
name|rawType
operator|.
name|getGenericInterfaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|interfaces
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
name|i
range|:
name|interfaces
control|)
block|{
name|listen
argument_list|(
name|i
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
name|type
operator|=
name|rawType
operator|.
name|getGenericSuperclass
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|skip (JarEntry entry)
specifier|private
specifier|static
name|boolean
name|skip
parameter_list|(
name|JarEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
comment|// Avoid non-class resources.
block|}
if|if
condition|(
name|entry
operator|.
name|getSize
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
literal|true
return|;
comment|// Directories have 0 size.
block|}
if|if
condition|(
name|entry
operator|.
name|getSize
argument_list|()
operator|>=
literal|1024
operator|*
literal|1024
condition|)
block|{
return|return
literal|true
return|;
comment|// Do not scan huge class files.
block|}
return|return
literal|false
return|;
block|}
DECL|method|read (JarEntry entry)
specifier|private
name|byte
index|[]
name|read
parameter_list|(
name|JarEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|entry
operator|.
name|getSize
argument_list|()
index|]
decl_stmt|;
name|InputStream
name|in
init|=
name|jarFile
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
decl_stmt|;
try|try
block|{
name|IO
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
DECL|class|ClassData
specifier|private
specifier|static
class|class
name|ClassData
implements|implements
name|ClassVisitor
block|{
DECL|field|EXPORT
specifier|private
specifier|static
specifier|final
name|String
name|EXPORT
init|=
name|Type
operator|.
name|getType
argument_list|(
name|Export
operator|.
name|class
argument_list|)
operator|.
name|getDescriptor
argument_list|()
decl_stmt|;
DECL|field|LISTEN
specifier|private
specifier|static
specifier|final
name|String
name|LISTEN
init|=
name|Type
operator|.
name|getType
argument_list|(
name|Listen
operator|.
name|class
argument_list|)
operator|.
name|getDescriptor
argument_list|()
decl_stmt|;
DECL|field|className
name|String
name|className
decl_stmt|;
DECL|field|access
name|int
name|access
decl_stmt|;
DECL|field|exportedAsName
name|String
name|exportedAsName
decl_stmt|;
DECL|field|listen
name|boolean
name|listen
decl_stmt|;
DECL|method|isConcrete ()
name|boolean
name|isConcrete
parameter_list|()
block|{
return|return
operator|(
name|access
operator|&
name|Opcodes
operator|.
name|ACC_ABSTRACT
operator|)
operator|==
literal|0
operator|&&
operator|(
name|access
operator|&
name|Opcodes
operator|.
name|ACC_INTERFACE
operator|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|visit (int version, int access, String name, String signature, String superName, String[] interfaces)
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|version
parameter_list|,
name|int
name|access
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|signature
parameter_list|,
name|String
name|superName
parameter_list|,
name|String
index|[]
name|interfaces
parameter_list|)
block|{
name|this
operator|.
name|className
operator|=
name|Type
operator|.
name|getObjectType
argument_list|(
name|name
argument_list|)
operator|.
name|getClassName
argument_list|()
expr_stmt|;
name|this
operator|.
name|access
operator|=
name|access
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|visitAnnotation (String desc, boolean visible)
specifier|public
name|AnnotationVisitor
name|visitAnnotation
parameter_list|(
name|String
name|desc
parameter_list|,
name|boolean
name|visible
parameter_list|)
block|{
if|if
condition|(
name|visible
operator|&&
name|EXPORT
operator|.
name|equals
argument_list|(
name|desc
argument_list|)
condition|)
block|{
return|return
operator|new
name|AbstractAnnotationVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|exportedAsName
operator|=
operator|(
name|String
operator|)
name|value
expr_stmt|;
block|}
block|}
return|;
block|}
if|if
condition|(
name|visible
operator|&&
name|LISTEN
operator|.
name|equals
argument_list|(
name|desc
argument_list|)
condition|)
block|{
name|listen
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitSource (String arg0, String arg1)
specifier|public
name|void
name|visitSource
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|visitOuterClass (String arg0, String arg1, String arg2)
specifier|public
name|void
name|visitOuterClass
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|,
name|String
name|arg2
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|visitMethod (int arg0, String arg1, String arg2, String arg3, String[] arg4)
specifier|public
name|MethodVisitor
name|visitMethod
parameter_list|(
name|int
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|,
name|String
name|arg2
parameter_list|,
name|String
name|arg3
parameter_list|,
name|String
index|[]
name|arg4
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitInnerClass (String arg0, String arg1, String arg2, int arg3)
specifier|public
name|void
name|visitInnerClass
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|,
name|String
name|arg2
parameter_list|,
name|int
name|arg3
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|visitField (int arg0, String arg1, String arg2, String arg3, Object arg4)
specifier|public
name|FieldVisitor
name|visitField
parameter_list|(
name|int
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|,
name|String
name|arg2
parameter_list|,
name|String
name|arg3
parameter_list|,
name|Object
name|arg4
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitEnd ()
specifier|public
name|void
name|visitEnd
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|visitAttribute (Attribute arg0)
specifier|public
name|void
name|visitAttribute
parameter_list|(
name|Attribute
name|arg0
parameter_list|)
block|{     }
block|}
DECL|class|AbstractAnnotationVisitor
specifier|private
specifier|static
specifier|abstract
class|class
name|AbstractAnnotationVisitor
implements|implements
name|AnnotationVisitor
block|{
annotation|@
name|Override
DECL|method|visitAnnotation (String arg0, String arg1)
specifier|public
name|AnnotationVisitor
name|visitAnnotation
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitArray (String arg0)
specifier|public
name|AnnotationVisitor
name|visitArray
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitEnum (String arg0, String arg1, String arg2)
specifier|public
name|void
name|visitEnum
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|,
name|String
name|arg2
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|visitEnd ()
specifier|public
name|void
name|visitEnd
parameter_list|()
block|{     }
block|}
block|}
end_class

end_unit

