begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.config
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
operator|.
name|SCHEME_MAILTO
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
operator|.
name|SCHEME_USERNAME
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
operator|.
name|SCHEME_UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|AuthType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|GitBasicAuthPolicy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|auth
operator|.
name|openid
operator|.
name|OpenIdProviderPattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|SignedToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|XsrfException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_comment
comment|/** Authentication related settings from {@code gerrit.config}. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|AuthConfig
specifier|public
class|class
name|AuthConfig
block|{
DECL|field|authType
specifier|private
specifier|final
name|AuthType
name|authType
decl_stmt|;
DECL|field|httpHeader
specifier|private
specifier|final
name|String
name|httpHeader
decl_stmt|;
DECL|field|httpDisplaynameHeader
specifier|private
specifier|final
name|String
name|httpDisplaynameHeader
decl_stmt|;
DECL|field|httpEmailHeader
specifier|private
specifier|final
name|String
name|httpEmailHeader
decl_stmt|;
DECL|field|httpExternalIdHeader
specifier|private
specifier|final
name|String
name|httpExternalIdHeader
decl_stmt|;
DECL|field|registerPageUrl
specifier|private
specifier|final
name|String
name|registerPageUrl
decl_stmt|;
DECL|field|registerUrl
specifier|private
specifier|final
name|String
name|registerUrl
decl_stmt|;
DECL|field|registerText
specifier|private
specifier|final
name|String
name|registerText
decl_stmt|;
DECL|field|trustContainerAuth
specifier|private
specifier|final
name|boolean
name|trustContainerAuth
decl_stmt|;
DECL|field|enableRunAs
specifier|private
specifier|final
name|boolean
name|enableRunAs
decl_stmt|;
DECL|field|userNameToLowerCase
specifier|private
specifier|final
name|boolean
name|userNameToLowerCase
decl_stmt|;
DECL|field|useContributorAgreements
specifier|private
specifier|final
name|boolean
name|useContributorAgreements
decl_stmt|;
DECL|field|loginUrl
specifier|private
specifier|final
name|String
name|loginUrl
decl_stmt|;
DECL|field|loginText
specifier|private
specifier|final
name|String
name|loginText
decl_stmt|;
DECL|field|logoutUrl
specifier|private
specifier|final
name|String
name|logoutUrl
decl_stmt|;
DECL|field|switchAccountUrl
specifier|private
specifier|final
name|String
name|switchAccountUrl
decl_stmt|;
DECL|field|editFullNameUrl
specifier|private
specifier|final
name|String
name|editFullNameUrl
decl_stmt|;
DECL|field|httpPasswordUrl
specifier|private
specifier|final
name|String
name|httpPasswordUrl
decl_stmt|;
DECL|field|openIdSsoUrl
specifier|private
specifier|final
name|String
name|openIdSsoUrl
decl_stmt|;
DECL|field|openIdDomains
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|openIdDomains
decl_stmt|;
DECL|field|trustedOpenIDs
specifier|private
specifier|final
name|List
argument_list|<
name|OpenIdProviderPattern
argument_list|>
name|trustedOpenIDs
decl_stmt|;
DECL|field|allowedOpenIDs
specifier|private
specifier|final
name|List
argument_list|<
name|OpenIdProviderPattern
argument_list|>
name|allowedOpenIDs
decl_stmt|;
DECL|field|cookiePath
specifier|private
specifier|final
name|String
name|cookiePath
decl_stmt|;
DECL|field|cookieDomain
specifier|private
specifier|final
name|String
name|cookieDomain
decl_stmt|;
DECL|field|cookieSecure
specifier|private
specifier|final
name|boolean
name|cookieSecure
decl_stmt|;
DECL|field|emailReg
specifier|private
specifier|final
name|SignedToken
name|emailReg
decl_stmt|;
DECL|field|allowRegisterNewEmail
specifier|private
specifier|final
name|boolean
name|allowRegisterNewEmail
decl_stmt|;
DECL|field|gitBasicAuthPolicy
specifier|private
name|GitBasicAuthPolicy
name|gitBasicAuthPolicy
decl_stmt|;
annotation|@
name|Inject
DECL|method|AuthConfig (@erritServerConfig final Config cfg)
name|AuthConfig
parameter_list|(
annotation|@
name|GerritServerConfig
specifier|final
name|Config
name|cfg
parameter_list|)
throws|throws
name|XsrfException
block|{
name|authType
operator|=
name|toType
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|httpHeader
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"httpheader"
argument_list|)
expr_stmt|;
name|httpDisplaynameHeader
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"httpdisplaynameheader"
argument_list|)
expr_stmt|;
name|httpEmailHeader
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"httpemailheader"
argument_list|)
expr_stmt|;
name|httpExternalIdHeader
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"httpexternalidheader"
argument_list|)
expr_stmt|;
name|loginUrl
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"loginurl"
argument_list|)
expr_stmt|;
name|loginText
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"logintext"
argument_list|)
expr_stmt|;
name|logoutUrl
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"logouturl"
argument_list|)
expr_stmt|;
name|switchAccountUrl
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"switchAccountUrl"
argument_list|)
expr_stmt|;
name|editFullNameUrl
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"editFullNameUrl"
argument_list|)
expr_stmt|;
name|httpPasswordUrl
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"httpPasswordUrl"
argument_list|)
expr_stmt|;
name|registerPageUrl
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"registerPageUrl"
argument_list|)
expr_stmt|;
name|registerUrl
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"registerUrl"
argument_list|)
expr_stmt|;
name|registerText
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"registerText"
argument_list|)
expr_stmt|;
name|openIdSsoUrl
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"openidssourl"
argument_list|)
expr_stmt|;
name|openIdDomains
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|cfg
operator|.
name|getStringList
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"openIdDomain"
argument_list|)
argument_list|)
expr_stmt|;
name|trustedOpenIDs
operator|=
name|toPatterns
argument_list|(
name|cfg
argument_list|,
literal|"trustedOpenID"
argument_list|)
expr_stmt|;
name|allowedOpenIDs
operator|=
name|toPatterns
argument_list|(
name|cfg
argument_list|,
literal|"allowedOpenID"
argument_list|)
expr_stmt|;
name|cookiePath
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"cookiepath"
argument_list|)
expr_stmt|;
name|cookieDomain
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"cookiedomain"
argument_list|)
expr_stmt|;
name|cookieSecure
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"auth"
argument_list|,
literal|"cookiesecure"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|trustContainerAuth
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"auth"
argument_list|,
literal|"trustContainerAuth"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|enableRunAs
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"enableRunAs"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|gitBasicAuthPolicy
operator|=
name|getBasicAuthPolicy
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|useContributorAgreements
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"auth"
argument_list|,
literal|"contributoragreements"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|userNameToLowerCase
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"auth"
argument_list|,
literal|"userNameToLowerCase"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|allowRegisterNewEmail
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"auth"
argument_list|,
literal|"allowRegisterNewEmail"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"registerEmailPrivateKey"
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|age
init|=
operator|(
name|int
operator|)
name|ConfigUtil
operator|.
name|getTimeUnit
argument_list|(
name|cfg
argument_list|,
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"maxRegisterEmailTokenAge"
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|emailReg
operator|=
operator|new
name|SignedToken
argument_list|(
name|age
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|emailReg
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|toPatterns (Config cfg, String name)
specifier|private
specifier|static
name|List
argument_list|<
name|OpenIdProviderPattern
argument_list|>
name|toPatterns
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
index|[]
name|s
init|=
name|cfg
operator|.
name|getStringList
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|s
operator|=
operator|new
name|String
index|[]
block|{
literal|"http://"
block|,
literal|"https://"
block|}
expr_stmt|;
block|}
name|List
argument_list|<
name|OpenIdProviderPattern
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|s
control|)
block|{
name|r
operator|.
name|add
argument_list|(
name|OpenIdProviderPattern
operator|.
name|create
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|r
argument_list|)
return|;
block|}
DECL|method|toType (Config cfg)
specifier|private
specifier|static
name|AuthType
name|toType
parameter_list|(
name|Config
name|cfg
parameter_list|)
block|{
return|return
name|cfg
operator|.
name|getEnum
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"type"
argument_list|,
name|AuthType
operator|.
name|OPENID
argument_list|)
return|;
block|}
DECL|method|getBasicAuthPolicy (Config cfg)
specifier|private
name|GitBasicAuthPolicy
name|getBasicAuthPolicy
parameter_list|(
name|Config
name|cfg
parameter_list|)
block|{
name|GitBasicAuthPolicy
name|defaultAuthPolicy
init|=
name|isLdapAuthType
argument_list|()
condition|?
name|GitBasicAuthPolicy
operator|.
name|LDAP
else|:
name|isOAuthType
argument_list|()
condition|?
name|GitBasicAuthPolicy
operator|.
name|OAUTH
else|:
name|GitBasicAuthPolicy
operator|.
name|HTTP
decl_stmt|;
return|return
name|cfg
operator|.
name|getEnum
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"gitBasicAuthPolicy"
argument_list|,
name|defaultAuthPolicy
argument_list|)
return|;
block|}
comment|/** Type of user authentication used by this Gerrit server. */
DECL|method|getAuthType ()
specifier|public
name|AuthType
name|getAuthType
parameter_list|()
block|{
return|return
name|authType
return|;
block|}
DECL|method|getLoginHttpHeader ()
specifier|public
name|String
name|getLoginHttpHeader
parameter_list|()
block|{
return|return
name|httpHeader
return|;
block|}
DECL|method|getHttpDisplaynameHeader ()
specifier|public
name|String
name|getHttpDisplaynameHeader
parameter_list|()
block|{
return|return
name|httpDisplaynameHeader
return|;
block|}
DECL|method|getHttpEmailHeader ()
specifier|public
name|String
name|getHttpEmailHeader
parameter_list|()
block|{
return|return
name|httpEmailHeader
return|;
block|}
DECL|method|getHttpExternalIdHeader ()
specifier|public
name|String
name|getHttpExternalIdHeader
parameter_list|()
block|{
return|return
name|httpExternalIdHeader
return|;
block|}
DECL|method|getLoginUrl ()
specifier|public
name|String
name|getLoginUrl
parameter_list|()
block|{
return|return
name|loginUrl
return|;
block|}
DECL|method|getLoginText ()
specifier|public
name|String
name|getLoginText
parameter_list|()
block|{
return|return
name|loginText
return|;
block|}
DECL|method|getLogoutURL ()
specifier|public
name|String
name|getLogoutURL
parameter_list|()
block|{
return|return
name|logoutUrl
return|;
block|}
DECL|method|getSwitchAccountUrl ()
specifier|public
name|String
name|getSwitchAccountUrl
parameter_list|()
block|{
return|return
name|switchAccountUrl
return|;
block|}
DECL|method|getEditFullNameUrl ()
specifier|public
name|String
name|getEditFullNameUrl
parameter_list|()
block|{
return|return
name|editFullNameUrl
return|;
block|}
DECL|method|getHttpPasswordUrl ()
specifier|public
name|String
name|getHttpPasswordUrl
parameter_list|()
block|{
return|return
name|httpPasswordUrl
return|;
block|}
DECL|method|getOpenIdSsoUrl ()
specifier|public
name|String
name|getOpenIdSsoUrl
parameter_list|()
block|{
return|return
name|openIdSsoUrl
return|;
block|}
DECL|method|getOpenIdDomains ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getOpenIdDomains
parameter_list|()
block|{
return|return
name|openIdDomains
return|;
block|}
DECL|method|getCookiePath ()
specifier|public
name|String
name|getCookiePath
parameter_list|()
block|{
return|return
name|cookiePath
return|;
block|}
DECL|method|getCookieDomain ()
specifier|public
name|String
name|getCookieDomain
parameter_list|()
block|{
return|return
name|cookieDomain
return|;
block|}
DECL|method|getCookieSecure ()
specifier|public
name|boolean
name|getCookieSecure
parameter_list|()
block|{
return|return
name|cookieSecure
return|;
block|}
DECL|method|getEmailRegistrationToken ()
specifier|public
name|SignedToken
name|getEmailRegistrationToken
parameter_list|()
block|{
return|return
name|emailReg
return|;
block|}
comment|/** OpenID identities which the server permits for authentication. */
DECL|method|getAllowedOpenIDs ()
specifier|public
name|List
argument_list|<
name|OpenIdProviderPattern
argument_list|>
name|getAllowedOpenIDs
parameter_list|()
block|{
return|return
name|allowedOpenIDs
return|;
block|}
comment|/** Whether git-over-http should trust authentication done by container. */
DECL|method|isTrustContainerAuth ()
specifier|public
name|boolean
name|isTrustContainerAuth
parameter_list|()
block|{
return|return
name|trustContainerAuth
return|;
block|}
comment|/** @return true if users with Run As capability can impersonate others. */
DECL|method|isRunAsEnabled ()
specifier|public
name|boolean
name|isRunAsEnabled
parameter_list|()
block|{
return|return
name|enableRunAs
return|;
block|}
comment|/** Whether user name should be converted to lower-case before validation */
DECL|method|isUserNameToLowerCase ()
specifier|public
name|boolean
name|isUserNameToLowerCase
parameter_list|()
block|{
return|return
name|userNameToLowerCase
return|;
block|}
DECL|method|getGitBasicAuthPolicy ()
specifier|public
name|GitBasicAuthPolicy
name|getGitBasicAuthPolicy
parameter_list|()
block|{
return|return
name|gitBasicAuthPolicy
return|;
block|}
comment|/** Whether contributor agreements are used. */
DECL|method|isUseContributorAgreements ()
specifier|public
name|boolean
name|isUseContributorAgreements
parameter_list|()
block|{
return|return
name|useContributorAgreements
return|;
block|}
DECL|method|isIdentityTrustable (Collection<ExternalId> ids)
specifier|public
name|boolean
name|isIdentityTrustable
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|ids
parameter_list|)
block|{
switch|switch
condition|(
name|getAuthType
argument_list|()
condition|)
block|{
case|case
name|DEVELOPMENT_BECOME_ANY_ACCOUNT
case|:
case|case
name|HTTP
case|:
case|case
name|HTTP_LDAP
case|:
case|case
name|LDAP
case|:
case|case
name|LDAP_BIND
case|:
case|case
name|CLIENT_SSL_CERT_LDAP
case|:
case|case
name|CUSTOM_EXTENSION
case|:
case|case
name|OAUTH
case|:
comment|// only way in is through some external system that the admin trusts
comment|//
return|return
literal|true
return|;
case|case
name|OPENID_SSO
case|:
comment|// There's only one provider in SSO mode, so it must be okay.
return|return
literal|true
return|;
case|case
name|OPENID
case|:
comment|// All identities must be trusted in order to trust the account.
comment|//
for|for
control|(
name|ExternalId
name|e
range|:
name|ids
control|)
block|{
if|if
condition|(
operator|!
name|isTrusted
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
default|default:
comment|// Assume not, we don't understand the login format.
comment|//
return|return
literal|false
return|;
block|}
block|}
DECL|method|isTrusted (ExternalId id)
specifier|private
name|boolean
name|isTrusted
parameter_list|(
name|ExternalId
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|.
name|isScheme
argument_list|(
name|SCHEME_MAILTO
argument_list|)
condition|)
block|{
comment|// mailto identities are created by sending a unique validation
comment|// token to the address and asking them to come back to the site
comment|// with that token.
comment|//
return|return
literal|true
return|;
block|}
if|if
condition|(
name|id
operator|.
name|isScheme
argument_list|(
name|SCHEME_UUID
argument_list|)
condition|)
block|{
comment|// UUID identities are absolutely meaningless and cannot be
comment|// constructed through any normal login process we use.
comment|//
return|return
literal|true
return|;
block|}
if|if
condition|(
name|id
operator|.
name|isScheme
argument_list|(
name|SCHEME_USERNAME
argument_list|)
condition|)
block|{
comment|// We can trust their username, its local to our server only.
comment|//
return|return
literal|true
return|;
block|}
for|for
control|(
name|OpenIdProviderPattern
name|p
range|:
name|trustedOpenIDs
control|)
block|{
if|if
condition|(
name|p
operator|.
name|matches
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getRegisterPageUrl ()
specifier|public
name|String
name|getRegisterPageUrl
parameter_list|()
block|{
return|return
name|registerPageUrl
return|;
block|}
DECL|method|getRegisterUrl ()
specifier|public
name|String
name|getRegisterUrl
parameter_list|()
block|{
return|return
name|registerUrl
return|;
block|}
DECL|method|getRegisterText ()
specifier|public
name|String
name|getRegisterText
parameter_list|()
block|{
return|return
name|registerText
return|;
block|}
DECL|method|isLdapAuthType ()
specifier|public
name|boolean
name|isLdapAuthType
parameter_list|()
block|{
return|return
name|authType
operator|==
name|AuthType
operator|.
name|LDAP
operator|||
name|authType
operator|==
name|AuthType
operator|.
name|LDAP_BIND
return|;
block|}
DECL|method|isOAuthType ()
specifier|public
name|boolean
name|isOAuthType
parameter_list|()
block|{
return|return
name|authType
operator|==
name|AuthType
operator|.
name|OAUTH
return|;
block|}
DECL|method|isAllowRegisterNewEmail ()
specifier|public
name|boolean
name|isAllowRegisterNewEmail
parameter_list|()
block|{
return|return
name|allowRegisterNewEmail
return|;
block|}
block|}
end_class

end_unit

