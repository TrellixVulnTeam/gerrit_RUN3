begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Creates a GroupMembership checker for the internal group system, which  * starts with the seed groups and includes all child groups.  */
end_comment

begin_class
DECL|class|IncludingGroupMembership
specifier|public
class|class
name|IncludingGroupMembership
implements|implements
name|GroupMembership
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (Iterable<AccountGroup.UUID> groupIds)
name|IncludingGroupMembership
name|create
parameter_list|(
name|Iterable
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groupIds
parameter_list|)
function_decl|;
block|}
DECL|field|groupIncludeCache
specifier|private
specifier|final
name|GroupIncludeCache
name|groupIncludeCache
decl_stmt|;
DECL|field|includes
specifier|private
specifier|final
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|includes
decl_stmt|;
DECL|field|groupQueue
specifier|private
specifier|final
name|Queue
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groupQueue
decl_stmt|;
annotation|@
name|Inject
DECL|method|IncludingGroupMembership ( GroupIncludeCache groupIncludeCache, @Assisted Iterable<AccountGroup.UUID> seedGroups)
name|IncludingGroupMembership
parameter_list|(
name|GroupIncludeCache
name|groupIncludeCache
parameter_list|,
annotation|@
name|Assisted
name|Iterable
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|seedGroups
parameter_list|)
block|{
name|this
operator|.
name|groupIncludeCache
operator|=
name|groupIncludeCache
expr_stmt|;
name|this
operator|.
name|includes
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|seedGroups
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupQueue
operator|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|seedGroups
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|contains (AccountGroup.UUID id)
specifier|public
name|boolean
name|contains
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|includes
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|findIncludedGroup
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsAnyOf (Iterable<AccountGroup.UUID> ids)
specifier|public
name|boolean
name|containsAnyOf
parameter_list|(
name|Iterable
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|ids
parameter_list|)
block|{
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|query
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountGroup
operator|.
name|UUID
name|groupId
range|:
name|ids
control|)
block|{
if|if
condition|(
name|includes
operator|.
name|contains
argument_list|(
name|groupId
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|query
operator|.
name|add
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
block|}
return|return
name|findIncludedGroup
argument_list|(
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|intersection (Iterable<AccountGroup.UUID> groupIds)
specifier|public
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|intersection
parameter_list|(
name|Iterable
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groupIds
parameter_list|)
block|{
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|r
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountGroup
operator|.
name|UUID
name|id
range|:
name|groupIds
control|)
block|{
if|if
condition|(
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
DECL|method|findIncludedGroup (Set<AccountGroup.UUID> query)
specifier|private
name|boolean
name|findIncludedGroup
parameter_list|(
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|query
parameter_list|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|found
operator|&&
operator|!
name|groupQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|AccountGroup
operator|.
name|UUID
name|id
init|=
name|groupQueue
operator|.
name|remove
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|AccountGroup
operator|.
name|UUID
name|groupId
range|:
name|groupIncludeCache
operator|.
name|getByInclude
argument_list|(
name|id
argument_list|)
control|)
block|{
if|if
condition|(
name|includes
operator|.
name|add
argument_list|(
name|groupId
argument_list|)
condition|)
block|{
name|groupQueue
operator|.
name|add
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|found
operator||=
name|query
operator|.
name|contains
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|found
return|;
block|}
annotation|@
name|Override
DECL|method|getKnownGroups ()
specifier|public
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|getKnownGroups
parameter_list|()
block|{
name|findIncludedGroup
argument_list|(
name|Collections
operator|.
expr|<
name|AccountGroup
operator|.
name|UUID
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// find all
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|includes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

