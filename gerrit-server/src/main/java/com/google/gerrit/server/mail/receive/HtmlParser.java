begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.mail.receive
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|receive
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|PeekingIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsoup
operator|.
name|Jsoup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Element
import|;
end_import

begin_comment
comment|/** Provides functionality for parsing the HTML part of a {@link MailMessage}. */
end_comment

begin_class
DECL|class|HtmlParser
specifier|public
class|class
name|HtmlParser
block|{
DECL|method|HtmlParser ()
specifier|private
name|HtmlParser
parameter_list|()
block|{}
comment|/**    * Parses comments from html email.    *    *<p>This parser goes though all html elements in the email and checks for matching patterns. It    * keeps track of the last file and comments it encountered to know in which context a parsed    * comment belongs. It uses the href attributes of<a> tags to identify comments sent out by    * Gerrit as these are generally more reliable then the text captions.    *    * @param email the message as received from the email service    * @param comments a specific set of comments as sent out in the original notification email.    *     Comments are expected to be in the same order as they were sent out to in the email.    * @param changeUrl canonical change URL that points to the change on this Gerrit instance.    *     Example: https://go-review.googlesource.com/#/c/91570    * @return list of MailComments parsed from the html part of the email    */
DECL|method|parse ( MailMessage email, Collection<Comment> comments, String changeUrl)
specifier|public
specifier|static
name|List
argument_list|<
name|MailComment
argument_list|>
name|parse
parameter_list|(
name|MailMessage
name|email
parameter_list|,
name|Collection
argument_list|<
name|Comment
argument_list|>
name|comments
parameter_list|,
name|String
name|changeUrl
parameter_list|)
block|{
comment|// TODO(hiesel) Add support for Gmail Mobile
comment|// TODO(hiesel) Add tests for other popular email clients
comment|// This parser goes though all html elements in the email and checks for
comment|// matching patterns. It keeps track of the last file and comments it
comment|// encountered to know in which context a parsed comment belongs.
comment|// It uses the href attributes of<a> tags to identify comments sent out by
comment|// Gerrit as these are generally more reliable then the text captions.
name|List
argument_list|<
name|MailComment
argument_list|>
name|parsedComments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Document
name|d
init|=
name|Jsoup
operator|.
name|parse
argument_list|(
name|email
operator|.
name|htmlContent
argument_list|()
argument_list|)
decl_stmt|;
name|PeekingIterator
argument_list|<
name|Comment
argument_list|>
name|iter
init|=
name|Iterators
operator|.
name|peekingIterator
argument_list|(
name|comments
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|lastEncounteredFileName
init|=
literal|null
decl_stmt|;
name|Comment
name|lastEncounteredComment
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Element
name|e
range|:
name|d
operator|.
name|body
argument_list|()
operator|.
name|getAllElements
argument_list|()
control|)
block|{
name|String
name|elementName
init|=
name|e
operator|.
name|tagName
argument_list|()
decl_stmt|;
name|boolean
name|isInBlockQuote
init|=
name|e
operator|.
name|parents
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
name|p
operator|.
name|tagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"blockquote"
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
operator|.
name|isPresent
argument_list|()
decl_stmt|;
if|if
condition|(
name|elementName
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
condition|)
block|{
name|String
name|href
init|=
name|e
operator|.
name|attr
argument_list|(
literal|"href"
argument_list|)
decl_stmt|;
comment|// Check if there is still a next comment that could be contained in
comment|// this<a> tag
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Comment
name|perspectiveComment
init|=
name|iter
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|href
operator|.
name|equals
argument_list|(
name|ParserUtil
operator|.
name|filePath
argument_list|(
name|changeUrl
argument_list|,
name|perspectiveComment
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|lastEncounteredFileName
operator|==
literal|null
operator|||
operator|!
name|lastEncounteredFileName
operator|.
name|equals
argument_list|(
name|perspectiveComment
operator|.
name|key
operator|.
name|filename
argument_list|)
condition|)
block|{
comment|// Not a file-level comment, but users could have typed a comment
comment|// right after this file annotation to create a new file-level
comment|// comment. If this file has a file-level comment, we have already
comment|// set lastEncounteredComment to that file-level comment when we
comment|// encountered the file link and should not reset it now.
name|lastEncounteredFileName
operator|=
name|perspectiveComment
operator|.
name|key
operator|.
name|filename
expr_stmt|;
name|lastEncounteredComment
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|perspectiveComment
operator|.
name|lineNbr
operator|==
literal|0
condition|)
block|{
comment|// This was originally a file-level comment
name|lastEncounteredComment
operator|=
name|perspectiveComment
expr_stmt|;
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ParserUtil
operator|.
name|isCommentUrl
argument_list|(
name|href
argument_list|,
name|changeUrl
argument_list|,
name|perspectiveComment
argument_list|)
condition|)
block|{
comment|// This is a regular inline comment
name|lastEncounteredComment
operator|=
name|perspectiveComment
expr_stmt|;
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|isInBlockQuote
operator|&&
name|elementName
operator|.
name|equals
argument_list|(
literal|"div"
argument_list|)
operator|&&
operator|!
name|e
operator|.
name|className
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"gmail"
argument_list|)
condition|)
block|{
comment|// This is a comment typed by the user
comment|// Replace non-breaking spaces and trim string
name|String
name|content
init|=
name|e
operator|.
name|ownText
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\u00a0'
argument_list|,
literal|' '
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|content
argument_list|)
condition|)
block|{
if|if
condition|(
name|lastEncounteredComment
operator|==
literal|null
operator|&&
name|lastEncounteredFileName
operator|==
literal|null
condition|)
block|{
comment|// Remove quotation line, email signature and
comment|// "Sent from my xyz device"
name|content
operator|=
name|ParserUtil
operator|.
name|trimQuotation
argument_list|(
name|content
argument_list|)
expr_stmt|;
comment|// TODO(hiesel) Add more sanitizer
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|content
argument_list|)
condition|)
block|{
name|appendOrAddNewComment
argument_list|(
operator|new
name|MailComment
argument_list|(
name|content
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MailComment
operator|.
name|CommentType
operator|.
name|CHANGE_MESSAGE
argument_list|)
argument_list|,
name|parsedComments
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|lastEncounteredComment
operator|==
literal|null
condition|)
block|{
name|appendOrAddNewComment
argument_list|(
operator|new
name|MailComment
argument_list|(
name|content
argument_list|,
name|lastEncounteredFileName
argument_list|,
literal|null
argument_list|,
name|MailComment
operator|.
name|CommentType
operator|.
name|FILE_COMMENT
argument_list|)
argument_list|,
name|parsedComments
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|appendOrAddNewComment
argument_list|(
operator|new
name|MailComment
argument_list|(
name|content
argument_list|,
literal|null
argument_list|,
name|lastEncounteredComment
argument_list|,
name|MailComment
operator|.
name|CommentType
operator|.
name|INLINE_COMMENT
argument_list|)
argument_list|,
name|parsedComments
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|parsedComments
return|;
block|}
comment|/**    * When parsing HTML content, we need to append comments prematurely since we are parsing    * block-by-block and never know what comes next. This can result in a comment being parsed as two    * comments when it spans multiple blocks. This method takes care of merging those blocks or    * adding a new comment to the list of appropriate.    */
DECL|method|appendOrAddNewComment (MailComment comment, List<MailComment> comments)
specifier|private
specifier|static
name|void
name|appendOrAddNewComment
parameter_list|(
name|MailComment
name|comment
parameter_list|,
name|List
argument_list|<
name|MailComment
argument_list|>
name|comments
parameter_list|)
block|{
if|if
condition|(
name|comments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|comments
operator|.
name|add
argument_list|(
name|comment
argument_list|)
expr_stmt|;
return|return;
block|}
name|MailComment
name|lastComment
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|comments
argument_list|)
decl_stmt|;
if|if
condition|(
name|comment
operator|.
name|isSameCommentPath
argument_list|(
name|lastComment
argument_list|)
condition|)
block|{
comment|// Merge the two comments
name|lastComment
operator|.
name|message
operator|+=
literal|"\n\n"
operator|+
name|comment
operator|.
name|message
expr_stmt|;
return|return;
block|}
name|comments
operator|.
name|add
argument_list|(
name|comment
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

