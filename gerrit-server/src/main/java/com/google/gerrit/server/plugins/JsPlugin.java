begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.plugins
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|annotations
operator|.
name|PluginName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|JavaScriptPlugin
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|WebUiPlugin
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lifecycle
operator|.
name|LifecycleManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PluginUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|file
operator|.
name|FileSnapshot
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_class
DECL|class|JsPlugin
class|class
name|JsPlugin
extends|extends
name|Plugin
block|{
DECL|field|httpInjector
specifier|private
name|Injector
name|httpInjector
decl_stmt|;
DECL|method|JsPlugin (String name, File srcFile, PluginUser pluginUser, FileSnapshot snapshot)
name|JsPlugin
parameter_list|(
name|String
name|name
parameter_list|,
name|File
name|srcFile
parameter_list|,
name|PluginUser
name|pluginUser
parameter_list|,
name|FileSnapshot
name|snapshot
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|srcFile
argument_list|,
name|pluginUser
argument_list|,
name|snapshot
argument_list|,
name|ApiType
operator|.
name|JS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|getVersion ()
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
name|String
name|fileName
init|=
name|getSrcFile
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|firstDash
init|=
name|fileName
operator|.
name|indexOf
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstDash
operator|>
literal|0
condition|)
block|{
return|return
name|fileName
operator|.
name|substring
argument_list|(
name|firstDash
operator|+
literal|1
argument_list|,
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|".js"
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
annotation|@
name|Override
DECL|method|start (PluginGuiceEnvironment env)
specifier|public
name|void
name|start
parameter_list|(
name|PluginGuiceEnvironment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|manager
operator|=
operator|new
name|LifecycleManager
argument_list|()
expr_stmt|;
name|String
name|fileName
init|=
name|getSrcFile
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|httpInjector
operator|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|StandaloneJsPluginModule
argument_list|(
name|getName
argument_list|()
argument_list|,
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop (PluginGuiceEnvironment env)
name|void
name|stop
parameter_list|(
name|PluginGuiceEnvironment
name|env
parameter_list|)
block|{
if|if
condition|(
name|manager
operator|!=
literal|null
condition|)
block|{
name|manager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|httpInjector
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSysInjector ()
specifier|public
name|Injector
name|getSysInjector
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|getSshInjector ()
specifier|public
name|Injector
name|getSshInjector
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|getHttpInjector ()
specifier|public
name|Injector
name|getHttpInjector
parameter_list|()
block|{
return|return
name|httpInjector
return|;
block|}
annotation|@
name|Override
DECL|method|canReload ()
name|boolean
name|canReload
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|class|StandaloneJsPluginModule
specifier|private
specifier|static
specifier|final
class|class
name|StandaloneJsPluginModule
extends|extends
name|AbstractModule
block|{
DECL|field|fileName
specifier|private
specifier|final
name|String
name|fileName
decl_stmt|;
DECL|field|pluginName
specifier|private
specifier|final
name|String
name|pluginName
decl_stmt|;
DECL|method|StandaloneJsPluginModule (String pluginName, String fileName)
name|StandaloneJsPluginModule
parameter_list|(
name|String
name|pluginName
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|this
operator|.
name|pluginName
operator|=
name|pluginName
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configure ()
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|annotatedWith
argument_list|(
name|PluginName
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
name|DynamicSet
operator|.
name|bind
argument_list|(
name|binder
argument_list|()
argument_list|,
name|WebUiPlugin
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|JavaScriptPlugin
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContentScanner ()
specifier|public
name|PluginContentScanner
name|getContentScanner
parameter_list|()
block|{
return|return
name|PluginContentScanner
operator|.
name|EMPTY
return|;
block|}
block|}
end_class

end_unit

