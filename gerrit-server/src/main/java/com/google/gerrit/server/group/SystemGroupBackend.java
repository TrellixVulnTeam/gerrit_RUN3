begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.group
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupDescription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AbstractGroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupMembership
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|ListGroupMembership
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_class
DECL|class|SystemGroupBackend
specifier|public
class|class
name|SystemGroupBackend
extends|extends
name|AbstractGroupBackend
block|{
comment|/** Common UUID assigned to the "Anonymous Users" group. */
DECL|field|ANONYMOUS_USERS
specifier|public
specifier|static
specifier|final
name|AccountGroup
operator|.
name|UUID
name|ANONYMOUS_USERS
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"global:Anonymous-Users"
argument_list|)
decl_stmt|;
comment|/** Common UUID assigned to the "Registered Users" group. */
DECL|field|REGISTERED_USERS
specifier|public
specifier|static
specifier|final
name|AccountGroup
operator|.
name|UUID
name|REGISTERED_USERS
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"global:Registered-Users"
argument_list|)
decl_stmt|;
comment|/** Common UUID assigned to the "Project Owners" placeholder group. */
DECL|field|PROJECT_OWNERS
specifier|public
specifier|static
specifier|final
name|AccountGroup
operator|.
name|UUID
name|PROJECT_OWNERS
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"global:Project-Owners"
argument_list|)
decl_stmt|;
comment|/** Common UUID assigned to the "Change Owner" placeholder group. */
DECL|field|CHANGE_OWNER
specifier|public
specifier|static
specifier|final
name|AccountGroup
operator|.
name|UUID
name|CHANGE_OWNER
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"global:Change-Owner"
argument_list|)
decl_stmt|;
DECL|field|names
specifier|private
specifier|static
specifier|final
name|SortedMap
argument_list|<
name|String
argument_list|,
name|GroupReference
argument_list|>
name|names
decl_stmt|;
DECL|field|uuids
specifier|private
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|,
name|GroupReference
argument_list|>
name|uuids
decl_stmt|;
static|static
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|GroupReference
argument_list|>
name|n
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|,
name|GroupReference
argument_list|>
name|u
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
index|[]
name|all
init|=
block|{
name|ANONYMOUS_USERS
block|,
name|REGISTERED_USERS
block|,
name|PROJECT_OWNERS
block|,
name|CHANGE_OWNER
block|,     }
decl_stmt|;
for|for
control|(
name|AccountGroup
operator|.
name|UUID
name|uuid
range|:
name|all
control|)
block|{
name|int
name|c
init|=
name|uuid
operator|.
name|get
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|uuid
operator|.
name|get
argument_list|()
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
name|GroupReference
name|ref
init|=
operator|new
name|GroupReference
argument_list|(
name|uuid
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|n
operator|.
name|put
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|u
operator|.
name|put
argument_list|(
name|ref
operator|.
name|getUUID
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
name|names
operator|=
name|Collections
operator|.
name|unmodifiableSortedMap
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|uuids
operator|=
name|u
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|isSystemGroup (AccountGroup.UUID uuid)
specifier|public
specifier|static
name|boolean
name|isSystemGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
return|return
name|uuid
operator|.
name|get
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"global:"
argument_list|)
return|;
block|}
DECL|method|isAnonymousOrRegistered (GroupReference ref)
specifier|public
specifier|static
name|boolean
name|isAnonymousOrRegistered
parameter_list|(
name|GroupReference
name|ref
parameter_list|)
block|{
return|return
name|isAnonymousOrRegistered
argument_list|(
name|ref
operator|.
name|getUUID
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isAnonymousOrRegistered (AccountGroup.UUID uuid)
specifier|public
specifier|static
name|boolean
name|isAnonymousOrRegistered
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
return|return
name|ANONYMOUS_USERS
operator|.
name|equals
argument_list|(
name|uuid
argument_list|)
operator|||
name|REGISTERED_USERS
operator|.
name|equals
argument_list|(
name|uuid
argument_list|)
return|;
block|}
DECL|method|getGroup (AccountGroup.UUID uuid)
specifier|public
specifier|static
name|GroupReference
name|getGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
return|return
name|checkNotNull
argument_list|(
name|uuids
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
argument_list|,
literal|"group %s not found"
argument_list|,
name|uuid
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|handles (AccountGroup.UUID uuid)
specifier|public
name|boolean
name|handles
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
return|return
name|isSystemGroup
argument_list|(
name|uuid
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get (AccountGroup.UUID uuid)
specifier|public
name|GroupDescription
operator|.
name|Basic
name|get
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
specifier|final
name|GroupReference
name|ref
init|=
name|getGroup
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
return|return
operator|new
name|GroupDescription
operator|.
name|Basic
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|ref
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|AccountGroup
operator|.
name|UUID
name|getGroupUUID
parameter_list|()
block|{
return|return
name|ref
operator|.
name|getUUID
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getEmailAddress
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|suggest (String name, ProjectControl project)
specifier|public
name|Collection
argument_list|<
name|GroupReference
argument_list|>
name|suggest
parameter_list|(
name|String
name|name
parameter_list|,
name|ProjectControl
name|project
parameter_list|)
block|{
name|String
name|nameLC
init|=
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|GroupReference
argument_list|>
name|matches
init|=
name|names
operator|.
name|tailMap
argument_list|(
name|nameLC
argument_list|)
decl_stmt|;
if|if
condition|(
name|matches
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|GroupReference
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|matches
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|GroupReference
argument_list|>
name|e
range|:
name|matches
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|nameLC
argument_list|)
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|r
return|;
block|}
annotation|@
name|Override
DECL|method|membershipsOf (IdentifiedUser user)
specifier|public
name|GroupMembership
name|membershipsOf
parameter_list|(
name|IdentifiedUser
name|user
parameter_list|)
block|{
return|return
operator|new
name|ListGroupMembership
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ANONYMOUS_USERS
argument_list|,
name|REGISTERED_USERS
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

