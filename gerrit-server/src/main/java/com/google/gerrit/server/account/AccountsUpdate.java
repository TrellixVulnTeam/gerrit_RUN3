begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ReindexAfterRefUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|send
operator|.
name|OutgoingEmailValidator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmDuplicateKeyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/**  * Updates accounts.  *  *<p>The account updates are written to both ReviewDb and NoteDb.  *  *<p>In NoteDb accounts are represented as user branches in the All-Users repository. Optionally a  * user branch can contain a 'account.config' file that stores account properties, such as full  * name, preferred email, status and the active flag. The timestamp of the first commit on a user  * branch denotes the registration date. The initial commit on the user branch may be empty (since  * having an 'account.config' is optional). See {@link AccountConfig} for details of the  * 'account.config' file format.  *  *<p>On updating accounts the accounts are evicted from the account cache and thus reindexed. The  * eviction from the account cache is done by the {@link ReindexAfterRefUpdate} class which receives  * the event about updating the user branch that is triggered by this class.  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|AccountsUpdate
specifier|public
class|class
name|AccountsUpdate
block|{
comment|/**    * Factory to create an AccountsUpdate instance for updating accounts by the Gerrit server.    *    *<p>The Gerrit server identity will be used as author and committer for all commits that update    * the accounts.    */
annotation|@
name|Singleton
DECL|class|Server
specifier|public
specifier|static
class|class
name|Server
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|gitRefUpdated
specifier|private
specifier|final
name|GitReferenceUpdated
name|gitRefUpdated
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|emailValidator
specifier|private
specifier|final
name|OutgoingEmailValidator
name|emailValidator
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
decl_stmt|;
DECL|field|metaDataUpdateServerFactory
specifier|private
specifier|final
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|Server
argument_list|>
name|metaDataUpdateServerFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|Server ( GitRepositoryManager repoManager, GitReferenceUpdated gitRefUpdated, AllUsersName allUsersName, OutgoingEmailValidator emailValidator, @GerritPersonIdent Provider<PersonIdent> serverIdent, Provider<MetaDataUpdate.Server> metaDataUpdateServerFactory)
specifier|public
name|Server
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|OutgoingEmailValidator
name|emailValidator
parameter_list|,
annotation|@
name|GerritPersonIdent
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
parameter_list|,
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|Server
argument_list|>
name|metaDataUpdateServerFactory
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|gitRefUpdated
operator|=
name|gitRefUpdated
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|emailValidator
operator|=
name|emailValidator
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
name|this
operator|.
name|metaDataUpdateServerFactory
operator|=
name|metaDataUpdateServerFactory
expr_stmt|;
block|}
DECL|method|create ()
specifier|public
name|AccountsUpdate
name|create
parameter_list|()
block|{
name|PersonIdent
name|i
init|=
name|serverIdent
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|new
name|AccountsUpdate
argument_list|(
name|repoManager
argument_list|,
name|gitRefUpdated
argument_list|,
literal|null
argument_list|,
name|allUsersName
argument_list|,
name|emailValidator
argument_list|,
name|i
argument_list|,
parameter_list|()
lambda|->
name|metaDataUpdateServerFactory
operator|.
name|get
argument_list|()
operator|.
name|create
argument_list|(
name|allUsersName
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Factory to create an AccountsUpdate instance for updating accounts by the current user.    *    *<p>The identity of the current user will be used as author for all commits that update the    * accounts. The Gerrit server identity will be used as committer.    */
annotation|@
name|Singleton
DECL|class|User
specifier|public
specifier|static
class|class
name|User
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|gitRefUpdated
specifier|private
specifier|final
name|GitReferenceUpdated
name|gitRefUpdated
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|emailValidator
specifier|private
specifier|final
name|OutgoingEmailValidator
name|emailValidator
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
decl_stmt|;
DECL|field|identifiedUser
specifier|private
specifier|final
name|Provider
argument_list|<
name|IdentifiedUser
argument_list|>
name|identifiedUser
decl_stmt|;
DECL|field|metaDataUpdateUserFactory
specifier|private
specifier|final
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|User
argument_list|>
name|metaDataUpdateUserFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|User ( GitRepositoryManager repoManager, GitReferenceUpdated gitRefUpdated, AllUsersName allUsersName, OutgoingEmailValidator emailValidator, @GerritPersonIdent Provider<PersonIdent> serverIdent, Provider<IdentifiedUser> identifiedUser, Provider<MetaDataUpdate.User> metaDataUpdateUserFactory)
specifier|public
name|User
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|OutgoingEmailValidator
name|emailValidator
parameter_list|,
annotation|@
name|GerritPersonIdent
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
parameter_list|,
name|Provider
argument_list|<
name|IdentifiedUser
argument_list|>
name|identifiedUser
parameter_list|,
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|User
argument_list|>
name|metaDataUpdateUserFactory
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|gitRefUpdated
operator|=
name|gitRefUpdated
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
name|this
operator|.
name|emailValidator
operator|=
name|emailValidator
expr_stmt|;
name|this
operator|.
name|identifiedUser
operator|=
name|identifiedUser
expr_stmt|;
name|this
operator|.
name|metaDataUpdateUserFactory
operator|=
name|metaDataUpdateUserFactory
expr_stmt|;
block|}
DECL|method|create ()
specifier|public
name|AccountsUpdate
name|create
parameter_list|()
block|{
name|IdentifiedUser
name|user
init|=
name|identifiedUser
operator|.
name|get
argument_list|()
decl_stmt|;
name|PersonIdent
name|i
init|=
name|serverIdent
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|new
name|AccountsUpdate
argument_list|(
name|repoManager
argument_list|,
name|gitRefUpdated
argument_list|,
name|user
argument_list|,
name|allUsersName
argument_list|,
name|emailValidator
argument_list|,
name|createPersonIdent
argument_list|(
name|i
argument_list|,
name|user
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|metaDataUpdateUserFactory
operator|.
name|get
argument_list|()
operator|.
name|create
argument_list|(
name|allUsersName
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createPersonIdent (PersonIdent ident, IdentifiedUser user)
specifier|private
name|PersonIdent
name|createPersonIdent
parameter_list|(
name|PersonIdent
name|ident
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|)
block|{
return|return
name|user
operator|.
name|newCommitterIdent
argument_list|(
name|ident
operator|.
name|getWhen
argument_list|()
argument_list|,
name|ident
operator|.
name|getTimeZone
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|gitRefUpdated
specifier|private
specifier|final
name|GitReferenceUpdated
name|gitRefUpdated
decl_stmt|;
DECL|field|currentUser
annotation|@
name|Nullable
specifier|private
specifier|final
name|IdentifiedUser
name|currentUser
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|emailValidator
specifier|private
specifier|final
name|OutgoingEmailValidator
name|emailValidator
decl_stmt|;
DECL|field|committerIdent
specifier|private
specifier|final
name|PersonIdent
name|committerIdent
decl_stmt|;
DECL|field|metaDataUpdateFactory
specifier|private
specifier|final
name|MetaDataUpdateFactory
name|metaDataUpdateFactory
decl_stmt|;
DECL|method|AccountsUpdate ( GitRepositoryManager repoManager, GitReferenceUpdated gitRefUpdated, @Nullable IdentifiedUser currentUser, AllUsersName allUsersName, OutgoingEmailValidator emailValidator, PersonIdent committerIdent, MetaDataUpdateFactory metaDataUpdateFactory)
specifier|private
name|AccountsUpdate
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|,
annotation|@
name|Nullable
name|IdentifiedUser
name|currentUser
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|OutgoingEmailValidator
name|emailValidator
parameter_list|,
name|PersonIdent
name|committerIdent
parameter_list|,
name|MetaDataUpdateFactory
name|metaDataUpdateFactory
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|checkNotNull
argument_list|(
name|repoManager
argument_list|,
literal|"repoManager"
argument_list|)
expr_stmt|;
name|this
operator|.
name|gitRefUpdated
operator|=
name|checkNotNull
argument_list|(
name|gitRefUpdated
argument_list|,
literal|"gitRefUpdated"
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentUser
operator|=
name|currentUser
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|checkNotNull
argument_list|(
name|allUsersName
argument_list|,
literal|"allUsersName"
argument_list|)
expr_stmt|;
name|this
operator|.
name|emailValidator
operator|=
name|checkNotNull
argument_list|(
name|emailValidator
argument_list|,
literal|"emailValidator"
argument_list|)
expr_stmt|;
name|this
operator|.
name|committerIdent
operator|=
name|checkNotNull
argument_list|(
name|committerIdent
argument_list|,
literal|"committerIdent"
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaDataUpdateFactory
operator|=
name|checkNotNull
argument_list|(
name|metaDataUpdateFactory
argument_list|,
literal|"metaDataUpdateFactory"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inserts a new account.    *    * @param db ReviewDb    * @param accountId ID of the new account    * @param init consumer to populate the new account    * @return the newly created account    * @throws OrmException if updating the database fails    * @throws OrmDuplicateKeyException if the account already exists    * @throws IOException if updating the user branch fails    * @throws ConfigInvalidException if any of the account fields has an invalid value    */
DECL|method|insert (ReviewDb db, Account.Id accountId, Consumer<Account> init)
specifier|public
name|Account
name|insert
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Consumer
argument_list|<
name|Account
argument_list|>
name|init
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|AccountConfig
name|accountConfig
init|=
name|read
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
name|Account
name|account
init|=
name|accountConfig
operator|.
name|getNewAccount
argument_list|()
decl_stmt|;
name|init
operator|.
name|accept
argument_list|(
name|account
argument_list|)
expr_stmt|;
comment|// Create in ReviewDb
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|insert
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|account
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create in NoteDb
name|commitNew
argument_list|(
name|accountConfig
argument_list|)
expr_stmt|;
return|return
name|account
return|;
block|}
comment|/**    * Gets the account and updates it atomically.    *    *<p>Changing the registration date of an account is not supported.    *    * @param db ReviewDb    * @param accountId ID of the account    * @param consumer consumer to update the account, only invoked if the account exists    * @return the updated account, {@code null} if the account doesn't exist    * @throws OrmException if updating the database fails    * @throws IOException if updating the user branch fails    * @throws ConfigInvalidException if any of the account fields has an invalid value    */
DECL|method|update (ReviewDb db, Account.Id accountId, Consumer<Account> consumer)
specifier|public
name|Account
name|update
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Consumer
argument_list|<
name|Account
argument_list|>
name|consumer
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|update
argument_list|(
name|db
argument_list|,
name|accountId
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|consumer
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Gets the account and updates it atomically.    *    *<p>Changing the registration date of an account is not supported.    *    * @param db ReviewDb    * @param accountId ID of the account    * @param consumers consumers to update the account, only invoked if the account exists    * @return the updated account, {@code null} if the account doesn't exist    * @throws OrmException if updating the database fails    * @throws IOException if updating the user branch fails    * @throws ConfigInvalidException if any of the account fields has an invalid value    */
DECL|method|update (ReviewDb db, Account.Id accountId, List<Consumer<Account>> consumers)
specifier|public
name|Account
name|update
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|List
argument_list|<
name|Consumer
argument_list|<
name|Account
argument_list|>
argument_list|>
name|consumers
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Update in ReviewDb
name|Account
name|reviewDbAccount
init|=
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|atomicUpdate
argument_list|(
name|accountId
argument_list|,
name|a
lambda|->
block|{
name|consumers
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|c
operator|.
name|accept
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
argument_list|)
decl_stmt|;
comment|// Update in NoteDb
name|AccountConfig
name|accountConfig
init|=
name|read
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
name|Account
name|account
init|=
name|accountConfig
operator|.
name|getAccount
argument_list|()
decl_stmt|;
if|if
condition|(
name|account
operator|!=
literal|null
condition|)
block|{
name|consumers
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|c
operator|.
name|accept
argument_list|(
name|account
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|accountConfig
argument_list|)
expr_stmt|;
return|return
name|account
return|;
block|}
elseif|else
if|if
condition|(
name|reviewDbAccount
operator|!=
literal|null
condition|)
block|{
comment|// user branch doesn't exist yet
name|accountConfig
operator|.
name|setAccount
argument_list|(
name|reviewDbAccount
argument_list|)
expr_stmt|;
name|commitNew
argument_list|(
name|accountConfig
argument_list|)
expr_stmt|;
block|}
return|return
name|reviewDbAccount
return|;
block|}
comment|/**    * Replaces the account.    *    *<p>The existing account with the same account ID is overwritten by the given account. Choosing    * to overwrite an account means that any updates that were done to the account by a racing    * request after the account was read are lost. Updates are also lost if the account was read from    * a stale account index. This is why using {@link #update(ReviewDb,    * com.google.gerrit.reviewdb.client.Account.Id, Consumer)} to do an atomic update is always    * preferred.    *    *<p>Changing the registration date of an account is not supported.    *    * @param db ReviewDb    * @param account the new account    * @throws OrmException if updating the database fails    * @throws IOException if updating the user branch fails    * @throws ConfigInvalidException if any of the account fields has an invalid value    * @see #update(ReviewDb, com.google.gerrit.reviewdb.client.Account.Id, Consumer)    */
DECL|method|replace (ReviewDb db, Account account)
specifier|public
name|void
name|replace
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Account
name|account
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
comment|// Update in ReviewDb
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|update
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|account
argument_list|)
argument_list|)
expr_stmt|;
comment|// Update in NoteDb
name|AccountConfig
name|accountConfig
init|=
name|read
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|accountConfig
operator|.
name|setAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|accountConfig
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes the account.    *    * @param db ReviewDb    * @param account the account that should be deleted    * @throws OrmException if updating the database fails    * @throws IOException if updating the user branch fails    */
DECL|method|delete (ReviewDb db, Account account)
specifier|public
name|void
name|delete
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Account
name|account
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
comment|// Delete in ReviewDb
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|delete
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|account
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete in NoteDb
name|deleteUserBranch
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes the account.    *    * @param db ReviewDb    * @param accountId the ID of the account that should be deleted    * @throws OrmException if updating the database fails    * @throws IOException if updating the user branch fails    */
DECL|method|deleteByKey (ReviewDb db, Account.Id accountId)
specifier|public
name|void
name|deleteByKey
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
comment|// Delete in ReviewDb
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|deleteKeys
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete in NoteDb
name|deleteUserBranch
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteUserBranch (Account.Id accountId)
specifier|private
name|void
name|deleteUserBranch
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
name|deleteUserBranch
argument_list|(
name|repo
argument_list|,
name|allUsersName
argument_list|,
name|gitRefUpdated
argument_list|,
name|currentUser
argument_list|,
name|committerIdent
argument_list|,
name|accountId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteUserBranch ( Repository repo, Project.NameKey project, GitReferenceUpdated gitRefUpdated, @Nullable IdentifiedUser user, PersonIdent refLogIdent, Account.Id accountId)
specifier|public
specifier|static
name|void
name|deleteUserBranch
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|,
annotation|@
name|Nullable
name|IdentifiedUser
name|user
parameter_list|,
name|PersonIdent
name|refLogIdent
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|refName
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setRefLogIdent
argument_list|(
name|refLogIdent
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setRefLogMessage
argument_list|(
literal|"Delete Account"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ru
operator|.
name|delete
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|Result
operator|.
name|FORCED
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to delete ref %s: %s"
argument_list|,
name|refName
argument_list|,
name|result
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|gitRefUpdated
operator|.
name|fire
argument_list|(
name|project
argument_list|,
name|ru
argument_list|,
name|user
operator|!=
literal|null
condition|?
name|user
operator|.
name|getAccount
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|read (Account.Id accountId)
specifier|private
name|AccountConfig
name|read
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
name|AccountConfig
name|accountConfig
init|=
operator|new
name|AccountConfig
argument_list|(
name|emailValidator
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|accountConfig
operator|.
name|load
argument_list|(
name|repo
argument_list|)
expr_stmt|;
return|return
name|accountConfig
return|;
block|}
block|}
DECL|method|commitNew (AccountConfig accountConfig)
specifier|private
name|void
name|commitNew
parameter_list|(
name|AccountConfig
name|accountConfig
parameter_list|)
throws|throws
name|IOException
block|{
comment|// When creating a new account we must allow empty commits so that the user branch gets created
comment|// with an empty commit when no account properties are set and hence no 'account.config' file
comment|// will be created.
name|commit
argument_list|(
name|accountConfig
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|commit (AccountConfig accountConfig)
specifier|private
name|void
name|commit
parameter_list|(
name|AccountConfig
name|accountConfig
parameter_list|)
throws|throws
name|IOException
block|{
name|commit
argument_list|(
name|accountConfig
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|commit (AccountConfig accountConfig, boolean allowEmptyCommit)
specifier|private
name|void
name|commit
parameter_list|(
name|AccountConfig
name|accountConfig
parameter_list|,
name|boolean
name|allowEmptyCommit
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|MetaDataUpdate
name|md
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|()
init|)
block|{
name|md
operator|.
name|setAllowEmpty
argument_list|(
name|allowEmptyCommit
argument_list|)
expr_stmt|;
name|accountConfig
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|FunctionalInterface
DECL|interface|MetaDataUpdateFactory
specifier|private
specifier|static
interface|interface
name|MetaDataUpdateFactory
block|{
DECL|method|create ()
name|MetaDataUpdate
name|create
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
block|}
end_class

end_unit

