begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.plugins
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|PrivateInternals_DynamicMapImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|RegistrationHandle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|ReloadableRegistrationHandle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lifecycle
operator|.
name|LifecycleListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|internal
operator|.
name|UniqueAnnotations
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_comment
comment|/**  * Tracks Guice bindings that should be exposed to loaded plugins.  *<p>  * This is an internal implementation detail of how the main server is able to  * export its explicit Guice bindings to tightly coupled plugins, giving them  * access to singletons and request scoped resources just like any core code.  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|PluginGuiceEnvironment
specifier|public
class|class
name|PluginGuiceEnvironment
block|{
DECL|field|sysInjector
specifier|private
specifier|final
name|Injector
name|sysInjector
decl_stmt|;
DECL|field|copyConfigModule
specifier|private
specifier|final
name|CopyConfigModule
name|copyConfigModule
decl_stmt|;
DECL|field|onStart
specifier|private
specifier|final
name|List
argument_list|<
name|StartPluginListener
argument_list|>
name|onStart
decl_stmt|;
DECL|field|onReload
specifier|private
specifier|final
name|List
argument_list|<
name|ReloadPluginListener
argument_list|>
name|onReload
decl_stmt|;
DECL|field|sysModule
specifier|private
name|Module
name|sysModule
decl_stmt|;
DECL|field|sshModule
specifier|private
name|Module
name|sshModule
decl_stmt|;
DECL|field|httpModule
specifier|private
name|Module
name|httpModule
decl_stmt|;
DECL|field|sshGen
specifier|private
name|Provider
argument_list|<
name|ModuleGenerator
argument_list|>
name|sshGen
decl_stmt|;
DECL|field|httpGen
specifier|private
name|Provider
argument_list|<
name|ModuleGenerator
argument_list|>
name|httpGen
decl_stmt|;
DECL|field|sysSets
specifier|private
name|Map
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicSet
argument_list|<
name|?
argument_list|>
argument_list|>
name|sysSets
decl_stmt|;
DECL|field|sshSets
specifier|private
name|Map
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicSet
argument_list|<
name|?
argument_list|>
argument_list|>
name|sshSets
decl_stmt|;
DECL|field|httpSets
specifier|private
name|Map
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicSet
argument_list|<
name|?
argument_list|>
argument_list|>
name|httpSets
decl_stmt|;
DECL|field|sysMaps
specifier|private
name|Map
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicMap
argument_list|<
name|?
argument_list|>
argument_list|>
name|sysMaps
decl_stmt|;
DECL|field|sshMaps
specifier|private
name|Map
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicMap
argument_list|<
name|?
argument_list|>
argument_list|>
name|sshMaps
decl_stmt|;
DECL|field|httpMaps
specifier|private
name|Map
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicMap
argument_list|<
name|?
argument_list|>
argument_list|>
name|httpMaps
decl_stmt|;
annotation|@
name|Inject
DECL|method|PluginGuiceEnvironment (Injector sysInjector, CopyConfigModule ccm)
name|PluginGuiceEnvironment
parameter_list|(
name|Injector
name|sysInjector
parameter_list|,
name|CopyConfigModule
name|ccm
parameter_list|)
block|{
name|this
operator|.
name|sysInjector
operator|=
name|sysInjector
expr_stmt|;
name|this
operator|.
name|copyConfigModule
operator|=
name|ccm
expr_stmt|;
name|onStart
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|StartPluginListener
argument_list|>
argument_list|()
expr_stmt|;
name|onStart
operator|.
name|addAll
argument_list|(
name|listeners
argument_list|(
name|sysInjector
argument_list|,
name|StartPluginListener
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|onReload
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|ReloadPluginListener
argument_list|>
argument_list|()
expr_stmt|;
name|onReload
operator|.
name|addAll
argument_list|(
name|listeners
argument_list|(
name|sysInjector
argument_list|,
name|ReloadPluginListener
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|sysSets
operator|=
name|dynamicSetsOf
argument_list|(
name|sysInjector
argument_list|)
expr_stmt|;
name|sysMaps
operator|=
name|dynamicMapsOf
argument_list|(
name|sysInjector
argument_list|)
expr_stmt|;
block|}
DECL|method|hasDynamicSet (TypeLiteral<?> type)
name|boolean
name|hasDynamicSet
parameter_list|(
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|sysSets
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
operator|||
operator|(
name|sshSets
operator|!=
literal|null
operator|&&
name|sshSets
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
operator|)
operator|||
operator|(
name|httpSets
operator|!=
literal|null
operator|&&
name|httpSets
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
operator|)
return|;
block|}
DECL|method|hasDynamicMap (TypeLiteral<?> type)
name|boolean
name|hasDynamicMap
parameter_list|(
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|sysMaps
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
operator|||
operator|(
name|sshMaps
operator|!=
literal|null
operator|&&
name|sshMaps
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
operator|)
operator|||
operator|(
name|httpMaps
operator|!=
literal|null
operator|&&
name|httpMaps
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
operator|)
return|;
block|}
DECL|method|getSysModule ()
name|Module
name|getSysModule
parameter_list|()
block|{
return|return
name|sysModule
return|;
block|}
DECL|method|setCfgInjector (Injector cfgInjector)
specifier|public
name|void
name|setCfgInjector
parameter_list|(
name|Injector
name|cfgInjector
parameter_list|)
block|{
specifier|final
name|Module
name|cm
init|=
name|copy
argument_list|(
name|cfgInjector
argument_list|)
decl_stmt|;
specifier|final
name|Module
name|sm
init|=
name|copy
argument_list|(
name|sysInjector
argument_list|)
decl_stmt|;
name|sysModule
operator|=
operator|new
name|AbstractModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|install
argument_list|(
name|copyConfigModule
argument_list|)
expr_stmt|;
name|install
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|install
argument_list|(
name|sm
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
DECL|method|setSshInjector (Injector injector)
specifier|public
name|void
name|setSshInjector
parameter_list|(
name|Injector
name|injector
parameter_list|)
block|{
name|sshModule
operator|=
name|copy
argument_list|(
name|injector
argument_list|)
expr_stmt|;
name|sshGen
operator|=
name|injector
operator|.
name|getProvider
argument_list|(
name|ModuleGenerator
operator|.
name|class
argument_list|)
expr_stmt|;
name|sshSets
operator|=
name|dynamicSetsOf
argument_list|(
name|injector
argument_list|)
expr_stmt|;
name|sshMaps
operator|=
name|dynamicMapsOf
argument_list|(
name|injector
argument_list|)
expr_stmt|;
name|onStart
operator|.
name|addAll
argument_list|(
name|listeners
argument_list|(
name|injector
argument_list|,
name|StartPluginListener
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|onReload
operator|.
name|addAll
argument_list|(
name|listeners
argument_list|(
name|injector
argument_list|,
name|ReloadPluginListener
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|hasSshModule ()
name|boolean
name|hasSshModule
parameter_list|()
block|{
return|return
name|sshModule
operator|!=
literal|null
return|;
block|}
DECL|method|getSshModule ()
name|Module
name|getSshModule
parameter_list|()
block|{
return|return
name|sshModule
return|;
block|}
DECL|method|newSshModuleGenerator ()
name|ModuleGenerator
name|newSshModuleGenerator
parameter_list|()
block|{
return|return
name|sshGen
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|setHttpInjector (Injector injector)
specifier|public
name|void
name|setHttpInjector
parameter_list|(
name|Injector
name|injector
parameter_list|)
block|{
name|httpModule
operator|=
name|copy
argument_list|(
name|injector
argument_list|)
expr_stmt|;
name|httpGen
operator|=
name|injector
operator|.
name|getProvider
argument_list|(
name|ModuleGenerator
operator|.
name|class
argument_list|)
expr_stmt|;
name|httpSets
operator|=
name|dynamicSetsOf
argument_list|(
name|injector
argument_list|)
expr_stmt|;
name|httpMaps
operator|=
name|dynamicMapsOf
argument_list|(
name|injector
argument_list|)
expr_stmt|;
name|onStart
operator|.
name|addAll
argument_list|(
name|listeners
argument_list|(
name|injector
argument_list|,
name|StartPluginListener
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|onReload
operator|.
name|addAll
argument_list|(
name|listeners
argument_list|(
name|injector
argument_list|,
name|ReloadPluginListener
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|hasHttpModule ()
name|boolean
name|hasHttpModule
parameter_list|()
block|{
return|return
name|httpModule
operator|!=
literal|null
return|;
block|}
DECL|method|getHttpModule ()
name|Module
name|getHttpModule
parameter_list|()
block|{
return|return
name|httpModule
return|;
block|}
DECL|method|newHttpModuleGenerator ()
name|ModuleGenerator
name|newHttpModuleGenerator
parameter_list|()
block|{
return|return
name|httpGen
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|onStartPlugin (Plugin plugin)
name|void
name|onStartPlugin
parameter_list|(
name|Plugin
name|plugin
parameter_list|)
block|{
for|for
control|(
name|StartPluginListener
name|l
range|:
name|onStart
control|)
block|{
name|l
operator|.
name|onStartPlugin
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
block|}
name|attachSet
argument_list|(
name|sysSets
argument_list|,
name|plugin
operator|.
name|getSysInjector
argument_list|()
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
name|attachSet
argument_list|(
name|sshSets
argument_list|,
name|plugin
operator|.
name|getSshInjector
argument_list|()
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
name|attachSet
argument_list|(
name|httpSets
argument_list|,
name|plugin
operator|.
name|getHttpInjector
argument_list|()
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
name|attachMap
argument_list|(
name|sysMaps
argument_list|,
name|plugin
operator|.
name|getSysInjector
argument_list|()
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
name|attachMap
argument_list|(
name|sshMaps
argument_list|,
name|plugin
operator|.
name|getSshInjector
argument_list|()
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
name|attachMap
argument_list|(
name|httpMaps
argument_list|,
name|plugin
operator|.
name|getHttpInjector
argument_list|()
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
block|}
DECL|method|attachSet (Map<TypeLiteral<?>, DynamicSet<?>> sets, @Nullable Injector src, Plugin plugin)
specifier|private
name|void
name|attachSet
parameter_list|(
name|Map
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicSet
argument_list|<
name|?
argument_list|>
argument_list|>
name|sets
parameter_list|,
annotation|@
name|Nullable
name|Injector
name|src
parameter_list|,
name|Plugin
name|plugin
parameter_list|)
block|{
if|if
condition|(
name|src
operator|!=
literal|null
operator|&&
name|sets
operator|!=
literal|null
operator|&&
operator|!
name|sets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicSet
argument_list|<
name|?
argument_list|>
argument_list|>
name|e
range|:
name|sets
operator|.
name|entrySet
argument_list|()
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|TypeLiteral
argument_list|<
name|Object
argument_list|>
name|type
init|=
operator|(
name|TypeLiteral
argument_list|<
name|Object
argument_list|>
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|DynamicSet
argument_list|<
name|Object
argument_list|>
name|set
init|=
operator|(
name|DynamicSet
argument_list|<
name|Object
argument_list|>
operator|)
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Binding
argument_list|<
name|Object
argument_list|>
name|b
range|:
name|bindings
argument_list|(
name|src
argument_list|,
name|type
argument_list|)
control|)
block|{
name|plugin
operator|.
name|add
argument_list|(
name|set
operator|.
name|add
argument_list|(
name|b
operator|.
name|getKey
argument_list|()
argument_list|,
name|b
operator|.
name|getProvider
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|attachMap (Map<TypeLiteral<?>, DynamicMap<?>> maps, @Nullable Injector src, Plugin plugin)
specifier|private
name|void
name|attachMap
parameter_list|(
name|Map
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicMap
argument_list|<
name|?
argument_list|>
argument_list|>
name|maps
parameter_list|,
annotation|@
name|Nullable
name|Injector
name|src
parameter_list|,
name|Plugin
name|plugin
parameter_list|)
block|{
if|if
condition|(
name|src
operator|!=
literal|null
operator|&&
name|maps
operator|!=
literal|null
operator|&&
operator|!
name|maps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicMap
argument_list|<
name|?
argument_list|>
argument_list|>
name|e
range|:
name|maps
operator|.
name|entrySet
argument_list|()
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|TypeLiteral
argument_list|<
name|Object
argument_list|>
name|type
init|=
operator|(
name|TypeLiteral
argument_list|<
name|Object
argument_list|>
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|PrivateInternals_DynamicMapImpl
argument_list|<
name|Object
argument_list|>
name|set
init|=
operator|(
name|PrivateInternals_DynamicMapImpl
argument_list|<
name|Object
argument_list|>
operator|)
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Binding
argument_list|<
name|Object
argument_list|>
name|b
range|:
name|bindings
argument_list|(
name|src
argument_list|,
name|type
argument_list|)
control|)
block|{
name|plugin
operator|.
name|add
argument_list|(
name|set
operator|.
name|put
argument_list|(
name|plugin
operator|.
name|getName
argument_list|()
argument_list|,
name|b
operator|.
name|getKey
argument_list|()
argument_list|,
name|b
operator|.
name|getProvider
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|onReloadPlugin (Plugin oldPlugin, Plugin newPlugin)
name|void
name|onReloadPlugin
parameter_list|(
name|Plugin
name|oldPlugin
parameter_list|,
name|Plugin
name|newPlugin
parameter_list|)
block|{
for|for
control|(
name|ReloadPluginListener
name|l
range|:
name|onReload
control|)
block|{
name|l
operator|.
name|onReloadPlugin
argument_list|(
name|oldPlugin
argument_list|,
name|newPlugin
argument_list|)
expr_stmt|;
block|}
comment|// Index all old registrations by the raw type. These may be replaced
comment|// during the reattach calls below. Any that are not replaced will be
comment|// removed when the old plugin does its stop routine.
name|ListMultimap
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|ReloadableRegistrationHandle
argument_list|<
name|?
argument_list|>
argument_list|>
name|old
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|ReloadableRegistrationHandle
argument_list|<
name|?
argument_list|>
name|h
range|:
name|oldPlugin
operator|.
name|getReloadableHandles
argument_list|()
control|)
block|{
name|old
operator|.
name|put
argument_list|(
name|h
operator|.
name|getKey
argument_list|()
operator|.
name|getTypeLiteral
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
name|reattachMap
argument_list|(
name|old
argument_list|,
name|sysMaps
argument_list|,
name|newPlugin
operator|.
name|getSysInjector
argument_list|()
argument_list|,
name|newPlugin
argument_list|)
expr_stmt|;
name|reattachMap
argument_list|(
name|old
argument_list|,
name|sshMaps
argument_list|,
name|newPlugin
operator|.
name|getSshInjector
argument_list|()
argument_list|,
name|newPlugin
argument_list|)
expr_stmt|;
name|reattachMap
argument_list|(
name|old
argument_list|,
name|httpMaps
argument_list|,
name|newPlugin
operator|.
name|getHttpInjector
argument_list|()
argument_list|,
name|newPlugin
argument_list|)
expr_stmt|;
name|reattachSet
argument_list|(
name|old
argument_list|,
name|sysSets
argument_list|,
name|newPlugin
operator|.
name|getSysInjector
argument_list|()
argument_list|,
name|newPlugin
argument_list|)
expr_stmt|;
name|reattachSet
argument_list|(
name|old
argument_list|,
name|sshSets
argument_list|,
name|newPlugin
operator|.
name|getSshInjector
argument_list|()
argument_list|,
name|newPlugin
argument_list|)
expr_stmt|;
name|reattachSet
argument_list|(
name|old
argument_list|,
name|httpSets
argument_list|,
name|newPlugin
operator|.
name|getHttpInjector
argument_list|()
argument_list|,
name|newPlugin
argument_list|)
expr_stmt|;
block|}
DECL|method|reattachMap ( ListMultimap<TypeLiteral<?>, ReloadableRegistrationHandle<?>> oldHandles, Map<TypeLiteral<?>, DynamicMap<?>> maps, @Nullable Injector src, Plugin newPlugin)
specifier|private
name|void
name|reattachMap
parameter_list|(
name|ListMultimap
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|ReloadableRegistrationHandle
argument_list|<
name|?
argument_list|>
argument_list|>
name|oldHandles
parameter_list|,
name|Map
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicMap
argument_list|<
name|?
argument_list|>
argument_list|>
name|maps
parameter_list|,
annotation|@
name|Nullable
name|Injector
name|src
parameter_list|,
name|Plugin
name|newPlugin
parameter_list|)
block|{
if|if
condition|(
name|src
operator|==
literal|null
operator|||
name|maps
operator|==
literal|null
operator|||
name|maps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicMap
argument_list|<
name|?
argument_list|>
argument_list|>
name|e
range|:
name|maps
operator|.
name|entrySet
argument_list|()
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|TypeLiteral
argument_list|<
name|Object
argument_list|>
name|type
init|=
operator|(
name|TypeLiteral
argument_list|<
name|Object
argument_list|>
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|PrivateInternals_DynamicMapImpl
argument_list|<
name|Object
argument_list|>
name|map
init|=
operator|(
name|PrivateInternals_DynamicMapImpl
argument_list|<
name|Object
argument_list|>
operator|)
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Annotation
argument_list|,
name|ReloadableRegistrationHandle
argument_list|<
name|?
argument_list|>
argument_list|>
name|am
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|ReloadableRegistrationHandle
argument_list|<
name|?
argument_list|>
name|h
range|:
name|oldHandles
operator|.
name|get
argument_list|(
name|type
argument_list|)
control|)
block|{
name|Annotation
name|a
init|=
name|h
operator|.
name|getKey
argument_list|()
operator|.
name|getAnnotation
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|UNIQUE_ANNOTATION
operator|.
name|isInstance
argument_list|(
name|a
argument_list|)
condition|)
block|{
name|am
operator|.
name|put
argument_list|(
name|a
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Binding
argument_list|<
name|?
argument_list|>
name|binding
range|:
name|bindings
argument_list|(
name|src
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Binding
argument_list|<
name|Object
argument_list|>
name|b
init|=
operator|(
name|Binding
argument_list|<
name|Object
argument_list|>
operator|)
name|binding
decl_stmt|;
name|Key
argument_list|<
name|Object
argument_list|>
name|key
init|=
name|b
operator|.
name|getKey
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ReloadableRegistrationHandle
argument_list|<
name|Object
argument_list|>
name|h
init|=
operator|(
name|ReloadableRegistrationHandle
argument_list|<
name|Object
argument_list|>
operator|)
name|am
operator|.
name|remove
argument_list|(
name|key
operator|.
name|getAnnotation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
block|{
name|replace
argument_list|(
name|newPlugin
argument_list|,
name|h
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|oldHandles
operator|.
name|remove
argument_list|(
name|type
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newPlugin
operator|.
name|add
argument_list|(
name|map
operator|.
name|put
argument_list|(
name|newPlugin
operator|.
name|getName
argument_list|()
argument_list|,
name|b
operator|.
name|getKey
argument_list|()
argument_list|,
name|b
operator|.
name|getProvider
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** Type used to declare unique annotations. Guice hides this, so extract it. */
DECL|field|UNIQUE_ANNOTATION
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|UNIQUE_ANNOTATION
init|=
name|UniqueAnnotations
operator|.
name|create
argument_list|()
operator|.
name|getClass
argument_list|()
decl_stmt|;
DECL|method|reattachSet ( ListMultimap<TypeLiteral<?>, ReloadableRegistrationHandle<?>> oldHandles, Map<TypeLiteral<?>, DynamicSet<?>> sets, @Nullable Injector src, Plugin newPlugin)
specifier|private
name|void
name|reattachSet
parameter_list|(
name|ListMultimap
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|ReloadableRegistrationHandle
argument_list|<
name|?
argument_list|>
argument_list|>
name|oldHandles
parameter_list|,
name|Map
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicSet
argument_list|<
name|?
argument_list|>
argument_list|>
name|sets
parameter_list|,
annotation|@
name|Nullable
name|Injector
name|src
parameter_list|,
name|Plugin
name|newPlugin
parameter_list|)
block|{
if|if
condition|(
name|src
operator|==
literal|null
operator|||
name|sets
operator|==
literal|null
operator|||
name|sets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicSet
argument_list|<
name|?
argument_list|>
argument_list|>
name|e
range|:
name|sets
operator|.
name|entrySet
argument_list|()
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|TypeLiteral
argument_list|<
name|Object
argument_list|>
name|type
init|=
operator|(
name|TypeLiteral
argument_list|<
name|Object
argument_list|>
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|DynamicSet
argument_list|<
name|Object
argument_list|>
name|set
init|=
operator|(
name|DynamicSet
argument_list|<
name|Object
argument_list|>
operator|)
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Index all old handles that match this DynamicSet<T> keyed by
comment|// annotations. Ignore the unique annotations, thereby favoring
comment|// the @Named annotations or some other non-unique naming.
name|Map
argument_list|<
name|Annotation
argument_list|,
name|ReloadableRegistrationHandle
argument_list|<
name|?
argument_list|>
argument_list|>
name|am
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReloadableRegistrationHandle
argument_list|<
name|?
argument_list|>
argument_list|>
name|old
init|=
name|oldHandles
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|ReloadableRegistrationHandle
argument_list|<
name|?
argument_list|>
argument_list|>
name|oi
init|=
name|old
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|oi
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ReloadableRegistrationHandle
argument_list|<
name|?
argument_list|>
name|h
init|=
name|oi
operator|.
name|next
argument_list|()
decl_stmt|;
name|Annotation
name|a
init|=
name|h
operator|.
name|getKey
argument_list|()
operator|.
name|getAnnotation
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|UNIQUE_ANNOTATION
operator|.
name|isInstance
argument_list|(
name|a
argument_list|)
condition|)
block|{
name|am
operator|.
name|put
argument_list|(
name|a
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|oi
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Replace old handles with new bindings, favoring cases where there
comment|// is an exact match on an @Named annotation. If there is no match
comment|// pick any handle and replace it. We generally expect only one
comment|// handle of each DynamicSet type when using unique annotations, but
comment|// possibly multiple ones if @Named was used. Plugin authors that want
comment|// atomic replacement across reloads should use @Named annotations with
comment|// stable names that do not change across plugin versions to ensure the
comment|// handles are swapped correctly.
name|oi
operator|=
name|old
operator|.
name|iterator
argument_list|()
expr_stmt|;
for|for
control|(
name|Binding
argument_list|<
name|?
argument_list|>
name|binding
range|:
name|bindings
argument_list|(
name|src
argument_list|,
name|type
argument_list|)
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Binding
argument_list|<
name|Object
argument_list|>
name|b
init|=
operator|(
name|Binding
argument_list|<
name|Object
argument_list|>
operator|)
name|binding
decl_stmt|;
name|Key
argument_list|<
name|Object
argument_list|>
name|key
init|=
name|b
operator|.
name|getKey
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ReloadableRegistrationHandle
argument_list|<
name|Object
argument_list|>
name|h1
init|=
operator|(
name|ReloadableRegistrationHandle
argument_list|<
name|Object
argument_list|>
operator|)
name|am
operator|.
name|remove
argument_list|(
name|key
operator|.
name|getAnnotation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|h1
operator|!=
literal|null
condition|)
block|{
name|replace
argument_list|(
name|newPlugin
argument_list|,
name|h1
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|.
name|hasNext
argument_list|()
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ReloadableRegistrationHandle
argument_list|<
name|Object
argument_list|>
name|h2
init|=
operator|(
name|ReloadableRegistrationHandle
argument_list|<
name|Object
argument_list|>
operator|)
name|oi
operator|.
name|next
argument_list|()
decl_stmt|;
name|oi
operator|.
name|remove
argument_list|()
expr_stmt|;
name|replace
argument_list|(
name|newPlugin
argument_list|,
name|h2
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newPlugin
operator|.
name|add
argument_list|(
name|set
operator|.
name|add
argument_list|(
name|b
operator|.
name|getKey
argument_list|()
argument_list|,
name|b
operator|.
name|getProvider
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|replace (Plugin newPlugin, ReloadableRegistrationHandle<T> h, Binding<T> b)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|replace
parameter_list|(
name|Plugin
name|newPlugin
parameter_list|,
name|ReloadableRegistrationHandle
argument_list|<
name|T
argument_list|>
name|h
parameter_list|,
name|Binding
argument_list|<
name|T
argument_list|>
name|b
parameter_list|)
block|{
name|RegistrationHandle
name|n
init|=
name|h
operator|.
name|replace
argument_list|(
name|b
operator|.
name|getKey
argument_list|()
argument_list|,
name|b
operator|.
name|getProvider
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
name|newPlugin
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|listeners (Injector src, Class<T> type)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|listeners
parameter_list|(
name|Injector
name|src
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|Binding
argument_list|<
name|T
argument_list|>
argument_list|>
name|bindings
init|=
name|bindings
argument_list|(
name|src
argument_list|,
name|TypeLiteral
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|cnt
init|=
name|bindings
operator|!=
literal|null
condition|?
name|bindings
operator|.
name|size
argument_list|()
else|:
literal|0
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|found
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|cnt
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Binding
argument_list|<
name|T
argument_list|>
name|b
range|:
name|bindings
control|)
block|{
name|found
operator|.
name|add
argument_list|(
name|b
operator|.
name|getProvider
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|found
return|;
block|}
DECL|method|bindings (Injector src, TypeLiteral<T> type)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Binding
argument_list|<
name|T
argument_list|>
argument_list|>
name|bindings
parameter_list|(
name|Injector
name|src
parameter_list|,
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|src
operator|.
name|findBindingsByType
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|dynamicSetsOf (Injector src)
specifier|private
specifier|static
name|Map
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicSet
argument_list|<
name|?
argument_list|>
argument_list|>
name|dynamicSetsOf
parameter_list|(
name|Injector
name|src
parameter_list|)
block|{
name|Map
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicSet
argument_list|<
name|?
argument_list|>
argument_list|>
name|m
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|<
name|?
argument_list|>
argument_list|,
name|Binding
argument_list|<
name|?
argument_list|>
argument_list|>
name|e
range|:
name|src
operator|.
name|getBindings
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|type
init|=
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getTypeLiteral
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getRawType
argument_list|()
operator|==
name|DynamicSet
operator|.
name|class
condition|)
block|{
name|ParameterizedType
name|p
init|=
operator|(
name|ParameterizedType
operator|)
name|type
operator|.
name|getType
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|TypeLiteral
operator|.
name|get
argument_list|(
name|p
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|(
name|DynamicSet
argument_list|<
name|?
argument_list|>
operator|)
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getProvider
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|m
return|;
block|}
DECL|method|dynamicMapsOf (Injector src)
specifier|private
specifier|static
name|Map
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicMap
argument_list|<
name|?
argument_list|>
argument_list|>
name|dynamicMapsOf
parameter_list|(
name|Injector
name|src
parameter_list|)
block|{
name|Map
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|DynamicMap
argument_list|<
name|?
argument_list|>
argument_list|>
name|m
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|<
name|?
argument_list|>
argument_list|,
name|Binding
argument_list|<
name|?
argument_list|>
argument_list|>
name|e
range|:
name|src
operator|.
name|getBindings
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|type
init|=
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getTypeLiteral
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getRawType
argument_list|()
operator|==
name|DynamicMap
operator|.
name|class
condition|)
block|{
name|ParameterizedType
name|p
init|=
operator|(
name|ParameterizedType
operator|)
name|type
operator|.
name|getType
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|TypeLiteral
operator|.
name|get
argument_list|(
name|p
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|(
name|DynamicMap
argument_list|<
name|?
argument_list|>
operator|)
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getProvider
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|m
return|;
block|}
DECL|method|copy (Injector src)
specifier|private
specifier|static
name|Module
name|copy
parameter_list|(
name|Injector
name|src
parameter_list|)
block|{
name|Set
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|>
name|dynamicTypes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|<
name|?
argument_list|>
argument_list|,
name|Binding
argument_list|<
name|?
argument_list|>
argument_list|>
name|e
range|:
name|src
operator|.
name|getBindings
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|type
init|=
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getTypeLiteral
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getRawType
argument_list|()
operator|==
name|DynamicSet
operator|.
name|class
operator|||
name|type
operator|.
name|getRawType
argument_list|()
operator|==
name|DynamicMap
operator|.
name|class
condition|)
block|{
name|ParameterizedType
name|t
init|=
operator|(
name|ParameterizedType
operator|)
name|type
operator|.
name|getType
argument_list|()
decl_stmt|;
name|dynamicTypes
operator|.
name|add
argument_list|(
name|TypeLiteral
operator|.
name|get
argument_list|(
name|t
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Map
argument_list|<
name|Key
argument_list|<
name|?
argument_list|>
argument_list|,
name|Binding
argument_list|<
name|?
argument_list|>
argument_list|>
name|bindings
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|<
name|?
argument_list|>
argument_list|,
name|Binding
argument_list|<
name|?
argument_list|>
argument_list|>
name|e
range|:
name|src
operator|.
name|getBindings
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|dynamicTypes
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getTypeLiteral
argument_list|()
argument_list|)
operator|&&
name|shouldCopy
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|bindings
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|bindings
operator|.
name|remove
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|Injector
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|remove
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|AbstractModule
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|<
name|?
argument_list|>
argument_list|,
name|Binding
argument_list|<
name|?
argument_list|>
argument_list|>
name|e
range|:
name|bindings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Key
argument_list|<
name|Object
argument_list|>
name|k
init|=
operator|(
name|Key
argument_list|<
name|Object
argument_list|>
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Binding
argument_list|<
name|Object
argument_list|>
name|b
init|=
operator|(
name|Binding
argument_list|<
name|Object
argument_list|>
operator|)
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|bind
argument_list|(
name|k
argument_list|)
operator|.
name|toProvider
argument_list|(
name|b
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|shouldCopy (Key<?> key)
specifier|private
specifier|static
name|boolean
name|shouldCopy
parameter_list|(
name|Key
argument_list|<
name|?
argument_list|>
name|key
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|key
operator|.
name|getTypeLiteral
argument_list|()
operator|.
name|getRawType
argument_list|()
decl_stmt|;
if|if
condition|(
name|LifecycleListener
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|StartPluginListener
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|type
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"com.google.inject."
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|is
argument_list|(
literal|"org.apache.sshd.server.Command"
argument_list|,
name|type
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|is
argument_list|(
literal|"javax.servlet.Filter"
argument_list|,
name|type
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|is
argument_list|(
literal|"javax.servlet.ServletContext"
argument_list|,
name|type
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|is
argument_list|(
literal|"javax.servlet.ServletRequest"
argument_list|,
name|type
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|is
argument_list|(
literal|"javax.servlet.ServletResponse"
argument_list|,
name|type
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|is
argument_list|(
literal|"javax.servlet.http.HttpServlet"
argument_list|,
name|type
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|is
argument_list|(
literal|"javax.servlet.http.HttpServletRequest"
argument_list|,
name|type
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|is
argument_list|(
literal|"javax.servlet.http.HttpServletResponse"
argument_list|,
name|type
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|is
argument_list|(
literal|"javax.servlet.http.HttpSession"
argument_list|,
name|type
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|Map
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|&&
name|key
operator|.
name|getAnnotationType
argument_list|()
operator|!=
literal|null
operator|&&
literal|"com.google.inject.servlet.RequestParameters"
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getAnnotationType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|type
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"com.google.gerrit.httpd.GitOverHttpServlet$"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|is (String name, Class<?> type)
specifier|static
name|boolean
name|is
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
while|while
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|interfaces
init|=
name|type
operator|.
name|getInterfaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|interfaces
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|i
range|:
name|interfaces
control|)
block|{
if|if
condition|(
name|is
argument_list|(
name|name
argument_list|,
name|i
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
name|type
operator|=
name|type
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

