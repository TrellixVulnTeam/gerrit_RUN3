begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account.externalids
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** Caches external IDs of all accounts. The external IDs are always loaded from NoteDb. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|ExternalIdCacheImpl
class|class
name|ExternalIdCacheImpl
implements|implements
name|ExternalIdCache
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExternalIdCacheImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CACHE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_NAME
init|=
literal|"external_ids_map"
decl_stmt|;
specifier|private
specifier|final
name|LoadingCache
argument_list|<
name|ObjectId
argument_list|,
name|ImmutableSetMultimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ExternalId
argument_list|>
argument_list|>
DECL|field|extIdsByAccount
name|extIdsByAccount
decl_stmt|;
DECL|field|externalIdReader
specifier|private
specifier|final
name|ExternalIdReader
name|externalIdReader
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Lock
name|lock
decl_stmt|;
annotation|@
name|Inject
DECL|method|ExternalIdCacheImpl ( @amedCACHE_NAME) LoadingCache<ObjectId, ImmutableSetMultimap<Account.Id, ExternalId>> extIdsByAccount, ExternalIdReader externalIdReader)
name|ExternalIdCacheImpl
parameter_list|(
annotation|@
name|Named
argument_list|(
name|CACHE_NAME
argument_list|)
name|LoadingCache
argument_list|<
name|ObjectId
argument_list|,
name|ImmutableSetMultimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ExternalId
argument_list|>
argument_list|>
name|extIdsByAccount
parameter_list|,
name|ExternalIdReader
name|externalIdReader
parameter_list|)
block|{
name|this
operator|.
name|extIdsByAccount
operator|=
name|extIdsByAccount
expr_stmt|;
name|this
operator|.
name|externalIdReader
operator|=
name|externalIdReader
expr_stmt|;
name|this
operator|.
name|lock
operator|=
operator|new
name|ReentrantLock
argument_list|(
literal|true
comment|/* fair */
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCreate (ObjectId newNotesRev, Iterable<ExternalId> extIds)
specifier|public
name|void
name|onCreate
parameter_list|(
name|ObjectId
name|newNotesRev
parameter_list|,
name|Iterable
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
throws|throws
name|IOException
block|{
name|updateCache
argument_list|(
name|newNotesRev
argument_list|,
name|m
lambda|->
block|{
for|for
control|(
name|ExternalId
name|extId
range|:
name|extIds
control|)
block|{
name|m
operator|.
name|put
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onRemove (ObjectId newNotesRev, Iterable<ExternalId> extIds)
specifier|public
name|void
name|onRemove
parameter_list|(
name|ObjectId
name|newNotesRev
parameter_list|,
name|Iterable
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
throws|throws
name|IOException
block|{
name|updateCache
argument_list|(
name|newNotesRev
argument_list|,
name|m
lambda|->
block|{
for|for
control|(
name|ExternalId
name|extId
range|:
name|extIds
control|)
block|{
name|m
operator|.
name|remove
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onRemoveByKeys ( ObjectId newNotesRev, Account.Id accountId, Iterable<ExternalId.Key> extIdKeys)
specifier|public
name|void
name|onRemoveByKeys
parameter_list|(
name|ObjectId
name|newNotesRev
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Iterable
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|extIdKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|updateCache
argument_list|(
name|newNotesRev
argument_list|,
name|m
lambda|->
block|{
for|for
control|(
name|ExternalId
name|extId
range|:
name|m
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
control|)
block|{
for|for
control|(
name|ExternalId
operator|.
name|Key
name|extIdKey
range|:
name|extIdKeys
control|)
block|{
if|if
condition|(
name|extIdKey
operator|.
name|equals
argument_list|(
name|extId
operator|.
name|key
argument_list|()
argument_list|)
condition|)
block|{
name|m
operator|.
name|remove
argument_list|(
name|accountId
argument_list|,
name|extId
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onRemoveByKeys (ObjectId newNotesRev, Iterable<ExternalId.Key> extIdKeys)
specifier|public
name|void
name|onRemoveByKeys
parameter_list|(
name|ObjectId
name|newNotesRev
parameter_list|,
name|Iterable
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|extIdKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|updateCache
argument_list|(
name|newNotesRev
argument_list|,
name|m
lambda|->
block|{
for|for
control|(
name|ExternalId
name|extId
range|:
name|m
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|ExternalId
operator|.
name|Key
name|extIdKey
range|:
name|extIdKeys
control|)
block|{
if|if
condition|(
name|extIdKey
operator|.
name|equals
argument_list|(
name|extId
operator|.
name|key
argument_list|()
argument_list|)
condition|)
block|{
name|m
operator|.
name|remove
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|,
name|extId
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onUpdate (ObjectId newNotesRev, Iterable<ExternalId> updatedExtIds)
specifier|public
name|void
name|onUpdate
parameter_list|(
name|ObjectId
name|newNotesRev
parameter_list|,
name|Iterable
argument_list|<
name|ExternalId
argument_list|>
name|updatedExtIds
parameter_list|)
throws|throws
name|IOException
block|{
name|updateCache
argument_list|(
name|newNotesRev
argument_list|,
name|m
lambda|->
block|{
for|for
control|(
name|ExternalId
name|updatedExtId
range|:
name|updatedExtIds
control|)
block|{
for|for
control|(
name|ExternalId
name|extId
range|:
name|m
operator|.
name|get
argument_list|(
name|updatedExtId
operator|.
name|accountId
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|updatedExtId
operator|.
name|key
argument_list|()
operator|.
name|equals
argument_list|(
name|extId
operator|.
name|key
argument_list|()
argument_list|)
condition|)
block|{
name|m
operator|.
name|remove
argument_list|(
name|updatedExtId
operator|.
name|accountId
argument_list|()
argument_list|,
name|extId
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|m
operator|.
name|put
argument_list|(
name|updatedExtId
operator|.
name|accountId
argument_list|()
argument_list|,
name|updatedExtId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onReplace ( ObjectId newNotesRev, Account.Id accountId, Iterable<ExternalId> toRemove, Iterable<ExternalId> toAdd)
specifier|public
name|void
name|onReplace
parameter_list|(
name|ObjectId
name|newNotesRev
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Iterable
argument_list|<
name|ExternalId
argument_list|>
name|toRemove
parameter_list|,
name|Iterable
argument_list|<
name|ExternalId
argument_list|>
name|toAdd
parameter_list|)
throws|throws
name|IOException
block|{
name|ExternalIdsUpdate
operator|.
name|checkSameAccount
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|toRemove
argument_list|,
name|toAdd
argument_list|)
argument_list|,
name|accountId
argument_list|)
expr_stmt|;
name|updateCache
argument_list|(
name|newNotesRev
argument_list|,
name|m
lambda|->
block|{
for|for
control|(
name|ExternalId
name|extId
range|:
name|toRemove
control|)
block|{
name|m
operator|.
name|remove
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExternalId
name|extId
range|:
name|toAdd
control|)
block|{
name|m
operator|.
name|put
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onReplaceByKeys ( ObjectId newNotesRev, Account.Id accountId, Iterable<ExternalId.Key> toRemove, Iterable<ExternalId> toAdd)
specifier|public
name|void
name|onReplaceByKeys
parameter_list|(
name|ObjectId
name|newNotesRev
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Iterable
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|toRemove
parameter_list|,
name|Iterable
argument_list|<
name|ExternalId
argument_list|>
name|toAdd
parameter_list|)
throws|throws
name|IOException
block|{
name|ExternalIdsUpdate
operator|.
name|checkSameAccount
argument_list|(
name|toAdd
argument_list|,
name|accountId
argument_list|)
expr_stmt|;
name|updateCache
argument_list|(
name|newNotesRev
argument_list|,
name|m
lambda|->
block|{
for|for
control|(
name|ExternalId
name|extId
range|:
name|m
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
control|)
block|{
for|for
control|(
name|ExternalId
operator|.
name|Key
name|extIdKey
range|:
name|toRemove
control|)
block|{
if|if
condition|(
name|extIdKey
operator|.
name|equals
argument_list|(
name|extId
operator|.
name|key
argument_list|()
argument_list|)
condition|)
block|{
name|m
operator|.
name|remove
argument_list|(
name|accountId
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|ExternalId
name|extId
range|:
name|toAdd
control|)
block|{
name|m
operator|.
name|put
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onReplaceByKeys ( ObjectId newNotesRev, Iterable<ExternalId.Key> toRemove, Iterable<ExternalId> toAdd)
specifier|public
name|void
name|onReplaceByKeys
parameter_list|(
name|ObjectId
name|newNotesRev
parameter_list|,
name|Iterable
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|toRemove
parameter_list|,
name|Iterable
argument_list|<
name|ExternalId
argument_list|>
name|toAdd
parameter_list|)
throws|throws
name|IOException
block|{
name|updateCache
argument_list|(
name|newNotesRev
argument_list|,
name|m
lambda|->
block|{
for|for
control|(
name|ExternalId
name|extId
range|:
name|m
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|ExternalId
operator|.
name|Key
name|extIdKey
range|:
name|toRemove
control|)
block|{
if|if
condition|(
name|extIdKey
operator|.
name|equals
argument_list|(
name|extId
operator|.
name|key
argument_list|()
argument_list|)
condition|)
block|{
name|m
operator|.
name|remove
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|ExternalId
name|extId
range|:
name|toAdd
control|)
block|{
name|m
operator|.
name|put
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onReplace ( ObjectId newNotesRev, Iterable<ExternalId> toRemove, Iterable<ExternalId> toAdd)
specifier|public
name|void
name|onReplace
parameter_list|(
name|ObjectId
name|newNotesRev
parameter_list|,
name|Iterable
argument_list|<
name|ExternalId
argument_list|>
name|toRemove
parameter_list|,
name|Iterable
argument_list|<
name|ExternalId
argument_list|>
name|toAdd
parameter_list|)
throws|throws
name|IOException
block|{
name|updateCache
argument_list|(
name|newNotesRev
argument_list|,
name|m
lambda|->
block|{
for|for
control|(
name|ExternalId
name|extId
range|:
name|toRemove
control|)
block|{
name|m
operator|.
name|remove
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExternalId
name|extId
range|:
name|toAdd
control|)
block|{
name|m
operator|.
name|put
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|byAccount (Account.Id accountId)
specifier|public
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|byAccount
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|extIdsByAccount
operator|.
name|get
argument_list|(
name|externalIdReader
operator|.
name|readRevision
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot list external ids by account"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|byEmail (String email)
specifier|public
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|byEmail
parameter_list|(
name|String
name|email
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|extIdsByAccount
operator|.
name|get
argument_list|(
name|externalIdReader
operator|.
name|readRevision
argument_list|()
argument_list|)
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|email
operator|.
name|equals
argument_list|(
name|e
operator|.
name|email
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot list external ids by email"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
block|}
DECL|method|updateCache (ObjectId newNotesRev, Consumer<Multimap<Account.Id, ExternalId>> update)
specifier|private
name|void
name|updateCache
parameter_list|(
name|ObjectId
name|newNotesRev
parameter_list|,
name|Consumer
argument_list|<
name|Multimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ExternalId
argument_list|>
argument_list|>
name|update
parameter_list|)
throws|throws
name|IOException
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ListMultimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ExternalId
argument_list|>
name|m
init|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|(
name|extIdsByAccount
operator|.
name|get
argument_list|(
name|externalIdReader
operator|.
name|readRevision
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|update
operator|.
name|accept
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|extIdsByAccount
operator|.
name|put
argument_list|(
name|newNotesRev
argument_list|,
name|ImmutableSetMultimap
operator|.
name|copyOf
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot update external IDs"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|Loader
specifier|static
class|class
name|Loader
extends|extends
name|CacheLoader
argument_list|<
name|ObjectId
argument_list|,
name|ImmutableSetMultimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ExternalId
argument_list|>
argument_list|>
block|{
DECL|field|externalIdReader
specifier|private
specifier|final
name|ExternalIdReader
name|externalIdReader
decl_stmt|;
annotation|@
name|Inject
DECL|method|Loader (ExternalIdReader externalIdReader)
name|Loader
parameter_list|(
name|ExternalIdReader
name|externalIdReader
parameter_list|)
block|{
name|this
operator|.
name|externalIdReader
operator|=
name|externalIdReader
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load (ObjectId notesRev)
specifier|public
name|ImmutableSetMultimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ExternalId
argument_list|>
name|load
parameter_list|(
name|ObjectId
name|notesRev
parameter_list|)
throws|throws
name|Exception
block|{
name|Multimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ExternalId
argument_list|>
name|extIdsByAccount
init|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|ExternalId
name|extId
range|:
name|externalIdReader
operator|.
name|all
argument_list|(
name|notesRev
argument_list|)
control|)
block|{
name|extIdsByAccount
operator|.
name|put
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
return|return
name|ImmutableSetMultimap
operator|.
name|copyOf
argument_list|(
name|extIdsByAccount
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

