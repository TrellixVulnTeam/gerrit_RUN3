begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitTypeRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|Submit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MergeOpRepoManager
operator|.
name|OpenRepo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|ChangePermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|SubmitRuleEvaluator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Calculates the minimal superset of changes required to be merged.  *  *<p>This includes all parents between a change and the tip of its target branch for the  * merging/rebasing submit strategies. For the cherry-pick strategy no additional changes are  * included.  *  *<p>If change.submitWholeTopic is enabled, also all changes of the topic and their parents are  * included.  */
end_comment

begin_class
DECL|class|MergeSuperSet
specifier|public
class|class
name|MergeSuperSet
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MergeSuperSet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|reloadChanges (ChangeSet cs)
specifier|public
specifier|static
name|void
name|reloadChanges
parameter_list|(
name|ChangeSet
name|cs
parameter_list|)
throws|throws
name|OrmException
block|{
comment|// Clear exactly the fields requested by query() below.
for|for
control|(
name|ChangeData
name|cd
range|:
name|cs
operator|.
name|changes
argument_list|()
control|)
block|{
name|cd
operator|.
name|reloadChange
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setPatchSets
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setMergeable
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AutoValue
DECL|class|QueryKey
specifier|abstract
specifier|static
class|class
name|QueryKey
block|{
DECL|method|create (Branch.NameKey branch, Iterable<String> hashes)
specifier|private
specifier|static
name|QueryKey
name|create
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|hashes
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_MergeSuperSet_QueryKey
argument_list|(
name|branch
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|hashes
argument_list|)
argument_list|)
return|;
block|}
DECL|method|branch ()
specifier|abstract
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|()
function_decl|;
DECL|method|hashes ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|hashes
parameter_list|()
function_decl|;
block|}
DECL|field|changeDataFactory
specifier|private
specifier|final
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|repoManagerProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|MergeOpRepoManager
argument_list|>
name|repoManagerProvider
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|cfg
specifier|private
specifier|final
name|Config
name|cfg
decl_stmt|;
DECL|field|queryCache
specifier|private
specifier|final
name|Map
argument_list|<
name|QueryKey
argument_list|,
name|List
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|queryCache
decl_stmt|;
DECL|field|heads
specifier|private
specifier|final
name|Map
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|Optional
argument_list|<
name|RevCommit
argument_list|>
argument_list|>
name|heads
decl_stmt|;
DECL|field|submitRuleEvaluatorFactory
specifier|private
specifier|final
name|SubmitRuleEvaluator
operator|.
name|Factory
name|submitRuleEvaluatorFactory
decl_stmt|;
DECL|field|changeControlFactory
specifier|private
specifier|final
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|orm
specifier|private
name|MergeOpRepoManager
name|orm
decl_stmt|;
DECL|field|closeOrm
specifier|private
name|boolean
name|closeOrm
decl_stmt|;
annotation|@
name|Inject
DECL|method|MergeSuperSet ( @erritServerConfig Config cfg, ChangeData.Factory changeDataFactory, Provider<InternalChangeQuery> queryProvider, Provider<MergeOpRepoManager> repoManagerProvider, PermissionBackend permissionBackend, SubmitRuleEvaluator.Factory submitRuleEvaluatorFactory, ChangeControl.GenericFactory changeControlFactory, ProjectCache projectCache)
name|MergeSuperSet
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
parameter_list|,
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
name|Provider
argument_list|<
name|MergeOpRepoManager
argument_list|>
name|repoManagerProvider
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|SubmitRuleEvaluator
operator|.
name|Factory
name|submitRuleEvaluatorFactory
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|)
block|{
name|this
operator|.
name|cfg
operator|=
name|cfg
expr_stmt|;
name|this
operator|.
name|changeDataFactory
operator|=
name|changeDataFactory
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|repoManagerProvider
operator|=
name|repoManagerProvider
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|submitRuleEvaluatorFactory
operator|=
name|submitRuleEvaluatorFactory
expr_stmt|;
name|this
operator|.
name|changeControlFactory
operator|=
name|changeControlFactory
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|queryCache
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|heads
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|setMergeOpRepoManager (MergeOpRepoManager orm)
specifier|public
name|MergeSuperSet
name|setMergeOpRepoManager
parameter_list|(
name|MergeOpRepoManager
name|orm
parameter_list|)
block|{
name|checkState
argument_list|(
name|this
operator|.
name|orm
operator|==
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|orm
operator|=
name|checkNotNull
argument_list|(
name|orm
argument_list|)
expr_stmt|;
name|closeOrm
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|completeChangeSet (ReviewDb db, Change change, CurrentUser user)
specifier|public
name|ChangeSet
name|completeChangeSet
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
name|change
parameter_list|,
name|CurrentUser
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
throws|,
name|PermissionBackendException
block|{
try|try
block|{
name|ChangeData
name|cd
init|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeSet
name|cs
init|=
operator|new
name|ChangeSet
argument_list|(
name|cd
argument_list|,
name|permissionBackend
operator|.
name|user
argument_list|(
name|user
argument_list|)
operator|.
name|change
argument_list|(
name|cd
argument_list|)
operator|.
name|database
argument_list|(
name|db
argument_list|)
operator|.
name|test
argument_list|(
name|ChangePermission
operator|.
name|READ
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|Submit
operator|.
name|wholeTopicEnabled
argument_list|(
name|cfg
argument_list|)
condition|)
block|{
return|return
name|completeChangeSetIncludingTopics
argument_list|(
name|db
argument_list|,
name|cs
argument_list|,
name|user
argument_list|)
return|;
block|}
return|return
name|completeChangeSetWithoutTopic
argument_list|(
name|db
argument_list|,
name|cs
argument_list|,
name|user
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|closeOrm
operator|&&
name|orm
operator|!=
literal|null
condition|)
block|{
name|orm
operator|.
name|close
argument_list|()
expr_stmt|;
name|orm
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|submitType (ChangeData cd, PatchSet ps, boolean visible)
specifier|private
name|SubmitType
name|submitType
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|PatchSet
name|ps
parameter_list|,
name|boolean
name|visible
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
comment|// Submit type prolog rules mean that the submit type can depend on the
comment|// submitting user and the content of the change.
comment|//
comment|// If the current user can see the change, run that evaluation to get a
comment|// preview of what would happen on submit.  If the current user can't see
comment|// the change, instead of guessing who would do the submitting, rely on the
comment|// project configuration and ignore the prolog rule.  If the prolog rule
comment|// doesn't match that, we may pick the wrong submit type and produce a
comment|// misleading (but still nonzero) count of the non visible changes that
comment|// would be submitted together with the visible ones.
if|if
condition|(
operator|!
name|visible
condition|)
block|{
return|return
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|cd
operator|.
name|project
argument_list|()
argument_list|)
operator|.
name|getProject
argument_list|()
operator|.
name|getSubmitType
argument_list|()
return|;
block|}
name|SubmitTypeRecord
name|str
init|=
name|ps
operator|==
name|cd
operator|.
name|currentPatchSet
argument_list|()
condition|?
name|cd
operator|.
name|submitTypeRecord
argument_list|()
else|:
name|submitRuleEvaluatorFactory
operator|.
name|create
argument_list|(
name|cd
argument_list|)
operator|.
name|setPatchSet
argument_list|(
name|ps
argument_list|)
operator|.
name|getSubmitType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|str
operator|.
name|isOk
argument_list|()
condition|)
block|{
name|logErrorAndThrow
argument_list|(
literal|"Failed to get submit type for "
operator|+
name|cd
operator|.
name|getId
argument_list|()
operator|+
literal|": "
operator|+
name|str
operator|.
name|errorMessage
argument_list|)
expr_stmt|;
block|}
return|return
name|str
operator|.
name|type
return|;
block|}
DECL|method|byBranch ( Iterable<ChangeData> changes)
specifier|private
specifier|static
name|ImmutableListMultimap
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|ChangeData
argument_list|>
name|byBranch
parameter_list|(
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|)
throws|throws
name|OrmException
block|{
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|ChangeData
argument_list|>
name|builder
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|walkChangesByHashes ( Collection<RevCommit> sourceCommits, Set<String> ignoreHashes, OpenRepo or, Branch.NameKey b)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|walkChangesByHashes
parameter_list|(
name|Collection
argument_list|<
name|RevCommit
argument_list|>
name|sourceCommits
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|ignoreHashes
parameter_list|,
name|OpenRepo
name|or
parameter_list|,
name|Branch
operator|.
name|NameKey
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|destHashes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|or
operator|.
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|markHeadUninteresting
argument_list|(
name|or
argument_list|,
name|b
argument_list|)
expr_stmt|;
for|for
control|(
name|RevCommit
name|c
range|:
name|sourceCommits
control|)
block|{
name|String
name|name
init|=
name|c
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|ignoreHashes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|destHashes
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|or
operator|.
name|rw
operator|.
name|markStart
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RevCommit
name|c
range|:
name|or
operator|.
name|rw
control|)
block|{
name|String
name|name
init|=
name|c
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|ignoreHashes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|destHashes
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|destHashes
return|;
block|}
DECL|method|completeChangeSetWithoutTopic (ReviewDb db, ChangeSet changes, CurrentUser user)
specifier|private
name|ChangeSet
name|completeChangeSetWithoutTopic
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ChangeSet
name|changes
parameter_list|,
name|CurrentUser
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
throws|,
name|PermissionBackendException
block|{
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|visibleChanges
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|nonVisibleChanges
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// For each target branch we run a separate rev walk to find open changes
comment|// reachable from changes already in the merge super set.
name|ImmutableListMultimap
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|ChangeData
argument_list|>
name|bc
init|=
name|byBranch
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|changes
operator|.
name|changes
argument_list|()
argument_list|,
name|changes
operator|.
name|nonVisibleChanges
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Branch
operator|.
name|NameKey
name|b
range|:
name|bc
operator|.
name|keySet
argument_list|()
control|)
block|{
name|OpenRepo
name|or
init|=
name|getRepo
argument_list|(
name|b
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RevCommit
argument_list|>
name|visibleCommits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RevCommit
argument_list|>
name|nonVisibleCommits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|bc
operator|.
name|get
argument_list|(
name|b
argument_list|)
control|)
block|{
name|boolean
name|visible
init|=
name|changes
operator|.
name|ids
argument_list|()
operator|.
name|contains
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|visible
operator|&&
operator|!
name|canRead
argument_list|(
name|db
argument_list|,
name|user
argument_list|,
name|cd
argument_list|)
condition|)
block|{
comment|// We thought the change was visible, but it isn't.
comment|// This can happen if the ACL changes during the
comment|// completeChangeSet computation, for example.
name|visible
operator|=
literal|false
expr_stmt|;
block|}
name|Collection
argument_list|<
name|RevCommit
argument_list|>
name|toWalk
init|=
name|visible
condition|?
name|visibleCommits
else|:
name|nonVisibleCommits
decl_stmt|;
comment|// Pick a revision to use for traversal.  If any of the patch sets
comment|// is visible, we use the most recent one.  Otherwise, use the current
comment|// patch set.
name|PatchSet
name|ps
init|=
name|cd
operator|.
name|currentPatchSet
argument_list|()
decl_stmt|;
name|boolean
name|visiblePatchSet
init|=
name|visible
decl_stmt|;
name|ChangeControl
name|ctl
init|=
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|cd
operator|.
name|notes
argument_list|()
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ctl
operator|.
name|isPatchVisible
argument_list|(
name|ps
argument_list|,
name|cd
argument_list|)
condition|)
block|{
name|Iterable
argument_list|<
name|PatchSet
argument_list|>
name|visiblePatchSets
init|=
name|ctl
operator|.
name|getVisiblePatchSets
argument_list|(
name|cd
operator|.
name|patchSets
argument_list|()
argument_list|,
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|visiblePatchSets
argument_list|)
condition|)
block|{
name|visiblePatchSet
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|ps
operator|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|visiblePatchSets
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|submitType
argument_list|(
name|cd
argument_list|,
name|ps
argument_list|,
name|visiblePatchSet
argument_list|)
operator|==
name|SubmitType
operator|.
name|CHERRY_PICK
condition|)
block|{
if|if
condition|(
name|visible
condition|)
block|{
name|visibleChanges
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonVisibleChanges
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
comment|// Get the underlying git commit object
name|String
name|objIdStr
init|=
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|RevCommit
name|commit
init|=
name|or
operator|.
name|rw
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|objIdStr
argument_list|)
argument_list|)
decl_stmt|;
comment|// Always include the input, even if merged. This allows
comment|// SubmitStrategyOp to correct the situation later, assuming it gets
comment|// returned by byCommitsOnBranchNotMerged below.
name|toWalk
operator|.
name|add
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|emptySet
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|visibleHashes
init|=
name|walkChangesByHashes
argument_list|(
name|visibleCommits
argument_list|,
name|emptySet
argument_list|,
name|or
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ChangeData
argument_list|>
name|cds
init|=
name|byCommitsOnBranchNotMerged
argument_list|(
name|or
argument_list|,
name|db
argument_list|,
name|user
argument_list|,
name|b
argument_list|,
name|visibleHashes
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|chd
range|:
name|cds
control|)
block|{
name|visibleChanges
operator|.
name|add
argument_list|(
name|chd
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|nonVisibleHashes
init|=
name|walkChangesByHashes
argument_list|(
name|nonVisibleCommits
argument_list|,
name|visibleHashes
argument_list|,
name|or
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|Iterables
operator|.
name|addAll
argument_list|(
name|nonVisibleChanges
argument_list|,
name|byCommitsOnBranchNotMerged
argument_list|(
name|or
argument_list|,
name|db
argument_list|,
name|user
argument_list|,
name|b
argument_list|,
name|nonVisibleHashes
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ChangeSet
argument_list|(
name|visibleChanges
argument_list|,
name|nonVisibleChanges
argument_list|)
return|;
block|}
DECL|method|getRepo (Project.NameKey project)
specifier|private
name|OpenRepo
name|getRepo
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|orm
operator|==
literal|null
condition|)
block|{
name|orm
operator|=
name|repoManagerProvider
operator|.
name|get
argument_list|()
expr_stmt|;
name|closeOrm
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
name|OpenRepo
name|or
init|=
name|orm
operator|.
name|getRepo
argument_list|(
name|project
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|or
operator|.
name|rw
operator|.
name|hasRevSort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|or
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|markHeadUninteresting (OpenRepo or, Branch.NameKey b)
specifier|private
name|void
name|markHeadUninteresting
parameter_list|(
name|OpenRepo
name|or
parameter_list|,
name|Branch
operator|.
name|NameKey
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|Optional
argument_list|<
name|RevCommit
argument_list|>
name|head
init|=
name|heads
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|head
operator|==
literal|null
condition|)
block|{
name|Ref
name|ref
init|=
name|or
operator|.
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
name|b
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|head
operator|=
name|ref
operator|!=
literal|null
condition|?
name|Optional
operator|.
name|of
argument_list|(
name|or
operator|.
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
else|:
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
name|heads
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|head
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|or
operator|.
name|rw
operator|.
name|markUninteresting
argument_list|(
name|head
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|byCommitsOnBranchNotMerged ( OpenRepo or, ReviewDb db, CurrentUser user, Branch.NameKey branch, Set<String> hashes)
specifier|private
name|List
argument_list|<
name|ChangeData
argument_list|>
name|byCommitsOnBranchNotMerged
parameter_list|(
name|OpenRepo
name|or
parameter_list|,
name|ReviewDb
name|db
parameter_list|,
name|CurrentUser
name|user
parameter_list|,
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|hashes
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
if|if
condition|(
name|hashes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|QueryKey
name|k
init|=
name|QueryKey
operator|.
name|create
argument_list|(
name|branch
argument_list|,
name|hashes
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ChangeData
argument_list|>
name|cached
init|=
name|queryCache
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
block|{
return|return
name|cached
return|;
block|}
name|List
argument_list|<
name|ChangeData
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|destChanges
init|=
name|query
argument_list|()
operator|.
name|byCommitsOnBranchNotMerged
argument_list|(
name|or
operator|.
name|repo
argument_list|,
name|db
argument_list|,
name|branch
argument_list|,
name|hashes
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|chd
range|:
name|destChanges
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|chd
argument_list|)
expr_stmt|;
block|}
name|queryCache
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Completes {@code cs} with any additional changes from its topics    *    *<p>{@link #completeChangeSetIncludingTopics} calls this repeatedly, alternating with {@link    * #completeChangeSetWithoutTopic}, to discover what additional changes should be submitted with a    * change until the set stops growing.    *    *<p>{@code topicsSeen} and {@code visibleTopicsSeen} keep track of topics already explored to    * avoid wasted work.    *    * @return the resulting larger {@link ChangeSet}    */
DECL|method|topicClosure ( ReviewDb db, ChangeSet cs, CurrentUser user, Set<String> topicsSeen, Set<String> visibleTopicsSeen)
specifier|private
name|ChangeSet
name|topicClosure
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ChangeSet
name|cs
parameter_list|,
name|CurrentUser
name|user
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|topicsSeen
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|visibleTopicsSeen
parameter_list|)
throws|throws
name|OrmException
throws|,
name|PermissionBackendException
block|{
name|List
argument_list|<
name|ChangeData
argument_list|>
name|visibleChanges
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangeData
argument_list|>
name|nonVisibleChanges
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|cs
operator|.
name|changes
argument_list|()
control|)
block|{
name|visibleChanges
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|String
name|topic
init|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getTopic
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|topic
argument_list|)
operator|||
name|visibleTopicsSeen
operator|.
name|contains
argument_list|(
name|topic
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|ChangeData
name|topicCd
range|:
name|query
argument_list|()
operator|.
name|byTopicOpen
argument_list|(
name|topic
argument_list|)
control|)
block|{
if|if
condition|(
name|canRead
argument_list|(
name|db
argument_list|,
name|user
argument_list|,
name|topicCd
argument_list|)
condition|)
block|{
name|visibleChanges
operator|.
name|add
argument_list|(
name|topicCd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonVisibleChanges
operator|.
name|add
argument_list|(
name|topicCd
argument_list|)
expr_stmt|;
block|}
block|}
name|topicsSeen
operator|.
name|add
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|visibleTopicsSeen
operator|.
name|add
argument_list|(
name|topic
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChangeData
name|cd
range|:
name|cs
operator|.
name|nonVisibleChanges
argument_list|()
control|)
block|{
name|nonVisibleChanges
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|String
name|topic
init|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getTopic
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|topic
argument_list|)
operator|||
name|topicsSeen
operator|.
name|contains
argument_list|(
name|topic
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|ChangeData
name|topicCd
range|:
name|query
argument_list|()
operator|.
name|byTopicOpen
argument_list|(
name|topic
argument_list|)
control|)
block|{
name|nonVisibleChanges
operator|.
name|add
argument_list|(
name|topicCd
argument_list|)
expr_stmt|;
block|}
name|topicsSeen
operator|.
name|add
argument_list|(
name|topic
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ChangeSet
argument_list|(
name|visibleChanges
argument_list|,
name|nonVisibleChanges
argument_list|)
return|;
block|}
DECL|method|completeChangeSetIncludingTopics ( ReviewDb db, ChangeSet changes, CurrentUser user)
specifier|private
name|ChangeSet
name|completeChangeSetIncludingTopics
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ChangeSet
name|changes
parameter_list|,
name|CurrentUser
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
throws|,
name|PermissionBackendException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|topicsSeen
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|visibleTopicsSeen
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|oldSeen
decl_stmt|;
name|int
name|seen
init|=
literal|0
decl_stmt|;
do|do
block|{
name|oldSeen
operator|=
name|seen
expr_stmt|;
name|changes
operator|=
name|completeChangeSetWithoutTopic
argument_list|(
name|db
argument_list|,
name|changes
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|changes
operator|=
name|topicClosure
argument_list|(
name|db
argument_list|,
name|changes
argument_list|,
name|user
argument_list|,
name|topicsSeen
argument_list|,
name|visibleTopicsSeen
argument_list|)
expr_stmt|;
name|seen
operator|=
name|topicsSeen
operator|.
name|size
argument_list|()
operator|+
name|visibleTopicsSeen
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|seen
operator|!=
name|oldSeen
condition|)
do|;
return|return
name|changes
return|;
block|}
DECL|method|query ()
specifier|private
name|InternalChangeQuery
name|query
parameter_list|()
block|{
comment|// Request fields required for completing the ChangeSet and converting to
comment|// ChangeInfo without having to touch the database or opening the repository
comment|// more than necessary. This provides reasonable performance when loading
comment|// the change screen; callers that care about reading the latest value of
comment|// these fields should clear them explicitly using reloadChanges().
name|Set
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ChangeField
operator|.
name|CHANGE
operator|.
name|getName
argument_list|()
argument_list|,
name|ChangeField
operator|.
name|PATCH_SET
operator|.
name|getName
argument_list|()
argument_list|,
name|ChangeField
operator|.
name|MERGEABLE
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|setRequestedFields
argument_list|(
name|fields
argument_list|)
return|;
block|}
DECL|method|logError (String msg)
specifier|private
name|void
name|logError
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isErrorEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logErrorAndThrow (String msg)
specifier|private
name|void
name|logErrorAndThrow
parameter_list|(
name|String
name|msg
parameter_list|)
throws|throws
name|OrmException
block|{
name|logError
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OrmException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
DECL|method|canRead (ReviewDb db, CurrentUser user, ChangeData cd)
specifier|private
name|boolean
name|canRead
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|CurrentUser
name|user
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
return|return
name|permissionBackend
operator|.
name|user
argument_list|(
name|user
argument_list|)
operator|.
name|change
argument_list|(
name|cd
argument_list|)
operator|.
name|database
argument_list|(
name|db
argument_list|)
operator|.
name|test
argument_list|(
name|ChangePermission
operator|.
name|READ
argument_list|)
return|;
block|}
block|}
end_class

end_unit

