begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|Submit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|ChangePermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_comment
comment|/**  * Calculates the minimal superset of changes required to be merged.  *  *<p>This includes all parents between a change and the tip of its target branch for the  * merging/rebasing submit strategies. For the cherry-pick strategy no additional changes are  * included.  *  *<p>If change.submitWholeTopic is enabled, also all changes of the topic and their parents are  * included.  */
end_comment

begin_class
DECL|class|MergeSuperSet
specifier|public
class|class
name|MergeSuperSet
block|{
DECL|method|reloadChanges (ChangeSet changeSet)
specifier|public
specifier|static
name|void
name|reloadChanges
parameter_list|(
name|ChangeSet
name|changeSet
parameter_list|)
throws|throws
name|OrmException
block|{
comment|// Clear exactly the fields requested by query(InternalChangeQuery) below.
for|for
control|(
name|ChangeData
name|cd
range|:
name|changeSet
operator|.
name|changes
argument_list|()
control|)
block|{
name|cd
operator|.
name|reloadChange
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setPatchSets
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setMergeable
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|query (InternalChangeQuery q)
specifier|public
specifier|static
name|InternalChangeQuery
name|query
parameter_list|(
name|InternalChangeQuery
name|q
parameter_list|)
block|{
comment|// Request fields required for completing the ChangeSet and converting to
comment|// ChangeInfo without having to touch the database or opening the repository
comment|// more than necessary. This provides reasonable performance when loading
comment|// the change screen; callers that care about reading the latest value of
comment|// these fields should clear them explicitly using reloadChanges().
return|return
name|q
operator|.
name|setRequestedFields
argument_list|(
name|ChangeField
operator|.
name|CHANGE
argument_list|,
name|ChangeField
operator|.
name|PATCH_SET
argument_list|,
name|ChangeField
operator|.
name|MERGEABLE
argument_list|)
return|;
block|}
DECL|field|changeDataFactory
specifier|private
specifier|final
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|repoManagerProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|MergeOpRepoManager
argument_list|>
name|repoManagerProvider
decl_stmt|;
DECL|field|mergeSuperSetComputation
specifier|private
specifier|final
name|DynamicItem
argument_list|<
name|MergeSuperSetComputation
argument_list|>
name|mergeSuperSetComputation
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|cfg
specifier|private
specifier|final
name|Config
name|cfg
decl_stmt|;
DECL|field|orm
specifier|private
name|MergeOpRepoManager
name|orm
decl_stmt|;
DECL|field|closeOrm
specifier|private
name|boolean
name|closeOrm
decl_stmt|;
annotation|@
name|Inject
DECL|method|MergeSuperSet ( @erritServerConfig Config cfg, ChangeData.Factory changeDataFactory, Provider<InternalChangeQuery> queryProvider, Provider<MergeOpRepoManager> repoManagerProvider, DynamicItem<MergeSuperSetComputation> mergeSuperSetComputation, PermissionBackend permissionBackend)
name|MergeSuperSet
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
parameter_list|,
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
name|Provider
argument_list|<
name|MergeOpRepoManager
argument_list|>
name|repoManagerProvider
parameter_list|,
name|DynamicItem
argument_list|<
name|MergeSuperSetComputation
argument_list|>
name|mergeSuperSetComputation
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|)
block|{
name|this
operator|.
name|cfg
operator|=
name|cfg
expr_stmt|;
name|this
operator|.
name|changeDataFactory
operator|=
name|changeDataFactory
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|repoManagerProvider
operator|=
name|repoManagerProvider
expr_stmt|;
name|this
operator|.
name|mergeSuperSetComputation
operator|=
name|mergeSuperSetComputation
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
block|}
DECL|method|setMergeOpRepoManager (MergeOpRepoManager orm)
specifier|public
name|MergeSuperSet
name|setMergeOpRepoManager
parameter_list|(
name|MergeOpRepoManager
name|orm
parameter_list|)
block|{
name|checkState
argument_list|(
name|this
operator|.
name|orm
operator|==
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|orm
operator|=
name|checkNotNull
argument_list|(
name|orm
argument_list|)
expr_stmt|;
name|closeOrm
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|completeChangeSet (ReviewDb db, Change change, CurrentUser user)
specifier|public
name|ChangeSet
name|completeChangeSet
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
name|change
parameter_list|,
name|CurrentUser
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
throws|,
name|PermissionBackendException
block|{
try|try
block|{
if|if
condition|(
name|orm
operator|==
literal|null
condition|)
block|{
name|orm
operator|=
name|repoManagerProvider
operator|.
name|get
argument_list|()
expr_stmt|;
name|closeOrm
operator|=
literal|true
expr_stmt|;
block|}
name|ChangeData
name|cd
init|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeSet
name|changeSet
init|=
operator|new
name|ChangeSet
argument_list|(
name|cd
argument_list|,
name|permissionBackend
operator|.
name|user
argument_list|(
name|user
argument_list|)
operator|.
name|change
argument_list|(
name|cd
argument_list|)
operator|.
name|database
argument_list|(
name|db
argument_list|)
operator|.
name|test
argument_list|(
name|ChangePermission
operator|.
name|READ
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|Submit
operator|.
name|wholeTopicEnabled
argument_list|(
name|cfg
argument_list|)
condition|)
block|{
return|return
name|completeChangeSetIncludingTopics
argument_list|(
name|db
argument_list|,
name|changeSet
argument_list|,
name|user
argument_list|)
return|;
block|}
return|return
name|mergeSuperSetComputation
operator|.
name|get
argument_list|()
operator|.
name|completeWithoutTopic
argument_list|(
name|db
argument_list|,
name|orm
argument_list|,
name|changeSet
argument_list|,
name|user
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|closeOrm
operator|&&
name|orm
operator|!=
literal|null
condition|)
block|{
name|orm
operator|.
name|close
argument_list|()
expr_stmt|;
name|orm
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Completes {@code changeSet} with any additional changes from its topics    *    *<p>{@link #completeChangeSetIncludingTopics} calls this repeatedly, alternating with {@link    * MergeSuperSetComputation#completeWithoutTopic(ReviewDb, MergeOpRepoManager, ChangeSet,    * CurrentUser)}, to discover what additional changes should be submitted with a change until the    * set stops growing.    *    *<p>{@code topicsSeen} and {@code visibleTopicsSeen} keep track of topics already explored to    * avoid wasted work.    *    * @return the resulting larger {@link ChangeSet}    */
DECL|method|topicClosure ( ReviewDb db, ChangeSet changeSet, CurrentUser user, Set<String> topicsSeen, Set<String> visibleTopicsSeen)
specifier|private
name|ChangeSet
name|topicClosure
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ChangeSet
name|changeSet
parameter_list|,
name|CurrentUser
name|user
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|topicsSeen
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|visibleTopicsSeen
parameter_list|)
throws|throws
name|OrmException
throws|,
name|PermissionBackendException
block|{
name|List
argument_list|<
name|ChangeData
argument_list|>
name|visibleChanges
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangeData
argument_list|>
name|nonVisibleChanges
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|changeSet
operator|.
name|changes
argument_list|()
control|)
block|{
name|visibleChanges
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|String
name|topic
init|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getTopic
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|topic
argument_list|)
operator|||
name|visibleTopicsSeen
operator|.
name|contains
argument_list|(
name|topic
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|ChangeData
name|topicCd
range|:
name|byTopicOpen
argument_list|(
name|topic
argument_list|)
control|)
block|{
if|if
condition|(
name|canRead
argument_list|(
name|db
argument_list|,
name|user
argument_list|,
name|topicCd
argument_list|)
condition|)
block|{
name|visibleChanges
operator|.
name|add
argument_list|(
name|topicCd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonVisibleChanges
operator|.
name|add
argument_list|(
name|topicCd
argument_list|)
expr_stmt|;
block|}
block|}
name|topicsSeen
operator|.
name|add
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|visibleTopicsSeen
operator|.
name|add
argument_list|(
name|topic
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChangeData
name|cd
range|:
name|changeSet
operator|.
name|nonVisibleChanges
argument_list|()
control|)
block|{
name|nonVisibleChanges
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|String
name|topic
init|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getTopic
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|topic
argument_list|)
operator|||
name|topicsSeen
operator|.
name|contains
argument_list|(
name|topic
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|ChangeData
name|topicCd
range|:
name|byTopicOpen
argument_list|(
name|topic
argument_list|)
control|)
block|{
name|nonVisibleChanges
operator|.
name|add
argument_list|(
name|topicCd
argument_list|)
expr_stmt|;
block|}
name|topicsSeen
operator|.
name|add
argument_list|(
name|topic
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ChangeSet
argument_list|(
name|visibleChanges
argument_list|,
name|nonVisibleChanges
argument_list|)
return|;
block|}
DECL|method|completeChangeSetIncludingTopics ( ReviewDb db, ChangeSet changeSet, CurrentUser user)
specifier|private
name|ChangeSet
name|completeChangeSetIncludingTopics
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|ChangeSet
name|changeSet
parameter_list|,
name|CurrentUser
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
throws|,
name|PermissionBackendException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|topicsSeen
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|visibleTopicsSeen
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|oldSeen
decl_stmt|;
name|int
name|seen
init|=
literal|0
decl_stmt|;
name|changeSet
operator|=
name|topicClosure
argument_list|(
name|db
argument_list|,
name|changeSet
argument_list|,
name|user
argument_list|,
name|topicsSeen
argument_list|,
name|visibleTopicsSeen
argument_list|)
expr_stmt|;
name|seen
operator|=
name|topicsSeen
operator|.
name|size
argument_list|()
operator|+
name|visibleTopicsSeen
operator|.
name|size
argument_list|()
expr_stmt|;
do|do
block|{
name|oldSeen
operator|=
name|seen
expr_stmt|;
name|changeSet
operator|=
name|mergeSuperSetComputation
operator|.
name|get
argument_list|()
operator|.
name|completeWithoutTopic
argument_list|(
name|db
argument_list|,
name|orm
argument_list|,
name|changeSet
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|changeSet
operator|=
name|topicClosure
argument_list|(
name|db
argument_list|,
name|changeSet
argument_list|,
name|user
argument_list|,
name|topicsSeen
argument_list|,
name|visibleTopicsSeen
argument_list|)
expr_stmt|;
name|seen
operator|=
name|topicsSeen
operator|.
name|size
argument_list|()
operator|+
name|visibleTopicsSeen
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|seen
operator|!=
name|oldSeen
condition|)
do|;
return|return
name|changeSet
return|;
block|}
DECL|method|byTopicOpen (String topic)
specifier|private
name|List
argument_list|<
name|ChangeData
argument_list|>
name|byTopicOpen
parameter_list|(
name|String
name|topic
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|query
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|byTopicOpen
argument_list|(
name|topic
argument_list|)
return|;
block|}
DECL|method|canRead (ReviewDb db, CurrentUser user, ChangeData cd)
specifier|private
name|boolean
name|canRead
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|CurrentUser
name|user
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
return|return
name|permissionBackend
operator|.
name|user
argument_list|(
name|user
argument_list|)
operator|.
name|change
argument_list|(
name|cd
argument_list|)
operator|.
name|database
argument_list|(
name|db
argument_list|)
operator|.
name|test
argument_list|(
name|ChangePermission
operator|.
name|READ
argument_list|)
return|;
block|}
block|}
end_class

end_unit

