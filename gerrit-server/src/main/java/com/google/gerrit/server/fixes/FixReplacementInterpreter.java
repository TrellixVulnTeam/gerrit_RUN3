begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.fixes
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|fixes
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|RawInputUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BinaryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|FixReplacement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|FileContentUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|tree
operator|.
name|ChangeFileContentModification
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|tree
operator|.
name|TreeModification
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/** An interpreter for {@code FixReplacement}s. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|FixReplacementInterpreter
specifier|public
class|class
name|FixReplacementInterpreter
block|{
DECL|field|ASC_RANGE_FIX_REPLACEMENT_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|FixReplacement
argument_list|>
name|ASC_RANGE_FIX_REPLACEMENT_COMPARATOR
init|=
name|Comparator
operator|.
name|comparing
argument_list|(
name|fixReplacement
lambda|->
name|fixReplacement
operator|.
name|range
argument_list|)
decl_stmt|;
DECL|field|fileContentUtil
specifier|private
specifier|final
name|FileContentUtil
name|fileContentUtil
decl_stmt|;
annotation|@
name|Inject
DECL|method|FixReplacementInterpreter (FileContentUtil fileContentUtil)
specifier|public
name|FixReplacementInterpreter
parameter_list|(
name|FileContentUtil
name|fileContentUtil
parameter_list|)
block|{
name|this
operator|.
name|fileContentUtil
operator|=
name|fileContentUtil
expr_stmt|;
block|}
comment|/**    * Transforms the given {@code FixReplacement}s into a {@code TreeModification}.    *    * @param repository the affected Git repository    * @param projectState the affected project    * @param patchSetCommitId the patch set which should be modified    * @param fixReplacements the replacements which should be applied    * @return a {@code TreeModification} representing the given replacements    * @throws ResourceNotFoundException if a file to which one of the replacements refers doesn't    *     exist    * @throws ResourceConflictException if the replacements can't be transformed into a {@code    *     TreeModification}    */
DECL|method|toTreeModification ( Repository repository, ProjectState projectState, ObjectId patchSetCommitId, List<FixReplacement> fixReplacements)
specifier|public
name|TreeModification
name|toTreeModification
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ProjectState
name|projectState
parameter_list|,
name|ObjectId
name|patchSetCommitId
parameter_list|,
name|List
argument_list|<
name|FixReplacement
argument_list|>
name|fixReplacements
parameter_list|)
throws|throws
name|ResourceNotFoundException
throws|,
name|IOException
throws|,
name|ResourceConflictException
block|{
name|checkNotNull
argument_list|(
name|fixReplacements
argument_list|,
literal|"Fix replacements must not be null"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|fixReplacements
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Fix replacements must not be empty"
argument_list|)
expr_stmt|;
comment|// For a fix suggestion, we allow only fix replacements for the same file.
name|String
name|filePath
init|=
name|fixReplacements
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|path
decl_stmt|;
return|return
name|toTreeModification
argument_list|(
name|repository
argument_list|,
name|projectState
argument_list|,
name|patchSetCommitId
argument_list|,
name|filePath
argument_list|,
name|fixReplacements
argument_list|)
return|;
block|}
DECL|method|toTreeModification ( Repository repository, ProjectState projectState, ObjectId patchSetCommitId, String filePath, List<FixReplacement> fixReplacements)
specifier|private
name|TreeModification
name|toTreeModification
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ProjectState
name|projectState
parameter_list|,
name|ObjectId
name|patchSetCommitId
parameter_list|,
name|String
name|filePath
parameter_list|,
name|List
argument_list|<
name|FixReplacement
argument_list|>
name|fixReplacements
parameter_list|)
throws|throws
name|ResourceNotFoundException
throws|,
name|IOException
throws|,
name|ResourceConflictException
block|{
name|String
name|fileContent
init|=
name|getFileContent
argument_list|(
name|repository
argument_list|,
name|projectState
argument_list|,
name|patchSetCommitId
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
name|String
name|newFileContent
init|=
name|getNewFileContent
argument_list|(
name|fileContent
argument_list|,
name|fixReplacements
argument_list|)
decl_stmt|;
return|return
operator|new
name|ChangeFileContentModification
argument_list|(
name|filePath
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|newFileContent
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getFileContent ( Repository repository, ProjectState projectState, ObjectId patchSetCommitId, String filePath)
specifier|private
name|String
name|getFileContent
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ProjectState
name|projectState
parameter_list|,
name|ObjectId
name|patchSetCommitId
parameter_list|,
name|String
name|filePath
parameter_list|)
throws|throws
name|ResourceNotFoundException
throws|,
name|IOException
block|{
try|try
init|(
name|BinaryResult
name|fileContent
init|=
name|fileContentUtil
operator|.
name|getContent
argument_list|(
name|repository
argument_list|,
name|projectState
argument_list|,
name|patchSetCommitId
argument_list|,
name|filePath
argument_list|)
init|)
block|{
return|return
name|fileContent
operator|.
name|asString
argument_list|()
return|;
block|}
block|}
DECL|method|getNewFileContent (String fileContent, List<FixReplacement> fixReplacements)
specifier|private
specifier|static
name|String
name|getNewFileContent
parameter_list|(
name|String
name|fileContent
parameter_list|,
name|List
argument_list|<
name|FixReplacement
argument_list|>
name|fixReplacements
parameter_list|)
throws|throws
name|ResourceConflictException
block|{
name|List
argument_list|<
name|FixReplacement
argument_list|>
name|sortedReplacements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fixReplacements
argument_list|)
decl_stmt|;
name|sortedReplacements
operator|.
name|sort
argument_list|(
name|ASC_RANGE_FIX_REPLACEMENT_COMPARATOR
argument_list|)
expr_stmt|;
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
name|fileContent
argument_list|)
decl_stmt|;
name|StringModifier
name|fileContentModifier
init|=
operator|new
name|StringModifier
argument_list|(
name|fileContent
argument_list|)
decl_stmt|;
for|for
control|(
name|FixReplacement
name|fixReplacement
range|:
name|sortedReplacements
control|)
block|{
name|Comment
operator|.
name|Range
name|range
init|=
name|fixReplacement
operator|.
name|range
decl_stmt|;
try|try
block|{
name|int
name|startLineIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
name|range
operator|.
name|startLine
argument_list|)
decl_stmt|;
name|int
name|startLineLength
init|=
name|lineIdentifier
operator|.
name|getLengthOfLine
argument_list|(
name|range
operator|.
name|startLine
argument_list|)
decl_stmt|;
name|int
name|endLineIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
name|range
operator|.
name|endLine
argument_list|)
decl_stmt|;
name|int
name|endLineLength
init|=
name|lineIdentifier
operator|.
name|getLengthOfLine
argument_list|(
name|range
operator|.
name|endLine
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|startChar
operator|>
name|startLineLength
operator|||
name|range
operator|.
name|endChar
operator|>
name|endLineLength
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Range %s refers to a non-existent offset (start line length: %s,"
operator|+
literal|" end line length: %s)"
argument_list|,
name|toString
argument_list|(
name|range
argument_list|)
argument_list|,
name|startLineLength
argument_list|,
name|endLineLength
argument_list|)
argument_list|)
throw|;
block|}
name|int
name|startIndex
init|=
name|startLineIndex
operator|+
name|range
operator|.
name|startChar
decl_stmt|;
name|int
name|endIndex
init|=
name|endLineIndex
operator|+
name|range
operator|.
name|endChar
decl_stmt|;
name|fileContentModifier
operator|.
name|replace
argument_list|(
name|startIndex
argument_list|,
name|endIndex
argument_list|,
name|fixReplacement
operator|.
name|replacement
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StringIndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// Most of the StringIndexOutOfBoundsException should never occur because we reject fix
comment|// replacements for invalid ranges. However, we can't cover all cases for efficiency
comment|// reasons. For instance, we don't determine the number of lines in a file. That's why we
comment|// need to map this exception and thus provide a meaningful error.
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot apply fix replacement for range %s"
argument_list|,
name|toString
argument_list|(
name|range
argument_list|)
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|fileContentModifier
operator|.
name|getResult
argument_list|()
return|;
block|}
DECL|method|toString (Comment.Range range)
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|Comment
operator|.
name|Range
name|range
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"(%s:%s - %s:%s)"
argument_list|,
name|range
operator|.
name|startLine
argument_list|,
name|range
operator|.
name|startChar
argument_list|,
name|range
operator|.
name|endLine
argument_list|,
name|range
operator|.
name|endChar
argument_list|)
return|;
block|}
block|}
end_class

end_unit

