begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.common
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|PluginLoader
specifier|public
class|class
name|PluginLoader
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PluginLoader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|pluginsDir
specifier|private
name|File
name|pluginsDir
decl_stmt|;
DECL|field|pluginCache
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Plugin
argument_list|>
name|pluginCache
decl_stmt|;
annotation|@
name|Inject
DECL|method|PluginLoader (SitePaths sitePaths)
specifier|public
name|PluginLoader
parameter_list|(
name|SitePaths
name|sitePaths
parameter_list|)
block|{
name|pluginsDir
operator|=
name|sitePaths
operator|.
name|plugins_dir
expr_stmt|;
block|}
DECL|method|initialize ()
specifier|private
specifier|synchronized
name|void
name|initialize
parameter_list|()
block|{
if|if
condition|(
name|pluginCache
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|pluginCache
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Plugin
argument_list|>
argument_list|()
expr_stmt|;
name|loadPlugins
argument_list|()
expr_stmt|;
block|}
DECL|method|get (String pluginName)
specifier|public
name|Plugin
name|get
parameter_list|(
name|String
name|pluginName
parameter_list|)
block|{
name|initialize
argument_list|()
expr_stmt|;
return|return
name|pluginCache
operator|.
name|get
argument_list|(
name|pluginName
argument_list|)
return|;
block|}
DECL|method|getPlugins ()
specifier|public
name|Collection
argument_list|<
name|Plugin
argument_list|>
name|getPlugins
parameter_list|()
block|{
name|initialize
argument_list|()
expr_stmt|;
return|return
name|pluginCache
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|loadPlugins ()
specifier|private
name|void
name|loadPlugins
parameter_list|()
block|{
name|Collection
argument_list|<
name|File
argument_list|>
name|pluginJars
decl_stmt|;
try|try
block|{
name|pluginJars
operator|=
name|getPluginFiles
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot scan Gerrit plugins directory looking for jar files"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|File
name|jarFile
range|:
name|pluginJars
control|)
block|{
name|Plugin
name|plugin
decl_stmt|;
try|try
block|{
name|plugin
operator|=
name|loadPlugin
argument_list|(
name|jarFile
argument_list|)
expr_stmt|;
name|pluginCache
operator|.
name|put
argument_list|(
name|plugin
operator|.
name|name
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot access plugin jar "
operator|+
name|jarFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot load plugin class module from "
operator|+
name|jarFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|loadPlugin (File jarFile)
specifier|private
name|Plugin
name|loadPlugin
parameter_list|(
name|File
name|jarFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|Manifest
name|jarManifest
init|=
operator|new
name|JarFile
argument_list|(
name|jarFile
argument_list|)
operator|.
name|getManifest
argument_list|()
decl_stmt|;
name|ClassLoader
name|parentLoader
init|=
name|PluginLoader
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|ClassLoader
name|jarClassLoader
init|=
operator|new
name|URLClassLoader
argument_list|(
name|getPluginURLs
argument_list|(
name|jarFile
argument_list|)
argument_list|,
name|parentLoader
argument_list|)
decl_stmt|;
name|String
name|pluginName
init|=
name|getMandatoryAttribute
argument_list|(
name|jarManifest
argument_list|,
literal|"Gerrit-Plugin"
argument_list|)
decl_stmt|;
name|String
name|moduleName
init|=
name|getMandatoryAttribute
argument_list|(
name|jarManifest
argument_list|,
literal|"Gerrit-SshModule"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|moduleClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|moduleName
argument_list|,
literal|false
argument_list|,
name|jarClassLoader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Module
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|moduleClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
literal|"Class "
operator|+
name|moduleClass
operator|.
name|getName
argument_list|()
operator|+
literal|" is not a Guice Module"
argument_list|)
throw|;
block|}
return|return
operator|new
name|Plugin
argument_list|(
name|pluginName
argument_list|,
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
operator|)
name|moduleClass
argument_list|)
return|;
block|}
DECL|method|getMandatoryAttribute (Manifest manifest, String attrName)
specifier|private
name|String
name|getMandatoryAttribute
parameter_list|(
name|Manifest
name|manifest
parameter_list|,
name|String
name|attrName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|value
init|=
name|manifest
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|getValue
argument_list|(
name|attrName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing mandatory attribute "
operator|+
name|attrName
operator|+
literal|" in manifest"
argument_list|)
throw|;
return|return
name|value
return|;
block|}
DECL|method|getPluginURLs (File jarFile)
specifier|private
name|URL
index|[]
name|getPluginURLs
parameter_list|(
name|File
name|jarFile
parameter_list|)
throws|throws
name|MalformedURLException
block|{
return|return
operator|new
name|URL
index|[]
block|{
name|jarFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
block|}
return|;
block|}
DECL|method|getPluginFiles ()
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|getPluginFiles
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pluginsDir
operator|==
literal|null
operator|||
operator|!
name|pluginsDir
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|File
index|[]
name|plugins
init|=
name|pluginsDir
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
return|return
name|pathname
operator|.
name|isFile
argument_list|()
operator|&&
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|plugins
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot list "
operator|+
name|pluginsDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|plugins
argument_list|)
return|;
block|}
block|}
end_class

end_unit

