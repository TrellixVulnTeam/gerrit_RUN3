begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.common
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategoryValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ContributorAgreement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AnonymousCowardName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|ApprovalAttribute
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|ChangeAbandonedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|ChangeMergedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|ChangeRestoreEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|CommentAddedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|EventFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|PatchSetCreatedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|RefUpdatedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|WorkQueue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * This class implements hooks for certain gerrit events.  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|ChangeHookRunner
specifier|public
class|class
name|ChangeHookRunner
block|{
comment|/** A logger for this class. */
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChangeHookRunner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|ChangeListenerHolder
specifier|private
specifier|static
class|class
name|ChangeListenerHolder
block|{
DECL|field|listener
specifier|final
name|ChangeListener
name|listener
decl_stmt|;
DECL|field|user
specifier|final
name|IdentifiedUser
name|user
decl_stmt|;
DECL|method|ChangeListenerHolder (ChangeListener l, IdentifiedUser u)
name|ChangeListenerHolder
parameter_list|(
name|ChangeListener
name|l
parameter_list|,
name|IdentifiedUser
name|u
parameter_list|)
block|{
name|listener
operator|=
name|l
expr_stmt|;
name|user
operator|=
name|u
expr_stmt|;
block|}
block|}
comment|/** Listeners to receive changes as they happen. */
DECL|field|listeners
specifier|private
specifier|final
name|Map
argument_list|<
name|ChangeListener
argument_list|,
name|ChangeListenerHolder
argument_list|>
name|listeners
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ChangeListener
argument_list|,
name|ChangeListenerHolder
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Filename of the new patchset hook. */
DECL|field|patchsetCreatedHook
specifier|private
specifier|final
name|File
name|patchsetCreatedHook
decl_stmt|;
comment|/** Filename of the new comments hook. */
DECL|field|commentAddedHook
specifier|private
specifier|final
name|File
name|commentAddedHook
decl_stmt|;
comment|/** Filename of the change merged hook. */
DECL|field|changeMergedHook
specifier|private
specifier|final
name|File
name|changeMergedHook
decl_stmt|;
comment|/** Filename of the change abandoned hook. */
DECL|field|changeAbandonedHook
specifier|private
specifier|final
name|File
name|changeAbandonedHook
decl_stmt|;
comment|/** Filename of the change abandoned hook. */
DECL|field|changeRestoredHook
specifier|private
specifier|final
name|File
name|changeRestoredHook
decl_stmt|;
comment|/** Filename of the ref updated hook. */
DECL|field|refUpdatedHook
specifier|private
specifier|final
name|File
name|refUpdatedHook
decl_stmt|;
comment|/** Filename of the cla signed hook. */
DECL|field|claSignedHook
specifier|private
specifier|final
name|File
name|claSignedHook
decl_stmt|;
DECL|field|anonymousCowardName
specifier|private
specifier|final
name|String
name|anonymousCowardName
decl_stmt|;
comment|/** Repository Manager. */
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
comment|/** Queue of hooks that need to run. */
DECL|field|hookQueue
specifier|private
specifier|final
name|WorkQueue
operator|.
name|Executor
name|hookQueue
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|approvalTypes
specifier|private
specifier|final
name|ApprovalTypes
name|approvalTypes
decl_stmt|;
DECL|field|eventFactory
specifier|private
specifier|final
name|EventFactory
name|eventFactory
decl_stmt|;
comment|/**      * Create a new ChangeHookRunner.      *      * @param queue Queue to use when processing hooks.      * @param repoManager The repository manager.      * @param config Config file to use.      * @param sitePath The sitepath of this gerrit install.      * @param projectCache the project cache instance for the server.      */
annotation|@
name|Inject
DECL|method|ChangeHookRunner (final WorkQueue queue, final GitRepositoryManager repoManager, final @GerritServerConfig Config config, final @AnonymousCowardName String anonymousCowardName, final SitePaths sitePath, final ProjectCache projectCache, final AccountCache accountCache, final ApprovalTypes approvalTypes, final EventFactory eventFactory)
specifier|public
name|ChangeHookRunner
parameter_list|(
specifier|final
name|WorkQueue
name|queue
parameter_list|,
specifier|final
name|GitRepositoryManager
name|repoManager
parameter_list|,
specifier|final
annotation|@
name|GerritServerConfig
name|Config
name|config
parameter_list|,
specifier|final
annotation|@
name|AnonymousCowardName
name|String
name|anonymousCowardName
parameter_list|,
specifier|final
name|SitePaths
name|sitePath
parameter_list|,
specifier|final
name|ProjectCache
name|projectCache
parameter_list|,
specifier|final
name|AccountCache
name|accountCache
parameter_list|,
specifier|final
name|ApprovalTypes
name|approvalTypes
parameter_list|,
specifier|final
name|EventFactory
name|eventFactory
parameter_list|)
block|{
name|this
operator|.
name|anonymousCowardName
operator|=
name|anonymousCowardName
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|hookQueue
operator|=
name|queue
operator|.
name|createQueue
argument_list|(
literal|1
argument_list|,
literal|"hook"
argument_list|)
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|approvalTypes
operator|=
name|approvalTypes
expr_stmt|;
name|this
operator|.
name|eventFactory
operator|=
name|eventFactory
expr_stmt|;
specifier|final
name|File
name|hooksPath
init|=
name|sitePath
operator|.
name|resolve
argument_list|(
name|getValue
argument_list|(
name|config
argument_list|,
literal|"hooks"
argument_list|,
literal|"path"
argument_list|,
name|sitePath
operator|.
name|hooks_dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|patchsetCreatedHook
operator|=
name|sitePath
operator|.
name|resolve
argument_list|(
operator|new
name|File
argument_list|(
name|hooksPath
argument_list|,
name|getValue
argument_list|(
name|config
argument_list|,
literal|"hooks"
argument_list|,
literal|"patchsetCreatedHook"
argument_list|,
literal|"patchset-created"
argument_list|)
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|commentAddedHook
operator|=
name|sitePath
operator|.
name|resolve
argument_list|(
operator|new
name|File
argument_list|(
name|hooksPath
argument_list|,
name|getValue
argument_list|(
name|config
argument_list|,
literal|"hooks"
argument_list|,
literal|"commentAddedHook"
argument_list|,
literal|"comment-added"
argument_list|)
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|changeMergedHook
operator|=
name|sitePath
operator|.
name|resolve
argument_list|(
operator|new
name|File
argument_list|(
name|hooksPath
argument_list|,
name|getValue
argument_list|(
name|config
argument_list|,
literal|"hooks"
argument_list|,
literal|"changeMergedHook"
argument_list|,
literal|"change-merged"
argument_list|)
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|changeAbandonedHook
operator|=
name|sitePath
operator|.
name|resolve
argument_list|(
operator|new
name|File
argument_list|(
name|hooksPath
argument_list|,
name|getValue
argument_list|(
name|config
argument_list|,
literal|"hooks"
argument_list|,
literal|"changeAbandonedHook"
argument_list|,
literal|"change-abandoned"
argument_list|)
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|changeRestoredHook
operator|=
name|sitePath
operator|.
name|resolve
argument_list|(
operator|new
name|File
argument_list|(
name|hooksPath
argument_list|,
name|getValue
argument_list|(
name|config
argument_list|,
literal|"hooks"
argument_list|,
literal|"changeRestoredHook"
argument_list|,
literal|"change-restored"
argument_list|)
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|refUpdatedHook
operator|=
name|sitePath
operator|.
name|resolve
argument_list|(
operator|new
name|File
argument_list|(
name|hooksPath
argument_list|,
name|getValue
argument_list|(
name|config
argument_list|,
literal|"hooks"
argument_list|,
literal|"refUpdatedHook"
argument_list|,
literal|"ref-updated"
argument_list|)
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|claSignedHook
operator|=
name|sitePath
operator|.
name|resolve
argument_list|(
operator|new
name|File
argument_list|(
name|hooksPath
argument_list|,
name|getValue
argument_list|(
name|config
argument_list|,
literal|"hooks"
argument_list|,
literal|"claSignedHook"
argument_list|,
literal|"cla-signed"
argument_list|)
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addChangeListener (ChangeListener listener, IdentifiedUser user)
specifier|public
name|void
name|addChangeListener
parameter_list|(
name|ChangeListener
name|listener
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|)
block|{
name|listeners
operator|.
name|put
argument_list|(
name|listener
argument_list|,
operator|new
name|ChangeListenerHolder
argument_list|(
name|listener
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|removeChangeListener (ChangeListener listener)
specifier|public
name|void
name|removeChangeListener
parameter_list|(
name|ChangeListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Helper Method for getting values from the config.      *      * @param config Config file to get value from.      * @param section Section to look in.      * @param setting Setting to get.      * @param fallback Fallback value.      * @return Setting value if found, else fallback.      */
DECL|method|getValue (final Config config, final String section, final String setting, final String fallback)
specifier|private
name|String
name|getValue
parameter_list|(
specifier|final
name|Config
name|config
parameter_list|,
specifier|final
name|String
name|section
parameter_list|,
specifier|final
name|String
name|setting
parameter_list|,
specifier|final
name|String
name|fallback
parameter_list|)
block|{
specifier|final
name|String
name|result
init|=
name|config
operator|.
name|getString
argument_list|(
name|section
argument_list|,
literal|null
argument_list|,
name|setting
argument_list|)
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|fallback
else|:
name|result
return|;
block|}
comment|/**      * Get the Repository for the given change, or null on error.      *      * @param change Change to get repo for,      * @return Repository or null.      */
DECL|method|openRepository (final Change change)
specifier|private
name|Repository
name|openRepository
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|)
block|{
return|return
name|openRepository
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Get the Repository for the given project name, or null on error.      *      * @param name Project to get repo for,      * @return Repository or null.      */
DECL|method|openRepository (final Project.NameKey name)
specifier|private
name|Repository
name|openRepository
parameter_list|(
specifier|final
name|Project
operator|.
name|NameKey
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|repoManager
operator|.
name|openRepository
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|err
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot open repository "
operator|+
name|name
operator|.
name|get
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|addArg (List<String> args, String name, String value)
specifier|private
name|void
name|addArg
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Fire the Patchset Created Hook.      *      * @param change The change itself.      * @param patchSet The Patchset that was created.      */
DECL|method|doPatchsetCreatedHook (final Change change, final PatchSet patchSet)
specifier|public
name|void
name|doPatchsetCreatedHook
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|,
specifier|final
name|PatchSet
name|patchSet
parameter_list|)
block|{
specifier|final
name|PatchSetCreatedEvent
name|event
init|=
operator|new
name|PatchSetCreatedEvent
argument_list|()
decl_stmt|;
specifier|final
name|AccountState
name|uploader
init|=
name|accountCache
operator|.
name|get
argument_list|(
name|patchSet
operator|.
name|getUploader
argument_list|()
argument_list|)
decl_stmt|;
name|event
operator|.
name|change
operator|=
name|eventFactory
operator|.
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|event
operator|.
name|patchSet
operator|=
name|eventFactory
operator|.
name|asPatchSetAttribute
argument_list|(
name|patchSet
argument_list|)
expr_stmt|;
name|event
operator|.
name|uploader
operator|=
name|eventFactory
operator|.
name|asAccountAttribute
argument_list|(
name|uploader
operator|.
name|getAccount
argument_list|()
argument_list|)
expr_stmt|;
name|fireEvent
argument_list|(
name|change
argument_list|,
name|event
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--change"
argument_list|,
name|event
operator|.
name|change
operator|.
name|id
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--change-url"
argument_list|,
name|event
operator|.
name|change
operator|.
name|url
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--project"
argument_list|,
name|event
operator|.
name|change
operator|.
name|project
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--branch"
argument_list|,
name|event
operator|.
name|change
operator|.
name|branch
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--uploader"
argument_list|,
name|getDisplayName
argument_list|(
name|uploader
operator|.
name|getAccount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--commit"
argument_list|,
name|event
operator|.
name|patchSet
operator|.
name|revision
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--patchset"
argument_list|,
name|event
operator|.
name|patchSet
operator|.
name|number
argument_list|)
expr_stmt|;
name|runHook
argument_list|(
name|openRepository
argument_list|(
name|change
argument_list|)
argument_list|,
name|patchsetCreatedHook
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
comment|/**      * Fire the Comment Added Hook.      *      * @param change The change itself.      * @param patchSet The patchset this comment is related to.      * @param account The gerrit user who commited the change.      * @param comment The comment given.      * @param approvals Map of Approval Categories and Scores      */
DECL|method|doCommentAddedHook (final Change change, final Account account, final PatchSet patchSet, final String comment, final Map<ApprovalCategory.Id, ApprovalCategoryValue.Id> approvals)
specifier|public
name|void
name|doCommentAddedHook
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|,
specifier|final
name|Account
name|account
parameter_list|,
specifier|final
name|PatchSet
name|patchSet
parameter_list|,
specifier|final
name|String
name|comment
parameter_list|,
specifier|final
name|Map
argument_list|<
name|ApprovalCategory
operator|.
name|Id
argument_list|,
name|ApprovalCategoryValue
operator|.
name|Id
argument_list|>
name|approvals
parameter_list|)
block|{
specifier|final
name|CommentAddedEvent
name|event
init|=
operator|new
name|CommentAddedEvent
argument_list|()
decl_stmt|;
name|event
operator|.
name|change
operator|=
name|eventFactory
operator|.
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|event
operator|.
name|author
operator|=
name|eventFactory
operator|.
name|asAccountAttribute
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|event
operator|.
name|patchSet
operator|=
name|eventFactory
operator|.
name|asPatchSetAttribute
argument_list|(
name|patchSet
argument_list|)
expr_stmt|;
name|event
operator|.
name|comment
operator|=
name|comment
expr_stmt|;
if|if
condition|(
name|approvals
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|event
operator|.
name|approvals
operator|=
operator|new
name|ApprovalAttribute
index|[
name|approvals
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ApprovalCategory
operator|.
name|Id
argument_list|,
name|ApprovalCategoryValue
operator|.
name|Id
argument_list|>
name|approval
range|:
name|approvals
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|event
operator|.
name|approvals
index|[
name|i
operator|++
index|]
operator|=
name|getApprovalAttribute
argument_list|(
name|approval
argument_list|)
expr_stmt|;
block|}
block|}
name|fireEvent
argument_list|(
name|change
argument_list|,
name|event
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--change"
argument_list|,
name|event
operator|.
name|change
operator|.
name|id
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--change-url"
argument_list|,
name|event
operator|.
name|change
operator|.
name|url
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--project"
argument_list|,
name|event
operator|.
name|change
operator|.
name|project
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--branch"
argument_list|,
name|event
operator|.
name|change
operator|.
name|branch
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--author"
argument_list|,
name|getDisplayName
argument_list|(
name|account
argument_list|)
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--commit"
argument_list|,
name|event
operator|.
name|patchSet
operator|.
name|revision
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--comment"
argument_list|,
name|comment
operator|==
literal|null
condition|?
literal|""
else|:
name|comment
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ApprovalCategory
operator|.
name|Id
argument_list|,
name|ApprovalCategoryValue
operator|.
name|Id
argument_list|>
name|approval
range|:
name|approvals
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--"
operator|+
name|approval
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|Short
operator|.
name|toString
argument_list|(
name|approval
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|runHook
argument_list|(
name|openRepository
argument_list|(
name|change
argument_list|)
argument_list|,
name|commentAddedHook
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
comment|/**      * Fire the Change Merged Hook.      *      * @param change The change itself.      * @param account The gerrit user who commited the change.      * @param patchSet The patchset that was merged.      */
DECL|method|doChangeMergedHook (final Change change, final Account account, final PatchSet patchSet)
specifier|public
name|void
name|doChangeMergedHook
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|,
specifier|final
name|Account
name|account
parameter_list|,
specifier|final
name|PatchSet
name|patchSet
parameter_list|)
block|{
specifier|final
name|ChangeMergedEvent
name|event
init|=
operator|new
name|ChangeMergedEvent
argument_list|()
decl_stmt|;
name|event
operator|.
name|change
operator|=
name|eventFactory
operator|.
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|event
operator|.
name|submitter
operator|=
name|eventFactory
operator|.
name|asAccountAttribute
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|event
operator|.
name|patchSet
operator|=
name|eventFactory
operator|.
name|asPatchSetAttribute
argument_list|(
name|patchSet
argument_list|)
expr_stmt|;
name|fireEvent
argument_list|(
name|change
argument_list|,
name|event
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--change"
argument_list|,
name|event
operator|.
name|change
operator|.
name|id
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--change-url"
argument_list|,
name|event
operator|.
name|change
operator|.
name|url
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--project"
argument_list|,
name|event
operator|.
name|change
operator|.
name|project
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--branch"
argument_list|,
name|event
operator|.
name|change
operator|.
name|branch
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--submitter"
argument_list|,
name|getDisplayName
argument_list|(
name|account
argument_list|)
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--commit"
argument_list|,
name|event
operator|.
name|patchSet
operator|.
name|revision
argument_list|)
expr_stmt|;
name|runHook
argument_list|(
name|openRepository
argument_list|(
name|change
argument_list|)
argument_list|,
name|changeMergedHook
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
comment|/**      * Fire the Change Abandoned Hook.      *      * @param change The change itself.      * @param account The gerrit user who abandoned the change.      * @param reason Reason for abandoning the change.      */
DECL|method|doChangeAbandonedHook (final Change change, final Account account, final String reason)
specifier|public
name|void
name|doChangeAbandonedHook
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|,
specifier|final
name|Account
name|account
parameter_list|,
specifier|final
name|String
name|reason
parameter_list|)
block|{
specifier|final
name|ChangeAbandonedEvent
name|event
init|=
operator|new
name|ChangeAbandonedEvent
argument_list|()
decl_stmt|;
name|event
operator|.
name|change
operator|=
name|eventFactory
operator|.
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|event
operator|.
name|abandoner
operator|=
name|eventFactory
operator|.
name|asAccountAttribute
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|event
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
name|fireEvent
argument_list|(
name|change
argument_list|,
name|event
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--change"
argument_list|,
name|event
operator|.
name|change
operator|.
name|id
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--change-url"
argument_list|,
name|event
operator|.
name|change
operator|.
name|url
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--project"
argument_list|,
name|event
operator|.
name|change
operator|.
name|project
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--branch"
argument_list|,
name|event
operator|.
name|change
operator|.
name|branch
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--abandoner"
argument_list|,
name|getDisplayName
argument_list|(
name|account
argument_list|)
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--reason"
argument_list|,
name|reason
operator|==
literal|null
condition|?
literal|""
else|:
name|reason
argument_list|)
expr_stmt|;
name|runHook
argument_list|(
name|openRepository
argument_list|(
name|change
argument_list|)
argument_list|,
name|changeAbandonedHook
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
comment|/**      * Fire the Change Restored Hook.      *      * @param change The change itself.      * @param account The gerrit user who restored the change.      * @param reason Reason for restoring the change.      */
DECL|method|doChangeRestoreHook (final Change change, final Account account, final String reason)
specifier|public
name|void
name|doChangeRestoreHook
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|,
specifier|final
name|Account
name|account
parameter_list|,
specifier|final
name|String
name|reason
parameter_list|)
block|{
specifier|final
name|ChangeRestoreEvent
name|event
init|=
operator|new
name|ChangeRestoreEvent
argument_list|()
decl_stmt|;
name|event
operator|.
name|change
operator|=
name|eventFactory
operator|.
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|event
operator|.
name|restorer
operator|=
name|eventFactory
operator|.
name|asAccountAttribute
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|event
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
name|fireEvent
argument_list|(
name|change
argument_list|,
name|event
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--change"
argument_list|,
name|event
operator|.
name|change
operator|.
name|id
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--change-url"
argument_list|,
name|event
operator|.
name|change
operator|.
name|url
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--project"
argument_list|,
name|event
operator|.
name|change
operator|.
name|project
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--branch"
argument_list|,
name|event
operator|.
name|change
operator|.
name|branch
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--restorer"
argument_list|,
name|getDisplayName
argument_list|(
name|account
argument_list|)
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--reason"
argument_list|,
name|reason
operator|==
literal|null
condition|?
literal|""
else|:
name|reason
argument_list|)
expr_stmt|;
name|runHook
argument_list|(
name|openRepository
argument_list|(
name|change
argument_list|)
argument_list|,
name|changeRestoredHook
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
comment|/**      * Fire the Ref Updated Hook      * @param project The project the ref update occured on      * @param refUpdate An actual RefUpdate object      * @param account The gerrit user who moved the ref      */
DECL|method|doRefUpdatedHook (final Branch.NameKey refName, final RefUpdate refUpdate, final Account account)
specifier|public
name|void
name|doRefUpdatedHook
parameter_list|(
specifier|final
name|Branch
operator|.
name|NameKey
name|refName
parameter_list|,
specifier|final
name|RefUpdate
name|refUpdate
parameter_list|,
specifier|final
name|Account
name|account
parameter_list|)
block|{
name|doRefUpdatedHook
argument_list|(
name|refName
argument_list|,
name|refUpdate
operator|.
name|getOldObjectId
argument_list|()
argument_list|,
name|refUpdate
operator|.
name|getNewObjectId
argument_list|()
argument_list|,
name|account
argument_list|)
expr_stmt|;
block|}
comment|/**      * Fire the Ref Updated Hook      * @param refName The Branch.NameKey of the ref that was updated      * @param oldId The ref's old id      * @param newId The ref's new id      * @param account The gerrit user who moved the ref      */
DECL|method|doRefUpdatedHook (final Branch.NameKey refName, final ObjectId oldId, final ObjectId newId, final Account account)
specifier|public
name|void
name|doRefUpdatedHook
parameter_list|(
specifier|final
name|Branch
operator|.
name|NameKey
name|refName
parameter_list|,
specifier|final
name|ObjectId
name|oldId
parameter_list|,
specifier|final
name|ObjectId
name|newId
parameter_list|,
specifier|final
name|Account
name|account
parameter_list|)
block|{
specifier|final
name|RefUpdatedEvent
name|event
init|=
operator|new
name|RefUpdatedEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|account
operator|!=
literal|null
condition|)
block|{
name|event
operator|.
name|submitter
operator|=
name|eventFactory
operator|.
name|asAccountAttribute
argument_list|(
name|account
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|refUpdate
operator|=
name|eventFactory
operator|.
name|asRefUpdateAttribute
argument_list|(
name|oldId
argument_list|,
name|newId
argument_list|,
name|refName
argument_list|)
expr_stmt|;
name|fireEvent
argument_list|(
name|refName
argument_list|,
name|event
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--oldrev"
argument_list|,
name|event
operator|.
name|refUpdate
operator|.
name|oldRev
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--newrev"
argument_list|,
name|event
operator|.
name|refUpdate
operator|.
name|newRev
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--refname"
argument_list|,
name|event
operator|.
name|refUpdate
operator|.
name|refName
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--project"
argument_list|,
name|event
operator|.
name|refUpdate
operator|.
name|project
argument_list|)
expr_stmt|;
if|if
condition|(
name|account
operator|!=
literal|null
condition|)
block|{
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--submitter"
argument_list|,
name|getDisplayName
argument_list|(
name|account
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|runHook
argument_list|(
name|openRepository
argument_list|(
name|refName
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|,
name|refUpdatedHook
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|doClaSignupHook (Account account, ContributorAgreement cla)
specifier|public
name|void
name|doClaSignupHook
parameter_list|(
name|Account
name|account
parameter_list|,
name|ContributorAgreement
name|cla
parameter_list|)
block|{
if|if
condition|(
name|account
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--submitter"
argument_list|,
name|getDisplayName
argument_list|(
name|account
argument_list|)
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--user-id"
argument_list|,
name|account
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|addArg
argument_list|(
name|args
argument_list|,
literal|"--cla-id"
argument_list|,
name|cla
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runHook
argument_list|(
name|claSignedHook
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fireEvent (final Change change, final ChangeEvent event)
specifier|private
name|void
name|fireEvent
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|,
specifier|final
name|ChangeEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|ChangeListenerHolder
name|holder
range|:
name|listeners
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|isVisibleTo
argument_list|(
name|change
argument_list|,
name|holder
operator|.
name|user
argument_list|)
condition|)
block|{
name|holder
operator|.
name|listener
operator|.
name|onChangeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|fireEvent (Branch.NameKey branchName, final ChangeEvent event)
specifier|private
name|void
name|fireEvent
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branchName
parameter_list|,
specifier|final
name|ChangeEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|ChangeListenerHolder
name|holder
range|:
name|listeners
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|isVisibleTo
argument_list|(
name|branchName
argument_list|,
name|holder
operator|.
name|user
argument_list|)
condition|)
block|{
name|holder
operator|.
name|listener
operator|.
name|onChangeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isVisibleTo (Change change, IdentifiedUser user)
specifier|private
name|boolean
name|isVisibleTo
parameter_list|(
name|Change
name|change
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|)
block|{
specifier|final
name|ProjectState
name|pe
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pe
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|ProjectControl
name|pc
init|=
name|pe
operator|.
name|controlFor
argument_list|(
name|user
argument_list|)
decl_stmt|;
return|return
name|pc
operator|.
name|controlFor
argument_list|(
name|change
argument_list|)
operator|.
name|isVisible
argument_list|()
return|;
block|}
DECL|method|isVisibleTo (Branch.NameKey branchName, IdentifiedUser user)
specifier|private
name|boolean
name|isVisibleTo
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branchName
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|)
block|{
specifier|final
name|ProjectState
name|pe
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|branchName
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pe
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|ProjectControl
name|pc
init|=
name|pe
operator|.
name|controlFor
argument_list|(
name|user
argument_list|)
decl_stmt|;
return|return
name|pc
operator|.
name|controlForRef
argument_list|(
name|branchName
argument_list|)
operator|.
name|isVisible
argument_list|()
return|;
block|}
comment|/**      * Create an ApprovalAttribute for the given approval suitable for serialization to JSON.      * @param approval      * @return object suitable for serialization to JSON      */
DECL|method|getApprovalAttribute ( Entry<ApprovalCategory.Id, ApprovalCategoryValue.Id> approval)
specifier|private
name|ApprovalAttribute
name|getApprovalAttribute
parameter_list|(
name|Entry
argument_list|<
name|ApprovalCategory
operator|.
name|Id
argument_list|,
name|ApprovalCategoryValue
operator|.
name|Id
argument_list|>
name|approval
parameter_list|)
block|{
name|ApprovalAttribute
name|a
init|=
operator|new
name|ApprovalAttribute
argument_list|()
decl_stmt|;
name|a
operator|.
name|type
operator|=
name|approval
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|ApprovalType
name|at
init|=
name|approvalTypes
operator|.
name|byId
argument_list|(
name|approval
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|description
operator|=
name|at
operator|.
name|getCategory
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|a
operator|.
name|value
operator|=
name|Short
operator|.
name|toString
argument_list|(
name|approval
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
comment|/**      * Get the display name for the given account.      *      * @param account Account to get name for.      * @return Name for this account.      */
DECL|method|getDisplayName (final Account account)
specifier|private
name|String
name|getDisplayName
parameter_list|(
specifier|final
name|Account
name|account
parameter_list|)
block|{
if|if
condition|(
name|account
operator|!=
literal|null
condition|)
block|{
name|String
name|result
init|=
operator|(
name|account
operator|.
name|getFullName
argument_list|()
operator|==
literal|null
operator|)
condition|?
name|anonymousCowardName
else|:
name|account
operator|.
name|getFullName
argument_list|()
decl_stmt|;
if|if
condition|(
name|account
operator|.
name|getPreferredEmail
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|+=
literal|" ("
operator|+
name|account
operator|.
name|getPreferredEmail
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
return|return
name|anonymousCowardName
return|;
block|}
comment|/**    * Run a hook.    *    * @param repo repository to run the hook for.    * @param hook the hook to execute.    * @param args Arguments to use to run the hook.    */
DECL|method|runHook (Repository repo, File hook, List<String> args)
specifier|private
specifier|synchronized
name|void
name|runHook
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|File
name|hook
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|hook
operator|.
name|exists
argument_list|()
condition|)
block|{
name|hookQueue
operator|.
name|execute
argument_list|(
operator|new
name|HookTask
argument_list|(
name|repo
argument_list|,
name|hook
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|runHook (File hook, List<String> args)
specifier|private
specifier|synchronized
name|void
name|runHook
parameter_list|(
name|File
name|hook
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
if|if
condition|(
name|hook
operator|.
name|exists
argument_list|()
condition|)
block|{
name|hookQueue
operator|.
name|execute
argument_list|(
operator|new
name|HookTask
argument_list|(
literal|null
argument_list|,
name|hook
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|HookTask
specifier|private
specifier|final
class|class
name|HookTask
implements|implements
name|Runnable
block|{
DECL|field|repo
specifier|private
specifier|final
name|Repository
name|repo
decl_stmt|;
DECL|field|hook
specifier|private
specifier|final
name|File
name|hook
decl_stmt|;
DECL|field|args
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
decl_stmt|;
DECL|method|HookTask (Repository repo, File hook, List<String> args)
specifier|private
name|HookTask
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|File
name|hook
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|this
operator|.
name|repo
operator|=
name|repo
expr_stmt|;
name|this
operator|.
name|hook
operator|=
name|hook
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|argv
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
operator|+
name|args
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|argv
operator|.
name|add
argument_list|(
name|hook
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|argv
operator|.
name|addAll
argument_list|(
name|args
argument_list|)
expr_stmt|;
specifier|final
name|ProcessBuilder
name|pb
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|argv
argument_list|)
decl_stmt|;
name|pb
operator|.
name|redirectErrorStream
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|pb
operator|.
name|directory
argument_list|(
name|repo
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
name|pb
operator|.
name|environment
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"GIT_DIR"
argument_list|,
name|repo
operator|.
name|getDirectory
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Process
name|ps
init|=
name|pb
operator|.
name|start
argument_list|()
decl_stmt|;
name|ps
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|ps
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"hook["
operator|+
name|hook
operator|.
name|getName
argument_list|()
operator|+
literal|"] output: "
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|closeErr
parameter_list|)
block|{           }
name|ps
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error running hook "
operator|+
name|hook
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"hook "
operator|+
name|hook
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

