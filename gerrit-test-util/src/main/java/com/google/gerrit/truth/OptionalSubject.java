begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.truth
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|truth
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertAbout
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|DefaultSubject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|FailureStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|SubjectFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_class
DECL|class|OptionalSubject
specifier|public
class|class
name|OptionalSubject
parameter_list|<
name|S
extends|extends
name|Subject
parameter_list|<
name|S
parameter_list|,
name|?
super|super
name|T
parameter_list|>
parameter_list|,
name|T
parameter_list|>
extends|extends
name|Subject
argument_list|<
name|OptionalSubject
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|T
argument_list|>
argument_list|>
block|{
DECL|field|valueAssertThatFunction
specifier|private
specifier|final
name|Function
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
extends|extends
name|S
argument_list|>
name|valueAssertThatFunction
decl_stmt|;
DECL|method|assertThat ( Optional<T> optional, Function<? super T, ? extends S> elementAssertThatFunction)
specifier|public
specifier|static
parameter_list|<
name|S
extends|extends
name|Subject
argument_list|<
name|S
argument_list|,
name|?
super|super
name|T
argument_list|>
parameter_list|,
name|T
parameter_list|>
name|OptionalSubject
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|assertThat
parameter_list|(
name|Optional
argument_list|<
name|T
argument_list|>
name|optional
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
extends|extends
name|S
argument_list|>
name|elementAssertThatFunction
parameter_list|)
block|{
name|OptionalSubjectFactory
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|optionalSubjectFactory
init|=
operator|new
name|OptionalSubjectFactory
argument_list|<>
argument_list|(
name|elementAssertThatFunction
argument_list|)
decl_stmt|;
return|return
name|assertAbout
argument_list|(
name|optionalSubjectFactory
argument_list|)
operator|.
name|that
argument_list|(
name|optional
argument_list|)
return|;
block|}
DECL|method|assertThat (Optional<?> optional)
specifier|public
specifier|static
name|OptionalSubject
argument_list|<
name|DefaultSubject
argument_list|,
name|?
argument_list|>
name|assertThat
parameter_list|(
name|Optional
argument_list|<
name|?
argument_list|>
name|optional
parameter_list|)
block|{
comment|// Unfortunately, we need to cast to DefaultSubject as Truth.assertThat()
comment|// only returns Subject<DefaultSubject, Object>. There shouldn't be a way
comment|// for that method not to return a DefaultSubject because the generic type
comment|// definitions of a Subject are quite strict.
name|Function
argument_list|<
name|Object
argument_list|,
name|DefaultSubject
argument_list|>
name|valueAssertThatFunction
init|=
name|value
lambda|->
operator|(
name|DefaultSubject
operator|)
name|Truth
operator|.
name|assertThat
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|assertThat
argument_list|(
name|optional
argument_list|,
name|valueAssertThatFunction
argument_list|)
return|;
block|}
DECL|method|OptionalSubject ( FailureStrategy failureStrategy, Optional<T> optional, Function<? super T, ? extends S> valueAssertThatFunction)
specifier|private
name|OptionalSubject
parameter_list|(
name|FailureStrategy
name|failureStrategy
parameter_list|,
name|Optional
argument_list|<
name|T
argument_list|>
name|optional
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
extends|extends
name|S
argument_list|>
name|valueAssertThatFunction
parameter_list|)
block|{
name|super
argument_list|(
name|failureStrategy
argument_list|,
name|optional
argument_list|)
expr_stmt|;
name|this
operator|.
name|valueAssertThatFunction
operator|=
name|valueAssertThatFunction
expr_stmt|;
block|}
DECL|method|isPresent ()
specifier|public
name|void
name|isPresent
parameter_list|()
block|{
name|isNotNull
argument_list|()
expr_stmt|;
name|Optional
argument_list|<
name|T
argument_list|>
name|optional
init|=
name|actual
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|optional
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"has a value"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isAbsent ()
specifier|public
name|void
name|isAbsent
parameter_list|()
block|{
name|isNotNull
argument_list|()
expr_stmt|;
name|Optional
argument_list|<
name|T
argument_list|>
name|optional
init|=
name|actual
argument_list|()
decl_stmt|;
if|if
condition|(
name|optional
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"does not have a value"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isEmpty ()
specifier|public
name|void
name|isEmpty
parameter_list|()
block|{
name|isAbsent
argument_list|()
expr_stmt|;
block|}
DECL|method|value ()
specifier|public
name|S
name|value
parameter_list|()
block|{
name|isNotNull
argument_list|()
expr_stmt|;
name|isPresent
argument_list|()
expr_stmt|;
name|Optional
argument_list|<
name|T
argument_list|>
name|optional
init|=
name|actual
argument_list|()
decl_stmt|;
return|return
name|valueAssertThatFunction
operator|.
name|apply
argument_list|(
name|optional
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|class|OptionalSubjectFactory
specifier|private
specifier|static
class|class
name|OptionalSubjectFactory
parameter_list|<
name|S
extends|extends
name|Subject
parameter_list|<
name|S
parameter_list|,
name|?
super|super
name|T
parameter_list|>
parameter_list|,
name|T
parameter_list|>
extends|extends
name|SubjectFactory
argument_list|<
name|OptionalSubject
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|T
argument_list|>
argument_list|>
block|{
DECL|field|valueAssertThatFunction
specifier|private
name|Function
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
extends|extends
name|S
argument_list|>
name|valueAssertThatFunction
decl_stmt|;
DECL|method|OptionalSubjectFactory (Function<? super T, ? extends S> valueAssertThatFunction)
name|OptionalSubjectFactory
parameter_list|(
name|Function
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
extends|extends
name|S
argument_list|>
name|valueAssertThatFunction
parameter_list|)
block|{
name|this
operator|.
name|valueAssertThatFunction
operator|=
name|valueAssertThatFunction
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSubject (FailureStrategy failureStrategy, Optional<T> optional)
specifier|public
name|OptionalSubject
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|getSubject
parameter_list|(
name|FailureStrategy
name|failureStrategy
parameter_list|,
name|Optional
argument_list|<
name|T
argument_list|>
name|optional
parameter_list|)
block|{
return|return
operator|new
name|OptionalSubject
argument_list|<>
argument_list|(
name|failureStrategy
argument_list|,
name|optional
argument_list|,
name|valueAssertThatFunction
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

