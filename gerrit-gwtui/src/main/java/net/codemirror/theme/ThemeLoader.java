begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|net.codemirror.theme
package|package
name|net
operator|.
name|codemirror
operator|.
name|theme
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Theme
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|StyleInjector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|resources
operator|.
name|client
operator|.
name|ExternalTextResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|resources
operator|.
name|client
operator|.
name|ResourceCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|resources
operator|.
name|client
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|resources
operator|.
name|client
operator|.
name|TextResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_comment
comment|/** Dynamically loads a known CodeMirror theme's CSS */
end_comment

begin_class
DECL|class|ThemeLoader
specifier|public
class|class
name|ThemeLoader
block|{
DECL|field|THEMES
specifier|private
specifier|static
specifier|final
name|ExternalTextResource
index|[]
name|THEMES
init|=
block|{
name|Themes
operator|.
name|I
operator|.
name|eclipse
argument_list|()
block|,
name|Themes
operator|.
name|I
operator|.
name|elegant
argument_list|()
block|,
name|Themes
operator|.
name|I
operator|.
name|midnight
argument_list|()
block|,
name|Themes
operator|.
name|I
operator|.
name|neat
argument_list|()
block|,
name|Themes
operator|.
name|I
operator|.
name|night
argument_list|()
block|,
name|Themes
operator|.
name|I
operator|.
name|twilight
argument_list|()
block|,   }
decl_stmt|;
DECL|field|loaded
specifier|private
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|Theme
argument_list|>
name|loaded
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|Theme
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
DECL|method|loadTheme (final Theme theme, final AsyncCallback<Void> cb)
specifier|public
specifier|static
specifier|final
name|void
name|loadTheme
parameter_list|(
specifier|final
name|Theme
name|theme
parameter_list|,
specifier|final
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
name|cb
parameter_list|)
block|{
if|if
condition|(
name|loaded
operator|.
name|contains
argument_list|(
name|theme
argument_list|)
condition|)
block|{
name|cb
operator|.
name|onSuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|ExternalTextResource
name|resource
init|=
name|findTheme
argument_list|(
name|theme
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|cb
operator|.
name|onFailure
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"unknown theme "
operator|+
name|theme
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|resource
operator|.
name|getText
argument_list|(
operator|new
name|ResourceCallback
argument_list|<
name|TextResource
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|TextResource
name|resource
parameter_list|)
block|{
name|StyleInjector
operator|.
name|inject
argument_list|(
name|resource
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|loaded
operator|.
name|add
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|cb
operator|.
name|onSuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onError
parameter_list|(
name|ResourceException
name|e
parameter_list|)
block|{
name|cb
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|e
parameter_list|)
block|{
name|cb
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findTheme (Theme theme)
specifier|private
specifier|static
specifier|final
name|ExternalTextResource
name|findTheme
parameter_list|(
name|Theme
name|theme
parameter_list|)
block|{
for|for
control|(
name|ExternalTextResource
name|r
range|:
name|THEMES
control|)
block|{
if|if
condition|(
name|theme
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|r
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|ThemeLoader ()
specifier|private
name|ThemeLoader
parameter_list|()
block|{   }
block|}
end_class

end_unit

