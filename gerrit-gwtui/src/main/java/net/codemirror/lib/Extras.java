begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|net.codemirror.lib
package|package
name|net
operator|.
name|codemirror
operator|.
name|lib
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Display
operator|.
name|INLINE_BLOCK
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
operator|.
name|PX
import|;
end_import

begin_import
import|import static
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
operator|.
name|style
import|;
end_import

begin_import
import|import static
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
operator|.
name|LineClassWhere
operator|.
name|WRAP
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|FormatUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|RangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|blame
operator|.
name|BlameInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|DisplaySide
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Natives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JavaScriptObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArrayString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
operator|.
name|LineHandle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/** Additional features added to CodeMirror by Gerrit Code Review. */
end_comment

begin_class
DECL|class|Extras
specifier|public
class|class
name|Extras
block|{
DECL|field|ANNOTATION_GUTTER_ID
specifier|private
specifier|static
specifier|final
name|String
name|ANNOTATION_GUTTER_ID
init|=
literal|"CodeMirror-lint-markers"
decl_stmt|;
DECL|field|C
specifier|private
specifier|static
specifier|final
name|BlameConfig
name|C
init|=
name|GWT
operator|.
name|create
argument_list|(
name|BlameConfig
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|get (CodeMirror c)
specifier|static
specifier|final
specifier|native
name|Extras
name|get
parameter_list|(
name|CodeMirror
name|c
parameter_list|)
comment|/*-{ return c.gerritExtras }-*/
function_decl|;
DECL|method|set (CodeMirror c, Extras e)
specifier|private
specifier|static
specifier|native
name|void
name|set
parameter_list|(
name|CodeMirror
name|c
parameter_list|,
name|Extras
name|e
parameter_list|)
comment|/*-{ c.gerritExtras = e }-*/
function_decl|;
DECL|method|attach (CodeMirror c)
specifier|static
name|void
name|attach
parameter_list|(
name|CodeMirror
name|c
parameter_list|)
block|{
name|set
argument_list|(
name|c
argument_list|,
operator|new
name|Extras
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|cm
specifier|private
specifier|final
name|CodeMirror
name|cm
decl_stmt|;
DECL|field|margin
specifier|private
name|Element
name|margin
decl_stmt|;
DECL|field|side
specifier|private
name|DisplaySide
name|side
decl_stmt|;
DECL|field|charWidthPx
specifier|private
name|double
name|charWidthPx
decl_stmt|;
DECL|field|lineHeightPx
specifier|private
name|double
name|lineHeightPx
decl_stmt|;
DECL|field|activeLine
specifier|private
name|LineHandle
name|activeLine
decl_stmt|;
DECL|field|annotated
specifier|private
name|boolean
name|annotated
decl_stmt|;
DECL|method|Extras (CodeMirror cm)
specifier|private
name|Extras
parameter_list|(
name|CodeMirror
name|cm
parameter_list|)
block|{
name|this
operator|.
name|cm
operator|=
name|cm
expr_stmt|;
block|}
DECL|method|side ()
specifier|public
name|DisplaySide
name|side
parameter_list|()
block|{
return|return
name|side
return|;
block|}
DECL|method|side (DisplaySide s)
specifier|public
name|void
name|side
parameter_list|(
name|DisplaySide
name|s
parameter_list|)
block|{
name|side
operator|=
name|s
expr_stmt|;
block|}
DECL|method|charWidthPx ()
specifier|public
name|double
name|charWidthPx
parameter_list|()
block|{
if|if
condition|(
name|charWidthPx
operator|<=
literal|1
condition|)
block|{
name|int
name|len
init|=
literal|100
decl_stmt|;
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|'m'
argument_list|)
expr_stmt|;
block|}
name|Element
name|e
init|=
name|DOM
operator|.
name|createSpan
argument_list|()
decl_stmt|;
name|e
operator|.
name|getStyle
argument_list|()
operator|.
name|setDisplay
argument_list|(
name|INLINE_BLOCK
argument_list|)
expr_stmt|;
name|e
operator|.
name|setInnerText
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|measure
argument_list|()
operator|.
name|appendChild
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|charWidthPx
operator|=
operator|(
operator|(
name|double
operator|)
name|e
operator|.
name|getOffsetWidth
argument_list|()
operator|)
operator|/
name|len
expr_stmt|;
name|e
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
block|}
return|return
name|charWidthPx
return|;
block|}
DECL|method|lineHeightPx ()
specifier|public
name|double
name|lineHeightPx
parameter_list|()
block|{
if|if
condition|(
name|lineHeightPx
operator|<=
literal|1
condition|)
block|{
name|Element
name|p
init|=
name|DOM
operator|.
name|createDiv
argument_list|()
decl_stmt|;
name|int
name|lines
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lines
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|e
init|=
name|DOM
operator|.
name|createDiv
argument_list|()
decl_stmt|;
name|p
operator|.
name|appendChild
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Element
name|pre
init|=
name|DOM
operator|.
name|createElement
argument_list|(
literal|"pre"
argument_list|)
decl_stmt|;
name|pre
operator|.
name|setInnerText
argument_list|(
literal|"gqyÅÅ»Å¹Å"
argument_list|)
expr_stmt|;
name|e
operator|.
name|appendChild
argument_list|(
name|pre
argument_list|)
expr_stmt|;
block|}
name|cm
operator|.
name|measure
argument_list|()
operator|.
name|appendChild
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|lineHeightPx
operator|=
operator|(
operator|(
name|double
operator|)
name|p
operator|.
name|getOffsetHeight
argument_list|()
operator|)
operator|/
name|lines
expr_stmt|;
name|p
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
block|}
return|return
name|lineHeightPx
return|;
block|}
DECL|method|lineLength (int columns)
specifier|public
name|void
name|lineLength
parameter_list|(
name|int
name|columns
parameter_list|)
block|{
if|if
condition|(
name|margin
operator|==
literal|null
condition|)
block|{
name|margin
operator|=
name|DOM
operator|.
name|createDiv
argument_list|()
expr_stmt|;
name|margin
operator|.
name|setClassName
argument_list|(
name|style
argument_list|()
operator|.
name|margin
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|mover
argument_list|()
operator|.
name|appendChild
argument_list|(
name|margin
argument_list|)
expr_stmt|;
block|}
name|margin
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
name|columns
operator|*
name|charWidthPx
argument_list|()
argument_list|,
name|PX
argument_list|)
expr_stmt|;
block|}
DECL|method|showTabs (boolean show)
specifier|public
name|void
name|showTabs
parameter_list|(
name|boolean
name|show
parameter_list|)
block|{
name|Element
name|e
init|=
name|cm
operator|.
name|getWrapperElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|show
condition|)
block|{
name|e
operator|.
name|addClassName
argument_list|(
name|style
argument_list|()
operator|.
name|showTabs
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|e
operator|.
name|removeClassName
argument_list|(
name|style
argument_list|()
operator|.
name|showTabs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|hasActiveLine ()
specifier|public
specifier|final
name|boolean
name|hasActiveLine
parameter_list|()
block|{
return|return
name|activeLine
operator|!=
literal|null
return|;
block|}
DECL|method|activeLine ()
specifier|public
specifier|final
name|LineHandle
name|activeLine
parameter_list|()
block|{
return|return
name|activeLine
return|;
block|}
DECL|method|activeLine (LineHandle line)
specifier|public
specifier|final
name|boolean
name|activeLine
parameter_list|(
name|LineHandle
name|line
parameter_list|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|activeLine
argument_list|,
name|line
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|activeLine
operator|!=
literal|null
condition|)
block|{
name|cm
operator|.
name|removeLineClass
argument_list|(
name|activeLine
argument_list|,
name|WRAP
argument_list|,
name|style
argument_list|()
operator|.
name|activeLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|activeLine
operator|=
name|line
expr_stmt|;
name|cm
operator|.
name|addLineClass
argument_list|(
name|activeLine
argument_list|,
name|WRAP
argument_list|,
name|style
argument_list|()
operator|.
name|activeLine
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|clearActiveLine ()
specifier|public
specifier|final
name|void
name|clearActiveLine
parameter_list|()
block|{
if|if
condition|(
name|activeLine
operator|!=
literal|null
condition|)
block|{
name|cm
operator|.
name|removeLineClass
argument_list|(
name|activeLine
argument_list|,
name|WRAP
argument_list|,
name|style
argument_list|()
operator|.
name|activeLine
argument_list|()
argument_list|)
expr_stmt|;
name|activeLine
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|isAnnotated ()
specifier|public
name|boolean
name|isAnnotated
parameter_list|()
block|{
return|return
name|annotated
return|;
block|}
DECL|method|clearAnnotations ()
specifier|public
specifier|final
name|void
name|clearAnnotations
parameter_list|()
block|{
name|JsArrayString
name|gutters
init|=
operator|(
operator|(
name|JsArrayString
operator|)
name|JsArrayString
operator|.
name|createArray
argument_list|()
operator|)
decl_stmt|;
name|cm
operator|.
name|setOption
argument_list|(
literal|"gutters"
argument_list|,
name|gutters
argument_list|)
expr_stmt|;
name|annotated
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|setAnnotations (JsArray<BlameInfo> blameInfos)
specifier|public
specifier|final
name|void
name|setAnnotations
parameter_list|(
name|JsArray
argument_list|<
name|BlameInfo
argument_list|>
name|blameInfos
parameter_list|)
block|{
if|if
condition|(
name|blameInfos
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|setBlameInfo
argument_list|(
name|blameInfos
argument_list|)
expr_stmt|;
name|JsArrayString
name|gutters
init|=
operator|(
operator|(
name|JsArrayString
operator|)
name|JsArrayString
operator|.
name|createArray
argument_list|()
operator|)
decl_stmt|;
name|gutters
operator|.
name|push
argument_list|(
name|ANNOTATION_GUTTER_ID
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setOption
argument_list|(
literal|"gutters"
argument_list|,
name|gutters
argument_list|)
expr_stmt|;
name|annotated
operator|=
literal|true
expr_stmt|;
name|DateTimeFormat
name|format
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|DateTimeFormat
operator|.
name|PredefinedFormat
operator|.
name|DATE_SHORT
argument_list|)
decl_stmt|;
name|JsArray
argument_list|<
name|LintLine
argument_list|>
name|annotations
init|=
name|JsArray
operator|.
name|createArray
argument_list|()
operator|.
name|cast
argument_list|()
decl_stmt|;
for|for
control|(
name|BlameInfo
name|blameInfo
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|blameInfos
argument_list|)
control|)
block|{
for|for
control|(
name|RangeInfo
name|range
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|blameInfo
operator|.
name|ranges
argument_list|()
argument_list|)
control|)
block|{
name|Date
name|commitTime
init|=
operator|new
name|Date
argument_list|(
name|blameInfo
operator|.
name|time
argument_list|()
operator|*
literal|1000L
argument_list|)
decl_stmt|;
name|String
name|shortId
init|=
name|blameInfo
operator|.
name|id
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|String
name|shortBlame
init|=
name|C
operator|.
name|shortBlameMsg
argument_list|(
name|shortId
argument_list|,
name|format
operator|.
name|format
argument_list|(
name|commitTime
argument_list|)
argument_list|,
name|blameInfo
operator|.
name|author
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|detailedBlame
init|=
name|C
operator|.
name|detailedBlameMsg
argument_list|(
name|blameInfo
operator|.
name|id
argument_list|()
argument_list|,
name|blameInfo
operator|.
name|author
argument_list|()
argument_list|,
name|FormatUtil
operator|.
name|mediumFormat
argument_list|(
name|commitTime
argument_list|)
argument_list|,
name|blameInfo
operator|.
name|commitMsg
argument_list|()
argument_list|)
decl_stmt|;
name|annotations
operator|.
name|push
argument_list|(
name|LintLine
operator|.
name|create
argument_list|(
name|shortBlame
argument_list|,
name|detailedBlame
argument_list|,
name|shortId
argument_list|,
name|Pos
operator|.
name|create
argument_list|(
name|range
operator|.
name|start
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|cm
operator|.
name|setOption
argument_list|(
literal|"lint"
argument_list|,
name|getAnnotation
argument_list|(
name|annotations
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAnnotation (JsArray<LintLine> annotations)
specifier|private
specifier|native
name|JavaScriptObject
name|getAnnotation
parameter_list|(
name|JsArray
argument_list|<
name|LintLine
argument_list|>
name|annotations
parameter_list|)
comment|/*-{      return {         getAnnotations: function(text, options, cm) { return annotations; }      };   }-*/
function_decl|;
DECL|method|getBlameInfo ()
specifier|public
specifier|final
specifier|native
name|JsArray
argument_list|<
name|BlameInfo
argument_list|>
name|getBlameInfo
parameter_list|()
comment|/*-{     return this.blameInfos;   }-*/
function_decl|;
DECL|method|setBlameInfo (JsArray<BlameInfo> blameInfos)
specifier|public
specifier|final
specifier|native
name|void
name|setBlameInfo
parameter_list|(
name|JsArray
argument_list|<
name|BlameInfo
argument_list|>
name|blameInfos
parameter_list|)
comment|/*-{     this['blameInfos'] = blameInfos;   }-*/
function_decl|;
DECL|method|toggleAnnotation ()
specifier|public
specifier|final
name|void
name|toggleAnnotation
parameter_list|()
block|{
name|toggleAnnotation
argument_list|(
name|getBlameInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|toggleAnnotation (JsArray<BlameInfo> blameInfos)
specifier|public
specifier|final
name|void
name|toggleAnnotation
parameter_list|(
name|JsArray
argument_list|<
name|BlameInfo
argument_list|>
name|blameInfos
parameter_list|)
block|{
if|if
condition|(
name|isAnnotated
argument_list|()
condition|)
block|{
name|clearAnnotations
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAnnotations
argument_list|(
name|blameInfos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

