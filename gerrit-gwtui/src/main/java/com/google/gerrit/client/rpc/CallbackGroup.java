begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.rpc
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Class for grouping together callbacks and calling them in order.  *<p>  * Callbacks are added to the group with {@link #add(AsyncCallback)}, which  * returns a wrapped callback suitable for passing to an asynchronous RPC call.  * The enclosing group buffers returned results and ensures that  * {@code onSuccess} is called exactly once for each callback in the group, in  * the same order that callbacks were added. This allows callers to, for  * example, use a {@link ScreenLoadCallback} as the last callback in the list  * and only display the screen once all callbacks have succeeded.  *<p>  * In the event of a failure, the<em>first</em> caught exception is sent to  *<em>all</em> callbacks' {@code onFailure} methods, in order; subsequent  * successes or failures are all ignored. Note that this means  * {@code onFailure} may be called with an exception unrelated to the callback  * processing it.  */
end_comment

begin_class
DECL|class|CallbackGroup
specifier|public
class|class
name|CallbackGroup
block|{
DECL|field|callbacks
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|callbacks
decl_stmt|;
DECL|field|results
specifier|private
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|results
decl_stmt|;
DECL|field|failed
specifier|private
name|boolean
name|failed
decl_stmt|;
DECL|method|CallbackGroup ()
specifier|public
name|CallbackGroup
parameter_list|()
block|{
name|callbacks
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|results
operator|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|add (final AsyncCallback<T> cb)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|AsyncCallback
argument_list|<
name|T
argument_list|>
name|add
parameter_list|(
specifier|final
name|AsyncCallback
argument_list|<
name|T
argument_list|>
name|cb
parameter_list|)
block|{
name|callbacks
operator|.
name|add
argument_list|(
name|cb
argument_list|)
expr_stmt|;
return|return
operator|new
name|AsyncCallback
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|T
name|result
parameter_list|)
block|{
name|results
operator|.
name|put
argument_list|(
name|cb
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|CallbackGroup
operator|.
name|this
operator|.
name|onSuccess
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|CallbackGroup
operator|.
name|this
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|addGwtjsonrpc ( final com.google.gwtjsonrpc.common.AsyncCallback<T> cb)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|common
operator|.
name|AsyncCallback
argument_list|<
name|T
argument_list|>
name|addGwtjsonrpc
parameter_list|(
specifier|final
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|common
operator|.
name|AsyncCallback
argument_list|<
name|T
argument_list|>
name|cb
parameter_list|)
block|{
name|callbacks
operator|.
name|add
argument_list|(
name|cb
argument_list|)
expr_stmt|;
return|return
operator|new
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|common
operator|.
name|AsyncCallback
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|T
name|result
parameter_list|)
block|{
name|results
operator|.
name|put
argument_list|(
name|cb
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|CallbackGroup
operator|.
name|this
operator|.
name|onSuccess
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|CallbackGroup
operator|.
name|this
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|onSuccess ()
specifier|private
name|void
name|onSuccess
parameter_list|()
block|{
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|<
name|callbacks
operator|.
name|size
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Object
name|o
range|:
name|callbacks
control|)
block|{
name|Object
name|result
init|=
name|results
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|AsyncCallback
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|AsyncCallback
argument_list|<
name|Object
argument_list|>
name|cb
init|=
operator|(
name|AsyncCallback
argument_list|<
name|Object
argument_list|>
operator|)
name|o
decl_stmt|;
name|cb
operator|.
name|onSuccess
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|common
operator|.
name|AsyncCallback
argument_list|<
name|Object
argument_list|>
name|cb
init|=
operator|(
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|common
operator|.
name|AsyncCallback
argument_list|<
name|Object
argument_list|>
operator|)
name|o
decl_stmt|;
name|cb
operator|.
name|onSuccess
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|onFailure (Throwable caught)
specifier|private
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
if|if
condition|(
name|failed
condition|)
block|{
return|return;
block|}
name|failed
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|AsyncCallback
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|AsyncCallback
argument_list|<
name|Object
argument_list|>
name|cb
init|=
operator|(
name|AsyncCallback
argument_list|<
name|Object
argument_list|>
operator|)
name|o
decl_stmt|;
name|cb
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
else|else
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|common
operator|.
name|AsyncCallback
argument_list|<
name|Object
argument_list|>
name|cb
init|=
operator|(
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|common
operator|.
name|AsyncCallback
argument_list|<
name|Object
argument_list|>
operator|)
name|o
decl_stmt|;
name|cb
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

