begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.ui
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|FindReplace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtml
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|common
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|common
operator|.
name|VoidResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|CommentLinkProcessor
specifier|public
class|class
name|CommentLinkProcessor
block|{
DECL|field|commentLinks
specifier|private
name|List
argument_list|<
name|FindReplace
argument_list|>
name|commentLinks
decl_stmt|;
DECL|method|CommentLinkProcessor (List<FindReplace> commentLinks)
specifier|public
name|CommentLinkProcessor
parameter_list|(
name|List
argument_list|<
name|FindReplace
argument_list|>
name|commentLinks
parameter_list|)
block|{
name|this
operator|.
name|commentLinks
operator|=
name|commentLinks
expr_stmt|;
block|}
DECL|method|apply (SafeHtml buf)
specifier|public
name|SafeHtml
name|apply
parameter_list|(
name|SafeHtml
name|buf
parameter_list|)
block|{
try|try
block|{
return|return
name|buf
operator|.
name|replaceAll
argument_list|(
name|commentLinks
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|err
parameter_list|)
block|{
comment|// One or more of the patterns isn't valid on this browser.
comment|// Try to filter the list down and remove the invalid ones.
name|List
argument_list|<
name|FindReplace
argument_list|>
name|safe
init|=
operator|new
name|ArrayList
argument_list|<
name|FindReplace
argument_list|>
argument_list|(
name|commentLinks
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PatternError
argument_list|>
name|bad
init|=
operator|new
name|ArrayList
argument_list|<
name|PatternError
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FindReplace
name|r
range|:
name|commentLinks
control|)
block|{
try|try
block|{
name|buf
operator|.
name|replaceAll
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|safe
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|why
parameter_list|)
block|{
name|bad
operator|.
name|add
argument_list|(
operator|new
name|PatternError
argument_list|(
name|r
argument_list|,
name|why
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|bad
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Invalid commentlink pattern(s):"
argument_list|)
expr_stmt|;
for|for
control|(
name|PatternError
name|e
range|:
name|bad
control|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|e
operator|.
name|pattern
operator|.
name|pattern
argument_list|()
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"\": "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|e
operator|.
name|errorMessage
argument_list|)
expr_stmt|;
block|}
name|Gerrit
operator|.
name|SYSTEM_SVC
operator|.
name|clientError
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|VoidResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{               }
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|VoidResult
name|result
parameter_list|)
block|{               }
block|}
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|commentLinks
operator|=
name|safe
expr_stmt|;
return|return
name|buf
operator|.
name|replaceAll
argument_list|(
name|safe
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|err2
parameter_list|)
block|{
comment|// To heck with it. The patterns passed individually above but
comment|// failed as a group? Just render without.
comment|//
name|commentLinks
operator|=
literal|null
expr_stmt|;
return|return
name|buf
return|;
block|}
block|}
block|}
DECL|class|PatternError
specifier|private
specifier|static
class|class
name|PatternError
block|{
DECL|field|pattern
name|FindReplace
name|pattern
decl_stmt|;
DECL|field|errorMessage
name|String
name|errorMessage
decl_stmt|;
DECL|method|PatternError (FindReplace r, String w)
name|PatternError
parameter_list|(
name|FindReplace
name|r
parameter_list|,
name|String
name|w
parameter_list|)
block|{
name|pattern
operator|=
name|r
expr_stmt|;
name|errorMessage
operator|=
name|w
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

