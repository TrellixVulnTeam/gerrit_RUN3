begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|AvatarImage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|DiffObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ErrorDialog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|FormatUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|GerritUiExtensionPoint
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|NotFoundScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|api
operator|.
name|ChangeGlue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|api
operator|.
name|ExtensionPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|RevisionInfoCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|StarredChanges
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|DiffApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|AccountInfo
operator|.
name|AvatarInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ActionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ChangeInfo
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ChangeInfo
operator|.
name|EditInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ChangeInfo
operator|.
name|LabelInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ChangeInfo
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ChangeInfo
operator|.
name|RevisionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|FileInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|GpgKeyInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|PushCertificateInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|projects
operator|.
name|ConfigInfoCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|projects
operator|.
name|ConfigInfoCache
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|CallbackGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NativeMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Natives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|RestApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|ScreenLoadCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|BranchLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|ChangeLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|CommentLinkProcessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Hyperlink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineHyperlink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Screen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|UserActivityMonitor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArrayString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|AnchorElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|NativeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|SelectElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Display
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|resources
operator|.
name|client
operator|.
name|CssResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiBinder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Anchor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineLabel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Panel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SimplePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ToggleButton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|GlobalKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommandSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtmlBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|KeyUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
import|;
end_import

begin_class
DECL|class|ChangeScreen
specifier|public
class|class
name|ChangeScreen
extends|extends
name|Screen
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ChangeScreen
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|interface|Binder
interface|interface
name|Binder
extends|extends
name|UiBinder
argument_list|<
name|HTMLPanel
argument_list|,
name|ChangeScreen
argument_list|>
block|{}
DECL|field|uiBinder
specifier|private
specifier|static
specifier|final
name|Binder
name|uiBinder
init|=
name|GWT
operator|.
name|create
argument_list|(
name|Binder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|interface|Style
interface|interface
name|Style
extends|extends
name|CssResource
block|{
DECL|method|avatar ()
name|String
name|avatar
parameter_list|()
function_decl|;
DECL|method|hashtagName ()
name|String
name|hashtagName
parameter_list|()
function_decl|;
DECL|method|hashtagIcon ()
name|String
name|hashtagIcon
parameter_list|()
function_decl|;
DECL|method|highlight ()
name|String
name|highlight
parameter_list|()
function_decl|;
DECL|method|labelName ()
name|String
name|labelName
parameter_list|()
function_decl|;
DECL|method|label_may ()
name|String
name|label_may
parameter_list|()
function_decl|;
DECL|method|label_need ()
name|String
name|label_need
parameter_list|()
function_decl|;
DECL|method|label_ok ()
name|String
name|label_ok
parameter_list|()
function_decl|;
DECL|method|label_reject ()
name|String
name|label_reject
parameter_list|()
function_decl|;
DECL|method|label_user ()
name|String
name|label_user
parameter_list|()
function_decl|;
DECL|method|pushCertStatus ()
name|String
name|pushCertStatus
parameter_list|()
function_decl|;
DECL|method|replyBox ()
name|String
name|replyBox
parameter_list|()
function_decl|;
DECL|method|selected ()
name|String
name|selected
parameter_list|()
function_decl|;
DECL|method|notCurrentPatchSet ()
name|String
name|notCurrentPatchSet
parameter_list|()
function_decl|;
block|}
DECL|method|get (NativeEvent in)
specifier|static
name|ChangeScreen
name|get
parameter_list|(
name|NativeEvent
name|in
parameter_list|)
block|{
name|Element
name|e
init|=
name|in
operator|.
name|getEventTarget
argument_list|()
operator|.
name|cast
argument_list|()
decl_stmt|;
for|for
control|(
name|e
operator|=
name|DOM
operator|.
name|getParent
argument_list|(
name|e
argument_list|)
init|;
name|e
operator|!=
literal|null
condition|;
name|e
operator|=
name|DOM
operator|.
name|getParent
argument_list|(
name|e
argument_list|)
control|)
block|{
name|EventListener
name|l
init|=
name|DOM
operator|.
name|getEventListener
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|instanceof
name|ChangeScreen
condition|)
block|{
return|return
operator|(
name|ChangeScreen
operator|)
name|l
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|field|changeId
specifier|private
specifier|final
name|Change
operator|.
name|Id
name|changeId
decl_stmt|;
DECL|field|base
specifier|private
name|DiffObject
name|base
decl_stmt|;
DECL|field|revision
specifier|private
name|String
name|revision
decl_stmt|;
DECL|field|changeInfo
specifier|private
name|ChangeInfo
name|changeInfo
decl_stmt|;
DECL|field|hasDraftComments
specifier|private
name|boolean
name|hasDraftComments
decl_stmt|;
DECL|field|commentLinkProcessor
specifier|private
name|CommentLinkProcessor
name|commentLinkProcessor
decl_stmt|;
DECL|field|edit
specifier|private
name|EditInfo
name|edit
decl_stmt|;
DECL|field|lc
specifier|private
name|LocalComments
name|lc
decl_stmt|;
DECL|field|handlers
specifier|private
name|List
argument_list|<
name|HandlerRegistration
argument_list|>
name|handlers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
DECL|field|updateCheck
specifier|private
name|UpdateCheckTimer
name|updateCheck
decl_stmt|;
DECL|field|lastDisplayedUpdate
specifier|private
name|Timestamp
name|lastDisplayedUpdate
decl_stmt|;
DECL|field|updateAvailable
specifier|private
name|UpdateAvailableBar
name|updateAvailable
decl_stmt|;
DECL|field|openReplyBox
specifier|private
name|boolean
name|openReplyBox
decl_stmt|;
DECL|field|loaded
specifier|private
name|boolean
name|loaded
decl_stmt|;
DECL|field|fileTableMode
specifier|private
name|FileTable
operator|.
name|Mode
name|fileTableMode
decl_stmt|;
DECL|field|headerLine
annotation|@
name|UiField
name|HTMLPanel
name|headerLine
decl_stmt|;
DECL|field|headerExtension
annotation|@
name|UiField
name|SimplePanel
name|headerExtension
decl_stmt|;
DECL|field|headerExtensionMiddle
annotation|@
name|UiField
name|SimplePanel
name|headerExtensionMiddle
decl_stmt|;
DECL|field|headerExtensionRight
annotation|@
name|UiField
name|SimplePanel
name|headerExtensionRight
decl_stmt|;
DECL|field|style
annotation|@
name|UiField
name|Style
name|style
decl_stmt|;
DECL|field|star
annotation|@
name|UiField
name|ToggleButton
name|star
decl_stmt|;
DECL|field|permalink
annotation|@
name|UiField
name|Anchor
name|permalink
decl_stmt|;
DECL|field|assignee
annotation|@
name|UiField
name|Assignee
name|assignee
decl_stmt|;
DECL|field|assigneeRow
annotation|@
name|UiField
name|Element
name|assigneeRow
decl_stmt|;
DECL|field|ccText
annotation|@
name|UiField
name|Element
name|ccText
decl_stmt|;
DECL|field|reviewers
annotation|@
name|UiField
name|Reviewers
name|reviewers
decl_stmt|;
DECL|field|hashtags
annotation|@
name|UiField
name|Hashtags
name|hashtags
decl_stmt|;
DECL|field|hashtagTableRow
annotation|@
name|UiField
name|Element
name|hashtagTableRow
decl_stmt|;
DECL|field|ownerPanel
annotation|@
name|UiField
name|FlowPanel
name|ownerPanel
decl_stmt|;
DECL|field|ownerLink
annotation|@
name|UiField
name|InlineHyperlink
name|ownerLink
decl_stmt|;
DECL|field|uploaderRow
annotation|@
name|UiField
name|Element
name|uploaderRow
decl_stmt|;
DECL|field|uploaderPanel
annotation|@
name|UiField
name|FlowPanel
name|uploaderPanel
decl_stmt|;
DECL|field|uploaderName
annotation|@
name|UiField
name|InlineLabel
name|uploaderName
decl_stmt|;
DECL|field|statusText
annotation|@
name|UiField
name|Element
name|statusText
decl_stmt|;
DECL|field|privateText
annotation|@
name|UiField
name|Element
name|privateText
decl_stmt|;
DECL|field|projectSettings
annotation|@
name|UiField
name|Image
name|projectSettings
decl_stmt|;
DECL|field|projectSettingsLink
annotation|@
name|UiField
name|AnchorElement
name|projectSettingsLink
decl_stmt|;
DECL|field|projectDashboard
annotation|@
name|UiField
name|InlineHyperlink
name|projectDashboard
decl_stmt|;
DECL|field|branchLink
annotation|@
name|UiField
name|InlineHyperlink
name|branchLink
decl_stmt|;
DECL|field|strategy
annotation|@
name|UiField
name|Element
name|strategy
decl_stmt|;
DECL|field|submitActionText
annotation|@
name|UiField
name|Element
name|submitActionText
decl_stmt|;
DECL|field|notMergeable
annotation|@
name|UiField
name|Element
name|notMergeable
decl_stmt|;
DECL|field|topic
annotation|@
name|UiField
name|Topic
name|topic
decl_stmt|;
DECL|field|actionText
annotation|@
name|UiField
name|Element
name|actionText
decl_stmt|;
DECL|field|actionDate
annotation|@
name|UiField
name|Element
name|actionDate
decl_stmt|;
DECL|field|changeExtension
annotation|@
name|UiField
name|SimplePanel
name|changeExtension
decl_stmt|;
DECL|field|relatedExtension
annotation|@
name|UiField
name|SimplePanel
name|relatedExtension
decl_stmt|;
DECL|field|commitExtension
annotation|@
name|UiField
name|SimplePanel
name|commitExtension
decl_stmt|;
DECL|field|actions
annotation|@
name|UiField
name|Actions
name|actions
decl_stmt|;
DECL|field|labels
annotation|@
name|UiField
name|Labels
name|labels
decl_stmt|;
DECL|field|commit
annotation|@
name|UiField
name|CommitBox
name|commit
decl_stmt|;
DECL|field|related
annotation|@
name|UiField
name|RelatedChanges
name|related
decl_stmt|;
DECL|field|files
annotation|@
name|UiField
name|FileTable
name|files
decl_stmt|;
DECL|field|diffBase
annotation|@
name|UiField
name|ListBox
name|diffBase
decl_stmt|;
DECL|field|history
annotation|@
name|UiField
name|History
name|history
decl_stmt|;
DECL|field|historyExtensionRight
annotation|@
name|UiField
name|SimplePanel
name|historyExtensionRight
decl_stmt|;
DECL|field|includedIn
annotation|@
name|UiField
name|Button
name|includedIn
decl_stmt|;
DECL|field|patchSets
annotation|@
name|UiField
name|Button
name|patchSets
decl_stmt|;
DECL|field|patchSetsText
annotation|@
name|UiField
name|Element
name|patchSetsText
decl_stmt|;
DECL|field|download
annotation|@
name|UiField
name|Button
name|download
decl_stmt|;
DECL|field|reply
annotation|@
name|UiField
name|Button
name|reply
decl_stmt|;
DECL|field|publishEdit
annotation|@
name|UiField
name|Button
name|publishEdit
decl_stmt|;
DECL|field|rebaseEdit
annotation|@
name|UiField
name|Button
name|rebaseEdit
decl_stmt|;
DECL|field|deleteEdit
annotation|@
name|UiField
name|Button
name|deleteEdit
decl_stmt|;
DECL|field|publish
annotation|@
name|UiField
name|Button
name|publish
decl_stmt|;
DECL|field|deleteRevision
annotation|@
name|UiField
name|Button
name|deleteRevision
decl_stmt|;
DECL|field|openAll
annotation|@
name|UiField
name|Button
name|openAll
decl_stmt|;
DECL|field|editMode
annotation|@
name|UiField
name|Button
name|editMode
decl_stmt|;
DECL|field|reviewMode
annotation|@
name|UiField
name|Button
name|reviewMode
decl_stmt|;
DECL|field|addFile
annotation|@
name|UiField
name|Button
name|addFile
decl_stmt|;
DECL|field|deleteFile
annotation|@
name|UiField
name|Button
name|deleteFile
decl_stmt|;
DECL|field|renameFile
annotation|@
name|UiField
name|Button
name|renameFile
decl_stmt|;
DECL|field|expandAll
annotation|@
name|UiField
name|Button
name|expandAll
decl_stmt|;
DECL|field|collapseAll
annotation|@
name|UiField
name|Button
name|collapseAll
decl_stmt|;
DECL|field|hideTaggedComments
annotation|@
name|UiField
name|Button
name|hideTaggedComments
decl_stmt|;
DECL|field|showTaggedComments
annotation|@
name|UiField
name|Button
name|showTaggedComments
decl_stmt|;
DECL|field|quickApprove
annotation|@
name|UiField
name|QuickApprove
name|quickApprove
decl_stmt|;
DECL|field|replyAction
specifier|private
name|ReplyAction
name|replyAction
decl_stmt|;
DECL|field|includedInAction
specifier|private
name|IncludedInAction
name|includedInAction
decl_stmt|;
DECL|field|patchSetsAction
specifier|private
name|PatchSetsAction
name|patchSetsAction
decl_stmt|;
DECL|field|downloadAction
specifier|private
name|DownloadAction
name|downloadAction
decl_stmt|;
DECL|field|addFileAction
specifier|private
name|AddFileAction
name|addFileAction
decl_stmt|;
DECL|field|deleteFileAction
specifier|private
name|DeleteFileAction
name|deleteFileAction
decl_stmt|;
DECL|field|renameFileAction
specifier|private
name|RenameFileAction
name|renameFileAction
decl_stmt|;
DECL|method|ChangeScreen ( Change.Id changeId, DiffObject base, String revision, boolean openReplyBox, FileTable.Mode mode)
specifier|public
name|ChangeScreen
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|DiffObject
name|base
parameter_list|,
name|String
name|revision
parameter_list|,
name|boolean
name|openReplyBox
parameter_list|,
name|FileTable
operator|.
name|Mode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|changeId
operator|=
name|changeId
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|normalize
argument_list|(
name|revision
argument_list|)
expr_stmt|;
name|this
operator|.
name|openReplyBox
operator|=
name|openReplyBox
expr_stmt|;
name|this
operator|.
name|fileTableMode
operator|=
name|mode
expr_stmt|;
name|this
operator|.
name|lc
operator|=
operator|new
name|LocalComments
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|uiBinder
operator|.
name|createAndBindUi
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getPatchSetId ()
name|PatchSet
operator|.
name|Id
name|getPatchSetId
parameter_list|()
block|{
return|return
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|changeInfo
operator|.
name|legacyId
argument_list|()
argument_list|,
name|changeInfo
operator|.
name|revisions
argument_list|()
operator|.
name|get
argument_list|(
name|revision
argument_list|)
operator|.
name|_number
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
block|{
name|super
operator|.
name|onLoad
argument_list|()
expr_stmt|;
name|CallbackGroup
name|group
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|ChangeList
operator|.
name|query
argument_list|(
literal|"change:"
operator|+
name|changeId
operator|.
name|get
argument_list|()
operator|+
literal|" has:draft"
argument_list|,
name|Collections
operator|.
expr|<
name|ListChangesOption
operator|>
name|emptySet
argument_list|()
argument_list|,
name|group
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|ChangeList
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ChangeList
name|result
parameter_list|)
block|{
name|hasDraftComments
operator|=
name|result
operator|.
name|length
argument_list|()
operator|>
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeApi
operator|.
name|editWithFiles
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|group
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|EditInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|EditInfo
name|result
parameter_list|)
block|{
name|edit
operator|=
name|result
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|loadChangeInfo
argument_list|(
literal|true
argument_list|,
name|group
operator|.
name|addFinal
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|ChangeInfo
name|info
parameter_list|)
block|{
name|info
operator|.
name|init
argument_list|()
expr_stmt|;
name|initCurrentRevision
argument_list|(
name|info
argument_list|)
expr_stmt|;
specifier|final
name|RevisionInfo
name|rev
init|=
name|info
operator|.
name|revision
argument_list|(
name|revision
argument_list|)
decl_stmt|;
name|CallbackGroup
name|group
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
name|loadCommit
argument_list|(
name|rev
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|addListener
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
if|if
condition|(
name|base
operator|.
name|isBase
argument_list|()
operator|&&
name|rev
operator|.
name|isMerge
argument_list|()
condition|)
block|{
name|base
operator|=
name|DiffObject
operator|.
name|parse
argument_list|(
name|info
operator|.
name|legacyId
argument_list|()
argument_list|,
name|Gerrit
operator|.
name|getUserPreferences
argument_list|()
operator|.
name|defaultBaseForMerges
argument_list|()
operator|.
name|getBase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|loadConfigInfo
argument_list|(
name|info
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|JsArray
argument_list|<
name|MessageInfo
argument_list|>
name|mAr
init|=
name|info
operator|.
name|messages
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mAr
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|mAr
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|tag
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hideTaggedComments
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|group
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|initCurrentRevision (ChangeInfo info)
specifier|private
name|RevisionInfo
name|initCurrentRevision
parameter_list|(
name|ChangeInfo
name|info
parameter_list|)
block|{
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|copyKeysIntoChildren
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
if|if
condition|(
name|edit
operator|!=
literal|null
condition|)
block|{
name|edit
operator|.
name|setName
argument_list|(
name|edit
operator|.
name|commit
argument_list|()
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setEdit
argument_list|(
name|edit
argument_list|)
expr_stmt|;
if|if
condition|(
name|edit
operator|.
name|hasFiles
argument_list|()
condition|)
block|{
name|edit
operator|.
name|files
argument_list|()
operator|.
name|copyKeysIntoChildren
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|put
argument_list|(
name|edit
operator|.
name|name
argument_list|()
argument_list|,
name|RevisionInfo
operator|.
name|fromEdit
argument_list|(
name|edit
argument_list|)
argument_list|)
expr_stmt|;
name|JsArray
argument_list|<
name|RevisionInfo
argument_list|>
name|list
init|=
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
comment|// Edit is converted to a regular revision (with number = 0) and
comment|// added to the list of revisions. Additionally under certain
comment|// circumstances change edit is assigned to be the current revision
comment|// and is selected to be shown on the change screen.
comment|// We have two different strategies to assign edit to the current ps:
comment|// 1. revision == null: no revision is selected, so use the edit only
comment|//    if it is based on the latest patch set
comment|// 2. edit was selected explicitly from ps drop down:
comment|//    use the edit regardless of which patch set it is based on
if|if
condition|(
name|revision
operator|==
literal|null
condition|)
block|{
name|RevisionInfo
operator|.
name|sortRevisionInfoByNumber
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|RevisionInfo
name|rev
init|=
name|list
operator|.
name|get
argument_list|(
name|list
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|.
name|isEdit
argument_list|()
condition|)
block|{
name|info
operator|.
name|setCurrentRevision
argument_list|(
name|rev
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|revision
operator|.
name|equals
argument_list|(
literal|"edit"
argument_list|)
operator|||
name|revision
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RevisionInfo
name|r
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isEdit
argument_list|()
condition|)
block|{
name|info
operator|.
name|setCurrentRevision
argument_list|(
name|r
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|resolveRevisionToDisplay
argument_list|(
name|info
argument_list|)
return|;
block|}
DECL|method|addExtensionPoints (ChangeInfo change, RevisionInfo rev, Entry result)
specifier|private
name|void
name|addExtensionPoints
parameter_list|(
name|ChangeInfo
name|change
parameter_list|,
name|RevisionInfo
name|rev
parameter_list|,
name|Entry
name|result
parameter_list|)
block|{
name|addExtensionPoint
argument_list|(
name|GerritUiExtensionPoint
operator|.
name|CHANGE_SCREEN_HEADER
argument_list|,
name|headerExtension
argument_list|,
name|change
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|addExtensionPoint
argument_list|(
name|GerritUiExtensionPoint
operator|.
name|CHANGE_SCREEN_HEADER_RIGHT_OF_BUTTONS
argument_list|,
name|headerExtensionMiddle
argument_list|,
name|change
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|addExtensionPoint
argument_list|(
name|GerritUiExtensionPoint
operator|.
name|CHANGE_SCREEN_HEADER_RIGHT_OF_POP_DOWNS
argument_list|,
name|headerExtensionRight
argument_list|,
name|change
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|addExtensionPoint
argument_list|(
name|GerritUiExtensionPoint
operator|.
name|CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK
argument_list|,
name|changeExtension
argument_list|,
name|change
argument_list|,
name|rev
argument_list|,
name|result
operator|.
name|getExtensionPanelNames
argument_list|(
name|GerritUiExtensionPoint
operator|.
name|CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addExtensionPoint
argument_list|(
name|GerritUiExtensionPoint
operator|.
name|CHANGE_SCREEN_BELOW_RELATED_INFO_BLOCK
argument_list|,
name|relatedExtension
argument_list|,
name|change
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|addExtensionPoint
argument_list|(
name|GerritUiExtensionPoint
operator|.
name|CHANGE_SCREEN_BELOW_COMMIT_INFO_BLOCK
argument_list|,
name|commitExtension
argument_list|,
name|change
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|addExtensionPoint
argument_list|(
name|GerritUiExtensionPoint
operator|.
name|CHANGE_SCREEN_HISTORY_RIGHT_OF_BUTTONS
argument_list|,
name|historyExtensionRight
argument_list|,
name|change
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
DECL|method|addExtensionPoint ( GerritUiExtensionPoint extensionPoint, Panel p, ChangeInfo change, RevisionInfo rev, List<String> panelNames)
specifier|private
name|void
name|addExtensionPoint
parameter_list|(
name|GerritUiExtensionPoint
name|extensionPoint
parameter_list|,
name|Panel
name|p
parameter_list|,
name|ChangeInfo
name|change
parameter_list|,
name|RevisionInfo
name|rev
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|panelNames
parameter_list|)
block|{
name|ExtensionPanel
name|extensionPanel
init|=
operator|new
name|ExtensionPanel
argument_list|(
name|extensionPoint
argument_list|,
name|panelNames
argument_list|)
decl_stmt|;
name|extensionPanel
operator|.
name|putObject
argument_list|(
name|GerritUiExtensionPoint
operator|.
name|Key
operator|.
name|CHANGE_INFO
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|extensionPanel
operator|.
name|putObject
argument_list|(
name|GerritUiExtensionPoint
operator|.
name|Key
operator|.
name|REVISION_INFO
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|extensionPanel
argument_list|)
expr_stmt|;
block|}
DECL|method|addExtensionPoint ( GerritUiExtensionPoint extensionPoint, Panel p, ChangeInfo change, RevisionInfo rev)
specifier|private
name|void
name|addExtensionPoint
parameter_list|(
name|GerritUiExtensionPoint
name|extensionPoint
parameter_list|,
name|Panel
name|p
parameter_list|,
name|ChangeInfo
name|change
parameter_list|,
name|RevisionInfo
name|rev
parameter_list|)
block|{
name|addExtensionPoint
argument_list|(
name|extensionPoint
argument_list|,
name|p
argument_list|,
name|change
argument_list|,
name|rev
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|enableSignedPush ()
specifier|private
name|boolean
name|enableSignedPush
parameter_list|()
block|{
return|return
name|Gerrit
operator|.
name|info
argument_list|()
operator|.
name|receive
argument_list|()
operator|.
name|enableSignedPush
argument_list|()
return|;
block|}
DECL|method|loadChangeInfo (boolean fg, AsyncCallback<ChangeInfo> cb)
name|void
name|loadChangeInfo
parameter_list|(
name|boolean
name|fg
parameter_list|,
name|AsyncCallback
argument_list|<
name|ChangeInfo
argument_list|>
name|cb
parameter_list|)
block|{
name|RestApi
name|call
init|=
name|ChangeApi
operator|.
name|detail
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|ListChangesOption
argument_list|>
name|opts
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|ListChangesOption
operator|.
name|ALL_REVISIONS
argument_list|,
name|ListChangesOption
operator|.
name|CHANGE_ACTIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|enableSignedPush
argument_list|()
condition|)
block|{
name|opts
operator|.
name|add
argument_list|(
name|ListChangesOption
operator|.
name|PUSH_CERTIFICATES
argument_list|)
expr_stmt|;
block|}
name|ChangeList
operator|.
name|addOptions
argument_list|(
name|call
argument_list|,
name|opts
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fg
condition|)
block|{
name|call
operator|.
name|background
argument_list|()
expr_stmt|;
block|}
name|call
operator|.
name|get
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
DECL|method|loadRevisionInfo ()
name|void
name|loadRevisionInfo
parameter_list|()
block|{
name|RestApi
name|call
init|=
name|ChangeApi
operator|.
name|actions
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|revision
argument_list|)
decl_stmt|;
name|call
operator|.
name|background
argument_list|()
expr_stmt|;
name|call
operator|.
name|get
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|NativeMap
argument_list|<
name|ActionInfo
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|ActionInfo
argument_list|>
name|actionMap
parameter_list|)
block|{
name|actionMap
operator|.
name|copyKeysIntoChildren
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|renderRevisionInfo
argument_list|(
name|changeInfo
argument_list|,
name|actionMap
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onUnload ()
specifier|protected
name|void
name|onUnload
parameter_list|()
block|{
if|if
condition|(
name|replyAction
operator|!=
literal|null
condition|)
block|{
name|replyAction
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|updateCheck
operator|!=
literal|null
condition|)
block|{
name|updateCheck
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|updateCheck
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|HandlerRegistration
name|h
range|:
name|handlers
control|)
block|{
name|h
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
block|}
name|handlers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|super
operator|.
name|onUnload
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onInitUI ()
specifier|protected
name|void
name|onInitUI
parameter_list|()
block|{
name|super
operator|.
name|onInitUI
argument_list|()
expr_stmt|;
name|setHeaderVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|I
operator|.
name|style
argument_list|()
operator|.
name|ensureInjected
argument_list|()
expr_stmt|;
name|star
operator|.
name|setVisible
argument_list|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
argument_list|)
expr_stmt|;
name|labels
operator|.
name|init
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|reviewers
operator|.
name|init
argument_list|(
name|style
argument_list|,
name|ccText
argument_list|)
expr_stmt|;
name|hashtags
operator|.
name|init
argument_list|(
name|style
argument_list|)
expr_stmt|;
block|}
DECL|method|initReplyButton (ChangeInfo info, String revision)
specifier|private
name|void
name|initReplyButton
parameter_list|(
name|ChangeInfo
name|info
parameter_list|,
name|String
name|revision
parameter_list|)
block|{
if|if
condition|(
operator|!
name|info
operator|.
name|revision
argument_list|(
name|revision
argument_list|)
operator|.
name|isEdit
argument_list|()
condition|)
block|{
name|reply
operator|.
name|setTitle
argument_list|(
name|Gerrit
operator|.
name|info
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|replyLabel
argument_list|()
argument_list|)
expr_stmt|;
name|reply
operator|.
name|setHTML
argument_list|(
operator|new
name|SafeHtmlBuilder
argument_list|()
operator|.
name|openDiv
argument_list|()
operator|.
name|append
argument_list|(
name|Gerrit
operator|.
name|info
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|replyLabel
argument_list|()
argument_list|)
operator|.
name|closeDiv
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasDraftComments
operator|||
name|lc
operator|.
name|hasReplyComment
argument_list|()
condition|)
block|{
name|reply
operator|.
name|setStyleName
argument_list|(
name|style
operator|.
name|highlight
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reply
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|gotoSibling (int offset)
specifier|private
name|void
name|gotoSibling
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|>
literal|0
operator|&&
name|changeInfo
operator|.
name|currentRevision
argument_list|()
operator|!=
literal|null
operator|&&
name|changeInfo
operator|.
name|currentRevision
argument_list|()
operator|.
name|equals
argument_list|(
name|revision
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|offset
operator|<
literal|0
operator|&&
name|changeInfo
operator|.
name|revision
argument_list|(
name|revision
argument_list|)
operator|.
name|_number
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return;
block|}
name|JsArray
argument_list|<
name|RevisionInfo
argument_list|>
name|revisions
init|=
name|changeInfo
operator|.
name|revisions
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|RevisionInfo
operator|.
name|sortRevisionInfoByNumber
argument_list|(
name|revisions
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|revisions
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|revision
operator|.
name|equals
argument_list|(
name|revisions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|0
operator|<=
name|i
operator|+
name|offset
operator|&&
name|i
operator|+
name|offset
operator|<
name|revisions
operator|.
name|length
argument_list|()
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|PageLinks
operator|.
name|toChange
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|changeInfo
operator|.
name|legacyId
argument_list|()
argument_list|,
name|revisions
operator|.
name|get
argument_list|(
name|i
operator|+
name|offset
argument_list|)
operator|.
name|_number
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
return|return;
block|}
block|}
block|}
DECL|method|initIncludedInAction (ChangeInfo info)
specifier|private
name|void
name|initIncludedInAction
parameter_list|(
name|ChangeInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|.
name|status
argument_list|()
operator|==
name|Status
operator|.
name|MERGED
condition|)
block|{
name|includedInAction
operator|=
operator|new
name|IncludedInAction
argument_list|(
name|info
operator|.
name|legacyId
argument_list|()
argument_list|,
name|style
argument_list|,
name|headerLine
argument_list|,
name|includedIn
argument_list|)
expr_stmt|;
name|includedIn
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updatePatchSetsTextStyle (boolean isPatchSetCurrent)
specifier|private
name|void
name|updatePatchSetsTextStyle
parameter_list|(
name|boolean
name|isPatchSetCurrent
parameter_list|)
block|{
if|if
condition|(
name|isPatchSetCurrent
condition|)
block|{
name|patchSetsText
operator|.
name|removeClassName
argument_list|(
name|style
operator|.
name|notCurrentPatchSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|patchSetsText
operator|.
name|addClassName
argument_list|(
name|style
operator|.
name|notCurrentPatchSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initRevisionsAction ( ChangeInfo info, String revision, NativeMap<ActionInfo> actions)
specifier|private
name|void
name|initRevisionsAction
parameter_list|(
name|ChangeInfo
name|info
parameter_list|,
name|String
name|revision
parameter_list|,
name|NativeMap
argument_list|<
name|ActionInfo
argument_list|>
name|actions
parameter_list|)
block|{
name|int
name|currentPatchSet
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|currentRevision
argument_list|()
operator|!=
literal|null
operator|&&
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|containsKey
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|()
argument_list|)
condition|)
block|{
name|currentPatchSet
operator|=
name|info
operator|.
name|revision
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|()
argument_list|)
operator|.
name|_number
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|JsArray
argument_list|<
name|RevisionInfo
argument_list|>
name|revList
init|=
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|RevisionInfo
operator|.
name|sortRevisionInfoByNumber
argument_list|(
name|revList
argument_list|)
expr_stmt|;
name|currentPatchSet
operator|=
name|revList
operator|.
name|get
argument_list|(
name|revList
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|_number
argument_list|()
expr_stmt|;
block|}
name|String
name|currentlyViewedPatchSet
decl_stmt|;
name|boolean
name|isPatchSetCurrent
init|=
literal|true
decl_stmt|;
name|String
name|revisionId
init|=
name|info
operator|.
name|revision
argument_list|(
name|revision
argument_list|)
operator|.
name|id
argument_list|()
decl_stmt|;
if|if
condition|(
name|revisionId
operator|.
name|equals
argument_list|(
literal|"edit"
argument_list|)
condition|)
block|{
name|currentlyViewedPatchSet
operator|=
name|Resources
operator|.
name|M
operator|.
name|editPatchSet
argument_list|(
name|RevisionInfo
operator|.
name|findEditParent
argument_list|(
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|currentPatchSet
operator|=
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|currentlyViewedPatchSet
operator|=
name|revisionId
expr_stmt|;
if|if
condition|(
operator|!
name|currentlyViewedPatchSet
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|currentPatchSet
argument_list|)
argument_list|)
condition|)
block|{
name|isPatchSetCurrent
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|patchSetsText
operator|.
name|setInnerText
argument_list|(
name|Resources
operator|.
name|M
operator|.
name|patchSets
argument_list|(
name|currentlyViewedPatchSet
argument_list|,
name|currentPatchSet
argument_list|)
argument_list|)
expr_stmt|;
name|updatePatchSetsTextStyle
argument_list|(
name|isPatchSetCurrent
argument_list|)
expr_stmt|;
name|patchSetsAction
operator|=
operator|new
name|PatchSetsAction
argument_list|(
name|info
operator|.
name|legacyId
argument_list|()
argument_list|,
name|revision
argument_list|,
name|edit
argument_list|,
name|style
argument_list|,
name|headerLine
argument_list|,
name|patchSets
argument_list|)
expr_stmt|;
name|RevisionInfo
name|revInfo
init|=
name|info
operator|.
name|revision
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|revInfo
operator|.
name|draft
argument_list|()
condition|)
block|{
if|if
condition|(
name|actions
operator|.
name|containsKey
argument_list|(
literal|"publish"
argument_list|)
condition|)
block|{
name|publish
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|publish
operator|.
name|setTitle
argument_list|(
name|actions
operator|.
name|get
argument_list|(
literal|"publish"
argument_list|)
operator|.
name|title
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|actions
operator|.
name|containsKey
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|deleteRevision
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|deleteRevision
operator|.
name|setTitle
argument_list|(
name|actions
operator|.
name|get
argument_list|(
literal|"/"
argument_list|)
operator|.
name|title
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|initDownloadAction (ChangeInfo info, String revision)
specifier|private
name|void
name|initDownloadAction
parameter_list|(
name|ChangeInfo
name|info
parameter_list|,
name|String
name|revision
parameter_list|)
block|{
name|downloadAction
operator|=
operator|new
name|DownloadAction
argument_list|(
name|info
argument_list|,
name|revision
argument_list|,
name|style
argument_list|,
name|headerLine
argument_list|,
name|download
argument_list|)
expr_stmt|;
block|}
DECL|method|initProjectLinks (final ChangeInfo info)
specifier|private
name|void
name|initProjectLinks
parameter_list|(
specifier|final
name|ChangeInfo
name|info
parameter_list|)
block|{
name|projectSettingsLink
operator|.
name|setHref
argument_list|(
literal|"#"
operator|+
name|PageLinks
operator|.
name|toProject
argument_list|(
name|info
operator|.
name|projectNameKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|projectSettings
operator|.
name|addDomHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|Hyperlink
operator|.
name|impl
operator|.
name|handleAsClick
argument_list|(
operator|(
name|Event
operator|)
name|event
operator|.
name|getNativeEvent
argument_list|()
argument_list|)
condition|)
block|{
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
name|PageLinks
operator|.
name|toProject
argument_list|(
name|info
operator|.
name|projectNameKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|ClickEvent
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|projectDashboard
operator|.
name|setText
argument_list|(
name|info
operator|.
name|project
argument_list|()
argument_list|)
expr_stmt|;
name|projectDashboard
operator|.
name|setTargetHistoryToken
argument_list|(
name|PageLinks
operator|.
name|toProjectDefaultDashboard
argument_list|(
name|info
operator|.
name|projectNameKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|initBranchLink (ChangeInfo info)
specifier|private
name|void
name|initBranchLink
parameter_list|(
name|ChangeInfo
name|info
parameter_list|)
block|{
name|branchLink
operator|.
name|setText
argument_list|(
name|info
operator|.
name|branch
argument_list|()
argument_list|)
expr_stmt|;
name|branchLink
operator|.
name|setTargetHistoryToken
argument_list|(
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
name|BranchLink
operator|.
name|query
argument_list|(
name|info
operator|.
name|projectNameKey
argument_list|()
argument_list|,
name|info
operator|.
name|status
argument_list|()
argument_list|,
name|info
operator|.
name|branch
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|initEditMode (ChangeInfo info, String revision)
specifier|private
name|void
name|initEditMode
parameter_list|(
name|ChangeInfo
name|info
parameter_list|,
name|String
name|revision
parameter_list|)
block|{
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|RevisionInfo
name|rev
init|=
name|info
operator|.
name|revision
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|status
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
if|if
condition|(
name|isEditModeEnabled
argument_list|(
name|info
argument_list|,
name|rev
argument_list|)
condition|)
block|{
name|editMode
operator|.
name|setVisible
argument_list|(
name|fileTableMode
operator|==
name|FileTable
operator|.
name|Mode
operator|.
name|REVIEW
argument_list|)
expr_stmt|;
name|addFile
operator|.
name|setVisible
argument_list|(
operator|!
name|editMode
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|deleteFile
operator|.
name|setVisible
argument_list|(
operator|!
name|editMode
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|renameFile
operator|.
name|setVisible
argument_list|(
operator|!
name|editMode
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|reviewMode
operator|.
name|setVisible
argument_list|(
operator|!
name|editMode
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|addFileAction
operator|=
operator|new
name|AddFileAction
argument_list|(
name|changeId
argument_list|,
name|info
operator|.
name|revision
argument_list|(
name|revision
argument_list|)
argument_list|,
name|style
argument_list|,
name|addFile
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|deleteFileAction
operator|=
operator|new
name|DeleteFileAction
argument_list|(
name|changeId
argument_list|,
name|info
operator|.
name|revision
argument_list|(
name|revision
argument_list|)
argument_list|,
name|style
argument_list|,
name|addFile
argument_list|)
expr_stmt|;
name|renameFileAction
operator|=
operator|new
name|RenameFileAction
argument_list|(
name|changeId
argument_list|,
name|info
operator|.
name|revision
argument_list|(
name|revision
argument_list|)
argument_list|,
name|style
argument_list|,
name|addFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|editMode
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|addFile
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reviewMode
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rev
operator|.
name|isEdit
argument_list|()
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|hasEditBasedOnCurrentPatchSet
argument_list|()
condition|)
block|{
name|publishEdit
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rebaseEdit
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|deleteEdit
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|rev
operator|.
name|isEdit
argument_list|()
condition|)
block|{
name|deleteEdit
operator|.
name|setStyleName
argument_list|(
name|style
operator|.
name|highlight
argument_list|()
argument_list|)
expr_stmt|;
name|deleteEdit
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isEditModeEnabled (ChangeInfo info, RevisionInfo rev)
specifier|private
name|boolean
name|isEditModeEnabled
parameter_list|(
name|ChangeInfo
name|info
parameter_list|,
name|RevisionInfo
name|rev
parameter_list|)
block|{
if|if
condition|(
name|rev
operator|.
name|isEdit
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|edit
operator|==
literal|null
condition|)
block|{
return|return
name|revision
operator|.
name|equals
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|()
argument_list|)
return|;
block|}
return|return
name|rev
operator|.
name|_number
argument_list|()
operator|==
name|RevisionInfo
operator|.
name|findEditParent
argument_list|(
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"publishEdit"
argument_list|)
DECL|method|onPublishEdit (@uppressWarningsR) ClickEvent e)
name|void
name|onPublishEdit
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|EditActions
operator|.
name|publishEdit
argument_list|(
name|changeId
argument_list|,
name|publishEdit
argument_list|,
name|rebaseEdit
argument_list|,
name|deleteEdit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"rebaseEdit"
argument_list|)
DECL|method|onRebaseEdit (@uppressWarningsR) ClickEvent e)
name|void
name|onRebaseEdit
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|EditActions
operator|.
name|rebaseEdit
argument_list|(
name|changeId
argument_list|,
name|publishEdit
argument_list|,
name|rebaseEdit
argument_list|,
name|deleteEdit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"deleteEdit"
argument_list|)
DECL|method|onDeleteEdit (@uppressWarningsR) ClickEvent e)
name|void
name|onDeleteEdit
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|Window
operator|.
name|confirm
argument_list|(
name|Resources
operator|.
name|C
operator|.
name|deleteChangeEdit
argument_list|()
argument_list|)
condition|)
block|{
name|EditActions
operator|.
name|deleteEdit
argument_list|(
name|changeId
argument_list|,
name|publishEdit
argument_list|,
name|rebaseEdit
argument_list|,
name|deleteEdit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"publish"
argument_list|)
DECL|method|onPublish (@uppressWarningsR) ClickEvent e)
name|void
name|onPublish
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|ChangeActions
operator|.
name|publish
argument_list|(
name|changeId
argument_list|,
name|revision
argument_list|,
name|publish
argument_list|,
name|deleteRevision
argument_list|)
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"deleteRevision"
argument_list|)
DECL|method|onDeleteRevision (@uppressWarningsR) ClickEvent e)
name|void
name|onDeleteRevision
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|Window
operator|.
name|confirm
argument_list|(
name|Resources
operator|.
name|C
operator|.
name|deleteDraftRevision
argument_list|()
argument_list|)
condition|)
block|{
name|ChangeActions
operator|.
name|delete
argument_list|(
name|changeId
argument_list|,
name|revision
argument_list|,
name|publish
argument_list|,
name|deleteRevision
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|registerKeys ()
specifier|public
name|void
name|registerKeys
parameter_list|()
block|{
name|super
operator|.
name|registerKeys
argument_list|()
expr_stmt|;
name|KeyCommandSet
name|keysNavigation
init|=
operator|new
name|KeyCommandSet
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|sectionNavigation
argument_list|()
argument_list|)
decl_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'u'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|upToChangeList
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|Gerrit
operator|.
name|displayLastChangeList
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'R'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|keyReloadChange
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|PageLinks
operator|.
name|toChange
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'n'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|keyNextPatchSet
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|gotoSibling
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'p'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|keyPreviousPatchSet
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|gotoSibling
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|GlobalKey
operator|.
name|add
argument_list|(
name|this
argument_list|,
name|keysNavigation
argument_list|)
argument_list|)
expr_stmt|;
name|KeyCommandSet
name|keysAction
init|=
operator|new
name|KeyCommandSet
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|sectionActions
argument_list|()
argument_list|)
decl_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'a'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|keyPublishComments
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|onReply
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|doSignIn
argument_list|(
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'x'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|keyExpandAllMessages
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|onExpandAll
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'z'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|keyCollapseAllMessages
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|onCollapseAll
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'s'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableStar
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|star
operator|.
name|setValue
argument_list|(
operator|!
name|star
operator|.
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|doSignIn
argument_list|(
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'c'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|keyAddReviewers
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|reviewers
operator|.
name|onOpenForm
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|doSignIn
argument_list|(
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'t'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|keyEditTopic
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
comment|// In Firefox this event is mistakenly called when F5 is pressed so
comment|// differentiate F5 from 't' by checking the charCode(F5=0, t=116).
if|if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getCharCode
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Window
operator|.
name|Location
operator|.
name|reload
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|topic
operator|.
name|canEdit
argument_list|()
condition|)
block|{
name|topic
operator|.
name|onEdit
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|Gerrit
operator|.
name|doSignIn
argument_list|(
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|GlobalKey
operator|.
name|add
argument_list|(
name|this
argument_list|,
name|keysAction
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|.
name|registerKeys
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onShowView ()
specifier|public
name|void
name|onShowView
parameter_list|()
block|{
name|super
operator|.
name|onShowView
argument_list|()
expr_stmt|;
name|commit
operator|.
name|onShowView
argument_list|()
expr_stmt|;
name|related
operator|.
name|setMaxHeight
argument_list|(
name|commit
operator|.
name|getElement
argument_list|()
operator|.
name|getParentElement
argument_list|()
operator|.
name|getOffsetHeight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|openReplyBox
condition|)
block|{
name|onReply
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|prior
init|=
name|Gerrit
operator|.
name|getPriorView
argument_list|()
decl_stmt|;
if|if
condition|(
name|prior
operator|!=
literal|null
operator|&&
name|prior
operator|.
name|startsWith
argument_list|(
literal|"/c/"
argument_list|)
condition|)
block|{
name|scrollToPath
argument_list|(
name|prior
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ChangeGlue
operator|.
name|fireShowChange
argument_list|(
name|changeInfo
argument_list|,
name|changeInfo
operator|.
name|revision
argument_list|(
name|revision
argument_list|)
argument_list|)
expr_stmt|;
name|CodeMirror
operator|.
name|preload
argument_list|()
expr_stmt|;
name|startPoller
argument_list|()
expr_stmt|;
block|}
DECL|method|scrollToPath (String token)
specifier|private
name|void
name|scrollToPath
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|int
name|s
init|=
name|token
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|c
init|=
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|int
name|editIndex
init|=
name|c
operator|.
name|indexOf
argument_list|(
literal|",edit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|editIndex
operator|>
literal|0
condition|)
block|{
name|c
operator|=
name|c
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|editIndex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|<
literal|0
operator|||
operator|!
name|changeId
operator|.
name|equals
argument_list|(
name|Change
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
block|{
return|return;
comment|// Unrelated URL, do not scroll.
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return;
block|}
name|s
operator|=
name|token
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|s
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|<
literal|0
condition|)
block|{
return|return;
comment|// URL does not name a file.
block|}
name|int
name|c
init|=
name|token
operator|.
name|lastIndexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|c
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|s
operator|+
literal|1
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|s
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|token
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|files
operator|.
name|scrollToPath
argument_list|(
name|KeyUtil
operator|.
name|decode
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"star"
argument_list|)
DECL|method|onToggleStar (ValueChangeEvent<Boolean> e)
name|void
name|onToggleStar
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|e
parameter_list|)
block|{
name|StarredChanges
operator|.
name|toggleStar
argument_list|(
name|changeId
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"includedIn"
argument_list|)
DECL|method|onIncludedIn (@uppressWarningsR) ClickEvent e)
name|void
name|onIncludedIn
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|includedInAction
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"download"
argument_list|)
DECL|method|onDownload (@uppressWarningsR) ClickEvent e)
name|void
name|onDownload
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|downloadAction
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"patchSets"
argument_list|)
DECL|method|onPatchSets (@uppressWarningsR) ClickEvent e)
name|void
name|onPatchSets
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|patchSetsAction
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"reply"
argument_list|)
DECL|method|onReply (@uppressWarningsR) ClickEvent e)
name|void
name|onReply
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|onReply
argument_list|()
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"permalink"
argument_list|)
DECL|method|onReload (ClickEvent e)
name|void
name|onReload
parameter_list|(
name|ClickEvent
name|e
parameter_list|)
block|{
name|e
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
name|PageLinks
operator|.
name|toChange
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|onReply ()
specifier|private
name|void
name|onReply
parameter_list|()
block|{
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|replyAction
operator|.
name|onReply
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|doSignIn
argument_list|(
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"openAll"
argument_list|)
DECL|method|onOpenAll (@uppressWarningsR) ClickEvent e)
name|void
name|onOpenAll
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|files
operator|.
name|openAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"editMode"
argument_list|)
DECL|method|onEditMode (@uppressWarningsR) ClickEvent e)
name|void
name|onEditMode
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|fileTableMode
operator|=
name|FileTable
operator|.
name|Mode
operator|.
name|EDIT
expr_stmt|;
name|refreshFileTable
argument_list|()
expr_stmt|;
name|editMode
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|addFile
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|deleteFile
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|renameFile
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|reviewMode
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"reviewMode"
argument_list|)
DECL|method|onReviewMode (@uppressWarningsR) ClickEvent e)
name|void
name|onReviewMode
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|fileTableMode
operator|=
name|FileTable
operator|.
name|Mode
operator|.
name|REVIEW
expr_stmt|;
name|refreshFileTable
argument_list|()
expr_stmt|;
name|editMode
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addFile
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|deleteFile
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|renameFile
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reviewMode
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"addFile"
argument_list|)
DECL|method|onAddFile (@uppressWarningsR) ClickEvent e)
name|void
name|onAddFile
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|addFileAction
operator|.
name|onEdit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"deleteFile"
argument_list|)
DECL|method|onDeleteFile (@uppressWarningsR) ClickEvent e)
name|void
name|onDeleteFile
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|deleteFileAction
operator|.
name|onDelete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"renameFile"
argument_list|)
DECL|method|onRenameFile (@uppressWarningsR) ClickEvent e)
name|void
name|onRenameFile
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|renameFileAction
operator|.
name|onRename
argument_list|()
expr_stmt|;
block|}
DECL|method|refreshFileTable ()
specifier|private
name|void
name|refreshFileTable
parameter_list|()
block|{
name|int
name|idx
init|=
name|diffBase
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|idx
condition|)
block|{
name|String
name|n
init|=
name|diffBase
operator|.
name|getValue
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|loadConfigInfo
argument_list|(
name|changeInfo
argument_list|,
name|DiffObject
operator|.
name|parse
argument_list|(
name|changeInfo
operator|.
name|legacyId
argument_list|()
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"showTaggedComments"
argument_list|)
DECL|method|onShowTaggedComments (@uppressWarningsR) ClickEvent e)
name|void
name|onShowTaggedComments
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|showTaggedComments
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|hideTaggedComments
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|history
operator|.
name|getWidgetCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
operator|(
operator|(
name|Message
operator|)
name|history
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
operator|)
decl_stmt|;
name|m
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"hideTaggedComments"
argument_list|)
DECL|method|onHideTaggedComments (@uppressWarningsR) ClickEvent e)
name|void
name|onHideTaggedComments
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|hideTaggedComments
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|showTaggedComments
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|history
operator|.
name|getWidgetCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
operator|(
operator|(
name|Message
operator|)
name|history
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|tag
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"expandAll"
argument_list|)
DECL|method|onExpandAll (@uppressWarningsR) ClickEvent e)
name|void
name|onExpandAll
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|int
name|n
init|=
name|history
operator|.
name|getWidgetCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
operator|(
operator|(
name|Message
operator|)
name|history
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|expandAll
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|collapseAll
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"collapseAll"
argument_list|)
DECL|method|onCollapseAll (@uppressWarningsR) ClickEvent e)
name|void
name|onCollapseAll
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|int
name|n
init|=
name|history
operator|.
name|getWidgetCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
operator|(
operator|(
name|Message
operator|)
name|history
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|setOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|expandAll
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|collapseAll
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"diffBase"
argument_list|)
DECL|method|onChangeRevision (@uppressWarningsR) ChangeEvent e)
name|void
name|onChangeRevision
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ChangeEvent
name|e
parameter_list|)
block|{
name|int
name|idx
init|=
name|diffBase
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|idx
condition|)
block|{
name|String
name|n
init|=
name|diffBase
operator|.
name|getValue
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|loadConfigInfo
argument_list|(
name|changeInfo
argument_list|,
name|DiffObject
operator|.
name|parse
argument_list|(
name|changeInfo
operator|.
name|legacyId
argument_list|()
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadConfigInfo (final ChangeInfo info, DiffObject base)
specifier|private
name|void
name|loadConfigInfo
parameter_list|(
specifier|final
name|ChangeInfo
name|info
parameter_list|,
name|DiffObject
name|base
parameter_list|)
block|{
specifier|final
name|RevisionInfo
name|rev
init|=
name|info
operator|.
name|revision
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|.
name|isAutoMerge
argument_list|()
operator|&&
operator|!
name|initCurrentRevision
argument_list|(
name|info
argument_list|)
operator|.
name|isMerge
argument_list|()
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|getToken
argument_list|()
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateToken
argument_list|(
name|info
argument_list|,
name|base
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|RevisionInfo
name|baseRev
init|=
name|resolveRevisionOrPatchSetId
argument_list|(
name|info
argument_list|,
name|base
operator|.
name|asString
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CallbackGroup
name|group
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
name|Timestamp
name|lastReply
init|=
name|myLastReply
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|.
name|isEdit
argument_list|()
condition|)
block|{
comment|// Comments are filtered for the current revision. Use parent
comment|// patch set for edits, as edits themself can never have comments.
name|RevisionInfo
name|p
init|=
name|RevisionInfo
operator|.
name|findEditParentRevision
argument_list|(
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
name|comments
init|=
name|loadComments
argument_list|(
name|p
argument_list|,
name|group
argument_list|)
decl_stmt|;
name|loadFileList
argument_list|(
name|base
argument_list|,
name|baseRev
argument_list|,
name|rev
argument_list|,
name|lastReply
argument_list|,
name|group
argument_list|,
name|comments
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loadDiff
argument_list|(
name|base
argument_list|,
name|baseRev
argument_list|,
name|rev
argument_list|,
name|lastReply
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|addListener
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
name|loadConfigInfo
argument_list|(
name|info
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Loading file list and inline comments failed: "
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|loadConfigInfo
argument_list|(
name|info
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|group
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
DECL|method|loadConfigInfo (final ChangeInfo info, RevisionInfo rev)
specifier|private
name|void
name|loadConfigInfo
parameter_list|(
specifier|final
name|ChangeInfo
name|info
parameter_list|,
name|RevisionInfo
name|rev
parameter_list|)
block|{
if|if
condition|(
name|loaded
condition|)
block|{
return|return;
block|}
name|RevisionInfoCache
operator|.
name|add
argument_list|(
name|changeId
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|ConfigInfoCache
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|ConfigInfoCache
operator|.
name|get
argument_list|(
name|info
operator|.
name|projectNameKey
argument_list|()
argument_list|,
operator|new
name|ScreenLoadCallback
argument_list|<
name|ConfigInfoCache
operator|.
name|Entry
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|preDisplay
parameter_list|(
name|Entry
name|result
parameter_list|)
block|{
name|loaded
operator|=
literal|true
expr_stmt|;
name|commentLinkProcessor
operator|=
name|result
operator|.
name|getCommentLinkProcessor
argument_list|()
expr_stmt|;
name|setTheme
argument_list|(
name|result
operator|.
name|getTheme
argument_list|()
argument_list|)
expr_stmt|;
name|renderChangeInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|loadRevisionInfo
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ConfigInfoCache
operator|.
name|get
argument_list|(
name|info
operator|.
name|projectNameKey
argument_list|()
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|Entry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|addExtensionPoints
argument_list|(
name|info
argument_list|,
name|rev
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|updateToken (ChangeInfo info, DiffObject base, RevisionInfo rev)
specifier|private
name|void
name|updateToken
parameter_list|(
name|ChangeInfo
name|info
parameter_list|,
name|DiffObject
name|base
parameter_list|,
name|RevisionInfo
name|rev
parameter_list|)
block|{
name|StringBuilder
name|token
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"/c/"
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|_number
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|.
name|asString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|token
operator|.
name|append
argument_list|(
name|base
operator|.
name|asString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|base
operator|.
name|asString
argument_list|()
operator|!=
literal|null
operator|||
operator|!
name|rev
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|()
argument_list|)
condition|)
block|{
name|token
operator|.
name|append
argument_list|(
name|rev
operator|.
name|_number
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setToken
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|myLastReply (ChangeInfo info)
specifier|static
name|Timestamp
name|myLastReply
parameter_list|(
name|ChangeInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
operator|&&
name|info
operator|.
name|messages
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|self
init|=
name|Gerrit
operator|.
name|getUserAccount
argument_list|()
operator|.
name|_accountId
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|info
operator|.
name|messages
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|MessageInfo
name|m
init|=
name|info
operator|.
name|messages
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|author
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|author
argument_list|()
operator|.
name|_accountId
argument_list|()
operator|==
name|self
condition|)
block|{
return|return
name|m
operator|.
name|date
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|loadDiff ( DiffObject base, RevisionInfo baseRev, RevisionInfo rev, Timestamp myLastReply, CallbackGroup group)
specifier|private
name|void
name|loadDiff
parameter_list|(
name|DiffObject
name|base
parameter_list|,
name|RevisionInfo
name|baseRev
parameter_list|,
name|RevisionInfo
name|rev
parameter_list|,
name|Timestamp
name|myLastReply
parameter_list|,
name|CallbackGroup
name|group
parameter_list|)
block|{
name|List
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
name|comments
init|=
name|loadComments
argument_list|(
name|rev
argument_list|,
name|group
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
name|drafts
init|=
name|loadDrafts
argument_list|(
name|rev
argument_list|,
name|group
argument_list|)
decl_stmt|;
name|loadFileList
argument_list|(
name|base
argument_list|,
name|baseRev
argument_list|,
name|rev
argument_list|,
name|myLastReply
argument_list|,
name|group
argument_list|,
name|comments
argument_list|,
name|drafts
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
operator|&&
name|fileTableMode
operator|==
name|FileTable
operator|.
name|Mode
operator|.
name|REVIEW
condition|)
block|{
name|ChangeApi
operator|.
name|revision
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|rev
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|view
argument_list|(
literal|"files"
argument_list|)
operator|.
name|addParameterTrue
argument_list|(
literal|"reviewed"
argument_list|)
operator|.
name|get
argument_list|(
name|group
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|JsArrayString
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|JsArrayString
name|result
parameter_list|)
block|{
name|files
operator|.
name|markReviewed
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadFileList ( final DiffObject base, final RevisionInfo baseRev, final RevisionInfo rev, final Timestamp myLastReply, CallbackGroup group, final List<NativeMap<JsArray<CommentInfo>>> comments, final List<NativeMap<JsArray<CommentInfo>>> drafts)
specifier|private
name|void
name|loadFileList
parameter_list|(
specifier|final
name|DiffObject
name|base
parameter_list|,
specifier|final
name|RevisionInfo
name|baseRev
parameter_list|,
specifier|final
name|RevisionInfo
name|rev
parameter_list|,
specifier|final
name|Timestamp
name|myLastReply
parameter_list|,
name|CallbackGroup
name|group
parameter_list|,
specifier|final
name|List
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
name|comments
parameter_list|,
specifier|final
name|List
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
name|drafts
parameter_list|)
block|{
name|DiffApi
operator|.
name|list
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|rev
operator|.
name|name
argument_list|()
argument_list|,
name|baseRev
argument_list|,
name|group
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|NativeMap
argument_list|<
name|FileInfo
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|FileInfo
argument_list|>
name|m
parameter_list|)
block|{
name|files
operator|.
name|set
argument_list|(
name|base
argument_list|,
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|changeId
argument_list|,
name|rev
operator|.
name|_number
argument_list|()
argument_list|)
argument_list|,
name|style
argument_list|,
name|reply
argument_list|,
name|fileTableMode
argument_list|,
name|edit
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|files
operator|.
name|setValue
argument_list|(
name|m
argument_list|,
name|myLastReply
argument_list|,
name|comments
operator|!=
literal|null
condition|?
name|comments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
argument_list|,
name|drafts
operator|!=
literal|null
condition|?
name|drafts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|files
operator|.
name|showError
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|loadComments ( final RevisionInfo rev, CallbackGroup group)
specifier|private
name|List
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
name|loadComments
parameter_list|(
specifier|final
name|RevisionInfo
name|rev
parameter_list|,
name|CallbackGroup
name|group
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// TODO(dborowitz): Could eliminate this call by adding an option to include
comment|// inline comments in the change detail.
name|ChangeApi
operator|.
name|comments
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|group
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
parameter_list|)
block|{
comment|// Return value is used for populating the file table, so only count
comment|// comments for the current revision. Still include all comments in
comment|// the history table.
name|r
operator|.
name|add
argument_list|(
name|filterForRevision
argument_list|(
name|result
argument_list|,
name|rev
operator|.
name|_number
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|history
operator|.
name|addComments
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|filterForRevision ( NativeMap<JsArray<CommentInfo>> comments, int id)
specifier|private
specifier|static
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|filterForRevision
parameter_list|(
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|comments
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|filtered
init|=
name|NativeMap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|k
range|:
name|comments
operator|.
name|keySet
argument_list|()
control|)
block|{
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|allRevisions
init|=
name|comments
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|thisRevision
init|=
name|JsArray
operator|.
name|createArray
argument_list|()
operator|.
name|cast
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allRevisions
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CommentInfo
name|c
init|=
name|allRevisions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|patchSet
argument_list|()
operator|==
name|id
condition|)
block|{
name|thisRevision
operator|.
name|push
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|filtered
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|thisRevision
argument_list|)
expr_stmt|;
block|}
return|return
name|filtered
return|;
block|}
DECL|method|loadDrafts (RevisionInfo rev, CallbackGroup group)
specifier|private
name|List
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
name|loadDrafts
parameter_list|(
name|RevisionInfo
name|rev
parameter_list|,
name|CallbackGroup
name|group
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|ChangeApi
operator|.
name|revision
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|rev
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|view
argument_list|(
literal|"drafts"
argument_list|)
operator|.
name|get
argument_list|(
name|group
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
parameter_list|)
block|{
name|r
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|add
argument_list|(
name|NativeMap
operator|.
expr|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
operator|>
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
DECL|method|loadCommit (final RevisionInfo rev, CallbackGroup group)
specifier|private
name|void
name|loadCommit
parameter_list|(
specifier|final
name|RevisionInfo
name|rev
parameter_list|,
name|CallbackGroup
name|group
parameter_list|)
block|{
if|if
condition|(
name|rev
operator|.
name|isEdit
argument_list|()
operator|||
name|rev
operator|.
name|commit
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|ChangeApi
operator|.
name|commitWithLinks
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|rev
operator|.
name|name
argument_list|()
argument_list|,
name|group
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|CommitInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|CommitInfo
name|info
parameter_list|)
block|{
name|rev
operator|.
name|setCommit
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|renderSubmitType (Change.Status status, boolean canSubmit, SubmitType submitType)
specifier|private
name|void
name|renderSubmitType
parameter_list|(
name|Change
operator|.
name|Status
name|status
parameter_list|,
name|boolean
name|canSubmit
parameter_list|,
name|SubmitType
name|submitType
parameter_list|)
block|{
if|if
condition|(
name|canSubmit
operator|&&
name|status
operator|==
name|Change
operator|.
name|Status
operator|.
name|NEW
condition|)
block|{
name|statusText
operator|.
name|setInnerText
argument_list|(
name|changeInfo
operator|.
name|mergeable
argument_list|()
condition|?
name|Util
operator|.
name|C
operator|.
name|readyToSubmit
argument_list|()
else|:
name|Util
operator|.
name|C
operator|.
name|mergeConflict
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setVisible
argument_list|(
name|notMergeable
argument_list|,
operator|!
name|changeInfo
operator|.
name|mergeable
argument_list|()
argument_list|)
expr_stmt|;
name|submitActionText
operator|.
name|setInnerText
argument_list|(
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|Util
operator|.
name|toLongString
argument_list|(
name|submitType
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|resolveRevisionToDisplay (ChangeInfo info)
specifier|private
name|RevisionInfo
name|resolveRevisionToDisplay
parameter_list|(
name|ChangeInfo
name|info
parameter_list|)
block|{
name|RevisionInfo
name|rev
init|=
name|resolveRevisionOrPatchSetId
argument_list|(
name|info
argument_list|,
name|revision
argument_list|,
name|info
operator|.
name|currentRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|!=
literal|null
condition|)
block|{
name|revision
operator|=
name|rev
operator|.
name|name
argument_list|()
expr_stmt|;
return|return
name|rev
return|;
block|}
comment|// the revision is not visible to the calling user (maybe it is a draft?)
comment|// or the change is corrupt, take the last revision that was returned,
comment|// if no revision was returned display an error
name|JsArray
argument_list|<
name|RevisionInfo
argument_list|>
name|revisions
init|=
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
if|if
condition|(
name|revisions
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|RevisionInfo
operator|.
name|sortRevisionInfoByNumber
argument_list|(
name|revisions
argument_list|)
expr_stmt|;
name|rev
operator|=
name|revisions
operator|.
name|get
argument_list|(
name|revisions
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|revision
operator|=
name|rev
operator|.
name|name
argument_list|()
expr_stmt|;
return|return
name|rev
return|;
block|}
operator|new
name|ErrorDialog
argument_list|(
name|Resources
operator|.
name|M
operator|.
name|changeWithNoRevisions
argument_list|(
name|info
operator|.
name|legacyId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|center
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no revision, cannot proceed"
argument_list|)
throw|;
block|}
comment|/**    * Resolve a revision or patch set id string to RevisionInfo. When this view is created from the    * changes table, revision is passed as a real revision. When this view is created from side by    * side (by closing it with 'u') patch set id is passed.    *    * @param info change info    * @param revOrId revision or patch set id    * @param defaultValue value returned when revOrId is null    * @return resolved revision or default value    */
DECL|method|resolveRevisionOrPatchSetId ( ChangeInfo info, String revOrId, String defaultValue)
specifier|private
name|RevisionInfo
name|resolveRevisionOrPatchSetId
parameter_list|(
name|ChangeInfo
name|info
parameter_list|,
name|String
name|revOrId
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|int
name|parentNum
decl_stmt|;
if|if
condition|(
name|revOrId
operator|==
literal|null
condition|)
block|{
name|revOrId
operator|=
name|defaultValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|parentNum
operator|=
name|toParentNum
argument_list|(
name|revOrId
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|CommitInfo
name|commitInfo
init|=
name|info
operator|.
name|revision
argument_list|(
name|revision
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|JsArray
argument_list|<
name|CommitInfo
argument_list|>
name|parents
init|=
name|commitInfo
operator|.
name|parents
argument_list|()
decl_stmt|;
if|if
condition|(
name|parents
operator|.
name|length
argument_list|()
operator|>=
name|parentNum
condition|)
block|{
return|return
name|RevisionInfo
operator|.
name|forParent
argument_list|(
operator|-
name|parentNum
argument_list|,
name|parents
operator|.
name|get
argument_list|(
name|parentNum
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|containsKey
argument_list|(
name|revOrId
argument_list|)
condition|)
block|{
name|JsArray
argument_list|<
name|RevisionInfo
argument_list|>
name|list
init|=
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RevisionInfo
name|r
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|revOrId
operator|.
name|equals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|_number
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|revOrId
operator|=
name|r
operator|.
name|name
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|revOrId
operator|!=
literal|null
condition|?
name|info
operator|.
name|revision
argument_list|(
name|revOrId
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|isSubmittable (ChangeInfo info)
specifier|private
name|boolean
name|isSubmittable
parameter_list|(
name|ChangeInfo
name|info
parameter_list|)
block|{
name|boolean
name|canSubmit
init|=
name|info
operator|.
name|status
argument_list|()
operator|.
name|isOpen
argument_list|()
operator|&&
name|revision
operator|.
name|equals
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|()
argument_list|)
operator|&&
operator|!
name|info
operator|.
name|revision
argument_list|(
name|revision
argument_list|)
operator|.
name|draft
argument_list|()
decl_stmt|;
if|if
condition|(
name|canSubmit
operator|&&
name|info
operator|.
name|status
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|NEW
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|info
operator|.
name|labels
argument_list|()
control|)
block|{
name|LabelInfo
name|label
init|=
name|info
operator|.
name|label
argument_list|(
name|name
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|label
operator|.
name|status
argument_list|()
condition|)
block|{
case|case
name|NEED
case|:
name|statusText
operator|.
name|setInnerText
argument_list|(
name|Util
operator|.
name|M
operator|.
name|needs
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|canSubmit
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|REJECT
case|:
case|case
name|IMPOSSIBLE
case|:
if|if
condition|(
name|label
operator|.
name|blocking
argument_list|()
condition|)
block|{
name|statusText
operator|.
name|setInnerText
argument_list|(
name|Util
operator|.
name|M
operator|.
name|blockedOn
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|canSubmit
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
name|MAY
case|:
case|case
name|OK
case|:
default|default:
break|break;
block|}
block|}
block|}
return|return
name|canSubmit
return|;
block|}
DECL|method|renderChangeInfo (ChangeInfo info)
specifier|private
name|void
name|renderChangeInfo
parameter_list|(
name|ChangeInfo
name|info
parameter_list|)
block|{
name|RevisionInfo
name|revisionInfo
init|=
name|info
operator|.
name|revision
argument_list|(
name|revision
argument_list|)
decl_stmt|;
name|changeInfo
operator|=
name|info
expr_stmt|;
name|lastDisplayedUpdate
operator|=
name|info
operator|.
name|updated
argument_list|()
expr_stmt|;
name|labels
operator|.
name|set
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|renderOwner
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|renderUploader
argument_list|(
name|info
argument_list|,
name|revisionInfo
argument_list|)
expr_stmt|;
name|renderActionTextDate
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|renderDiffBaseListBox
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|initReplyButton
argument_list|(
name|info
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|initIncludedInAction
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|initDownloadAction
argument_list|(
name|info
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|initProjectLinks
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|initBranchLink
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|initEditMode
argument_list|(
name|info
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|actions
operator|.
name|display
argument_list|(
name|info
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|star
operator|.
name|setValue
argument_list|(
name|info
operator|.
name|starred
argument_list|()
argument_list|)
expr_stmt|;
name|permalink
operator|.
name|setHref
argument_list|(
name|ChangeLink
operator|.
name|permalink
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
name|permalink
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|info
operator|.
name|legacyId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|topic
operator|.
name|set
argument_list|(
name|info
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|commit
operator|.
name|set
argument_list|(
name|commentLinkProcessor
argument_list|,
name|info
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|related
operator|.
name|set
argument_list|(
name|info
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|reviewers
operator|.
name|set
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|assignee
operator|.
name|set
argument_list|(
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isNoteDbEnabled
argument_list|()
condition|)
block|{
name|hashtags
operator|.
name|set
argument_list|(
name|info
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setVisible
argument_list|(
name|hashtagTableRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Util
operator|.
name|M
operator|.
name|changeScreenTitleId
argument_list|(
name|info
operator|.
name|idAbbreviated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|subject
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|info
operator|.
name|subject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setWindowTitle
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Although this is related to the revision, we can process it early to
comment|// render it faster.
if|if
condition|(
operator|!
name|info
operator|.
name|status
argument_list|()
operator|.
name|isOpen
argument_list|()
operator|||
operator|!
name|revision
operator|.
name|equals
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|()
argument_list|)
operator|||
name|revisionInfo
operator|.
name|isEdit
argument_list|()
condition|)
block|{
name|setVisible
argument_list|(
name|strategy
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Properly render revision actions initially while waiting for
comment|// the callback to populate them correctly.
name|NativeMap
argument_list|<
name|ActionInfo
argument_list|>
name|emptyMap
init|=
name|NativeMap
operator|.
expr|<
name|ActionInfo
operator|>
name|create
argument_list|()
decl_stmt|;
name|initRevisionsAction
argument_list|(
name|info
argument_list|,
name|revision
argument_list|,
name|emptyMap
argument_list|)
expr_stmt|;
name|quickApprove
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|actions
operator|.
name|reloadRevisionActions
argument_list|(
name|emptyMap
argument_list|)
expr_stmt|;
name|boolean
name|current
init|=
name|revision
operator|.
name|equals
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|()
argument_list|)
operator|&&
operator|!
name|revisionInfo
operator|.
name|isEdit
argument_list|()
decl_stmt|;
if|if
condition|(
name|revisionInfo
operator|.
name|isEdit
argument_list|()
condition|)
block|{
name|statusText
operator|.
name|setInnerText
argument_list|(
name|Util
operator|.
name|C
operator|.
name|changeEdit
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|current
condition|)
block|{
name|statusText
operator|.
name|setInnerText
argument_list|(
name|Util
operator|.
name|C
operator|.
name|notCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|labels
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Status
name|s
init|=
name|info
operator|.
name|revision
argument_list|(
name|revision
argument_list|)
operator|.
name|draft
argument_list|()
condition|?
name|Status
operator|.
name|DRAFT
else|:
name|info
operator|.
name|status
argument_list|()
decl_stmt|;
name|statusText
operator|.
name|setInnerText
argument_list|(
name|Util
operator|.
name|toLongString
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|isPrivate
argument_list|()
condition|)
block|{
name|privateText
operator|.
name|setInnerText
argument_list|(
name|Util
operator|.
name|C
operator|.
name|isPrivate
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|replyAction
operator|=
operator|new
name|ReplyAction
argument_list|(
name|info
argument_list|,
name|revision
argument_list|,
name|hasDraftComments
argument_list|,
name|style
argument_list|,
name|commentLinkProcessor
argument_list|,
name|reply
argument_list|,
name|quickApprove
argument_list|)
expr_stmt|;
block|}
name|history
operator|.
name|set
argument_list|(
name|commentLinkProcessor
argument_list|,
name|replyAction
argument_list|,
name|changeId
argument_list|,
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|&&
name|info
operator|.
name|status
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|quickApprove
operator|.
name|set
argument_list|(
name|info
argument_list|,
name|revision
argument_list|,
name|replyAction
argument_list|)
expr_stmt|;
name|renderSubmitType
argument_list|(
name|info
operator|.
name|status
argument_list|()
argument_list|,
name|isSubmittable
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|submitType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|quickApprove
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderRevisionInfo (ChangeInfo info, NativeMap<ActionInfo> actionMap)
specifier|private
name|void
name|renderRevisionInfo
parameter_list|(
name|ChangeInfo
name|info
parameter_list|,
name|NativeMap
argument_list|<
name|ActionInfo
argument_list|>
name|actionMap
parameter_list|)
block|{
name|initRevisionsAction
argument_list|(
name|info
argument_list|,
name|revision
argument_list|,
name|actionMap
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setParentNotCurrent
argument_list|(
name|actionMap
operator|.
name|containsKey
argument_list|(
literal|"rebase"
argument_list|)
operator|&&
name|actionMap
operator|.
name|get
argument_list|(
literal|"rebase"
argument_list|)
operator|.
name|enabled
argument_list|()
argument_list|)
expr_stmt|;
name|actions
operator|.
name|reloadRevisionActions
argument_list|(
name|actionMap
argument_list|)
expr_stmt|;
block|}
DECL|method|renderOwner (ChangeInfo info)
specifier|private
name|void
name|renderOwner
parameter_list|(
name|ChangeInfo
name|info
parameter_list|)
block|{
comment|// TODO info card hover
name|String
name|name
init|=
name|name
argument_list|(
name|info
operator|.
name|owner
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|owner
argument_list|()
operator|.
name|avatar
argument_list|(
name|AvatarInfo
operator|.
name|DEFAULT_SIZE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ownerPanel
operator|.
name|insert
argument_list|(
operator|new
name|AvatarImage
argument_list|(
name|info
operator|.
name|owner
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|ownerLink
operator|.
name|setText
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ownerLink
operator|.
name|setTitle
argument_list|(
name|email
argument_list|(
name|info
operator|.
name|owner
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|ownerLink
operator|.
name|setTargetHistoryToken
argument_list|(
name|PageLinks
operator|.
name|toAccountQuery
argument_list|(
name|info
operator|.
name|owner
argument_list|()
operator|.
name|name
argument_list|()
operator|!=
literal|null
condition|?
name|info
operator|.
name|owner
argument_list|()
operator|.
name|name
argument_list|()
else|:
name|info
operator|.
name|owner
argument_list|()
operator|.
name|email
argument_list|()
operator|!=
literal|null
condition|?
name|info
operator|.
name|owner
argument_list|()
operator|.
name|email
argument_list|()
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|info
operator|.
name|owner
argument_list|()
operator|.
name|_accountId
argument_list|()
argument_list|)
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|renderUploader (ChangeInfo changeInfo, RevisionInfo revInfo)
specifier|private
name|void
name|renderUploader
parameter_list|(
name|ChangeInfo
name|changeInfo
parameter_list|,
name|RevisionInfo
name|revInfo
parameter_list|)
block|{
name|AccountInfo
name|uploader
init|=
name|revInfo
operator|.
name|uploader
argument_list|()
decl_stmt|;
name|boolean
name|isOwner
init|=
name|uploader
operator|==
literal|null
operator|||
name|uploader
operator|.
name|_accountId
argument_list|()
operator|==
name|changeInfo
operator|.
name|owner
argument_list|()
operator|.
name|_accountId
argument_list|()
decl_stmt|;
name|renderPushCertificate
argument_list|(
name|revInfo
argument_list|,
name|isOwner
condition|?
name|ownerPanel
else|:
name|uploaderPanel
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOwner
condition|)
block|{
name|uploaderRow
operator|.
name|getStyle
argument_list|()
operator|.
name|setDisplay
argument_list|(
name|Display
operator|.
name|NONE
argument_list|)
expr_stmt|;
return|return;
block|}
name|uploaderRow
operator|.
name|getStyle
argument_list|()
operator|.
name|setDisplay
argument_list|(
name|Display
operator|.
name|TABLE_ROW
argument_list|)
expr_stmt|;
if|if
condition|(
name|uploader
operator|.
name|avatar
argument_list|(
name|AvatarInfo
operator|.
name|DEFAULT_SIZE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|uploaderPanel
operator|.
name|insert
argument_list|(
operator|new
name|AvatarImage
argument_list|(
name|uploader
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|name
argument_list|(
name|uploader
argument_list|)
decl_stmt|;
name|uploaderName
operator|.
name|setText
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|uploaderName
operator|.
name|setTitle
argument_list|(
name|email
argument_list|(
name|uploader
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|renderPushCertificate (RevisionInfo revInfo, FlowPanel panel)
specifier|private
name|void
name|renderPushCertificate
parameter_list|(
name|RevisionInfo
name|revInfo
parameter_list|,
name|FlowPanel
name|panel
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enableSignedPush
argument_list|()
condition|)
block|{
return|return;
block|}
name|Image
name|status
init|=
operator|new
name|Image
argument_list|()
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStyleName
argument_list|(
name|style
operator|.
name|pushCertStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|revInfo
operator|.
name|hasPushCertificate
argument_list|()
operator|||
name|revInfo
operator|.
name|pushCertificate
argument_list|()
operator|.
name|key
argument_list|()
operator|==
literal|null
condition|)
block|{
name|status
operator|.
name|setResource
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|question
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setTitle
argument_list|(
name|Util
operator|.
name|C
operator|.
name|pushCertMissing
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|PushCertificateInfo
name|certInfo
init|=
name|revInfo
operator|.
name|pushCertificate
argument_list|()
decl_stmt|;
name|GpgKeyInfo
operator|.
name|Status
name|s
init|=
name|certInfo
operator|.
name|key
argument_list|()
operator|.
name|status
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|s
condition|)
block|{
case|case
name|BAD
case|:
name|status
operator|.
name|setResource
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|redNot
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setTitle
argument_list|(
name|problems
argument_list|(
name|Util
operator|.
name|C
operator|.
name|pushCertBad
argument_list|()
argument_list|,
name|certInfo
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|OK
case|:
name|status
operator|.
name|setResource
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|warning
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setTitle
argument_list|(
name|problems
argument_list|(
name|Util
operator|.
name|C
operator|.
name|pushCertOk
argument_list|()
argument_list|,
name|certInfo
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRUSTED
case|:
name|status
operator|.
name|setResource
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|greenCheck
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setTitle
argument_list|(
name|Util
operator|.
name|C
operator|.
name|pushCertTrusted
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|method|name (AccountInfo info)
specifier|private
specifier|static
name|String
name|name
parameter_list|(
name|AccountInfo
name|info
parameter_list|)
block|{
return|return
name|info
operator|.
name|name
argument_list|()
operator|!=
literal|null
condition|?
name|info
operator|.
name|name
argument_list|()
else|:
name|Gerrit
operator|.
name|info
argument_list|()
operator|.
name|user
argument_list|()
operator|.
name|anonymousCowardName
argument_list|()
return|;
block|}
DECL|method|email (AccountInfo info, String name)
specifier|private
specifier|static
name|String
name|email
parameter_list|(
name|AccountInfo
name|info
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|info
operator|.
name|email
argument_list|()
operator|!=
literal|null
condition|?
name|info
operator|.
name|email
argument_list|()
else|:
name|name
return|;
block|}
DECL|method|problems (String msg, PushCertificateInfo info)
specifier|private
specifier|static
name|String
name|problems
parameter_list|(
name|String
name|msg
parameter_list|,
name|PushCertificateInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|.
name|key
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|info
operator|.
name|key
argument_list|()
operator|.
name|hasProblems
argument_list|()
operator|||
name|info
operator|.
name|key
argument_list|()
operator|.
name|problems
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|msg
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|msg
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|problem
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|info
operator|.
name|key
argument_list|()
operator|.
name|problems
argument_list|()
argument_list|)
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|append
argument_list|(
name|problem
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|renderActionTextDate (ChangeInfo info)
specifier|private
name|void
name|renderActionTextDate
parameter_list|(
name|ChangeInfo
name|info
parameter_list|)
block|{
name|String
name|action
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|created
argument_list|()
operator|.
name|equals
argument_list|(
name|info
operator|.
name|updated
argument_list|()
argument_list|)
condition|)
block|{
name|action
operator|=
name|Util
operator|.
name|C
operator|.
name|changeInfoBlockUploaded
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|action
operator|=
name|Util
operator|.
name|C
operator|.
name|changeInfoBlockUpdated
argument_list|()
expr_stmt|;
block|}
name|actionText
operator|.
name|setInnerText
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|actionDate
operator|.
name|setInnerText
argument_list|(
name|FormatUtil
operator|.
name|relativeFormat
argument_list|(
name|info
operator|.
name|updated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|renderDiffBaseListBox (ChangeInfo info)
specifier|private
name|void
name|renderDiffBaseListBox
parameter_list|(
name|ChangeInfo
name|info
parameter_list|)
block|{
name|JsArray
argument_list|<
name|RevisionInfo
argument_list|>
name|list
init|=
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|RevisionInfo
operator|.
name|sortRevisionInfoByNumber
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|int
name|selectedIdx
init|=
name|list
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|list
operator|.
name|length
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|RevisionInfo
name|r
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|diffBase
operator|.
name|addItem
argument_list|(
name|r
operator|.
name|id
argument_list|()
operator|+
literal|": "
operator|+
name|r
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|)
argument_list|,
name|r
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|revision
argument_list|)
condition|)
block|{
name|SelectElement
operator|.
name|as
argument_list|(
name|diffBase
operator|.
name|getElement
argument_list|()
argument_list|)
operator|.
name|getOptions
argument_list|()
operator|.
name|getItem
argument_list|(
name|diffBase
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|setDisabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|base
operator|.
name|isPatchSet
argument_list|()
operator|&&
name|base
operator|.
name|asPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
operator|==
name|r
operator|.
name|_number
argument_list|()
condition|)
block|{
name|selectedIdx
operator|=
name|diffBase
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
block|}
name|RevisionInfo
name|rev
init|=
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|get
argument_list|(
name|revision
argument_list|)
decl_stmt|;
name|JsArray
argument_list|<
name|CommitInfo
argument_list|>
name|parents
init|=
name|rev
operator|.
name|commit
argument_list|()
operator|.
name|parents
argument_list|()
decl_stmt|;
if|if
condition|(
name|parents
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|diffBase
operator|.
name|addItem
argument_list|(
name|Util
operator|.
name|C
operator|.
name|autoMerge
argument_list|()
argument_list|,
name|DiffObject
operator|.
name|AUTO_MERGE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parents
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|parentNum
init|=
name|i
operator|+
literal|1
decl_stmt|;
name|diffBase
operator|.
name|addItem
argument_list|(
name|Util
operator|.
name|M
operator|.
name|diffBaseParent
argument_list|(
name|parentNum
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|-
name|parentNum
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|base
operator|.
name|isParent
argument_list|()
condition|)
block|{
name|selectedIdx
operator|=
name|list
operator|.
name|length
argument_list|()
operator|+
name|base
operator|.
name|getParentNum
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|diffBase
operator|.
name|addItem
argument_list|(
name|Util
operator|.
name|C
operator|.
name|baseDiffItem
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|diffBase
operator|.
name|setSelectedIndex
argument_list|(
name|selectedIdx
argument_list|)
expr_stmt|;
block|}
DECL|method|showUpdates (ChangeInfo newInfo)
name|void
name|showUpdates
parameter_list|(
name|ChangeInfo
name|newInfo
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isAttached
argument_list|()
operator|||
name|newInfo
operator|.
name|updated
argument_list|()
operator|.
name|equals
argument_list|(
name|lastDisplayedUpdate
argument_list|)
condition|)
block|{
return|return;
block|}
name|JsArray
argument_list|<
name|MessageInfo
argument_list|>
name|om
init|=
name|changeInfo
operator|.
name|messages
argument_list|()
decl_stmt|;
name|JsArray
argument_list|<
name|MessageInfo
argument_list|>
name|nm
init|=
name|newInfo
operator|.
name|messages
argument_list|()
decl_stmt|;
if|if
condition|(
name|om
operator|==
literal|null
condition|)
block|{
name|om
operator|=
name|JsArray
operator|.
name|createArray
argument_list|()
operator|.
name|cast
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nm
operator|==
literal|null
condition|)
block|{
name|nm
operator|=
name|JsArray
operator|.
name|createArray
argument_list|()
operator|.
name|cast
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|om
operator|.
name|length
argument_list|()
operator|==
name|nm
operator|.
name|length
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|updateAvailable
operator|==
literal|null
condition|)
block|{
name|updateAvailable
operator|=
operator|new
name|UpdateAvailableBar
argument_list|()
block|{
annotation|@
name|Override
name|void
name|onShow
parameter_list|()
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|PageLinks
operator|.
name|toChange
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onIgnore
parameter_list|(
name|Timestamp
name|newTime
parameter_list|)
block|{
name|lastDisplayedUpdate
operator|=
name|newTime
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
name|updateAvailable
operator|.
name|set
argument_list|(
name|Natives
operator|.
name|asList
argument_list|(
name|nm
argument_list|)
operator|.
name|subList
argument_list|(
name|om
operator|.
name|length
argument_list|()
argument_list|,
name|nm
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|newInfo
operator|.
name|updated
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|updateAvailable
operator|.
name|isAttached
argument_list|()
condition|)
block|{
name|add
argument_list|(
name|updateAvailable
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|startPoller ()
specifier|private
name|void
name|startPoller
parameter_list|()
block|{
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
operator|&&
literal|0
operator|<
name|Gerrit
operator|.
name|info
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|updateDelay
argument_list|()
condition|)
block|{
name|updateCheck
operator|=
operator|new
name|UpdateCheckTimer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|updateCheck
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|UserActivityMonitor
operator|.
name|addValueChangeHandler
argument_list|(
name|updateCheck
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|normalize (String r)
specifier|private
specifier|static
name|String
name|normalize
parameter_list|(
name|String
name|r
parameter_list|)
block|{
return|return
name|r
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
condition|?
name|r
else|:
literal|null
return|;
block|}
comment|/**    * @param parentToken    * @return 1-based parentNum if parentToken is a String which can be parsed as a negative integer    *     i.e. "-1", "-2", etc. If parentToken cannot be parsed as a negative integer, return zero.    */
DECL|method|toParentNum (String parentToken)
specifier|private
specifier|static
name|int
name|toParentNum
parameter_list|(
name|String
name|parentToken
parameter_list|)
block|{
try|try
block|{
name|int
name|n
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|parentToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
return|return
operator|-
name|n
return|;
block|}
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

