begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.ui
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|RepeatingCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseMoveEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseMoveHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|HasValueChangeHandlers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|EventBus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|GwtEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|SimpleEventBus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|History
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|DocWidget
import|;
end_import

begin_comment
comment|/** Checks for user keyboard and mouse activity. */
end_comment

begin_class
DECL|class|UserActivityMonitor
specifier|public
class|class
name|UserActivityMonitor
block|{
DECL|field|TIMEOUT
specifier|private
specifier|static
specifier|final
name|long
name|TIMEOUT
init|=
literal|10
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
DECL|field|impl
specifier|private
specifier|static
specifier|final
name|MonitorImpl
name|impl
decl_stmt|;
comment|/**    * @return true if there has been keyboard and/or mouse activity in recent enough history to    *     believe a user is still controlling this session.    */
DECL|method|isActive ()
specifier|public
specifier|static
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|impl
operator|.
name|active
operator|||
name|impl
operator|.
name|recent
return|;
block|}
DECL|method|addValueChangeHandler (ValueChangeHandler<Boolean> handler)
specifier|public
specifier|static
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|impl
operator|.
name|addValueChangeHandler
argument_list|(
name|handler
argument_list|)
return|;
block|}
static|static
block|{
name|impl
operator|=
operator|new
name|MonitorImpl
argument_list|()
expr_stmt|;
name|DocWidget
operator|.
name|get
argument_list|()
operator|.
name|addKeyPressHandler
argument_list|(
name|impl
argument_list|)
expr_stmt|;
name|DocWidget
operator|.
name|get
argument_list|()
operator|.
name|addMouseMoveHandler
argument_list|(
name|impl
argument_list|)
expr_stmt|;
name|History
operator|.
name|addValueChangeHandler
argument_list|(
name|impl
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleFixedDelay
argument_list|(
name|impl
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
DECL|method|UserActivityMonitor ()
specifier|private
name|UserActivityMonitor
parameter_list|()
block|{}
DECL|class|MonitorImpl
specifier|private
specifier|static
class|class
name|MonitorImpl
implements|implements
name|RepeatingCommand
implements|,
name|KeyPressHandler
implements|,
name|MouseMoveHandler
implements|,
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
implements|,
name|HasValueChangeHandlers
argument_list|<
name|Boolean
argument_list|>
block|{
DECL|field|bus
specifier|private
specifier|final
name|EventBus
name|bus
init|=
operator|new
name|SimpleEventBus
argument_list|()
decl_stmt|;
DECL|field|recent
specifier|private
name|boolean
name|recent
init|=
literal|true
decl_stmt|;
DECL|field|active
specifier|private
name|boolean
name|active
init|=
literal|true
decl_stmt|;
DECL|field|last
specifier|private
name|long
name|last
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|onKeyPress (KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|recent
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMouseMove (MouseMoveEvent event)
specifier|public
name|void
name|onMouseMove
parameter_list|(
name|MouseMoveEvent
name|event
parameter_list|)
block|{
name|recent
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onValueChange (ValueChangeEvent<String> event)
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|recent
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|boolean
name|execute
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|recent
condition|)
block|{
if|if
condition|(
operator|!
name|active
condition|)
block|{
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|active
argument_list|)
expr_stmt|;
block|}
name|recent
operator|=
literal|false
expr_stmt|;
name|active
operator|=
literal|true
expr_stmt|;
name|last
operator|=
name|now
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|active
operator|&&
operator|(
name|now
operator|-
name|last
operator|)
operator|>
name|TIMEOUT
condition|)
block|{
name|active
operator|=
literal|false
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|addValueChangeHandler (ValueChangeHandler<Boolean> handler)
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|bus
operator|.
name|addHandler
argument_list|(
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|,
name|handler
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fireEvent (GwtEvent<?> event)
specifier|public
name|void
name|fireEvent
parameter_list|(
name|GwtEvent
argument_list|<
name|?
argument_list|>
name|event
parameter_list|)
block|{
name|bus
operator|.
name|fireEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

