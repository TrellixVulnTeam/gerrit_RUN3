begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.diff
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommentApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|DiffInfo
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|DiffInfo
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|LineMapper
operator|.
name|LineOnOtherInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|PaddingManager
operator|.
name|LineWidgetElementPair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|SkippedLine
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|projects
operator|.
name|ConfigInfoCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|CallbackGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NativeMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|ScreenLoadCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|CommentLinkProcessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Screen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountDiffPreference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JavaScriptObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArrayString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ResizeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ResizeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
operator|.
name|LineClassWhere
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
operator|.
name|LineHandle
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|KeyMap
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|LineCharacter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|LineWidget
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|ModeInjector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|TextMarker
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|CodeMirrorDemo
specifier|public
class|class
name|CodeMirrorDemo
extends|extends
name|Screen
block|{
DECL|field|HEADER_FOOTER
specifier|private
specifier|static
specifier|final
name|int
name|HEADER_FOOTER
init|=
literal|60
operator|+
literal|15
operator|*
literal|2
operator|+
literal|38
decl_stmt|;
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|JsArrayString
name|EMPTY
init|=
name|JavaScriptObject
operator|.
name|createArray
argument_list|()
operator|.
name|cast
argument_list|()
decl_stmt|;
DECL|field|base
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|base
decl_stmt|;
DECL|field|revision
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|revision
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|diffTable
specifier|private
name|DiffTable
name|diffTable
decl_stmt|;
DECL|field|cmA
specifier|private
name|CodeMirror
name|cmA
decl_stmt|;
DECL|field|cmB
specifier|private
name|CodeMirror
name|cmB
decl_stmt|;
DECL|field|resizeHandler
specifier|private
name|HandlerRegistration
name|resizeHandler
decl_stmt|;
DECL|field|published
specifier|private
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|published
decl_stmt|;
DECL|field|drafts
specifier|private
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|drafts
decl_stmt|;
DECL|field|initialBoxes
specifier|private
name|List
argument_list|<
name|CommentBox
argument_list|>
name|initialBoxes
decl_stmt|;
DECL|field|diff
specifier|private
name|DiffInfo
name|diff
decl_stmt|;
DECL|field|mapper
specifier|private
name|LineMapper
name|mapper
decl_stmt|;
DECL|field|commentLinkProcessor
specifier|private
name|CommentLinkProcessor
name|commentLinkProcessor
decl_stmt|;
DECL|field|publishedMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PublishedBox
argument_list|>
name|publishedMap
decl_stmt|;
DECL|field|lineActiveBoxMap
specifier|private
name|Map
argument_list|<
name|LineHandle
argument_list|,
name|CommentBox
argument_list|>
name|lineActiveBoxMap
decl_stmt|;
DECL|field|lineLastPublishedBoxMap
specifier|private
name|Map
argument_list|<
name|LineHandle
argument_list|,
name|PublishedBox
argument_list|>
name|lineLastPublishedBoxMap
decl_stmt|;
DECL|field|linePaddingManagerMap
specifier|private
name|Map
argument_list|<
name|LineHandle
argument_list|,
name|PaddingManager
argument_list|>
name|linePaddingManagerMap
decl_stmt|;
DECL|field|skips
specifier|private
name|List
argument_list|<
name|SkippedLine
argument_list|>
name|skips
decl_stmt|;
DECL|field|hiddenSkipMap
specifier|private
name|Map
argument_list|<
name|LineHandle
argument_list|,
name|Integer
argument_list|>
name|hiddenSkipMap
decl_stmt|;
DECL|field|context
specifier|private
name|int
name|context
decl_stmt|;
DECL|method|CodeMirrorDemo ( PatchSet.Id base, PatchSet.Id revision, String path)
specifier|public
name|CodeMirrorDemo
parameter_list|(
name|PatchSet
operator|.
name|Id
name|base
parameter_list|,
name|PatchSet
operator|.
name|Id
name|revision
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onInitUI ()
specifier|protected
name|void
name|onInitUI
parameter_list|()
block|{
name|super
operator|.
name|onInitUI
argument_list|()
expr_stmt|;
name|setHeaderVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|diffTable
operator|=
operator|new
name|DiffTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
block|{
name|super
operator|.
name|onLoad
argument_list|()
expr_stmt|;
name|CallbackGroup
name|cmGroup
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
name|CodeMirror
operator|.
name|initLibrary
argument_list|(
name|cmGroup
operator|.
name|add
argument_list|(
name|CallbackGroup
operator|.
expr|<
name|Void
operator|>
name|emptyCallback
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|CallbackGroup
name|group
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
specifier|final
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
name|modeInjectorCb
init|=
name|group
operator|.
name|add
argument_list|(
name|CallbackGroup
operator|.
expr|<
name|Void
operator|>
name|emptyCallback
argument_list|()
argument_list|)
decl_stmt|;
name|DiffApi
operator|.
name|diff
argument_list|(
name|revision
argument_list|,
name|path
argument_list|)
operator|.
name|base
argument_list|(
name|base
argument_list|)
operator|.
name|wholeFile
argument_list|()
operator|.
name|intraline
argument_list|()
operator|.
name|ignoreWhitespace
argument_list|(
name|DiffApi
operator|.
name|IgnoreWhitespace
operator|.
name|NONE
argument_list|)
operator|.
name|get
argument_list|(
name|cmGroup
operator|.
name|addFinal
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|DiffInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|DiffInfo
name|diffInfo
parameter_list|)
block|{
name|diff
operator|=
name|diffInfo
expr_stmt|;
operator|new
name|ModeInjector
argument_list|()
operator|.
name|add
argument_list|(
name|getContentType
argument_list|(
name|diff
operator|.
name|meta_a
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|getContentType
argument_list|(
name|diff
operator|.
name|meta_b
argument_list|()
argument_list|)
argument_list|)
operator|.
name|inject
argument_list|(
name|modeInjectorCb
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|CommentApi
operator|.
name|comments
argument_list|(
name|revision
argument_list|,
name|group
operator|.
name|add
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|m
parameter_list|)
block|{
name|published
operator|=
name|m
operator|.
name|get
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|CommentApi
operator|.
name|drafts
argument_list|(
name|revision
argument_list|,
name|group
operator|.
name|add
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|m
parameter_list|)
block|{
name|drafts
operator|=
name|m
operator|.
name|get
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|drafts
operator|=
name|JsArray
operator|.
name|createArray
argument_list|()
operator|.
name|cast
argument_list|()
expr_stmt|;
block|}
name|ChangeApi
operator|.
name|detail
argument_list|(
name|revision
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ChangeInfo
name|result
parameter_list|)
block|{
name|Project
operator|.
name|NameKey
name|project
init|=
name|result
operator|.
name|project_name_key
argument_list|()
decl_stmt|;
name|ConfigInfoCache
operator|.
name|get
argument_list|(
name|project
argument_list|,
name|group
operator|.
name|addFinal
argument_list|(
operator|new
name|ScreenLoadCallback
argument_list|<
name|ConfigInfoCache
operator|.
name|Entry
argument_list|>
argument_list|(
name|CodeMirrorDemo
operator|.
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|preDisplay
parameter_list|(
name|ConfigInfoCache
operator|.
name|Entry
name|result
parameter_list|)
block|{
name|commentLinkProcessor
operator|=
name|result
operator|.
name|getCommentLinkProcessor
argument_list|()
expr_stmt|;
name|setTheme
argument_list|(
name|result
operator|.
name|getTheme
argument_list|()
argument_list|)
expr_stmt|;
name|DiffInfo
name|diffInfo
init|=
name|diff
decl_stmt|;
name|diff
operator|=
literal|null
expr_stmt|;
name|display
argument_list|(
name|diffInfo
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onShowView ()
specifier|public
name|void
name|onShowView
parameter_list|()
block|{
name|super
operator|.
name|onShowView
argument_list|()
expr_stmt|;
if|if
condition|(
name|cmA
operator|!=
literal|null
condition|)
block|{
name|cmA
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cmB
operator|!=
literal|null
condition|)
block|{
name|cmB
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
name|Window
operator|.
name|enableScrolling
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|CommentBox
name|box
range|:
name|initialBoxes
control|)
block|{
name|box
operator|.
name|resizePaddingWidget
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onUnload ()
specifier|protected
name|void
name|onUnload
parameter_list|()
block|{
name|super
operator|.
name|onUnload
argument_list|()
expr_stmt|;
if|if
condition|(
name|resizeHandler
operator|!=
literal|null
condition|)
block|{
name|resizeHandler
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|resizeHandler
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cmA
operator|!=
literal|null
condition|)
block|{
name|cmA
operator|.
name|getWrapperElement
argument_list|()
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
name|cmA
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cmB
operator|!=
literal|null
condition|)
block|{
name|cmB
operator|.
name|getWrapperElement
argument_list|()
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
name|cmB
operator|=
literal|null
expr_stmt|;
block|}
name|Window
operator|.
name|enableScrolling
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|display (DiffInfo diffInfo)
specifier|private
name|void
name|display
parameter_list|(
name|DiffInfo
name|diffInfo
parameter_list|)
block|{
name|cmA
operator|=
name|displaySide
argument_list|(
name|diffInfo
operator|.
name|meta_a
argument_list|()
argument_list|,
name|diffInfo
operator|.
name|text_a
argument_list|()
argument_list|,
name|diffTable
operator|.
name|getCmA
argument_list|()
argument_list|)
expr_stmt|;
name|cmB
operator|=
name|displaySide
argument_list|(
name|diffInfo
operator|.
name|meta_b
argument_list|()
argument_list|,
name|diffInfo
operator|.
name|text_b
argument_list|()
argument_list|,
name|diffTable
operator|.
name|getCmB
argument_list|()
argument_list|)
expr_stmt|;
name|skips
operator|=
operator|new
name|ArrayList
argument_list|<
name|SkippedLine
argument_list|>
argument_list|()
expr_stmt|;
name|render
argument_list|(
name|diffInfo
argument_list|)
expr_stmt|;
name|initialBoxes
operator|=
operator|new
name|ArrayList
argument_list|<
name|CommentBox
argument_list|>
argument_list|()
expr_stmt|;
name|lineActiveBoxMap
operator|=
operator|new
name|HashMap
argument_list|<
name|LineHandle
argument_list|,
name|CommentBox
argument_list|>
argument_list|()
expr_stmt|;
name|lineLastPublishedBoxMap
operator|=
operator|new
name|HashMap
argument_list|<
name|LineHandle
argument_list|,
name|PublishedBox
argument_list|>
argument_list|()
expr_stmt|;
name|linePaddingManagerMap
operator|=
operator|new
name|HashMap
argument_list|<
name|LineHandle
argument_list|,
name|PaddingManager
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|published
operator|!=
literal|null
condition|)
block|{
name|publishedMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PublishedBox
argument_list|>
argument_list|(
name|published
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|renderPublished
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|drafts
operator|!=
literal|null
condition|)
block|{
name|renderDrafts
argument_list|()
expr_stmt|;
block|}
name|renderSkips
argument_list|()
expr_stmt|;
name|published
operator|=
literal|null
expr_stmt|;
name|drafts
operator|=
literal|null
expr_stmt|;
name|skips
operator|=
literal|null
expr_stmt|;
name|cmA
operator|.
name|on
argument_list|(
literal|"cursorActivity"
argument_list|,
name|updateActiveLine
argument_list|(
name|cmA
argument_list|)
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|on
argument_list|(
literal|"cursorActivity"
argument_list|,
name|updateActiveLine
argument_list|(
name|cmB
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|cmA
operator|.
name|addKeyMap
argument_list|(
name|KeyMap
operator|.
name|create
argument_list|()
operator|.
name|on
argument_list|(
literal|"'c'"
argument_list|,
name|insertNewDraft
argument_list|(
name|cmA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|addKeyMap
argument_list|(
name|KeyMap
operator|.
name|create
argument_list|()
operator|.
name|on
argument_list|(
literal|"'c'"
argument_list|,
name|insertNewDraft
argument_list|(
name|cmB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Probably need horizontal resize
name|resizeHandler
operator|=
name|Window
operator|.
name|addResizeHandler
argument_list|(
operator|new
name|ResizeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResize
parameter_list|(
name|ResizeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|cmA
operator|!=
literal|null
condition|)
block|{
name|cmA
operator|.
name|setHeight
argument_list|(
name|event
operator|.
name|getHeight
argument_list|()
operator|-
name|HEADER_FOOTER
argument_list|)
expr_stmt|;
name|cmA
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cmB
operator|!=
literal|null
condition|)
block|{
name|cmB
operator|.
name|setHeight
argument_list|(
name|event
operator|.
name|getHeight
argument_list|()
operator|-
name|HEADER_FOOTER
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|cmA
operator|.
name|on
argument_list|(
literal|"scroll"
argument_list|,
name|doScroll
argument_list|(
name|cmB
argument_list|)
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|on
argument_list|(
literal|"scroll"
argument_list|,
name|doScroll
argument_list|(
name|cmA
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|displaySide (DiffInfo.FileMeta meta, String contents, Element ele)
specifier|private
name|CodeMirror
name|displaySide
parameter_list|(
name|DiffInfo
operator|.
name|FileMeta
name|meta
parameter_list|,
name|String
name|contents
parameter_list|,
name|Element
name|ele
parameter_list|)
block|{
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
name|contents
operator|=
literal|""
expr_stmt|;
block|}
name|Configuration
name|cfg
init|=
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|set
argument_list|(
literal|"readOnly"
argument_list|,
literal|true
argument_list|)
operator|.
name|set
argument_list|(
literal|"lineNumbers"
argument_list|,
literal|true
argument_list|)
operator|.
name|set
argument_list|(
literal|"tabSize"
argument_list|,
literal|2
argument_list|)
operator|.
name|set
argument_list|(
literal|"mode"
argument_list|,
name|getContentType
argument_list|(
name|meta
argument_list|)
argument_list|)
operator|.
name|set
argument_list|(
literal|"styleSelectedText"
argument_list|,
literal|true
argument_list|)
operator|.
name|set
argument_list|(
literal|"value"
argument_list|,
name|contents
argument_list|)
decl_stmt|;
specifier|final
name|CodeMirror
name|cm
init|=
name|CodeMirror
operator|.
name|create
argument_list|(
name|ele
argument_list|,
name|cfg
argument_list|)
decl_stmt|;
name|cm
operator|.
name|setHeight
argument_list|(
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|-
name|HEADER_FOOTER
argument_list|)
expr_stmt|;
return|return
name|cm
return|;
block|}
DECL|method|render (DiffInfo diff)
specifier|private
name|void
name|render
parameter_list|(
name|DiffInfo
name|diff
parameter_list|)
block|{
name|AccountDiffPreference
name|pref
init|=
name|Gerrit
operator|.
name|getAccountDiffPreference
argument_list|()
decl_stmt|;
name|context
operator|=
name|pref
operator|!=
literal|null
condition|?
name|pref
operator|.
name|getContext
argument_list|()
else|:
name|AccountDiffPreference
operator|.
name|DEFAULT_CONTEXT
expr_stmt|;
name|JsArray
argument_list|<
name|Region
argument_list|>
name|regions
init|=
name|diff
operator|.
name|content
argument_list|()
decl_stmt|;
name|mapper
operator|=
operator|new
name|LineMapper
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Region
name|current
init|=
name|regions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|origLineA
init|=
name|mapper
operator|.
name|getLineA
argument_list|()
decl_stmt|;
name|int
name|origLineB
init|=
name|mapper
operator|.
name|getLineB
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|ab
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Common
name|int
name|length
init|=
name|current
operator|.
name|ab
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendCommon
argument_list|(
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|&&
name|length
operator|>
name|context
condition|)
block|{
name|skips
operator|.
name|add
argument_list|(
operator|new
name|SkippedLine
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|length
operator|-
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
name|regions
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|&&
name|length
operator|>
name|context
condition|)
block|{
name|skips
operator|.
name|add
argument_list|(
operator|new
name|SkippedLine
argument_list|(
name|origLineA
operator|+
name|context
argument_list|,
name|origLineB
operator|+
name|context
argument_list|,
name|length
operator|-
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|length
operator|>
literal|2
operator|*
name|context
condition|)
block|{
name|skips
operator|.
name|add
argument_list|(
operator|new
name|SkippedLine
argument_list|(
name|origLineA
operator|+
name|context
argument_list|,
name|origLineB
operator|+
name|context
argument_list|,
name|length
operator|-
literal|2
operator|*
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Insert, Delete or Edit
name|JsArrayString
name|currentA
init|=
name|current
operator|.
name|a
argument_list|()
operator|==
literal|null
condition|?
name|EMPTY
else|:
name|current
operator|.
name|a
argument_list|()
decl_stmt|;
name|JsArrayString
name|currentB
init|=
name|current
operator|.
name|b
argument_list|()
operator|==
literal|null
condition|?
name|EMPTY
else|:
name|current
operator|.
name|b
argument_list|()
decl_stmt|;
name|int
name|aLength
init|=
name|currentA
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|bLength
init|=
name|currentB
operator|.
name|length
argument_list|()
decl_stmt|;
name|String
name|color
init|=
name|currentA
operator|==
name|EMPTY
operator|||
name|currentB
operator|==
name|EMPTY
condition|?
name|diffTable
operator|.
name|style
operator|.
name|diff
argument_list|()
else|:
name|diffTable
operator|.
name|style
operator|.
name|intralineBg
argument_list|()
decl_stmt|;
name|colorLines
argument_list|(
name|cmA
argument_list|,
name|color
argument_list|,
name|origLineA
argument_list|,
name|aLength
argument_list|)
expr_stmt|;
name|colorLines
argument_list|(
name|cmB
argument_list|,
name|color
argument_list|,
name|origLineB
argument_list|,
name|bLength
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|appendCommon
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|aLength
argument_list|,
name|bLength
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|aLength
operator|<
name|bLength
condition|)
block|{
comment|// Edit with insertion
name|int
name|insertCnt
init|=
name|bLength
operator|-
name|aLength
decl_stmt|;
name|insertEmptyLines
argument_list|(
name|cmA
argument_list|,
name|mapper
operator|.
name|getLineA
argument_list|()
argument_list|,
name|insertCnt
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|appendInsert
argument_list|(
name|insertCnt
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|aLength
operator|>
name|bLength
condition|)
block|{
comment|// Edit with deletion
name|int
name|deleteCnt
init|=
name|aLength
operator|-
name|bLength
decl_stmt|;
name|insertEmptyLines
argument_list|(
name|cmB
argument_list|,
name|mapper
operator|.
name|getLineB
argument_list|()
argument_list|,
name|deleteCnt
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|appendDelete
argument_list|(
name|deleteCnt
argument_list|)
expr_stmt|;
block|}
name|markEdit
argument_list|(
name|cmA
argument_list|,
name|currentA
argument_list|,
name|current
operator|.
name|edit_a
argument_list|()
argument_list|,
name|origLineA
argument_list|)
expr_stmt|;
name|markEdit
argument_list|(
name|cmB
argument_list|,
name|currentB
argument_list|,
name|current
operator|.
name|edit_b
argument_list|()
argument_list|,
name|origLineB
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addNewDraft (CodeMirror cm, int line)
specifier|private
name|DraftBox
name|addNewDraft
parameter_list|(
name|CodeMirror
name|cm
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|Side
name|side
init|=
name|cm
operator|==
name|cmA
condition|?
name|Side
operator|.
name|PARENT
else|:
name|Side
operator|.
name|REVISION
decl_stmt|;
name|CommentInfo
name|info
init|=
name|CommentInfo
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|side
argument_list|,
name|line
operator|+
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|addDraftBox
argument_list|(
name|info
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|addReply (CommentInfo replyTo, String initMessage, boolean doSave)
name|DraftBox
name|addReply
parameter_list|(
name|CommentInfo
name|replyTo
parameter_list|,
name|String
name|initMessage
parameter_list|,
name|boolean
name|doSave
parameter_list|)
block|{
name|Side
name|side
init|=
name|replyTo
operator|.
name|side
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|replyTo
operator|.
name|line
argument_list|()
decl_stmt|;
name|CommentInfo
name|info
init|=
name|CommentInfo
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|side
argument_list|,
name|line
argument_list|,
name|replyTo
operator|.
name|id
argument_list|()
argument_list|,
name|initMessage
argument_list|)
decl_stmt|;
return|return
name|addDraftBox
argument_list|(
name|info
argument_list|,
name|doSave
argument_list|)
return|;
block|}
DECL|method|addDraftBox (CommentInfo info, boolean doSave)
specifier|private
name|DraftBox
name|addDraftBox
parameter_list|(
name|CommentInfo
name|info
parameter_list|,
name|boolean
name|doSave
parameter_list|)
block|{
name|DraftBox
name|box
init|=
operator|new
name|DraftBox
argument_list|(
name|this
argument_list|,
name|revision
argument_list|,
name|info
argument_list|,
name|commentLinkProcessor
argument_list|,
literal|true
argument_list|,
name|doSave
argument_list|)
decl_stmt|;
name|addCommentBox
argument_list|(
name|info
argument_list|,
name|box
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|doSave
condition|)
block|{
name|box
operator|.
name|setEdit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|LineHandle
name|handle
init|=
name|getCmFromSide
argument_list|(
name|info
operator|.
name|side
argument_list|()
argument_list|)
operator|.
name|getLineHandle
argument_list|(
name|info
operator|.
name|line
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|lineActiveBoxMap
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|box
argument_list|)
expr_stmt|;
return|return
name|box
return|;
block|}
DECL|method|addCommentBox (CommentInfo info, final CommentBox box)
name|CommentBox
name|addCommentBox
parameter_list|(
name|CommentInfo
name|info
parameter_list|,
specifier|final
name|CommentBox
name|box
parameter_list|)
block|{
name|diffTable
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|Side
name|mySide
init|=
name|info
operator|.
name|side
argument_list|()
decl_stmt|;
name|CodeMirror
name|cm
init|=
name|mySide
operator|==
name|Side
operator|.
name|PARENT
condition|?
name|cmA
else|:
name|cmB
decl_stmt|;
name|CodeMirror
name|other
init|=
name|otherCM
argument_list|(
name|cm
argument_list|)
decl_stmt|;
name|int
name|line
init|=
name|info
operator|.
name|line
argument_list|()
operator|-
literal|1
decl_stmt|;
comment|// CommentInfo is 1-based, but CM is 0-based
name|LineHandle
name|handle
init|=
name|cm
operator|.
name|getLineHandle
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|PaddingManager
name|manager
decl_stmt|;
if|if
condition|(
name|linePaddingManagerMap
operator|.
name|containsKey
argument_list|(
name|handle
argument_list|)
condition|)
block|{
name|manager
operator|=
name|linePaddingManagerMap
operator|.
name|get
argument_list|(
name|handle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Estimated height at 21px, fixed by deferring after display
name|manager
operator|=
operator|new
name|PaddingManager
argument_list|(
name|addPaddingWidget
argument_list|(
name|cm
argument_list|,
name|diffTable
operator|.
name|style
operator|.
name|padding
argument_list|()
argument_list|,
name|line
argument_list|,
literal|21
argument_list|,
name|Unit
operator|.
name|PX
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|linePaddingManagerMap
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|manager
argument_list|)
expr_stmt|;
block|}
name|int
name|lineToPad
init|=
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|mySide
argument_list|,
name|line
argument_list|)
operator|.
name|getLine
argument_list|()
decl_stmt|;
name|LineHandle
name|otherHandle
init|=
name|other
operator|.
name|getLineHandle
argument_list|(
name|lineToPad
argument_list|)
decl_stmt|;
if|if
condition|(
name|linePaddingManagerMap
operator|.
name|containsKey
argument_list|(
name|otherHandle
argument_list|)
condition|)
block|{
name|PaddingManager
operator|.
name|link
argument_list|(
name|manager
argument_list|,
name|linePaddingManagerMap
operator|.
name|get
argument_list|(
name|otherHandle
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PaddingManager
name|otherManager
init|=
operator|new
name|PaddingManager
argument_list|(
name|addPaddingWidget
argument_list|(
name|other
argument_list|,
name|diffTable
operator|.
name|style
operator|.
name|padding
argument_list|()
argument_list|,
name|lineToPad
argument_list|,
literal|21
argument_list|,
name|Unit
operator|.
name|PX
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|linePaddingManagerMap
operator|.
name|put
argument_list|(
name|otherHandle
argument_list|,
name|otherManager
argument_list|)
expr_stmt|;
name|PaddingManager
operator|.
name|link
argument_list|(
name|manager
argument_list|,
name|otherManager
argument_list|)
expr_stmt|;
block|}
name|int
name|index
init|=
name|manager
operator|.
name|getCurrentCount
argument_list|()
decl_stmt|;
name|manager
operator|.
name|insert
argument_list|(
name|box
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|set
argument_list|(
literal|"coverGutter"
argument_list|,
literal|true
argument_list|)
operator|.
name|set
argument_list|(
literal|"insertAt"
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|LineWidget
name|boxWidget
init|=
name|cm
operator|.
name|addLineWidget
argument_list|(
name|line
argument_list|,
name|box
operator|.
name|getElement
argument_list|()
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|box
operator|.
name|setPaddingManager
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|box
operator|.
name|setSelfWidget
argument_list|(
name|boxWidget
argument_list|)
expr_stmt|;
return|return
name|box
return|;
block|}
DECL|method|removeDraft (Side side, int line)
name|void
name|removeDraft
parameter_list|(
name|Side
name|side
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|LineHandle
name|handle
init|=
name|getCmFromSide
argument_list|(
name|side
argument_list|)
operator|.
name|getLineHandle
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|lineActiveBoxMap
operator|.
name|remove
argument_list|(
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|lineLastPublishedBoxMap
operator|.
name|containsKey
argument_list|(
name|handle
argument_list|)
condition|)
block|{
name|lineActiveBoxMap
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|lineLastPublishedBoxMap
operator|.
name|get
argument_list|(
name|handle
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sortComment (JsArray<CommentInfo> unsorted)
specifier|private
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|sortComment
parameter_list|(
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|unsorted
parameter_list|)
block|{
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|sorted
init|=
operator|new
name|ArrayList
argument_list|<
name|CommentInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|unsorted
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sorted
operator|.
name|add
argument_list|(
name|unsorted
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|sorted
argument_list|,
operator|new
name|Comparator
argument_list|<
name|CommentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|CommentInfo
name|o1
parameter_list|,
name|CommentInfo
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|updated
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|updated
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|sorted
return|;
block|}
DECL|method|renderPublished ()
specifier|private
name|void
name|renderPublished
parameter_list|()
block|{
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|sorted
init|=
name|sortComment
argument_list|(
name|published
argument_list|)
decl_stmt|;
for|for
control|(
name|CommentInfo
name|info
range|:
name|sorted
control|)
block|{
specifier|final
name|PublishedBox
name|box
init|=
operator|new
name|PublishedBox
argument_list|(
name|this
argument_list|,
name|revision
argument_list|,
name|info
argument_list|,
name|commentLinkProcessor
argument_list|)
decl_stmt|;
name|box
operator|.
name|setOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|initialBoxes
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|publishedMap
operator|.
name|put
argument_list|(
name|info
operator|.
name|id
argument_list|()
argument_list|,
name|box
argument_list|)
expr_stmt|;
name|int
name|line
init|=
name|info
operator|.
name|line
argument_list|()
operator|-
literal|1
decl_stmt|;
name|LineHandle
name|handle
init|=
name|getCmFromSide
argument_list|(
name|info
operator|.
name|side
argument_list|()
argument_list|)
operator|.
name|getLineHandle
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|lineLastPublishedBoxMap
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|box
argument_list|)
expr_stmt|;
name|lineActiveBoxMap
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|box
argument_list|)
expr_stmt|;
name|addCommentBox
argument_list|(
name|info
argument_list|,
name|box
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderDrafts ()
specifier|private
name|void
name|renderDrafts
parameter_list|()
block|{
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|sorted
init|=
name|sortComment
argument_list|(
name|drafts
argument_list|)
decl_stmt|;
for|for
control|(
name|CommentInfo
name|info
range|:
name|sorted
control|)
block|{
specifier|final
name|DraftBox
name|box
init|=
operator|new
name|DraftBox
argument_list|(
name|this
argument_list|,
name|revision
argument_list|,
name|info
argument_list|,
name|commentLinkProcessor
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|box
operator|.
name|setOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|box
operator|.
name|setEdit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|initialBoxes
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
if|if
condition|(
name|published
operator|!=
literal|null
condition|)
block|{
name|PublishedBox
name|replyToBox
init|=
name|publishedMap
operator|.
name|get
argument_list|(
name|info
operator|.
name|in_reply_to
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|replyToBox
operator|!=
literal|null
condition|)
block|{
name|replyToBox
operator|.
name|registerReplyBox
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
block|}
name|lineActiveBoxMap
operator|.
name|put
argument_list|(
name|getCmFromSide
argument_list|(
name|info
operator|.
name|side
argument_list|()
argument_list|)
operator|.
name|getLineHandle
argument_list|(
name|info
operator|.
name|line
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|box
argument_list|)
expr_stmt|;
name|addCommentBox
argument_list|(
name|info
argument_list|,
name|box
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderSkips ()
specifier|private
name|void
name|renderSkips
parameter_list|()
block|{
name|hiddenSkipMap
operator|=
operator|new
name|HashMap
argument_list|<
name|LineHandle
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|CommentBox
name|box
range|:
name|initialBoxes
control|)
block|{
name|List
argument_list|<
name|SkippedLine
argument_list|>
name|temp
init|=
operator|new
name|ArrayList
argument_list|<
name|SkippedLine
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SkippedLine
name|skip
range|:
name|skips
control|)
block|{
name|CommentInfo
name|info
init|=
name|box
operator|.
name|getOriginal
argument_list|()
decl_stmt|;
name|int
name|startLine
init|=
name|info
operator|.
name|side
argument_list|()
operator|==
name|Side
operator|.
name|PARENT
condition|?
name|skip
operator|.
name|getStartA
argument_list|()
else|:
name|skip
operator|.
name|getStartB
argument_list|()
decl_stmt|;
name|int
name|boxLine
init|=
name|info
operator|.
name|line
argument_list|()
decl_stmt|;
name|int
name|deltaBefore
init|=
name|boxLine
operator|-
name|startLine
decl_stmt|;
name|int
name|deltaAfter
init|=
name|startLine
operator|+
name|skip
operator|.
name|getSize
argument_list|()
operator|-
name|boxLine
decl_stmt|;
if|if
condition|(
name|deltaBefore
operator|<
literal|0
operator|||
name|deltaAfter
operator|<
literal|0
condition|)
block|{
name|temp
operator|.
name|add
argument_list|(
name|skip
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deltaBefore
operator|>
name|context
operator|&&
name|deltaAfter
operator|>
name|context
condition|)
block|{
name|SkippedLine
name|before
init|=
operator|new
name|SkippedLine
argument_list|(
name|skip
operator|.
name|getStartA
argument_list|()
argument_list|,
name|skip
operator|.
name|getStartB
argument_list|()
argument_list|,
name|skip
operator|.
name|getSize
argument_list|()
operator|-
name|deltaAfter
operator|-
name|context
argument_list|)
decl_stmt|;
name|skip
operator|.
name|incrementStart
argument_list|(
name|deltaBefore
operator|+
name|context
argument_list|)
expr_stmt|;
name|temp
operator|.
name|add
argument_list|(
name|before
argument_list|)
expr_stmt|;
name|temp
operator|.
name|add
argument_list|(
name|skip
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deltaAfter
operator|>
name|context
condition|)
block|{
name|skip
operator|.
name|incrementStart
argument_list|(
name|deltaBefore
operator|+
name|context
argument_list|)
expr_stmt|;
name|temp
operator|.
name|add
argument_list|(
name|skip
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deltaBefore
operator|>
name|context
condition|)
block|{
name|skip
operator|.
name|reduceSize
argument_list|(
name|deltaAfter
operator|+
name|context
argument_list|)
expr_stmt|;
name|temp
operator|.
name|add
argument_list|(
name|skip
argument_list|)
expr_stmt|;
block|}
block|}
name|skips
operator|=
name|temp
expr_stmt|;
block|}
for|for
control|(
name|SkippedLine
name|skip
range|:
name|skips
control|)
block|{
name|SkipBar
name|barA
init|=
name|renderSkipHelper
argument_list|(
name|cmA
argument_list|,
name|skip
argument_list|)
decl_stmt|;
name|SkipBar
name|barB
init|=
name|renderSkipHelper
argument_list|(
name|cmB
argument_list|,
name|skip
argument_list|)
decl_stmt|;
name|SkipBar
operator|.
name|link
argument_list|(
name|barA
argument_list|,
name|barB
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderSkipHelper (CodeMirror cm, SkippedLine skip)
specifier|private
name|SkipBar
name|renderSkipHelper
parameter_list|(
name|CodeMirror
name|cm
parameter_list|,
name|SkippedLine
name|skip
parameter_list|)
block|{
name|int
name|size
init|=
name|skip
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|int
name|markStart
init|=
name|cm
operator|==
name|cmA
condition|?
name|skip
operator|.
name|getStartA
argument_list|()
operator|-
literal|1
else|:
name|skip
operator|.
name|getStartB
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|markEnd
init|=
name|markStart
operator|+
name|size
decl_stmt|;
name|hiddenSkipMap
operator|.
name|put
argument_list|(
name|cm
operator|.
name|getLineHandle
argument_list|(
name|markEnd
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|SkipBar
name|bar
init|=
operator|new
name|SkipBar
argument_list|(
name|cm
argument_list|,
name|hiddenSkipMap
argument_list|)
decl_stmt|;
name|diffTable
operator|.
name|add
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|TextMarker
name|marker
init|=
name|cm
operator|.
name|markText
argument_list|(
name|CodeMirror
operator|.
name|pos
argument_list|(
name|markStart
argument_list|)
argument_list|,
name|CodeMirror
operator|.
name|pos
argument_list|(
name|markEnd
argument_list|)
argument_list|,
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|set
argument_list|(
literal|"collapsed"
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * TODO: Due to CodeMirror limitation, there's no way to make the first      * line disappear completely. The current approach leaves an empty line      * with line number "1" still showing, and CodeMirror doesn't like manually      * setting the display of a line to "none". A workaround may be to use      * inline widget for the first line and regular line widgets for others.      */
name|boolean
name|isZero
init|=
name|markStart
operator|==
operator|-
literal|1
decl_stmt|;
name|Configuration
name|config
init|=
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|set
argument_list|(
literal|"coverGutter"
argument_list|,
literal|true
argument_list|)
operator|.
name|set
argument_list|(
literal|"above"
argument_list|,
name|isZero
argument_list|)
decl_stmt|;
name|LineWidget
name|widget
init|=
name|cm
operator|.
name|addLineWidget
argument_list|(
name|isZero
condition|?
name|markEnd
operator|+
literal|1
else|:
name|markStart
argument_list|,
name|bar
operator|.
name|getElement
argument_list|()
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|bar
operator|.
name|setWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|bar
operator|.
name|setMarker
argument_list|(
name|marker
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|bar
return|;
block|}
DECL|method|otherCM (CodeMirror me)
specifier|private
name|CodeMirror
name|otherCM
parameter_list|(
name|CodeMirror
name|me
parameter_list|)
block|{
return|return
name|me
operator|==
name|cmA
condition|?
name|cmB
else|:
name|cmA
return|;
block|}
DECL|method|getCmFromSide (Side side)
specifier|private
name|CodeMirror
name|getCmFromSide
parameter_list|(
name|Side
name|side
parameter_list|)
block|{
return|return
name|side
operator|==
name|Side
operator|.
name|PARENT
condition|?
name|cmA
else|:
name|cmB
return|;
block|}
DECL|method|markEdit (CodeMirror cm, JsArrayString lines, JsArray<Span> edits, int startLine)
specifier|private
name|void
name|markEdit
parameter_list|(
name|CodeMirror
name|cm
parameter_list|,
name|JsArrayString
name|lines
parameter_list|,
name|JsArray
argument_list|<
name|Span
argument_list|>
name|edits
parameter_list|,
name|int
name|startLine
parameter_list|)
block|{
if|if
condition|(
name|edits
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EditIterator
name|iter
init|=
operator|new
name|EditIterator
argument_list|(
name|lines
argument_list|,
name|startLine
argument_list|)
decl_stmt|;
name|Configuration
name|intralineBgOpt
init|=
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|set
argument_list|(
literal|"className"
argument_list|,
name|diffTable
operator|.
name|style
operator|.
name|intralineBg
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"readOnly"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Configuration
name|diffOpt
init|=
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|set
argument_list|(
literal|"className"
argument_list|,
name|diffTable
operator|.
name|style
operator|.
name|diff
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"readOnly"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LineCharacter
name|last
init|=
name|CodeMirror
operator|.
name|pos
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|edits
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Span
name|span
init|=
name|edits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|LineCharacter
name|from
init|=
name|iter
operator|.
name|advance
argument_list|(
name|span
operator|.
name|skip
argument_list|()
argument_list|)
decl_stmt|;
name|LineCharacter
name|to
init|=
name|iter
operator|.
name|advance
argument_list|(
name|span
operator|.
name|mark
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|fromLine
init|=
name|from
operator|.
name|getLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|.
name|getLine
argument_list|()
operator|==
name|fromLine
condition|)
block|{
name|cm
operator|.
name|markText
argument_list|(
name|last
argument_list|,
name|from
argument_list|,
name|intralineBgOpt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cm
operator|.
name|markText
argument_list|(
name|CodeMirror
operator|.
name|pos
argument_list|(
name|fromLine
argument_list|,
literal|0
argument_list|)
argument_list|,
name|from
argument_list|,
name|intralineBgOpt
argument_list|)
expr_stmt|;
block|}
name|cm
operator|.
name|markText
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|diffOpt
argument_list|)
expr_stmt|;
name|last
operator|=
name|to
expr_stmt|;
for|for
control|(
name|int
name|line
init|=
name|fromLine
init|;
name|line
operator|<
name|to
operator|.
name|getLine
argument_list|()
condition|;
name|line
operator|++
control|)
block|{
name|cm
operator|.
name|addLineClass
argument_list|(
name|line
argument_list|,
name|LineClassWhere
operator|.
name|BACKGROUND
argument_list|,
name|diffTable
operator|.
name|style
operator|.
name|diff
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|colorLines (CodeMirror cm, String color, int line, int cnt)
specifier|private
name|void
name|colorLines
parameter_list|(
name|CodeMirror
name|cm
parameter_list|,
name|String
name|color
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|cnt
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|cm
operator|.
name|addLineClass
argument_list|(
name|line
operator|+
name|i
argument_list|,
name|LineClassWhere
operator|.
name|WRAP
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|insertEmptyLines (CodeMirror cm, int nextLine, int cnt)
specifier|private
name|void
name|insertEmptyLines
parameter_list|(
name|CodeMirror
name|cm
parameter_list|,
name|int
name|nextLine
parameter_list|,
name|int
name|cnt
parameter_list|)
block|{
comment|// -1 to compensate for the line we went past when this method is called.
name|addPaddingWidget
argument_list|(
name|cm
argument_list|,
name|diffTable
operator|.
name|style
operator|.
name|padding
argument_list|()
argument_list|,
name|nextLine
operator|-
literal|1
argument_list|,
name|cnt
argument_list|,
name|Unit
operator|.
name|EM
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|addPaddingWidget (CodeMirror cm, String style, int line, int height, Unit unit, Integer index)
specifier|private
name|LineWidgetElementPair
name|addPaddingWidget
parameter_list|(
name|CodeMirror
name|cm
parameter_list|,
name|String
name|style
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|height
parameter_list|,
name|Unit
name|unit
parameter_list|,
name|Integer
name|index
parameter_list|)
block|{
name|Element
name|div
init|=
name|DOM
operator|.
name|createDiv
argument_list|()
decl_stmt|;
name|div
operator|.
name|setClassName
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|div
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
name|height
argument_list|,
name|unit
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|set
argument_list|(
literal|"coverGutter"
argument_list|,
literal|true
argument_list|)
operator|.
name|set
argument_list|(
literal|"above"
argument_list|,
name|line
operator|==
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|config
operator|=
name|config
operator|.
name|set
argument_list|(
literal|"insertAt"
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
name|LineWidget
name|widget
init|=
name|cm
operator|.
name|addLineWidget
argument_list|(
name|line
operator|==
operator|-
literal|1
condition|?
literal|0
else|:
name|line
argument_list|,
name|div
argument_list|,
name|config
argument_list|)
decl_stmt|;
return|return
operator|new
name|LineWidgetElementPair
argument_list|(
name|widget
argument_list|,
name|div
argument_list|)
return|;
block|}
DECL|method|doScroll (final CodeMirror cm)
specifier|private
name|Runnable
name|doScroll
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
specifier|final
name|CodeMirror
name|other
init|=
name|otherCM
argument_list|(
name|cm
argument_list|)
decl_stmt|;
return|return
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cm
operator|.
name|scrollToY
argument_list|(
name|other
operator|.
name|getScrollInfo
argument_list|()
operator|.
name|getTop
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|updateActiveLine (final CodeMirror cm)
specifier|private
name|Runnable
name|updateActiveLine
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
specifier|final
name|CodeMirror
name|other
init|=
name|otherCM
argument_list|(
name|cm
argument_list|)
decl_stmt|;
return|return
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|cm
operator|.
name|hasActiveLine
argument_list|()
condition|)
block|{
name|cm
operator|.
name|removeLineClass
argument_list|(
name|cm
operator|.
name|getActiveLine
argument_list|()
argument_list|,
name|LineClassWhere
operator|.
name|WRAP
argument_list|,
name|diffTable
operator|.
name|style
operator|.
name|activeLine
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|removeLineClass
argument_list|(
name|cm
operator|.
name|getActiveLine
argument_list|()
argument_list|,
name|LineClassWhere
operator|.
name|BACKGROUND
argument_list|,
name|diffTable
operator|.
name|style
operator|.
name|activeLineBg
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasActiveLine
argument_list|()
condition|)
block|{
name|other
operator|.
name|removeLineClass
argument_list|(
name|other
operator|.
name|getActiveLine
argument_list|()
argument_list|,
name|LineClassWhere
operator|.
name|WRAP
argument_list|,
name|diffTable
operator|.
name|style
operator|.
name|activeLine
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|removeLineClass
argument_list|(
name|other
operator|.
name|getActiveLine
argument_list|()
argument_list|,
name|LineClassWhere
operator|.
name|BACKGROUND
argument_list|,
name|diffTable
operator|.
name|style
operator|.
name|activeLineBg
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|line
init|=
name|cm
operator|.
name|getCursor
argument_list|(
literal|"head"
argument_list|)
operator|.
name|getLine
argument_list|()
decl_stmt|;
name|LineHandle
name|handle
init|=
name|cm
operator|.
name|getLineHandle
argument_list|(
name|line
argument_list|)
decl_stmt|;
comment|// Ugly workaround because CodeMirror never hides lines completely.
if|if
condition|(
name|hiddenSkipMap
operator|.
name|containsKey
argument_list|(
name|handle
argument_list|)
condition|)
block|{
name|line
operator|-=
name|hiddenSkipMap
operator|.
name|get
argument_list|(
name|handle
argument_list|)
expr_stmt|;
name|handle
operator|=
name|cm
operator|.
name|getLineHandle
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|LineOnOtherInfo
name|info
init|=
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|cm
operator|==
name|cmA
condition|?
name|Side
operator|.
name|PARENT
else|:
name|Side
operator|.
name|REVISION
argument_list|,
name|line
argument_list|)
decl_stmt|;
name|int
name|oLine
init|=
name|info
operator|.
name|getLine
argument_list|()
decl_stmt|;
name|cm
operator|.
name|setActiveLine
argument_list|(
name|handle
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addLineClass
argument_list|(
name|line
argument_list|,
name|LineClassWhere
operator|.
name|WRAP
argument_list|,
name|diffTable
operator|.
name|style
operator|.
name|activeLine
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addLineClass
argument_list|(
name|line
argument_list|,
name|LineClassWhere
operator|.
name|BACKGROUND
argument_list|,
name|diffTable
operator|.
name|style
operator|.
name|activeLineBg
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|isAligned
argument_list|()
condition|)
block|{
name|other
operator|.
name|setActiveLine
argument_list|(
name|other
operator|.
name|getLineHandle
argument_list|(
name|oLine
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|addLineClass
argument_list|(
name|oLine
argument_list|,
name|LineClassWhere
operator|.
name|WRAP
argument_list|,
name|diffTable
operator|.
name|style
operator|.
name|activeLine
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|addLineClass
argument_list|(
name|oLine
argument_list|,
name|LineClassWhere
operator|.
name|BACKGROUND
argument_list|,
name|diffTable
operator|.
name|style
operator|.
name|activeLineBg
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|insertNewDraft (final CodeMirror cm)
specifier|private
name|Runnable
name|insertNewDraft
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LineHandle
name|handle
init|=
name|cm
operator|.
name|getActiveLine
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|cm
operator|.
name|getLineNumber
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|CommentBox
name|box
init|=
name|lineActiveBoxMap
operator|.
name|get
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|box
operator|==
literal|null
condition|)
block|{
name|lineActiveBoxMap
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|addNewDraft
argument_list|(
name|cm
argument_list|,
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|box
operator|.
name|isDraft
argument_list|()
condition|)
block|{
operator|(
operator|(
name|DraftBox
operator|)
name|lineActiveBoxMap
operator|.
name|get
argument_list|(
name|handle
argument_list|)
operator|)
operator|.
name|setEdit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|PublishedBox
operator|)
name|box
operator|)
operator|.
name|onReply
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|getContentType (DiffInfo.FileMeta meta)
specifier|private
specifier|static
name|String
name|getContentType
parameter_list|(
name|DiffInfo
operator|.
name|FileMeta
name|meta
parameter_list|)
block|{
return|return
name|meta
operator|!=
literal|null
operator|&&
name|meta
operator|.
name|content_type
argument_list|()
operator|!=
literal|null
condition|?
name|ModeInjector
operator|.
name|getContentType
argument_list|(
name|meta
operator|.
name|content_type
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
DECL|class|EditIterator
specifier|static
class|class
name|EditIterator
block|{
DECL|field|lines
specifier|private
specifier|final
name|JsArrayString
name|lines
decl_stmt|;
DECL|field|startLine
specifier|private
specifier|final
name|int
name|startLine
decl_stmt|;
DECL|field|currLineIndex
specifier|private
name|int
name|currLineIndex
decl_stmt|;
DECL|field|currLineOffset
specifier|private
name|int
name|currLineOffset
decl_stmt|;
DECL|method|EditIterator (JsArrayString lineArray, int start)
name|EditIterator
parameter_list|(
name|JsArrayString
name|lineArray
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|lines
operator|=
name|lineArray
expr_stmt|;
name|startLine
operator|=
name|start
expr_stmt|;
block|}
DECL|method|advance (int numOfChar)
name|LineCharacter
name|advance
parameter_list|(
name|int
name|numOfChar
parameter_list|)
block|{
while|while
condition|(
name|currLineIndex
operator|<
name|lines
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|lengthWithNewline
init|=
name|lines
operator|.
name|get
argument_list|(
name|currLineIndex
argument_list|)
operator|.
name|length
argument_list|()
operator|-
name|currLineOffset
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|numOfChar
operator|<
name|lengthWithNewline
condition|)
block|{
name|LineCharacter
name|at
init|=
name|LineCharacter
operator|.
name|create
argument_list|(
name|startLine
operator|+
name|currLineIndex
argument_list|,
name|numOfChar
operator|+
name|currLineOffset
argument_list|)
decl_stmt|;
name|currLineOffset
operator|+=
name|numOfChar
expr_stmt|;
return|return
name|at
return|;
block|}
name|numOfChar
operator|-=
name|lengthWithNewline
expr_stmt|;
name|advanceLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|numOfChar
operator|==
literal|0
condition|)
block|{
return|return
name|LineCharacter
operator|.
name|create
argument_list|(
name|startLine
operator|+
name|currLineIndex
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"EditIterator index out of bound"
argument_list|)
throw|;
block|}
DECL|method|advanceLine ()
specifier|private
name|void
name|advanceLine
parameter_list|()
block|{
name|currLineIndex
operator|++
expr_stmt|;
name|currLineOffset
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

