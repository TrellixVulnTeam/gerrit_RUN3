begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.ui
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|SelectionEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|SelectionHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TabPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** A TabPanel which allows entries to be hidden.  This class is not yet  *  designed to handle removes or any other add methods than the one  *  overridden here.  It is also not designed to handle anything other  *  than text for the tab.  */
end_comment

begin_class
DECL|class|MorphingTabPanel
specifier|public
class|class
name|MorphingTabPanel
extends|extends
name|TabPanel
block|{
comment|// Keep track of the order the widgets/texts should be in when not hidden.
DECL|field|widgets
specifier|private
name|List
argument_list|<
name|Widget
argument_list|>
name|widgets
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|texts
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|texts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// currently visible widgets
DECL|field|visibles
specifier|private
name|List
argument_list|<
name|Widget
argument_list|>
name|visibles
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|selection
specifier|private
name|int
name|selection
decl_stmt|;
DECL|method|MorphingTabPanel ()
specifier|public
name|MorphingTabPanel
parameter_list|()
block|{
name|addSelectionHandler
argument_list|(
operator|new
name|SelectionHandler
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSelection
parameter_list|(
name|SelectionEvent
argument_list|<
name|Integer
argument_list|>
name|ev
parameter_list|)
block|{
name|selection
operator|=
name|ev
operator|.
name|getSelectedItem
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getSelectedIndex ()
specifier|public
name|int
name|getSelectedIndex
parameter_list|()
block|{
return|return
name|selection
return|;
block|}
DECL|method|getSelectedWidget ()
specifier|public
name|Widget
name|getSelectedWidget
parameter_list|()
block|{
return|return
name|getWidget
argument_list|(
name|getSelectedIndex
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|widgets
operator|.
name|clear
argument_list|()
expr_stmt|;
name|texts
operator|.
name|clear
argument_list|()
expr_stmt|;
name|visibles
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|add (Widget w, String tabText)
specifier|public
name|void
name|add
parameter_list|(
name|Widget
name|w
parameter_list|,
name|String
name|tabText
parameter_list|)
block|{
name|addInvisible
argument_list|(
name|w
argument_list|,
name|tabText
argument_list|)
expr_stmt|;
name|visibles
operator|.
name|add
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|super
operator|.
name|add
argument_list|(
name|w
argument_list|,
name|tabText
argument_list|)
expr_stmt|;
block|}
DECL|method|addInvisible (Widget w, String tabText)
specifier|public
name|void
name|addInvisible
parameter_list|(
name|Widget
name|w
parameter_list|,
name|String
name|tabText
parameter_list|)
block|{
name|widgets
operator|.
name|add
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|texts
operator|.
name|add
argument_list|(
name|tabText
argument_list|)
expr_stmt|;
block|}
DECL|method|setVisible (Widget w, boolean visible)
specifier|public
name|void
name|setVisible
parameter_list|(
name|Widget
name|w
parameter_list|,
name|boolean
name|visible
parameter_list|)
block|{
if|if
condition|(
name|visible
condition|)
block|{
if|if
condition|(
operator|!
name|visibles
operator|.
name|contains
argument_list|(
name|w
argument_list|)
condition|)
block|{
name|int
name|origPos
init|=
name|widgets
operator|.
name|indexOf
argument_list|(
name|w
argument_list|)
decl_stmt|;
comment|/* Re-insert the widget right after the first visible widget found            when scanning backwards from the current widget */
for|for
control|(
name|int
name|pos
init|=
name|origPos
operator|-
literal|1
init|;
name|pos
operator|>=
literal|0
condition|;
name|pos
operator|--
control|)
block|{
name|int
name|visiblePos
init|=
name|visibles
operator|.
name|indexOf
argument_list|(
name|widgets
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|visiblePos
operator|!=
operator|-
literal|1
condition|)
block|{
name|visibles
operator|.
name|add
argument_list|(
name|visiblePos
operator|+
literal|1
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|w
argument_list|,
name|texts
operator|.
name|get
argument_list|(
name|origPos
argument_list|)
argument_list|,
name|visiblePos
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
else|else
block|{
name|int
name|i
init|=
name|visibles
operator|.
name|indexOf
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
block|{
name|visibles
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

