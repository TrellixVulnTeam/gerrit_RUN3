begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.admin
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|text
operator|.
name|shared
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|text
operator|.
name|shared
operator|.
name|Renderer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ValueBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|GlobalKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_class
DECL|class|RefPatternBox
specifier|public
class|class
name|RefPatternBox
extends|extends
name|ValueBox
argument_list|<
name|String
argument_list|>
block|{
DECL|field|RENDERER
specifier|private
specifier|static
specifier|final
name|Renderer
argument_list|<
name|String
argument_list|>
name|RENDERER
init|=
operator|new
name|Renderer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|render
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
return|return
name|ref
return|;
block|}
specifier|public
name|void
name|render
parameter_list|(
name|String
name|ref
parameter_list|,
name|Appendable
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|dst
operator|.
name|append
argument_list|(
name|render
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|PARSER
specifier|private
specifier|static
specifier|final
name|Parser
argument_list|<
name|String
argument_list|>
name|PARSER
init|=
operator|new
name|Parser
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|parse
parameter_list|(
name|CharSequence
name|text
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|ref
init|=
name|text
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|Util
operator|.
name|C
operator|.
name|refErrorEmpty
argument_list|()
argument_list|,
literal|0
argument_list|)
throw|;
block|}
if|if
condition|(
name|ref
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|Util
operator|.
name|C
operator|.
name|refErrorBeginSlash
argument_list|()
argument_list|,
literal|0
argument_list|)
throw|;
block|}
if|if
condition|(
name|ref
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'^'
condition|)
block|{
if|if
condition|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"^refs/"
argument_list|)
condition|)
block|{
name|ref
operator|=
literal|"^refs/heads/"
operator|+
name|ref
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"refs/"
argument_list|)
condition|)
block|{
name|ref
operator|=
literal|"refs/heads/"
operator|+
name|ref
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ref
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|char
name|c
init|=
name|ref
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'/'
operator|&&
literal|0
operator|<
name|i
operator|&&
name|ref
operator|.
name|charAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|==
literal|'/'
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|Util
operator|.
name|C
operator|.
name|refErrorDoubleSlash
argument_list|()
argument_list|,
name|i
argument_list|)
throw|;
block|}
if|if
condition|(
name|c
operator|==
literal|' '
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|Util
operator|.
name|C
operator|.
name|refErrorNoSpace
argument_list|()
argument_list|,
name|i
argument_list|)
throw|;
block|}
if|if
condition|(
name|c
operator|<
literal|' '
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|Util
operator|.
name|C
operator|.
name|refErrorPrintable
argument_list|()
argument_list|,
name|i
argument_list|)
throw|;
block|}
block|}
return|return
name|ref
return|;
block|}
block|}
decl_stmt|;
DECL|method|RefPatternBox ()
specifier|public
name|RefPatternBox
parameter_list|()
block|{
name|super
argument_list|(
name|Document
operator|.
name|get
argument_list|()
operator|.
name|createTextInputElement
argument_list|()
argument_list|,
name|RENDERER
argument_list|,
name|PARSER
argument_list|)
expr_stmt|;
name|addKeyPressHandler
argument_list|(
name|GlobalKey
operator|.
name|STOP_PROPAGATION
argument_list|)
expr_stmt|;
name|addKeyPressHandler
argument_list|(
operator|new
name|KeyPressHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getCharCode
argument_list|()
operator|==
literal|' '
condition|)
block|{
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

