begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.admin
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|AccountGroupSuggestOracle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|HintTextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|RPCSuggestOracle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ProjectDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ApprovalCategoryValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|RefRight
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|BlurEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|BlurHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|HasValueChangeHandlers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Grid
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestBox
import|;
end_import

begin_class
DECL|class|AccessRightEditor
specifier|public
class|class
name|AccessRightEditor
extends|extends
name|Composite
implements|implements
name|HasValueChangeHandlers
argument_list|<
name|ProjectDetail
argument_list|>
block|{
DECL|field|projectKey
specifier|private
name|Project
operator|.
name|NameKey
name|projectKey
decl_stmt|;
DECL|field|catBox
specifier|private
name|ListBox
name|catBox
decl_stmt|;
DECL|field|nameTxt
specifier|private
name|HintTextBox
name|nameTxt
decl_stmt|;
DECL|field|nameSug
specifier|private
name|SuggestBox
name|nameSug
decl_stmt|;
DECL|field|referenceTxt
specifier|private
name|HintTextBox
name|referenceTxt
decl_stmt|;
DECL|field|topBox
specifier|private
name|ListBox
name|topBox
decl_stmt|;
DECL|field|botBox
specifier|private
name|ListBox
name|botBox
decl_stmt|;
DECL|field|addBut
specifier|private
name|Button
name|addBut
decl_stmt|;
DECL|field|clearBut
specifier|private
name|Button
name|clearBut
decl_stmt|;
DECL|method|AccessRightEditor (final Project.NameKey key)
specifier|public
name|AccessRightEditor
parameter_list|(
specifier|final
name|Project
operator|.
name|NameKey
name|key
parameter_list|)
block|{
name|projectKey
operator|=
name|key
expr_stmt|;
name|initWidgets
argument_list|()
expr_stmt|;
name|initCategories
argument_list|()
expr_stmt|;
specifier|final
name|Grid
name|grid
init|=
operator|new
name|Grid
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|grid
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|Util
operator|.
name|C
operator|.
name|columnApprovalCategory
argument_list|()
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|grid
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|catBox
argument_list|)
expr_stmt|;
name|grid
operator|.
name|setText
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|Util
operator|.
name|C
operator|.
name|columnGroupName
argument_list|()
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|grid
operator|.
name|setWidget
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|nameSug
argument_list|)
expr_stmt|;
name|grid
operator|.
name|setText
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
name|Util
operator|.
name|C
operator|.
name|columnRefName
argument_list|()
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|grid
operator|.
name|setWidget
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
name|referenceTxt
argument_list|)
expr_stmt|;
name|grid
operator|.
name|setText
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
name|Util
operator|.
name|C
operator|.
name|columnRightRange
argument_list|()
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|grid
operator|.
name|setWidget
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
name|topBox
argument_list|)
expr_stmt|;
name|grid
operator|.
name|setText
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|grid
operator|.
name|setWidget
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
name|botBox
argument_list|)
expr_stmt|;
name|FlowPanel
name|fp
init|=
operator|new
name|FlowPanel
argument_list|()
decl_stmt|;
name|fp
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|addSshKeyPanel
argument_list|()
argument_list|)
expr_stmt|;
name|fp
operator|.
name|add
argument_list|(
name|grid
argument_list|)
expr_stmt|;
name|fp
operator|.
name|add
argument_list|(
name|addBut
argument_list|)
expr_stmt|;
name|fp
operator|.
name|add
argument_list|(
name|clearBut
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|fp
argument_list|)
expr_stmt|;
block|}
DECL|method|initWidgets ()
specifier|protected
name|void
name|initWidgets
parameter_list|()
block|{
name|catBox
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|catBox
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
specifier|final
name|ChangeEvent
name|event
parameter_list|)
block|{
name|updateCategorySelection
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|nameTxt
operator|=
operator|new
name|HintTextBox
argument_list|()
expr_stmt|;
name|nameSug
operator|=
operator|new
name|SuggestBox
argument_list|(
operator|new
name|RPCSuggestOracle
argument_list|(
operator|new
name|AccountGroupSuggestOracle
argument_list|()
argument_list|)
argument_list|,
name|nameTxt
argument_list|)
expr_stmt|;
name|nameTxt
operator|.
name|setVisibleLength
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|nameTxt
operator|.
name|setHintText
argument_list|(
name|Util
operator|.
name|C
operator|.
name|defaultAccountGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|referenceTxt
operator|=
operator|new
name|HintTextBox
argument_list|()
expr_stmt|;
name|referenceTxt
operator|.
name|setVisibleLength
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|referenceTxt
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|referenceTxt
operator|.
name|addKeyPressHandler
argument_list|(
operator|new
name|KeyPressHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getCharCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_ENTER
condition|)
block|{
name|doAddNewRight
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|topBox
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|botBox
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|addBut
operator|=
operator|new
name|Button
argument_list|(
name|Util
operator|.
name|C
operator|.
name|buttonAddProjectRight
argument_list|()
argument_list|)
expr_stmt|;
name|addBut
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
specifier|final
name|ClickEvent
name|event
parameter_list|)
block|{
name|doAddNewRight
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|clearBut
operator|=
operator|new
name|Button
argument_list|(
name|Util
operator|.
name|C
operator|.
name|buttonClearProjectRight
argument_list|()
argument_list|)
expr_stmt|;
name|clearBut
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
specifier|final
name|ClickEvent
name|event
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|initCategories ()
specifier|protected
name|void
name|initCategories
parameter_list|()
block|{
for|for
control|(
specifier|final
name|ApprovalType
name|at
range|:
name|Gerrit
operator|.
name|getConfig
argument_list|()
operator|.
name|getApprovalTypes
argument_list|()
operator|.
name|getApprovalTypes
argument_list|()
control|)
block|{
specifier|final
name|ApprovalCategory
name|c
init|=
name|at
operator|.
name|getCategory
argument_list|()
decl_stmt|;
name|catBox
operator|.
name|addItem
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|ApprovalType
name|at
range|:
name|Gerrit
operator|.
name|getConfig
argument_list|()
operator|.
name|getApprovalTypes
argument_list|()
operator|.
name|getActionTypes
argument_list|()
control|)
block|{
specifier|final
name|ApprovalCategory
name|c
init|=
name|at
operator|.
name|getCategory
argument_list|()
decl_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|getConfig
argument_list|()
operator|.
name|getWildProject
argument_list|()
operator|.
name|equals
argument_list|(
name|projectKey
argument_list|)
operator|&&
name|ApprovalCategory
operator|.
name|OWN
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Giving out control of the WILD_PROJECT to other groups beyond
comment|// Administrators is dangerous. Having control over WILD_PROJECT
comment|// is about the same as having Administrator access as users are
comment|// able to affect grants in all projects on the system.
comment|//
continue|continue;
block|}
name|catBox
operator|.
name|addItem
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|catBox
operator|.
name|getItemCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|catBox
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|updateCategorySelection
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|enableForm (final boolean on)
specifier|public
name|void
name|enableForm
parameter_list|(
specifier|final
name|boolean
name|on
parameter_list|)
block|{
specifier|final
name|boolean
name|canAdd
init|=
name|on
operator|&&
name|catBox
operator|.
name|getItemCount
argument_list|()
operator|>
literal|0
decl_stmt|;
name|addBut
operator|.
name|setEnabled
argument_list|(
name|canAdd
argument_list|)
expr_stmt|;
name|clearBut
operator|.
name|setEnabled
argument_list|(
name|canAdd
argument_list|)
expr_stmt|;
name|nameTxt
operator|.
name|setEnabled
argument_list|(
name|canAdd
argument_list|)
expr_stmt|;
name|referenceTxt
operator|.
name|setEnabled
argument_list|(
name|canAdd
argument_list|)
expr_stmt|;
name|catBox
operator|.
name|setEnabled
argument_list|(
name|canAdd
argument_list|)
expr_stmt|;
name|topBox
operator|.
name|setEnabled
argument_list|(
name|canAdd
argument_list|)
expr_stmt|;
name|botBox
operator|.
name|setEnabled
argument_list|(
name|canAdd
argument_list|)
expr_stmt|;
block|}
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setCat
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setReference
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|load (final RefRight right, final AccountGroup group)
specifier|public
name|void
name|load
parameter_list|(
specifier|final
name|RefRight
name|right
parameter_list|,
specifier|final
name|AccountGroup
name|group
parameter_list|)
block|{
specifier|final
name|ApprovalType
name|atype
init|=
name|Gerrit
operator|.
name|getConfig
argument_list|()
operator|.
name|getApprovalTypes
argument_list|()
operator|.
name|getApprovalType
argument_list|(
name|right
operator|.
name|getApprovalCategoryId
argument_list|()
argument_list|)
decl_stmt|;
name|setCat
argument_list|(
name|atype
operator|!=
literal|null
condition|?
name|atype
operator|.
name|getCategory
argument_list|()
operator|.
name|getName
argument_list|()
else|:
name|right
operator|.
name|getApprovalCategoryId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|setName
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setReference
argument_list|(
name|right
operator|.
name|getRefPatternForDisplay
argument_list|()
argument_list|)
expr_stmt|;
name|setRange
argument_list|(
name|atype
operator|.
name|getCategory
argument_list|()
operator|.
name|isRange
argument_list|()
condition|?
name|atype
operator|.
name|getValue
argument_list|(
name|right
operator|.
name|getMinValue
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
name|atype
operator|.
name|getValue
argument_list|(
name|right
operator|.
name|getMaxValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doAddNewRight ()
specifier|protected
name|void
name|doAddNewRight
parameter_list|()
block|{
specifier|final
name|ApprovalType
name|at
init|=
name|getApprovalType
argument_list|()
decl_stmt|;
name|ApprovalCategoryValue
name|min
init|=
name|getMin
argument_list|(
name|at
argument_list|)
decl_stmt|;
name|ApprovalCategoryValue
name|max
init|=
name|getMax
argument_list|(
name|at
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|==
literal|null
operator|||
name|min
operator|==
literal|null
operator|||
name|max
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|String
name|groupName
init|=
name|nameSug
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|groupName
argument_list|)
operator|||
name|Util
operator|.
name|C
operator|.
name|defaultAccountGroupName
argument_list|()
operator|.
name|equals
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|String
name|refPattern
init|=
name|referenceTxt
operator|.
name|getText
argument_list|()
decl_stmt|;
name|addBut
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Util
operator|.
name|PROJECT_SVC
operator|.
name|addRight
argument_list|(
name|projectKey
argument_list|,
name|at
operator|.
name|getCategory
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|groupName
argument_list|,
name|refPattern
argument_list|,
name|min
operator|.
name|getValue
argument_list|()
argument_list|,
name|max
operator|.
name|getValue
argument_list|()
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|ProjectDetail
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|ProjectDetail
name|result
parameter_list|)
block|{
name|addBut
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nameSug
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|referenceTxt
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|AccessRightEditor
operator|.
name|this
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
name|addBut
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|updateCategorySelection ()
specifier|protected
name|void
name|updateCategorySelection
parameter_list|()
block|{
specifier|final
name|ApprovalType
name|at
init|=
name|getApprovalType
argument_list|()
decl_stmt|;
if|if
condition|(
name|at
operator|==
literal|null
operator|||
name|at
operator|.
name|getValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|topBox
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|botBox
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|referenceTxt
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|addBut
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|clearBut
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|updateRanges
argument_list|(
name|at
argument_list|)
expr_stmt|;
block|}
DECL|method|updateRanges (final ApprovalType at)
specifier|protected
name|void
name|updateRanges
parameter_list|(
specifier|final
name|ApprovalType
name|at
parameter_list|)
block|{
name|ApprovalCategoryValue
name|min
init|=
literal|null
decl_stmt|,
name|max
init|=
literal|null
decl_stmt|,
name|last
init|=
literal|null
decl_stmt|;
name|topBox
operator|.
name|clear
argument_list|()
expr_stmt|;
name|botBox
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|ApprovalCategoryValue
name|v
range|:
name|at
operator|.
name|getValues
argument_list|()
control|)
block|{
specifier|final
name|int
name|nval
init|=
name|v
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|String
name|vStr
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|nval
argument_list|)
decl_stmt|;
name|String
name|nStr
init|=
name|vStr
operator|+
literal|": "
operator|+
name|v
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|nval
operator|>
literal|0
condition|)
block|{
name|nStr
operator|=
literal|"+"
operator|+
name|nStr
expr_stmt|;
block|}
name|topBox
operator|.
name|addItem
argument_list|(
name|nStr
argument_list|,
name|vStr
argument_list|)
expr_stmt|;
name|botBox
operator|.
name|addItem
argument_list|(
name|nStr
argument_list|,
name|vStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|==
literal|null
operator|||
name|nval
operator|<
literal|0
condition|)
block|{
name|min
operator|=
name|v
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|max
operator|==
literal|null
operator|&&
name|nval
operator|>
literal|0
condition|)
block|{
name|max
operator|=
name|v
expr_stmt|;
block|}
name|last
operator|=
name|v
expr_stmt|;
block|}
if|if
condition|(
name|max
operator|==
literal|null
condition|)
block|{
name|max
operator|=
name|last
expr_stmt|;
block|}
if|if
condition|(
name|ApprovalCategory
operator|.
name|READ
operator|.
name|equals
argument_list|(
name|at
operator|.
name|getCategory
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Special case; for READ the most logical range is just
comment|// +1 READ, so assume that as the default for both.
name|min
operator|=
name|max
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|at
operator|.
name|getCategory
argument_list|()
operator|.
name|isRange
argument_list|()
condition|)
block|{
name|max
operator|=
literal|null
expr_stmt|;
block|}
name|setRange
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
DECL|method|setCat (final String cat)
specifier|protected
name|void
name|setCat
parameter_list|(
specifier|final
name|String
name|cat
parameter_list|)
block|{
if|if
condition|(
name|cat
operator|==
literal|null
condition|)
block|{
name|catBox
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setSelectedText
argument_list|(
name|catBox
argument_list|,
name|cat
argument_list|)
expr_stmt|;
block|}
name|updateCategorySelection
argument_list|()
expr_stmt|;
block|}
DECL|method|setName (final String name)
specifier|protected
name|void
name|setName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|nameTxt
operator|.
name|setText
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|setReference (final String ref)
specifier|protected
name|void
name|setReference
parameter_list|(
specifier|final
name|String
name|ref
parameter_list|)
block|{
name|referenceTxt
operator|.
name|setText
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
DECL|method|setRange (final ApprovalCategoryValue min, final ApprovalCategoryValue max)
specifier|protected
name|void
name|setRange
parameter_list|(
specifier|final
name|ApprovalCategoryValue
name|min
parameter_list|,
specifier|final
name|ApprovalCategoryValue
name|max
parameter_list|)
block|{
if|if
condition|(
name|min
operator|==
literal|null
operator|||
name|max
operator|==
literal|null
condition|)
block|{
name|botBox
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|max
operator|!=
literal|null
condition|)
block|{
name|setSelectedValue
argument_list|(
name|topBox
argument_list|,
literal|""
operator|+
name|max
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|botBox
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setSelectedValue
argument_list|(
name|botBox
argument_list|,
literal|""
operator|+
name|max
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setSelectedValue
argument_list|(
name|topBox
argument_list|,
literal|""
operator|+
name|min
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getApprovalType ()
specifier|private
name|ApprovalType
name|getApprovalType
parameter_list|()
block|{
name|int
name|idx
init|=
name|catBox
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Gerrit
operator|.
name|getConfig
argument_list|()
operator|.
name|getApprovalTypes
argument_list|()
operator|.
name|getApprovalType
argument_list|(
operator|new
name|ApprovalCategory
operator|.
name|Id
argument_list|(
name|catBox
operator|.
name|getValue
argument_list|(
name|idx
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getMin (ApprovalType at)
specifier|public
name|ApprovalCategoryValue
name|getMin
parameter_list|(
name|ApprovalType
name|at
parameter_list|)
block|{
specifier|final
name|ApprovalCategoryValue
name|top
init|=
name|getTop
argument_list|(
name|at
argument_list|)
decl_stmt|;
specifier|final
name|ApprovalCategoryValue
name|bot
init|=
name|getBot
argument_list|(
name|at
argument_list|)
decl_stmt|;
if|if
condition|(
name|bot
operator|==
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|ApprovalCategoryValue
name|v
range|:
name|at
operator|.
name|getValues
argument_list|()
control|)
block|{
if|if
condition|(
literal|0
operator|<=
name|v
operator|.
name|getValue
argument_list|()
operator|&&
name|v
operator|.
name|getValue
argument_list|()
operator|<=
name|top
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
name|v
return|;
block|}
block|}
return|return
name|at
operator|.
name|getMin
argument_list|()
return|;
block|}
if|if
condition|(
name|top
operator|.
name|getValue
argument_list|()
operator|>
name|bot
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
name|bot
return|;
block|}
return|return
name|top
return|;
block|}
DECL|method|getMax (ApprovalType at)
specifier|public
name|ApprovalCategoryValue
name|getMax
parameter_list|(
name|ApprovalType
name|at
parameter_list|)
block|{
specifier|final
name|ApprovalCategoryValue
name|top
init|=
name|getTop
argument_list|(
name|at
argument_list|)
decl_stmt|;
specifier|final
name|ApprovalCategoryValue
name|bot
init|=
name|getBot
argument_list|(
name|at
argument_list|)
decl_stmt|;
if|if
condition|(
name|bot
operator|==
literal|null
operator|||
name|bot
operator|.
name|getValue
argument_list|()
operator|<
name|top
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
name|top
return|;
block|}
return|return
name|bot
return|;
block|}
DECL|method|getTop (ApprovalType at)
specifier|protected
name|ApprovalCategoryValue
name|getTop
parameter_list|(
name|ApprovalType
name|at
parameter_list|)
block|{
name|int
name|idx
init|=
name|topBox
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|at
operator|.
name|getValue
argument_list|(
name|Short
operator|.
name|parseShort
argument_list|(
name|topBox
operator|.
name|getValue
argument_list|(
name|idx
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getBot (ApprovalType at)
specifier|protected
name|ApprovalCategoryValue
name|getBot
parameter_list|(
name|ApprovalType
name|at
parameter_list|)
block|{
name|int
name|idx
init|=
name|botBox
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
operator|||
operator|!
name|botBox
operator|.
name|isVisible
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|at
operator|.
name|getValue
argument_list|(
name|Short
operator|.
name|parseShort
argument_list|(
name|botBox
operator|.
name|getValue
argument_list|(
name|idx
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|addValueChangeHandler ( final ValueChangeHandler<ProjectDetail> handler)
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
specifier|final
name|ValueChangeHandler
argument_list|<
name|ProjectDetail
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
DECL|method|setSelectedText (ListBox box, String text)
specifier|public
specifier|static
name|boolean
name|setSelectedText
parameter_list|(
name|ListBox
name|box
parameter_list|,
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|box
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|text
operator|.
name|equals
argument_list|(
name|box
operator|.
name|getItemText
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|box
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|setSelectedValue (ListBox box, String value)
specifier|public
specifier|static
name|boolean
name|setSelectedValue
parameter_list|(
name|ListBox
name|box
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|box
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|box
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|box
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

