begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.admin
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|PUSH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|PUSH_TAG
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Hyperlink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|DivElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|SpanElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Display
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|editor
operator|.
name|client
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|editor
operator|.
name|client
operator|.
name|EditorDelegate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|editor
operator|.
name|client
operator|.
name|ValueAwareEditor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|text
operator|.
name|shared
operator|.
name|Renderer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiBinder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Anchor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|UIObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ValueListBox
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
DECL|class|PermissionRuleEditor
specifier|public
class|class
name|PermissionRuleEditor
extends|extends
name|Composite
implements|implements
name|Editor
argument_list|<
name|PermissionRule
argument_list|>
implements|,
name|ValueAwareEditor
argument_list|<
name|PermissionRule
argument_list|>
block|{
DECL|interface|Binder
interface|interface
name|Binder
extends|extends
name|UiBinder
argument_list|<
name|HTMLPanel
argument_list|,
name|PermissionRuleEditor
argument_list|>
block|{   }
DECL|field|uiBinder
specifier|private
specifier|static
specifier|final
name|Binder
name|uiBinder
init|=
name|GWT
operator|.
name|create
argument_list|(
name|Binder
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|UiField
argument_list|(
name|provided
operator|=
literal|true
argument_list|)
DECL|field|action
name|ValueListBox
argument_list|<
name|PermissionRule
operator|.
name|Action
argument_list|>
name|action
decl_stmt|;
annotation|@
name|UiField
argument_list|(
name|provided
operator|=
literal|true
argument_list|)
DECL|field|min
name|ValueListBox
argument_list|<
name|Integer
argument_list|>
name|min
decl_stmt|;
annotation|@
name|UiField
argument_list|(
name|provided
operator|=
literal|true
argument_list|)
DECL|field|max
name|ValueListBox
argument_list|<
name|Integer
argument_list|>
name|max
decl_stmt|;
annotation|@
name|UiField
DECL|field|force
name|CheckBox
name|force
decl_stmt|;
annotation|@
name|UiField
DECL|field|groupNameLink
name|Hyperlink
name|groupNameLink
decl_stmt|;
annotation|@
name|UiField
DECL|field|groupNameSpan
name|SpanElement
name|groupNameSpan
decl_stmt|;
annotation|@
name|UiField
DECL|field|deletedGroupName
name|SpanElement
name|deletedGroupName
decl_stmt|;
annotation|@
name|UiField
DECL|field|deleteRule
name|Anchor
name|deleteRule
decl_stmt|;
annotation|@
name|UiField
DECL|field|normal
name|DivElement
name|normal
decl_stmt|;
annotation|@
name|UiField
DECL|field|deleted
name|DivElement
name|deleted
decl_stmt|;
annotation|@
name|UiField
DECL|field|rangeEditor
name|SpanElement
name|rangeEditor
decl_stmt|;
DECL|field|isDeleted
specifier|private
name|boolean
name|isDeleted
decl_stmt|;
DECL|method|PermissionRuleEditor (boolean readOnly, AccessSection section, Permission permission, ApprovalType labelRange)
specifier|public
name|PermissionRuleEditor
parameter_list|(
name|boolean
name|readOnly
parameter_list|,
name|AccessSection
name|section
parameter_list|,
name|Permission
name|permission
parameter_list|,
name|ApprovalType
name|labelRange
parameter_list|)
block|{
name|action
operator|=
operator|new
name|ValueListBox
argument_list|<
name|PermissionRule
operator|.
name|Action
argument_list|>
argument_list|(
name|actionRenderer
argument_list|)
expr_stmt|;
name|min
operator|=
operator|new
name|ValueListBox
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|rangeRenderer
argument_list|)
expr_stmt|;
name|max
operator|=
operator|new
name|ValueListBox
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|rangeRenderer
argument_list|)
expr_stmt|;
if|if
condition|(
name|labelRange
operator|!=
literal|null
condition|)
block|{
name|min
operator|.
name|setValue
argument_list|(
operator|(
name|int
operator|)
name|labelRange
operator|.
name|getMin
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|max
operator|.
name|setValue
argument_list|(
operator|(
name|int
operator|)
name|labelRange
operator|.
name|getMax
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|min
operator|.
name|setAcceptableValues
argument_list|(
name|labelRange
operator|.
name|getValuesAsList
argument_list|()
argument_list|)
expr_stmt|;
name|max
operator|.
name|setAcceptableValues
argument_list|(
name|labelRange
operator|.
name|getValuesAsList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|.
name|setValue
argument_list|(
name|PermissionRule
operator|.
name|Action
operator|.
name|ALLOW
argument_list|)
expr_stmt|;
name|action
operator|.
name|setAcceptableValues
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|PermissionRule
operator|.
name|Action
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|initWidget
argument_list|(
name|uiBinder
operator|.
name|createAndBindUi
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|permission
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|canForce
init|=
name|PUSH
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|PUSH_TAG
operator|.
name|equals
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|canForce
condition|)
block|{
name|String
name|ref
init|=
name|section
operator|.
name|getRefPattern
argument_list|()
decl_stmt|;
name|canForce
operator|=
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"refs/for/"
argument_list|)
operator|&&
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"^refs/for/"
argument_list|)
expr_stmt|;
block|}
name|force
operator|.
name|setVisible
argument_list|(
name|canForce
argument_list|)
expr_stmt|;
name|force
operator|.
name|setEnabled
argument_list|(
operator|!
name|readOnly
argument_list|)
expr_stmt|;
if|if
condition|(
name|labelRange
operator|!=
literal|null
condition|)
block|{
name|action
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setDisplay
argument_list|(
name|Display
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setElementPropertyBoolean
argument_list|(
name|min
operator|.
name|getElement
argument_list|()
argument_list|,
literal|"disabled"
argument_list|,
name|readOnly
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setElementPropertyBoolean
argument_list|(
name|max
operator|.
name|getElement
argument_list|()
argument_list|,
literal|"disabled"
argument_list|,
name|readOnly
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rangeEditor
operator|.
name|getStyle
argument_list|()
operator|.
name|setDisplay
argument_list|(
name|Display
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setElementPropertyBoolean
argument_list|(
name|action
operator|.
name|getElement
argument_list|()
argument_list|,
literal|"disabled"
argument_list|,
name|readOnly
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|readOnly
condition|)
block|{
name|deleteRule
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
name|deleteRule
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|isDeleted ()
name|boolean
name|isDeleted
parameter_list|()
block|{
return|return
name|isDeleted
return|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"deleteRule"
argument_list|)
DECL|method|onDeleteRule (ClickEvent event)
name|void
name|onDeleteRule
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|isDeleted
operator|=
literal|true
expr_stmt|;
name|normal
operator|.
name|getStyle
argument_list|()
operator|.
name|setDisplay
argument_list|(
name|Display
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|deleted
operator|.
name|getStyle
argument_list|()
operator|.
name|setDisplay
argument_list|(
name|Display
operator|.
name|BLOCK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"undoDelete"
argument_list|)
DECL|method|onUndoDelete (ClickEvent event)
name|void
name|onUndoDelete
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|isDeleted
operator|=
literal|false
expr_stmt|;
name|deleted
operator|.
name|getStyle
argument_list|()
operator|.
name|setDisplay
argument_list|(
name|Display
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|normal
operator|.
name|getStyle
argument_list|()
operator|.
name|setDisplay
argument_list|(
name|Display
operator|.
name|BLOCK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setValue (PermissionRule value)
specifier|public
name|void
name|setValue
parameter_list|(
name|PermissionRule
name|value
parameter_list|)
block|{
name|GroupReference
name|ref
init|=
name|value
operator|.
name|getGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|groupNameLink
operator|.
name|setTargetHistoryToken
argument_list|(
name|Dispatcher
operator|.
name|toGroup
argument_list|(
name|ref
operator|.
name|getUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|groupNameLink
operator|.
name|setText
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|groupNameSpan
operator|.
name|setInnerText
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|deletedGroupName
operator|.
name|setInnerText
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|groupNameLink
operator|.
name|setVisible
argument_list|(
name|ref
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|UIObject
operator|.
name|setVisible
argument_list|(
name|groupNameSpan
argument_list|,
name|ref
operator|.
name|getUUID
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDelegate (EditorDelegate<PermissionRule> delegate)
specifier|public
name|void
name|setDelegate
parameter_list|(
name|EditorDelegate
argument_list|<
name|PermissionRule
argument_list|>
name|delegate
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|onPropertyChange (String... paths)
specifier|public
name|void
name|onPropertyChange
parameter_list|(
name|String
modifier|...
name|paths
parameter_list|)
block|{   }
DECL|class|ActionRenderer
specifier|private
specifier|static
class|class
name|ActionRenderer
implements|implements
name|Renderer
argument_list|<
name|PermissionRule
operator|.
name|Action
argument_list|>
block|{
annotation|@
name|Override
DECL|method|render (PermissionRule.Action object)
specifier|public
name|String
name|render
parameter_list|(
name|PermissionRule
operator|.
name|Action
name|object
parameter_list|)
block|{
return|return
name|object
operator|!=
literal|null
condition|?
name|object
operator|.
name|toString
argument_list|()
else|:
literal|""
return|;
block|}
annotation|@
name|Override
DECL|method|render (PermissionRule.Action object, Appendable appendable)
specifier|public
name|void
name|render
parameter_list|(
name|PermissionRule
operator|.
name|Action
name|object
parameter_list|,
name|Appendable
name|appendable
parameter_list|)
throws|throws
name|IOException
block|{
name|appendable
operator|.
name|append
argument_list|(
name|render
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RangeRenderer
specifier|private
specifier|static
class|class
name|RangeRenderer
implements|implements
name|Renderer
argument_list|<
name|Integer
argument_list|>
block|{
annotation|@
name|Override
DECL|method|render (Integer object)
specifier|public
name|String
name|render
parameter_list|(
name|Integer
name|object
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|<=
name|object
condition|)
block|{
return|return
literal|"+"
operator|+
name|object
return|;
block|}
else|else
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|object
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|render (Integer object, Appendable appendable)
specifier|public
name|void
name|render
parameter_list|(
name|Integer
name|object
parameter_list|,
name|Appendable
name|appendable
parameter_list|)
throws|throws
name|IOException
block|{
name|appendable
operator|.
name|append
argument_list|(
name|render
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|actionRenderer
specifier|private
specifier|static
specifier|final
name|ActionRenderer
name|actionRenderer
init|=
operator|new
name|ActionRenderer
argument_list|()
decl_stmt|;
DECL|field|rangeRenderer
specifier|private
specifier|static
specifier|final
name|RangeRenderer
name|rangeRenderer
init|=
operator|new
name|RangeRenderer
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

