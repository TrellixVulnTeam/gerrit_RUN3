begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.changes
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ToggleStarRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|resources
operator|.
name|client
operator|.
name|ImageResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|common
operator|.
name|VoidResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|web
operator|.
name|bindery
operator|.
name|event
operator|.
name|shared
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|web
operator|.
name|bindery
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_comment
comment|/** Supports the star icon displayed on changes and tracking the status. */
end_comment

begin_class
DECL|class|StarredChanges
specifier|public
class|class
name|StarredChanges
block|{
DECL|field|TYPE
specifier|private
specifier|static
specifier|final
name|Event
operator|.
name|Type
argument_list|<
name|ChangeStarHandler
argument_list|>
name|TYPE
init|=
operator|new
name|Event
operator|.
name|Type
argument_list|<
name|ChangeStarHandler
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Handler that can receive notifications of a change's starred status. */
DECL|interface|ChangeStarHandler
specifier|public
specifier|static
interface|interface
name|ChangeStarHandler
block|{
DECL|method|onChangeStar (ChangeStarEvent event)
specifier|public
name|void
name|onChangeStar
parameter_list|(
name|ChangeStarEvent
name|event
parameter_list|)
function_decl|;
block|}
comment|/** Event fired when a star changes status. The new status is reported. */
DECL|class|ChangeStarEvent
specifier|public
specifier|static
class|class
name|ChangeStarEvent
extends|extends
name|Event
argument_list|<
name|ChangeStarHandler
argument_list|>
block|{
DECL|field|starred
specifier|private
name|boolean
name|starred
decl_stmt|;
DECL|method|ChangeStarEvent (Change.Id source, boolean starred)
specifier|public
name|ChangeStarEvent
parameter_list|(
name|Change
operator|.
name|Id
name|source
parameter_list|,
name|boolean
name|starred
parameter_list|)
block|{
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|this
operator|.
name|starred
operator|=
name|starred
expr_stmt|;
block|}
DECL|method|isStarred ()
specifier|public
name|boolean
name|isStarred
parameter_list|()
block|{
return|return
name|starred
return|;
block|}
annotation|@
name|Override
DECL|method|getAssociatedType ()
specifier|public
name|Type
argument_list|<
name|ChangeStarHandler
argument_list|>
name|getAssociatedType
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|dispatch (ChangeStarHandler handler)
specifier|protected
name|void
name|dispatch
parameter_list|(
name|ChangeStarHandler
name|handler
parameter_list|)
block|{
name|handler
operator|.
name|onChangeStar
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a star icon for the given change, and current status. Returns null    * if the user is not signed in and cannot support starred changes.    */
DECL|method|createIcon (Change.Id source, boolean starred)
specifier|public
specifier|static
name|Icon
name|createIcon
parameter_list|(
name|Change
operator|.
name|Id
name|source
parameter_list|,
name|boolean
name|starred
parameter_list|)
block|{
return|return
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|?
operator|new
name|Icon
argument_list|(
name|source
argument_list|,
name|starred
argument_list|)
else|:
literal|null
return|;
block|}
comment|/** Make a key command that toggles the star for a change. */
DECL|method|newKeyCommand (final Icon icon)
specifier|public
specifier|static
name|KeyCommand
name|newKeyCommand
parameter_list|(
specifier|final
name|Icon
name|icon
parameter_list|)
block|{
return|return
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'s'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableStar
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|icon
operator|.
name|toggleStar
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/** Add a handler to listen for starred status to change. */
DECL|method|addHandler ( Change.Id source, ChangeStarHandler handler)
specifier|public
specifier|static
name|HandlerRegistration
name|addHandler
parameter_list|(
name|Change
operator|.
name|Id
name|source
parameter_list|,
name|ChangeStarHandler
name|handler
parameter_list|)
block|{
return|return
name|Gerrit
operator|.
name|EVENT_BUS
operator|.
name|addHandlerToSource
argument_list|(
name|TYPE
argument_list|,
name|source
argument_list|,
name|handler
argument_list|)
return|;
block|}
comment|/**    * Broadcast the current starred value of a change to UI widgets. This does    * not RPC to the server and does not alter the starred status of a change.    */
DECL|method|fireChangeStarEvent (Change.Id id, boolean starred)
specifier|public
specifier|static
name|void
name|fireChangeStarEvent
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|boolean
name|starred
parameter_list|)
block|{
name|Gerrit
operator|.
name|EVENT_BUS
operator|.
name|fireEventFromSource
argument_list|(
operator|new
name|ChangeStarEvent
argument_list|(
name|id
argument_list|,
name|starred
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the starred status of a change. This method broadcasts to all    * interested UI widgets and sends an RPC to the server to record the    * updated status.    */
DECL|method|toggleStar ( final Change.Id changeId, final boolean newValue)
specifier|public
specifier|static
name|void
name|toggleStar
parameter_list|(
specifier|final
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
specifier|final
name|boolean
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|next
operator|=
operator|new
name|ToggleStarRequest
argument_list|()
expr_stmt|;
block|}
name|next
operator|.
name|toggle
argument_list|(
name|changeId
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|fireChangeStarEvent
argument_list|(
name|changeId
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|busy
condition|)
block|{
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|next
specifier|private
specifier|static
name|ToggleStarRequest
name|next
decl_stmt|;
DECL|field|busy
specifier|private
specifier|static
name|boolean
name|busy
decl_stmt|;
DECL|method|start ()
specifier|private
specifier|static
name|void
name|start
parameter_list|()
block|{
specifier|final
name|ToggleStarRequest
name|req
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
name|busy
operator|=
literal|true
expr_stmt|;
name|Util
operator|.
name|LIST_SVC
operator|.
name|toggleStars
argument_list|(
name|req
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|VoidResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|VoidResult
name|result
parameter_list|)
block|{
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|busy
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|rollback
argument_list|(
name|req
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|rollback
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
block|}
name|busy
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|rollback (ToggleStarRequest req)
specifier|private
specifier|static
name|void
name|rollback
parameter_list|(
name|ToggleStarRequest
name|req
parameter_list|)
block|{
if|if
condition|(
name|req
operator|.
name|getAddSet
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Change
operator|.
name|Id
name|id
range|:
name|req
operator|.
name|getAddSet
argument_list|()
control|)
block|{
name|fireChangeStarEvent
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|req
operator|.
name|getRemoveSet
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Change
operator|.
name|Id
name|id
range|:
name|req
operator|.
name|getRemoveSet
argument_list|()
control|)
block|{
name|fireChangeStarEvent
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|Icon
specifier|public
specifier|static
class|class
name|Icon
extends|extends
name|Image
implements|implements
name|ChangeStarHandler
implements|,
name|ClickHandler
block|{
DECL|field|changeId
specifier|private
specifier|final
name|Change
operator|.
name|Id
name|changeId
decl_stmt|;
DECL|field|starred
specifier|private
name|boolean
name|starred
decl_stmt|;
DECL|field|handler
specifier|private
name|HandlerRegistration
name|handler
decl_stmt|;
DECL|method|Icon (Change.Id changeId, boolean starred)
name|Icon
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|boolean
name|starred
parameter_list|)
block|{
name|super
argument_list|(
name|resource
argument_list|(
name|starred
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|changeId
operator|=
name|changeId
expr_stmt|;
name|this
operator|.
name|starred
operator|=
name|starred
expr_stmt|;
name|addClickHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Toggles the state of the star, as if the user clicked on the image. This      * will broadcast the new star status to all interested UI widgets, and RPC      * to the server to store the changed value.      */
DECL|method|toggleStar ()
specifier|public
name|void
name|toggleStar
parameter_list|()
block|{
name|StarredChanges
operator|.
name|toggleStar
argument_list|(
name|changeId
argument_list|,
operator|!
name|starred
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
block|{
name|handler
operator|=
name|StarredChanges
operator|.
name|addHandler
argument_list|(
name|changeId
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onUnload ()
specifier|protected
name|void
name|onUnload
parameter_list|()
block|{
name|handler
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|handler
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onChangeStar (ChangeStarEvent event)
specifier|public
name|void
name|onChangeStar
parameter_list|(
name|ChangeStarEvent
name|event
parameter_list|)
block|{
name|setResource
argument_list|(
name|resource
argument_list|(
name|event
operator|.
name|isStarred
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|starred
operator|=
name|event
operator|.
name|isStarred
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onClick (ClickEvent event)
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|toggleStar
argument_list|()
expr_stmt|;
block|}
DECL|method|resource (boolean starred)
specifier|private
specifier|static
name|ImageResource
name|resource
parameter_list|(
name|boolean
name|starred
parameter_list|)
block|{
return|return
name|starred
condition|?
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|starFilled
argument_list|()
else|:
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|starOpen
argument_list|()
return|;
block|}
block|}
DECL|method|StarredChanges ()
specifier|private
name|StarredChanges
parameter_list|()
block|{   }
block|}
end_class

end_unit

