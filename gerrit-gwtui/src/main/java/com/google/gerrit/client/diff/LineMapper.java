begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.diff
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/** Helper class to handle calculations involving line gaps. */
end_comment

begin_class
DECL|class|LineMapper
class|class
name|LineMapper
block|{
DECL|field|lineA
specifier|private
name|int
name|lineA
decl_stmt|;
DECL|field|lineB
specifier|private
name|int
name|lineB
decl_stmt|;
DECL|field|lineMapAtoB
specifier|private
name|List
argument_list|<
name|LineGap
argument_list|>
name|lineMapAtoB
decl_stmt|;
DECL|field|lineMapBtoA
specifier|private
name|List
argument_list|<
name|LineGap
argument_list|>
name|lineMapBtoA
decl_stmt|;
DECL|method|LineMapper ()
name|LineMapper
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|reset ()
name|void
name|reset
parameter_list|()
block|{
name|lineA
operator|=
literal|0
expr_stmt|;
name|lineB
operator|=
literal|0
expr_stmt|;
name|lineMapAtoB
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|lineMapBtoA
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|getLineA ()
name|int
name|getLineA
parameter_list|()
block|{
return|return
name|lineA
return|;
block|}
DECL|method|getLineB ()
name|int
name|getLineB
parameter_list|()
block|{
return|return
name|lineB
return|;
block|}
DECL|method|appendCommon (int numLines)
name|void
name|appendCommon
parameter_list|(
name|int
name|numLines
parameter_list|)
block|{
name|lineA
operator|+=
name|numLines
expr_stmt|;
name|lineB
operator|+=
name|numLines
expr_stmt|;
block|}
DECL|method|appendReplace (int aLen, int bLen)
name|void
name|appendReplace
parameter_list|(
name|int
name|aLen
parameter_list|,
name|int
name|bLen
parameter_list|)
block|{
name|appendCommon
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|aLen
argument_list|,
name|bLen
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|aLen
operator|<
name|bLen
condition|)
block|{
comment|// Edit with insertion
name|appendInsert
argument_list|(
name|bLen
operator|-
name|aLen
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|aLen
operator|>
name|bLen
condition|)
block|{
comment|// Edit with deletion
name|appendDelete
argument_list|(
name|aLen
operator|-
name|bLen
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|appendInsert (int numLines)
name|void
name|appendInsert
parameter_list|(
name|int
name|numLines
parameter_list|)
block|{
name|int
name|origLineB
init|=
name|lineB
decl_stmt|;
name|lineB
operator|+=
name|numLines
expr_stmt|;
name|int
name|bAheadOfA
init|=
name|lineB
operator|-
name|lineA
decl_stmt|;
name|lineMapAtoB
operator|.
name|add
argument_list|(
operator|new
name|LineGap
argument_list|(
name|lineA
argument_list|,
operator|-
literal|1
argument_list|,
name|bAheadOfA
argument_list|)
argument_list|)
expr_stmt|;
name|lineMapBtoA
operator|.
name|add
argument_list|(
operator|new
name|LineGap
argument_list|(
name|origLineB
argument_list|,
name|lineB
operator|-
literal|1
argument_list|,
operator|-
name|bAheadOfA
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|appendDelete (int numLines)
name|void
name|appendDelete
parameter_list|(
name|int
name|numLines
parameter_list|)
block|{
name|int
name|origLineA
init|=
name|lineA
decl_stmt|;
name|lineA
operator|+=
name|numLines
expr_stmt|;
name|int
name|aAheadOfB
init|=
name|lineA
operator|-
name|lineB
decl_stmt|;
name|lineMapAtoB
operator|.
name|add
argument_list|(
operator|new
name|LineGap
argument_list|(
name|origLineA
argument_list|,
name|lineA
operator|-
literal|1
argument_list|,
operator|-
name|aAheadOfB
argument_list|)
argument_list|)
expr_stmt|;
name|lineMapBtoA
operator|.
name|add
argument_list|(
operator|new
name|LineGap
argument_list|(
name|lineB
argument_list|,
operator|-
literal|1
argument_list|,
name|aAheadOfB
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper method to retrieve the line number on the other side.    *    *<p>Given a line number on one side, performs a binary search in the lineMap to find the    * corresponding LineGap record.    *    *<p>A LineGap records gap information from the start of an actual gap up to the start of the    * next gap. In the following example, lineMapAtoB will have LineGap: {start: 1, end: -1, delta:    * 3} (end set to -1 to represent a dummy gap of length zero. The binary search only looks at    * start so setting it to -1 has no effect here.) lineMapBtoA will have LineGap: {start: 1, end:    * 3, delta: -3} These LineGaps control lines between 1 and 5.    *    *<p>The "delta" is computed as the number to add on our side to get the line number on the other    * side given a line after the actual gap, so the result will be (line + delta). All lines within    * the actual gap (1 to 3) are considered corresponding to the last line above the region on the    * other side, which is 0 in this case. For these lines, we do (end + delta).    *    *<p>For example, to get the line number on the left corresponding to 1 on the right    * (lineOnOther(REVISION, 1)), the method looks up in lineMapBtoA, finds the "delta" to be -3, and    * returns 3 + (-3) = 0 since 1 falls in the actual gap. On the other hand, the line corresponding    * to 5 on the right will be 5 + (-3) = 2, since 5 is in the region after the gap (but still    * controlled by the current LineGap).    *    *<p>PARENT REVISION 0 | 0 - | 1 \ \ - | 2 | Actual insertion gap | - | 3 / | Region controlled    * by one LineGap 1 | 4<- delta = 4 - 1 = 3 | 2 | 5 / - | 6 ...    */
DECL|method|lineOnOther (DisplaySide mySide, int line)
name|LineOnOtherInfo
name|lineOnOther
parameter_list|(
name|DisplaySide
name|mySide
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|List
argument_list|<
name|LineGap
argument_list|>
name|lineGaps
init|=
name|gapList
argument_list|(
name|mySide
argument_list|)
decl_stmt|;
comment|// Create a dummy LineGap for the search.
name|int
name|ret
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|lineGaps
argument_list|,
operator|new
name|LineGap
argument_list|(
name|line
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|new
name|LineOnOtherInfo
argument_list|(
name|line
argument_list|,
literal|true
argument_list|)
return|;
block|}
name|LineGap
name|lookup
init|=
name|lineGaps
operator|.
name|get
argument_list|(
literal|0
operator|<=
name|ret
condition|?
name|ret
else|:
operator|-
name|ret
operator|-
literal|2
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|lookup
operator|.
name|start
decl_stmt|;
name|int
name|end
init|=
name|lookup
operator|.
name|end
decl_stmt|;
name|int
name|delta
init|=
name|lookup
operator|.
name|delta
decl_stmt|;
if|if
condition|(
name|start
operator|<=
name|line
operator|&&
name|line
operator|<=
name|end
operator|&&
name|end
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Line falls within gap
return|return
operator|new
name|LineOnOtherInfo
argument_list|(
name|end
operator|+
name|delta
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// Line after gap
return|return
operator|new
name|LineOnOtherInfo
argument_list|(
name|line
operator|+
name|delta
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|align (DisplaySide mySide, int line)
name|AlignedPair
name|align
parameter_list|(
name|DisplaySide
name|mySide
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|List
argument_list|<
name|LineGap
argument_list|>
name|gaps
init|=
name|gapList
argument_list|(
name|mySide
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|gaps
argument_list|,
operator|new
name|LineGap
argument_list|(
name|line
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|new
name|AlignedPair
argument_list|(
name|line
argument_list|,
name|line
argument_list|)
return|;
block|}
name|LineGap
name|g
init|=
name|gaps
operator|.
name|get
argument_list|(
literal|0
operator|<=
name|idx
condition|?
name|idx
else|:
operator|-
name|idx
operator|-
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|start
operator|<=
name|line
operator|&&
name|line
operator|<=
name|g
operator|.
name|end
operator|&&
name|g
operator|.
name|end
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
literal|0
operator|<
name|g
operator|.
name|start
condition|)
block|{
comment|// Line falls within this gap, use alignment before.
return|return
operator|new
name|AlignedPair
argument_list|(
name|g
operator|.
name|start
operator|-
literal|1
argument_list|,
name|g
operator|.
name|end
operator|+
name|g
operator|.
name|delta
argument_list|)
return|;
block|}
return|return
operator|new
name|AlignedPair
argument_list|(
name|g
operator|.
name|end
argument_list|,
name|g
operator|.
name|end
operator|+
name|g
operator|.
name|delta
operator|+
literal|1
argument_list|)
return|;
block|}
return|return
operator|new
name|AlignedPair
argument_list|(
name|line
argument_list|,
name|line
operator|+
name|g
operator|.
name|delta
argument_list|)
return|;
block|}
DECL|method|gapList (DisplaySide mySide)
specifier|private
name|List
argument_list|<
name|LineGap
argument_list|>
name|gapList
parameter_list|(
name|DisplaySide
name|mySide
parameter_list|)
block|{
return|return
name|mySide
operator|==
name|DisplaySide
operator|.
name|A
condition|?
name|lineMapAtoB
else|:
name|lineMapBtoA
return|;
block|}
DECL|class|AlignedPair
specifier|static
class|class
name|AlignedPair
block|{
DECL|field|src
specifier|final
name|int
name|src
decl_stmt|;
DECL|field|dst
specifier|final
name|int
name|dst
decl_stmt|;
DECL|method|AlignedPair (int s, int d)
name|AlignedPair
parameter_list|(
name|int
name|s
parameter_list|,
name|int
name|d
parameter_list|)
block|{
name|src
operator|=
name|s
expr_stmt|;
name|dst
operator|=
name|d
expr_stmt|;
block|}
block|}
comment|/**    * @field line The line number on the other side.    * @field aligned Whether the two lines are at the same height when displayed.    */
DECL|class|LineOnOtherInfo
specifier|static
class|class
name|LineOnOtherInfo
block|{
DECL|field|line
specifier|private
name|int
name|line
decl_stmt|;
DECL|field|aligned
specifier|private
name|boolean
name|aligned
decl_stmt|;
DECL|method|LineOnOtherInfo (int line, boolean aligned)
name|LineOnOtherInfo
parameter_list|(
name|int
name|line
parameter_list|,
name|boolean
name|aligned
parameter_list|)
block|{
name|this
operator|.
name|line
operator|=
name|line
expr_stmt|;
name|this
operator|.
name|aligned
operator|=
name|aligned
expr_stmt|;
block|}
DECL|method|getLine ()
name|int
name|getLine
parameter_list|()
block|{
return|return
name|line
return|;
block|}
DECL|method|isAligned ()
name|boolean
name|isAligned
parameter_list|()
block|{
return|return
name|aligned
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|LineOnOtherInfo
condition|)
block|{
name|LineOnOtherInfo
name|other
init|=
operator|(
name|LineOnOtherInfo
operator|)
name|obj
decl_stmt|;
return|return
name|aligned
operator|==
name|other
operator|.
name|aligned
operator|&&
name|line
operator|==
name|other
operator|.
name|line
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|line
argument_list|,
name|aligned
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|line
operator|+
literal|" "
operator|+
name|aligned
return|;
block|}
block|}
comment|/**    * Helper class to record line gap info and assist in calculation of line number on the other    * side.    *    *<p>For a mapping from A to B, where A is the side with an insertion:    *    * @field start The start line of the insertion in A.    * @field end The exclusive end line of the insertion in A.    * @field delta The offset added to A to get the line number in B calculated from end.    */
DECL|class|LineGap
specifier|private
specifier|static
class|class
name|LineGap
implements|implements
name|Comparable
argument_list|<
name|LineGap
argument_list|>
block|{
DECL|field|start
specifier|private
specifier|final
name|int
name|start
decl_stmt|;
DECL|field|end
specifier|private
specifier|final
name|int
name|end
decl_stmt|;
DECL|field|delta
specifier|private
specifier|final
name|int
name|delta
decl_stmt|;
DECL|method|LineGap (int start, int end, int delta)
specifier|private
name|LineGap
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|delta
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|delta
operator|=
name|delta
expr_stmt|;
block|}
DECL|method|LineGap (int line)
specifier|private
name|LineGap
parameter_list|(
name|int
name|line
parameter_list|)
block|{
name|this
argument_list|(
name|line
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareTo (LineGap o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|LineGap
name|o
parameter_list|)
block|{
return|return
name|start
operator|-
name|o
operator|.
name|start
return|;
block|}
block|}
block|}
end_class

end_unit

